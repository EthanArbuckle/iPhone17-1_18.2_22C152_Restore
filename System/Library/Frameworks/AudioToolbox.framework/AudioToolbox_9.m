uint64_t AULoudnessWarrior::ProcessMultipleBufferLists(AULoudnessWarrior *this, unsigned int *a2, uint64_t a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  if (a4 == 1 && a6 == 1) {
    return (*(uint64_t (**)(AULoudnessWarrior *, unsigned int *, void, void, uint64_t))(*(void *)this + 176))(this, a2, *a5, *a7, a3);
  }
  else {
    return 4294956428;
  }
}

uint64_t AULoudnessWarrior::ProcessBufferLists(AULoudnessWarrior *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  uint64_t v86 = a5;
  v7 = this;
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  v8 = (AULoudnessWarriorKernel **)((char *)this + 2752);
  v9 = (char *)this + 704;
  do
    BOOL v10 = ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::pop((uint64_t)v9, v8);
  while (v10);
  atomic_store(**((void **)v7 + 344), (unint64_t *)v7 + 348);
  uint64_t mNumberBuffers = a4->mNumberBuffers;
  if (a3->mNumberBuffers != mNumberBuffers) {
    __assert_rtn("ProcessBufferLists", "AULoudnessWarrior.cpp", 571, "inBuffer.mNumberBuffers == outBuffer.mNumberBuffers");
  }
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (8 * mNumberBuffers + 15) & 0xFFFFFFFF0;
  v13 = (const void **)((char *)&v81 - v12);
  if ((unint64_t)(8 * mNumberBuffers) >= 0x200) {
    size_t v14 = 512;
  }
  else {
    size_t v14 = 8 * mNumberBuffers;
  }
  bzero((char *)&v81 - v12, v14);
  MEMORY[0x1F4188790](v15);
  v16 = (void **)((char *)&v81 - v12);
  bzero((char *)&v81 - v12, v14);
  if (mNumberBuffers)
  {
    p_mData = &a4->mBuffers[0].mData;
    v18 = &a3->mBuffers[0].mData;
    v19 = (uint64_t *)((char *)&v81 - v12);
    v20 = (uint64_t *)((char *)&v81 - v12);
    uint64_t v21 = mNumberBuffers;
    do
    {
      v22 = *v18;
      v18 += 2;
      *v19++ = v22;
      v23 = *p_mData;
      p_mData += 2;
      *v20++ = v23;
      --v21;
    }
    while (v21);
    if (*((unsigned char *)v7 + 552))
    {
      size_t v24 = 4 * v86;
      do
      {
        v26 = *v16++;
        v25 = v26;
        v27 = *v13++;
        memcpy(v25, v27, v24);
        --mNumberBuffers;
      }
      while (mNumberBuffers);
      return 0;
    }
  }
  else if (*((unsigned char *)v7 + 552))
  {
    return 0;
  }
  v83 = (char *)&v81 - v12;
  if (atomic_exchange((atomic_uchar *volatile)v7 + 2776, 0))
  {
    v28 = (void *)*((void *)v7 + 344);
    AULoudnessWarrior::GetParameterBlock((AULoudnessWarrior *)&v87, (uint64_t)v7);
    AULoudnessWarriorKernel::SetMeterValues(v28, (uint64_t)&v87);
    uint64_t v29 = *((void *)v7 + 344);
    LODWORD(v87) = 0;
    (*(void (**)(AULoudnessWarrior *, void, void, void, long long *))(*(void *)v7 + 144))(v7, 0, 0, 0, &v87);
    float v30 = *(float *)&v87;
    LODWORD(v87) = 0;
    (*(void (**)(AULoudnessWarrior *, uint64_t, void, void, long long *))(*(void *)v7 + 144))(v7, 1, 0, 0, &v87);
    float v31 = *(float *)&v87;
    LODWORD(v87) = 0;
    (*(void (**)(AULoudnessWarrior *, uint64_t, void, void, long long *))(*(void *)v7 + 144))(v7, 2, 0, 0, &v87);
    *(float *)(v29 + 400) = (float)(v30 + v31) - *(float *)&v87;
  }
  v84 = v8;
  v32 = *v8;
  *((_DWORD *)v32 + 103) = 0;
  *((_DWORD *)v32 + 101) = 0;
  uint64_t v33 = *((void *)v32 + 1);
  if (*((void *)v32 + 2) != v33)
  {
    v82 = v7;
    unint64_t v34 = 0;
    uint64_t v85 = (v86 - 1);
    vDSP_Length v35 = v86;
    while (((*(void *)(*((void *)v32 + 7) + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
    {
LABEL_47:
      ++v34;
      uint64_t v33 = *((void *)v32 + 1);
      if (v34 >= (*((void *)v32 + 2) - v33) >> 3)
      {
        float v60 = *((float *)v32 + 103);
        v7 = v82;
        goto LABEL_50;
      }
    }
    uint64_t v36 = *((void *)v32 + 4) + 24 * v34;
    v37 = *(float **)v36;
    if (v35 > (uint64_t)(*(void *)(v36 + 8) - *(void *)v36) >> 2) {
      __assert_rtn("ProcessMeters", "AULoudnessWarrior.cpp", 899, "numFrames <= mMeterOutputBuffers[i].size()");
    }
    uint64_t v38 = *(void *)(v33 + 8 * v34);
    if (v35 > (uint64_t)(*(void *)(*(void *)(v38 + 80) + 8) - **(void **)(v38 + 80)) >> 2) {
      __assert_rtn("Process", "Meter.cpp", 66, "numFrames <= mWeightingFilterOutputBuffers[0].size()");
    }
    float __A = 0.0;
    vDSP_vfill(&__A, v37, 1, v35);
    uint64_t v39 = *(unsigned int *)(v38 + 232);
    *(void *)&long long v87 = v13;
    *((void *)&v87 + 1) = v39;
    vDSP_Length v88 = v35;
    *(void *)&long long v92 = *(void *)(v38 + 104);
    *((void *)&v92 + 1) = v39;
    vDSP_Length v93 = v35;
    DspLib::Biquad::Filter::process((void *)v38, &v87, &v92);
    if (*(_DWORD *)(v38 + 232))
    {
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      do
      {
        vDSP_vsq(*(const float **)(*(void *)(v38 + 104) + 8 * v41), 1, *(float **)(v38 + 176), 1, v35);
        vDSP_vsmul(*(const float **)(v38 + 176), 1, (const float *)(*(void *)(v38 + 200) + v40), *(float **)(v38 + 176), 1, v35);
        vDSP_vadd(*(const float **)(v38 + 176), 1, v37, 1, v37, 1, v35);
        ++v41;
        v40 += 4;
      }
      while (v41 < *(unsigned int *)(v38 + 232));
    }
    uint64_t v42 = *(void *)(v38 + 72);
    int v43 = *(_DWORD *)(v42 + 20);
    if (v43)
    {
      if (v43 == 1)
      {
        vDSP_vsq(v37, 1, v37, 1, v35);
      }
      else if (v43 == 3)
      {
        if (v86)
        {
          v44 = v37;
          vDSP_Length v45 = v35;
          do
          {
            float v46 = *(float *)(v42 + 28);
            if (*v44 <= v46) {
              uint64_t v47 = 8;
            }
            else {
              uint64_t v47 = 4;
            }
            float v48 = v46 + (float)(*(float *)(v42 + v47) * (float)(*v44 - v46));
            *(float *)(v42 + 28) = v48;
            *v44++ = v48;
            --v45;
          }
          while (v45);
        }
LABEL_43:
        float __B = 1.0e-10;
        vDSP_vsadd(v37, 1, &__B, v37, 1, v35);
        float v90 = 1.0;
        vDSP_vdbcon(v37, 1, &v90, v37, 1, v35, 0);
        if (!*(_DWORD *)(v38 + 224))
        {
          float v89 = -0.691;
          vDSP_vsadd(v37, 1, &v89, v37, 1, v35);
        }
        float v53 = *(float *)(*(void *)(*((void *)v32 + 4) + 24 * v34) + 4 * v85);
        uint64_t v54 = *((void *)v32 + 19);
        *(float *)(v54 + 4 * v34) = v53;
        uint64_t v55 = *((void *)v32 + 10);
        float v56 = *(float *)(v55 + 4 * v34);
        if (v53 >= v56)
        {
          unsigned int v57 = *(_DWORD *)(*((void *)v32 + 22) + 4 * v34);
          uint64_t v58 = *((void *)v32 + 13);
          uint64_t v59 = *((void *)v32 + 16);
          *((float *)v32 + 103) = *((float *)v32 + 103)
                                + (float)((float)(v57 & 1)
                                        * (float)(*(float *)(v59 + 4 * v34)
                                                + (float)(*(float *)(v58 + 4 * v34) * (float)(v53 - v56))));
          *((float *)v32 + 101) = *((float *)v32 + 101)
                                + (float)((float)((v57 >> 1) & 1)
                                        * (float)(*(float *)(v59 + 4 * v34)
                                                + (float)(*(float *)(v58 + 4 * v34)
                                                        * (float)(*(float *)(v54 + 4 * v34) - *(float *)(v55 + 4 * v34)))));
        }
        goto LABEL_47;
      }
    }
    else
    {
      vDSP_vabs(v37, 1, v37, 1, v35);
    }
    if (v86)
    {
      float v49 = *(float *)(v42 + 28);
      v50 = v37;
      vDSP_Length v51 = v35;
      do
      {
        if (*v50 <= v49) {
          uint64_t v52 = 8;
        }
        else {
          uint64_t v52 = 4;
        }
        float v49 = *v50 + (float)(*(float *)(v42 + v52) * (float)(v49 - *v50));
        *v50++ = v49;
        *(float *)(v42 + 28) = v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_43;
  }
  float v60 = 0.0;
LABEL_50:
  float v61 = *((float *)v32 + 100) + v60;
  *((float *)v32 + 104) = v61;
  BiquadInterpolator::GetCoefficientsAtPosition(*((void *)v32 + 32), *((float **)v32 + 29), *((void *)v32 + 30), v61);
  if (*((_DWORD *)v32 + 50))
  {
    uint64_t v62 = 0;
    unint64_t v63 = 0;
    do
    {
      DspLib::Biquad::read(v62 + *((void *)v32 + 29), (uint64_t)&v87);
      uint64_t v64 = *((void *)v32 + 26) + v62;
      long long v65 = v87;
      *(_DWORD *)(v64 + 16) = v88;
      *(_OWORD *)uint64_t v64 = v65;
      ++v63;
      v62 += 20;
    }
    while (v63 < *((unsigned int *)v32 + 50));
  }
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v32 + 328, *((void *)v32 + 26), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v32 + 27) - *((void *)v32 + 26)) >> 2), 0, 0x41uLL);
  float v66 = *((float *)v32 + 100) + *((float *)v32 + 101);
  *((float *)v32 + 102) = v66;
  BiquadInterpolator::GetCoefficientsAtPosition(*((void *)v32 + 40), *((float **)v32 + 37), *((void *)v32 + 38), v66);
  if (*((_DWORD *)v32 + 66))
  {
    uint64_t v67 = 0;
    unint64_t v68 = 0;
    do
    {
      DspLib::Biquad::read(v67 + *((void *)v32 + 37), (uint64_t)&v87);
      uint64_t v69 = *((void *)v32 + 34) + v67;
      long long v70 = v87;
      *(_DWORD *)(v69 + 16) = v88;
      *(_OWORD *)uint64_t v69 = v70;
      ++v68;
      v67 += 20;
    }
    while (v68 < *((unsigned int *)v32 + 66));
  }
  DspLib::Biquad::Filter::setCoefficients((uint64_t)v32 + 328, *((void *)v32 + 34), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v32 + 35) - *((void *)v32 + 34)) >> 2), *((unsigned int *)v32 + 50), 0x41uLL);
  uint64_t v71 = *((void *)v32 + 47);
  *(void *)&long long v87 = v13;
  *((void *)&v87 + 1) = v71;
  vDSP_Length v88 = v86;
  *(void *)&long long v92 = v83;
  *((void *)&v92 + 1) = v71;
  vDSP_Length v93 = v86;
  DspLib::Biquad::Filter::process((void *)v32 + 41, &v87, &v92);
  if (*v84)
  {
    Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(Element, 4u, *(float *)(*((void *)v7 + 344) + 412), 0);
    v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(v73, 6u, *(float *)(*((void *)v7 + 344) + 404), 0);
    v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(v74, 0xEu, **(float **)(*((void *)v7 + 344) + 152), 0);
    v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(v75, 0x19u, *(float *)(*(void *)(*((void *)v7 + 344) + 152) + 4), 0);
    v76 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(v76, 0x24u, *(float *)(*(void *)(*((void *)v7 + 344) + 152) + 8), 0);
    v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(v77, 5u, *(float *)(*((void *)v7 + 344) + 416), 0);
    v78 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(v78, 7u, *(float *)(*((void *)v7 + 344) + 408), 0);
    v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessWarrior *)((char *)v7 + 32), 0);
    ausdk::AUElement::SetParameter(v79, 3u, *(float *)(*((void *)v7 + 344) + 400), 0);
  }
  return 0;
}

BOOL ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::pop(uint64_t a1, AULoudnessWarriorKernel **a2)
{
  BOOL v10 = 0;
  BOOL v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v10);
  if (v4)
  {
    v5 = v10;
    if (!v10) {
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    }
    v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1BB588CF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float AULoudnessWarrior::GetParameterBlock(AULoudnessWarrior *this, uint64_t a2)
{
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 8, 0, 0, &v5);
  *(float *)this = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 9, 0, 0, &v5);
  *((float *)this + 1) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 10, 0, 0, &v5);
  *((float *)this + 2) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 11, 0, 0, &v5);
  *((float *)this + 3) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 12, 0, 0, &v5);
  *((float *)this + 4) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 13, 0, 0, &v5);
  *((float *)this + 5) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 14, 0, 0, &v5);
  *((float *)this + 6) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 15, 0, 0, &v5);
  *((float *)this + 7) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 16, 0, 0, &v5);
  *((float *)this + 8) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 17, 0, 0, &v5);
  *((float *)this + 9) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 18, 0, 0, &v5);
  *((float *)this + 10) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 19, 0, 0, &v5);
  *((float *)this + 11) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 20, 0, 0, &v5);
  *((float *)this + 12) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 21, 0, 0, &v5);
  *((float *)this + 13) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 22, 0, 0, &v5);
  *((float *)this + 14) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 23, 0, 0, &v5);
  *((float *)this + 15) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 24, 0, 0, &v5);
  *((float *)this + 16) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 25, 0, 0, &v5);
  *((float *)this + 17) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 26, 0, 0, &v5);
  *((float *)this + 18) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 27, 0, 0, &v5);
  *((float *)this + 19) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 28, 0, 0, &v5);
  *((float *)this + 20) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 29, 0, 0, &v5);
  *((float *)this + 21) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 30, 0, 0, &v5);
  *((float *)this + 22) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 31, 0, 0, &v5);
  *((float *)this + 23) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 32, 0, 0, &v5);
  *((float *)this + 24) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 33, 0, 0, &v5);
  *((float *)this + 25) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 34, 0, 0, &v5);
  *((float *)this + 26) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 35, 0, 0, &v5);
  *((float *)this + 27) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 36, 0, 0, &v5);
  *((float *)this + 28) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 37, 0, 0, &v5);
  *((float *)this + 29) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 38, 0, 0, &v5);
  *((float *)this + 30) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 39, 0, 0, &v5);
  *((float *)this + 31) = v5;
  float v5 = 0.0;
  (*(void (**)(uint64_t, uint64_t, void, void, float *))(*(void *)a2 + 144))(a2, 40, 0, 0, &v5);
  float result = v5;
  *((float *)this + 32) = v5;
  return result;
}

void AULoudnessWarriorKernel::SetMeterValues(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (a1[2] != v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 20;
    do
    {
      *(_DWORD *)(a1[10] + 4 * v4) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(a1[13] + 4 * v4) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(a1[16] + 4 * v4) = *(_DWORD *)(v5 + 16);
      uint64_t v6 = a1[7];
      unint64_t v7 = v4 >> 6;
      uint64_t v8 = 1 << v4;
      if (*(float *)(v5 - 20) == 0.0)
      {
        uint64_t v11 = *(void *)(v6 + 8 * v7) & ~v8;
      }
      else
      {
        uint64_t v9 = *(void *)(v6 + 8 * v7);
        if ((v9 & v8) == 0)
        {
          uint64_t v10 = *(void *)(v2 + 8 * v4);
          *(_DWORD *)(*(void *)(v10 + 72) + 28) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v10 + 48));
          uint64_t v6 = a1[7];
          uint64_t v9 = *(void *)(v6 + 8 * v7);
          uint64_t v2 = a1[1];
        }
        uint64_t v11 = v9 | v8;
      }
      *(void *)(v6 + 8 * v7) = v11;
      if ((v11 & v8) != 0)
      {
        float v12 = *(float *)v5;
        uint64_t v13 = *(void *)(v2 + 8 * v4);
        double v14 = *(float *)v5;
        double v15 = *(float *)(v13 + 240);
        double v16 = v15 + -0.001;
        double v17 = v15 + 0.001;
        if (v16 >= v14 || v17 <= v14)
        {
          *(float *)(v13 + 240) = v12;
          int v19 = *(_DWORD *)(v13 + 224);
          if ((v19 - 4) <= 2)
          {
            Meter::SetMeterType(v13, v19, *(float *)(v13 + 244), v12);
            uint64_t v2 = a1[1];
          }
          uint64_t v13 = *(void *)(v2 + 8 * v4);
        }
        float v20 = *(float *)(v5 - 4);
        double v21 = *(float *)(v13 + 244);
        double v22 = v21 + -0.5;
        double v23 = v21 + 0.5;
        if (v22 >= v20 || v23 <= v20)
        {
          *(float *)(v13 + 244) = v20;
          int v25 = *(_DWORD *)(v13 + 224);
          if ((v25 - 4) <= 2)
          {
            Meter::SetMeterType(v13, v25, v20, *(float *)(v13 + 240));
            uint64_t v2 = a1[1];
          }
          uint64_t v13 = *(void *)(v2 + 8 * v4);
        }
        int v26 = *(float *)(v5 - 16);
        if (*(_DWORD *)(v13 + 224) != v26)
        {
          Meter::SetMeterType(v13, v26, *(float *)(v13 + 244), *(float *)(v13 + 240));
          uint64_t v2 = a1[1];
          uint64_t v13 = *(void *)(v2 + 8 * v4);
        }
        float v27 = *(float *)(v5 - 12);
        v28 = *(float **)(v13 + 72);
        float v29 = v28[3];
        float v30 = v29 + -1.0;
        float v31 = v29 + 1.0;
        if (v27 <= v30 || v27 >= v31)
        {
          EnvelopeDetector::SetAttackTime((EnvelopeDetector *)v28, v27);
          *(_DWORD *)(*(void *)(v13 + 72) + 28) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v13 + 48));
          uint64_t v2 = a1[1];
          uint64_t v13 = *(void *)(v2 + 8 * v4);
          v28 = *(float **)(v13 + 72);
        }
        float v33 = *(float *)(v5 - 8);
        float v34 = v28[4];
        float v35 = v34 + -1.0;
        float v36 = v34 + 1.0;
        if (v33 <= v35 || v33 >= v36)
        {
          EnvelopeDetector::SetReleaseTime((EnvelopeDetector *)v28, v33);
          *(_DWORD *)(*(void *)(v13 + 72) + 28) = 0;
          DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v13 + 48));
          uint64_t v2 = a1[1];
        }
        *(_DWORD *)(a1[22] + 4 * v4) = *(float *)(v5 + 20);
      }
      ++v4;
      v5 += 44;
    }
    while (v4 < (a1[2] - v2) >> 3);
  }
}

AULoudnessWarriorKernel *std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](AULoudnessWarriorKernel **a1, AULoudnessWarriorKernel *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void AULoudnessWarriorKernel::~AULoudnessWarriorKernel(AULoudnessWarriorKernel *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((AULoudnessWarriorKernel *)((char *)this + 376));
  uint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v3) {
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v3);
  }
  unint64_t v4 = (void *)*((void *)this + 37);
  if (v4)
  {
    *((void *)this + 38) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 34);
  if (v5)
  {
    *((void *)this + 35) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v6) {
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v6);
  }
  unint64_t v7 = (void *)*((void *)this + 29);
  if (v7)
  {
    *((void *)this + 30) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 26);
  if (v8)
  {
    *((void *)this + 27) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 22);
  if (v9)
  {
    *((void *)this + 23) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 19);
  if (v10)
  {
    *((void *)this + 20) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 16);
  if (v11)
  {
    *((void *)this + 17) = v11;
    operator delete(v11);
  }
  float v12 = (void *)*((void *)this + 13);
  if (v12)
  {
    *((void *)this + 14) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 10);
  if (v13)
  {
    *((void *)this + 11) = v13;
    operator delete(v13);
  }
  double v14 = (void *)*((void *)this + 7);
  if (v14) {
    operator delete(v14);
  }
  double v15 = (void **)((char *)this + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  double v15 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<Meter>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void std::vector<std::unique_ptr<Meter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (Meter **)**a1;
  if (v2)
  {
    unint64_t v4 = (Meter **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<Meter>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

Meter *std::unique_ptr<Meter>::reset[abi:ne180100](Meter **a1)
{
  float result = *a1;
  *a1 = 0;
  if (result)
  {
    Meter::~Meter(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void Meter::~Meter(Meter *this)
{
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  uint64_t v8 = (void **)((char *)this + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  uint64_t v8 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6) {
    MEMORY[0x1C185D370](v6, 0x1000C407BE137D4);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((Meter *)((char *)this + 48));
  unint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
}

uint64_t AULoudnessWarrior::CanScheduleParameters(AULoudnessWarrior *this)
{
  return 0;
}

uint64_t AULoudnessWarrior::SetParameter(AULoudnessWarrior *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  return 0;
}

uint64_t AULoudnessWarrior::SetProperty(AULoudnessWarrior *this, int a2, int a3, uint64_t a4, const void **a5, int a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    float v12 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    float v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    *(void *)&buf[4] = "AULoudnessWarrior.cpp";
    __int16 v26 = 1024;
    int v27 = 428;
    __int16 v28 = 1024;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a3;
    __int16 v32 = 1024;
    int v33 = a4;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d SetProperty ID=%d scope=%d bus=%d\n", buf, 0x24u);
  }
LABEL_9:
  if (a3) {
    return 4294956417;
  }
  if (a2 != 8900)
  {
    if (a2 != 21) {
      return 4294956417;
    }
    if (a6 == 4)
    {
      int v14 = *(_DWORD *)a5;
      if ((*(_DWORD *)a5 != 0) != (*((unsigned char *)this + 552) != 0))
      {
        unsigned __int8 v15 = atomic_load((unsigned __int8 *)this + 2792);
        if ((v15 & 1) == 0)
        {
          if (!v14 && *((unsigned char *)this + 552))
          {
            if (*((unsigned char *)this + 17)) {
              (*(void (**)(AULoudnessWarrior *, void, void))(*(void *)this + 72))(this, 0, 0);
            }
          }
          (*(void (**)(AULoudnessWarrior *, BOOL))(*(void *)this + 608))(this, v14 != 0);
        }
      }
      return 0;
    }
    return 4294956445;
  }
  if (!*((unsigned char *)this + 17))
  {
    CACFDictionary::operator=((uint64_t)this + 2760, *a5);
    return 0;
  }
  *(void *)buf = *a5;
  *(_WORD *)&buf[8] = 0;
  AULoudnessWarrior::CreateKernel((AULoudnessWarrior *)&v23, this, (CFDictionaryRef *)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  if (!v23)
  {
    if (AULoudnessWarriorLogScope(void)::once != -1) {
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
    }
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      float v20 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
        return 4294956445;
      }
    }
    else
    {
      float v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AULoudnessWarrior.cpp";
      __int16 v26 = 1024;
      int v27 = 469;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not create staged kernel!\n", buf, 0x12u);
    }
    return 4294956445;
  }
  size_t v24 = 0;
  while (ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::pop((uint64_t)this + 704, &v24));
  atomic_exchange((atomic_uchar *volatile)this + 2689, 1u);
  double v16 = v23;
  *(void *)buf = v23;
  BOOL v17 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>((uint64_t)this + 768, buf);
  if (v17)
  {
    double v16 = 0;
    double v23 = 0;
  }
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::drain_trash((uint64_t)this + 704);
  if (v24)
  {
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v24);
    MEMORY[0x1C185D370](v18);
  }
  if (v17)
  {
    CACFDictionary::operator=((uint64_t)this + 2760, *a5);
    (*(void (**)(AULoudnessWarrior *, uint64_t, void, uint64_t))(*(void *)this + 432))(this, 8900, 0, a4);
    if (AULoudnessWarriorLogScope(void)::once != -1) {
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
    }
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      int v19 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(void *)AULoudnessWarriorLogScope(void)::scope)
      {
LABEL_54:
        LOBYTE(v21) = 1;
        goto LABEL_55;
      }
    }
    else
    {
      int v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AULoudnessWarrior.cpp";
      __int16 v26 = 1024;
      int v27 = 461;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Changed config plist successfully\n", buf, 0x12u);
    }
    goto LABEL_54;
  }
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    double v21 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      goto LABEL_55;
    }
  }
  else
  {
    double v21 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "AULoudnessWarrior.cpp";
    __int16 v26 = 1024;
    int v27 = 464;
    _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not queue staged kernel!\n", buf, 0x12u);
  }
  LOBYTE(v21) = 0;
LABEL_55:
  double v23 = 0;
  if (v16)
  {
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v16);
    MEMORY[0x1C185D370](v22);
    if (v21) {
      return 0;
    }
  }
  else if (v21)
  {
    return 0;
  }
  return 4294956433;
}

void sub_1BB58A0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AULoudnessWarriorKernel *a9)
{
}

void AULoudnessWarrior::CreateKernel(AULoudnessWarrior *this, const CACFDictionary *a2, CFDictionaryRef *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t Element = ausdk::AUScope::SafeGetElement((const CACFDictionary *)((char *)a2 + 80), 0);
  uint64_t v7 = ausdk::AUScope::SafeGetElement((const CACFDictionary *)((char *)a2 + 128), 0);
  uint64_t v8 = (double *)(Element + 80);
  if (*(double *)(v7 + 80) != *(double *)(Element + 80)
    || ((unsigned int v9 = *(_DWORD *)(Element + 108), v9 == *(_DWORD *)(v7 + 108))
      ? (BOOL v10 = *(_DWORD *)(v7 + 88) == 1819304813)
      : (BOOL v10 = 0),
        !v10
     || (*(_DWORD *)(v7 + 92) & 1) == 0
     || ((v11 = v9 > 7, int v12 = (1 << v9) & 0xB0, !v11) ? (v13 = v12 == 0) : (v13 = 1), !v13)))
  {
    *(void *)this = 0;
    return;
  }
  double v56 = 0.0;
  int v14 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v55 = 257;
  CFArrayRef v52 = CFArrayCreateMutable(0, 0, v14);
  __int16 v53 = 257;
  CFArrayRef v50 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v51 = 257;
  if (!*a3 || !CFDictionaryGetCount(*a3))
  {
    AULoudnessWarrior::SetPassthroughModeAndBypass(a2, &v56, &Mutable, &v52, &v50);
    goto LABEL_20;
  }
  CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  LOWORD(v45) = 257;
  CACFDictionary::GetCACFArray(a3, @"Anchors", (CACFArray *)&theArray);
  if (theArray && CFArrayGetCount(theArray))
  {
    CACFArray::operator=((uint64_t)&Mutable, (uint64_t)&theArray);
    if (CFDictionaryContainsKey(*a3, @"Latency")) {
      CACFDictionary::GetFloat64((uint64_t)*a3, @"Latency", &v56);
    }
    else {
      double v56 = 0.0;
    }
    snprintf(buf, 0x40uLL, "biquads_%.0f", *v8);
    CFStringRef v32 = CFStringCreateWithCString(0, buf, 0x600u);
    if (CFDictionaryContainsKey(*a3, v32))
    {
LABEL_99:
      CFMutableDictionaryRef v42 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      LOWORD(v43) = 257;
      CACFDictionary::GetCACFDictionary(a3, v32, (CACFDictionary *)&v42);
      CFRelease(v32);
      CFArrayRef v48 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      __int16 v49 = 257;
      CFMutableArrayRef v46 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      __int16 v47 = 257;
      CACFDictionary::GetCACFArray(&v42, @"BassBiquads", (CACFArray *)&v48);
      CACFDictionary::GetCACFArray(&v42, @"TrebleBiquads", (CACFArray *)&v46);
      if (v48 && CFArrayGetCount(v48) && v48 && CFArrayGetCount(v48))
      {
        CACFArray::operator=((uint64_t)&v52, (uint64_t)&v48);
        CACFArray::operator=((uint64_t)&v50, (uint64_t)&v46);
LABEL_110:
        CACFArray::~CACFArray((CACFArray *)&v46);
        CACFArray::~CACFArray((CACFArray *)&v48);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v42);
        CACFArray::~CACFArray((CACFArray *)&theArray);
LABEL_20:
        CFHelper::extractVector<float>((uint64_t)v64, &Mutable);
        CFHelper::extractVectorOfVectors<float>((uint64_t *)&theArray, &v52);
        CFHelper::extractVectorOfVectors<float>((uint64_t *)&v42, &v50);
        unint64_t v15 = (uint64_t)(*(void *)&v64[8] - *(void *)v64) >> 2;
        if (v15 == 0xAAAAAAAAAAAAAAABLL * ((v45 - theArray) >> 3))
        {
          if (v15 == (v43 - v42) / 24)
          {
            if (v45 == theArray)
            {
LABEL_33:
              if (v43 == v42)
              {
LABEL_43:
                AULoudnessWarrior::GetParameterBlock((AULoudnessWarrior *)buf, (uint64_t)a2);
                LODWORD(v48) = *((_DWORD *)a2 + 84);
                std::make_unique[abi:ne180100]<AULoudnessWarriorKernel,std::vector<float> &,std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::array<std::array<float,11ul>,3ul>,double const&,unsigned int const&,unsigned int>();
              }
              uint64_t v22 = 0;
              double v23 = (void *)((char *)v42 + 8);
              if (v15 <= 1) {
                unint64_t v15 = 1;
              }
              while (1)
              {
                uint64_t v24 = *(v23 - 1);
                unint64_t v25 = (*v23 - v24) >> 2;
                if (*v23 == v24 || v25 % 5 != 0)
                {
                  if (AULoudnessWarriorLogScope(void)::once != -1) {
                    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
                  }
                  if (AULoudnessWarriorLogScope(void)::scope)
                  {
                    uint64_t v34 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
                      goto LABEL_71;
                    }
                  }
                  else
                  {
                    uint64_t v34 = MEMORY[0x1E4F14500];
                  }
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v41 = (uint64_t)(*((void *)v42 + 3 * v22 + 1) - *((void *)v42 + 3 * v22)) >> 2;
                    *(_DWORD *)buf = 136315650;
                    *(void *)&buf[4] = "AULoudnessWarrior.cpp";
                    __int16 v58 = 1024;
                    int v59 = 742;
                    __int16 v60 = 2048;
                    uint64_t v61 = v41;
                    int v29 = "%25s:%-5d Invalid treble EQ sizes: BQ vector has %lu coefficients\n";
                    goto LABEL_131;
                  }
                  goto LABEL_71;
                }
                if (v25 != (uint64_t)(*((void *)v42 + 1) - *(void *)v42) >> 2) {
                  break;
                }
                ++v22;
                v23 += 3;
                if (v15 == v22) {
                  goto LABEL_43;
                }
              }
              if (AULoudnessWarriorLogScope(void)::once != -1) {
                dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
              }
              if (AULoudnessWarriorLogScope(void)::scope)
              {
                float v35 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
                  goto LABEL_71;
                }
              }
              else
              {
                float v35 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&buf[4] = "AULoudnessWarrior.cpp";
                __int16 v58 = 1024;
                int v59 = 747;
                int v29 = "%25s:%-5d Invalid treble EQ sizes: BQ vectors must be same length\n";
                goto LABEL_135;
              }
            }
            else
            {
              uint64_t v16 = 0;
              BOOL v17 = (void *)((char *)theArray + 8);
              if (v15 <= 1) {
                uint64_t v18 = 1;
              }
              else {
                uint64_t v18 = (uint64_t)(*(void *)&v64[8] - *(void *)v64) >> 2;
              }
              while (1)
              {
                uint64_t v19 = *(v17 - 1);
                unint64_t v20 = (*v17 - v19) >> 2;
                if (*v17 == v19 || v20 % 5 != 0)
                {
                  if (AULoudnessWarriorLogScope(void)::once != -1) {
                    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
                  }
                  if (AULoudnessWarriorLogScope(void)::scope)
                  {
                    uint64_t v34 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
                      goto LABEL_71;
                    }
                  }
                  else
                  {
                    uint64_t v34 = MEMORY[0x1E4F14500];
                  }
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v40 = (uint64_t)(*((void *)theArray + 3 * v16 + 1) - *((void *)theArray + 3 * v16)) >> 2;
                    *(_DWORD *)buf = 136315650;
                    *(void *)&buf[4] = "AULoudnessWarrior.cpp";
                    __int16 v58 = 1024;
                    int v59 = 728;
                    __int16 v60 = 2048;
                    uint64_t v61 = v40;
                    int v29 = "%25s:%-5d Invalid bass EQ sizes: BQ vector has %lu coefficients\n";
LABEL_131:
                    __int16 v30 = v34;
                    uint32_t v31 = 28;
                    goto LABEL_70;
                  }
                  goto LABEL_71;
                }
                if (v20 != (uint64_t)(*((void *)theArray + 1) - *(void *)theArray) >> 2) {
                  break;
                }
                ++v16;
                v17 += 3;
                if (v18 == v16) {
                  goto LABEL_33;
                }
              }
              if (AULoudnessWarriorLogScope(void)::once != -1) {
                dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
              }
              if (AULoudnessWarriorLogScope(void)::scope)
              {
                float v35 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
                if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
                  goto LABEL_71;
                }
              }
              else
              {
                float v35 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&buf[4] = "AULoudnessWarrior.cpp";
                __int16 v58 = 1024;
                int v59 = 733;
                int v29 = "%25s:%-5d Invalid bass EQ sizes: BQ vectors must be same length\n";
LABEL_135:
                __int16 v30 = v35;
                uint32_t v31 = 18;
                goto LABEL_70;
              }
            }
            goto LABEL_71;
          }
          if (AULoudnessWarriorLogScope(void)::once != -1) {
            dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
          }
          if (AULoudnessWarriorLogScope(void)::scope)
          {
            int v27 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
            if (!*(void *)AULoudnessWarriorLogScope(void)::scope)
            {
LABEL_71:
              *(void *)this = 0;
              *(void *)buf = &v42;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              *(void *)buf = &theArray;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              if (*(void *)v64)
              {
                *(void *)&v64[8] = *(void *)v64;
                operator delete(*(void **)v64);
              }
              goto LABEL_116;
            }
          }
          else
          {
            int v27 = MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            goto LABEL_71;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "AULoudnessWarrior.cpp";
          __int16 v58 = 1024;
          int v59 = 721;
          __int16 v60 = 2048;
          uint64_t v61 = (uint64_t)(*(void *)&v64[8] - *(void *)v64) >> 2;
          __int16 v62 = 2048;
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v45 - theArray) >> 3);
          int v29 = "%25s:%-5d Invalid treble EQ sizes: Anchor gains size = %lu, # BQs = %lu\n";
        }
        else
        {
          if (AULoudnessWarriorLogScope(void)::once != -1) {
            dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
          }
          if (AULoudnessWarriorLogScope(void)::scope)
          {
            int v27 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
            if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
              goto LABEL_71;
            }
          }
          else
          {
            int v27 = MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            goto LABEL_71;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "AULoudnessWarrior.cpp";
          __int16 v58 = 1024;
          int v59 = 717;
          __int16 v60 = 2048;
          uint64_t v61 = (uint64_t)(*(void *)&v64[8] - *(void *)v64) >> 2;
          __int16 v62 = 2048;
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v45 - theArray) >> 3);
          int v29 = "%25s:%-5d Invalid bass EQ sizes: Anchor gains size = %lu, # BQs = %lu\n";
        }
        __int16 v30 = v27;
        uint32_t v31 = 38;
LABEL_70:
        _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
        goto LABEL_71;
      }
      unsigned __int8 v37 = atomic_load((unsigned __int8 *)a2 + 2792);
      if (v37) {
        goto LABEL_110;
      }
      if (AULoudnessWarriorLogScope(void)::once != -1) {
        dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
      }
      if (AULoudnessWarriorLogScope(void)::scope)
      {
        uint64_t v38 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
        if (!*(void *)AULoudnessWarriorLogScope(void)::scope)
        {
LABEL_114:
          *(void *)this = 0;
          CACFArray::~CACFArray((CACFArray *)&v46);
          CACFArray::~CACFArray((CACFArray *)&v48);
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v42);
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v38 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = *(void *)v8;
        *(_DWORD *)uint64_t v64 = 136315650;
        *(void *)&v64[4] = "AULoudnessWarrior.cpp";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 706;
        __int16 v65 = 2048;
        uint64_t v66 = v39;
        _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Bass or treble BQs not defined correctly for sample rate of %.0f!\n", v64, 0x1Cu);
      }
      goto LABEL_114;
    }
    if (AULoudnessWarriorLogScope(void)::once != -1) {
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
    }
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      int v33 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(void *)AULoudnessWarriorLogScope(void)::scope)
      {
LABEL_98:
        AULoudnessWarrior::SetPassthroughModeAndBypass(a2, &v56, &Mutable, &v52, &v50);
        goto LABEL_99;
      }
    }
    else
    {
      int v33 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(void *)v8;
      *(_DWORD *)uint64_t v64 = 136315650;
      *(void *)&v64[4] = "AULoudnessWarrior.cpp";
      *(_WORD *)&v64[12] = 1024;
      *(_DWORD *)&v64[14] = 691;
      __int16 v65 = 2048;
      uint64_t v66 = v36;
      _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No entry in biquad .plist for sample rate of %.0f!\n", v64, 0x1Cu);
    }
    goto LABEL_98;
  }
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (!AULoudnessWarriorLogScope(void)::scope)
  {
    __int16 v28 = MEMORY[0x1E4F14500];
LABEL_63:
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "AULoudnessWarrior.cpp";
      __int16 v58 = 1024;
      int v59 = 676;
      _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d No anchor gains defined!\n", buf, 0x12u);
    }
    goto LABEL_65;
  }
  __int16 v28 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
  if (*(void *)AULoudnessWarriorLogScope(void)::scope) {
    goto LABEL_63;
  }
LABEL_65:
  *(void *)this = 0;
LABEL_115:
  CACFArray::~CACFArray((CACFArray *)&theArray);
LABEL_116:
  CACFArray::~CACFArray((CACFArray *)&v50);
  CACFArray::~CACFArray((CACFArray *)&v52);
  CACFArray::~CACFArray((CACFArray *)&Mutable);
}

void sub_1BB58AE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void **a27)
{
  a27 = (void **)&a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a27);
  a27 = (void **)&a13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a27);
  int v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(void *)(v27 - 136) = v29;
    operator delete(v29);
  }
  CACFArray::~CACFArray((CACFArray *)&a20);
  CACFArray::~CACFArray((CACFArray *)&a22);
  CACFArray::~CACFArray((CACFArray *)&a24);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::drain_trash(uint64_t a1)
{
  uint64_t v3 = 0;
  v1 = (atomic_uint *)(a1 + 1024);
  while (1)
  {
    BOOL result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result) {
      break;
    }
    if (!v3) {
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    }
    AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v3);
    MEMORY[0x1C185D370]();
  }
  return result;
}

void AULoudnessWarrior::SetPassthroughModeAndBypass(AULoudnessWarrior *this, double *a2, CFMutableArrayRef *a3, CFMutableArrayRef *a4, CFMutableArrayRef *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    BOOL v10 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "AULoudnessWarrior.cpp";
    __int16 v13 = 1024;
    int v14 = 619;
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No valid .plist file set, going to passthrough mode and bypassing LoudnessWarrior\n", buf, 0x12u);
  }
LABEL_9:
  if (a2) {
    *a2 = 0.0;
  }
  if (*((unsigned char *)a3 + 9) && *a3) {
    CFArrayRemoveAllValues(*a3);
  }
  CACFArray::AppendFloat32(a3, 0.0);
  *(void *)buf = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(_WORD *)&buf[8] = 257;
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 1.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  CACFArray::AppendFloat32((CFMutableArrayRef *)buf, 0.0);
  if (*((unsigned char *)a4 + 9))
  {
    if (!*a4) {
      goto LABEL_20;
    }
    CFArrayRemoveAllValues(*a4);
  }
  if (*a4 && *((unsigned char *)a4 + 9)) {
    CFArrayAppendValue(*a4, *(const void **)buf);
  }
LABEL_20:
  if (*((unsigned char *)a5 + 9))
  {
    if (!*a5) {
      goto LABEL_26;
    }
    CFArrayRemoveAllValues(*a5);
  }
  if (*a5 && *((unsigned char *)a5 + 9)) {
    CFArrayAppendValue(*a5, *(const void **)buf);
  }
LABEL_26:
  int v11 = 1;
  (*(void (**)(AULoudnessWarrior *, uint64_t, void, void, int *, uint64_t))(*(void *)this + 96))(this, 21, 0, 0, &v11, 4);
  atomic_store(1u, (unsigned __int8 *)this + 2792);
  CACFArray::~CACFArray((CACFArray *)buf);
}

void sub_1BB58B1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t CACFArray::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
  }
  uint64_t v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v5);
  }
  return a1;
}

void std::make_unique[abi:ne180100]<AULoudnessWarriorKernel,std::vector<float> &,std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::array<std::array<float,11ul>,3ul>,double const&,unsigned int const&,unsigned int>()
{
}

void sub_1BB58B910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DspLib::Biquad::Filter *a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,char a27)
{
  int v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(void *)(v27 - 136) = v29;
    operator delete(v29);
  }
  DspLib::Biquad::Filter::~Filter(a9);
  uint64_t v30 = a25[40];
  a25[40] = 0;
  if (v30) {
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v30);
  }
  uint32_t v31 = *a10;
  if (*a10)
  {
    a25[38] = v31;
    operator delete(v31);
  }
  CFStringRef v32 = *a11;
  if (*a11)
  {
    a25[35] = v32;
    operator delete(v32);
  }
  uint64_t v33 = a25[32];
  a25[32] = 0;
  if (v33) {
    std::default_delete<BiquadInterpolator>::operator()[abi:ne180100](v33);
  }
  uint64_t v34 = *a12;
  if (*a12)
  {
    a25[30] = v34;
    operator delete(v34);
  }
  float v35 = *a13;
  if (*a13)
  {
    a25[27] = v35;
    operator delete(v35);
  }
  uint64_t v36 = *a14;
  if (*a14)
  {
    a25[23] = v36;
    operator delete(v36);
  }
  unsigned __int8 v37 = *a15;
  if (*a15)
  {
    a25[20] = v37;
    operator delete(v37);
  }
  uint64_t v38 = *a16;
  if (*a16)
  {
    a25[17] = v38;
    operator delete(v38);
  }
  uint64_t v39 = *a17;
  if (*a17)
  {
    a25[14] = v39;
    operator delete(v39);
  }
  uint64_t v40 = *a18;
  if (*a18)
  {
    a25[11] = v40;
    operator delete(v40);
  }
  if (*a19) {
    operator delete(*a19);
  }
  *(void *)(v27 - 144) = a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  *(void *)(v27 - 144) = a22;
  std::vector<std::unique_ptr<Meter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  MEMORY[0x1C185D370](a25, 0x10B0C4052777E08);
  _Unwind_Resume(a1);
}

void ___Z25AULoudnessWarriorLogScopev_block_invoke()
{
}

uint64_t AULoudnessWarrior::GetProperty(AULoudnessWarrior *this, int a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    BOOL v10 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 136316162;
    uint64_t v15 = "AULoudnessWarrior.cpp";
    __int16 v16 = 1024;
    int v17 = 403;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d GetProperty ID=%d scope=%d bus=%d\n", (uint8_t *)&v14, 0x24u);
  }
LABEL_9:
  if (a2 != 8900 || a3)
  {
    uint64_t result = 4294956417;
    if (a2 == 21 && !a3)
    {
      if ((*(unsigned int (**)(AULoudnessWarrior *))(*(void *)this + 600))(this))
      {
        uint64_t result = 0;
        *a5 = *((unsigned __int8 *)this + 552);
      }
      else
      {
        return 4294956417;
      }
    }
  }
  else
  {
    int v11 = (const void *)*((void *)this + 345);
    if (v11)
    {
      CFRetain(v11);
      uint64_t v12 = *((void *)this + 345);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t result = 0;
    *(void *)a5 = v12;
  }
  return result;
}

uint64_t AULoudnessWarrior::GetPropertyInfo(AULoudnessWarrior *this, int a2, int a3, int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    uint64_t v12 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136316162;
    __int16 v16 = "AULoudnessWarrior.cpp";
    __int16 v17 = 1024;
    int v18 = 376;
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 1024;
    int v24 = a4;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d GetPropertyInfo ID=%d scope=%d bus=%d\n", (uint8_t *)&v15, 0x24u);
  }
LABEL_9:
  if (a2 == 8900 && !a3)
  {
    unsigned int v13 = 8;
LABEL_16:
    uint64_t result = 0;
    *a6 = 1;
    *a5 = v13;
    return result;
  }
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (!(*(unsigned int (**)(AULoudnessWarrior *))(*(void *)this + 600))(this)) {
      return 4294956417;
    }
    unsigned int v13 = 4;
    goto LABEL_16;
  }
  return result;
}

uint64_t AULoudnessWarrior::Reset(AULoudnessWarrior *this)
{
  v1 = (void *)*((void *)this + 344);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)v1[1];
    uint64_t v3 = (uint64_t *)v1[2];
    while (v2 != v3)
    {
      uint64_t v4 = *v2++;
      *(_DWORD *)(*(void *)(v4 + 72) + 28) = 0;
      DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v4 + 48));
    }
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v1 + 47));
  }
  return 0;
}

uint64_t AULoudnessWarrior::Initialize(AULoudnessWarrior *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessWarrior *)((char *)this + 80), 0) + 108);
    int v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessWarrior *)((char *)this + 128), 0) + 108);
    *(_DWORD *)BOOL v10 = 136315906;
    *(void *)&v10[4] = "AULoudnessWarrior.cpp";
    __int16 v11 = 1024;
    int v12 = 233;
    __int16 v13 = 1024;
    int v14 = v3;
    __int16 v15 = 1024;
    int v16 = v4;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting Initializing with %d ins, %d outs\n", v10, 0x1Eu);
  }
LABEL_9:
  uint64_t v5 = AUJBase::Initialize(this);
  if (v5) {
    return v5;
  }
  AULoudnessWarrior::CreateKernel((AULoudnessWarrior *)v10, this, (CFDictionaryRef *)this + 345);
  std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100]((AULoudnessWarriorKernel **)this + 344, *(AULoudnessWarriorKernel **)v10);
  BOOL v7 = (unint64_t *)*((void *)this + 344);
  if (!v7)
  {
    if (AULoudnessWarriorLogScope(void)::once != -1) {
      dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
    }
    if (AULoudnessWarriorLogScope(void)::scope)
    {
      uint64_t v8 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
      if (!*(void *)AULoudnessWarriorLogScope(void)::scope)
      {
LABEL_21:
        uint64_t v5 = 4294956421;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)BOOL v10 = 136315394;
      *(void *)&v10[4] = "AULoudnessWarrior.cpp";
      __int16 v11 = 1024;
      int v12 = 245;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not initilize kernel\n", v10, 0x12u);
    }
    goto LABEL_21;
  }
  uint64_t v5 = 0;
  atomic_store(*v7, (unint64_t *)this + 348);
LABEL_22:
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, &kAuPresets);
  (*(void (**)(AULoudnessWarrior *, void, void))(*(void *)this + 72))(this, 0, 0);
  if (AULoudnessWarriorLogScope(void)::once != -1) {
    dispatch_once(&AULoudnessWarriorLogScope(void)::once, &__block_literal_global_14704);
  }
  if (AULoudnessWarriorLogScope(void)::scope)
  {
    unsigned int v9 = *(NSObject **)AULoudnessWarriorLogScope(void)::scope;
    if (!*(void *)AULoudnessWarriorLogScope(void)::scope) {
      return v5;
    }
  }
  else
  {
    unsigned int v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)BOOL v10 = 136315394;
    *(void *)&v10[4] = "AULoudnessWarrior.cpp";
    __int16 v11 = 1024;
    int v12 = 268;
    _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d End Initialize()", v10, 0x12u);
  }
  return v5;
}

void AULoudnessWarrior::~AULoudnessWarrior(AULoudnessWarrior *this)
{
  AULoudnessWarrior::~AULoudnessWarrior(this);

  JUMPOUT(0x1C185D360);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14B5750;
  CACFDictionary::~CACFDictionary((AULoudnessWarrior *)((char *)this + 2760));
  std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100]((AULoudnessWarriorKernel **)this + 344, 0);
  *((void *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = &unk_1F14B59F0;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue((uint64_t)this + 704);
  *(void *)this = &unk_1F14C2A10;
  uint64_t v2 = (void *)*((void *)this + 76);
  if (v2)
  {
    *((void *)this + 77) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 73);
  if (v3)
  {
    *((void *)this + 74) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 70);
  if (v4)
  {
    *((void *)this + 71) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  *(void *)a1 = &unk_1F14B5A10;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::drain_trash(a1);
  int v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v3))
  {
    if (v3)
    {
      AULoudnessWarriorKernel::~AULoudnessWarriorKernel(v3);
      MEMORY[0x1C185D370]();
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 1024);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 64);
  return a1;
}

void ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue(a1);

  JUMPOUT(0x1C185D360);
}

void ca::concurrent::deferred_deletion_stash<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14B59F0;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));

  JUMPOUT(0x1C185D360);
}

void *ca::concurrent::deferred_deletion_stash<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14B59F0;
  ca::concurrent::deferred_deletion_queue<AULoudnessWarriorKernel,10ul,std::default_delete<AULoudnessWarriorKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void clsp::ConvoyDisplacementController::setLogs(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[112] = v5;
  int v6 = (std::__shared_weak_count *)a1[113];
  a1[113] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[102] = v8;
  unsigned int v9 = (std::__shared_weak_count *)a1[103];
  a1[103] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

float clsp::ConvoyDisplacementController::getAttenuationMax(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 130);
}

float clsp::ConvoyDisplacementController::getflvMax(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 131);
}

double clsp::ConvoyDisplacementController::postProcess(clsp::ConvoyDisplacementController *this)
{
  *(void *)&double result = 1065353216;
  *((void *)this + 65) = 1065353216;
  return result;
}

uint64_t clsp::ConvoyDisplacementController::zapBadValues(uint64_t this)
{
  float64x2_t v1 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  float32x4_t v3 = *(float32x4_t *)(this + 852);
  float32x4_t v4 = vabsq_f32(v3);
  float64x2_t v5 = vcvt_hight_f64_f32(v4);
  float64x2_t v6 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  *(int8x16_t *)(this + 852) = vandq_s8((int8x16_t)v3, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v6, v1), (int8x16_t)vcgtq_f64(v2, v6)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v5, v1), (int8x16_t)vcgtq_f64(v2, v5))));
  float v7 = *(float *)(this + 400);
  uint64_t v8 = *(void *)(this + 136);
  uint64_t v9 = *(void *)(this + 144);
  float64x2_t v10 = *(float64x2_t *)(v8 + 40);
  float64x2_t v11 = vabsq_f64(v10);
  *(int8x16_t *)(v8 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = vandq_s8((int8x16_t)v10, vandq_s8((int8x16_t)vcgtq_f64(v11, v1), (int8x16_t)vcgtq_f64(v2, v11)));
  float64x2_t v12 = *(float64x2_t *)(v8 + 56);
  float64x2_t v13 = vabsq_f64(v12);
  *(int8x16_t *)(v8 + 56) = vandq_s8((int8x16_t)v12, vandq_s8((int8x16_t)vcgtq_f64(v13, v1), (int8x16_t)vcgtq_f64(v2, v13)));
  v12.f64[0] = *(float64_t *)(this + 100);
  float64x2_t v14 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v12.f64[0]));
  *(int8x8_t *)(this + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = vand_s8(*(int8x8_t *)&v12.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v14, v1), (int8x16_t)vcgtq_f64(v2, v14))));
  float v15 = *(float *)(this + 560);
  double v16 = fabsf(v15);
  if (v16 >= 1.0e15 || v16 <= 1.0e-15) {
    float v15 = 0.0;
  }
  *(float *)(this + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v15;
  float32x2_t v18 = *(float32x2_t *)(this + 120);
  float64x2_t v19 = vcvtq_f64_f32(vabs_f32(v18));
  *(int8x8_t *)(this + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = vand_s8((int8x8_t)v18, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v19, v1), (int8x16_t)vcgtq_f64(v2, v19))));
  float v20 = *(float *)(this + 600);
  double v21 = fabsf(v20);
  if (v21 >= 1.0e15 || v21 <= 1.0e-15) {
    float v20 = 0.0;
  }
  *(float *)(this + 60std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v20;
  float v23 = *(float *)(this + 620);
  double v24 = fabsf(v23);
  if (v24 >= 1.0e15 || v24 <= 1.0e-15) {
    float v23 = 0.0;
  }
  *(float *)(this + 62std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v23;
  float v26 = *(float *)(this + 84);
  double v27 = fabsf(v26);
  if (v27 >= 1.0e15 || v27 <= 1.0e-15) {
    float v26 = 0.0;
  }
  if (v26 >= v7) {
    float v7 = v26;
  }
  *(float *)(this + 84) = v7;
  float64x2_t v29 = *(float64x2_t *)(v9 + 40);
  float64x2_t v30 = vabsq_f64(v29);
  *(int8x16_t *)(v9 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = vandq_s8((int8x16_t)v29, vandq_s8((int8x16_t)vcgtq_f64(v30, v1), (int8x16_t)vcgtq_f64(v2, v30)));
  float64x2_t v31 = *(float64x2_t *)(v9 + 56);
  float64x2_t v32 = vabsq_f64(v31);
  *(int8x16_t *)(v9 + 56) = vandq_s8((int8x16_t)v31, vandq_s8((int8x16_t)vcgtq_f64(v32, v1), (int8x16_t)vcgtq_f64(v2, v32)));
  uint64_t v33 = *(void *)(this + 152);
  float64x2_t v34 = *(float64x2_t *)(v33 + 40);
  float64x2_t v35 = vabsq_f64(v34);
  *(int8x16_t *)(v33 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = vandq_s8((int8x16_t)v34, vandq_s8((int8x16_t)vcgtq_f64(v35, v1), (int8x16_t)vcgtq_f64(v2, v35)));
  float64x2_t v36 = *(float64x2_t *)(v33 + 56);
  float64x2_t v37 = vabsq_f64(v36);
  *(int8x16_t *)(v33 + 56) = vandq_s8((int8x16_t)v36, vandq_s8((int8x16_t)vcgtq_f64(v37, v1), (int8x16_t)vcgtq_f64(v2, v37)));
  v36.f64[0] = *(float64_t *)(this + 172);
  float64x2_t v38 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v36.f64[0]));
  *(int8x8_t *)(this + 172) = vand_s8(*(int8x8_t *)&v36.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v38, v1), (int8x16_t)vcgtq_f64(v2, v38))));
  float v39 = *(float *)(this + 660);
  double v40 = fabsf(v39);
  if (v40 >= 1.0e15 || v40 <= 1.0e-15) {
    float v39 = 0.0;
  }
  *(float *)(this + 66std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v39;
  if (v39 == 0.0) {
    *(_DWORD *)(this + 66std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(this + 656);
  }
  float v42 = *(float *)(this + 700);
  double v43 = fabsf(v42);
  if (v43 >= 1.0e15 || v43 <= 1.0e-15) {
    float v42 = 0.0;
  }
  *(float *)(this + 70std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v42;
  if (v42 == 0.0) {
    *(_DWORD *)(this + 70std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(this + 696);
  }
  float v45 = *(float *)(this + 736);
  double v46 = fabsf(v45);
  if (v46 >= 1.0e15 || v46 <= 1.0e-15) {
    float v45 = 0.0;
  }
  *(float *)(this + 736) = v45;
  double v48 = fabsf(*(float *)(this + 776));
  if (v48 >= 1.0e15 || v48 <= 1.0e-15) {
    float v50 = 0.0;
  }
  else {
    float v50 = *(float *)(this + 776);
  }
  *(float *)(this + 776) = v50;
  return this;
}

double clsp::ConvoyDisplacementController::reset(clsp::ConvoyDisplacementController *this)
{
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 114) = 1065353216;
  *((_DWORD *)this + 184) = 1065353216;
  float v1 = *((float *)this + 99);
  float v2 = fabsf(*((float *)this + 95));
  float v3 = fabsf(*((float *)this + 96));
  if (v3 < v2) {
    float v2 = v3;
  }
  float v4 = v1 * v2;
  *((float *)this + 19) = v4;
  *((float *)this + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1.0 / v4;
  *((float *)this + 103) = v4;
  *((float *)this + 194) = v4;
  *((float *)this + 102) = v1;
  *(void *)((char *)this + 86std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)((char *)this + 852) = 0;
  *(void *)((char *)this + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *((_DWORD *)this + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 15std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *((_DWORD *)this + 155) = 0;
  *((float *)this + 21) = v4;
  uint64_t v5 = *((void *)this + 17);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  uint64_t v6 = *((void *)this + 18);
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  uint64_t v7 = *((void *)this + 19);
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)((char *)this + 172) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((_DWORD *)this + 165) = *((_DWORD *)this + 164);
  *((_DWORD *)this + 175) = *((_DWORD *)this + 174);
  *((_DWORD *)this + 121) = *((_DWORD *)this + 120);
  *(void *)((char *)this + 50std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *((unsigned char *)this + 508) = 0;
  *(void *)&double result = 1065353216;
  *((void *)this + 65) = 1065353216;
  return result;
}

uint64_t clsp::ConvoyDisplacementController::setSkipTelemetryBuffer(uint64_t this, char a2)
{
  *(unsigned char *)(this + 508) = a2;
  return this;
}

float clsp::ConvoyDisplacementController::getNormAttenFactor(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 21) * *((float *)this + 101);
}

float32_t clsp::ConvoyDisplacementController::analyzeDisp(float32x2_t *this, float a2, float a3)
{
  float v4 = this[57].f32[0];
  float v5 = this[92].f32[0];
  uint64_t v6 = 181;
  if (v5 < v4) {
    uint64_t v6 = 180;
  }
  float v7 = v5 + (float)(this->f32[v6] * (float)(v4 - v5));
  this[92].f32[0] = v7;
  float v8 = this[51].f32[1];
  float v9 = this[97].f32[0];
  uint64_t v10 = 191;
  if (v9 < v8) {
    uint64_t v10 = 190;
  }
  float v11 = v9 + (float)(this->f32[v10] * (float)(v8 - v9));
  this[97].f32[0] = v11;
  float v12 = 1.0 / v11;
  this[9].f32[1] = v11;
  this[10].f32[0] = 1.0 / v11;
  float v13 = this[11].f32[1];
  float v14 = this[12].f32[1];
  float v15 = (float)((float)(v7 * a2) * this[12].f32[0]) - (float)(v14 * this[11].f32[0]);
  float v16 = this[13].f32[0];
  float v17 = this[13].f32[1];
  float v18 = v15 - (float)(v16 * v13);
  this[12].f32[1] = v18;
  this[13].f32[0] = v14;
  float v19 = -(float)(v15 + (float)((float)-v16 * v13));
  if (v18 >= 0.0) {
    float v19 = v18;
  }
  float v20 = this[70].f32[0];
  uint64_t v21 = 137;
  if (v20 < v19) {
    uint64_t v21 = 136;
  }
  float v22 = this->f32[v21];
  float v23 = v19 - v20;
  float v24 = v20 + (float)(v22 * v23);
  this[70].f32[0] = v24;
  if (v11 >= v24) {
    float v25 = v11;
  }
  else {
    float v25 = v20 + (float)(v22 * v23);
  }
  float v26 = this[14].f32[0];
  float v27 = this[15].f32[0];
  float v28 = this[15].f32[1];
  float v29 = (float)((float)(v7 * a3) * this[14].f32[1]) - (float)(v27 * v17);
  float v30 = v29 - (float)(v28 * v26);
  this[15].f32[0] = v30;
  this[15].f32[1] = v27;
  float v31 = -(float)(v29 + (float)((float)-v28 * v26));
  if (v30 >= 0.0) {
    float v31 = v30;
  }
  float v32 = this[75].f32[0];
  uint64_t v33 = 147;
  if (v32 < v31) {
    uint64_t v33 = 146;
  }
  float v34 = this->f32[v33];
  float v35 = v32 + (float)(v34 * (float)(v31 - v32));
  this[75].f32[0] = v35;
  if (v11 >= v35) {
    float v36 = v11;
  }
  else {
    float v36 = v32 + (float)(v34 * (float)(v31 - v32));
  }
  float v37 = this[77].f32[1] + (float)(this[77].f32[0] * (float)((float)(v12 * v36) - this[77].f32[1]));
  this[77].f32[1] = v37;
  v38.f32[0] = v12 * (float)(v25 * v37);
  float32_t v39 = v38.f32[0] * this[50].f32[0];
  v38.f32[1] = v31;
  this[65] = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v38, this[65]), (int8x8_t)v38, (int8x8_t)this[65]);
  this[10].f32[1] = v39;
  double v40 = (clsp::CLSP_Log **)this[112];
  uint64_t v41 = *v40;
  if (*v40)
  {
    float __src = a3;
    clsp::CLSP_Log::LogCLSPData(v41, &__src, 1);
    double v40 = (clsp::CLSP_Log **)this[112];
  }
  float v42 = v40[2];
  if (v42)
  {
    float __src = v18;
    clsp::CLSP_Log::LogCLSPData(v42, &__src, 1);
    double v40 = (clsp::CLSP_Log **)this[112];
    double v43 = v40[2];
    if (v43)
    {
      float __src = v24;
      clsp::CLSP_Log::LogCLSPData(v43, &__src, 1);
      double v40 = (clsp::CLSP_Log **)this[112];
      v44 = v40[2];
      if (v44)
      {
        float __src = v25;
        clsp::CLSP_Log::LogCLSPData(v44, &__src, 1);
        double v40 = (clsp::CLSP_Log **)this[112];
        float v45 = v40[2];
        if (v45)
        {
          float __src = v37;
          clsp::CLSP_Log::LogCLSPData(v45, &__src, 1);
          double v40 = (clsp::CLSP_Log **)this[112];
        }
      }
    }
  }
  double v46 = *v40;
  if (*v40)
  {
    float __src = v30;
    clsp::CLSP_Log::LogCLSPData(v46, &__src, 1);
    __int16 v47 = **(clsp::CLSP_Log ***)&this[112];
    if (v47)
    {
      float __src = v35;
      clsp::CLSP_Log::LogCLSPData(v47, &__src, 1);
      double v48 = **(clsp::CLSP_Log ***)&this[112];
      if (v48)
      {
        float __src = this[10].f32[1];
        clsp::CLSP_Log::LogCLSPData(v48, &__src, 1);
        __int16 v49 = **(clsp::CLSP_Log ***)&this[112];
        if (v49)
        {
          float v50 = (float *)(*(uint64_t (**)(float32x2_t *))(*(void *)this + 128))(this);
          float __src = log10f(v50[21]* (float)((float)((float)((float)(1.0 - v50[12]) + v50[13])* (float)((float)(v50[14] + v50[15]) + v50[16]))/ (float)((float)(v50[12] + 1.0) + v50[13])))* 20.0;
          clsp::CLSP_Log::LogCLSPData(v49, &__src, 1);
        }
      }
    }
  }
  return this[10].f32[1];
}

void clsp::ConvoyDisplacementController::processSample(clsp::ConvoyDisplacementController *this, float a2, float a3)
{
  if (*((unsigned char *)this + 72))
  {
    float v5 = *((float *)this + 21);
    if (v5 >= *((float *)this + 202)) {
      float v5 = *((float *)this + 202);
    }
    float v6 = (float)(*((float *)this + 196) + (float)(*((float *)this + 197) * v5))
       + (float)(*((float *)this + 198) * (float)(v5 * v5));
    float v7 = (float)(*((float *)this + 199) + (float)(*((float *)this + 200) * v5))
       + (float)(*((float *)this + 201) * (float)(v5 * v5));
    *((float *)this + 208) = v6;
    *((float *)this + 209) = v7;
    float v8 = *(clsp::CLSP_Log **)(*((void *)this + 102) + 16);
    if (v8)
    {
      float __src = v6;
      clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
      float v9 = *(clsp::CLSP_Log **)(*((void *)this + 102) + 16);
      if (v9)
      {
        float v14 = v7;
        clsp::CLSP_Log::LogCLSPData(v9, &v14, 1);
      }
    }
    float v10 = *((float *)this + 213);
    float v11 = *((float *)this + 215);
    float v12 = (float)((float)((float)((float)(*((float *)this + 211) * v10) + (float)(a3 * *((float *)this + 210)))
                        + (float)(*((float *)this + 214) * *((float *)this + 212)))
                - (float)(v11 * *((float *)this + 208)))
        - (float)(*((float *)this + 216) * *((float *)this + 209));
    *((float *)this + 213) = a3;
    *((float *)this + 214) = v10;
    *((float *)this + 215) = v12;
    *((float *)this + 216) = v11;
  }
}

uint64_t clsp::ConvoyDisplacementController::calcCoeffsSyncDisp(clsp::ConvoyDisplacementController *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  float v7 = (double *)*((void *)this + 16);
  if (!v7) {
    __assert_rtn("calcCoeffsSyncDisp", "ConvoyDispController.cpp", 272, "mr_dispModel");
  }
  double v13 = 1.0 / a2;
  double v14 = -(1.0 / a2 * a3);
  long double v15 = exp(v14 / (a4 + a4)) * -2.0;
  long double v16 = v15 * cos(v13 * a3 * sqrt(1.0 / (a4 * -4.0 * a4) + 1.0));
  long double v17 = exp(v14 / a4);
  float v18 = (v17 + v16 + 1.0) * (a7 * 1000.0 * v7[1] / (*v7 * v7[4]));
  float v19 = v16;
  *(float *)&long double v17 = v17;
  *((float *)this + 22) = v19;
  *((_DWORD *)this + 23) = LODWORD(v17);
  *((float *)this + 24) = v18;
  LODWORD(v17) = *((_DWORD *)this + 27);
  float v20 = *((float *)this + 28);
  uint64_t v21 = *((void *)this + 11);
  *((_DWORD *)this + 21std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *((_DWORD *)this + 211) = LODWORD(v17);
  *((float *)this + 212) = v20;
  *((void *)this + 104) = v21;
  *(float *)&long double v17 = 1.0 / (1.0 - *(float *)&v17 + v20);
  *((_DWORD *)this + 217) = LODWORD(v17);

  return clsp::LFSNFeedbackCoeffCalc::calcCoeffs((clsp::ConvoyDisplacementController *)((char *)this + 784), a2, a3, a4, a5, 1.0, a6);
}

float clsp::ConvoyDisplacementController::calcCoeffs(clsp::ConvoyDisplacementController *this, double a2, double a3)
{
  float v4 = (double *)*((void *)this + 16);
  if (!v4) {
    __assert_rtn("calcCoeffs", "ConvoyDispController.cpp", 202, "mr_dispModel");
  }
  float v7 = *((float *)this + 99);
  float v8 = v7 * *((float *)this + 95);
  float v9 = v7 * *((float *)this + 96);
  if (v8 > 0.0) {
    float v8 = 0.0;
  }
  if (v9 < 0.0) {
    float v9 = 0.0;
  }
  float v10 = -v8;
  if (v9 > v10) {
    float v9 = v10;
  }
  *((float *)this + 103) = v9;
  *((float *)this + 19) = v9;
  *((float *)this + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1.0 / v9;
  *((float *)this + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9;
  *((float *)this + 101) = 1.0 / v9;
  clsp::DisplacementModelSealed::calcCoeffsFLV(v4, (float *)this + 27, a2, a3);
  float v11 = clsp::DisplacementModelSealed::calcCoeffsFLV(*((double **)this + 16), (float *)this + 40, a2, 1.0);
  float v12 = (double *)*((void *)this + 16);
  double v13 = (*(double (**)(clsp::ConvoyDisplacementController *, float))(*(void *)this + 72))(this, v11);
  double v14 = (*(double (**)(clsp::ConvoyDisplacementController *))(*(void *)this + 40))(this);
  float v15 = clsp::DisplacementModelSealed::calcCoeffsPTP(v12, (float *)this + 22, a2, v13, v14, a3);
  long double v16 = (double *)*((void *)this + 16);
  double v17 = (*(double (**)(clsp::ConvoyDisplacementController *, float))(*(void *)this + 72))(this, v15);
  double v18 = (*(double (**)(clsp::ConvoyDisplacementController *))(*(void *)this + 40))(this);
  clsp::LFSN::calcCoeffs((uint64_t)this + 784, v16, a2, *((double *)this + 11), *((float *)this + 27), *((float *)this + 28), v17, v18, *((float *)this + 100), a3);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 528, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 568, a2);
  double v19 = *((double *)this + 7);
  *((double *)this + 76) = v19;
  double v20 = v19 * a2;
  double v21 = 0.0;
  if (v20 >= 0.00001) {
    double v21 = exp(-4.60517019 / v20);
  }
  float v22 = 1.0 - v21;
  *((float *)this + 154) = v22;
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 17), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 18), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(8, *((double **)this + 19), a2, 1.0);
  *((void *)this + 45) = vcvtad_u64_f64(*((double *)this + 8) * 0.001 * a2);
  *((float32x2_t *)this + 46) = vmul_f32(*(float32x2_t *)((char *)this + 352), (float32x2_t)vrev64_s32(*(int32x2_t *)((char *)this + 380)));
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 624, a2);
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 664, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 704, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 744, a2);
  float result = round(*((float *)this + 123) * 0.001 * a2);
  *((float *)this + 124) = result;
  return result;
}

void clsp::ConvoyDisplacementController::designBQCoeffs(int a1, double *a2, double a3, float a4)
{
  double v5 = a4 * 6.28318531 / a3;
  if (a1 == 9)
  {
    double v12 = tan(v5 * 0.5);
    double v11 = 1.0;
    double v7 = 1.0 / (v12 * 1.41421356 + v12 * v12 + 1.0);
    double v6 = v7 * -2.0;
    double v13 = v12 * v12 + -1.0;
    goto LABEL_5;
  }
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  if (a1 == 8)
  {
    long double v10 = tan(v5 * 0.5);
    double v11 = 1.0;
    double v12 = 1.0 / v10;
    double v7 = 1.0 / (v12 * 1.41421356 + v12 * v12 + 1.0);
    double v6 = v7 + v7;
    double v13 = 1.0 - v12 * v12;
LABEL_5:
    double v8 = (v13 + v13) * v7;
    double v9 = (v11 + v12 * -1.41421356 + v12 * v12) * v7;
  }
  a2[2] = v7;
  a2[3] = v6;
  a2[4] = v7;
  *a2 = v8;
  a2[1] = v9;
}

float clsp::AttackReleaseTo<float,double>::calcCoeffs(uint64_t a1, double a2)
{
  *(double *)(a1 + 16) = a2;
  double v4 = *(double *)(a1 + 8) * a2;
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4 >= 0.00001) {
    double v6 = exp(-4.60517019 / v4);
  }
  float v7 = 1.0 - v6;
  *(float *)(a1 + 28) = v7;
  double v8 = *(double *)a1 * a2;
  if (v8 >= 0.00001) {
    double v5 = exp(-4.60517019 / v8);
  }
  float result = 1.0 - v5;
  *(float *)(a1 + 24) = result;
  return result;
}

float clsp::ConvoyDisplacementController::getAttenuationFactor(clsp::ConvoyDisplacementController *this)
{
  return *((float *)this + 21);
}

uint64_t clsp::ConvoyDisplacementController::setAttenuationFactor(uint64_t this, float a2)
{
  *(float *)(this + 84) = a2;
  return this;
}

uint64_t clsp::ConvoyDisplacementController::getDispEnabled(clsp::ConvoyDisplacementController *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t clsp::ConvoyDisplacementController::setDispEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 72) = a2;
  return this;
}

uint64_t clsp::ConvoyDisplacementController::getLFSN(clsp::ConvoyDisplacementController *this)
{
  return (uint64_t)this + 784;
}

double clsp::ConvoyDisplacementController::getFlvSmoothingTime(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 7);
}

uint64_t clsp::ConvoyDisplacementController::setFlvSmoothingTime(uint64_t this, double a2)
{
  *(double *)(this + 56) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getPeakDecayTime(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 6);
}

double *clsp::ConvoyDisplacementController::setPeakDecayTime(double *this, double a2)
{
  this[6] = a2;
  this[67] = a2;
  this[72] = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getPeakAttackTime(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 5);
}

double *clsp::ConvoyDisplacementController::setPeakAttackTime(double *this, double a2)
{
  this[5] = a2;
  this[66] = a2;
  this[71] = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getQ_d(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 4);
}

uint64_t clsp::ConvoyDisplacementController::setQ_d(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getX_lim(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 3);
}

uint64_t clsp::ConvoyDisplacementController::setX_lim(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

double clsp::ConvoyDisplacementController::getG_bw(clsp::ConvoyDisplacementController *this)
{
  return *((double *)this + 2);
}

uint64_t clsp::ConvoyDisplacementController::setG_bw(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

void clsp::ConvoyDisplacementController::logCoeffs(uint64_t a1, uint64_t a2)
{
  double v4 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v5 = *(double *)(a1 + 16);
  float __src = v5;
  clsp::CLSP_Log::LogCLSPData(v4, &__src, 1);
  double v6 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v7 = *(double *)(a1 + 24);
  float __src = v7;
  clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
  double v8 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v9 = *(double *)(a1 + 32);
  float __src = v9;
  clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
  long double v10 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v11 = *(double *)(a1 + 40);
  float __src = v11;
  clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
  double v12 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v13 = *(double *)(a1 + 48);
  float __src = v13;
  clsp::CLSP_Log::LogCLSPData(v12, &__src, 1);
  double v14 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v15 = *(double *)(a1 + 56);
  float __src = v15;
  clsp::CLSP_Log::LogCLSPData(v14, &__src, 1);
  long double v16 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v17 = *(double *)(a1 + 64);
  float __src = v17;
  clsp::CLSP_Log::LogCLSPData(v16, &__src, 1);
  double v18 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 76);
  clsp::CLSP_Log::LogCLSPData(v18, &__src, 1);
  double v19 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 80);
  clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
  double v20 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 352);
  clsp::CLSP_Log::LogCLSPData(v20, &__src, 1);
  double v21 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 356);
  clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
  float v22 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = (float)*(unint64_t *)(a1 + 360);
  clsp::CLSP_Log::LogCLSPData(v22, &__src, 1);
  float v23 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 368);
  clsp::CLSP_Log::LogCLSPData(v23, &__src, 1);
  float v24 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 372);
  clsp::CLSP_Log::LogCLSPData(v24, &__src, 1);
  float v25 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 376);
  clsp::CLSP_Log::LogCLSPData(v25, &__src, 1);
  float v26 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 380);
  clsp::CLSP_Log::LogCLSPData(v26, &__src, 1);
  float v27 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 384);
  clsp::CLSP_Log::LogCLSPData(v27, &__src, 1);
  float v28 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 388);
  clsp::CLSP_Log::LogCLSPData(v28, &__src, 1);
  float v29 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 392);
  clsp::CLSP_Log::LogCLSPData(v29, &__src, 1);
  float v30 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 396);
  clsp::CLSP_Log::LogCLSPData(v30, &__src, 1);
  float v31 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 400);
  clsp::CLSP_Log::LogCLSPData(v31, &__src, 1);
  float v32 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 404);
  clsp::CLSP_Log::LogCLSPData(v32, &__src, 1);
  uint64_t v33 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 460);
  clsp::CLSP_Log::LogCLSPData(v33, &__src, 1);
  float v34 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 464);
  clsp::CLSP_Log::LogCLSPData(v34, &__src, 1);
  float v35 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 468);
  clsp::CLSP_Log::LogCLSPData(v35, &__src, 1);
  float v36 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 472);
  clsp::CLSP_Log::LogCLSPData(v36, &__src, 1);
  float v37 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 480);
  clsp::CLSP_Log::LogCLSPData(v37, &__src, 1);
  float32x2_t v38 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 488);
  clsp::CLSP_Log::LogCLSPData(v38, &__src, 1);
  float32_t v39 = *(clsp::CLSP_Log **)a2;
  if (*(void *)a2
    && (float __src = *(float *)(a1 + 492),
        clsp::CLSP_Log::LogCLSPData(v39, &__src, 1),
        (double v40 = *(clsp::CLSP_Log **)a2) != 0))
  {
    float __src = *(float *)(a1 + 496);
    clsp::CLSP_Log::LogCLSPData(v40, &__src, 1);
    uint64_t v41 = *(clsp::CLSP_Log **)a2;
  }
  else
  {
LABEL_32:
    uint64_t v41 = 0;
  }
  float v42 = (float *)(a1 + 88);
  double v43 = *(atomic_ullong **)(a2 + 8);
  v75[0] = v41;
  v75[1] = (clsp::CLSP_Log *)v43;
  if (v43)
  {
    atomic_fetch_add_explicit(v43 + 1, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v42, v75);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v43);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v42, v75);
  }
  v44 = (float *)(a1 + 108);
  float v45 = *(atomic_ullong **)(a2 + 8);
  v74[0] = *(clsp::CLSP_Log **)a2;
  v74[1] = (clsp::CLSP_Log *)v45;
  if (v45)
  {
    atomic_fetch_add_explicit(v45 + 1, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v44, v74);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v45);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v44, v74);
  }
  double v46 = (float *)(a1 + 160);
  __int16 v47 = *(atomic_ullong **)(a2 + 8);
  v73[0] = *(clsp::CLSP_Log **)a2;
  v73[1] = (clsp::CLSP_Log *)v47;
  if (v47)
  {
    atomic_fetch_add_explicit(v47 + 1, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v46, v73);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v47);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v46, v73);
  }
  uint64_t v48 = a1 + 528;
  __int16 v49 = *(atomic_ullong **)(a2 + 8);
  v72[0] = *(clsp::CLSP_Log **)a2;
  v72[1] = (clsp::CLSP_Log *)v49;
  if (v49)
  {
    atomic_fetch_add_explicit(v49 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v48, v72);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v48, v72);
  }
  uint64_t v50 = a1 + 568;
  __int16 v51 = *(atomic_ullong **)(a2 + 8);
  v71[0] = *(clsp::CLSP_Log **)a2;
  v71[1] = (clsp::CLSP_Log *)v51;
  if (v51)
  {
    atomic_fetch_add_explicit(v51 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v50, v71);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v50, v71);
  }
  uint64_t v52 = a1 + 608;
  __int16 v53 = *(atomic_ullong **)(a2 + 8);
  v70[0] = *(clsp::CLSP_Log **)a2;
  v70[1] = (clsp::CLSP_Log *)v53;
  if (v53)
  {
    atomic_fetch_add_explicit(v53 + 1, 1uLL, memory_order_relaxed);
    clsp::ExponentialSmoother<float,double>::logCoeffs(v52, v70);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs(v52, v70);
  }
  uint64_t v54 = a1 + 624;
  __int16 v55 = *(atomic_ullong **)(a2 + 8);
  v69[0] = *(clsp::CLSP_Log **)a2;
  v69[1] = (clsp::CLSP_Log *)v55;
  if (v55)
  {
    atomic_fetch_add_explicit(v55 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackReleaseTo<float,double>::logCoeffs(v54, v69);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v54, v69);
  }
  uint64_t v56 = a1 + 664;
  unsigned int v57 = *(atomic_ullong **)(a2 + 8);
  v68[0] = *(clsp::CLSP_Log **)a2;
  v68[1] = (clsp::CLSP_Log *)v57;
  if (v57)
  {
    atomic_fetch_add_explicit(v57 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackReleaseTo<float,double>::logCoeffs(v56, v68);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57);
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v56, v68);
  }
  uint64_t v58 = a1 + 704;
  int v59 = *(atomic_ullong **)(a2 + 8);
  v67[0] = *(clsp::CLSP_Log **)a2;
  v67[1] = (clsp::CLSP_Log *)v59;
  if (v59)
  {
    atomic_fetch_add_explicit(v59 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v58, v67);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v58, v67);
  }
  uint64_t v60 = a1 + 744;
  uint64_t v61 = *(atomic_ullong **)(a2 + 8);
  v66[0] = *(clsp::CLSP_Log **)a2;
  v66[1] = (clsp::CLSP_Log *)v61;
  if (v61)
  {
    atomic_fetch_add_explicit(v61 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v60, v66);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v60, v66);
  }
  __int16 v62 = (float *)(a1 + 784);
  unint64_t v63 = *(clsp::CLSP_Log **)a2;
  uint64_t v64 = *(std::__shared_weak_count **)(a2 + 8);
  v65[0] = v63;
  v65[1] = v64;
  if (v64)
  {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::LFSN::logCoeffs(v62, (uint64_t)v65);
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  else
  {
    clsp::LFSN::logCoeffs(v62, (uint64_t)v65);
  }
}

void clsp::AttackReleaseTo<float,double>::logCoeffs(uint64_t a1, clsp::CLSP_Log **a2)
{
  float v3 = *a2;
  if (*a2)
  {
    float v5 = *(double *)a1;
    float __src = v5;
    clsp::CLSP_Log::LogCLSPData(v3, &__src, 1);
    double v6 = *a2;
    if (*a2)
    {
      float v7 = *(double *)(a1 + 8);
      float __src = v7;
      clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
      double v8 = *a2;
      if (*a2)
      {
        float v9 = *(double *)(a1 + 16);
        float __src = v9;
        clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
        long double v10 = *a2;
        if (*a2)
        {
          float __src = *(float *)(a1 + 24);
          clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
          float v11 = *a2;
          if (*a2)
          {
            float __src = *(float *)(a1 + 28);
            clsp::CLSP_Log::LogCLSPData(v11, &__src, 1);
            double v12 = *a2;
            if (*a2)
            {
              float __src = *(float *)(a1 + 32);
              clsp::CLSP_Log::LogCLSPData(v12, &__src, 1);
            }
          }
        }
      }
    }
  }
}

void *clsp::ConvoyDisplacementController::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"g_bw = ", 7);
  double v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nx_lim = ", 9);
  float v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nQ_d = ", 7);
  double v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\npeakAttackTime = ", 18);
  float v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\npeakDecayTime = ", 17);
  double v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nflvSmoothingTime = ", 20);
  float v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\npeakFinderWindowTime_ms = ", 27);
  long double v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nms_x_lim = ", 12);
  float v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\ninvxlim = ", 11);
  double v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nptp_x_flv = ", 13);
  float v13 = (void *)std::ostream::operator<<();
  double v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\nptp:\n", 7);
  clsp::IIRTwoPole<float>::dump(a1 + 88, v14);
  float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nflv:\n", 6);
  clsp::IIRTwoPole<float>::dump(a1 + 108, v15);
  long double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nconvoyModel:\n", 14);
  clsp::IIRTwoPole<float>::dump(a1 + 160, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nrelative posPeakFinderThreshold = ", 35);
  float v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\nrelative negPeakFinderThreshold = ", 35);
  double v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\npeakFinderWindowSize = ", 24);
  double v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\nposPeakFinderthreshold = ", 26);
  double v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\nnegPeakFinderThreshold = ", 26);
  double v21 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\nxLimInc = ", 11);
  float v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\nxMin = ", 8);
  float v23 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\nxMax = ", 8);
  float v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nxLimUpper = ", 13);
  float v25 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\nxLimUpperReal = ", 17);
  float v26 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\nxLimLower = ", 13);
  float v27 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\nxLimInit = ", 12);
  float v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\ninvxLimInit = ", 15);
  float v29 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\nMaxNormFactor = ", 17);
  float v30 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\nMinNormFactor = ", 17);
  float v31 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\nPeakRatioPosBlockThreshold = ", 30);
  float v32 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\nPeakRationNegBlockThreshold = ", 31);
  uint64_t v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\nPeakRatiosInWindowCountThreshold = ", 36);
  float v34 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\nnormFactorThreshold = ", 23);
  float v35 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\nmp_ConvoyBufferDirtyCountThreshold = ", 38);
  float v36 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\nmc_ConvoyBufferDirtyCountThreshold = ", 38);
  float v37 = (void *)std::ostream::operator<<();
  float32x2_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\nptpAtkRel:\n", 12);
  clsp::AttackRelease<float,double>::dump(a1 + 528, v38);
  float32_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\nflvTime:\n", 10);
  clsp::AttackRelease<float,double>::dump(a1 + 568, v39);
  double v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\nflvSmoother:\n", 14);
  clsp::ExponentialSmoother<float,double>::dump(a1 + 608, v40);
  uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\nlfsn:\n", 7);
  clsp::LFSN::dump(a1 + 784, v41);
  float v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\nmodelNormFactor:\n", 18);
  clsp::AttackRelease<float,double>::dump(a1 + 704, v42);
  char v44 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)&v44, 1);
  return a2;
}

void clsp::ConvoyDisplacementController::~ConvoyDisplacementController(clsp::ConvoyDisplacementController *this)
{
  clsp::ConvoyDisplacementController::~ConvoyDisplacementController(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(void *)this = &unk_1F14B5A30;
  float v2 = (std::__shared_weak_count *)*((void *)this + 113);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 103);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  double v4 = (void *)*((void *)this + 41);
  if (v4)
  {
    *((void *)this + 42) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 38);
  if (v5)
  {
    *((void *)this + 39) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 35);
  if (v6)
  {
    *((void *)this + 36) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 32);
  if (v7)
  {
    *((void *)this + 33) = v7;
    operator delete(v7);
  }
  double v8 = (void *)*((void *)this + 29);
  if (v8)
  {
    *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 26);
  if (v9)
  {
    *((void *)this + 27) = v9;
    operator delete(v9);
  }
  long double v10 = (void *)*((void *)this + 23);
  if (v10)
  {
    *((void *)this + 24) = v10;
    operator delete(v10);
  }
  float v11 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v11) {
    MEMORY[0x1C185D370](v11, 0x1000C40FF89C88ELL);
  }
  double v12 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v12) {
    MEMORY[0x1C185D370](v12, 0x1000C40FF89C88ELL);
  }
  float v13 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v13) {
    MEMORY[0x1C185D370](v13, 0x1000C40FF89C88ELL);
  }
}

void clsp::ConvoyDisplacementController::ConvoyDisplacementController(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F14B5A30;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  *(double *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = a9;
  *(double *)(a1 + 48) = a10;
  *(double *)(a1 + 56) = a11;
  *(double *)(a1 + 64) = *(float *)(*a4 + 16);
  *(unsigned char *)(a1 + 72) = 1;
  float v18 = a7;
  float v19 = 1.0 / a7;
  *(float *)(a1 + 76) = v18;
  *(float *)(a1 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v19;
  *(float *)(a1 + 84) = v18;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 128) = a3;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  std::vector<float>::vector((void *)(a1 + 184), a2);
  std::vector<float>::vector((void *)(a1 + 208), a2);
  std::vector<float>::vector((void *)(a1 + 232), a2);
  std::vector<float>::vector((void *)(a1 + 256), a2);
  std::vector<float>::vector((void *)(a1 + 280), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a5));
  std::vector<float>::vector((void *)(a1 + 304), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a5));
  std::vector<float>::vector((void *)(a1 + 328), a2);
  uint64_t v20 = *a4;
  *(void *)(a1 + 36std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a5);
  float32x2_t v21 = *(float32x2_t *)(v20 + 20);
  *(float32x2_t *)(a1 + 352) = v21;
  *(float32x2_t *)(a1 + 368) = vmul_f32(v21, (float32x2_t)vrev64_s32(*(int32x2_t *)(v20 + 4)));
  *(float *)v23.i32 = __exp10(*(float *)(v20 + 40) / -20.0);
  *(_DWORD *)(a1 + 376) = v23.i32[0];
  uint64_t v22 = *a4;
  v23.i64[0] = *(void *)(*a4 + 4);
  *(void *)&long long v24 = v23.i64[0];
  DWORD2(v24) = *(_DWORD *)(*a4 + 28);
  HIDWORD(v24) = DWORD2(v24);
  *(_OWORD *)(a1 + 38std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v24;
  int v25 = *(_DWORD *)(v22 + 36);
  *(_DWORD *)(a1 + 396) = v25;
  *(float *)(a1 + 40std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v18;
  *(float *)(a1 + 404) = v19;
  *(_DWORD *)(a1 + 408) = v25;
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a1 + 76);
  *(void *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  int32x4_t v26 = *(int32x4_t *)(v22 + 52);
  *(int32x4_t *)(a1 + 46std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v26;
  *(_DWORD *)(a1 + 476) = 0;
  v26.i64[0] = *(void *)(v22 + 84);
  int32x4_t v27 = vzip1q_s32(v26, v23);
  v27.i32[1] = v27.i32[0];
  v27.i32[3] = *(_DWORD *)(v22 + 92);
  *(int32x4_t *)(a1 + 48std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v27;
  *(float *)v27.i32 = round(*(float *)&v27.i32[3] * 0.001 * a5);
  *(_DWORD *)(a1 + 496) = v27.i32[0];
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 508) = 0;
  *(void *)(a1 + 50std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 52std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *(double *)(a1 + 528) = a9;
  *(double *)(a1 + 536) = a10;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(double *)(a1 + 568) = a9;
  *(double *)(a1 + 576) = a10;
  *(void *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 60std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  uint64_t v28 = *a4;
  double v29 = *(float *)(*a4 + 76);
  double v30 = *(float *)(*a4 + 80);
  *(double *)(a1 + 624) = v29;
  *(double *)(a1 + 632) = v30;
  *(_OWORD *)(a1 + 648) = xmmword_1BB875830;
  *(double *)(a1 + 664) = v29;
  *(double *)(a1 + 672) = v30;
  *(_OWORD *)(a1 + 688) = xmmword_1BB875830;
  *(float64x2_t *)(a1 + 704) = vcvtq_f64_f32(*(float32x2_t *)(v28 + 44));
  *(void *)(a1 + 72std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(float64x2_t *)(a1 + 744) = vcvtq_f64_f32(*(float32x2_t *)(v28 + 68));
  *(void *)(a1 + 76std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 872) = 1065353216;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 881) = 0;
  *(void *)(a1 + 876) = 0;
  if (a3)
  {
    if (*(float *)&v23.i32[1] <= 0.0)
    {
      float v31 = "mc_xMax > 0.";
      int v32 = 93;
    }
    else if (*(float *)v23.i32 >= 0.0)
    {
      float v31 = "mc_xMin < 0.";
      int v32 = 94;
    }
    else if (*(float *)(a1 + 368) <= 0.0)
    {
      float v31 = "mc_posPeakFinderThreshold > 0.";
      int v32 = 95;
    }
    else
    {
      if (*(float *)(a1 + 372) < 0.0) {
        operator new();
      }
      float v31 = "mc_negPeakFinderThreshold < 0.";
      int v32 = 96;
    }
  }
  else
  {
    float v31 = "inDispModel";
    int v32 = 91;
  }
  __assert_rtn("ConvoyDisplacementController", "ConvoyDispController.cpp", v32, v31);
}

void sub_1BB58E63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  float v19 = (std::__shared_weak_count *)v12[113];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)v12[103];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  float32x2_t v21 = *v17;
  if (*v17)
  {
    v12[42] = v21;
    operator delete(v21);
  }
  uint64_t v22 = *v16;
  if (*v16)
  {
    v12[39] = v22;
    operator delete(v22);
  }
  int32x4_t v23 = *v15;
  if (*v15)
  {
    v12[36] = v23;
    operator delete(v23);
  }
  long long v24 = *v14;
  if (*v14)
  {
    v12[33] = v24;
    operator delete(v24);
  }
  int v25 = *a12;
  if (*a12)
  {
    v12[30] = v25;
    operator delete(v25);
  }
  int32x4_t v26 = *a10;
  if (*a10)
  {
    v12[27] = v26;
    operator delete(v26);
  }
  int32x4_t v27 = *a11;
  if (*a11)
  {
    v12[24] = v27;
    operator delete(v27);
  }
  uint64_t v28 = v12[19];
  v12[19] = 0;
  if (v28) {
    MEMORY[0x1C185D370](v28, 0x1000C40FF89C88ELL);
  }
  uint64_t v29 = v12[18];
  v12[18] = 0;
  if (v29) {
    MEMORY[0x1C185D370](v29, 0x1000C40FF89C88ELL);
  }
  uint64_t v30 = *v13;
  *float v13 = 0;
  if (v30) {
    MEMORY[0x1C185D370](v30, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::BubbleParameterConverters::groupNumberWithClumpNumber(DspLib::BubbleParameterConverters *this, __int16 a2)
{
  return a2 & 0x3FF;
}

uint64_t DspLib::BubbleParameterConverters::algorithmNumberWithClumpNumber(DspLib::BubbleParameterConverters *this, unsigned int a2)
{
  return a2 >> 10;
}

uint64_t DspLib::BubbleParameterConverters::clumpNumber(DspLib::BubbleParameterConverters *this, unsigned int a2)
{
  return a2 >> 10;
}

unint64_t DspLib::BubbleParameterConverters::address(DspLib::BubbleParameterConverters *this, unsigned int a2)
{
  return (a2 >> 20) | ((unint64_t)((a2 >> 10) & 0x3FF) << 32);
}

uint64_t DspLib::BubbleParameterConverters::parameterID(uint64_t a1, uint64_t a2, int a3)
{
  if (HIDWORD(a2) > 0x3FF || ((a3 | a2) & 0xFFFFFC00) != 0) {
    abort();
  }
  return (a3 + (a2 << 20) + (HIDWORD(a2) << 10));
}

void DOAConditioner::LogDOA(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
    if (*(_DWORD *)a1 != -1)
    {
      unint64_t v4 = 0;
      do
      {
        if (v4 >= (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        float v5 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
        ++v4;
        unint64_t v6 = (*(_DWORD *)a1 + 1);
      }
      while (v4 < v6);
      if (*(_DWORD *)a1 != -1)
      {
        unint64_t v7 = 0;
        do
        {
          if (v7 + v6 >= (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2) {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          double v8 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
          ++v7;
          unint64_t v6 = (*(_DWORD *)a1 + 1);
        }
        while (v7 < v6);
      }
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v17[-1] + *(void *)(v16 - 24)));
    float v9 = std::locale::use_facet(&v20, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17, v13);
    v15[0] = *MEMORY[0x1E4FBA408];
    uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v16 = v10;
    v17[0] = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C185D210](&v19);
    if ((v14 & 0x80u) == 0) {
      float v11 = v13;
    }
    else {
      float v11 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v12 = v14;
    }
    else {
      uint64_t v12 = (uint64_t)v13[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, v12);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
  }
}

void sub_1BB58EACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUDynamicDuckerV2::RemoveAudioChannelLayout(AUDynamicDuckerV2 *this, int a2, unsigned int a3)
{
  if (a2 != 2)
  {
    if (a2 != 1) {
      return 4294956430;
    }
    uint64_t v5 = *((void *)this + 15);
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v6 > a3)
    {
      switch(a3)
      {
        case 0u:
          if (!*((unsigned char *)this + 1144)) {
            return 0;
          }
          uint64_t v10 = (char *)this + 1144;
          float v11 = (void *)*((void *)this + 140);
          if (!v11) {
            goto LABEL_38;
          }
          *((void *)this + 141) = v11;
          break;
        case 1u:
          if (!*((unsigned char *)this + 1184)) {
            return 0;
          }
          uint64_t v10 = (char *)this + 1184;
          float v11 = (void *)*((void *)this + 145);
          if (!v11) {
            goto LABEL_38;
          }
          *((void *)this + 146) = v11;
          break;
        case 2u:
          if (!*((unsigned char *)this + 1224)) {
            return 0;
          }
          uint64_t v10 = (char *)this + 1224;
          float v11 = (void *)*((void *)this + 150);
          if (!v11) {
            goto LABEL_38;
          }
          *((void *)this + 151) = v11;
          break;
        case 3u:
          if (!*((unsigned char *)this + 1264)) {
            return 0;
          }
          uint64_t v10 = (char *)this + 1264;
          float v11 = (void *)*((void *)this + 155);
          if (!v11) {
            goto LABEL_38;
          }
          *((void *)this + 156) = v11;
          break;
        case 4u:
          if (!*((unsigned char *)this + 1304)) {
            return 0;
          }
          uint64_t v10 = (char *)this + 1304;
          float v11 = (void *)*((void *)this + 160);
          if (!v11) {
            goto LABEL_38;
          }
          *((void *)this + 161) = v11;
          break;
        default:
          return 0;
      }
      goto LABEL_37;
    }
    return 4294956419;
  }
  uint64_t v7 = *((void *)this + 15);
  if (v7) {
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  else {
    uint64_t v8 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v8 <= a3) {
    return 4294956419;
  }
  if (a3 == 1)
  {
    if (*((unsigned char *)this + 1384))
    {
      uint64_t v10 = (char *)this + 1384;
      float v11 = (void *)*((void *)this + 170);
      if (v11)
      {
        *((void *)this + 171) = v11;
        goto LABEL_37;
      }
LABEL_38:
      uint64_t result = 0;
      *uint64_t v10 = 0;
      return result;
    }
  }
  else if (!a3 && *((unsigned char *)this + 1352))
  {
    uint64_t v10 = (char *)this + 1352;
    float v11 = (void *)*((void *)this + 166);
    if (v11)
    {
      *((void *)this + 167) = v11;
LABEL_37:
      operator delete(v11);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  return 0;
}

uint64_t AUDynamicDuckerV2::SetAudioChannelLayout(AUDynamicDuckerV2 *this, int a2, unsigned int a3, const AudioChannelLayout *a4)
{
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  UInt32 mNumberChannelDescriptions = a4->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions <= 1) {
    UInt32 mNumberChannelDescriptions = 1;
  }
  std::vector<char>::vector(&v24, 20 * mNumberChannelDescriptions + 12);
  memcpy(v24.__begin_, a4, 20 * a4->mNumberChannelDescriptions + 12);
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      uint64_t v4 = 4294956430;
      goto LABEL_46;
    }
    uint64_t v10 = *((void *)this + 15);
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v11 > a3)
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), a3);
      int v15 = *(_DWORD *)(Element + 108);
      if ((*(unsigned char *)(Element + 92) & 0x20) == 0) {
        int v15 = 1;
      }
      if (*(_DWORD *)v24.__begin_ == 0x10000)
      {
        uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v24.__begin_ + 1));
        v20.i16[0] = vaddlv_u8(v20);
        __int32 v16 = v20.i32[0];
      }
      else if (*(_DWORD *)v24.__begin_)
      {
        __int32 v16 = (unsigned __int16)*(_DWORD *)v24.__begin_;
      }
      else
      {
        __int32 v16 = *((_DWORD *)v24.__begin_ + 2);
      }
      if (v15 == v16)
      {
        switch(a3)
        {
          case 0u:
            float32x2_t v21 = (char *)this + 1120;
            goto LABEL_44;
          case 1u:
            float32x2_t v21 = (char *)this + 1160;
            goto LABEL_44;
          case 2u:
            float32x2_t v21 = (char *)this + 1200;
            goto LABEL_44;
          case 3u:
            float32x2_t v21 = (char *)this + 1240;
            goto LABEL_44;
          case 4u:
            float32x2_t v21 = (char *)this + 1280;
            goto LABEL_44;
          default:
            goto LABEL_45;
        }
        goto LABEL_45;
      }
LABEL_38:
      uint64_t v4 = 4294956445;
      goto LABEL_46;
    }
LABEL_26:
    uint64_t v4 = 4294956419;
    goto LABEL_46;
  }
  uint64_t v12 = *((void *)this + 21);
  if (v12) {
    LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  else {
    uint64_t v13 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if (v13 <= a3) {
    goto LABEL_26;
  }
  uint64_t v17 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), a3);
  int v18 = *(_DWORD *)(v17 + 108);
  if ((*(unsigned char *)(v17 + 92) & 0x20) == 0) {
    int v18 = 1;
  }
  if (*(_DWORD *)v24.__begin_ == 0x10000)
  {
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v24.__begin_ + 1));
    v22.i16[0] = vaddlv_u8(v22);
    __int32 v19 = v22.i32[0];
  }
  else if (*(_DWORD *)v24.__begin_)
  {
    __int32 v19 = (unsigned __int16)*(_DWORD *)v24.__begin_;
  }
  else
  {
    __int32 v19 = *((_DWORD *)v24.__begin_ + 2);
  }
  if (v18 != v19) {
    goto LABEL_38;
  }
  if (a3 == 1)
  {
    float32x2_t v21 = (char *)this + 1360;
    goto LABEL_44;
  }
  if (!a3)
  {
    float32x2_t v21 = (char *)this + 1328;
LABEL_44:
    std::optional<CA::ChannelLayout>::operator=[abi:ne180100]<CA::ChannelLayout const,void>((uint64_t)v21, &v24.__begin_);
  }
LABEL_45:
  uint64_t v4 = 0;
LABEL_46:
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
  return v4;
}

void sub_1BB58EF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUDynamicDuckerV2::GetAudioChannelLayout(AUDynamicDuckerV2 *this, int a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  *a5 = *((unsigned char *)this + 17) ^ 1;
  LOBYTE(__p) = 0;
  char v18 = 0;
  if (a2 == 2)
  {
    uint64_t v11 = *((void *)this + 21);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v12 <= a3) {
      return 4294956419;
    }
    if (a3 == 1)
    {
      uint64_t v13 = (char *)this + 1360;
    }
    else
    {
      if (a3) {
        return 0;
      }
      uint64_t v13 = (char *)this + 1328;
    }
LABEL_22:
    if (v13[24])
    {
      __p = 0;
      __int32 v16 = 0;
      uint64_t v17 = 0;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(const void **)v13, *((void *)v13 + 1), *((void *)v13 + 1) - *(void *)v13);
      char v18 = 1;
      int64_t v8 = v16 - (unsigned char *)__p;
      if (a4 && v16 != __p) {
        memcpy(a4, __p, v16 - (unsigned char *)__p);
      }
      if (__p)
      {
        __int32 v16 = __p;
        operator delete(__p);
      }
      return v8;
    }
    return 0;
  }
  int64_t v8 = 0;
  if (a2 == 1)
  {
    uint64_t v9 = *((void *)this + 15);
    if (v9) {
      LODWORD(v1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    }
    else {
      uint64_t v10 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v10 > a3)
    {
      switch(a3)
      {
        case 0u:
          uint64_t v13 = (char *)this + 1120;
          goto LABEL_22;
        case 1u:
          uint64_t v13 = (char *)this + 1160;
          goto LABEL_22;
        case 2u:
          uint64_t v13 = (char *)this + 1200;
          goto LABEL_22;
        case 3u:
          uint64_t v13 = (char *)this + 1240;
          goto LABEL_22;
        case 4u:
          uint64_t v13 = (char *)this + 1280;
          goto LABEL_22;
        default:
          return 0;
      }
    }
    return 4294956419;
  }
  return v8;
}

void sub_1BB58F180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUDynamicDuckerV2::SupportedNumChannels(AUDynamicDuckerV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDynamicDuckerV2::SupportedNumChannels(AUChannelInfo const**)::chans;
  }
  return 1;
}

BOOL AUDynamicDuckerV2::StreamFormatWritable(AUDynamicDuckerV2 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDynamicDuckerV2::SupportsTail(AUDynamicDuckerV2 *this)
{
  return 1;
}

uint64_t AUDynamicDuckerV2::RestoreState(AUDynamicDuckerV2 *this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  if (!result) {
    atomic_fetch_add((atomic_uint *volatile)this + 135, 1u);
  }
  return result;
}

uint64_t AUDynamicDuckerV2::GetParameterInfo(AUDynamicDuckerV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->flags = -1073741824;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      CFStringRef v6 = @"Primary Ducking Level (dB)";
      goto LABEL_8;
    case 1:
      CFStringRef v6 = @"Game Audio Ducking Level (dB)";
      goto LABEL_8;
    case 2:
      CFStringRef v6 = @"Other Audio Ducking Level (dB)";
LABEL_8:
      buffer->cfNameString = v6;
      buffer->flags = -939524096;
      CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v7 = 3267362816;
      goto LABEL_17;
    case 3:
      CFStringRef v8 = @"System Sound Ducking Threshold (dB)";
      goto LABEL_11;
    case 4:
      CFStringRef v8 = @"Primary Ducking Threshold (dB)";
LABEL_11:
      buffer->cfNameString = v8;
      buffer->flags = -939524096;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 3259498496;
      goto LABEL_13;
    case 5:
      buffer->cfNameString = @"Primary Ducking Min Level (dB)";
      buffer->flags = -939524096;
      CFStringGetCString(@"Primary Ducking Min Level (dB)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 3267362816;
LABEL_13:
      *(void *)&buffer->minValue = v9;
      AudioUnitParameterValue v10 = -40.0;
      goto LABEL_30;
    case 6:
      buffer->cfNameString = @"Game Audio Ducking Min Level (dB)";
      buffer->flags = -939524096;
      CFStringGetCString(@"Game Audio Ducking Min Level (dB)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 3267362816;
      AudioUnitParameterValue v10 = -45.0;
      goto LABEL_30;
    case 7:
      buffer->cfNameString = @"Other Audio Ducking Min Level (dB)";
      buffer->flags = -939524096;
      CFStringGetCString(@"Other Audio Ducking Min Level (dB)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 3267362816;
      AudioUnitParameterValue v10 = -50.0;
      goto LABEL_30;
    case 8:
      buffer->cfNameString = @"Other Audio RMS Limit (dB)";
      buffer->flags = -939524096;
      CFStringGetCString(@"Other Audio RMS Limit (dB)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v7 = 3276275712;
LABEL_17:
      *(void *)&buffer->minValue = v7;
      AudioUnitParameterValue v10 = -18.0;
      goto LABEL_30;
    case 9:
      CFStringRef v11 = @"System Sound Gain (dB)";
      goto LABEL_21;
    case 10:
      CFStringRef v11 = @"Game Audio Gain (dB)";
      goto LABEL_21;
    case 11:
      CFStringRef v11 = @"Other Audio Gain (dB)";
LABEL_21:
      buffer->cfNameString = v11;
      buffer->flags = -939524096;
      CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v12 = 0x41400000C1C00000;
      goto LABEL_42;
    case 12:
      buffer->cfNameString = @"FEV Audio RMS";
      buffer->flags = -939524096;
      CFStringGetCString(@"FEV Audio RMS", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x41400000C2C80000;
      AudioUnitParameterValue v13 = -96.0;
      goto LABEL_35;
    case 13:
      buffer->cfNameString = @"Ducking Ramp Time (s)";
      buffer->flags = -939524096;
      CFStringGetCString(@"Ducking Ramp Time (s)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x400000003C23D70ALL;
      AudioUnitParameterValue v10 = 0.25;
      goto LABEL_30;
    case 14:
      buffer->cfNameString = @"History Accumulation Time (s)";
      buffer->flags = -939524096;
      CFStringGetCString(@"History Accumulation Time (s)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x3F8000003DCCCCCDLL;
      AudioUnitParameterValue v10 = 0.1;
      goto LABEL_30;
    case 15:
      buffer->cfNameString = @"UnDucking Ramp Time (s)";
      buffer->flags = -939524096;
      CFStringGetCString(@"UnDucking Ramp Time (s)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v12 = 0x4000000000000000;
      goto LABEL_42;
    case 16:
      buffer->cfNameString = @"Release Hold Time (s)";
      buffer->flags = -939524096;
      CFStringGetCString(@"Release Hold Time (s)", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v12 = 0x4120000000000000;
      goto LABEL_42;
    case 17:
      buffer->cfNameString = @"0 --> Off, 1 --> ON";
      buffer->flags = -939524096;
      CFStringGetCString(@"0 --> Off, 1 --> ON", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      uint64_t v12 = 0x3F80000000000000;
      goto LABEL_42;
    case 18:
      CFStringRef v14 = @"Local voice probability";
      goto LABEL_38;
    case 19:
      buffer->cfNameString = @"Threshold for ducking for local voice";
      buffer->flags = -939524096;
      CFStringGetCString(@"Threshold for ducking for local voice", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x3F80000000000000;
      AudioUnitParameterValue v10 = 0.5;
LABEL_30:
      buffer->defaultValue = v10;
      goto LABEL_43;
    case 20:
      CFStringRef v15 = @"Other Audio RMS";
      goto LABEL_34;
    case 21:
      buffer->cfNameString = @"Other Audio Ducking Gain";
      buffer->flags = -939524096;
      CFStringGetCString(@"Other Audio Ducking Gain", buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 3262119936;
      buffer->defaultValue = 0.0;
      goto LABEL_36;
    case 22:
      CFStringRef v15 = @"Other Audio LongTerm RMS";
LABEL_34:
      buffer->cfNameString = v15;
      buffer->flags = -939524096;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x41A00000C3480000;
      AudioUnitParameterValue v13 = -200.0;
LABEL_35:
      buffer->defaultValue = v13;
LABEL_36:
      AudioUnitParameterOptions v16 = buffer->flags & 0x3FFF7FFF | 0x40008000;
      goto LABEL_44;
    case 23:
      CFStringRef v14 = @"Voice Presence on Other Audio Channel";
LABEL_38:
      buffer->cfNameString = v14;
      buffer->flags = -939524096;
      CFStringGetCString(v14, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x3F80000000000000;
      buffer->defaultValue = 0.0;
      AudioUnitParameterOptions v16 = buffer->flags & 0x7FFF7FFF | 0x8000;
      goto LABEL_44;
    case 24:
      CFStringRef v17 = @"Primary Ducking Threshold in presence of voice (dB)";
      goto LABEL_41;
    case 25:
      CFStringRef v17 = @"Other Audio Ducking Min Level in presence of voice (dB)";
LABEL_41:
      buffer->cfNameString = v17;
      buffer->flags = -939524096;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v12 = 3259498496;
LABEL_42:
      *(void *)&buffer->minValue = v12;
      buffer->defaultValue = 0.0;
LABEL_43:
      AudioUnitParameterOptions v16 = buffer->flags | 0xC0000000;
LABEL_44:
      uint64_t result = 0;
      buffer->flags = v16;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t AUDynamicDuckerV2::GetParameterList(AUDynamicDuckerV2 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  for (uint64_t i = 0; i != 26; ++i)
  {
    if (a3) {
      a3[i] = i;
    }
  }
  uint64_t result = 0;
  *a4 = 26;
  return result;
}

uint64_t AUDynamicDuckerV2::SetBusCount(AUDynamicDuckerV2 *this, unsigned int a2, unsigned int a3)
{
  if (a2 == 2)
  {
    if (a3 - 1 > 1) {
      return 4294956445;
    }
  }
  else if (a2 == 1 && a3 - 1 >= 5)
  {
    return 4294956445;
  }
  return ausdk::AUBase::SetBusCount(this, a2, a3);
}

BOOL AUDynamicDuckerV2::BusCountWritable(AUDynamicDuckerV2 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUDynamicDuckerV2::Render(AUDynamicDuckerV2 *this, unsigned int *a2, const AudioTimeStamp *a3, vDSP_Length a4)
{
  uint64_t v8 = 0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  *(_OWORD *)CFStringRef v17 = 0u;
  long long v18 = 0u;
  uint64_t v9 = (AUDynamicDuckerV2 *)((char *)this + 80);
  do
  {
    uint64_t Element = ausdk::AUScope::GetElement(v9, v8);
    if (Element)
    {
      if (*(_DWORD *)(Element + 172))
      {
        CFStringRef v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, v8);
        uint64_t result = ausdk::AUInputElement::PullInput(v11, a2, a3, v8, a4);
        if (result) {
          return result;
        }
        uint64_t v13 = ausdk::AUScope::SafeGetElement(v9, v8);
        uint64_t Element = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
      }
      else
      {
        uint64_t Element = 0;
      }
    }
    v17[v8++] = (AudioBufferList *)Element;
  }
  while (v8 != 5);
  uint64_t v14 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0);
  v16[0] = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
  v16[1] = 0;
  AUDynamicDuckerV2::ProcessMultipleBufferLists(this, v15, a4, 5u, (const AudioBufferList **)v17, 2, v16);
  return 0;
}

uint64_t AUDynamicDuckerV2::ProcessMultipleBufferLists(AUDynamicDuckerV2 *this, unsigned int *a2, vDSP_Length a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  if (atomic_load((unsigned int *)this + 135)) {
    AUDynamicDuckerV2::UpdateState(this);
  }
  if (!a4)
  {
    vDSP_Length v88 = 0;
    float v89 = 0;
    float v90 = 0;
    uint64_t v14 = 0;
    v84 = 0;
    int v15 = *((unsigned __int8 *)this + 528);
    goto LABEL_7;
  }
  uint64_t v14 = *a5;
  int v15 = *((unsigned __int8 *)this + 528);
  if (a4 == 1)
  {
    vDSP_Length v88 = 0;
    float v89 = 0;
    float v90 = 0;
    v84 = 0;
LABEL_7:
    BOOL v16 = 1;
    BOOL v17 = 1;
LABEL_8:
    BOOL v18 = 1;
    goto LABEL_9;
  }
  float v90 = (AudioBufferList *)a5[1];
  BOOL v17 = v90 == 0;
  if (a4 < 3)
  {
    vDSP_Length v88 = 0;
    float v89 = 0;
    v84 = 0;
    BOOL v16 = 1;
    goto LABEL_8;
  }
  float v89 = (AudioBufferList *)a5[2];
  BOOL v18 = v89 == 0;
  if (a4 == 3)
  {
    vDSP_Length v88 = 0;
    v84 = 0;
    BOOL v16 = 1;
  }
  else
  {
    vDSP_Length v88 = (AudioBufferList *)a5[3];
    BOOL v16 = v88 == 0;
    if (a4 < 5) {
      v84 = 0;
    }
    else {
      v84 = a5[4];
    }
  }
LABEL_9:
  if (a6)
  {
    uint64_t v19 = *a7;
    if (a6 != 1)
    {
      uint64_t v20 = a7[1];
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = 0;
LABEL_14:
  uint64_t v86 = v19;
  long long v87 = v14;
  if (v15)
  {
    int v21 = v15 ^ 1;
    float v22 = 0.0;
    double v23 = 1.0;
    float v24 = -200.0;
    double v25 = 1.0;
    int v26 = v15 ^ 1;
    double v27 = 1.0;
    int v28 = v15 ^ 1;
    float v85 = -200.0;
    int v29 = v15 ^ 1;
    float v30 = 0.0;
    float v31 = 0.0;
    int v32 = v84;
  }
  else
  {
    if (atomic_load((unsigned int *)this + 134))
    {
      atomic_store(0, (unsigned int *)this + 134);
      AUDynamicDuckerV2::Reset(this);
    }
    if (v14 && *((unsigned char *)this + 648))
    {
      LODWORD(v34) = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 544), v14, 0.0, a3);
      int v29 = v35;
    }
    else
    {
      int v29 = 1;
      float v34 = -200.0;
    }
    BOOL v36 = v34 > *((float *)this + 275) || *((unsigned char *)this + 1076) != 0;
    *((unsigned char *)this + 1074) = v36;
    double v37 = 1.0;
    if (v17 || !*((unsigned char *)this + 760))
    {
      int v28 = 1;
      float v39 = -200.0;
      double v27 = 1.0;
    }
    else
    {
      unint64_t v38 = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 656), v90, *((float *)this + 260), a3);
      float v39 = *(float *)&v38;
      double v27 = *((float *)&v38 + 1);
      int v28 = v40;
    }
    *((unsigned char *)this + 1075) = v39 > *((float *)this + 254);
    if (v18 || !*((unsigned char *)this + 872))
    {
      int v26 = 1;
      float v42 = -200.0;
    }
    else
    {
      unint64_t v41 = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 768), v89, *((float *)this + 261), a3);
      float v42 = *(float *)&v41;
      double v37 = *((float *)&v41 + 1);
      int v26 = v43;
    }
    double v83 = v37;
    if (v16 || !*((unsigned char *)this + 984))
    {
      double v82 = 1.0;
      int v21 = 1;
      float v24 = -200.0;
    }
    else
    {
      unint64_t v44 = AUDynamicDuckerV2::PowerHistoryWindow::Compute((AUDynamicDuckerV2 *)((char *)this + 880), v88, *((float *)this + 262), a3);
      float v24 = *(float *)&v44;
      double v82 = *((float *)&v44 + 1);
      int v21 = v45;
    }
    float v46 = (float)(v24 * 0.005) + (float)(*((float *)this + 272) * 0.995);
    *((float *)this + 272) = v46;
    float v47 = *((float *)this + 254);
    if (v39 >= v47)
    {
      float v48 = v47 - v34;
      float v49 = v47 - v42;
      float v50 = v47 - v24;
    }
    else
    {
      float v48 = 0.0;
      float v49 = 0.0;
      float v50 = 0.0;
      if (v39 >= (float)(v47 + -18.0))
      {
        float v51 = (float)(v39 - (float)(v47 + -18.0)) / 18.0;
        float v48 = (float)(v47 - v34) * v51;
        float v49 = (float)(v47 - v42) * v51;
        float v50 = (float)(v47 - v24) * v51;
      }
    }
    if (*((unsigned char *)this + 529)) {
      BOOL v52 = 1;
    }
    else {
      BOOL v52 = *((unsigned char *)this + 1073) != 0;
    }
    float v53 = *((float *)this + 275);
    if (v52 && v34 >= v53 || *((unsigned char *)this + 1076))
    {
      char v54 = 0;
      *((unsigned char *)this + 1073) = 1;
      float v49 = v49 + (float)(v53 - v42);
      float v50 = v50 + (float)(v53 - v24);
    }
    else
    {
      char v57 = !v52;
      if (v34 < (float)(v53 + -18.0)) {
        char v57 = 1;
      }
      if (v57)
      {
        *((unsigned char *)this + 1073) = 0;
        char v54 = 1;
      }
      else
      {
        char v54 = 0;
        *((unsigned char *)this + 1073) = 1;
        float v58 = (float)(v34 - (float)(v53 + -18.0)) / 18.0;
        float v49 = v49 + (float)(v58 * (float)(v53 - v42));
        float v50 = v50 + (float)(v58 * (float)(v53 - v24));
      }
    }
    if (v48 != 0.0)
    {
      if ((float)(*((float *)this + 256) - v34) > v48) {
        float v48 = *((float *)this + 256) - v34;
      }
      if (v48 > 0.0) {
        float v48 = 0.0;
      }
    }
    if (v49 != 0.0)
    {
      if ((float)(*((float *)this + 257) - v42) > v49) {
        float v49 = *((float *)this + 257) - v42;
      }
      if (v49 > 0.0) {
        float v49 = 0.0;
      }
    }
    float v55 = *((float *)this + 276);
    if (v50 != 0.0)
    {
      if ((float)(v55 - v24) > v50) {
        float v50 = v55 - v24;
      }
      if (v50 > 0.0) {
        float v50 = 0.0;
      }
    }
    BOOL v56 = v46 > (float)(v55 + -12.0) && v24 < (float)(v55 + 4.0);
    if (v56 && *((unsigned char *)this + 1074))
    {
      if (v46 <= (float)(v55 + -6.0)) {
        float v50 = v50 + (float)((float)((float)(v46 - (float)(v55 + -12.0)) / -6.0) * 8.0);
      }
      else {
        float v50 = v50 + -8.0;
      }
    }
    int v59 = *((_DWORD *)this + 133);
    switch(v59)
    {
      case 10:
        float v60 = 0.33333;
        break;
      case 30:
        float v60 = 1.3333;
        break;
      case 20:
        float v60 = 0.66667;
        break;
      default:
        float v60 = 1.0;
        break;
    }
    float v61 = *((float *)this + 259) * v60;
    if ((float)(v24 + v50) <= v61) {
      float v62 = v50;
    }
    else {
      float v62 = v61 - v24;
    }
    float v63 = *((float *)this + 249);
    if (v63 < 1.1755e-38) {
      float v63 = 1.1755e-38;
    }
    float v64 = log10f(v63) * 20.0;
    if (v62 >= v64)
    {
      int v65 = *((_DWORD *)this + 270);
      if (v65)
      {
        *((_DWORD *)this + 27std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v65 - 1;
        float v62 = v64;
      }
    }
    else
    {
      *((_DWORD *)this + 27std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 271);
    }
    if (*((unsigned char *)this + 530))
    {
      float v66 = v49 + -6.0;
      float v67 = v62 + -6.0;
      if ((v54 & 1) == 0)
      {
        float v66 = v49 + -9.0;
        float v67 = v62 + -9.0;
      }
      float v68 = v49 + 0.0;
      float v69 = v62 + 0.0;
      if (v59 != 10)
      {
        float v68 = v49;
        float v69 = v62;
      }
      if (v59 == 30) {
        float v49 = v66;
      }
      else {
        float v49 = v68;
      }
      if (v59 == 30) {
        float v62 = v67;
      }
      else {
        float v62 = v69;
      }
    }
    int v32 = v84;
    float v85 = v34;
    float v31 = (float)(v48 + 0.0) * 0.05;
    float v30 = (float)(v49 + 0.0) * 0.05;
    float v22 = (float)(v62 + 0.0) * 0.05;
    double v23 = v82;
    double v25 = v83;
  }
  float v70 = __exp10f(v31);
  float v71 = __exp10f(0.0);
  float v72 = v27;
  float v73 = __exp10f(v30);
  float v74 = v25;
  AUDynamicDuckerV2::GenerateOutputToCompress((OpaqueAudioConverter **)this, v86, v87, v29 != 0, v70, v90, v28 != 0, v71, v72, v89, v26 != 0, v73, v74, a3);
  float v75 = __exp10f(v22);
  __exp10f(0.0);
  float v76 = v23;
  AUDynamicDuckerV2::GenerateOutputToMix((OpaqueAudioConverter **)this, v20, v88, v21 != 0, v75, v76, v32, v77, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicDuckerV2 *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0xCu, v85, 0);
  ausdk::AUElement::SetParameter(Element, 0x14u, v24, 0);
  float v79 = *((float *)this + 249);
  if (v79 < 1.1755e-38) {
    float v79 = 1.1755e-38;
  }
  float v80 = log10f(v79);
  ausdk::AUElement::SetParameter(Element, 0x15u, v80 * 20.0, 0);
  ausdk::AUElement::SetParameter(Element, 0x16u, *((float *)this + 272), 0);
  return 0;
}

void AUDynamicDuckerV2::UpdateState(AUDynamicDuckerV2 *this)
{
  atomic_store(0, (unsigned int *)this + 135);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDynamicDuckerV2 *)((char *)this + 32), 0);
  unsigned int v3 = *((_DWORD *)this + 84);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 0);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0);
  if (*(double *)(v5 + 80) >= *(double *)(v4 + 80)) {
    double v6 = *(double *)(v4 + 80);
  }
  else {
    double v6 = *(double *)(v5 + 80);
  }
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  *((float *)this + 251) = __exp10f(Parameter * 0.05);
  float v8 = ausdk::AUElement::GetParameter(Element, 1u);
  *((float *)this + 252) = __exp10f(v8 * 0.05);
  float v9 = ausdk::AUElement::GetParameter(Element, 2u);
  *((float *)this + 253) = __exp10f(v9 * 0.05);
  *((float *)this + 254) = ausdk::AUElement::GetParameter(Element, 3u);
  *((float *)this + 255) = ausdk::AUElement::GetParameter(Element, 4u);
  *((float *)this + 256) = ausdk::AUElement::GetParameter(Element, 5u);
  *((float *)this + 257) = ausdk::AUElement::GetParameter(Element, 6u);
  *((float *)this + 258) = ausdk::AUElement::GetParameter(Element, 7u);
  *((float *)this + 259) = ausdk::AUElement::GetParameter(Element, 8u);
  *((float *)this + 26std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(Element, 9u);
  *((float *)this + 261) = ausdk::AUElement::GetParameter(Element, 0xAu);
  *((float *)this + 262) = ausdk::AUElement::GetParameter(Element, 0xBu);
  *((float *)this + 263) = ausdk::AUElement::GetParameter(Element, 0xDu);
  float v10 = ausdk::AUElement::GetParameter(Element, 0xFu);
  *((float *)this + 264) = v10;
  if (v10 == 0.0) {
    *((_DWORD *)this + 264) = *((_DWORD *)this + 263);
  }
  *((float *)this + 265) = ausdk::AUElement::GetParameter(Element, 0xEu);
  *((_DWORD *)this + 271) = (v6 * ausdk::AUElement::GetParameter(Element, 0x10u) / (double)v3);
  *((float *)this + 266) = ausdk::AUElement::GetParameter(Element, 0x12u);
  *((float *)this + 267) = ausdk::AUElement::GetParameter(Element, 0x13u);
  float v11 = ausdk::AUElement::GetParameter(Element, 0x11u);
  BOOL v12 = *((float *)this + 266) > *((float *)this + 267);
  *((unsigned char *)this + 1072) = v11 == 1.0;
  if (v11 != 1.0) {
    BOOL v12 = 0;
  }
  *((unsigned char *)this + 1076) = v12;
  *((float *)this + 273) = ausdk::AUElement::GetParameter(Element, 0x18u);
  *((float *)this + 274) = ausdk::AUElement::GetParameter(Element, 0x19u);
  float v13 = ausdk::AUElement::GetParameter(Element, 0x17u);
  *((unsigned char *)this + 1108) = v13 == 1.0;
  if (v13 == 1.0)
  {
    float v14 = *((float *)this + 273);
    if (v14 >= *((float *)this + 255)) {
      float v14 = *((float *)this + 255);
    }
    float v15 = *((float *)this + 274);
    if (v15 >= *((float *)this + 258)) {
      float v15 = *((float *)this + 258);
    }
  }
  else
  {
    float v14 = *((float *)this + 255);
    float v15 = *((float *)this + 258);
  }
  *((float *)this + 275) = v14;
  *((float *)this + 276) = v15;
  if (*((unsigned char *)this + 648))
  {
    uint64_t v16 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 0);
    float v18 = *((float *)this + 265);
    float v19 = 1.0;
    if (v18 <= 1.0) {
      float v19 = *((float *)this + 265);
    }
    if (v18 >= 0.1) {
      float v20 = v19;
    }
    else {
      float v20 = 0.1;
    }
    if (v20 != *((float *)this + 150))
    {
      LODWORD(v17) = *((_DWORD *)this + 145);
      *((_DWORD *)this + 149) = fmax(v20 / ((double)v17 / *(double *)(v16 + 80)), 1.0);
      *((float *)this + 15std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v20;
    }
  }
  if (*((unsigned char *)this + 760))
  {
    uint64_t v21 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 1u);
    float v23 = *((float *)this + 265);
    float v24 = 1.0;
    if (v23 <= 1.0) {
      float v24 = *((float *)this + 265);
    }
    if (v23 >= 0.1) {
      float v25 = v24;
    }
    else {
      float v25 = 0.1;
    }
    if (v25 != *((float *)this + 178))
    {
      LODWORD(v22) = *((_DWORD *)this + 173);
      *((_DWORD *)this + 177) = fmax(v25 / ((double)v22 / *(double *)(v21 + 80)), 1.0);
      *((float *)this + 178) = v25;
    }
  }
  if (*((unsigned char *)this + 872))
  {
    uint64_t v26 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 2u);
    float v28 = *((float *)this + 265);
    float v29 = 1.0;
    if (v28 <= 1.0) {
      float v29 = *((float *)this + 265);
    }
    if (v28 >= 0.1) {
      float v30 = v29;
    }
    else {
      float v30 = 0.1;
    }
    if (v30 != *((float *)this + 206))
    {
      LODWORD(v27) = *((_DWORD *)this + 201);
      *((_DWORD *)this + 205) = fmax(v30 / ((double)v27 / *(double *)(v26 + 80)), 1.0);
      *((float *)this + 206) = v30;
    }
  }
  if (*((unsigned char *)this + 984))
  {
    uint64_t v31 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 3u);
    float v33 = *((float *)this + 265);
    float v34 = 1.0;
    if (v33 <= 1.0) {
      float v34 = *((float *)this + 265);
    }
    if (v33 >= 0.1) {
      float v35 = v34;
    }
    else {
      float v35 = 0.1;
    }
    if (v35 != *((float *)this + 234))
    {
      LODWORD(v32) = *((_DWORD *)this + 229);
      *((_DWORD *)this + 233) = fmax(v35 / ((double)v32 / *(double *)(v31 + 80)), 1.0);
      *((float *)this + 234) = v35;
    }
  }
}

uint64_t AUDynamicDuckerV2::Reset(AUDynamicDuckerV2 *this)
{
  float v2 = (OpaqueAudioConverter *)*((void *)this + 139);
  if (!v2 || (uint64_t result = AudioConverterReset(v2), !result))
  {
    uint64_t v4 = (OpaqueAudioConverter *)*((void *)this + 144);
    if (!v4 || (uint64_t result = AudioConverterReset(v4), !result))
    {
      uint64_t v5 = (OpaqueAudioConverter *)*((void *)this + 149);
      if (!v5 || (uint64_t result = AudioConverterReset(v5), !result))
      {
        double v6 = (OpaqueAudioConverter *)*((void *)this + 154);
        if (!v6 || (uint64_t result = AudioConverterReset(v6), !result))
        {
          uint64_t v7 = (OpaqueAudioConverter *)*((void *)this + 159);
          if (!v7
            || (uint64_t result = AudioConverterReset(v7), !result)
            && ((float v8 = (OpaqueAudioConverter *)*((void *)this + 159)) == 0
             || (uint64_t result = AudioConverterReset(v8), !result)))
          {
            if (*((unsigned char *)this + 648)) {
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 544);
            }
            if (*((unsigned char *)this + 760)) {
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 656);
            }
            if (*((unsigned char *)this + 872)) {
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 768);
            }
            if (*((unsigned char *)this + 984)) {
              AUDynamicDuckerV2::PowerHistoryWindow::Reset((uint64_t)this + 880);
            }
            uint64_t result = 0;
            *((_DWORD *)this + 272) = 0;
          }
        }
      }
    }
  }
  return result;
}

unint64_t AUDynamicDuckerV2::PowerHistoryWindow::Compute(AUDynamicDuckerV2::PowerHistoryWindow *this, const AudioBufferList *a2, float a3, unsigned int a4)
{
  float v8 = __exp10f(a3 * 0.05);
  float v9 = v8 * v8;
  uint64_t mNumberBuffers = a2->mNumberBuffers;
  float v11 = (float)a4;
  float v12 = *((float *)this + 8);
  if (v12 <= (float)a4)
  {
    LODWORD(v13) = 0;
    BOOL v14 = 1;
    do
    {
      if (mNumberBuffers)
      {
        unint64_t v15 = 0;
        float v16 = 0.0;
        p_mData = &a2->mBuffers[0].mData;
        do
        {
          float __C = 0.0;
          vDSP_svesq((const float *)*p_mData + v13, 1, &__C, (unint64_t)*((float *)this + 8));
          float __C = v9 * __C;
          if (*((void *)this + 1) <= v15) {
            __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
          }
          float v18 = *(float *)(*(void *)this + 4 * v15);
          *(_DWORD *)(*(void *)this + 4 * v15) = 0;
          float v19 = v18 + __C;
          if (v16 < v19) {
            float v16 = v19;
          }
          ++v15;
          p_mData += 2;
        }
        while (mNumberBuffers != v15);
        float v12 = *((float *)this + 8);
      }
      else
      {
        float v16 = 0.0;
      }
      BOOL v14 = v16 == 0.0 && v14;
      *((float *)this + 8) = (float)*((unsigned int *)this + 9);
      unsigned int v20 = *((_DWORD *)this + 12);
      unsigned int v21 = *((_DWORD *)this + 13);
      uint64_t v22 = *((void *)this + 12);
      if (v20 >= v21)
      {
        uint64_t v24 = *((void *)this + 8);
        uint64_t v25 = *((void *)this + 11);
        unsigned int v26 = *((_DWORD *)this + 12);
        double v23 = *((double *)this + 5);
        do
        {
          if (v25 == v24) {
            uint64_t v25 = *((void *)this + 9);
          }
          float v27 = *(float *)(v25 - 4);
          v25 -= 4;
          double v23 = v23 - v27;
          --v22;
          --v26;
        }
        while (v26 >= v21);
        unsigned int v28 = v21 - 1;
        if (--v20 >= v28) {
          unsigned int v20 = v28;
        }
        *((void *)this + 11) = v25;
        *((void *)this + 12) = v22;
      }
      else
      {
        double v23 = *((double *)this + 5);
        uint64_t v24 = *((void *)this + 8);
      }
      double v7 = v23 + v16;
      *((double *)this + 5) = v7;
      uint64_t v29 = *((void *)this + 9);
      if (v22 == (v29 - v24) >> 2)
      {
        if (v29 != v24)
        {
          uint64_t v30 = *((void *)this + 10);
          if (v30 == v24) {
            uint64_t v30 = *((void *)this + 9);
          }
          *(float *)(v30 - 4) = v16;
          uint64_t v31 = v30 - 4;
          *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v31;
          *((void *)this + 11) = v31;
        }
      }
      else
      {
        if (*((void *)this + 10) == v24) {
          uint64_t v32 = *((void *)this + 9);
        }
        else {
          uint64_t v32 = *((void *)this + 10);
        }
        *(float *)(v32 - 4) = v16;
        *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v32 - 4;
        *((void *)this + 12) = v22 + 1;
      }
      uint64_t v13 = (float)(v12 + (float)v13);
      a4 = (float)(v11 - v12);
      *((_DWORD *)this + 12) = v20 + 1;
      float v11 = (float)a4;
      float v12 = *((float *)this + 8);
    }
    while (v12 <= (float)a4);
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (a4)
  {
    if (mNumberBuffers)
    {
      unint64_t v33 = 0;
      float v34 = &a2->mBuffers[0].mData;
      float v35 = 0.0;
      do
      {
        float v42 = 0.0;
        vDSP_svesq((const float *)*v34 + v13, 1, &v42, a4);
        float v36 = v9 * v42;
        float v42 = v9 * v42;
        if (*((void *)this + 1) <= v33) {
          __assert_rtn("operator[]", "vector.hpp", 1655, "this->m_holder.m_size > n");
        }
        *(float *)(*(void *)this + 4 * v33) = v36 + *(float *)(*(void *)this + 4 * v33);
        if (v35 < v42) {
          float v35 = v42;
        }
        ++v33;
        v34 += 2;
      }
      while (mNumberBuffers != v33);
      float v12 = *((float *)this + 8);
    }
    *((float *)this + 8) = v12 - v11;
  }
  LODWORD(v7) = *((_DWORD *)this + 12);
  *(double *)&unint64_t v37 = (double)*(unint64_t *)&v7;
  double v38 = *((double *)this + 5) / *(double *)&v37;
  LODWORD(v37) = *((_DWORD *)this + 9);
  double v39 = v38 / (double)v37;
  if (v39 < 2.22507386e-308) {
    double v39 = 2.22507386e-308;
  }
  *(float *)&unsigned int v40 = log10(v39) * 20.0 * 0.5;
  return v40 | ((unint64_t)LODWORD(v8) << 32);
}

void AUDynamicDuckerV2::GenerateOutputToCompress(OpaqueAudioConverter **this, AudioBufferList *a2, const AudioBufferList *a3, char a4, float a5, const AudioBufferList *a6, char a7, float a8, float a9, const AudioBufferList *a10, int a11, float a12, float a13, unsigned int a14)
{
  float v68 = a10;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  char v14 = a11;
  unint64_t v17 = a3;
  uint64_t v22 = (AUDynamicDuckerV2 *)this;
  float v69 = a2;
  LOBYTE(v7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  if (a3 && (a4 & 1) == 0)
  {
    uint64_t v24 = this[139];
    if (v24)
    {
      HIDWORD(v67) = a11;
      CA::AudioBuffers::PrepareWithNumberOfBuffers(this[164]);
      uint64_t v25 = (AudioBufferList *)*((void *)v22 + 164);
      unsigned int v26 = v25 + 2;
      this = (OpaqueAudioConverter **)AudioConverterConvertComplexBuffer(v24, a14, v17, v25 + 2);
      if (this && v26->mNumberBuffers)
      {
        UInt32 v27 = 0;
        p_mData = &v25[2].mBuffers[0].mData;
        do
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          ++v27;
          p_mData += 2;
        }
        while (v27 < v26->mNumberBuffers);
      }
      unint64_t v17 = v25 + 2;
      char v14 = BYTE4(v67);
    }
    if (!*((unsigned char *)v22 + 528) && *((float *)v22 + 248) != a5)
    {
      MEMORY[0x1F4188790](this);
      unint64_t v41 = (float *)(((unint64_t)&v66 - v40) & 0xFFFFFFFFFFFFFFC0);
      uint64_t v42 = 1052;
      if (*((float *)v22 + 248) < a5) {
        uint64_t v42 = 1056;
      }
      float v43 = *(float *)((char *)v22 + v42);
      float v44 = *((float *)v22 + 251);
      float v45 = (float)(1.0 - v44)
          / (*(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)v22 + 128), 0) + 80)
           * v43);
      float v74 = v45;
      float v73 = 1.0;
      float v46 = *((float *)v22 + 251);
      float v72 = v46;
      float v47 = *((float *)v22 + 248);
      if (v47 <= a5)
      {
        float v73 = fminf(a5, 1.0);
      }
      else
      {
        float v74 = -v45;
        if (v46 >= a5) {
          float v48 = v46;
        }
        else {
          float v48 = a5;
        }
        float v72 = v48;
      }
      float v71 = v47;
      vDSP_vramp(&v71, &v74, v41, 1, a14);
      vDSP_vclip(v41, 1, &v72, &v73, v41, 1, a14);
      float v58 = v74;
      float v59 = *((float *)v22 + 248) + (float)(v74 * (float)a14);
      *((float *)v22 + 248) = v59;
      if (v59 < a5 && v58 < 0.0 || v59 > a5 && v58 > 0.0) {
        *((float *)v22 + 248) = a5;
      }
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v17, v41, a14);
      if (!a6) {
        goto LABEL_21;
      }
      goto LABEL_13;
    }
    AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v17, a5, a14);
  }
  if (a6)
  {
LABEL_13:
    if ((a7 & 1) == 0)
    {
      uint64_t v29 = (OpaqueAudioConverter *)*((void *)v22 + 144);
      if (v29)
      {
        char v30 = v14;
        CA::AudioBuffers::PrepareWithNumberOfBuffers(*((CA::AudioBuffers **)v22 + 164));
        uint64_t v31 = (const AudioBufferList *)*((void *)v22 + 164);
        uint64_t v32 = v31 + 2;
        if (AudioConverterConvertComplexBuffer(v29, a14, a6, (AudioBufferList *)&v31[2]) && v32->mNumberBuffers)
        {
          UInt32 v33 = 0;
          float v34 = &v31[2].mBuffers[0].mData;
          do
          {
            bzero(*v34, *((unsigned int *)v34 - 1));
            ++v33;
            v34 += 2;
          }
          while (v33 < v32->mNumberBuffers);
        }
        a6 = v31 + 2;
        char v14 = v30;
      }
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, a6, a8 * a9, a14);
    }
  }
LABEL_21:
  if (v68 && (v14 & 1) == 0)
  {
    float v35 = (OpaqueAudioConverter *)*((void *)v22 + 149);
    if (v35)
    {
      CA::AudioBuffers::PrepareWithNumberOfBuffers(*((CA::AudioBuffers **)v22 + 164));
      float v36 = (AudioBufferList *)*((void *)v22 + 164);
      unint64_t v37 = v36 + 2;
      this = (OpaqueAudioConverter **)AudioConverterConvertComplexBuffer(v35, a14, v68, v36 + 2);
      if (this && v37->mNumberBuffers)
      {
        UInt32 v38 = 0;
        double v39 = &v36[2].mBuffers[0].mData;
        do
        {
          bzero(*v39, *((unsigned int *)v39 - 1));
          ++v38;
          v39 += 2;
        }
        while (v38 < v37->mNumberBuffers);
      }
      float v68 = v37;
    }
    if (*((unsigned char *)v22 + 528) || *((float *)v22 + 250) == a12)
    {
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v68, a12 * a13, a14);
    }
    else
    {
      MEMORY[0x1F4188790](this);
      float v50 = (float *)(((unint64_t)&v66 - v49) & 0xFFFFFFFFFFFFFFC0);
      float v74 = a13;
      uint64_t v51 = 1052;
      if (*((float *)v22 + 250) < a12) {
        uint64_t v51 = 1056;
      }
      float v52 = *(float *)((char *)v22 + v51);
      float v53 = *((float *)v22 + 252);
      float v54 = (float)(1.0 - v53)
          / (*(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)v22 + 128), 0) + 80)
           * v52);
      float v73 = v54;
      float v72 = 1.0;
      float v55 = *((float *)v22 + 252);
      float v56 = v55 * v55;
      float v71 = v55 * v55;
      float v57 = *((float *)v22 + 250);
      if (v57 > a12)
      {
        float v54 = -v54;
        float v73 = v54;
      }
      if (v54 < 0.0)
      {
        if (v57 < v55 || *((unsigned char *)v22 + 1075) && *((unsigned char *)v22 + 1074))
        {
          if (v56 < a12) {
            float v56 = a12;
          }
        }
        else if (v55 >= a12)
        {
          float v56 = v55;
        }
        else
        {
          float v56 = a12;
        }
        float v71 = v56;
      }
      float v60 = (float *)((char *)v22 + 1000);
      if (v54 > 0.0)
      {
        if (v57 <= v55 && (*((unsigned char *)v22 + 1075) || *((unsigned char *)v22 + 1074)))
        {
          if (v55 > a12) {
            float v55 = a12;
          }
        }
        else
        {
          float v55 = fminf(a12, 1.0);
        }
        float v72 = v55;
      }
      vDSP_vramp((const float *)v22 + 250, &v73, v50, 1, a14);
      vDSP_vclip(v50, 1, &v71, &v72, v50, 1, a14);
      vDSP_vsmul(v50, 1, &v74, v50, 1, a14);
      float v61 = v73;
      float v62 = *v60 + (float)(v73 * (float)a14);
      *float v60 = v62;
      if (v62 < a12 && v61 < 0.0 || v62 > a12 && v61 > 0.0) {
        *float v60 = a12;
      }
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v69, v68, v50, a14);
    }
  }
  if (!(_BYTE)v70)
  {
    float v63 = v69;
    if (v69->mNumberBuffers)
    {
      UInt32 v64 = 0;
      int v65 = &v69->mBuffers[0].mData;
      do
      {
        bzero(*v65, *((unsigned int *)v65 - 1));
        ++v64;
        v65 += 2;
      }
      while (v64 < v63->mNumberBuffers);
    }
  }
}

void sub_1BB590F24(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 + 40))
  {
    unsigned int v3 = *(unsigned int **)(v1 + 32);
    if (*v3)
    {
      unsigned int v4 = 0;
      uint64_t v5 = (void **)(v3 + 4);
      do
      {
        bzero(*v5, *((unsigned int *)v5 - 1));
        ++v4;
        v5 += 2;
      }
      while (v4 < *v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void AUDynamicDuckerV2::GenerateOutputToMix(OpaqueAudioConverter **this, AudioBufferList *a2, const AudioBufferList *a3, char a4, float a5, float a6, const AudioBufferList *a7, float a8, vDSP_Length a9)
{
  uint64_t vars8 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  float v11 = a3;
  float v12 = (AUDynamicDuckerV2 *)this;
  unint64_t v41 = a2;
  LOBYTE(v42) = 0;
  if (a3 && (a4 & 1) == 0)
  {
    unint64_t v15 = this[154];
    if (v15)
    {
      CA::AudioBuffers::PrepareWithNumberOfBuffers(this[164]);
      float v16 = (AudioBufferList *)*((void *)v12 + 164);
      unint64_t v17 = v16 + 2;
      this = (OpaqueAudioConverter **)AudioConverterConvertComplexBuffer(v15, a9, v11, v16 + 2);
      if (this && v17->mNumberBuffers)
      {
        UInt32 v18 = 0;
        p_mData = &v16[2].mBuffers[0].mData;
        do
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          ++v18;
          p_mData += 2;
        }
        while (v18 < v17->mNumberBuffers);
      }
      float v11 = v16 + 2;
    }
    if (!*((unsigned char *)v12 + 528) && *((float *)v12 + 249) != a5)
    {
      MEMORY[0x1F4188790](this);
      uint64_t v29 = (float *)(((unint64_t)&v40 - v28) & 0xFFFFFFFFFFFFFFC0);
      float v46 = a6;
      uint64_t v30 = 1052;
      if (*((float *)v12 + 249) < a5) {
        uint64_t v30 = 1056;
      }
      float v31 = *(float *)((char *)v12 + v30);
      float v32 = *((float *)v12 + 253);
      float v33 = (float)(1.0 - v32)
          / (*(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)v12 + 128), 0) + 80)
           * v31);
      float v45 = v33;
      float v44 = 1.0;
      float v34 = *((float *)v12 + 253);
      float v35 = v34 * v34;
      float v43 = v34 * v34;
      float v36 = *((float *)v12 + 249);
      if (v36 > a5)
      {
        float v33 = -v33;
        float v45 = v33;
      }
      if (v33 < 0.0)
      {
        if (v36 < v34 || *((unsigned char *)v12 + 1075) && *((unsigned char *)v12 + 1074))
        {
          if (v35 < a5) {
            float v35 = a5;
          }
        }
        else if (v34 >= a5)
        {
          float v35 = v34;
        }
        else
        {
          float v35 = a5;
        }
        float v43 = v35;
      }
      unint64_t v37 = (float *)((char *)v12 + 996);
      if (v33 > 0.0)
      {
        if (v36 <= v34 && (*((unsigned char *)v12 + 1075) || *((unsigned char *)v12 + 1074)))
        {
          if (v34 > a5) {
            float v34 = a5;
          }
        }
        else
        {
          float v34 = fminf(a5, 1.0);
        }
        float v44 = v34;
      }
      vDSP_vramp((const float *)v12 + 249, &v45, v29, 1, a9);
      vDSP_vclip(v29, 1, &v43, &v44, v29, 1, a9);
      vDSP_vsmul(v29, 1, &v46, v29, 1, a9);
      float v38 = v45;
      float v39 = *v37 + (float)(v45 * (float)a9);
      float *v37 = v39;
      if (v39 < a5 && v38 < 0.0 || v39 > a5 && v38 > 0.0) {
        float *v37 = a5;
      }
      AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v41, v11, v29, a9);
      if (!a7) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v41, v11, a5 * a6, a9);
  }
  if (a7)
  {
LABEL_13:
    unsigned int v20 = (OpaqueAudioConverter *)*((void *)v12 + 159);
    if (v20)
    {
      CA::AudioBuffers::PrepareWithNumberOfBuffers(*((CA::AudioBuffers **)v12 + 164));
      unsigned int v21 = (AudioBufferList *)*((void *)v12 + 164);
      uint64_t v22 = v21 + 2;
      if (AudioConverterConvertComplexBuffer(v20, a9, a7, v21 + 2) && v22->mNumberBuffers)
      {
        UInt32 v23 = 0;
        uint64_t v24 = &v21[2].mBuffers[0].mData;
        do
        {
          bzero(*v24, *((unsigned int *)v24 - 1));
          ++v23;
          v24 += 2;
        }
        while (v23 < v22->mNumberBuffers);
      }
      a7 = v22;
    }
    AUDynamicDuckerV2::GenerateOutput::Mix((AUDynamicDuckerV2::GenerateOutput *)&v41, a7, 1.0, a9);
  }
LABEL_20:
  if (!(_BYTE)v42)
  {
    uint64_t v25 = v41;
    if (v41->mNumberBuffers)
    {
      UInt32 v26 = 0;
      UInt32 v27 = &v41->mBuffers[0].mData;
      do
      {
        bzero(*v27, *((unsigned int *)v27 - 1));
        ++v26;
        v27 += 2;
      }
      while (v26 < v25->mNumberBuffers);
    }
  }
}

void sub_1BB59135C(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 + 40))
  {
    unsigned int v3 = *(unsigned int **)(v1 + 32);
    if (*v3)
    {
      unsigned int v4 = 0;
      uint64_t v5 = (void **)(v3 + 4);
      do
      {
        bzero(*v5, *((unsigned int *)v5 - 1));
        ++v4;
        v5 += 2;
      }
      while (v4 < *v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t CA::AudioBuffers::PrepareWithNumberOfBuffers(CA::AudioBuffers *this)
{
  uint64_t result = ExtendedAudioBufferList_PrepareWithNumberOfBuffers();
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_PrepareWithNumberOfBuffers failed");
  }
  return result;
}

void sub_1BB591418(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUDynamicDuckerV2::GenerateOutput::Mix(AUDynamicDuckerV2::GenerateOutput *this, const AudioBufferList *a2, const float *__B, vDSP_Length __N)
{
  double v6 = *(unsigned int **)this;
  mBuffers = a2->mBuffers;
  uint64_t v8 = **(unsigned int **)this;
  if (*((unsigned char *)this + 8))
  {
    if (v8)
    {
      uint64_t v9 = 0;
      UInt32 v10 = a2->mNumberBuffers - 1;
      vDSP_Length v11 = __N;
      float v12 = (float **)(v6 + 4);
      do
      {
        if (v10 >= v9) {
          UInt32 v13 = v9;
        }
        else {
          UInt32 v13 = v10;
        }
        char v14 = *v12;
        v12 += 2;
        vDSP_vma((const float *)mBuffers[v13].mData, 1, __B, 1, v14, 1, v14, 1, v11);
        ++v9;
      }
      while (v8 != v9);
    }
  }
  else if (v8)
  {
    uint64_t v15 = 0;
    UInt32 v16 = a2->mNumberBuffers - 1;
    vDSP_Length v17 = __N;
    UInt32 v18 = (float **)(v6 + 4);
    do
    {
      if (v16 >= v15) {
        UInt32 v19 = v15;
      }
      else {
        UInt32 v19 = v16;
      }
      unsigned int v20 = *v18;
      v18 += 2;
      vDSP_vmul((const float *)mBuffers[v19].mData, 1, __B, 1, v20, 1, v17);
      ++v15;
    }
    while (v8 != v15);
  }
  *((unsigned char *)this + 8) = 1;
}

void AUDynamicDuckerV2::GenerateOutput::Mix(AUDynamicDuckerV2::GenerateOutput *this, const AudioBufferList *a2, float a3, unsigned int a4)
{
  float __B = a3;
  uint64_t v5 = *(unsigned int **)this;
  mBuffers = a2->mBuffers;
  uint64_t v7 = **(unsigned int **)this;
  if (*((unsigned char *)this + 8))
  {
    if (a3 == 1.0)
    {
      if (v7)
      {
        uint64_t v8 = 0;
        UInt32 v9 = a2->mNumberBuffers - 1;
        vDSP_Length v10 = a4;
        vDSP_Length v11 = (float **)(v5 + 4);
        do
        {
          if (v9 >= v8) {
            UInt32 v12 = v8;
          }
          else {
            UInt32 v12 = v9;
          }
          UInt32 v13 = *v11;
          v11 += 2;
          vDSP_vadd((const float *)mBuffers[v12].mData, 1, v13, 1, v13, 1, v10);
          ++v8;
        }
        while (v7 != v8);
      }
    }
    else if (v7)
    {
      uint64_t v20 = 0;
      UInt32 v21 = a2->mNumberBuffers - 1;
      vDSP_Length v22 = a4;
      UInt32 v23 = (float **)(v5 + 4);
      do
      {
        if (v21 >= v20) {
          UInt32 v24 = v20;
        }
        else {
          UInt32 v24 = v21;
        }
        uint64_t v25 = *v23;
        v23 += 2;
        vDSP_vsma((const float *)mBuffers[v24].mData, 1, &__B, v25, 1, v25, 1, v22);
        ++v20;
      }
      while (v7 != v20);
    }
  }
  else if (a3 == 1.0)
  {
    if (v7)
    {
      uint64_t v14 = 0;
      UInt32 v15 = a2->mNumberBuffers - 1;
      size_t v16 = 4 * a4;
      vDSP_Length v17 = (void **)(v5 + 4);
      do
      {
        if (v15 >= v14) {
          UInt32 v18 = v14;
        }
        else {
          UInt32 v18 = v15;
        }
        mData = mBuffers[v18].mData;
        if (mData != *v17) {
          memcpy(*v17, mData, v16);
        }
        ++v14;
        v17 += 2;
      }
      while (v7 != v14);
    }
  }
  else if (v7)
  {
    uint64_t v26 = 0;
    UInt32 v27 = a2->mNumberBuffers - 1;
    vDSP_Length v28 = a4;
    uint64_t v29 = (float **)(v5 + 4);
    do
    {
      if (v27 >= v26) {
        UInt32 v30 = v26;
      }
      else {
        UInt32 v30 = v27;
      }
      float v31 = (const float *)mBuffers[v30].mData;
      if (v31 != *v29) {
        vDSP_vsmul(v31, 1, &__B, *v29, 1, v28);
      }
      ++v26;
      v29 += 2;
    }
    while (v7 != v26);
  }
  *((unsigned char *)this + 8) = 1;
}

uint64_t AUDynamicDuckerV2::PowerHistoryWindow::Reset(uint64_t this)
{
  uint64_t v1 = *(_DWORD **)this;
  uint64_t v2 = *(void *)(this + 8);
  if (*(void *)this) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  if (!v3) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v2)
  {
    uint64_t v4 = 4 * v2;
    do
    {
      if (!v1) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      *v1++ = 0;
      v4 -= 4;
    }
    while (v4);
  }
  *(float *)(this + 32) = (float)*(unsigned int *)(this + 36);
  *(void *)(this + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(this + 48) = 0;
  uint64_t v5 = *(void *)(this + 96);
  uint64_t v7 = *(void *)(this + 72);
  uint64_t v6 = *(void *)(this + 80);
  if (v5 >= (v7 - v6) >> 2) {
    v5 -= (v7 - *(void *)(this + 64)) >> 2;
  }
  *(void *)(this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v6 + 4 * v5;
  *(void *)(this + 96) = 0;
  return this;
}

uint64_t AUDynamicDuckerV2::CanScheduleParameters(AUDynamicDuckerV2 *this)
{
  return 0;
}

uint64_t AUDynamicDuckerV2::SetParameter(atomic_uint *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  if (ausdk::AUElement::GetParameter(Element, a2) != a5)
  {
    UInt32 v12 = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
    UInt32 v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v12, a4);
    ausdk::AUElement::SetParameter(v13, a2, a5, 0);
    if (a2 == 18)
    {
      *((float *)this + 266) = a5;
      BOOL v14 = *((float *)this + 267) < a5 && *((unsigned char *)this + 1072) != 0;
      *((unsigned char *)this + 1076) = v14;
    }
    else
    {
      atomic_fetch_add(this + 135, 1u);
    }
  }
  return 0;
}

uint64_t AUDynamicDuckerV2::SetProperty(AUDynamicDuckerV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5, int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1852141668)
  {
    if (a2 == 1852141669)
    {
      if (a6 == 4)
      {
        uint64_t result = 0;
        *((unsigned char *)this + 53std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *a5 != 0;
        return result;
      }
      return 4294956445;
    }
    if (a2 == 1852141676)
    {
      if (a6 == 4)
      {
        uint64_t result = 0;
        *((_DWORD *)this + 133) = *a5;
        return result;
      }
      return 4294956445;
    }
  }
  else if (a2 == 21)
  {
    if (a6 != 4)
    {
      exception = (ausdk::AUException *)__cxa_allocate_exception(0x18uLL);
      ausdk::AUException::AUException(exception, -10851);
    }
    BOOL v8 = *a5 != 0;
    if (*((unsigned char *)this + 528))
    {
      if (!*a5) {
        atomic_fetch_add((atomic_uint *volatile)this + 134, 1u);
      }
    }
    uint64_t result = 0;
    *((unsigned char *)this + 528) = v8;
  }
  else if (a2 == 1633973611)
  {
    if (a6 == 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 529) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  return result;
}

void sub_1BB5919D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUDynamicDuckerV2::GetProperty(AUDynamicDuckerV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1852141668)
  {
    if (a2 == 1852141669)
    {
      int v7 = *((unsigned __int8 *)this + 530);
    }
    else
    {
      if (a2 != 1852141676) {
        return result;
      }
      int v7 = *((_DWORD *)this + 133) != 0;
    }
  }
  else if (a2 == 21)
  {
    int v7 = *((unsigned __int8 *)this + 528);
  }
  else
  {
    if (a2 != 1633973611) {
      return result;
    }
    int v7 = *((unsigned __int8 *)this + 529);
  }
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUDynamicDuckerV2::GetPropertyInfo(AUDynamicDuckerV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 > 1852141668)
    {
      if (a2 == 1852141676) {
        goto LABEL_9;
      }
      int v7 = 1852141669;
    }
    else
    {
      if (a2 == 21) {
        goto LABEL_9;
      }
      int v7 = 1633973611;
    }
    if (a2 != v7) {
      return result;
    }
LABEL_9:
    uint64_t result = 0;
    *a6 = 1;
    *a5 = 4;
  }
  return result;
}

void AUDynamicDuckerV2::Cleanup(OpaqueAudioConverter **this)
{
  AUDynamicDuckerV2::DisposeAudioConverters(this);

  AUDynamicDuckerV2::DisposePowerHistoryWindows((AUDynamicDuckerV2 *)this);
}

uint64_t AUDynamicDuckerV2::DisposeAudioConverters(OpaqueAudioConverter **this)
{
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 139, 0);
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 144, 0);
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 149, 0);
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 154, 0);
  uint64_t result = (uint64_t)std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 159, 0);
  if (*((unsigned char *)this + 1320))
  {
    uint64_t result = ExtendedAudioBufferList_Destroy();
    *((unsigned char *)this + 132std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  return result;
}

void AUDynamicDuckerV2::DisposePowerHistoryWindows(AUDynamicDuckerV2 *this)
{
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 544);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 656);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 768);

  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 880);
}

void std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    boost::circular_buffer<float,std::allocator<float>>::destroy(a1 + 64);
    if (*(void *)(a1 + 16))
    {
      if (a1 + 24 != *(void *)a1) {
        operator delete(*(void **)a1);
      }
    }
    *(unsigned char *)(a1 + 104) = 0;
  }
}

void boost::circular_buffer<float,std::allocator<float>>::destroy(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = v3 - v2;
  unint64_t v7 = (unint64_t)(v3 - (void)v5) >> 2;
  if (v4 < v6 >> 2) {
    unint64_t v7 = 0;
  }
  *(void *)(a1 + 16) = v2 + 4 * (v4 - v7);
  if (v5) {
    operator delete(v5);
  }
}

OpaqueAudioConverter *std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](OpaqueAudioConverter **a1, OpaqueAudioConverter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  }
  return result;
}

uint64_t AUDynamicDuckerV2::Initialize(AUDynamicDuckerV2 *this)
{
  uint64_t v2 = (AUDynamicDuckerV2 *)((char *)this + 80);
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 80), 0) + 80);
  unsigned int v4 = 1;
  while (1)
  {
    uint64_t v5 = *((void *)this + 15);
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v4 >= v6) {
      break;
    }
    uint64_t Element = ausdk::AUScope::SafeGetElement(v2, v4++);
    if (*(double *)(Element + 80) != v3) {
      return 4294956428;
    }
  }
  double v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0) + 80);
  unsigned int v9 = 1;
  while (1)
  {
    uint64_t v10 = *((void *)this + 21);
    if (v10) {
      LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    else {
      uint64_t v11 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v9 >= v11) {
      break;
    }
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), v9++);
    if (*(double *)(v12 + 80) != v8) {
      return 4294956428;
    }
  }
  if (v3 != v8) {
    return 4294956428;
  }
  std::vector<AudioChannelLayout>::vector(v76, 1uLL);
  UInt32 v13 = v76[0];
  *(void *)v76[0] = 0;
  v13[2] = 0;
  uint64_t v14 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 0);
  long long v15 = *(_OWORD *)(v14 + 96);
  *(_OWORD *)&inDestinationFormat.Float64 mSampleRate = *(_OWORD *)(v14 + 80);
  *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v15;
  *(void *)&inDestinationFormat.mBitsPerChannel = *(void *)(v14 + 112);
  if ((inDestinationFormat.mFormatFlags & 0x20) != 0) {
    unsigned int v16 = HIDWORD(v15);
  }
  else {
    unsigned int v16 = 1;
  }
  AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&v75, SHIDWORD(v15));
  std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&v73, (uint64_t)this + 1328, v75.__begin_, (uint64_t)v75.__end_);
  uint64_t v17 = ausdk::AUScope::SafeGetElement(v2, 0);
  __n128 v18 = *(__n128 *)(v17 + 80);
  long long v19 = *(_OWORD *)(v17 + 96);
  *(__n128 *)&inSourceFormat.Float64 mSampleRate = v18;
  *(_OWORD *)&inSourceFormat.mBytesPerPacket = v19;
  *(void *)&inSourceFormat.mBitsPerChannel = *(void *)(v17 + 112);
  if (v18.n128_f64[0] == inDestinationFormat.mSampleRate
    && inSourceFormat.mFormatID == inDestinationFormat.mFormatID
    && inSourceFormat.mFormatFlags == inDestinationFormat.mFormatFlags
    && inSourceFormat.mBytesPerPacket == inDestinationFormat.mBytesPerPacket
    && inSourceFormat.mFramesPerPacket == inDestinationFormat.mFramesPerPacket
    && inSourceFormat.mBytesPerFrame == inDestinationFormat.mBytesPerFrame
    && inSourceFormat.mChannelsPerFrame == inDestinationFormat.mChannelsPerFrame
    && inSourceFormat.mBitsPerChannel == inDestinationFormat.mBitsPerChannel)
  {
    int v20 = 0;
    goto LABEL_45;
  }
  AudioConverterRef outAudioConverter = 0;
  uint64_t v21 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
  if (v21) {
    goto LABEL_165;
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 139, outAudioConverter);
  if (*((unsigned char *)this + 1144))
  {
    UInt32 mChannelsPerFrame = inSourceFormat.mChannelsPerFrame;
    goto LABEL_33;
  }
  UInt32 mChannelsPerFrame = inSourceFormat.mChannelsPerFrame;
  if ((inSourceFormat.mFormatFlags & 0x20) == 0 || inSourceFormat.mChannelsPerFrame <= 2)
  {
LABEL_33:
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout((std::vector<char> *)&__p, mChannelsPerFrame);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&inPropertyData, (uint64_t)this + 1120, *(const void **)&__p.mSampleRate, *(uint64_t *)&__p.mFormatID);
    uint64_t v21 = AudioConverterSetProperty(outAudioConverter, 0x69636C20u, LODWORD(inPropertyData.__end_) - LODWORD(inPropertyData.__begin_), inPropertyData.__begin_);
    if (inPropertyData.__begin_)
    {
      inPropertyData.__end_ = inPropertyData.__begin_;
      operator delete(inPropertyData.__begin_);
    }
    if (*(void *)&__p.mSampleRate)
    {
      *(Float64 *)&__p.mFormatID = __p.mSampleRate;
      operator delete(*(void **)&__p.mSampleRate);
    }
    if (v21) {
      goto LABEL_165;
    }
  }
  if (*((unsigned char *)this + 1352) || v16 <= 2)
  {
    uint64_t v21 = AudioConverterSetProperty(outAudioConverter, 0x6F636C20u, v74 - v73, v73);
    if (v21) {
      goto LABEL_165;
    }
  }
  int v20 = 1;
LABEL_45:
  uint64_t v24 = *((void *)this + 15);
  if (v24) {
    LODWORD(v25) = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v24 + 24))(v24, v18);
  }
  else {
    uint64_t v25 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v25 < 2) {
    goto LABEL_72;
  }
  uint64_t v26 = ausdk::AUScope::SafeGetElement(v2, 1u);
  long long v27 = *(_OWORD *)(v26 + 96);
  *(_OWORD *)&inSourceFormat.Float64 mSampleRate = *(_OWORD *)(v26 + 80);
  *(_OWORD *)&inSourceFormat.mBytesPerPacket = v27;
  *(void *)&inSourceFormat.mBitsPerChannel = *(void *)(v26 + 112);
  if (inSourceFormat.mSampleRate == inDestinationFormat.mSampleRate
    && inSourceFormat.mFormatID == inDestinationFormat.mFormatID
    && inSourceFormat.mFormatFlags == inDestinationFormat.mFormatFlags
    && inSourceFormat.mBytesPerPacket == inDestinationFormat.mBytesPerPacket
    && inSourceFormat.mFramesPerPacket == inDestinationFormat.mFramesPerPacket
    && inSourceFormat.mBytesPerFrame == inDestinationFormat.mBytesPerFrame
    && inSourceFormat.mChannelsPerFrame == inDestinationFormat.mChannelsPerFrame
    && inSourceFormat.mBitsPerChannel == inDestinationFormat.mBitsPerChannel)
  {
    goto LABEL_72;
  }
  AudioConverterRef outAudioConverter = 0;
  uint64_t v21 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
  if (v21) {
    goto LABEL_165;
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 144, outAudioConverter);
  if (*((unsigned char *)this + 1184))
  {
    UInt32 v28 = inSourceFormat.mChannelsPerFrame;
    goto LABEL_60;
  }
  UInt32 v28 = inSourceFormat.mChannelsPerFrame;
  if ((inSourceFormat.mFormatFlags & 0x20) == 0 || inSourceFormat.mChannelsPerFrame <= 2)
  {
LABEL_60:
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout((std::vector<char> *)&__p, v28);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&inPropertyData, (uint64_t)this + 1160, *(const void **)&__p.mSampleRate, *(uint64_t *)&__p.mFormatID);
    uint64_t v21 = AudioConverterSetProperty(outAudioConverter, 0x69636C20u, LODWORD(inPropertyData.__end_) - LODWORD(inPropertyData.__begin_), inPropertyData.__begin_);
    if (inPropertyData.__begin_)
    {
      inPropertyData.__end_ = inPropertyData.__begin_;
      operator delete(inPropertyData.__begin_);
    }
    if (*(void *)&__p.mSampleRate)
    {
      *(Float64 *)&__p.mFormatID = __p.mSampleRate;
      operator delete(*(void **)&__p.mSampleRate);
    }
    if (v21) {
      goto LABEL_165;
    }
  }
  if (*((unsigned char *)this + 1352) || v16 <= 2)
  {
    uint64_t v21 = AudioConverterSetProperty(outAudioConverter, 0x6F636C20u, v74 - v73, v73);
    if (v21) {
      goto LABEL_165;
    }
  }
  int v20 = 1;
LABEL_72:
  uint64_t v29 = *((void *)this + 15);
  if (v29) {
    LODWORD(v3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
  }
  else {
    uint64_t v30 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v30 < 3
    || (uint64_t v31 = ausdk::AUScope::SafeGetElement(v2, 2u),
        long long v32 = *(_OWORD *)(v31 + 96),
        *(_OWORD *)&inSourceFormat.Float64 mSampleRate = *(_OWORD *)(v31 + 80),
        *(_OWORD *)&inSourceFormat.mBytesPerPacket = v32,
        *(void *)&inSourceFormat.mBitsPerChannel = *(void *)(v31 + 112),
        inSourceFormat.mSampleRate == inDestinationFormat.mSampleRate)
    && inSourceFormat.mFormatID == inDestinationFormat.mFormatID
    && inSourceFormat.mFormatFlags == inDestinationFormat.mFormatFlags
    && inSourceFormat.mBytesPerPacket == inDestinationFormat.mBytesPerPacket
    && inSourceFormat.mFramesPerPacket == inDestinationFormat.mFramesPerPacket
    && inSourceFormat.mBytesPerFrame == inDestinationFormat.mBytesPerFrame
    && inSourceFormat.mChannelsPerFrame == inDestinationFormat.mChannelsPerFrame
    && inSourceFormat.mBitsPerChannel == inDestinationFormat.mBitsPerChannel)
  {
LABEL_99:
    uint64_t v34 = *((void *)this + 21);
    if (v34) {
      LODWORD(v35) = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 24))(v34);
    }
    else {
      uint64_t v35 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v35 < 2)
    {
LABEL_159:
      if (v20)
      {
        uint64_t v50 = ExtendedAudioBufferList_Create();
        CA::AudioBuffers::AudioBuffers(&inSourceFormat, v50);
        if (*((unsigned char *)this + 1320))
        {
          Float64 v51 = *((double *)this + 164);
          Float64 mSampleRate = inSourceFormat.mSampleRate;
        }
        else
        {
          Float64 v51 = 0.0;
          Float64 mSampleRate = inSourceFormat.mSampleRate;
          *((unsigned char *)this + 132std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
        }
        inSourceFormat.Float64 mSampleRate = v51;
        *((Float64 *)this + 164) = mSampleRate;
        ExtendedAudioBufferList_Destroy();
      }
      uint64_t v21 = 0;
      goto LABEL_165;
    }
    uint64_t v36 = ausdk::AUScope::SafeGetElement((AUDynamicDuckerV2 *)((char *)this + 128), 1u);
    long long v37 = *(_OWORD *)(v36 + 96);
    *(_OWORD *)&inSourceFormat.Float64 mSampleRate = *(_OWORD *)(v36 + 80);
    *(_OWORD *)&inSourceFormat.mBytesPerPacket = v37;
    *(void *)&inSourceFormat.mBitsPerChannel = *(void *)(v36 + 112);
    if ((inSourceFormat.mFormatFlags & 0x20) != 0) {
      unsigned int v38 = HIDWORD(v37);
    }
    else {
      unsigned int v38 = 1;
    }
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&inPropertyData, SHIDWORD(v37));
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&outAudioConverter, (uint64_t)this + 1360, inPropertyData.__begin_, (uint64_t)inPropertyData.__end_);
    uint64_t v39 = *((void *)this + 15);
    if (v39) {
      LODWORD(v4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 24))(v39);
    }
    else {
      uint64_t v40 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v40 < 4) {
      goto LABEL_129;
    }
    uint64_t v41 = ausdk::AUScope::SafeGetElement(v2, 3u);
    long long v42 = *(_OWORD *)(v41 + 96);
    *(_OWORD *)&__p.Float64 mSampleRate = *(_OWORD *)(v41 + 80);
    *(_OWORD *)&__p.mBytesPerPacket = v42;
    *(void *)&__p.mBitsPerChannel = *(void *)(v41 + 112);
    if (__p.mSampleRate == inSourceFormat.mSampleRate
      && __p.mFormatID == inSourceFormat.mFormatID
      && *(_OWORD *)&__p.mFormatFlags == *(_OWORD *)&inSourceFormat.mFormatFlags
      && *(void *)&__p.mChannelsPerFrame == *(void *)&inSourceFormat.mChannelsPerFrame)
    {
      goto LABEL_129;
    }
    AudioConverterRef inAudioConverter = 0;
    uint64_t v21 = AudioConverterNew(&__p, &inSourceFormat, &inAudioConverter);
    if (v21) {
      goto LABEL_151;
    }
    std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 154, inAudioConverter);
    if (*((unsigned char *)this + 1264))
    {
      UInt32 v43 = __p.mChannelsPerFrame;
    }
    else
    {
      UInt32 v43 = __p.mChannelsPerFrame;
      if ((__p.mFormatFlags & 0x20) != 0 && __p.mChannelsPerFrame > 2)
      {
LABEL_125:
        if (*((unsigned char *)this + 1384) || v38 <= 2)
        {
          uint64_t v21 = AudioConverterSetProperty(inAudioConverter, 0x6F636C20u, v70 - outAudioConverter, outAudioConverter);
          if (v21) {
            goto LABEL_151;
          }
        }
        int v20 = 1;
LABEL_129:
        uint64_t v44 = *((void *)this + 15);
        if (v44) {
          LODWORD(v45) = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
        }
        else {
          uint64_t v45 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
        }
        if (v45 < 5) {
          goto LABEL_153;
        }
        uint64_t v46 = ausdk::AUScope::SafeGetElement(v2, 4u);
        long long v47 = *(_OWORD *)(v46 + 96);
        *(_OWORD *)&__p.Float64 mSampleRate = *(_OWORD *)(v46 + 80);
        *(_OWORD *)&__p.mBytesPerPacket = v47;
        *(void *)&__p.mBitsPerChannel = *(void *)(v46 + 112);
        if (__p.mSampleRate == inSourceFormat.mSampleRate
          && __p.mFormatID == inSourceFormat.mFormatID
          && *(_OWORD *)&__p.mFormatFlags == *(_OWORD *)&inSourceFormat.mFormatFlags
          && *(void *)&__p.mChannelsPerFrame == *(void *)&inSourceFormat.mChannelsPerFrame)
        {
          goto LABEL_153;
        }
        AudioConverterRef inAudioConverter = 0;
        uint64_t v21 = AudioConverterNew(&__p, &inSourceFormat, &inAudioConverter);
        if (!v21)
        {
          std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 159, inAudioConverter);
          if (*((unsigned char *)this + 1304))
          {
            UInt32 v48 = __p.mChannelsPerFrame;
          }
          else
          {
            UInt32 v48 = __p.mChannelsPerFrame;
            if ((__p.mFormatFlags & 0x20) != 0 && __p.mChannelsPerFrame > 2)
            {
LABEL_148:
              if (*((unsigned char *)this + 1384) || v38 <= 2)
              {
                uint64_t v21 = AudioConverterSetProperty(inAudioConverter, 0x6F636C20u, v70 - outAudioConverter, outAudioConverter);
                if (v21) {
                  goto LABEL_151;
                }
              }
              int v20 = 1;
LABEL_153:
              uint64_t v21 = 0;
              char v49 = 1;
LABEL_154:
              if (outAudioConverter)
              {
                AudioConverterRef v70 = outAudioConverter;
                operator delete(outAudioConverter);
              }
              if (inPropertyData.__begin_)
              {
                inPropertyData.__end_ = inPropertyData.__begin_;
                operator delete(inPropertyData.__begin_);
              }
              if ((v49 & 1) == 0) {
                goto LABEL_165;
              }
              goto LABEL_159;
            }
          }
          AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&v66, v48);
          std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&v64, (uint64_t)this + 1280, v66.__begin_, (uint64_t)v66.__end_);
          uint64_t v21 = AudioConverterSetProperty(inAudioConverter, 0x69636C20u, v65 - v64, v64);
          if (v64)
          {
            int v65 = v64;
            operator delete(v64);
          }
          if (v66.__begin_)
          {
            v66.__end_ = v66.__begin_;
            operator delete(v66.__begin_);
          }
          if (v21) {
            goto LABEL_151;
          }
          goto LABEL_148;
        }
LABEL_151:
        char v49 = 0;
        goto LABEL_154;
      }
    }
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout(&v66, v43);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&v64, (uint64_t)this + 1240, v66.__begin_, (uint64_t)v66.__end_);
    uint64_t v21 = AudioConverterSetProperty(inAudioConverter, 0x69636C20u, v65 - v64, v64);
    if (v64)
    {
      int v65 = v64;
      operator delete(v64);
    }
    if (v66.__begin_)
    {
      v66.__end_ = v66.__begin_;
      operator delete(v66.__begin_);
    }
    if (v21) {
      goto LABEL_151;
    }
    goto LABEL_125;
  }
  AudioConverterRef outAudioConverter = 0;
  uint64_t v21 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
  if (!v21)
  {
    std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)this + 149, outAudioConverter);
    if (*((unsigned char *)this + 1224))
    {
      UInt32 v33 = inSourceFormat.mChannelsPerFrame;
    }
    else
    {
      UInt32 v33 = inSourceFormat.mChannelsPerFrame;
      if ((inSourceFormat.mFormatFlags & 0x20) != 0 && inSourceFormat.mChannelsPerFrame > 2) {
        goto LABEL_95;
      }
    }
    AU::ReferenceSignalMixer::MakeDefaultChannelLayout((std::vector<char> *)&__p, v33);
    std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(&inPropertyData, (uint64_t)this + 1200, *(const void **)&__p.mSampleRate, *(uint64_t *)&__p.mFormatID);
    uint64_t v21 = AudioConverterSetProperty(outAudioConverter, 0x69636C20u, LODWORD(inPropertyData.__end_) - LODWORD(inPropertyData.__begin_), inPropertyData.__begin_);
    if (inPropertyData.__begin_)
    {
      inPropertyData.__end_ = inPropertyData.__begin_;
      operator delete(inPropertyData.__begin_);
    }
    if (*(void *)&__p.mSampleRate)
    {
      *(Float64 *)&__p.mFormatID = __p.mSampleRate;
      operator delete(*(void **)&__p.mSampleRate);
    }
    if (v21) {
      goto LABEL_165;
    }
LABEL_95:
    if (!*((unsigned char *)this + 1352) && v16 > 2
      || (uint64_t v21 = AudioConverterSetProperty(outAudioConverter, 0x6F636C20u, v74 - v73, v73), !v21))
    {
      int v20 = 1;
      goto LABEL_99;
    }
  }
LABEL_165:
  if (v73)
  {
    float v74 = v73;
    operator delete(v73);
  }
  if (v75.__begin_)
  {
    v75.__end_ = v75.__begin_;
    operator delete(v75.__begin_);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  if (!v21)
  {
    uint64_t v53 = ausdk::AUScope::SafeGetElement(v2, 0);
    unsigned int v54 = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 544);
    long long v55 = *(_OWORD *)(v53 + 96);
    *(_OWORD *)&inDestinationFormat.Float64 mSampleRate = *(_OWORD *)(v53 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v55;
    *(void *)&inDestinationFormat.mBitsPerChannel = *(void *)(v53 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 544), (const CA::StreamDescription *)&inDestinationFormat, v54);
    *((unsigned char *)this + 648) = 1;
    uint64_t v56 = ausdk::AUScope::SafeGetElement(v2, 1u);
    unsigned int v57 = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 656);
    long long v58 = *(_OWORD *)(v56 + 96);
    *(_OWORD *)&inDestinationFormat.Float64 mSampleRate = *(_OWORD *)(v56 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v58;
    *(void *)&inDestinationFormat.mBitsPerChannel = *(void *)(v56 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 656), (const CA::StreamDescription *)&inDestinationFormat, v57);
    *((unsigned char *)this + 76std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
    uint64_t v59 = ausdk::AUScope::SafeGetElement(v2, 2u);
    unsigned int v60 = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 768);
    long long v61 = *(_OWORD *)(v59 + 96);
    *(_OWORD *)&inDestinationFormat.Float64 mSampleRate = *(_OWORD *)(v59 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v61;
    *(void *)&inDestinationFormat.mBitsPerChannel = *(void *)(v59 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 768), (const CA::StreamDescription *)&inDestinationFormat, v60);
    *((unsigned char *)this + 872) = 1;
    uint64_t v62 = ausdk::AUScope::SafeGetElement(v2, 3u);
    LODWORD(v59) = *((_DWORD *)this + 84);
    std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::reset[abi:ne180100]((uint64_t)this + 880);
    long long v63 = *(_OWORD *)(v62 + 96);
    *(_OWORD *)&inDestinationFormat.Float64 mSampleRate = *(_OWORD *)(v62 + 80);
    *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v63;
    *(void *)&inDestinationFormat.mBitsPerChannel = *(void *)(v62 + 112);
    AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow((AUDynamicDuckerV2 *)((char *)this + 880), (const CA::StreamDescription *)&inDestinationFormat, v59);
    *((unsigned char *)this + 984) = 1;
    atomic_store(0, (unsigned int *)this + 134);
    AUDynamicDuckerV2::Reset(this);
    AUDynamicDuckerV2::UpdateState(this);
    return 0;
  }
  return v21;
}

void sub_1BB592988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a34) {
    operator delete(a34);
  }
  long long v37 = *(void **)(v35 - 192);
  if (v37)
  {
    *(void *)(v35 - 184) = v37;
    operator delete(v37);
  }
  unsigned int v38 = *(void **)(v35 - 168);
  if (v38)
  {
    *(void *)(v35 - 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

AUDynamicDuckerV2::PowerHistoryWindow *AUDynamicDuckerV2::PowerHistoryWindow::PowerHistoryWindow(AUDynamicDuckerV2::PowerHistoryWindow *this, const CA::StreamDescription *a2, unsigned int a3)
{
  *(void *)this = (char *)this + 24;
  *(_OWORD *)((char *)this + 8) = xmmword_1BB8716B0;
  *((_OWORD *)this + 4) = 0u;
  uint64_t v6 = (char *)this + 64;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0x48400000000;
  *((_DWORD *)this + 14) = 0;
  if ((*((_DWORD *)a2 + 3) & 0x20) != 0) {
    unint64_t v7 = *((unsigned int *)a2 + 7);
  }
  else {
    unint64_t v7 = 1;
  }
  int v23 = 0;
  boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_resize<float,boost::move_detail::integral_constant<unsigned int,1u>>((uint64_t)this, v7, &v23);
  *((float *)this + 8) = (float)a3;
  *((_DWORD *)this + 9) = a3;
  *((void *)this + 5) = 0;
  unint64_t v8 = fmax(ceil(1.0 / ((double)a3 / *(double *)a2)), 1.0);
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = v8;
  *((_DWORD *)this + 14) = 1065353216;
  uint64_t v10 = (int *)*((void *)this + 8);
  unsigned int v9 = (int *)*((void *)this + 9);
  if (v9 - v10 != v8)
  {
    if (v8) {
      uint64_t v11 = (char *)operator new(4 * v8);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = *((void *)this + 12);
    if (v12) {
      UInt32 v13 = (int *)*((void *)this + 10);
    }
    else {
      UInt32 v13 = 0;
    }
    if (v12 >= v8) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = *((void *)this + 12);
    }
    long long v15 = v13;
    if (v14)
    {
      uint64_t v16 = v14 >= v9 - v13 ? v9 - v10 : 0;
      long long v15 = &v13[v14 - v16];
      if (v15 == *((int **)this + 11)) {
        long long v15 = 0;
      }
    }
    uint64_t v17 = v11;
    if (v13 != v15)
    {
      __n128 v18 = (int *)*((void *)this + 11);
      uint64_t v17 = v11;
      do
      {
        int v19 = *v13++;
        *(_DWORD *)uint64_t v17 = v19;
        v17 += 4;
        if (v13 == v9) {
          UInt32 v13 = v10;
        }
        if (v13 == v18) {
          UInt32 v13 = 0;
        }
      }
      while (v13 != v15);
    }
    boost::circular_buffer<float,std::allocator<float>>::destroy((uint64_t)v6);
    int v20 = &v11[4 * v8];
    *((void *)this + 8) = v11;
    *((void *)this + 9) = v20;
    if (v20 == v17) {
      uint64_t v21 = v11;
    }
    else {
      uint64_t v21 = v17;
    }
    *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v11;
    *((void *)this + 11) = v21;
    *((void *)this + 12) = (v17 - v11) >> 2;
  }
  return this;
}

void sub_1BB592C84(_Unwind_Exception *a1)
{
  boost::circular_buffer<float,std::allocator<float>>::destroy(v2);
  if (*(void *)(v1 + 16))
  {
    if (v3 != *(void *)v1) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(a1);
}

void boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_resize<float,boost::move_detail::integral_constant<unsigned int,1u>>(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = v3 - a2;
  if (v3 <= a2)
  {
    unint64_t v5 = *(void *)(a1 + 16);
    BOOL v6 = v5 >= v3;
    unint64_t v7 = v5 - v3;
    if (!v6) {
      __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
    }
    unsigned int v9 = (char *)(*(void *)a1 + 4 * v3);
    unint64_t v10 = a2 - v3;
    if (v7 < a2 - v3)
    {
      boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_n_copies_proxy<boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,float *>>(&v11, (char *)a1, v9, v10, a3);
      return;
    }
    if (v10)
    {
      do
      {
        *(_DWORD *)unsigned int v9 = *a3;
        v9 += 4;
        BOOL v6 = __CFADD__(v4++, 1);
      }
      while (!v6);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void boost::container::vector<float,boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_n_copies_proxy<boost::container::small_vector_allocator<float,boost::container::new_allocator<void>,void>,float *>>(void *a1, char *a2, char *a3, unint64_t a4, int *a5)
{
  unint64_t v5 = (char *)*((void *)a2 + 1);
  unint64_t v6 = *((void *)a2 + 2);
  if (v6 - (unint64_t)v5 >= a4) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (0x1FFFFFFFFFFFFFFFLL - v6 < (unint64_t)&v5[a4 - v6]) {
    goto LABEL_27;
  }
  unint64_t v9 = v6 >> 61;
  unint64_t v10 = 8 * v6;
  if (v9 > 4) {
    uint64_t v11 = -1;
  }
  else {
    uint64_t v11 = v10;
  }
  unint64_t v12 = v10 / 5;
  if (v9) {
    unint64_t v12 = v11;
  }
  unint64_t v13 = (unint64_t)&v5[a4];
  if (v12 < 0x1FFFFFFFFFFFFFFFLL) {
    unint64_t v8 = v12;
  }
  unint64_t v14 = v13 <= v8 ? v8 : v13;
  if (v14 >> 61) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  int v19 = *(char **)a2;
  int v20 = (char *)operator new(4 * v14);
  uint64_t v21 = v20;
  int v23 = *(char **)a2;
  vDSP_Length v22 = (char *)*((void *)a2 + 1);
  uint64_t v24 = v20;
  if (*(void *)a2)
  {
    uint64_t v24 = v20;
    if (v23 != a3)
    {
      memmove(v20, v23, a3 - v23);
      uint64_t v24 = &v21[a3 - v23];
    }
  }
  uint64_t v25 = &v23[4 * (void)v22];
  int v26 = *a5;
  unint64_t v27 = a4;
  UInt32 v28 = v24;
  do
  {
    *(_DWORD *)UInt32 v28 = v26;
    v28 += 4;
    --v27;
  }
  while (v27);
  if (a3 && v25 != a3) {
    memmove(&v24[4 * a4], a3, v25 - a3);
  }
  if (v23 && a2 + 24 != v23)
  {
    operator delete(v23);
    vDSP_Length v22 = (char *)*((void *)a2 + 1);
  }
  *(void *)a2 = v21;
  *((void *)a2 + 1) = &v22[a4];
  *((void *)a2 + 2) = v14;
  *a1 = &v21[a3 - v19];
}

void *std::optional<CA::ChannelLayout>::value_or[abi:ne180100]<CA::ChannelLayout const&>(void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a2 + 24);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    size_t v6 = v5 - *(void *)a2;
    unint64_t v7 = *(const void **)a2;
  }
  else
  {
    size_t v8 = a4 - (void)a3;
    unint64_t v7 = a3;
    uint64_t v5 = a4;
    size_t v6 = v8;
  }
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, v7, v5, v6);
}

void AUDynamicDuckerV2::~AUDynamicDuckerV2(OpaqueAudioConverter **this)
{
  AUDynamicDuckerV2::~AUDynamicDuckerV2(this);

  JUMPOUT(0x1C185D370);
}

{
  OpaqueAudioConverter *v2;
  OpaqueAudioConverter *v3;
  OpaqueAudioConverter *v4;
  OpaqueAudioConverter *v5;
  OpaqueAudioConverter *v6;
  OpaqueAudioConverter *v7;
  OpaqueAudioConverter *v8;
  uint64_t vars8;

  AUDynamicDuckerV2::DisposeAudioConverters(this);
  AUDynamicDuckerV2::DisposePowerHistoryWindows((AUDynamicDuckerV2 *)this);
  if (*((unsigned char *)this + 1384))
  {
    uint64_t v2 = this[170];
    if (v2)
    {
      this[171] = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 1352))
  {
    unint64_t v3 = this[166];
    if (v3)
    {
      this[167] = v3;
      operator delete(v3);
    }
  }
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 164));
  if (*((unsigned char *)this + 1304))
  {
    int v4 = this[160];
    if (v4)
    {
      this[161] = v4;
      operator delete(v4);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 159, 0);
  if (*((unsigned char *)this + 1264))
  {
    uint64_t v5 = this[155];
    if (v5)
    {
      this[156] = v5;
      operator delete(v5);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 154, 0);
  if (*((unsigned char *)this + 1224))
  {
    size_t v6 = this[150];
    if (v6)
    {
      this[151] = v6;
      operator delete(v6);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 149, 0);
  if (*((unsigned char *)this + 1184))
  {
    unint64_t v7 = this[145];
    if (v7)
    {
      this[146] = v7;
      operator delete(v7);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 144, 0);
  if (*((unsigned char *)this + 1144))
  {
    size_t v8 = this[140];
    if (v8)
    {
      this[141] = v8;
      operator delete(v8);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](this + 139, 0);
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 110));
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 96));
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 82));
  std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 68));

  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    ExtendedAudioBufferList_Destroy();
  }
  return a1;
}

uint64_t std::__optional_destruct_base<AUDynamicDuckerV2::PowerHistoryWindow,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    boost::circular_buffer<float,std::allocator<float>>::destroy(a1 + 64);
    if (*(void *)(a1 + 16))
    {
      if (a1 + 24 != *(void *)a1) {
        operator delete(*(void **)a1);
      }
    }
  }
  return a1;
}

uint64_t AUMicSense::GetScopeExtended(AUMicSense *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 560;
  }
  else {
    return 0;
  }
}

uint64_t AUMicSense::ValidFormat(AUMicSense *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  if (a2 == 2 && a3 == 1)
  {
    if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
      BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
    }
    else {
      BOOL v5 = 0;
    }
    return a4->mChannelsPerFrame < 9 && v5;
  }
  else
  {
    UInt32 mBitsPerChannel = a4->mBitsPerChannel;
    BOOL v8 = mBitsPerChannel == 32 || mBitsPerChannel == 64;
    AudioFormatID mFormatID = a4->mFormatID;
    if (mFormatID != 1819304813 && mFormatID != 1718773105) {
      BOOL v8 = 0;
    }
    if (a4->mChannelsPerFrame - 1 >= 8) {
      BOOL v8 = 0;
    }
    return *(_DWORD *)&v8 & (LOBYTE(a4->mFormatFlags) >> 5);
  }
}

uint64_t AUMicSense::SupportedNumChannels(AUMicSense *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMicSense::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 8;
}

BOOL AUMicSense::StreamFormatWritable(AUMicSense *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMicSense::SupportsTail(AUMicSense *this)
{
  return 1;
}

double AUMicSense::GetTailTime(AUMicSense *this)
{
  return 0.0;
}

double AUMicSense::GetLatency(AUMicSense *this)
{
  uint64_t v1 = *((unsigned int *)this + 132);
  if (v1)
  {
    unsigned int v2 = 0;
    unint64_t v3 = (uint64_t *)*((void *)this + 67);
    while (1)
    {
      LODWORD(v4) = 0;
      uint64_t v5 = *v3;
      *(void *)(v5 + 48) = 0;
      if (!*(unsigned char *)(v5 + 142))
      {
        uint64_t v6 = *(void *)(v5 + 56);
        if ((unint64_t)(v6 - 1) < 3)
        {
          uint64_t v4 = (*(void *)(v5 + 96) >> 1) - *(void *)(v5 + 104);
        }
        else if ((unint64_t)(v6 - 4) >= 2)
        {
          if (v6 != 6)
          {
            LODWORD(v4) = 0;
            goto LABEL_11;
          }
          uint64_t v4 = *(void *)(v5 + 24);
        }
        else
        {
          uint64_t v4 = *(void *)(v5 + 96) >> 1;
        }
        *(void *)(v5 + 48) = v4;
      }
LABEL_11:
      if (v2 <= v4) {
        unsigned int v2 = v4;
      }
      v3 += 22;
      if (!--v1) {
        goto LABEL_17;
      }
    }
  }
  unsigned int v2 = 0;
LABEL_17:
  if (*((unsigned char *)this + 612)) {
    v2 += *((_DWORD *)this + 154);
  }
  return (double)v2 / *(double *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0) + 80);
}

uint64_t AUMicSense::GetParameterValueStrings(AUMicSense *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0xFFFFFFFB) != 0) {
    return 4294956418;
  }
  if (!a4) {
    return 0;
  }
  if (a3 == 1)
  {
    v8[0] = xmmword_1E623F188;
    v8[1] = *(_OWORD *)&off_1E623F198;
    v8[2] = xmmword_1E623F1A8;
    unint64_t v9 = @"Frequency Domain 10.00ms";
    CFIndex v6 = 7;
    goto LABEL_10;
  }
  if (a3 == 2)
  {
    *(void *)&v8[0] = @"FFT";
    CFIndex v6 = 1;
LABEL_10:
    CFArrayRef v7 = CFArrayCreate(0, (const void **)v8, v6, 0);
    uint64_t result = 0;
    *a4 = v7;
    return result;
  }
  return 4294956418;
}

uint64_t AUMicSense::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    uint64_t v4 = *((unsigned int *)this + 132);
    if (v4)
    {
      uint64_t v5 = (_DWORD *)((char *)this[67] + 56);
      do
      {
        ++*v5;
        v5 += 44;
        --v4;
      }
      while (v4);
    }
    return 0;
  }
  return result;
}

UInt8 *AUMicSense::SaveExtendedScopes(AUMicSense *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUMicSense::GetParameterInfo(AUMicSense *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result = 4294956418;
  if ((a2 & 0xFFFFFFFB) == 0 && a3 <= 0xD)
  {
    uint64_t v5 = AUMicSense::kUserParameter[a3];
    buffer->unit = AUMicSense::kParameterUnit[v5];
    AudioUnitParameterValue v6 = MicSense_Core::kMaxValue[v5];
    LODWORD(buffer->minValue) = MicSense_Core::kMinValue[v5];
    buffer->maxValue = v6;
    buffer->defaultValue = AUMicSense::kUserParameterDefault[a3];
    CFStringRef v7 = *(&AUMicSense::kParameterName + v5);
    buffer->cfNameString = v7;
    buffer->flags = -914358272;
    CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
    return 0;
  }
  return result;
}

uint64_t AUMicSense::SetBusCount(AUMicSense *this, int a2, unsigned int a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 == 2)
  {
    if (a3 - 1 <= 1)
    {
      uint64_t v4 = (AUMicSense *)((char *)this + 128);
      unsigned int v5 = a3;
      goto LABEL_7;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 4294956445;
    }
    int v9 = 136315650;
    uint64_t v10 = "AUMicSense.cpp";
    __int16 v11 = 1024;
    int v12 = 323;
    __int16 v13 = 1024;
    unsigned int v14 = a3;
    CFStringRef v7 = MEMORY[0x1E4F14500];
    BOOL v8 = "%25s:%-5d Invalid number (%u) of output buses requested. We only support 1–2 buses.";
    goto LABEL_13;
  }
  if (a2 != 1) {
    return 4294956430;
  }
  if (a3 == 1)
  {
    uint64_t v4 = (AUMicSense *)((char *)this + 80);
    unsigned int v5 = 1;
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, v5);
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v9 = 136315650;
    uint64_t v10 = "AUMicSense.cpp";
    __int16 v11 = 1024;
    int v12 = 314;
    __int16 v13 = 1024;
    unsigned int v14 = a3;
    CFStringRef v7 = MEMORY[0x1E4F14500];
    BOOL v8 = "%25s:%-5d Invalid number (%u) of input buses requested. We only support 1 bus.";
LABEL_13:
    _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v9, 0x18u);
  }
  return 4294956445;
}

BOOL AUMicSense::BusCountWritable(AUMicSense *this, int a2)
{
  return (a2 - 1) <= 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUMicSense::Render(AUMicSense *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  unsigned int v22 = 0;
  BOOL v8 = (AUMicSense *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, &v22, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v23[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = *((void *)this + 21);
    if (v12)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
      LODWORD(v13) = v12;
    }
    else
    {
      uint64_t v13 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    uint64_t v14 = v13;
    MEMORY[0x1F4188790](v12);
    uint64_t v17 = &v21[-v16];
    if (v15 >= 0x200) {
      size_t v18 = 512;
    }
    else {
      size_t v18 = v15;
    }
    bzero(&v21[-v16], v18);
    if (v13)
    {
      uint64_t v19 = 0;
      do
      {
        int v20 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), v19);
        *(void *)&v17[8 * v19++] = ausdk::AUIOElement::PrepareBuffer(v20, a4);
      }
      while (v14 != v19);
    }
    return (*(uint64_t (**)(AUMicSense *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, unsigned char *))(*(void *)this + 184))(this, a2, a4, 1, v23, v14, v17);
  }
  return result;
}

uint64_t AUMicSense::ProcessMultipleBufferLists(AUMicSense *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((unsigned char *)this + 720))
  {
    unint64_t v11 = *((unsigned int *)this + 176);
    if (v11)
    {
      unint64_t v12 = 0;
      uint64_t v13 = 16;
      do
      {
        uint64_t v14 = *(const void **)((char *)&(*a5)->mNumberBuffers + v13);
        unint64_t v15 = *(void **)((char *)&(*a7)->mNumberBuffers + v13);
        if (v14 != v15)
        {
          memcpy(v15, v14, 4 * (a3 << *((unsigned char *)this + 721)));
          unint64_t v11 = *((unsigned int *)this + 176);
        }
        ++v12;
        v13 += 16;
      }
      while (v12 < v11);
    }
    if (a6 > 1 && a7[1])
    {
      unsigned int v16 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 1u) + 108);
      unsigned int v17 = *((_DWORD *)this + 176);
      if (v17 >= v16) {
        unsigned int v17 = v16;
      }
      if (v17)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          vDSP_vfill(&AUMicSense::ProcessMultipleBufferLists(unsigned int &,unsigned int,unsigned int,AudioBufferList const**,unsigned int,AudioBufferList**)::kOnef, (float *)a7[1]->mBuffers[v18].mData, 1, (unint64_t)a7[1]->mBuffers[v18].mDataByteSize >> 2);
          ++v19;
          LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 176);
          if (v20 >= v16) {
            unint64_t v20 = v16;
          }
          else {
            unint64_t v20 = v20;
          }
          ++v18;
        }
        while (v19 < v20);
      }
    }
    return 0;
  }
  unint64_t v21 = *((unsigned int *)this + 132);
  if (v21)
  {
    uint64_t v22 = 0;
    for (unint64_t i = 0; i < v21; ++i)
    {
      uint64_t v24 = *((void *)this + 67) + v22;
      int v25 = *(_DWORD *)(v24 + 56);
      if (v25 != *(_DWORD *)(v24 + 60))
      {
        *(_DWORD *)(v24 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v25;
        AUMicSense::syncParametersWithCore(this, i);
        unint64_t v21 = *((unsigned int *)this + 132);
      }
      v22 += 176;
    }
  }
  if (*((unsigned char *)this + 612))
  {
    BlockProcessor::Process(*((BlockProcessor **)this + 78), a3, a5, a7);
  }
  else
  {
    if (*((_DWORD *)this + 179) != a3) {
      return 4294956428;
    }
    unsigned int v32 = *((_DWORD *)this + 154);
    if (a3 % v32) {
      __assert_rtn("ProcessMultipleBufferLists", "AUMicSense.cpp", 780, "inFramesToProcess % mBlockSize == 0");
    }
    if (a3)
    {
      unsigned int v51 = 0;
      size_t v33 = 4 * (v32 << *((unsigned char *)this + 721));
      LODWORD(v34) = *((_DWORD *)this + 176);
      do
      {
        if (v34)
        {
          uint64_t v35 = 0;
          unint64_t v36 = 0;
          uint64_t v37 = 8;
          uint64_t v38 = 16;
          do
          {
            uint64_t v39 = *((void *)this + 67);
            if (*((_DWORD *)this + 152)) {
              uint64_t v40 = *(void ***)(v39 + v37);
            }
            else {
              uint64_t v40 = (void **)(*(void *)(v39 + 8) + v35);
            }
            memcpy(*v40, (const void *)(*(void *)((char *)&(*a5)->mNumberBuffers + v38) + 4 * v51), v33);
            ++v36;
            unint64_t v34 = *((unsigned int *)this + 176);
            v38 += 16;
            v37 += 176;
            v35 += 24;
          }
          while (v36 < v34);
        }
        if (*((_DWORD *)this + 132))
        {
          uint64_t v41 = 0;
          unint64_t v42 = 0;
          do
          {
            MicSense_Core::process(*(MicSense_Core **)(*((void *)this + 67) + v41), *((void *)this + 67) + v41 + 8, (uint64_t *)(*((void *)this + 67) + v41 + 32), *((unsigned int *)this + 154));
            ++v42;
            v41 += 176;
          }
          while (v42 < *((unsigned int *)this + 132));
          LODWORD(v34) = *((_DWORD *)this + 176);
        }
        if (v34)
        {
          uint64_t v43 = 0;
          unint64_t v44 = 0;
          uint64_t v45 = 16;
          uint64_t v46 = 32;
          do
          {
            uint64_t v47 = *((void *)this + 67);
            if (*((_DWORD *)this + 152)) {
              UInt32 v48 = *(const void ***)(v47 + v46);
            }
            else {
              UInt32 v48 = (const void **)(*(void *)(v47 + 32) + v43);
            }
            memcpy((void *)(*(void *)((char *)&(*a7)->mNumberBuffers + v45) + 4 * v51), *v48, v33);
            ++v44;
            unint64_t v34 = *((unsigned int *)this + 176);
            v46 += 176;
            v43 += 24;
            v45 += 16;
          }
          while (v44 < v34);
        }
        int v49 = *((_DWORD *)this + 154);
        v51 += v49;
        a3 -= v49;
      }
      while (a3);
    }
  }
  if (a6 < 2 || !a7[1]) {
    return 0;
  }
  unsigned int v26 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 1u) + 108);
  unsigned int v27 = *((_DWORD *)this + 176);
  if (v27 >= v26) {
    unsigned int v27 = v26;
  }
  if (!v27) {
    return 0;
  }
  unint64_t v28 = 0;
  uint64_t v29 = 16;
  do
  {
    uint64_t result = (*(uint64_t (**)(AUMicSense *, uint64_t, void, unint64_t, void))(*(void *)this + 88))(this, 1004, 4 * (*((_DWORD *)this + 152) == 1), v28, *(void *)((char *)&a7[1]->mNumberBuffers + v29));
    if (result) {
      break;
    }
    ++v28;
    LODWORD(v31) = *((_DWORD *)this + 176);
    unint64_t v31 = v31 >= v26 ? v26 : v31;
    v29 += 16;
  }
  while (v28 < v31);
  return result;
}

void AUMicSense::syncParametersWithCore(AUMicSense *this, uint64_t a2)
{
  uint64_t v4 = 0;
  unsigned int v5 = (AUMicSense *)((char *)this + 560);
  unint64_t v15 = (AUMicSense *)((char *)this + 32);
  uint64_t v6 = 176 * a2;
  do
  {
    CFStringRef v7 = *(void **)(*((void *)this + 67) + v6);
    uint64_t v8 = AUMicSense::kUserParameter[v4];
    if (*((_DWORD *)this + 152))
    {
      int v9 = v5;
      unsigned int v10 = a2;
    }
    else
    {
      int v9 = v15;
      unsigned int v10 = 0;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v9, v10);
    float Parameter = ausdk::AUElement::GetParameter(Element, v4);
    if (MicSense_Core::kMaxValue[v8] < Parameter) {
      float Parameter = MicSense_Core::kMaxValue[v8];
    }
    if (Parameter < *(float *)&MicSense_Core::kMinValue[v8]) {
      float Parameter = *(float *)&MicSense_Core::kMinValue[v8];
    }
    *(float *)(*v7 + 4 * v8) = Parameter;
    ++v4;
  }
  while (v4 != 14);
  uint64_t v14 = *(MicSense_Core **)(*((void *)this + 67) + 176 * a2);

  MicSense_Core::setParameters(v14, v12);
}

uint64_t AUMicSense::CanScheduleParameters(AUMicSense *this)
{
  return 0;
}

uint64_t AUMicSense::SetParameter(AUMicSense *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a4 > 8) {
    return 4294956419;
  }
  if (a2 > 0xE) {
    return 4294956418;
  }
  if (a3 == 4)
  {
    if (*((_DWORD *)this + 152) != 1) {
      goto LABEL_15;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicSense *)((char *)this + 560), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    if (!*((unsigned char *)this + 17) || *((_DWORD *)this + 132) <= a4) {
      goto LABEL_15;
    }
    unsigned int v11 = a4;
  }
  else
  {
    if (a3 || *((_DWORD *)this + 152) || !*((unsigned char *)this + 17)) {
      goto LABEL_15;
    }
    unsigned int v11 = 0;
  }
  uint64_t v13 = *((void *)this + 67) + 176 * v11;
  ++*(_DWORD *)(v13 + 56);
LABEL_15:
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  unint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(v15, a2, a5, 0);
  return 0;
}

uint64_t AUMicSense::SetProperty(AUMicSense *this, int a2, int a3, unsigned int a4, const __CFNumber **a5, unsigned int a6)
{
  if (a3)
  {
    if (a2 == 1000) {
      return 4294956430;
    }
    if (a2 == 1003)
    {
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      else {
        return 4294956430;
      }
    }
    return 4294956417;
  }
  if (a2 > 1002)
  {
    if (a2 == 1003)
    {
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      CFNumberRef v30 = *a5;
      v37[0] = 0;
      CFNumberGetValue(v30, kCFNumberSInt64Type, v37);
      uint64_t v7 = 0;
      *((_DWORD *)this + 152) = v37[0];
      return v7;
    }
    if (a2 != 3700) {
      return 4294956417;
    }
    if (a6 >= 4)
    {
      uint64_t v7 = 0;
      *((unsigned char *)this + 376) = *(unsigned char *)a5;
      return v7;
    }
    return 4294956445;
  }
  if (a2 == 21)
  {
    uint64_t v7 = 0;
    *((unsigned char *)this + 72std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)a5 != 0;
    return v7;
  }
  if (a2 != 1000) {
    return 4294956417;
  }
  if (!a5) {
    return 4294956445;
  }
  CFDictionaryRef v8 = *a5;
  if (!*a5) {
    return 4294956445;
  }
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v8, @"SampleRate");
  if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
  {
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve sample rate from input dictionary.", -1);
    goto LABEL_65;
  }
  *((_DWORD *)this + 159) = valuePtr;
  int v40 = 0;
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v8, @"BlockSize");
  if (!CFNumberGetValue(v10, kCFNumberIntType, &v40))
  {
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve block size used from input dictionary.", -1);
    goto LABEL_65;
  }
  *((_DWORD *)this + 158) = v40;
  unsigned int v39 = 0;
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v8, @"NumberOfChannels");
  if (!CFNumberGetValue(v11, kCFNumberIntType, &v39))
  {
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve number of channels from input dictionary.", -1);
LABEL_65:
  }
  unint64_t v12 = v39;
  *((_DWORD *)this + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v39;
  uint64_t v13 = (void *)((char *)this + 648);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 81, v12);
  std::string::basic_string[abi:ne180100]<0>(v37, "NoiseProfile");
  unsigned int v14 = v39;
  if (v39)
  {
    unint64_t v15 = 0;
    while (1)
    {
      std::to_string(&v34, v15);
      if ((v38 & 0x80u) == 0) {
        unsigned int v16 = v37;
      }
      else {
        unsigned int v16 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        std::string::size_type v17 = v38;
      }
      else {
        std::string::size_type v17 = (std::string::size_type)v37[1];
      }
      uint64_t v18 = std::string::insert(&v34, 0, (const std::string::value_type *)v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      int64_t v36 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)AudioStreamBasicDescription __p = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (v36 >= 0) {
        unint64_t v20 = __p;
      }
      else {
        unint64_t v20 = (void **)__p[0];
      }
      CFStringRef v21 = CFStringCreateWithCString(0, (const char *)v20, 0x8000100u);
      CFDataRef v22 = (const __CFData *)CFDictionaryGetValue(v8, v21);
      CFRelease(v21);
      if (!v22)
      {
        unsigned int v32 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v32, "Failed to retrieve noise profile from input dictionary.", -1);
      }
      unsigned int Length = CFDataGetLength(v22);
      unsigned int v24 = Length >> 2;
      if (Length >> 2 != v40 + 1) {
        break;
      }
      std::vector<float>::resize(*v13 + 24 * v15, v24);
      BytePtr = CFDataGetBytePtr(v22);
      if (Length >= 4)
      {
        unsigned int v26 = *(_DWORD **)(*v13 + 24 * v15);
        if (v24 <= 1) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = v24;
        }
        do
        {
          unsigned int v28 = *(_DWORD *)BytePtr;
          BytePtr += 4;
          *v26++ = bswap32(v28);
          --v27;
        }
        while (v27);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(__p[0]);
      }
      ++v15;
      unsigned int v14 = v39;
      if (v15 >= v39) {
        goto LABEL_38;
      }
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_55;
  }
LABEL_38:
  if (*((unsigned char *)this + 17))
  {
    if (*((_DWORD *)this + 176) != v14)
    {
LABEL_55:
      int v29 = 0;
      uint64_t v7 = 4294956445;
      goto LABEL_56;
    }
    AUMicSense::syncPropertiesWithCore(this);
  }
  uint64_t v7 = 0;
  int v29 = 1;
LABEL_56:
  if ((char)v38 < 0) {
    operator delete(v37[0]);
  }
  if (v29)
  {
    uint64_t v7 = 0;
    *((unsigned char *)this + 696) = 1;
  }
  return v7;
}

void sub_1BB59427C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUMicSense::syncPropertiesWithCore(AUMicSense *this)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 82) - *((void *)this + 81)) >> 3);
  uint64_t v3 = *((unsigned int *)this + 176);
  if (v2 == v3
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 85) - *((void *)this + 84)) >> 3) == v2
    && *((_DWORD *)this + 159)
    && *((_DWORD *)this + 158))
  {
    unsigned int v5 = (void *)((char *)this + 672);
    if (v3)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        int v28 = 0;
        *(_OWORD *)AudioStreamBasicDescription __p = 0u;
        long long v27 = 0u;
        LODWORD(v1) = *((_DWORD *)this + 159);
        uint64_t v8 = *((void *)this + 81) + v6;
        int v9 = *((_DWORD *)this + 158);
        if ((void **)v8 != __p) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)__p, *(char **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
        }
        *(double *)&unint64_t v10 = (double)v1;
        *((double *)&v27 + 1) = (double)v1;
        int v28 = 2 * v9;
        LODWORD(v1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 175);
        SpectralProfile::GetProfile((SpectralProfile *)&v24, (double)v10, (uint64_t)__p, *((_DWORD *)this + 154) + 1, 0.0, 2 * *((_DWORD *)this + 154));
        uint64_t v12 = *v5 + v6;
        uint64_t v13 = *(void **)v12;
        if (*(void *)v12)
        {
          *(void *)(v12 + 8) = v13;
          operator delete(v13);
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
        }
        HIDWORD(v14) = DWORD1(v24);
        *(_OWORD *)uint64_t v12 = v24;
        *(void *)(v12 + 16) = v25;
        LODWORD(v14) = *((_DWORD *)this + 159);
        LODWORD(v11) = *((_DWORD *)this + 175);
        *(float *)&unint64_t v14 = (double)v11 / fmax((double)v14, 1.0);
        LODWORD(v24) = v14;
        vDSP_vsmul(*(const float **)(*((void *)this + 84) + v6), 1, (const float *)&v24, *(float **)(*((void *)this + 84) + v6), 1, (uint64_t)(*(void *)(*((void *)this + 84) + v6 + 8) - *(void *)(*((void *)this + 84) + v6)) >> 2);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v7;
        v6 += 24;
      }
      while (v7 < *((unsigned int *)this + 176));
    }
    if (*((_DWORD *)this + 152))
    {
      unint64_t v15 = *((unsigned int *)this + 132);
      if (v15)
      {
        for (unint64_t i = 0; i < v15; ++i)
        {
          uint64_t v17 = *((void *)this + 84) + 24 * i;
          uint64_t v18 = *(void *)(v17 + 8);
          if (*((_DWORD *)this + 154) + 1 == (v18 - *(void *)v17) >> 2 && v18 != *(void *)v17)
          {
            long long v19 = *(void **)(*((void *)this + 67) + 176 * i);
            unint64_t v20 = v19[8];
            if (v20)
            {
              uint64_t v21 = 0;
              for (unint64_t j = 0; j < v20; ++j)
              {
                uint64_t v23 = v19[5];
                if (v23)
                {
                  memmove(*(void **)(v19[63] + v21), *(const void **)v17, 4 * v23);
                  unint64_t v20 = v19[8];
                }
                v21 += 24;
              }
              unint64_t v15 = *((unsigned int *)this + 132);
            }
          }
        }
      }
    }
    else if (*((_DWORD *)this + 154) + 1 == (uint64_t)(*(void *)(*((void *)this + 84) + 8) {
                                                     - **((void **)this + 84)) >> 2)
    }
    {
      MicSense_Core::setNoiseProfile(**((void ***)this + 67), (void *)this + 84);
    }
  }
}

void sub_1BB59458C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUMicSense::GetProperty(AUMicSense *this, int a2, int a3, unsigned int a4, CFDataRef *__b)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    switch(a2)
    {
      case 1001:
        *(_DWORD *)bytes = 65792;
        strcpy(v20, "Nov 10 2024");
        strcpy((char *)v21, "03:49:59");
        v21[3] = *((_DWORD *)this + 152);
        CFDataRef v9 = CFDataCreate(0, bytes, 44);
        goto LABEL_40;
      case 1002:
LABEL_5:
        if (!*((unsigned char *)this + 17)) {
          return 4294956429;
        }
        int v10 = *((_DWORD *)this + 152);
        if (a3 && !v10 || a3 != 4 && v10 == 1) {
          return 4294956430;
        }
        if (a4 > 7) {
          return 4294956419;
        }
        AUMicSense::updateStatus(this, a4);
        if (*((_DWORD *)this + 152)) {
          uint64_t v11 = *((void *)this + 67) + 176 * a4;
        }
        else {
          uint64_t v11 = *((void *)this + 67);
        }
        CFDataRef v9 = CFDataCreate(0, *(const UInt8 **)(v11 + 152), *(void *)(v11 + 160) - *(void *)(v11 + 152));
LABEL_40:
        CFDataRef v17 = v9;
        uint64_t result = 0;
        *__b = v17;
        return result;
      case 1003:
        uint64_t result = 0;
        int v13 = *((_DWORD *)this + 152);
        goto LABEL_26;
      case 1004:
LABEL_13:
        if (!*((unsigned char *)this + 17)) {
          return 4294956429;
        }
        int v12 = *((_DWORD *)this + 152);
        if (a3 && !v12 || a3 != 4 && v12 == 1) {
          return 4294956430;
        }
        if (a4 > 7) {
          return 4294956419;
        }
        if (v12) {
          unsigned int v14 = a4;
        }
        else {
          unsigned int v14 = 0;
        }
        if (v12) {
          unsigned int v15 = 0;
        }
        else {
          unsigned int v15 = a4;
        }
        if (*((unsigned char *)this + 720))
        {
          uint64_t v16 = *((unsigned int *)this + 84);
          if (v16) {
            memset_pattern16(__b, &unk_1BB873A60, 4 * v16);
          }
        }
        else
        {
          uint64_t v18 = *((unsigned int *)this + 154);
          if (v18 != *((_DWORD *)this + 84)) {
            return 4294956446;
          }
          if (v18) {
            memmove(__b, *(const void **)(*(void *)(*(void *)(*((void *)this + 67) + 176 * v14) + 480) + 24 * v15), 4 * v18);
          }
        }
        return 0;
      default:
        if (a2 == 3700)
        {
          uint64_t result = 0;
          int v13 = *((unsigned __int8 *)this + 376);
        }
        else
        {
          if (a2 != 21) {
            return 4294956417;
          }
          uint64_t result = 0;
          int v13 = *((unsigned __int8 *)this + 720);
        }
LABEL_26:
        *(_DWORD *)__b = v13;
        return result;
    }
  }
  uint64_t result = 4294956430;
  switch(a2)
  {
    case 1001:
    case 1003:
      return result;
    case 1002:
      goto LABEL_5;
    case 1004:
      goto LABEL_13;
    default:
      return 4294956417;
  }
  return result;
}

float32x2_t AUMicSense::updateStatus(AUMicSense *this, unsigned int a2)
{
  int v3 = *((_DWORD *)this + 152);
  if (v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v3) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = 0;
  }
  uint64_t v6 = *(void *)(*((void *)this + 67) + 176 * v5);
  int v7 = *(_DWORD *)(v6 + 24);
  uint64_t v8 = *(void *)(v6 + 96);
  *(void *)(*((void *)this + 67) + 176 * v5 + 88) = *(void *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0)+ 80);
  double v9 = (*(double (**)(AUMicSense *))(*(void *)this + 344))(this);
  uint64_t v10 = *((void *)this + 67) + 176 * v5;
  *(double *)(v10 + 96) = v9;
  *(_DWORD *)(v10 + 104) = v7;
  *(_DWORD *)(v10 + 108) = v8;
  float __B = (float)*((unsigned int *)this + 175) / (float)(unint64_t)(2 * *(void *)(*(void *)v10 + 24));
  BOOL v11 = __CFADD__(v7, 1);
  vDSP_Length v12 = (v7 + 1);
  char v13 = v11;
  vDSP_vramp(&AUMicSense::updateStatus::kStart, &__B, *(float **)(v10 + 112), 1, v12);
  uint64_t v14 = *((void *)this + 67);
  **(_DWORD **)(v14 + 176 * v5 + 112) = 1101004800;
  if ((v13 & 1) == 0)
  {
    memmove(*(void **)(v14 + 176 * v5 + 120), *(const void **)(*(void *)(*(void *)(v14 + 176 * v5) + 456) + 24 * v4), 4 * v12);
    unsigned int v15 = (void **)(*((void *)this + 67) + 176 * v5);
    memmove(v15[16], *(const void **)(*((void *)*v15 + 63) + 24 * v4), 4 * v12);
    uint64_t v16 = (void **)(*((void *)this + 67) + 176 * v5);
    memmove(v16[17], *(const void **)(*((void *)*v16 + 60) + 24 * v4), 4 * v12);
    uint64_t v14 = *((void *)this + 67);
  }
  uint64_t v17 = *(void *)(v14 + 176 * v5);
  if (*(void *)(v17 + 96) >= v12) {
    vDSP_Length v18 = v12;
  }
  else {
    vDSP_Length v18 = *(void *)(v17 + 96);
  }
  if (v18)
  {
    memmove(*(void **)(v14 + 176 * v5 + 144), *(const void **)(*(void *)(v17 + 528) + 24 * v4), 4 * v18);
    uint64_t v14 = *((void *)this + 67);
  }
  if (v12 != v18)
  {
    float __A = -1.0;
    vDSP_vfill(&__A, (float *)(*(void *)(v14 + 176 * v5 + 144) + 4 * v18), 1, (v12 - v18));
    uint64_t v14 = *((void *)this + 67);
  }
  uint64_t v19 = v14 + 176 * v5;
  unint64_t v20 = *(float32x2_t **)(v19 + 152);
  float32x2_t result = vcvt_f32_f64(*(float64x2_t *)(v19 + 88));
  float32x2_t v22 = vcvt_f32_u32(*(uint32x2_t *)(v19 + 104));
  float32x2_t *v20 = result;
  v20[1] = v22;
  return result;
}

uint64_t AUMicSense::GetPropertyInfo(AUMicSense *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3)
  {
    uint64_t result = 4294956430;
    switch(a2)
    {
      case 1000:
      case 1001:
      case 1003:
        return result;
      case 1002:
        if ((a3 & 0xFFFFFFFB) == 0) {
          goto LABEL_12;
        }
        break;
      case 1004:
        goto LABEL_6;
      default:
        goto LABEL_10;
    }
  }
  else
  {
    switch(a2)
    {
      case 1000:
        uint64_t result = 0;
        *a6 = 1;
        goto LABEL_14;
      case 1001:
        uint64_t result = 0;
        *a6 = 0;
LABEL_14:
        int v8 = 8;
        goto LABEL_15;
      case 1002:
LABEL_12:
        uint64_t result = 0;
        *a5 = 8;
        *a6 = 0;
        return result;
      case 1003:
        goto LABEL_9;
      case 1004:
LABEL_6:
        uint64_t result = 0;
        *a6 = 1;
        int v8 = 4 * *((_DWORD *)this + 84);
        goto LABEL_15;
      default:
        if (a2 == 3700 || a2 == 21)
        {
LABEL_9:
          uint64_t result = 0;
          *a6 = 1;
          int v8 = 4;
LABEL_15:
          *a5 = v8;
        }
        else
        {
LABEL_10:
          uint64_t result = 4294956417;
        }
        break;
    }
  }
  return result;
}

uint64_t AUMicSense::Reset(AUMicSense *this)
{
  unint64_t v2 = *((unsigned int *)this + 132);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 67) + 176 * i);
      if (v4)
      {
        unint64_t v5 = *(void *)(v4 + 64);
        uint64_t v6 = *(void *)(v4 + 568);
        int v7 = *(unsigned char **)(v4 + 552);
        if (v5 <= (v6 - (uint64_t)v7) >> 3)
        {
          char v13 = *(char **)(v4 + 560);
          unint64_t v14 = (v13 - v7) >> 3;
          if (v14 >= v5) {
            uint64_t v15 = *(void *)(v4 + 64);
          }
          else {
            uint64_t v15 = (v13 - v7) >> 3;
          }
          if (v15)
          {
            uint64_t v16 = *(void **)(v4 + 552);
            do
            {
              *v16++ = 0;
              --v15;
            }
            while (v15);
          }
          if (v5 <= v14)
          {
            *(void *)(v4 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = &v7[8 * v5];
          }
          else
          {
            uint64_t v17 = &v13[8 * (v5 - v14)];
            uint64_t v18 = 8 * v5 - 8 * v14;
            do
            {
              *(void *)char v13 = 0;
              v13 += 8;
              v18 -= 8;
            }
            while (v18);
            *(void *)(v4 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v17;
          }
        }
        else
        {
          if (v7)
          {
            *(void *)(v4 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v7;
            operator delete(v7);
            uint64_t v6 = 0;
            *(void *)(v4 + 552) = 0;
            *(void *)(v4 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
            *(void *)(v4 + 568) = 0;
          }
          if (v5 >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v8 = v6 >> 2;
          if (v6 >> 2 <= v5) {
            uint64_t v8 = v5;
          }
          if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v8;
          }
          std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100]((void *)(v4 + 552), v9);
          uint64_t v10 = *(void **)(v4 + 560);
          BOOL v11 = &v10[v5];
          uint64_t v12 = 8 * v5;
          do
          {
            *v10++ = 0;
            v12 -= 8;
          }
          while (v12);
          *(void *)(v4 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v11;
        }
        unint64_t v19 = *(void *)(v4 + 32);
        LODWORD(v32.realp) = 0;
        std::vector<float>::assign((char **)(v4 + 312), v19, &v32);
        if (*(void *)(v4 + 64))
        {
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          do
          {
            uint64_t v22 = *(void *)(*(void *)(v4 + 616) + 8 * v21);
            if (v22)
            {
              uint64_t v23 = *(float **)(v22 + 104);
              uint64_t v24 = *(void *)(v22 + 128);
              *(void *)(v22 + 152) = v23;
              *(void *)(v22 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v24;
              *(unsigned char *)(v22 + 48) = 1;
              *(void *)(v22 + 32) = 0;
              vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::reset(void)::val, v23, 1, *(void *)(v22 + 16));
              vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::reset(void)::val, *(float **)(v22 + 128), 1, *(void *)(v22 + 16));
              vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::reset(void)::val, *(float **)(v22 + 80), 1, *(void *)(v22 + 16) + *(void *)(v22 + 8) - 1);
            }
            v32.realp = *(float **)(v4 + 312);
            v32.imagp = v32.realp;
            VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*(void *)(v4 + 576) + 8 * v21), &v32, *(float **)(v4 + 144));
            unint64_t v25 = *(void *)(v4 + 40);
            unsigned int v26 = (char **)(*(void *)(v4 + 456) + v20);
            long long v27 = (char **)(*(void *)(v4 + 480) + v20);
            int v33 = 0;
            std::vector<float>::assign(v26, v25, &v33);
            int v33 = 0;
            std::vector<float>::assign(v27, v25, &v33);
            unint64_t v28 = *(void *)(v4 + 32);
            int v29 = (char **)(*(void *)(v4 + 432) + v20);
            int v33 = 0;
            std::vector<float>::assign(v29, v28, &v33);
            ++v21;
            v20 += 24;
          }
          while (*(void *)(v4 + 64) > v21);
        }
        unint64_t v2 = *((unsigned int *)this + 132);
      }
    }
  }
  CFNumberRef v30 = (BlockProcessor *)*((void *)this + 78);
  if (v30) {
    BlockProcessor::Reset(v30);
  }
  return 0;
}

uint64_t AUMicSense::Initialize(AUMicSense *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 80), 0);
  uint64_t v3 = ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0);
  int v4 = *(_DWORD *)(Element + 88);
  *((unsigned char *)this + 721) = v4 == 1718773105;
  if (v4 != 1819304813 && v4 != 1718773105) {
    return 4294956428;
  }
  uint64_t v6 = v3;
  int v7 = *(_DWORD *)(Element + 108);
  int v8 = *(_DWORD *)(v3 + 108);
  uint64_t v52 = 0;
  unsigned int v9 = (*(uint64_t (**)(AUMicSense *, uint64_t *))(*(void *)this + 376))(this, &v52);
  if (!v9) {
    return 4294956428;
  }
  uint64_t v10 = v9;
  for (unint64_t i = (__int16 *)(v52 + 2); v7 != *(i - 1) || v8 != *i; i += 2)
  {
    if (!--v10) {
      return 4294956428;
    }
  }
  if (*(double *)(Element + 80) != *(double *)(v6 + 80)) {
    return 4294956428;
  }
  *((_DWORD *)this + 176) = v7;
  *((_DWORD *)this + 177) = v8;
  unint64_t v13 = (unint64_t)(*(double *)(ausdk::AUScope::SafeGetElement((AUMicSense *)((char *)this + 128), 0) + 80) + 0.5);
  *((_DWORD *)this + 175) = v13;
  unint64_t v14 = *((unsigned int *)this + 84);
  *((_DWORD *)this + 179) = v14;
  if (*((unsigned char *)this + 721))
  {
    *((unsigned char *)this + 612) = 0;
    *((_DWORD *)this + 154) = v14;
  }
  else
  {
    if (!*((unsigned char *)this + 376)
      || (int PreferredBlockSize = MicSense_Core::getPreferredBlockSize((MicSense_Core *)v13, v14)) == 0)
    {
      *((unsigned char *)this + 612) = 1;
      *((_DWORD *)this + 154) = MicSense_Core::getPreferredBlockProcessorSize((MicSense_Core *)v13);
      int v51 = 1;
      uint64_t v50 = (char *)this + 704;
      MicSenseUtils::create<BlockProcessor,std::unique_ptr<BlockProcessor>,int,unsigned int *,int,unsigned int *,unsigned int &,int (&)(void *,unsigned int,AudioBufferList const**,AudioBufferList**),AUMicSense *>((void *)this + 78);
    }
    *((_DWORD *)this + 154) = PreferredBlockSize;
    *((unsigned char *)this + 612) = 0;
  }
  int v16 = *((_DWORD *)this + 152);
  if (v16 == 1)
  {
    unint64_t v17 = *((unsigned int *)this + 176);
    *((_DWORD *)this + 132) = v17;
  }
  else
  {
    if (v16) {
      return 4294956445;
    }
    unint64_t v17 = 1;
    *((_DWORD *)this + 132) = 1;
    int v16 = *((_DWORD *)this + 176);
  }
  *((_DWORD *)this + 178) = v16;
  uint64_t v18 = *((void *)this + 68);
  uint64_t v19 = *((void *)this + 67);
  unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * ((v18 - v19) >> 4);
  unint64_t v21 = v17 - v20;
  if (v17 <= v20)
  {
    if (v17 < v20)
    {
      uint64_t v42 = v19 + 176 * v17;
      while (v18 != v42)
      {
        v18 -= 176;
        std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>(v18);
      }
      *((void *)this + 68) = v42;
    }
  }
  else
  {
    uint64_t v22 = *((void *)this + 69);
    if (0x2E8BA2E8BA2E8BA3 * ((v22 - v18) >> 4) >= v21)
    {
      unint64_t v43 = v18 + 176 * v21;
      do
      {
        *(void *)(v18 + 48) = 0;
        *(_OWORD *)(v18 + 16) = 0uLL;
        *(_OWORD *)(v18 + 32) = 0uLL;
        *(_OWORD *)uint64_t v18 = 0uLL;
        *(_DWORD *)(v18 + 56) = 1;
        *(_OWORD *)(v18 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0uLL;
        *(_OWORD *)(v18 + 76) = 0uLL;
        *(_OWORD *)(v18 + 92) = 0uLL;
        *(_OWORD *)(v18 + 108) = 0uLL;
        *(_OWORD *)(v18 + 124) = 0uLL;
        *(_OWORD *)(v18 + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0uLL;
        *(_OWORD *)(v18 + 156) = 0uLL;
        *(_DWORD *)(v18 + 172) = 0;
        v18 += 176;
      }
      while (v18 != v43);
      *((void *)this + 68) = v43;
    }
    else
    {
      unint64_t v23 = 0x2E8BA2E8BA2E8BA3 * ((v22 - v19) >> 4);
      uint64_t v24 = 2 * v23;
      if (2 * v23 <= v17) {
        uint64_t v24 = v17;
      }
      if (v23 >= 0xBA2E8BA2E8BA2ELL) {
        unint64_t v25 = 0x1745D1745D1745DLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 > 0x1745D1745D1745DLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v26 = (char *)operator new(176 * v25);
      long long v27 = &v26[176 * v20];
      unint64_t v28 = &v26[176 * v17];
      int v29 = v27;
      do
      {
        *((void *)v29 + 6) = 0;
        *((_OWORD *)v29 + 1) = 0uLL;
        *((_OWORD *)v29 + 2) = 0uLL;
        *(_OWORD *)int v29 = 0uLL;
        *((_DWORD *)v29 + 14) = 1;
        *(_OWORD *)(v29 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0uLL;
        *(_OWORD *)(v29 + 76) = 0uLL;
        *(_OWORD *)(v29 + 92) = 0uLL;
        *(_OWORD *)(v29 + 108) = 0uLL;
        *(_OWORD *)(v29 + 124) = 0uLL;
        *(_OWORD *)(v29 + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0uLL;
        *(_OWORD *)(v29 + 156) = 0uLL;
        *((_DWORD *)v29 + 43) = 0;
        v29 += 176;
      }
      while (v29 != v28);
      CFNumberRef v30 = &v26[176 * v25];
      unint64_t v31 = (char *)*((void *)this + 68);
      DSPSplitComplex v32 = (char *)*((void *)this + 67);
      if (v31 == v32)
      {
        *((void *)this + 67) = v27;
        *((void *)this + 68) = v28;
        *((void *)this + 69) = v30;
      }
      else
      {
        uint64_t v33 = 0;
        do
        {
          std::string v34 = &v27[v33];
          uint64_t v35 = &v31[v33];
          uint64_t v36 = *(void *)&v31[v33 - 176];
          *((void *)v35 - 22) = 0;
          *((void *)v34 - 22) = v36;
          *((void *)v34 - 21) = 0;
          *((void *)v34 - 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
          *((void *)v34 - 19) = 0;
          *(_OWORD *)(v34 - 168) = *(_OWORD *)&v31[v33 - 168];
          *((void *)v34 - 19) = *(void *)&v31[v33 - 152];
          *((void *)v35 - 21) = 0;
          *((void *)v35 - 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
          *((void *)v35 - 19) = 0;
          *((void *)v34 - 18) = 0;
          *((void *)v34 - 17) = 0;
          *((void *)v34 - 16) = 0;
          *((_OWORD *)v34 - 9) = *(_OWORD *)&v31[v33 - 144];
          *((void *)v34 - 16) = *(void *)&v31[v33 - 128];
          *((void *)v35 - 17) = 0;
          *((void *)v35 - 16) = 0;
          *((void *)v35 - 18) = 0;
          uint64_t v37 = *(void *)&v31[v33 - 120];
          *((void *)v34 - 13) = 0;
          *((void *)v34 - 12) = 0;
          *((void *)v34 - 15) = v37;
          *((void *)v34 - 14) = 0;
          *((_OWORD *)v34 - 7) = *(_OWORD *)&v31[v33 - 112];
          *((void *)v34 - 12) = *(void *)&v31[v33 - 96];
          *((void *)v35 - 14) = 0;
          *((void *)v35 - 13) = 0;
          *((void *)v35 - 12) = 0;
          long long v38 = *(_OWORD *)&v31[v33 - 88];
          long long v39 = *(_OWORD *)&v31[v33 - 72];
          long long v40 = *(_OWORD *)&v31[v33 - 56];
          *(_OWORD *)(v34 - 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)&v31[v33 - 40];
          *(_OWORD *)(v34 - 56) = v40;
          *(_OWORD *)(v34 - 72) = v39;
          *((void *)v34 - 2) = 0;
          *((void *)v34 - 1) = 0;
          *(_OWORD *)(v34 - 88) = v38;
          *((void *)v34 - 3) = 0;
          *(_OWORD *)(v34 - 24) = *(_OWORD *)&v31[v33 - 24];
          *((void *)v34 - 1) = *(void *)&v31[v33 - 8];
          *((void *)v35 - 3) = 0;
          *((void *)v35 - 2) = 0;
          *((void *)v35 - 1) = 0;
          v33 -= 176;
        }
        while (&v31[v33] != v32);
        uint64_t v41 = (char *)*((void *)this + 67);
        unint64_t v31 = (char *)*((void *)this + 68);
        *((void *)this + 67) = &v27[v33];
        *((void *)this + 68) = v28;
        *((void *)this + 69) = v30;
        if (v31 != v41)
        {
          do
          {
            v31 -= 176;
            std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>((uint64_t)v31);
          }
          while (v31 != v41);
          unint64_t v31 = v41;
        }
      }
      if (v31) {
        operator delete(v31);
      }
    }
  }
  if (*((_DWORD *)this + 132)) {
    operator new();
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 84, *((unsigned int *)this + 176));
  AUMicSense::syncPropertiesWithCore(this);
  if (*((_DWORD *)this + 132))
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    int v46 = *((_DWORD *)this + 154);
    uint64_t v47 = *((void *)this + 67);
    do
    {
      LODWORD(v5std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      std::vector<float>::assign((char **)(v47 + v44 + 152), (5 * v46 + 9), &v50);
      uint64_t v47 = *((void *)this + 67);
      UInt32 v48 = (void *)(v47 + v44);
      uint64_t v49 = *(void *)(v47 + v44 + 152) + 16;
      v48[14] = v49;
      int v46 = *((_DWORD *)this + 154);
      v48[15] = v49 + 4 * (v46 + 1);
      v48[16] = v49 + 4 * (2 * v46 + 2);
      v48[17] = v49 + 4 * (3 * v46 + 3);
      v48[18] = v49 + 4 * (4 * v46 + 4);
      ++v45;
      v44 += 176;
    }
    while (v45 < *((unsigned int *)this + 132));
  }
  return 0;
}

void sub_1BB5954BC(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10B0C409FD0397FLL);
  _Unwind_Resume(a1);
}

void MicSenseUtils::create<BlockProcessor,std::unique_ptr<BlockProcessor>,int,unsigned int *,int,unsigned int *,unsigned int &,int (&)(void *,unsigned int,AudioBufferList const**,AudioBufferList**),AUMicSense *>(void *a1)
{
  if (*a1) {
    operator new();
  }
  operator new();
}

void sub_1BB595624(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MicSense_Core>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void ***)(v2 + 640);
    if (v3)
    {
      CFilterBank::filterbank_destroy(v3);
      *(void *)(v2 + 64std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    }
    int v4 = *(void **)(v2 + 704);
    if (v4)
    {
      *(void *)(v2 + 712) = v4;
      operator delete(v4);
    }
    unint64_t v5 = *(void **)(v2 + 680);
    if (v5)
    {
      *(void *)(v2 + 688) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(v2 + 656);
    if (v6)
    {
      *(void *)(v2 + 664) = v6;
      operator delete(v6);
    }
    uint64_t v22 = (void **)(v2 + 616);
    std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100](&v22);
    std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100]((void *)(v2 + 608), 0);
    uint64_t v7 = *(void *)(v2 + 600);
    *(void *)(v2 + 60std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    if (v7) {
      std::default_delete<MultiRadixRealFFT>::operator()[abi:ne180100](v7);
    }
    uint64_t v22 = (void **)(v2 + 576);
    std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v22);
    int v8 = *(void **)(v2 + 552);
    if (v8)
    {
      *(void *)(v2 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
      operator delete(v8);
    }
    uint64_t v22 = (void **)(v2 + 528);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
    uint64_t v22 = (void **)(v2 + 504);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
    uint64_t v22 = (void **)(v2 + 480);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
    uint64_t v22 = (void **)(v2 + 456);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
    uint64_t v22 = (void **)(v2 + 432);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
    unsigned int v9 = *(void **)(v2 + 408);
    if (v9)
    {
      *(void *)(v2 + 416) = v9;
      operator delete(v9);
    }
    uint64_t v10 = *(void **)(v2 + 384);
    if (v10)
    {
      *(void *)(v2 + 392) = v10;
      operator delete(v10);
    }
    BOOL v11 = *(void **)(v2 + 360);
    if (v11)
    {
      *(void *)(v2 + 368) = v11;
      operator delete(v11);
    }
    uint64_t v12 = *(void **)(v2 + 336);
    if (v12)
    {
      *(void *)(v2 + 344) = v12;
      operator delete(v12);
    }
    unint64_t v13 = *(void **)(v2 + 312);
    if (v13)
    {
      *(void *)(v2 + 32std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v13;
      operator delete(v13);
    }
    unint64_t v14 = *(void **)(v2 + 288);
    if (v14)
    {
      *(void *)(v2 + 296) = v14;
      operator delete(v14);
    }
    uint64_t v15 = *(void **)(v2 + 264);
    if (v15)
    {
      *(void *)(v2 + 272) = v15;
      operator delete(v15);
    }
    int v16 = *(void **)(v2 + 240);
    if (v16)
    {
      *(void *)(v2 + 248) = v16;
      operator delete(v16);
    }
    unint64_t v17 = *(void **)(v2 + 216);
    if (v17)
    {
      *(void *)(v2 + 224) = v17;
      operator delete(v17);
    }
    uint64_t v18 = *(void **)(v2 + 192);
    if (v18)
    {
      *(void *)(v2 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v18;
      operator delete(v18);
    }
    uint64_t v19 = *(void **)(v2 + 168);
    if (v19)
    {
      *(void *)(v2 + 176) = v19;
      operator delete(v19);
    }
    unint64_t v20 = *(void **)(v2 + 144);
    if (v20)
    {
      *(void *)(v2 + 152) = v20;
      operator delete(v20);
    }
    unint64_t v21 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v21;
      operator delete(v21);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  unint64_t v5 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return std::unique_ptr<MicSense_Core>::reset[abi:ne180100]((uint64_t *)a1, 0);
}

uint64_t AUMicSense::BlockProcessClassFunc(AUMicSense *this, void *a2, void *a3, const AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v6 = a2;
  LODWORD(v8) = *((_DWORD *)this + 176);
  if (v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 16;
    uint64_t v13 = 8;
    do
    {
      uint64_t v14 = *((void *)this + 67);
      if (*((_DWORD *)this + 152)) {
        uint64_t v15 = *(void ***)(v14 + v13);
      }
      else {
        uint64_t v15 = (void **)(*(void *)(v14 + 8) + v10);
      }
      memcpy(*v15, *(const void **)(*a3 + v12), 4 * v6);
      ++v11;
      unint64_t v8 = *((unsigned int *)this + 176);
      v10 += 24;
      v12 += 16;
      v13 += 176;
    }
    while (v11 < v8);
  }
  if (*((_DWORD *)this + 132))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      MicSense_Core::process(*(MicSense_Core **)(*((void *)this + 67) + v16), *((void *)this + 67) + v16 + 8, (uint64_t *)(*((void *)this + 67) + v16 + 32), v6);
      ++v17;
      v16 += 176;
    }
    while (v17 < *((unsigned int *)this + 132));
    LODWORD(v8) = *((_DWORD *)this + 176);
  }
  if (v8)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    size_t v20 = 4 * v6;
    uint64_t v21 = 32;
    uint64_t v22 = 16;
    do
    {
      uint64_t v23 = *((void *)this + 67);
      if (*((_DWORD *)this + 152)) {
        uint64_t v24 = *(const void ***)(v23 + v21);
      }
      else {
        uint64_t v24 = (const void **)(*(void *)(v23 + 32) + v18);
      }
      memcpy(*(void **)((char *)&(*a4)->mNumberBuffers + v22), *v24, v20);
      ++v19;
      v18 += 24;
      v21 += 176;
      v22 += 16;
    }
    while (v19 < *((unsigned int *)this + 176));
  }
  return 0;
}

uint64_t AUMicSense::CreateExtendedElements(AUMicSense *this)
{
  uint64_t v2 = (AUMicSense *)((char *)this + 560);
  ausdk::AUScope::Initialize((AUMicSense *)((char *)this + 560), this, 4, 8);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v4 = *((void *)this + 75);
    uint64_t result = v4
           ? (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4)
           : (*((void *)this + 73) - *((void *)this + 72)) >> 3;
    if (i >= result) {
      break;
    }
    std::to_string(&v12, i);
    unsigned int v6 = std::string::insert(&v12, 0, "Channel", 7uLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    int64_t v14 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)AudioStreamBasicDescription __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v14 >= 0) {
      unint64_t v8 = __p;
    }
    else {
      unint64_t v8 = (void **)__p[0];
    }
    CFStringRef v9 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v2, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v9);
    CFRelease(v9);
    uint64_t v11 = ausdk::AUScope::GetElement(v2, i);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 40))(v11, 14);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  return result;
}

void sub_1BB595BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUMicSense::~AUMicSense(AUMicSense *this)
{
  AUMicSense::~AUMicSense(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;

  *(void *)this = &unk_1F14B5D98;
  uint64_t v2 = (void **)((char *)this + 672);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 648);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::unique_ptr<BlockProcessor>::reset[abi:ne180100]((uint64_t *)this + 78, 0);
  uint64_t v2 = (void **)((char *)this + 576);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 536);
  std::vector<AUMicSense::MicSenseInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

void std::vector<AUMicSense::MicSenseInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 176;
        std::__destroy_at[abi:ne180100]<AUMicSense::MicSenseInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void NeuralNetVAD::NeuralNetVAD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(a1 + 56) = 629145600;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 248) = 0x100000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 256) = a3;
  *(void *)(a1 + 264) = 0x3F80000000000000;
  operator new();
}

void sub_1BB5987D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13)
{
  unint64_t v17 = *a13;
  if (*a13)
  {
    v13[25] = v17;
    operator delete(v17);
  }
  std::unique_ptr<NeuralNet>::reset[abi:ne180100](v15, 0);
  uint64_t v18 = *a10;
  if (*a10)
  {
    v13[17] = v18;
    operator delete(v18);
  }
  unint64_t v19 = *a11;
  if (*a11)
  {
    v13[14] = v19;
    operator delete(v19);
  }
  size_t v20 = *v14;
  if (*v14)
  {
    v13[11] = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t ecMIMO::fcn_ecoutOverwritten(ecMIMO *this)
{
  return *((unsigned __int8 *)this + 180);
}

uint64_t ecMIMO::fcn_isAdapting(ecMIMO *this)
{
  return *((unsigned __int8 *)this + 164);
}

void ecMIMO::fcn_set_tHold(ecMIMO *this, float a2, float a3)
{
  *((float *)this + 14) = __exp10f(a2 / 10.0);
  *((float *)this + 15) = __exp10f(a3 / 10.0);
}

double ecMIMO::fcn_get_mic_eclee_xcorr(ecMIMO *this)
{
  return 0.0;
}

float ecMIMO::fcn_get_sxx(ecMIMO *this)
{
  unsigned int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    uint64_t v2 = (float *)*((void *)this + 32);
    float v3 = 0.0;
    uint64_t v4 = *((unsigned int *)this + 4);
    do
    {
      float v5 = *v2++;
      float v3 = v3 + v5;
      --v4;
    }
    while (v4);
  }
  else
  {
    float v3 = 0.0;
  }
  return v3 / (float)v1;
}

float ecMIMO::fcn_get_ref_power_in_db(ecMIMO *this, unsigned int a2)
{
  return log10f(*(float *)(*((void *)this + 32) + 4 * a2)) * 10.0;
}

float ecMIMO::fcn_get_erle_external_db(ecMIMO *this, unsigned int a2)
{
  uint64_t __C = 0;
  uint64_t v3 = 24 * a2;
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 65) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C + 1, *((unsigned int *)this + 11));
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 53) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C, *((unsigned int *)this + 11));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 33)) / (float)(*((float *)this + 33) + *(float *)&__C))
       * 10.0;
}

float ecMIMO::fcn_get_erle_internal_db(ecMIMO *this, unsigned int a2)
{
  uint64_t __C = 0;
  uint64_t v3 = 24 * a2;
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 65) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C + 1, *((unsigned int *)this + 11));
  vDSP_svesq((const float *)(*(void *)(*((void *)this + 68) + v3) + 4 * *((unsigned int *)this + 11)), 1, (float *)&__C, *((unsigned int *)this + 11));
  return log10f((float)(*((float *)&__C + 1) + *((float *)this + 33)) / (float)(*((float *)this + 33) + *(float *)&__C))
       * 10.0;
}

BOOL ecMIMO::fcn_isfinite_ref(ecMIMO *this)
{
  unint64_t v1 = *((unsigned int *)this + 4);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = (_DWORD *)*((void *)this + 32);
  if ((*v2 & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = v2 + 1;
  while (v1 - 1 != v3)
  {
    int v5 = v4[v3++] & 0x7FFFFFFF;
    if (v5 >= 2139095040) {
      return v3 >= v1;
    }
  }
  unint64_t v3 = *((unsigned int *)this + 4);
  return v3 >= v1;
}

BOOL ecMIMO::fcn_isfinite_output(ecMIMO *this)
{
  float __C = 0.0;
  if (!*((_DWORD *)this + 3)) {
    return 1;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(void *)(*((void *)this + 65) + v2) + 4 * *((unsigned int *)this + 11)), 1, &__C, *((unsigned int *)this + 11));
    BOOL result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
      break;
    }
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 3)) {
      return 1;
    }
  }
  return result;
}

BOOL ecMIMO::fcn_isfinite_state(ecMIMO *this)
{
  float __C = 0.0;
  if (!*((_DWORD *)this + 3)) {
    return 1;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  while (1)
  {
    vDSP_sve((const float *)(*(void *)(*((void *)this + 68) + v2) + 4 * *((unsigned int *)this + 11)), 1, &__C, *((unsigned int *)this + 11));
    BOOL result = (LODWORD(__C) & 0x7FFFFFFFu) < 0x7F800000;
    if ((LODWORD(__C) & 0x7FFFFFFFu) >= 0x7F800000) {
      break;
    }
    ++v3;
    v2 += 24;
    if (v3 >= *((unsigned int *)this + 3)) {
      return 1;
    }
  }
  return result;
}

unsigned int *ecMIMO::fcn_tf_output(unsigned int *result, void *a2)
{
  unint64_t v2 = result[3];
  if (v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    unsigned int v6 = result[4];
    unsigned int v7 = result[6];
    unsigned int v8 = v7;
    unsigned int v9 = v6;
    do
    {
      if (v9)
      {
        unint64_t v10 = 0;
        int v11 = v9 * v5 * v8 * v4[9];
        do
        {
          if (v8)
          {
            unsigned int v12 = 0;
            int v13 = v11 + v7 * v10 * v4[9];
            int v14 = -1;
            do
            {
              BOOL result = (unsigned int *)memcpy((void *)(*a2 + 4 * (v13 + v4[9] * v12++)), *(const void **)(*(void *)(*(void *)(*((void *)v4 + 92) + 24 * v5)+ 24 * v10)+ 24 * (v8 + v14)), 4 * v4[9]);
              unsigned int v8 = v4[6];
              --v14;
            }
            while (v12 < v8);
            unsigned int v6 = v4[4];
            unsigned int v7 = v4[6];
          }
          ++v10;
        }
        while (v10 < v6);
        unint64_t v2 = v4[3];
        unsigned int v9 = v6;
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return result;
}

void ecMIMO::fcn_ir_input(uint64_t a1, uint64_t *a2)
{
  vDSP_vclr(*(float **)(a1 + 376), 1, *(unsigned int *)(a1 + 36));
  unint64_t v4 = *(unsigned int *)(a1 + 12);
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    unsigned int v7 = v6;
    do
    {
      if (v7)
      {
        unint64_t v8 = 0;
        unsigned int v9 = *(_DWORD *)(a1 + 156);
        int v10 = v7 * v5 * *(_DWORD *)(a1 + 152);
        unsigned int v11 = v9;
        do
        {
          if (v11)
          {
            unsigned int v12 = 0;
            int v13 = v10 + *(_DWORD *)(a1 + 152) * v8;
            int v14 = -1;
            do
            {
              uint64_t v15 = *(unsigned int *)(a1 + 44);
              unsigned int v16 = v13 + v15 * v12;
              uint64_t v17 = *a2;
              if (v16 + v15 <= (unint64_t)((a2[1] - *a2) >> 2))
              {
                unsigned int v18 = v14 + *(_DWORD *)(a1 + 24);
                v20.realp = 0;
                v20.imagp = 0;
                v20.realp = *(float **)(*(void *)(*(void *)(*(void *)(a1 + 736) + 24 * v5) + 24 * v8) + 24 * v18);
                v20.imagp = &v20.realp[v15];
                memcpy(*(void **)(a1 + 376), (const void *)(v17 + 4 * v16), 4 * v15);
                unint64_t v19 = *(MultiRadixRealFFT **)(a1 + 952);
                if (v19) {
                  MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v19, *(DSPComplex **)(a1 + 376), &v20, 1.0);
                }
                unsigned int v9 = *(_DWORD *)(a1 + 156);
              }
              ++v12;
              --v14;
            }
            while (v12 < v9);
            unsigned int v6 = *(_DWORD *)(a1 + 16);
            unsigned int v11 = v9;
          }
          ++v8;
        }
        while (v8 < v6);
        unint64_t v4 = *(unsigned int *)(a1 + 12);
        unsigned int v7 = v6;
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

void ecMIMO::fcn_ir_output(uint64_t a1, void *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2)
  {
    unint64_t v5 = 0;
    unsigned int v6 = (const float *)(a1 + 108);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    unsigned int v8 = v7;
    do
    {
      if (v8)
      {
        unint64_t v9 = 0;
        unsigned int v10 = *(_DWORD *)(a1 + 156);
        int v18 = v8 * v5 * *(_DWORD *)(a1 + 152);
        do
        {
          if (v10)
          {
            unsigned int v11 = 0;
            int v12 = v18 + *(_DWORD *)(a1 + 152) * v9;
            int v13 = -1;
            do
            {
              vDSP_Length v14 = *(unsigned int *)(a1 + 44);
              uint64_t v15 = (float *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 736) + 24 * v5) + 24 * v9)
                                        + 24 * (v13 + *(_DWORD *)(a1 + 24)))
                            + 4 * v14);
              v19.realp = *(float **)(*(void *)(*(void *)(*(void *)(a1 + 736) + 24 * v5) + 24 * v9)
                                    + 24 * (v13 + *(_DWORD *)(a1 + 24)));
              v19.imagp = v15;
              unsigned int v16 = *(const vDSP_DFT_SetupStruct ****)(a1 + 952);
              vDSP_Length v17 = v14;
              if (v16)
              {
                MultiRadixRealFFT::RealOutOfPlaceInverseTransform(v16, &v19, *(DSPComplex **)(a1 + 376));
                vDSP_Length v17 = *(unsigned int *)(a1 + 44);
              }
              vDSP_vsmul(*(const float **)(a1 + 376), 1, v6, (float *)(*a2 + 4 * (v12 + v14 * v11++)), 1, v17);
              unsigned int v10 = *(_DWORD *)(a1 + 156);
              --v13;
            }
            while (v11 < v10);
            unsigned int v7 = *(_DWORD *)(a1 + 16);
          }
          ++v9;
        }
        while (v9 < v7);
        unint64_t v2 = *(unsigned int *)(a1 + 12);
        unsigned int v8 = v7;
      }
      ++v5;
    }
    while (v5 < v2);
  }
}

uint64_t ecMIMO::ec_proc(ecMIMO *this, const AudioBufferList *a2, const AudioBufferList *a3, const AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, AudioBufferList *a7, int a8)
{
  uint64_t v189 = 0;
  float __C = 0.0;
  bzero(*((void **)this + 23), 4 * *((unsigned int *)this + 4));
  LODWORD(v1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 4);
  if (v10)
  {
    unint64_t v11 = 0;
    unsigned int v176 = 0;
    do
    {
      mData = a3->mBuffers[v11].mData;
      int v13 = *(char **)(*((void *)this + 50) + 24 * v11);
      memcpy(v13, &v13[4 * *((unsigned int *)this + 11)], 4 * *((unsigned int *)this + 11));
      memcpy((void *)(*(void *)(*((void *)this + 50) + 24 * v11) + 4 * *((unsigned int *)this + 11)), mData, 4 * *((unsigned int *)this + 11));
      uint64_t v14 = *((void *)this + 83);
      uint64_t v15 = *((unsigned int *)this + 13);
      uint64_t v16 = *((unsigned int *)this + 11);
      v199.realp = *(float **)(*(void *)(v14 + 24 * v11) + 24 * v15);
      v199.imagp = &v199.realp[v16];
      vDSP_Length v17 = (MultiRadixRealFFT *)*((void *)this + 119);
      if (v17)
      {
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v17, *(DSPComplex **)(*((void *)this + 50) + 24 * v11), &v199, 1.0);
        uint64_t v14 = *((void *)this + 83);
        uint64_t v15 = *((unsigned int *)this + 13);
        uint64_t v16 = *((unsigned int *)this + 11);
      }
      uint64_t v18 = 3 * v15;
      DSPSplitComplex v19 = *(float **)(*(void *)(v14 + 24 * v11) + 8 * v18);
      if (*((unsigned char *)this + 8)) {
        uint64_t v20 = 712;
      }
      else {
        uint64_t v20 = 688;
      }
      uint64_t v21 = *(float **)(*(void *)(*(void *)((char *)this + v20) + 24 * v11) + 8 * v18);
      __A.realp = v19 + 1;
      __A.imagp = &v19[(v16 + 1)];
      vDSP_zvmags(&__A, 1, v21 + 1, 1, (v16 - 1));
      *uint64_t v21 = *v19 * *v19;
      v21[v16] = v19[v16] * v19[v16];
      *(_DWORD *)(*((void *)this + 32) + 4 * v11) = 0;
      if (*((_DWORD *)this + 6))
      {
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        do
        {
          if (*((unsigned char *)this + 8)) {
            uint64_t v24 = 712;
          }
          else {
            uint64_t v24 = 688;
          }
          vDSP_meanv(*(const float **)(*(void *)(*(void *)((char *)this + v24) + 24 * v11) + v22), 1, &__C, *((unsigned int *)this + 10));
          *(float *)(*((void *)this + 32) + 4 * v11) = *(float *)(*((void *)this + 32) + 4 * v11) + __C;
          ++v23;
          v22 += 24;
        }
        while (v23 < *((unsigned int *)this + 6));
      }
      memcpy(a7->mBuffers[v11].mData, mData, 4 * *((unsigned int *)this + 11));
      uint64_t v25 = *((void *)this + 32);
      float v26 = *((float *)this + 33)
          + (float)(*(float *)(v25 + 4 * v11) / (float)(*((_DWORD *)this + 6) * *((_DWORD *)this + 9)));
      *(float *)(v25 + 4 * v11) = v26;
      if ((float)(log10f(v26) * 10.0) > *((float *)this + 37)) {
        *(_DWORD *)(*((void *)this + 23) + 4 * v176++) = v11;
      }
      ++v11;
      unint64_t v10 = *((unsigned int *)this + 4);
    }
    while (v11 < v10);
  }
  else
  {
    unsigned int v176 = 0;
  }
  if (*((unsigned char *)this + 8))
  {
    if (*((_DWORD *)this + 5))
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      p_mData = &a4->mBuffers[0].mData;
      do
      {
        CFNumberRef v30 = *p_mData;
        memcpy(*(void **)(*((void *)this + 56) + v27), (const void *)(*(void *)(*((void *)this + 56) + v27) + 4 * *((unsigned int *)this + 11)), 4 * *((unsigned int *)this + 11));
        memcpy((void *)(*(void *)(*((void *)this + 56) + v27) + 4 * *((unsigned int *)this + 11)), v30, 4 * *((unsigned int *)this + 11));
        unint64_t v31 = (float *)(*(void *)(*((void *)this + 59) + v27) + 4 * *((unsigned int *)this + 11));
        v194.realp = *(float **)(*((void *)this + 59) + v27);
        v194.imagp = v31;
        DSPSplitComplex v32 = (MultiRadixRealFFT *)*((void *)this + 119);
        if (v32) {
          MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v32, *(DSPComplex **)(*((void *)this + 56) + v27), &v194, 1.0);
        }
        ++v28;
        v27 += 24;
        p_mData += 2;
      }
      while (v28 < *((unsigned int *)this + 5));
      LODWORD(v1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 4);
    }
    if (v10)
    {
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      int v35 = -1;
      do
      {
        unint64_t v36 = *((unsigned int *)this + 5);
        if (v34 >= v36 >> 1)
        {
          uint64_t v50 = *(float **)(*(void *)(*((void *)this + 83) + v33) + 24 * *((unsigned int *)this + 13));
          int v51 = *(float **)(*(void *)(*((void *)this + 86) + v33) + 24 * *((unsigned int *)this + 13));
          uint64_t v52 = *((unsigned int *)this + 11);
          __A.realp = v50 + 1;
          __A.imagp = &v50[(v52 + 1)];
          vDSP_zvmags(&__A, 1, v51 + 1, 1, (v52 - 1));
          *int v51 = *v50 * *v50;
          v51[v52] = v50[v52] * v50[v52];
          LODWORD(__A.realp) = 1065353216;
          vDSP_vfill((const float *)&__A, *(float **)(*((void *)this + 80) + v33), 1, *((unsigned int *)this + 10));
        }
        else
        {
          uint64_t v37 = 24 * (v35 + (int)v36);
          memcpy(*(void **)(*(void *)(*((void *)this + 83) + v33) + 24 * *((unsigned int *)this + 13)), *(const void **)(*((void *)this + 59) + v37), 4 * *((unsigned int *)this + 9));
          long long v38 = *(float **)(*(void *)(*((void *)this + 83) + v33) + 24 * *((unsigned int *)this + 13));
          long long v39 = *(float **)(*(void *)(*((void *)this + 86) + v33) + 24 * *((unsigned int *)this + 13));
          uint64_t v40 = *((unsigned int *)this + 11);
          __A.realp = v38 + 1;
          __A.imagp = &v38[(v40 + 1)];
          vDSP_zvmags(&__A, 1, v39 + 1, 1, (v40 - 1));
          *long long v39 = *v38 * *v38;
          v39[v40] = v38[v40] * v38[v40];
          uint64_t v41 = *((void *)this + 59);
          vDSP_Length v42 = *((unsigned int *)this + 11);
          unint64_t v43 = (float *)(*(void *)(v41 + v37) + 4 * v42);
          v193.realp = *(float **)(v41 + v37);
          v193.imagp = v43;
          __B.realp = *(float **)(v41 + v33);
          __B.imagp = &__B.realp[v42];
          v191.realp = (float *)*((void *)this + 35);
          v191.imagp = &v191.realp[v42];
          v190.realp = (float *)*((void *)this + 38);
          v190.imagp = &v190.realp[v42];
          vDSP_zvadd(&v193, 1, &__B, 1, &v191, 1, v42);
          vDSP_zvsub(&v193, 1, &__B, 1, &v190, 1, *((unsigned int *)this + 11));
          uint64_t v44 = (float *)*((void *)this + 35);
          unint64_t v45 = (float *)*((void *)this + 41);
          uint64_t v46 = *((unsigned int *)this + 11);
          __A.realp = v44 + 1;
          __A.imagp = &v44[(v46 + 1)];
          vDSP_zvmags(&__A, 1, v45 + 1, 1, (v46 - 1));
          *unint64_t v45 = *v44 * *v44;
          v45[v46] = v44[v46] * v44[v46];
          uint64_t v47 = (float *)*((void *)this + 38);
          UInt32 v48 = (float *)*((void *)this + 44);
          uint64_t v49 = *((unsigned int *)this + 11);
          __A.realp = v47 + 1;
          __A.imagp = &v47[(v49 + 1)];
          vDSP_zvmags(&__A, 1, v48 + 1, 1, (v49 - 1));
          *UInt32 v48 = *v47 * *v47;
          v48[v49] = v47[v49] * v47[v49];
          vDSP_vthr(*((const float **)this + 41), 1, (const float *)this + 33, *((float **)this + 41), 1, *((unsigned int *)this + 10));
          vDSP_vthr(*((const float **)this + 44), 1, (const float *)this + 33, *((float **)this + 44), 1, *((unsigned int *)this + 10));
          vDSP_vdiv(*((const float **)this + 41), 1, *((const float **)this + 44), 1, *(float **)(*((void *)this + 80) + v33), 1, *((unsigned int *)this + 10));
          vDSP_vclip(*(const float **)(*((void *)this + 80) + v33), 1, (const float *)this + 33, (const float *)this + 29, *(float **)(*((void *)this + 80) + v33), 1, *((unsigned int *)this + 10));
          LODWORD(__A.realp) = *((_DWORD *)this + 10);
          vvsqrtf(*(float **)(*((void *)this + 80) + v33), *(const float **)(*((void *)this + 80) + v33), (const int *)&__A);
        }
        ++v34;
        v33 += 24;
        --v35;
      }
      while (v34 < *((unsigned int *)this + 4));
    }
  }
  if (!v176)
  {
    if (*((_DWORD *)this + 3))
    {
      unint64_t v156 = 0;
      v157 = &a6->mBuffers[0].mData;
      v158 = &a2->mBuffers[0].mData;
      v159 = &a5->mBuffers[0].mData;
      do
      {
        v161 = *v159;
        v159 += 2;
        v160 = v161;
        v163 = *v158;
        v158 += 2;
        v162 = v163;
        v164 = (float *)*v157;
        v157 += 2;
        memcpy(v160, v162, 4 * *((unsigned int *)this + 11));
        vDSP_vclr(v164, 1, *((unsigned int *)this + 11));
        ++v156;
      }
      while (v156 < *((unsigned int *)this + 3));
    }
    ecMIMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 26);
    *((unsigned char *)this + 164) = 0;
    return 0;
  }
  *((unsigned char *)this + 164) = 1;
  if (*((_DWORD *)this + 3))
  {
    uint64_t v53 = 0;
    unint64_t v54 = 0;
    long long v55 = &a2->mBuffers[0].mData;
    do
    {
      uint64_t v56 = *v55;
      v55 += 2;
      memcpy((void *)(*(void *)(*((void *)this + 53) + v53) + 4 * *((unsigned int *)this + 11)), v56, 4 * *((unsigned int *)this + 11));
      ++v54;
      v53 += 24;
    }
    while (v54 < *((unsigned int *)this + 3));
  }
  float32x2_t v57 = *(float32x2_t *)((char *)this + 140);
  v58.i32[0] = vdup_lane_s32((int32x2_t)v57, 1).u32[0];
  v58.i32[1] = *((_DWORD *)this + 34);
  *((float32x2_t *)this + 12) = vmla_n_f32(vmul_f32(v57, v58), *(float32x2_t *)((char *)this + 96), *((float *)this + 20));
  LODWORD(v59) = *((_DWORD *)this + 40);
  if (v59)
  {
    unint64_t v60 = 0;
    if (v176 <= 1) {
      uint64_t v61 = 1;
    }
    else {
      uint64_t v61 = v176;
    }
    v181 = (float *)v61;
    do
    {
      vDSP_vclr(*(float **)(*((void *)this + 77) + 24 * v60), 1, *((unsigned int *)this + 10));
      vDSP_vclr(*(float **)(*((void *)this + 62) + 24 * v60), 1, *((unsigned int *)this + 9));
      unint64_t v62 = 0;
      do
      {
        uint64_t v63 = *((void *)this + 23);
        if (v62 >= (*((void *)this + 24) - v63) >> 2) {
LABEL_117:
        }
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        v185 = (float *)v62;
        uint64_t v64 = *(unsigned int *)(v63 + 4 * v62);
        if (!v64 || (int v65 = (float *)((char *)this + 60), v64 >= *((_DWORD *)this + 4) - 1)) {
          int v65 = (float *)((char *)this + 56);
        }
        if (*((_DWORD *)this + 6))
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
          float v68 = *v65;
          do
          {
            uint64_t v69 = *(unsigned int *)(*((void *)this + 26) + 4 * v67);
            AudioConverterRef v70 = *(float **)(*(void *)(*(void *)(*((void *)this + 92) + 24 * v60) + 24 * v64) + v66);
            vDSP_vsmul(v70, 1, (const float *)this + 19, v70, 1, *((unsigned int *)this + 9));
            v69 *= 3;
            uint64_t v71 = *(void *)(*(void *)(*((void *)this + 83) + 24 * v64) + 8 * v69);
            int v72 = *((_DWORD *)this + 11);
            v199.realp = (float *)(v71 + 4);
            v199.imagp = (float *)(v71 + 4 * (v72 + 1));
            uint64_t v73 = *(void *)(*(void *)(*(void *)(*((void *)this + 92) + 24 * v60) + 24 * v64) + v66);
            __D.realp = (float *)(v73 + 4);
            __D.imagp = (float *)(v73 + 4 * (v72 + 1));
            uint64_t v74 = *(void *)(*(void *)(*(void *)(*((void *)this + 104) + 24 * v60) + 24 * v64) + v66);
            v198.realp = (float *)(v74 + 4);
            v198.imagp = (float *)(v74 + 4 * (v72 + 1));
            vDSP_zvmul(&v199, 1, &__D, 1, &v198, 1, (v72 - 1), 1);
            std::vector<char> v75 = *(float **)(*(void *)(*((void *)this + 83) + 24 * v64) + 8 * v69);
            float v76 = *(float **)(*(void *)(*(void *)(*((void *)this + 92) + 24 * v60) + 24 * v64) + v66);
            float v77 = *(float **)(*(void *)(*(void *)(*((void *)this + 104) + 24 * v60) + 24 * v64) + v66);
            float *v77 = *v75 * *v76;
            v77[*((unsigned int *)this + 11)] = v75[*((unsigned int *)this + 11)] * v76[*((unsigned int *)this + 11)];
            v78 = *(float **)(*((void *)this + 62) + 24 * v60);
            vDSP_vadd(v77, 1, v78, 1, v78, 1, *((unsigned int *)this + 9));
            ecutils::fcn_smooth_psd(*(ecutils **)(*(void *)(*(void *)(*((void *)this + 95) + 24 * v60) + 24 * v64) + v66), *(const float **)(*(void *)(*(void *)(*((void *)this + 101) + 24 * v60) + 24 * v64) + v66), *((float *)this + 17), *((float *)this + 18), (float *)1, v68, *((_DWORD *)this + 10));
            vDSP_vmul(*(const float **)(*(void *)(*((void *)this + 86) + 24 * v64) + 8 * v69), 1, *(const float **)(*(void *)(*(void *)(*((void *)this + 95) + 24 * v60) + 24 * v64) + v66), 1, *(float **)(*(void *)(*(void *)(*((void *)this + 110) + 24 * v60) + 24 * v64) + v66), 1, *((unsigned int *)this + 10));
            vDSP_vadd(*(const float **)(*((void *)this + 77) + 24 * v60), 1, *(const float **)(*(void *)(*(void *)(*((void *)this + 110) + 24 * v60) + 24 * v64) + v66), 1, *(float **)(*((void *)this + 77) + 24 * v60), 1, *((unsigned int *)this + 10));
            ecutils::fcn_complex_mult_by_psd(*(ecutils **)(*(void *)(*((void *)this + 83) + 24 * v64) + 8 * v69), *(const float **)(*(void *)(*(void *)(*((void *)this + 95) + 24 * v60) + 24 * v64) + v66), *(float **)(*(void *)(*(void *)(*((void *)this + 98) + 24 * v60) + 24 * v64) + v66), *((unsigned int *)this + 11));
            if (*((unsigned char *)this + 8)) {
              ecutils::fcn_complex_mult_by_psd(*(ecutils **)(*(void *)(*(void *)(*((void *)this + 98) + 24 * v60) + 24 * v64) + v66), *(const float **)(*((void *)this + 80) + 24 * v64), *(float **)(*(void *)(*(void *)(*((void *)this + 98) + 24 * v60) + 24 * v64) + v66), *((unsigned int *)this + 11));
            }
            ++v67;
            v66 += 24;
          }
          while (v67 < *((unsigned int *)this + 6));
        }
        unint64_t v62 = (unint64_t)v185 + 1;
      }
      while ((float *)((char *)v185 + 1) != v181);
      vDSP_Length v79 = *((unsigned int *)this + 11);
      __A.realp = *(float **)(*((void *)this + 62) + 24 * v60);
      __A.imagp = &__A.realp[v79];
      ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 119), &__A, *(DSPComplex **)(*((void *)this + 68) + 24 * v60), v79, *((float *)this + 27));
      vDSP_Length v80 = *((unsigned int *)this + 11);
      vDSP_vsub((const float *)(*(void *)(*((void *)this + 68) + 24 * v60) + 4 * v80), 1, (const float *)(*(void *)(*((void *)this + 53) + 24 * v60) + 4 * v80), 1, (float *)(*(void *)(*((void *)this + 65) + 24 * v60) + 4 * v80), 1, v80);
      uint64_t v81 = (float *)(*(void *)(*((void *)this + 71) + 24 * v60) + 4 * *((unsigned int *)this + 11));
      v196.realp = *(float **)(*((void *)this + 71) + 24 * v60);
      v196.imagp = v81;
      double v82 = (MultiRadixRealFFT *)*((void *)this + 119);
      if (v82) {
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v82, *(DSPComplex **)(*((void *)this + 65) + 24 * v60), &v196, 1.0);
      }
      double v83 = (float *)(*(void *)(*((void *)this + 74) + 24 * v60) + 4 * *((unsigned int *)this + 9));
      v195.realp = *(float **)(*((void *)this + 74) + 24 * v60);
      v195.imagp = v83;
      ecMIMO::fcn_hilbert_transform(this, (int64x2_t *)&v196, (float *)(*((void *)this + 29) + 4 * v60++), *((void **)this + 120), &v195);
      unint64_t v59 = *((unsigned int *)this + 40);
    }
    while (v60 < v59);
  }
  unsigned int v84 = *((_DWORD *)this + 26);
  if (!v84) {
    goto LABEL_81;
  }
  unsigned int v186 = 0;
  v182 = (float *)((char *)this + 112);
  if (v176 <= 1) {
    uint64_t v85 = 1;
  }
  else {
    uint64_t v85 = v176;
  }
  v177 = (float *)v85;
  int v86 = v59;
  do
  {
    if (!v86) {
      goto LABEL_80;
    }
    unint64_t v87 = 0;
    do
    {
      vDSP_vsadd(*(const float **)(*((void *)this + 77) + 24 * v87), 1, (const float *)(*((void *)this + 29) + 4 * v87), *(float **)(*((void *)this + 116) + 24 * v87), 1, *((unsigned int *)this + 10));
      vDSP_Length v88 = *(float **)(*((void *)this + 116) + 24 * v87);
      vDSP_svdiv((const float *)this + 25, v88, 1, v88, 1, *((unsigned int *)this + 10));
      ecutils::fcn_complex_mult_by_psd(*(ecutils **)(*((void *)this + 71) + 24 * v87), *(const float **)(*((void *)this + 116) + 24 * v87), *(float **)(*((void *)this + 71) + 24 * v87), *((unsigned int *)this + 11));
      vDSP_vclr(*(float **)(*((void *)this + 62) + 24 * v87), 1, *((unsigned int *)this + 9));
      unint64_t v89 = 0;
      uint64_t v90 = *(void *)(*((void *)this + 62) + 24 * v87);
      v91 = (float *)(v90 + 4);
      long long v92 = (float *)(v90 + 4 * (*((_DWORD *)this + 11) + 1));
      __A.realp = v91;
      __A.imagp = v92;
      do
      {
        uint64_t v93 = *((void *)this + 23);
        if (v89 >= (*((void *)this + 24) - v93) >> 2) {
          goto LABEL_117;
        }
        v178 = (float *)v89;
        if (*((_DWORD *)this + 6))
        {
          uint64_t v94 = 0;
          unint64_t v95 = 0;
          uint64_t v96 = *(unsigned int *)(v93 + 4 * v89);
          do
          {
            unsigned int v97 = *(_DWORD *)(*((void *)this + 26) + 4 * v95);
            uint64_t v98 = *((void *)this + 113);
            int v99 = *((_DWORD *)this + 11);
            uint64_t v100 = *((void *)this + 92);
            if ((*(void *)(*(void *)(*(void *)(v98 + 24 * v87) + 24 * v96) + 8 * (v95 >> 6)) & (1 << v95)) != 0)
            {
              uint64_t v101 = *(void *)(*(void *)(*(void *)(*((void *)this + 98) + 24 * v87) + 24 * v96) + v94);
              v199.realp = (float *)(v101 + 4);
              v199.imagp = (float *)(v101 + 4 * (v99 + 1));
              uint64_t v102 = *(void *)(*((void *)this + 71) + 24 * v87);
              v196.realp = (float *)(v102 + 4);
              v196.imagp = (float *)(v102 + 4 * (v99 + 1));
              uint64_t v103 = *(void *)(*(void *)(*(void *)(v100 + 24 * v87) + 24 * v96) + v94);
              __D.realp = (float *)(v103 + 4);
              __D.imagp = (float *)(v103 + 4 * (v99 + 1));
              vDSP_zvcma(&v199, 1, &v196, 1, &__D, 1, &__D, 1, (v99 - 1));
              v104 = *(float **)(*(void *)(*(void *)(*((void *)this + 98) + 24 * v87) + 24 * v96) + v94);
              v105 = *(float **)(*((void *)this + 71) + 24 * v87);
              v106 = *(float **)(*(void *)(*(void *)(*((void *)this + 92) + 24 * v87) + 24 * v96) + v94);
              float *v106 = *v106 + (float)(*v104 * *v105);
              uint64_t v107 = *((unsigned int *)this + 11);
              v108 = &v106[v107];
              float *v108 = *v108 + (float)(v104[v107] * v105[v107]);
              __D.realp = v106;
              __D.imagp = v108;
              vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 122), v106, v108, v106, v108);
              vDSP_vclr(&__D.realp[*((unsigned int *)this + 12)], 1, *((unsigned int *)this + 12));
              vDSP_vclr(&__D.imagp[*((unsigned int *)this + 12)], 1, *((unsigned int *)this + 12));
              vDSP_vsmul(__D.realp, 1, v182, __D.realp, 1, *((unsigned int *)this + 12));
              vDSP_vsmul(__D.imagp, 1, v182, __D.imagp, 1, *((unsigned int *)this + 12));
              vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 121), __D.realp, __D.imagp, __D.realp, __D.imagp);
              int v99 = *((_DWORD *)this + 11);
              uint64_t v100 = *((void *)this + 92);
              uint64_t v98 = *((void *)this + 113);
            }
            uint64_t v109 = *(void *)(*(void *)(*((void *)this + 83) + 24 * v96) + 24 * v97);
            v199.realp = (float *)(v109 + 4);
            v199.imagp = (float *)(v109 + 4 * (v99 + 1));
            v110 = (void *)(v100 + 24 * v87);
            uint64_t v111 = *(void *)(*(void *)(*v110 + 24 * v96) + v94);
            __D.realp = (float *)(v111 + 4);
            __D.imagp = (float *)(v111 + 4 * (v99 + 1));
            v112 = (void *)(*((void *)this + 104) + 24 * v87);
            uint64_t v113 = *(void *)(*(void *)(*v112 + 24 * v96) + v94);
            v198.realp = (float *)(v113 + 4);
            v198.imagp = (float *)(v113 + 4 * (v99 + 1));
            if ((*(void *)(*(void *)(*(void *)(v98 + 24 * v87) + 24 * v96) + 8 * (v95 >> 6)) & (1 << v95)) != 0)
            {
              if (v186 != *((_DWORD *)this + 26) - 1)
              {
                v118 = *(float **)(*(void *)(*v110 + 24 * v96) + v94);
                vDSP_vsmul(v118, 1, (const float *)this + 19, v118, 1, *((unsigned int *)this + 9));
                vDSP_zvma(&v199, 1, &__D, 1, &__A, 1, &__A, 1, (*((_DWORD *)this + 11) - 1));
                v119 = *(float **)(*(void *)(*((void *)this + 83) + 24 * v96) + 24 * v97);
                v120 = *(float **)(*(void *)(*(void *)(*((void *)this + 92) + 24 * v87) + 24 * v96) + v94);
                v121 = *(float **)(*((void *)this + 62) + 24 * v87);
                float *v121 = *v121 + (float)(*v119 * *v120);
                v121[*((unsigned int *)this + 11)] = v121[*((unsigned int *)this + 11)]
                                                   + (float)(v119[*((unsigned int *)this + 11)]
                                                           * v120[*((unsigned int *)this + 11)]);
                goto LABEL_74;
              }
              vDSP_zvmul(&v199, 1, &__D, 1, &v198, 1, (v99 - 1), 1);
              v114 = *(float **)(*(void *)(*((void *)this + 83) + 24 * v96) + 24 * v97);
              v115 = *(float **)(*(void *)(*(void *)(*((void *)this + 92) + 24 * v87) + 24 * v96) + v94);
              v116 = *(float **)(*(void *)(*(void *)(*((void *)this + 104) + 24 * v87) + 24 * v96) + v94);
              float *v116 = *v114 * *v115;
              v116[*((unsigned int *)this + 11)] = v114[*((unsigned int *)this + 11)]
                                                 * v115[*((unsigned int *)this + 11)];
              v117 = *(float **)(*((void *)this + 62) + 24 * v87);
            }
            else
            {
              v116 = *(float **)(*(void *)(*v112 + 24 * v96) + v94);
              v117 = *(float **)(*((void *)this + 62) + 24 * v87);
            }
            vDSP_vadd(v116, 1, v117, 1, v117, 1, *((unsigned int *)this + 9));
LABEL_74:
            ++v95;
            v94 += 24;
          }
          while (v95 < *((unsigned int *)this + 6));
        }
        unint64_t v89 = (unint64_t)v178 + 1;
      }
      while ((float *)((char *)v178 + 1) != v177);
      vDSP_Length v122 = *((unsigned int *)this + 11);
      __A.realp = *(float **)(*((void *)this + 62) + 24 * v87);
      __A.imagp = &__A.realp[v122];
      ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 119), &__A, *(DSPComplex **)(*((void *)this + 68) + 24 * v87), v122, *((float *)this + 27));
      vDSP_Length v123 = *((unsigned int *)this + 11);
      vDSP_vsub((const float *)(*(void *)(*((void *)this + 68) + 24 * v87) + 4 * v123), 1, (const float *)(*(void *)(*((void *)this + 53) + 24 * v87) + 4 * v123), 1, (float *)(*(void *)(*((void *)this + 65) + 24 * v87) + 4 * v123), 1, v123);
      v124 = (float *)(*(void *)(*((void *)this + 71) + 24 * v87) + 4 * *((unsigned int *)this + 11));
      v196.realp = *(float **)(*((void *)this + 71) + 24 * v87);
      v196.imagp = v124;
      v125 = (MultiRadixRealFFT *)*((void *)this + 119);
      if (v125) {
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v125, *(DSPComplex **)(*((void *)this + 65) + 24 * v87), &v196, 1.0);
      }
      v126 = (float *)(*(void *)(*((void *)this + 74) + 24 * v87) + 4 * *((unsigned int *)this + 9));
      v195.realp = *(float **)(*((void *)this + 74) + 24 * v87);
      v195.imagp = v126;
      ecMIMO::fcn_hilbert_transform(this, (int64x2_t *)&v196, (float *)(*((void *)this + 29) + 4 * v87++), *((void **)this + 120), &v195);
      unint64_t v59 = *((unsigned int *)this + 40);
    }
    while (v87 < v59);
    unsigned int v84 = *((_DWORD *)this + 26);
    int v86 = *((_DWORD *)this + 40);
LABEL_80:
    ++v186;
  }
  while (v186 < v84);
LABEL_81:
  if (v59)
  {
    unint64_t v127 = 0;
    if (v176 <= 1) {
      uint64_t v128 = 1;
    }
    else {
      uint64_t v128 = v176;
    }
    v179 = (float *)v128;
    do
    {
      v129 = *(float **)(*((void *)this + 116) + 24 * v127);
      vDSP_vsmul(v129, 1, (const float *)this + 31, v129, 1, *((unsigned int *)this + 10));
      unint64_t v130 = 0;
      do
      {
        uint64_t v131 = *((void *)this + 23);
        if (v130 >= (*((void *)this + 24) - v131) >> 2) {
          goto LABEL_117;
        }
        v183 = (float *)v130;
        if (*((_DWORD *)this + 6))
        {
          uint64_t v132 = 0;
          unint64_t v133 = 0;
          v187 = (float *)*(unsigned int *)(v131 + 4 * v130);
          do
          {
            unsigned int v134 = *(_DWORD *)(*((void *)this + 26) + 4 * v133);
            vDSP_vmul(*(const float **)(*(void *)(*(void *)(*((void *)this + 110) + 24 * v127) + 24 * (void)v187)+ v132), 1, *(const float **)(*((void *)this + 116) + 24 * v127), 1, *(float **)(*(void *)(*(void *)(*((void *)this + 110) + 24 * v127) + 24 * (void)v187) + v132), 1, *((unsigned int *)this + 10));
            vDSP_vmul(*(const float **)(*(void *)(*(void *)(*((void *)this + 110) + 24 * v127) + 24 * (void)v187)+ v132), 1, *(const float **)(*(void *)(*(void *)(*((void *)this + 95) + 24 * v127) + 24 * (void)v187) + v132), 1, *(float **)(*(void *)(*(void *)(*((void *)this + 110) + 24 * v127) + 24 * (void)v187) + v132), 1, *((unsigned int *)this + 10));
            v135 = *(float **)(*(void *)(*(void *)(*((void *)this + 95) + 24 * v127) + 24 * (void)v187) + v132);
            vDSP_vsub(*(const float **)(*(void *)(*(void *)(*((void *)this + 110) + 24 * v127) + 24 * (void)v187)+ v132), 1, v135, 1, v135, 1, *((unsigned int *)this + 10));
            v136 = *(float **)(*(void *)(*(void *)(*((void *)this + 95) + 24 * v127) + 24 * (void)v187) + v132);
            vDSP_vabs(v136, 1, v136, 1, *((unsigned int *)this + 10));
            uint64_t v137 = *(void *)(*((void *)this + 71) + 24 * v127);
            uint64_t v138 = *(void *)(*(void *)(*(void *)(*((void *)this + 104) + 24 * v127) + 24 * (void)v187) + v132);
            vDSP_vmma((const float *)(v137 + 4), 1, (const float *)(v138 + 4), 1, (const float *)(v137 + 4 * (*((_DWORD *)this + 11) + 1)), 1, (const float *)(v138 + 4 * (*((_DWORD *)this + 11) + 1)), 1, (float *)(*(void *)(*(void *)(*(void *)(*((void *)this + 107) + 24 * v127) + 24 * (void)v187)+ v132)+ 4), 1, (*((_DWORD *)this + 11) - 1));
            v139 = *(float **)(*((void *)this + 71) + 24 * v127);
            v140 = *(float **)(*(void *)(*(void *)(*((void *)this + 104) + 24 * v127) + 24 * (void)v187) + v132);
            v141 = *(float **)(*(void *)(*(void *)(*((void *)this + 107) + 24 * v127) + 24 * (void)v187) + v132);
            float *v141 = *v139 * *v140;
            v141[*((unsigned int *)this + 11)] = v139[*((unsigned int *)this + 11)] * v140[*((unsigned int *)this + 11)];
            vDSP_vsadd(*(const float **)(*(void *)(*((void *)this + 86) + 24 * (void)v187) + 24 * v134), 1, (const float *)this + 23, *(float **)(*((void *)this + 74) + 24 * v127), 1, *((unsigned int *)this + 10));
            v142 = *(float **)(*(void *)(*(void *)(*((void *)this + 107) + 24 * v127) + 24 * (void)v187) + v132);
            vDSP_vdiv(*(const float **)(*((void *)this + 74) + 24 * v127), 1, v142, 1, v142, 1, *((unsigned int *)this + 10));
            ecutils::fcn_smooth_psd(*(ecutils **)(*(void *)(*(void *)(*((void *)this + 101) + 24 * v127) + 24 * (void)v187) + v132), *(const float **)(*(void *)(*(void *)(*((void *)this + 107) + 24 * v127) + 24 * (void)v187)+ v132), *((float *)this + 21), *((float *)this + 22), 0, *((float *)this + 32), *((_DWORD *)this + 10));
            ++v133;
            v132 += 24;
          }
          while (v133 < *((unsigned int *)this + 6));
        }
        unint64_t v130 = (unint64_t)v183 + 1;
      }
      while ((float *)((char *)v183 + 1) != v179);
      ++v127;
      unint64_t v143 = *((unsigned int *)this + 40);
    }
    while (v127 < v143);
    *((unsigned char *)this + 18std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    if (v143)
    {
      uint64_t v144 = 0;
      unint64_t v145 = 0;
      v146 = &a6->mBuffers[0].mData;
      v147 = (const float **)&a2->mBuffers[0].mData;
      v148 = &a5->mBuffers[0].mData;
      do
      {
        if (a8 && *((unsigned char *)this + 8))
        {
          unsigned int v149 = (*((_DWORD *)this + 5) >> 1) - 1;
          if (v149 >= v145) {
            unsigned int v149 = v145;
          }
          uint64_t v150 = *((void *)this + 62);
          vDSP_Length v151 = *((unsigned int *)this + 11);
          __A.realp = *(float **)(v150 + v144);
          __A.imagp = &__A.realp[v151];
          ecutils::fcn_complex_mult_by_psd(*(ecutils **)(v150 + v144), *(const float **)(*((void *)this + 80) + 24 * v149), *(float **)(v150 + v144), v151);
          ecutils::fcn_otplace_fftReal_inverse(*((const vDSP_DFT_SetupStruct ****)this + 119), &__A, *(DSPComplex **)(*((void *)this + 68) + v144), *((unsigned int *)this + 11), *((float *)this + 27));
        }
        v152 = *v148;
        v153 = *v147;
        v154 = *v146;
        vDSP_svesq(*v147, 1, (float *)&v189 + 1, *((unsigned int *)this + 11));
        vDSP_svesq((const float *)(*(void *)(*((void *)this + 65) + v144) + 4 * *((unsigned int *)this + 11)), 1, (float *)&v189, *((unsigned int *)this + 11));
        if (*(float *)&v189 <= (float)(*((float *)&v189 + 1) * 3.0))
        {
          memcpy(v152, (const void *)(*(void *)(*((void *)this + 65) + v144) + 4 * *((unsigned int *)this + 11)), 4 * *((unsigned int *)this + 11));
        }
        else
        {
          memcpy(v152, v153, 4 * *((unsigned int *)this + 11));
          *((unsigned char *)this + 18std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
        }
        memcpy(v154, (const void *)(*(void *)(*((void *)this + 68) + v144) + 4 * *((unsigned int *)this + 11)), 4 * *((unsigned int *)this + 11));
        ++v145;
        v144 += 24;
        v146 += 2;
        v147 += 2;
        v148 += 2;
      }
      while (v145 < *((unsigned int *)this + 40));
      unsigned int v155 = *((_DWORD *)this + 40);
    }
    else
    {
      unsigned int v155 = 0;
    }
  }
  else
  {
    unsigned int v155 = 0;
    *((unsigned char *)this + 18std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  if (*((unsigned char *)this + 8) && v155 < *((_DWORD *)this + 3))
  {
    uint64_t v165 = 16 * (int)v155 + 16;
    v166 = (float **)((char *)a6 + v165);
    v167 = (float **)((char *)a5 + v165);
    do
    {
      v169 = *v167;
      v167 += 2;
      v168 = v169;
      v170 = *v166;
      v166 += 2;
      vDSP_vclr(v168, 1, *((unsigned int *)this + 11));
      vDSP_vclr(v170, 1, *((unsigned int *)this + 11));
      ++v155;
    }
    while (*((_DWORD *)this + 3) > v155);
  }
  ecMIMO::fcn_ring_buffer_fwd((uint64_t)this, (uint64_t *)this + 26);
  ecMIMO::fcn_update_filter_fwd((uint64_t)this);
  return 0;
}

uint64_t ecMIMO::fcn_ring_buffer_fwd(uint64_t result, uint64_t *a2)
{
  int v2 = *(_DWORD *)(result + 52);
  int v3 = *(_DWORD *)(result + 24);
  if (v2 + 1 == v3) {
    int v4 = 0;
  }
  else {
    int v4 = v2 + 1;
  }
  *(_DWORD *)(result + 52) = v4;
  if (v3)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *a2;
      int v7 = *(_DWORD *)(*a2 + 4 * v5);
      *(_DWORD *)(*a2 + 4 * v5) = v7 + 1;
      if (v7 + 1 == *(_DWORD *)(result + 24)) {
        int v8 = 0;
      }
      else {
        int v8 = v7 + 1;
      }
      *(_DWORD *)(v6 + 4 * v5++) = v8;
    }
    while (v5 < *(unsigned int *)(result + 24));
  }
  return result;
}

float ecMIMO::fcn_hilbert_transform(ecMIMO *this, int64x2_t *a2, float *a3, void *a4, DSPSplitComplex *a5)
{
  uint64_t v9 = *((unsigned int *)this + 11);
  vDSP_Length __N = *((unsigned int *)this + 10);
  int v20 = *((_DWORD *)this + 9);
  int v10 = v20;
  float v11 = *((float *)this + 23);
  float v12 = *((float *)this + 24);
  __E = a5->realp;
  imagp = a5->imagp;
  *a3 = 0.0;
  vDSP_vclr(__E, 1, (2 * v10));
  DSPSplitComplex __A = (DSPSplitComplex)vaddq_s64(*a2, vdupq_n_s64(4uLL));
  vDSP_zvmags(&__A, 1, __E + 1, 1, (v9 - 1));
  memcpy(&__E[(v9 + 1)], __E + 1, 4 * (v9 - 1));
  vDSP_vrvrs(&__E[(v9 + 1)], 1, (v9 - 1));
  float *__E = *(float *)a2->i64[0] * *(float *)a2->i64[0];
  __E[v9] = *(float *)a2->i64[1] * *(float *)a2->i64[1];
  vDSP_meanv(__E, 1, a3, *((unsigned int *)this + 9));
  *a3 = -*a3;
  vDSP_vsadd(__E, 1, a3, __E, 1, *((unsigned int *)this + 9));
  *a3 = -*a3;
  MultiRadixFFT_CplxInPlaceTransform(a4, &a5->realp, 1);
  float __B = 2.0;
  vDSP_vsmul(__E, 1, &__B, __E, 1, __N);
  vDSP_vsmul(imagp, 1, &__B, imagp, 1, __N);
  float *__E = *__E * 0.5;
  __E[v9] = __E[v9] * 0.5;
  float *imagp = *imagp * 0.5;
  imagp[v9] = imagp[v9] * 0.5;
  vDSP_vclr(&__E[__N], 1, (v9 - 1));
  vDSP_vclr(&imagp[__N], 1, (v9 - 1));
  MultiRadixFFT_CplxInPlaceTransform(a4, &a5->realp, -1);
  vDSP_vmma(__E, 1, __E, 1, imagp, 1, imagp, 1, __E, 1, *((unsigned int *)this + 9));
  vvsqrtf(__E, __E, &v20);
  vDSP_vsmsa(__E, 1, (const float *)this + 27, a3, __E, 1, *((unsigned int *)this + 9));
  vDSP_meanv(__E, 1, a3, __N);
  float result = v11 + (float)(*a3 * v12);
  *a3 = result;
  return result;
}

uint64_t ecMIMO::fcn_update_filter_fwd(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 172);
  *(_DWORD *)(this + 176) = v1;
  uint64_t v2 = *(unsigned int *)(this + 160);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned int *)(this + 16);
    unsigned int v5 = v1;
    do
    {
      if (v4)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(unsigned int *)(this + 24);
        do
        {
          if (v7)
          {
            unint64_t v8 = 0;
            unsigned int v9 = *(_DWORD *)(this + 168);
            uint64_t v10 = *(void *)(*(void *)(*(void *)(this + 904) + 24 * v3) + 24 * v6);
            do
            {
              unint64_t v11 = v8 >> 6;
              uint64_t v12 = 1 << v8;
              if (v5) {
                uint64_t v13 = *(void *)(v10 + 8 * v11) & ~v12;
              }
              else {
                uint64_t v13 = *(void *)(v10 + 8 * v11) | v12;
              }
              *(void *)(v10 + 8 * v11) = v13;
              unsigned int v5 = (v5 + 1) % v9;
              ++v8;
            }
            while (v7 != v8);
            *(_DWORD *)(this + 176) = v5;
          }
          ++v6;
        }
        while (v6 != v4);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  *(_DWORD *)(this + 172) = (v1 + 1) % *(_DWORD *)(this + 168);
  return this;
}

void ecMIMO::ec_init(ecMIMO *this, char a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, float a17, unsigned int a18, float a19, float a20,unsigned int a21,unsigned int a22,unsigned int a23)
{
  *((unsigned char *)this + 8) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a4;
  *((_DWORD *)this + 5) = a5;
  *((_DWORD *)this + 7) = a6;
  *((_DWORD *)this + 8) = a7;
  *((_DWORD *)this + 11) = a8;
  *((_DWORD *)this + 12) = a8 >> 1;
  *((float *)this + 14) = __exp10f(a9 / 10.0);
  *((float *)this + 15) = __exp10f(a10 / 10.0);
  *((float *)this + 16) = a11;
  *((float *)this + 37) = a20;
  float v29 = 0.0;
  double v30 = (float)((float)*((unsigned int *)this + 11) / (float)*((unsigned int *)this + 7));
  float v31 = 0.0;
  if (a12 > 0.0)
  {
    float v32 = -v30 / a12;
    float v31 = expf(v32);
  }
  *((float *)this + 17) = v31;
  if (a14 > 0.0)
  {
    float v33 = -v30 / a14;
    float v29 = expf(v33);
  }
  *((float *)this + 21) = v29;
  float v34 = 0.0;
  if (a13 > 0.0)
  {
    float v35 = -v30 / a13;
    float v34 = expf(v35);
  }
  *((float *)this + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v34;
  *((float *)this + 23) = __exp10f(a15 / 10.0);
  *((float *)this + 34) = a17;
  *((float *)this + 35) = a16;
  *((_DWORD *)this + 26) = a18;
  *((float *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = __exp10f(a19 / 10.0);
  *(void *)((char *)this + 124) = 1056964608;
  *((_DWORD *)this + 33) = 507307272;
  float v36 = *((float *)this + 16);
  float v37 = 1.0 - *((float *)this + 17);
  float v38 = 1.0 - (float)(v37 * v36);
  *((float *)this + 17) = v38;
  *((float *)this + 18) = -(float)(v37 * v36);
  float v39 = sqrtf(v38);
  if (v38 <= 0.0) {
    float v39 = 0.0;
  }
  *((float *)this + 19) = v39;
  float v40 = *((float *)this + 20);
  *((float *)this + 22) = 1.0 - *((float *)this + 21);
  *((float *)this + 36) = 1.0 - v40;
  *((_DWORD *)this + 24) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 25) = 1056964608;
  unsigned int v41 = *((_DWORD *)this + 11);
  unsigned int v42 = vcvtps_u32_f32((float)*((unsigned int *)this + 8) / (float)v41);
  *((_DWORD *)this + 6) = v42;
  unsigned int v43 = vcvtps_u32_f32((float)a21 / (float)v41);
  *((_DWORD *)this + 8) = v41 * v42;
  *((_DWORD *)this + 38) = v41 * v43;
  *((_DWORD *)this + 39) = v43;
  unsigned int v44 = *((_DWORD *)this + 3);
  if (*((unsigned char *)this + 8))
  {
    v44 -= *((_DWORD *)this + 5) >> 1;
    if (v44 >= a22) {
      unsigned int v44 = a22;
    }
  }
  *((_DWORD *)this + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v44;
  *((_DWORD *)this + 42) = a23;
  *((_DWORD *)this + 9) = 2 * v41;
  *((_DWORD *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v41 + 1;
  MultiRadixRealFFT_Create();
}

void ecMIMO::ec_state_reset(ecMIMO *this)
{
  std::vector<unsigned int>::size_type v2 = *((unsigned int *)this + 4);
  __u[0] = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 184), v2, __u);
  unint64_t v3 = *((unsigned int *)this + 3);
  __u[0] = 0;
  std::vector<float>::assign((char **)this + 29, v3, __u);
  std::vector<unsigned int>::size_type v4 = *((unsigned int *)this + 6);
  __u[0] = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 208), v4, __u);
  unint64_t v5 = *((unsigned int *)this + 4);
  __u[0] = 0;
  std::vector<float>::assign((char **)this + 32, v5, __u);
  unint64_t v6 = *((unsigned int *)this + 9);
  __u[0] = 0;
  std::vector<float>::assign((char **)this + 47, v6, __u);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 50, *((_DWORD *)this + 4), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 53, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 62, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 65, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 68, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 71, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 74, *((_DWORD *)this + 3), 2 * *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 77, *((_DWORD *)this + 3), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t *)this + 116, *((_DWORD *)this + 3), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 664, *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 688, *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 736, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 760, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), *((float *)this + 30));
  ecutils::fcn_vector_init<float>((uint64_t)this + 784, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 808, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), *((float *)this + 30));
  ecutils::fcn_vector_init<float>((uint64_t)this + 832, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 9), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 856, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  ecutils::fcn_vector_init<float>((uint64_t)this + 880, *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  unint64_t v7 = *((unsigned int *)this + 3);
  unint64_t v8 = *((unsigned int *)this + 4);
  unint64_t v9 = *((unsigned int *)this + 6);
  unsigned __int8 v51 = 0;
  std::vector<BOOL>::vector(__p, v9, &v51);
  std::vector<std::vector<BOOL>>::vector(__u, v8, (uint64_t)__p);
  uint64_t v10 = *((void *)this + 115);
  unint64_t v11 = (uint64_t *)*((void *)this + 113);
  if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v11) >> 3) >= v7)
  {
    unint64_t v46 = (*((void *)this + 114) - (void)v11) / 24;
    unint64_t v47 = v7;
    if (v46 < v7) {
      unint64_t v7 = (*((void *)this + 114) - (void)v11) / 24;
    }
    for (; v7; --v7)
    {
      if (v11 != (uint64_t *)__u)
      {
        uint64_t v24 = *(void *)__u;
        uint64_t v23 = v50;
        uint64_t v25 = v11[2];
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v50 - *(void *)__u) >> 3);
        uint64_t v27 = (void **)*v11;
        if (0xAAAAAAAAAAAAAAABLL * ((v25 - *v11) >> 3) >= v26)
        {
          float v31 = (void **)v11[1];
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 - v27);
          if (v32 >= v26)
          {
            if (*(void *)__u != v50)
            {
              do
              {
                std::vector<BOOL>::operator=(v27, v24);
                v24 += 24;
                v27 += 3;
              }
              while (v24 != v23);
              float v31 = (void **)v11[1];
            }
            while (v31 != v27)
            {
              float v36 = *(v31 - 3);
              v31 -= 3;
              float v35 = v36;
              if (v36) {
                operator delete(v35);
              }
            }
            v11[1] = (uint64_t)v27;
          }
          else
          {
            if (v31 != v27)
            {
              uint64_t v33 = 8 * (v31 - v27);
              uint64_t v34 = *(void *)__u;
              do
              {
                std::vector<BOOL>::operator=(v27, v34);
                v34 += 24;
                v27 += 3;
                v33 -= 24;
              }
              while (v33);
              uint64_t v27 = (void **)v11[1];
            }
            v11[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>((uint64_t)(v11 + 2), v24 + 24 * v32, v23, v27);
          }
        }
        else
        {
          if (v27)
          {
            std::vector<std::vector<BOOL>>::__clear[abi:ne180100](v11);
            operator delete((void *)*v11);
            uint64_t v25 = 0;
            *unint64_t v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          if (v26 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
          uint64_t v29 = 2 * v28;
          if (2 * v28 <= v26) {
            uint64_t v29 = v26;
          }
          if (v28 >= 0x555555555555555) {
            unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v30 = v29;
          }
          std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](v11, v30);
          v11[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>((uint64_t)(v11 + 2), v24, v23, (void *)v11[1]);
        }
      }
      v11 += 3;
    }
    if (v47 <= v46)
    {
      uint64_t v21 = *((void *)this + 113) + 24 * v47;
      unint64_t v45 = (void **)*((void *)this + 114);
      while (v45 != (void **)v21)
      {
        v45 -= 3;
        uint64_t v52 = (std::vector<unsigned int>::value_type *)v45;
        std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      }
    }
    else
    {
      float v37 = (void *)*((void *)this + 114);
      uint64_t v21 = (uint64_t)&v37[3 * (v47 - v46)];
      uint64_t v38 = 24 * v47 - 24 * v46;
      do
      {
        void *v37 = 0;
        v37[1] = 0;
        v37[2] = 0;
        std::vector<std::vector<BOOL>>::__init_with_size[abi:ne180100]<std::vector<BOOL>*,std::vector<BOOL>*>(v37, *(uint64_t *)__u, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - *(void *)__u) >> 3));
        v37 += 3;
        v38 -= 24;
      }
      while (v38);
    }
  }
  else
  {
    if (v11)
    {
      unint64_t v12 = v7;
      uint64_t v13 = (void **)((char *)this + 904);
      uint64_t v14 = (void **)*((void *)this + 114);
      uint64_t v15 = (void *)*((void *)this + 113);
      if (v14 != (void **)v11)
      {
        do
        {
          v14 -= 3;
          uint64_t v52 = (std::vector<unsigned int>::value_type *)v14;
          std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        }
        while (v14 != (void **)v11);
        uint64_t v15 = *v13;
      }
      *((void *)this + 114) = v11;
      operator delete(v15);
      uint64_t v10 = 0;
      *uint64_t v13 = 0;
      *((void *)this + 114) = 0;
      *((void *)this + 115) = 0;
      unint64_t v7 = v12;
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    uint64_t v17 = 2 * v16;
    unint64_t v18 = v7;
    if (2 * v16 <= v7) {
      uint64_t v17 = v7;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    int v20 = operator new(24 * v19);
    *((void *)this + 113) = v20;
    *((void *)this + 114) = v20;
    *((void *)this + 115) = &v20[3 * v19];
    uint64_t v21 = (uint64_t)&v20[3 * v18];
    uint64_t v22 = 24 * v18;
    do
    {
      void *v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      std::vector<std::vector<BOOL>>::__init_with_size[abi:ne180100]<std::vector<BOOL>*,std::vector<BOOL>*>(v20, *(uint64_t *)__u, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - *(void *)__u) >> 3));
      v20 += 3;
      v22 -= 24;
    }
    while (v22);
  }
  *((void *)this + 114) = v21;
  uint64_t v52 = __u;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  *((_DWORD *)this + 43) = 0;
  *((_DWORD *)this + 44) = 0;
  ecMIMO::fcn_update_filter_fwd((uint64_t)this);
  if (*((unsigned char *)this + 8))
  {
    unint64_t v39 = *((unsigned int *)this + 9);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 35, v39, __u);
    unint64_t v40 = *((unsigned int *)this + 9);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 38, v40, __u);
    unint64_t v41 = *((unsigned int *)this + 10);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 41, v41, __u);
    unint64_t v42 = *((unsigned int *)this + 10);
    __u[0] = 0;
    std::vector<float>::assign((char **)this + 44, v42, __u);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 56, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 59, *((_DWORD *)this + 3), *((_DWORD *)this + 9), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t *)this + 80, *((_DWORD *)this + 4), *((_DWORD *)this + 10), 0.0);
    ecutils::fcn_vector_init<float>((uint64_t)this + 712, *((_DWORD *)this + 4), *((_DWORD *)this + 6), *((_DWORD *)this + 10), 0.0);
  }
  if (*((_DWORD *)this + 6) != 1)
  {
    unint64_t v43 = 0;
    uint64_t v44 = *((void *)this + 26);
    do
    {
      *(_DWORD *)(v44 + 4 * v43) = v43 + 1;
      ++v43;
    }
    while (v43 < (*((_DWORD *)this + 6) - 1));
  }
}

void sub_1BB59B2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<BOOL>>::__init_with_size[abi:ne180100]<std::vector<BOOL>*,std::vector<BOOL>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<BOOL>>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BB59B364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*,std::vector<BOOL>*,std::vector<BOOL>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  std::vector<unsigned int>::size_type v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::vector<BOOL>::vector(v4, v6);
      v6 += 24;
      std::vector<unsigned int>::size_type v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BB59B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::vector<BOOL>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v6 = *(void **)(v3 - 24);
      v3 -= 24;
      unint64_t v5 = v6;
      if (v6) {
        operator delete(v5);
      }
    }
  }
  return a1;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        unint64_t v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void ecMIMO::~ecMIMO(ecMIMO *this)
{
  ecMIMO::~ecMIMO(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  vDSP_DFT_SetupStruct *v4;
  vDSP_DFT_SetupStruct *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;

  *(void *)this = &unk_1F14B5FE8;
  std::vector<unsigned int>::size_type v2 = *((void *)this + 119);
  if (v2) {
    MultiRadixFFT_Dispose(v2);
  }
  uint64_t v3 = *((void *)this + 120);
  if (v3) {
    MultiRadixFFT_Dispose(v3);
  }
  unint64_t v4 = (vDSP_DFT_SetupStruct *)*((void *)this + 121);
  if (v4) {
    vDSP_DFT_DestroySetup(v4);
  }
  unint64_t v5 = (vDSP_DFT_SetupStruct *)*((void *)this + 122);
  if (v5) {
    vDSP_DFT_DestroySetup(v5);
  }
  unint64_t v18 = (void **)((char *)this + 928);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint64_t v6 = (void **)*((void *)this + 113);
  if (v6)
  {
    unint64_t v7 = (void **)*((void *)this + 114);
    unint64_t v8 = (void *)*((void *)this + 113);
    if (v7 != v6)
    {
      do
      {
        v7 -= 3;
        unint64_t v18 = v7;
        std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
      while (v7 != v6);
      unint64_t v8 = (void *)*((void *)this + 113);
    }
    *((void *)this + 114) = v6;
    operator delete(v8);
  }
  unint64_t v18 = (void **)((char *)this + 880);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 856);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 832);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 808);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 784);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 760);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 736);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 712);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 688);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 664);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 640);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 616);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 592);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 568);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 544);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 520);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 496);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 472);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 448);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 424);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v18 = (void **)((char *)this + 400);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
  char v9 = (void *)*((void *)this + 47);
  if (v9)
  {
    *((void *)this + 48) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 44);
  if (v10)
  {
    *((void *)this + 45) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 41);
  if (v11)
  {
    *((void *)this + 42) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 38);
  if (v12)
  {
    *((void *)this + 39) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 35);
  if (v13)
  {
    *((void *)this + 36) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 32);
  if (v14)
  {
    *((void *)this + 33) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 29);
  if (v15)
  {
    *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (void *)*((void *)this + 26);
  if (v16)
  {
    *((void *)this + 27) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 23);
  if (v17)
  {
    *((void *)this + 24) = v17;
    operator delete(v17);
  }
}

void ecMIMO::ecMIMO(ecMIMO *this)
{
  *(void *)this = &unk_1F14B5FE8;
  *((unsigned char *)this + 8) = 0;
  *(_OWORD *)((char *)this + 12) = xmmword_1BB87B6C0;
  *(_OWORD *)((char *)this + 28) = xmmword_1BB87B6D0;
  *(void *)((char *)this + 44) = 0x10000000200;
  *((_DWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = xmmword_1BB87B6E0;
  *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0x3F0000003F4CCCCDLL;
  *(void *)((char *)this + 92) = 0x40E000002B8CBCCCLL;
  *(void *)((char *)this + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0x240000000;
  *(void *)((char *)this + 108) = 0x3A0000003A800000;
  *((_DWORD *)this + 29) = 1065353216;
  *((_DWORD *)this + 31) = 1056964608;
  *((_DWORD *)this + 37) = -1024458752;
  *((void *)this + 19) = 0x600000000;
  *((unsigned char *)this + 164) = 0;
  *((void *)this + 21) = 1;
  *((_DWORD *)this + 44) = 0;
  bzero((char *)this + 184, 0x320uLL);
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::ShouldBypassEffect(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::ValidFormat(AUMagnitudeDifferenceNoiseSuppressorV4 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5 = (int)a2;
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((v5 - 1) <= 1)
  {
    if (a4->mFormatID == 1718773105) {
      char v7 = result;
    }
    else {
      char v7 = 1;
    }
    if ((v7 & 1) == 0)
    {
      long long v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      uint64_t v10 = *(void *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      int v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 != 4) {
        LODWORD(result) = 0;
      }
    }
    if (a4->mChannelsPerFrame == 1) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SupportedNumChannels(AUMagnitudeDifferenceNoiseSuppressorV4 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMagnitudeDifferenceNoiseSuppressorV4::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUMagnitudeDifferenceNoiseSuppressorV4::StreamFormatWritable(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SupportsTail(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 1;
}

double AUMagnitudeDifferenceNoiseSuppressorV4::GetTailTime(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 0.0;
}

double AUMagnitudeDifferenceNoiseSuppressorV4::GetLatency(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 0.0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetParameterValueStrings(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2) {
    return 4294956430;
  }
  uint64_t result = 0;
  if (!a3)
  {
    if (a4)
    {
      long long v7 = xmmword_1E623F1C0;
      long long v8 = @"TwoMic";
      CFArrayRef v6 = CFArrayCreate(0, (const void **)&v7, 3, 0);
      uint64_t result = 0;
      *a4 = v6;
    }
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetParameterInfo(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"noise supp mode";
      buffer->flags = 1207959552;
      CFStringGetCString(@"noise supp mode", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v6 = 0x4000000000000000;
      goto LABEL_9;
    case 1:
      buffer->cfNameString = @"noise supp level";
      buffer->flags = 1207959552;
      CFStringGetCString(@"noise supp level", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 3256877056;
      AudioUnitParameterValue v7 = -24.0;
      goto LABEL_10;
    case 2:
      CFStringRef v8 = @"(I) speech probability";
      goto LABEL_32;
    case 3:
      buffer->cfNameString = @"SPL Meter Calibration";
      buffer->flags = 1207959552;
      CFStringGetCString(@"SPL Meter Calibration", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x42C80000C1C80000;
      AudioUnitParameterValue v7 = 80.0;
      goto LABEL_10;
    case 4:
      buffer->cfNameString = @"SPL Time Constant";
      buffer->flags = 1207959552;
      CFStringGetCString(@"SPL Time Constant", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v6 = 0x4120000000000000;
LABEL_9:
      *(void *)&buffer->minCFNumberRef Value = v6;
      AudioUnitParameterValue v7 = 2.0;
LABEL_10:
      AudioUnitParameterOptions v9 = buffer->flags | 0x80000000;
      goto LABEL_22;
    case 5:
      CFStringRef v8 = @"occlusion mode";
      goto LABEL_32;
    case 6:
      CFStringRef v8 = @"(I) occ_2ndMic confd";
      goto LABEL_32;
    case 7:
      CFStringRef v8 = @"(I) ns_auto_mode";
      goto LABEL_32;
    case 8:
      CFStringRef v8 = @"auto_blend_alpha";
      goto LABEL_32;
    case 9:
      CFStringRef v10 = @"(I) noise SPL (gated PS)";
      goto LABEL_17;
    case 10:
      CFStringRef v10 = @"(I) noise SPL (one mic)";
LABEL_17:
      buffer->cfNameString = v10;
      buffer->flags = 1207959552;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000041A00000;
      AudioUnitParameterValue v7 = 40.0;
      goto LABEL_21;
    case 11:
      CFStringRef v8 = @"(I) 1mic vad";
      goto LABEL_32;
    case 12:
      CFStringRef v8 = @"(I) 2mic vad";
      goto LABEL_32;
    case 13:
      buffer->cfNameString = @"auto NS level";
      buffer->flags = 1207959552;
      CFStringGetCString(@"auto NS level", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0xC0A00000C1C80000;
      AudioUnitParameterValue v7 = -24.0;
LABEL_21:
      AudioUnitParameterOptions v9 = buffer->flags | 0x8000;
LABEL_22:
      buffer->defaultCFNumberRef Value = v7;
      buffer->flags = v9;
      return result;
    case 14:
      buffer->cfNameString = @"AGC dynamic gain";
      buffer->flags = 1207959552;
      CFStringGetCString(@"AGC dynamic gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      __asm { FMOV            V0.2S, #-20.0 }
      break;
    case 15:
      buffer->cfNameString = @"AGC post gain";
      buffer->flags = 1207959552;
      CFStringGetCString(@"AGC post gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      __asm { FMOV            V0.2S, #-20.0 }
      *(void *)&buffer->minCFNumberRef Value = _D0;
      buffer->defaultCFNumberRef Value = 0.0;
      return result;
    case 16:
      CFStringRef v17 = @"hb minus lb_sep";
      goto LABEL_28;
    case 17:
      CFStringRef v8 = @"P_OCCL_based_alpha";
      goto LABEL_32;
    case 18:
      CFStringRef v17 = @"lb_sep";
LABEL_28:
      buffer->cfNameString = v17;
      buffer->flags = 1207959552;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      _D0 = 0x41A00000C0A00000;
      break;
    case 19:
      buffer->cfNameString = @"Test_Switch";
      buffer->flags = 1207959552;
      CFStringGetCString(@"Test_Switch", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterOptions v18 = buffer->flags | 0x80000000;
      goto LABEL_34;
    case 20:
      CFStringRef v8 = @"DL Speech Prob";
      goto LABEL_32;
    case 21:
      CFStringRef v8 = @"Inv 2mic vad";
LABEL_32:
      buffer->cfNameString = v8;
      buffer->flags = 1207959552;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      _D0 = 0x3F80000000000000;
      break;
    case 22:
      buffer->cfNameString = @"tmv - itmv";
      buffer->flags = 1207959552;
      CFStringGetCString(@"tmv - itmv", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      _D0 = 0x3FC00000BF000000;
      break;
    default:
      return 4294956418;
  }
  *(void *)&buffer->minCFNumberRef Value = _D0;
  AudioUnitParameterOptions v18 = buffer->flags | 0x8000;
LABEL_34:
  buffer->defaultCFNumberRef Value = 0.0;
  buffer->flags = v18;
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetParameterList(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    unsigned int v4 = 0;
  }
  else
  {
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1BB87B6F0;
      *((_OWORD *)a3 + 1) = xmmword_1BB87B700;
      *((_OWORD *)a3 + 2) = xmmword_1BB87B710;
      *((_OWORD *)a3 + 3) = xmmword_1BB87B720;
      *((void *)a3 + 8) = 0x1600000015;
    }
    unsigned int v4 = 18;
  }
  *a4 = v4;
  return 0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::Render(AUMagnitudeDifferenceNoiseSuppressorV4 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  _DWORD v21[4] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  CFStringRef v8 = (AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 128), 0);
  int v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v13 = ausdk::AUScope::GetElement(v8, 1u);
    if (!v13 || !*(_DWORD *)(v13 + 172))
    {
      unsigned int v14 = 0;
LABEL_13:
      uint64_t v16 = ausdk::AUScope::SafeGetElement(v8, v14);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v16 + 144));
      uint64_t v18 = ausdk::AUScope::SafeGetElement(v8, 0);
      v21[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
      v21[1] = BufferList;
      v21[2] = BufferList;
      uint64_t v19 = ausdk::AUScope::SafeGetElement(v8, 0);
      v21[3] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
      v20[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      v20[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      v20[2] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      v20[3] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      return (*(uint64_t (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 4, v21, 4, v20);
    }
    unsigned int v14 = 1;
    uint64_t v15 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
    uint64_t result = ausdk::AUInputElement::PullInput(v15, a2, a3, 1, a4);
    if (!result) {
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::ProcessMultipleBufferLists(AUMagnitudeDifferenceNoiseSuppressorV4 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  uint64_t result = 4294956419;
  if (a4 >= 4 && a6 >= 4)
  {
    if ((*(unsigned int (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *, unsigned int *))(*(void *)this
                                                                                                  + 576))(this, a2))
    {
      int v11 = a7[2];
      unsigned int mDataByteSize = v11->mBuffers[0].mDataByteSize;
      if (mDataByteSize >= 4) {
        memset_pattern16(v11->mBuffers[0].mData, &unk_1BB873A60, mDataByteSize & 0xFFFFFFFC);
      }
      if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 541))
      {
        mData = (*a5)->mBuffers[0].mData;
        unsigned int v14 = (*a7)->mBuffers[0].mData;
        size_t v15 = (*a7)->mBuffers[0].mDataByteSize;
LABEL_30:
        memcpy(v14, mData, v15);
        return 0;
      }
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
      return 0;
    }
    int v16 = *((_DWORD *)this + 133);
    if (v16 != *((_DWORD *)this + 134))
    {
      AUMagnitudeDifferenceNoiseSuppressorV4::UpdateParameters(this);
      *((_DWORD *)this + 134) = v16;
    }
    CFStringRef v17 = (float *)(*a5)->mBuffers[0].mData;
    uint64_t v18 = (float *)a5[1]->mBuffers[0].mData;
    uint64_t v19 = *((void *)this + 68);
    *(void *)(v19 + 60std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = a5[2]->mBuffers[0].mData;
    if (*((unsigned char *)this + 540))
    {
      uint64_t v20 = *((unsigned int *)this + 84);
      v51[0] = v17;
      v51[1] = &v17[v20];
      v50[0] = v18;
      v50[1] = &v18[v20];
      CNoiseSuppressorV4::speex_preprocess_run_freq(v19, v51, v50, 0);
    }
    else
    {
      CNoiseSuppressorV4::speex_preprocess_run((int *)v19, (char *)v17, (char *)v18, 0);
    }
    uint64_t v21 = *((void *)this + 68);
    if (v21) {
      float v22 = *(float *)(v21 + 332);
    }
    else {
      float v22 = 0.0;
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, 2u, v22, 0);
    uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v24, 5u, (float)*(int *)(*((void *)this + 68) + 480), 0);
    uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v25, 6u, *(float *)(*((void *)this + 68) + 476), 0);
    unint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v26, 7u, (float)*(int *)(*((void *)this + 68) + 432), 0);
    uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v27, 8u, *(float *)(*((void *)this + 68) + 436), 0);
    unint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v28, 9u, *(float *)(*((void *)this + 68) + 336), 0);
    uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v29, 0xAu, *(float *)(*((void *)this + 68) + 340), 0);
    unint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v30, 0xBu, *(float *)(*((void *)this + 68) + 504), 0);
    float v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v31, 0xCu, *(float *)(*((void *)this + 68) + 508), 0);
    unint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v32, 0xDu, (float)*(int *)(*((void *)this + 68) + 52), 0);
    uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v33, 0x10u, *(float *)(*((void *)this + 68) + 616) - *(float *)(*((void *)this + 68) + 612), 0);
    uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v34, 0x11u, *(float *)(*((void *)this + 68) + 524), 0);
    float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v35, 0x12u, *(float *)(*((void *)this + 68) + 612), 0);
    float v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v36, 0x15u, *(float *)(*((void *)this + 68) + 512), 0);
    float v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v37, 0x16u, *(float *)(*((void *)this + 68) + 516), 0);
    memcpy(a7[2]->mBuffers[0].mData, *(const void **)(*((void *)this + 68) + 168), 4 * *(int *)(*((void *)this + 68) + 4));
    uint64_t v38 = (char *)(*a7)->mBuffers[0].mData;
    unint64_t v39 = a7[1]->mBuffers[0].mData;
    uint64_t v40 = *((unsigned int *)this + 84);
    if (*((unsigned char *)this + 541))
    {
      unint64_t v41 = &v38[4 * v40];
      uint64_t v42 = *((void *)this + 68);
      if (v42)
      {
        unint64_t v43 = *(const void **)(v42 + 584);
        uint64_t v44 = *(float **)(v42 + 592);
      }
      else
      {
        unint64_t v43 = 0;
        uint64_t v44 = 0;
      }
      memcpy(v38, v43, 4 * v40);
      size_t v45 = 4 * *((unsigned int *)this + 84);
      uint64_t v38 = v41;
      unint64_t v46 = v44;
    }
    else
    {
      size_t v45 = 4 * v40;
      unint64_t v46 = v17;
    }
    memcpy(v38, v46, v45);
    memcpy(v39, *(const void **)(*((void *)this + 68) + 384), 4 * *((unsigned int *)this + 84));
    unint64_t v47 = a7[3];
    if (!v47) {
      return 0;
    }
    uint64_t result = 0;
    UInt32 v48 = v47->mBuffers[0].mData;
    if (v48 && v48 != (*a7)->mBuffers[0].mData)
    {
      uint64_t v49 = *((void *)this + 68);
      if (v49)
      {
        mData = *(void **)(v49 + 192);
        size_t v15 = 4 * *(int *)(v49 + 4);
        unsigned int v14 = v48;
        goto LABEL_30;
      }
      return 0;
    }
  }
  return result;
}

void AUMagnitudeDifferenceNoiseSuppressorV4::UpdateParameters(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  std::vector<unsigned int>::size_type v2 = (AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 1u);
  uint64_t v5 = *((void *)this + 68);
  if (v5)
  {
    int v6 = (int)Parameter;
    if ((int)Parameter >= 0) {
      int v6 = -v6;
    }
    *(_DWORD *)(v5 + 52) = v6;
    *(_DWORD *)(v5 + 472) = 1;
  }
  AudioUnitParameterValue v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v8 = ausdk::AUElement::GetParameter(v7, 0);
  uint64_t v9 = *((void *)this + 68);
  if (v9) {
    *(_DWORD *)(v9 + 428) = (int)v8;
  }
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *(float *)(*((void *)this + 68) + 356) = ausdk::AUElement::GetParameter(v10, 3u);
  int v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v12 = ausdk::AUElement::GetParameter(v11, 4u);
  uint64_t v13 = *((void *)this + 68);
  *(float *)(v13 + 36std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1.0 - expf(-1.0 / (float)(v12 * (float)((float)*(int *)(v13 + 8) / (float)*(int *)(v13 + 4))));
  unsigned int v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *(float *)(*((void *)this + 68) + 624) = ausdk::AUElement::GetParameter(v14, 0x13u);
  size_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *(float *)(*((void *)this + 68) + 628) = ausdk::AUElement::GetParameter(v15, 0x14u);
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::CanScheduleParameters(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  return 0;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SetParameter(AUMagnitudeDifferenceNoiseSuppressorV4 *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3) {
    return 4294956430;
  }
  if (a2 > 0x14) {
    goto LABEL_10;
  }
  if (((1 << a2) & 0x18801A) != 0)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
    unsigned int v10 = a2;
LABEL_6:
    ausdk::AUElement::SetParameter(Element, v10, a5, 0);
    uint64_t result = 0;
    ++*((_DWORD *)this + 133);
    return result;
  }
  if (a2)
  {
LABEL_10:
    int v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(v11, a2, a5, 0);
    return 0;
  }
  else
  {
    if ((int)a5 <= 2)
    {
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 32), 0);
      unsigned int v10 = 0;
      goto LABEL_6;
    }
    return 4294956418;
  }
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::SetProperty(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      int v8 = *a5;
      int v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetProperty(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    int v7 = (*(uint64_t (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *))(*(void *)this + 576))(this);
LABEL_7:
    uint64_t result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AUMagnitudeDifferenceNoiseSuppressorV4::GetPropertyInfo(AUMagnitudeDifferenceNoiseSuppressorV4 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    BOOL v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    BOOL v7 = 0;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

void AUMagnitudeDifferenceNoiseSuppressorV4::Cleanup(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  uint64_t v2 = *((void *)this + 68);
  if (v2)
  {
    CNoiseSuppressorV4::speex_preprocess_state_destroy(v2);
    *((void *)this + 68) = 0;
  }
}

void AUMagnitudeDifferenceNoiseSuppressorV4::Initialize(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  (*(void (**)(AUMagnitudeDifferenceNoiseSuppressorV4 *))(*(void *)this + 64))(this);
  *((unsigned char *)this + 54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 80), 0)+ 88) == 1718773105;
  *((unsigned char *)this + 541) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 128), 0)+ 88) == 1718773105;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMagnitudeDifferenceNoiseSuppressorV4 *)((char *)this + 128), 0);
  CNoiseSuppressorV4::speex_preprocess_state_init(*((_DWORD *)this + 84), *(double *)(Element + 80), 2, 0, 0, 0, 0);
}

void AUMagnitudeDifferenceNoiseSuppressorV4::~AUMagnitudeDifferenceNoiseSuppressorV4(AUMagnitudeDifferenceNoiseSuppressorV4 *this)
{
  AUMagnitudeDifferenceNoiseSuppressorV4::~AUMagnitudeDifferenceNoiseSuppressorV4(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B6098;
  uint64_t v2 = *((void *)this + 68);
  if (v2)
  {
    CNoiseSuppressorV4::speex_preprocess_state_destroy(v2);
    *((void *)this + 68) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [6],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1BB59CB48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [2],void>(std::string *this, char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1BB59CBA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<MigrateAudioUnitAssets::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  return a1;
}

uint64_t boost::uuids::detail::random_provider_base::destroy(uint64_t this)
{
  if ((this & 0x80000000) == 0) {
    return close(this);
  }
  return this;
}

void boost::throw_exception<boost::uuids::entropy_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  exception = (char *)__cxa_allocate_exception(0x48uLL);
  *(void *)exception = &unk_1F149D4B8;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  uint64_t v5 = a1[1].__vftable;
  *((void *)exception + 6) = 0;
  *((void *)exception + 7) = 0;
  *((void *)exception + 5) = 0;
  *(void *)exception = &unk_1F14B6358;
  *((void *)exception + 1) = &unk_1F14B6388;
  *((void *)exception + 3) = v5;
  *((void *)exception + 4) = &unk_1F14B63B8;
  *((_DWORD *)exception + 16) = a2[1].i32[0];
  *((int8x16_t *)exception + 3) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

uint64_t boost::uuids::entropy_error::errcode(boost::uuids::entropy_error *this)
{
  return *((void *)this + 2);
}

void non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F149D510;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  JUMPOUT(0x1C185D370);
}

void boost::wrapexcept<boost::uuids::entropy_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BB59CFB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F149D4B8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F14B63D8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F149D510;
  *(void *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1F14B6358;
  *(void *)(a1 + 8) = &unk_1F14B6388;
  *(void *)(a1 + 32) = &unk_1F14B63B8;
  return a1;
}

void sub_1BB59D0F4(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::clone()
{
}

void sub_1BB59D2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::GlobalProperties::setProperty(AUSM::GlobalProperties *this, uint64_t a2, CFTypeRef *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 5685)
  {
    BOOL v6 = *(_DWORD *)a3 != 0;
    int v16 = 3235;
    BOOL v7 = std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 5, 0xCA3u, &v16);
    (*(void (**)(uint64_t *, BOOL))(*v7[5] + 64))(v7[5], v6);
    return 0;
  }
  else
  {
    int v9 = a2;
    uint64_t result = AUSM::Properties::setProperty(this, a2, a3, a4, a5);
    if (v9 == 3110 && !result)
    {
      unsigned int v10 = atomic_load((unsigned int *)this + 397);
      int v11 = (uint64_t **)((char *)this + 40);
      if (v10 == 3)
      {
        int v15 = 3101;
        float v12 = std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v11, 0xC1Du, &v15);
        uint64_t result = 0;
        *((_DWORD *)v12[5] + 3) = 3;
      }
      else
      {
        int v14 = 3101;
        uint64_t v13 = std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v11, 0xC1Du, &v14);
        uint64_t result = 0;
        *((_DWORD *)v13[5] + 3) = 0;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<AUSM::PropertyDescriptor>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    int v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void AUSM::GlobalProperties::GlobalProperties(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AUSM::Properties::Properties(a1, a2, 0, 0, a3);
  *(void *)(v4 + 72) = 0x300000003;
  *(_DWORD *)(v4 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 64;
  *(_WORD *)(v4 + 84) = 0;
  *(unsigned char *)(v4 + 86) = 0;
  *(_DWORD *)(v4 + 88) = 3;
  *(unsigned char *)(v4 + 92) = 0;
  *(_DWORD *)(v4 + 96) = 1;
  *(_OWORD *)(v4 + 112) = xmmword_1BB875840;
  *(_OWORD *)(v4 + 128) = xmmword_1BB875840;
  *(void *)uint64_t v4 = &unk_1F14B6408;
  *(_OWORD *)(v4 + 144) = 0u;
  *(unsigned char *)(v4 + 163) = 1;
  *(_DWORD *)(v4 + 159) = 0;
  *(void *)(v4 + 164) = 0x461C400043160000;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 850045863;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 24std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 256) = 850045863;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 28std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(void *)(v4 + 328) = 850045863;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(void *)(v4 + 40std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 850045863;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 44std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(void *)(v4 + 472) = 850045863;
  *(_OWORD *)(v4 + 48std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 512) = 0u;
  *(_OWORD *)(v4 + 528) = 0u;
  *(void *)(v4 + 544) = 850045863;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 60std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(void *)(v4 + 616) = 850045863;
  *(_OWORD *)(v4 + 656) = 0u;
  *(_OWORD *)(v4 + 672) = 0u;
  *(_OWORD *)(v4 + 624) = 0u;
  *(_OWORD *)(v4 + 64std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 688) = 850045863;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(void *)(v4 + 76std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 850045863;
  *(_OWORD *)(v4 + 80std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 816) = 0u;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_OWORD *)(v4 + 784) = 0u;
  *(void *)(v4 + 832) = 850045863;
  *(_OWORD *)(v4 + 872) = 0u;
  *(_OWORD *)(v4 + 888) = 0u;
  *(_OWORD *)(v4 + 84std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 856) = 0u;
  *(void *)(v4 + 904) = 850045863;
  *(_OWORD *)(v4 + 944) = 0u;
  *(_OWORD *)(v4 + 96std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 912) = 0u;
  *(_OWORD *)(v4 + 928) = 0u;
  *(void *)(v4 + 976) = 850045863;
  *(_OWORD *)(v4 + 1016) = 0u;
  *(_OWORD *)(v4 + 1032) = 0u;
  *(_OWORD *)(v4 + 984) = 0u;
  *(_OWORD *)(v4 + 100std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 1048) = 850045863;
  *(_OWORD *)(v4 + 1104) = 0u;
  *(_OWORD *)(v4 + 1088) = 0u;
  *(_OWORD *)(v4 + 1072) = 0u;
  *(_OWORD *)(v4 + 1056) = 0u;
  *(void *)(v4 + 112std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 850045863;
  *(_OWORD *)(v4 + 116std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 1176) = 0u;
  *(_OWORD *)(v4 + 1128) = 0u;
  *(_OWORD *)(v4 + 1144) = 0u;
  *(void *)(v4 + 1192) = 850045863;
  *(void *)(v4 + 1264) = 0;
  *(_OWORD *)(v4 + 1244) = 0u;
  *(_OWORD *)(v4 + 1232) = 0u;
  *(_OWORD *)(v4 + 1216) = 0u;
  *(_OWORD *)(v4 + 120std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 1272) = 850045863;
  *(void *)(v4 + 1344) = 0;
  *(_OWORD *)(v4 + 1328) = 0u;
  *(_OWORD *)(v4 + 1312) = 0u;
  *(_OWORD *)(v4 + 1296) = 0u;
  *(_OWORD *)(v4 + 128std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 1352) = 850045863;
  *(_OWORD *)(v4 + 1401) = 0u;
  *(_OWORD *)(v4 + 1392) = 0u;
  *(_OWORD *)(v4 + 1376) = 0u;
  *(_OWORD *)(v4 + 136std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(v4 + 142std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 3;
  *(void *)(v4 + 1424) = 0;
  *(void *)(v4 + 1432) = 850045863;
  *(_OWORD *)(v4 + 1488) = 0u;
  *(_OWORD *)(v4 + 1472) = 0u;
  *(_OWORD *)(v4 + 1456) = 0u;
  *(_OWORD *)(v4 + 144std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 1504) = 850045863;
  *(_OWORD *)(v4 + 1553) = 0u;
  *(_OWORD *)(v4 + 1528) = 0u;
  *(_OWORD *)(v4 + 1544) = 0u;
  *(_OWORD *)(v4 + 1512) = 0u;
  *(_DWORD *)(v4 + 1572) = 1;
  *(_WORD *)(v4 + 1576) = 0;
  *(unsigned char *)(v4 + 1578) = 0;
  *(_DWORD *)(v4 + 158std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 2;
  *(_OWORD *)(v4 + 1584) = 0u;
  *(void *)(v4 + 160std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 850045863;
  *(void *)(v4 + 1688) = 0;
  *(_OWORD *)(v4 + 1656) = 0u;
  *(_OWORD *)(v4 + 1672) = 0u;
  *(_OWORD *)(v4 + 1624) = 0u;
  *(_OWORD *)(v4 + 164std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 1608) = 0u;
  *(void *)(v4 + 1696) = 850045863;
  *(_OWORD *)(v4 + 1736) = 0u;
  *(_OWORD *)(v4 + 1752) = 0u;
  *(_OWORD *)(v4 + 1704) = 0u;
  *(_OWORD *)(v4 + 172std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 1768) = 850045863;
  *(_OWORD *)(v4 + 1824) = 0u;
  *(_OWORD *)(v4 + 1808) = 0u;
  *(_OWORD *)(v4 + 1792) = 0u;
  *(_OWORD *)(v4 + 1776) = 0u;
  *(void *)(v4 + 184std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 850045863;
  *(_OWORD *)(v4 + 188std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 1896) = 0u;
  *(_OWORD *)(v4 + 1848) = 0u;
  *(_OWORD *)(v4 + 1864) = 0u;
  *(void *)(v4 + 1912) = 850045863;
  float v12 = &v16;
  uint64_t v13 = 4;
  *(_OWORD *)(v4 + 1968) = 0u;
  *(_OWORD *)(v4 + 1952) = 0u;
  *(_OWORD *)(v4 + 1936) = 0u;
  *(_OWORD *)(v4 + 192std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(v4 + 1984) = 850045863;
  *(_OWORD *)(v4 + 2024) = 0u;
  *(_OWORD *)(v4 + 204std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 1992) = 0u;
  *(_OWORD *)(v4 + 2008) = 0u;
  *(void *)(v4 + 2056) = 850045863;
  *(_OWORD *)(v4 + 2112) = 0u;
  *(_OWORD *)(v4 + 2096) = 0u;
  *(_OWORD *)(v4 + 208std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 2064) = 0u;
  *(void *)(v4 + 2128) = 850045863;
  *(_OWORD *)(v4 + 2168) = 0u;
  *(_OWORD *)(v4 + 2184) = 0u;
  *(_OWORD *)(v4 + 2136) = 0u;
  *(_OWORD *)(v4 + 2152) = 0u;
  *(void *)(v4 + 220std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 850045863;
  *(void *)(v4 + 2256) = 0;
  *(_OWORD *)(v4 + 224std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v4 + 2224) = 0u;
  *(_OWORD *)(v4 + 2208) = 0u;
  long long v16 = xmmword_1BB87B730;
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>((uint64_t)&v12);
  CFArrayRef v15 = CFArray;
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::AppleSauceCFWithMutex(a1 + 2264, (CFTypeRef *)&v15);
  if (CFArray) {
    CFRelease(CFArray);
  }
  long long v16 = xmmword_1BB87B740;
  float v12 = &v16;
  uint64_t v13 = 4;
  CFArrayRef v6 = applesauce::CF::details::make_CFArrayRef<unsigned int>((uint64_t)&v12);
  CFArrayRef v14 = v6;
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::AppleSauceCFWithMutex(a1 + 2336, (CFTypeRef *)&v14);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(a1 + 2408) = 0;
  *(void *)(a1 + 2416) = 850045863;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 244std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_DWORD *)(a1 + 2488) = 1056964608;
  *(_OWORD *)(a1 + 2496) = xmmword_1BB873F80;
  *(_OWORD *)(a1 + 2512) = xmmword_1BB879EC0;
  *(void *)(a1 + 2528) = 0x3F428F5C00000002;
  *(void *)(a1 + 2536) = 1;
  *(_DWORD *)(a1 + 2544) = 1;
  *(_WORD *)(a1 + 2548) = 0;
  *(_DWORD *)(a1 + 2552) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 2556) = _Q1;
  *(unsigned char *)(a1 + 2572) = 1;
  *(_DWORD *)(a1 + 2576) = 0;
  *(void *)(a1 + 260std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(unsigned char *)(a1 + 2608) = 0;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_DWORD *)(a1 + 2612) = 1;
  *(_DWORD *)(a1 + 2632) = 0;
  *(void *)(a1 + 2616) = 0;
  *(void *)(a1 + 2621) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v12, "reverb room type");
  AUSM::Properties::addPropertyMapEntry<unsigned int>();
}

void sub_1BB59F3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  MEMORY[0x1C185D370](v41, 0x10B3C40DB818C1DLL);
  if (*(char *)(v44 - 145) < 0) {
    operator delete(*(void **)(v44 - 168));
  }
  if (*(char *)(v40 + 2607) < 0) {
    operator delete(*v43);
  }
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(v42);
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(a24);
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(a25);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a20);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a21);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a26);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a27);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a28);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a29);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 176));
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a30);
  unint64_t v46 = *a31;
  if (*a31)
  {
    *(void *)(v40 + 1672) = v46;
    operator delete(v46);
  }
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a32);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a37);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a38);
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(a39);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a33);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a22);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a23);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a34);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a40);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a35);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a36);
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 208));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 200));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 240));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 232));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 224));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 216));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 192));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(*(void *)(v44 - 184));
  AUSM::AppleSauceCFWithMutex<__CFURL const*>::~AppleSauceCFWithMutex(a11);
  AUSM::Properties::~Properties((AUSM::Properties *)v40);
  _Unwind_Resume(a1);
}

void sub_1BB59F8C0()
{
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v0 - 144));
  JUMPOUT(0x1BB59F7B4);
}

void sub_1BB59F8DC()
{
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v0 - 136));
  JUMPOUT(0x1BB59F7BCLL);
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFArray const*>::AppleSauceCFWithMutex(uint64_t a1, CFTypeRef *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  long long v5 = v3;
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(a1, &v5);
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void sub_1BB59F984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  std::mutex::~mutex(v3);
  applesauce::CF::ArrayRef::~ArrayRef(v2);
  _Unwind_Resume(a1);
}

void AUSM::Properties::addPropertyMapEntry<float>()
{
}

{
  operator new();
}

void sub_1BB59FB0C(_Unwind_Exception *a1)
{
  AUSM::AtomicPropertyWithRange<float>::~AtomicPropertyWithRange(v1);
  _Unwind_Resume(a1);
}

void AUSM::Properties::addPropertyMapEntry<__CFDictionary const*,(decltype(nullptr))0>()
{
}

void sub_1BB59FCA0(_Unwind_Exception *a1)
{
  AUSM::CFProperty<__CFDictionary const*>::~CFProperty(v1);
  _Unwind_Resume(a1);
}

void AUSM::Properties::addPropertyMapEntry<simd_quatf>()
{
}

void sub_1BB59FE20(_Unwind_Exception *a1)
{
  AUSM::AtomicProperty<simd_quatf>::~AtomicProperty(v1);
  _Unwind_Resume(a1);
}

void _ZN4AUSM10Properties19addPropertyMapEntryIDv3_fEEvjRNSt3__16atomicIT_EERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_18PropertyDescriptor8WritableENSG_7LoggingENSG_13SaveInPresetsE()
{
}

void sub_1BB59FF9C(_Unwind_Exception *a1)
{
  _ZN4AUSM14AtomicPropertyIDv3_fED0Ev(v1);
  _Unwind_Resume(a1);
}

void sub_1BB5A011C(_Unwind_Exception *a1)
{
  AUSM::AtomicProperty<float>::~AtomicProperty(v1);
  _Unwind_Resume(a1);
}

void AUSM::Properties::addPropertyMapEntry<__CFArray const*,(decltype(nullptr))0>()
{
}

void sub_1BB5A0298(_Unwind_Exception *a1)
{
  AUSM::CFProperty<__CFArray const*>::~CFProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFArray const*>::~AppleSauceCFWithMutex(uint64_t a1)
{
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

uint64_t AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::~AppleSauceCFWithMutex(uint64_t a1)
{
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

std::string *AUSM::AtomicProperty<AUSM::eDisplayGeometry>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

void AUSM::AtomicProperty<AUSM::eDisplayGeometry>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB5A03E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::hasValueRange()
{
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(unsigned char *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(unsigned char *)(result + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  if (*(unsigned char *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(unsigned char *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64)) {
    return 3;
  }
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<AUSM::eDisplayGeometry>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eDisplayGeometry>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AUSM::CFProperty<__CFArray const*>::printValue(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v4 = CFCopyDescription(cf);
  applesauce::CF::details::CFString_get_value<true>(v4, a2);
  if (v4) {
    CFRelease(v4);
  }
  CFRelease(v3);
}

void sub_1BB5A0698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::ArrayRef::~ArrayRef(&a10);
  _Unwind_Resume(a1);
}

void AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(void *a1, uint64_t a2)
{
  CFStringRef v4 = (std::mutex *)(a2 + 8);
  std::mutex::lock((std::mutex *)(a2 + 8));
  CFNumberRef v5 = *(const void **)a2;
  if (v5) {
    CFRetain(v5);
  }
  *a1 = v5;

  std::mutex::unlock(v4);
}

void AUSM::CFProperty<__CFArray const*>::createCF(uint64_t a1@<X0>, void *a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a2 = v3;
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t AUSM::CFProperty<__CFArray const*>::setData(uint64_t a1, const void **a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 != 2 || (a4 & 1) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
      return 4;
    }
    AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf1, *(void *)(a1 + 48));
    if (!a2)
    {
      CFTypeRef v11 = cf1;
      if (!cf1) {
        return 2;
      }
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v17 = 0;
      AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(v12, &v17);
      uint64_t v7 = 1;
LABEL_26:
      CFRelease(v11);
      return v7;
    }
    unsigned int v8 = *a2;
    if (v8)
    {
      CFRetain(v8);
      CFTypeID v9 = CFGetTypeID(v8);
      if (v9 == CFArrayGetTypeID())
      {
        if (cf1) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = v8;
        }
        if (cf1)
        {
          if (CFEqual(cf1, v8))
          {
            CFRelease(v8);
            uint64_t v7 = 2;
            goto LABEL_25;
          }
        }
        else
        {
          unsigned int v8 = v10;
        }
      }
      else
      {
        uint64_t v16 = 0;
        CFRelease(v8);
        unsigned int v8 = 0;
      }
    }
    uint64_t v13 = *(void *)(a1 + 48);
    CFArrayRef v15 = v8;
    uint64_t v16 = 0;
    AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(v13, &v15);
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v7 = 1;
LABEL_25:
    CFTypeRef v11 = cf1;
    if (!cf1) {
      return v7;
    }
    goto LABEL_26;
  }
  return 6;
}

void sub_1BB5A0918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  int v4 = va_arg(va1, const void *);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va1);
  _Unwind_Resume(a1);
}

void AUSM::AppleSauceCFWithMutex<__CFArray const*>::store(uint64_t a1, const void **a2)
{
  int v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  CFNumberRef v5 = *(const void **)a1;
  CFArrayRef v6 = *a2;
  *(void *)a1 = *a2;
  if (v6) {
    CFRetain(v6);
  }
  if (v5) {
    CFRelease(v5);
  }

  std::mutex::unlock(v4);
}

uint64_t AUSM::CFProperty<__CFArray const*>::getData(uint64_t a1, CFTypeRef *a2)
{
  AUSM::AppleSauceCFWithMutex<__CFArray const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (cf)
  {
    *a2 = CFRetain(cf);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1BB5A0A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFProperty<__CFArray const*>::getDataSizeBytes()
{
  return 8;
}

void AUSM::CFProperty<__CFArray const*>::~CFProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::CFProperty<__CFArray const*>::~CFProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AUSM::ByteArray::printValue(AUSM::ByteArray *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "ByteArray, size: ");
  std::to_string(&__p, *(void *)(*((void *)this + 6) + 8) - **((void **)this + 6));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  CFArrayRef v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_1BB5A0BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::ByteArray::createCF(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AUSM::ByteArray::setData(AUSM::ByteArray *this, const void *a2, unsigned int a3, char a4)
{
  int v4 = *((_DWORD *)this + 2);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if (!a2 && a3) {
    return 3;
  }
  std::string v8 = (char **)*((void *)this + 6);
  size_t v9 = a3;
  unsigned int v10 = *v8;
  unint64_t v11 = v8[1] - *v8;
  if (a3 <= v11)
  {
    if (a3 < v11) {
      v8[1] = &v10[a3];
    }
  }
  else
  {
    std::vector<std::byte>::__append(*((unint64_t **)this + 6), a3 - v11);
    unsigned int v10 = (char *)**((void **)this + 6);
  }
  memcpy(v10, a2, v9);
  return 1;
}

void std::vector<std::byte>::__append(unint64_t *a1, size_t a2)
{
  CFNumberRef v5 = (char *)a1[1];
  int v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      CFArrayRef v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      CFNumberRef v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t AUSM::ByteArray::getData(const void ***this, void *__dst)
{
  if (!__dst) {
    return 4;
  }
  memcpy(__dst, *this[6], (unsigned char *)this[6][1] - (unsigned char *)*this[6]);
  return 0;
}

uint64_t AUSM::ByteArray::getDataSizeBytes(AUSM::ByteArray *this)
{
  return (*(_DWORD *)(*((void *)this + 6) + 8) - **((_DWORD **)this + 6));
}

void AUSM::ByteArray::~ByteArray(void **this)
{
  *this = &unk_1F14BE0C0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }

  JUMPOUT(0x1C185D370);
}

{
  *this = &unk_1F14BE0C0;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

std::string *AUSM::AtomicProperty<HeadTrackingMode>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

void AUSM::AtomicProperty<HeadTrackingMode>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB5A0F88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::hasValueRange()
{
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(unsigned char *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(unsigned char *)(result + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  if (*(unsigned char *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(unsigned char *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64)) {
    return 3;
  }
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<HeadTrackingMode>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicPropertyWithRange<HeadTrackingMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicPropertyWithRange<HeadTrackingMode>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

std::string *AUSM::AtomicProperty<float>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  float v2 = COERCE_FLOAT(atomic_load(*(unsigned int **)(a1 + 48)));
  return std::to_string(a2, v2);
}

void AUSM::AtomicProperty<float>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB5A1238(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicProperty<float>::setData(uint64_t a1, float *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  float v8 = *a2;
  float v9 = COERCE_FLOAT(atomic_load(*(unsigned int **)(a1 + 48)));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(LODWORD(v8), *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<float>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicProperty<float>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicProperty<float>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicProperty<float>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

std::string *AUSM::AtomicProperty<AUSM::eParameterSmoothing>::printValue@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::to_string(a2, v2);
}

void AUSM::AtomicProperty<AUSM::eParameterSmoothing>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB5A148C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::hasValueRange()
{
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(unsigned char *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(unsigned char *)(result + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  if (*(unsigned char *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(unsigned char *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64)) {
    return 3;
  }
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<AUSM::eParameterSmoothing>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicPropertyWithRange<AUSM::eParameterSmoothing>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZNK4AUSM14AtomicPropertyIDv3_fE10printValueEv(std::string *a1@<X8>)
{
  _X20 = 0;
  _X21 = 0;
  __asm { CASPAL          X20, X21, X20, X21, [X8] }
  std::to_string(&v24, *(float *)&_X20);
  unsigned int v9 = std::string::insert(&v24, 0, "X = ", 4uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  unint64_t v11 = std::string::append(&v25, ", Y = ", 6uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v23, *((float *)&_X20 + 1));
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v23;
  }
  else {
    uint64_t v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  char v15 = std::string::append(&v26, (const std::string::value_type *)v13, size);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = std::string::append(&v27, ", Z = ", 6uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, 0.0);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v22;
  }
  else {
    uint64_t v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v22.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::string::append(&v28, (const std::string::value_type *)v19, v20);
  *a1 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1BB5A1880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 41) < 0) {
    operator delete(*(void **)(v42 - 64));
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void _ZNK4AUSM14AtomicPropertyIDv3_fE8createCFEv(void *a1@<X8>)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  *(void *)bytes = _X2;
  uint64_t v14 = 0;
  CFDataRef v9 = CFDataCreate(0, bytes, 12);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v9);
  CFTypeRef v10 = cf;
  if (cf)
  {
    CFRetain(cf);
    CFTypeRef v11 = cf;
    *a1 = v10;
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    *a1 = 0;
  }
}

uint64_t _ZN4AUSM14AtomicPropertyIDv3_fE7setDataEPKvjb(uint64_t a1, float32x2_t *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  _X0 = 0;
  _X1 = 0;
  __asm { CASPAL          X0, X1, X0, X1, [X8] }
  int8x8_t v15 = vmvn_s8((int8x8_t)vceq_f32(*a2, _X0));
  if ((v15.i8[0] & 1) == 0 && (v15.i8[4] & 1) == 0 && a2[1].f32[0] == COERCE_FLOAT(vdupq_n_s64(0).i32[2])) {
    return 2;
  }
  long long v16 = *(uint64_t **)(a1 + 48);
  _X0 = *a2;
  uint64_t v18 = *v16;
  do
  {
    _X5 = v16[1];
    __asm { CASPAL          X4, X5, X0, X1, [X8] }
    _ZF = _X4 == v18;
    uint64_t v18 = _X4;
  }
  while (!_ZF);
  return 1;
}

uint64_t _ZNK4AUSM14AtomicPropertyIDv3_fE7getDataEPv(uint64_t a1, uint64_t a2)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  *(_DWORD *)a2 = _X2.i32[0];
  *(int8x8_t *)(a2 + 4) = vext_s8(_X2, 0, 4uLL);
  return 0;
}

uint64_t _ZNK4AUSM14AtomicPropertyIDv3_fE16getDataSizeBytesEv()
{
  return 12;
}

void _ZN4AUSM14AtomicPropertyIDv3_fED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t _ZN4AUSM14AtomicPropertyIDv3_fED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AUSM::AtomicProperty<simd_quatf>::printValue(std::string *a1@<X8>)
{
  _X20 = 0;
  _X21 = 0;
  __asm { CASPAL          X20, X21, X20, X21, [X8] }
  std::to_string(&v31, *(float *)&_X20);
  CFDataRef v9 = std::string::insert(&v31, 0, "X = ", 4uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  CFTypeRef v11 = std::string::append(&v32, ", Y = ", 6uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, *((float *)&_X20 + 1));
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v30;
  }
  else {
    uint64_t v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  int8x8_t v15 = std::string::append(&v33, (const std::string::value_type *)v13, size);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = std::string::append(&v34, ", Z = ", 6uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v29, 0.0);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v29;
  }
  else {
    uint64_t v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v29.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::string v23 = std::string::append(&v36, ", W = ", 6uLL);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v28, COERCE_FLOAT((unsigned __int128)_X20 >> 96));
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v25 = &v28;
  }
  else {
    std::string v25 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = v28.__r_.__value_.__l.__size_;
  }
  std::string v27 = std::string::append(&v37, (const std::string::value_type *)v25, v26);
  *a1 = *v27;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_1BB5A1E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 41) < 0) {
    operator delete(*(void **)(v47 - 64));
  }
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  if (*(char *)(v47 - 137) < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB5A1F44()
{
}

void AUSM::AtomicProperty<simd_quatf>::createCF(void *a1@<X8>)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  *(void *)bytes = _X2;
  uint64_t v14 = 0;
  CFDataRef v9 = CFDataCreate(0, bytes, 16);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v9);
  CFTypeRef v10 = cf;
  if (cf)
  {
    CFRetain(cf);
    CFTypeRef v11 = cf;
    *a1 = v10;
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    *a1 = 0;
  }
}

uint64_t AUSM::AtomicProperty<simd_quatf>::setData(uint64_t a1, float32x4_t *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  float32x4_t v8 = *a2;
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) < 0.001) {
    return 3;
  }
  _X0 = 0;
  _X1 = 0;
  __asm { CASPAL          X0, X1, X0, X1, [X8] }
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v8, (float32x4_t)_X0))), 0xFuLL))) & 1) == 0)return 2; {
  uint64_t v17 = *(uint64_t **)(a1 + 48);
  }
  _X0 = a2->i64[0];
  uint64_t v19 = *v17;
  do
  {
    _X5 = v17[1];
    __asm { CASPAL          X4, X5, X0, X1, [X8] }
    _ZF = _X4 == v19;
    uint64_t v19 = _X4;
  }
  while (!_ZF);
  return 1;
}

uint64_t AUSM::AtomicProperty<simd_quatf>::getData(uint64_t a1, uint64_t a2)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  *(_DWORD *)a2 = _X2.i32[0];
  *(int8x8_t *)(a2 + 4) = vext_s8(_X2, 0, 4uLL);
  *(_DWORD *)(a2 + 12) = vdupq_n_s64(0).i32[3];
  return 0;
}

uint64_t AUSM::AtomicProperty<simd_quatf>::getDataSizeBytes()
{
  return 16;
}

void AUSM::AtomicProperty<simd_quatf>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicProperty<simd_quatf>::~AtomicProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void *AUSM::AtomicProperty<SpatializerOrientation>::printValue@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  signed int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  return std::string::basic_string[abi:ne180100]<0>(a2, *((char **)&xmmword_1E623FFB8 + v2));
}

void AUSM::AtomicProperty<SpatializerOrientation>::createCF(uint64_t a1@<X0>, CFNumberRef *a2@<X8>)
{
  unsigned int v3 = atomic_load(*(unsigned int **)(a1 + 48));
  unsigned int valuePtr = v3;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  *a2 = v5;
  CFRelease(v5);
}

void sub_1BB5A22C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::hasValueRange()
{
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::setMaxValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 64) = *a2;
  *(unsigned char *)(result + 68) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::setMinValue(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 56) = *a2;
  *(unsigned char *)(result + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::setData(uint64_t a1, unsigned int *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  unsigned int v8 = *a2;
  if (*(unsigned char *)(a1 + 60) && v8 < *(_DWORD *)(a1 + 56) || *(unsigned char *)(a1 + 68) && v8 > *(_DWORD *)(a1 + 64)) {
    return 3;
  }
  unsigned int v9 = atomic_load(*(unsigned int **)(a1 + 48));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(v8, *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicProperty<SpatializerOrientation>::getData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = atomic_load(*(unsigned int **)(a1 + 48));
  *a2 = v2;
  return 0;
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicPropertyWithRange<SpatializerOrientation>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicPropertyWithRange<SpatializerOrientation>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AUSM::CFProperty<__CFDictionary const*>::printValue(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v4 = CFCopyDescription(cf);
  applesauce::CF::details::CFString_get_value<true>(v4, a2);
  if (v4) {
    CFRelease(v4);
  }
  CFRelease(v3);
}

void sub_1BB5A2574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  _Unwind_Resume(a1);
}

void AUSM::CFProperty<__CFDictionary const*>::createCF(uint64_t a1@<X0>, void *a2@<X8>)
{
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a2 = v3;
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::setData(uint64_t a1, const void **a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 != 2 || (a4 & 1) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
      return 4;
    }
    AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf1, *(void *)(a1 + 48));
    if (!a2)
    {
      CFTypeRef v11 = cf1;
      if (!cf1) {
        return 2;
      }
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v17 = 0;
      AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::store(v12, &v17);
      uint64_t v7 = 1;
LABEL_26:
      CFRelease(v11);
      return v7;
    }
    unsigned int v8 = *a2;
    if (v8)
    {
      CFRetain(v8);
      CFTypeID v9 = CFGetTypeID(v8);
      if (v9 == CFDictionaryGetTypeID())
      {
        if (cf1) {
          CFTypeRef v10 = 0;
        }
        else {
          CFTypeRef v10 = v8;
        }
        if (cf1)
        {
          if (CFEqual(cf1, v8))
          {
            CFRelease(v8);
            uint64_t v7 = 2;
            goto LABEL_25;
          }
        }
        else
        {
          unsigned int v8 = v10;
        }
      }
      else
      {
        uint64_t v16 = 0;
        CFRelease(v8);
        unsigned int v8 = 0;
      }
    }
    uint64_t v13 = *(void *)(a1 + 48);
    int8x8_t v15 = v8;
    uint64_t v16 = 0;
    AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::store(v13, &v15);
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v7 = 1;
LABEL_25:
    CFTypeRef v11 = cf1;
    if (!cf1) {
      return v7;
    }
    goto LABEL_26;
  }
  return 6;
}

void sub_1BB5A2790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  int v4 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::getData(uint64_t a1, CFTypeRef *a2)
{
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&cf, *(void *)(a1 + 48));
  CFTypeRef v3 = cf;
  if (cf)
  {
    *a2 = CFRetain(cf);
    CFRelease(v3);
  }
  else
  {
    *a2 = 0;
  }
  return 0;
}

void sub_1BB5A2834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::getDataSizeBytes()
{
  return 8;
}

void AUSM::CFProperty<__CFDictionary const*>::~CFProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::CFProperty<__CFDictionary const*>::~CFProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t AUSM::AtomicPropertyWithRange<float>::hasValueRange()
{
  return 1;
}

float AUSM::AtomicPropertyWithRange<float>::setMaxValue(uint64_t a1, float *a2)
{
  float result = *a2;
  *(float *)(a1 + 64) = *a2;
  *(unsigned char *)(a1 + 68) = 1;
  return result;
}

float AUSM::AtomicPropertyWithRange<float>::setMinValue(uint64_t a1, float *a2)
{
  float result = *a2;
  *(float *)(a1 + 56) = *a2;
  *(unsigned char *)(a1 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
  return result;
}

uint64_t AUSM::AtomicPropertyWithRange<float>::setData(uint64_t a1, float *a2, int a3, char a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4) {
    return 5;
  }
  if (v4 == 2 && (a4 & 1) != 0) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != a3) {
    return 4;
  }
  float v8 = *a2;
  if (*(unsigned char *)(a1 + 60) && v8 < *(float *)(a1 + 56) || *(unsigned char *)(a1 + 68) && v8 > *(float *)(a1 + 64)) {
    return 3;
  }
  float v9 = COERCE_FLOAT(atomic_load(*(unsigned int **)(a1 + 48)));
  if (v8 == v9) {
    return 2;
  }
  atomic_store(LODWORD(v8), *(unsigned int **)(a1 + 48));
  return 1;
}

uint64_t AUSM::AtomicPropertyWithRange<float>::getDataSizeBytes()
{
  return 4;
}

void AUSM::AtomicPropertyWithRange<float>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::AtomicPropertyWithRange<float>::~AtomicPropertyWithRange(uint64_t a1)
{
  *(void *)a1 = &unk_1F14BE0C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

BOOL AUSM::GlobalProperties::isEnabledFeature(AUSM::GlobalProperties *this, CFTypeRef cf1)
{
  Boolean v4 = CFEqual(cf1, @"NearFieldHRTF");
  AUSM::AppleSauceCFWithMutex<__CFDictionary const*>::load(&v8, (uint64_t)this + 2120);
  CFDictionaryRef v5 = v8;
  if (v8)
  {
    __int16 v6 = applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v8, cf1);
    if ((v6 & 0xFF00) != 0) {
      Boolean v4 = v6;
    }
    CFRelease(v5);
  }
  return v4 != 0;
}

BOOL AUDecorrelator::ValidFormat(AUDecorrelator *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (a4->mChannelsPerFrame != 2) {
    return 0;
  }
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  return result;
}

uint64_t AUDecorrelator::SupportedNumChannels(AUDecorrelator *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDecorrelator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUDecorrelator::StreamFormatWritable(AUDecorrelator *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDecorrelator::SupportsTail(AUDecorrelator *this)
{
  return 1;
}

double AUDecorrelator::GetTailTime(AUDecorrelator *this)
{
  return 0.0;
}

double AUDecorrelator::GetLatency(AUDecorrelator *this)
{
  return 0.0;
}

uint64_t AUDecorrelator::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!v3)
  {
    AUDecorrelator::ApplyParameters((AUDecorrelator *)this);
    ++*((_DWORD *)this + 133);
  }
  return v3;
}

void AUDecorrelator::ApplyParameters(AUDecorrelator *this)
{
  unsigned int v2 = (AUDecorrelator *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDecorrelator *)((char *)this + 32), 0);
  *((float *)this + 151) = ausdk::AUElement::GetParameter(Element, 0);
  Boolean v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(v4, 1u);
  *((_DWORD *)this + 148) = Parameter;
  *((_DWORD *)this + 158) = Parameter;
  __int16 v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v7 = ausdk::AUElement::GetParameter(v6, 2u);
  *((_DWORD *)this + 149) = v7;
  *((_DWORD *)this + 159) = v7;
}

uint64_t AUDecorrelator::GetParameterInfo(AUDecorrelator *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->unitName = 0;
  buffer->flags = 0x40000000;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 2)
  {
    CFStringRef v6 = *(&off_1E623F1E8 + a3);
    AudioUnitParameterValue v7 = flt_1BB8A9304[a3];
    AudioUnitParameterValue v8 = flt_1BB8A9310[a3];
    int v9 = dword_1BB8A931C[a3];
    buffer->cfNameString = v6;
    buffer->flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    *(void *)&buffer->unit = 0;
    buffer->maxCFNumberRef Value = v7;
    buffer->defaultCFNumberRef Value = v8;
    buffer->flags |= v9;
  }
  return result;
}

BOOL AUDecorrelator::BusCountWritable(AUDecorrelator *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUDecorrelator::Render(AUDecorrelator *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) < a4) {
    return 4294956422;
  }
  int v9 = (AUDecorrelator *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUDecorrelator *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v11 = ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 128), 0);
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v13 = ausdk::AUScope::SafeGetElement(v9, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    return (*(uint64_t (**)(AUDecorrelator *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUDecorrelator::ProcessMultipleBufferLists(AUDecorrelator *this, unsigned int *a2, vDSP_Length __N, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 84) < __N) {
    return 4294956422;
  }
  if (*((unsigned char *)this + 528))
  {
    int v11 = *((_DWORD *)this + 137);
    if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 541))
    {
      if (v11)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          memcpy((*a7)->mBuffers[v12].mData, (*a5)->mBuffers[v12].mData, (*a7)->mBuffers[v12].mDataByteSize);
          ++v13;
          ++v12;
        }
        while (v13 < *((unsigned int *)this + 137));
      }
    }
    else if (v11)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      do
      {
        bzero((*a7)->mBuffers[v28].mData, (*a7)->mBuffers[v28].mDataByteSize);
        ++v29;
        ++v28;
      }
      while (v29 < *((unsigned int *)this + 137));
    }
  }
  else
  {
    unsigned int v14 = __N;
    int v15 = *((_DWORD *)this + 133);
    if (v15 != *((_DWORD *)this + 134))
    {
      AUDecorrelator::ApplyParameters(this);
      *((_DWORD *)this + 134) = v15;
    }
    if (!*((unsigned char *)this + 540) && !*((unsigned char *)this + 541))
    {
      uint64_t v16 = *((unsigned int *)this + 137);
      if (v16)
      {
        unint64_t v17 = 0;
        uint64_t v18 = 16 * v16;
        uint64_t v19 = (void **)((char *)this + 576);
        do
        {
          *(v19 - 2) = (*a5)->mBuffers[v17 / 0x10].mData;
          *v19++ = (*a7)->mBuffers[v17 / 0x10].mData;
          v17 += 16;
        }
        while (v18 != v17);
      }
      float __B = *((float *)this + 151) * 0.5;
      if (*((_DWORD *)this + 150))
      {
        unint64_t v20 = 0;
        size_t v21 = 4 * v14;
        long long v22 = (char *)this + 632;
        vDSP_Length v23 = v14;
        do
        {
          long long v24 = &v22[8 * v20];
          std::string v25 = (const void *)*((void *)v24 - 9);
          std::string::size_type v26 = (void *)*((void *)v24 - 7);
          if (!*(_DWORD *)&v22[4 * v20] || __B == 0.0)
          {
            memcpy(v26, v25, v21);
          }
          else
          {
            vDSP_vabs((const float *)v25, 1, *((float **)this + 76), 1, v23);
            std::string v27 = (float *)*((void *)this + 76);
            if (*(_DWORD *)&v22[4 * v20] == 1) {
              vDSP_vadd((const float *)v25, 1, *((const float **)this + 76), 1, v27, 1, v23);
            }
            else {
              vDSP_vsub(*((const float **)this + 76), 1, (const float *)v25, 1, v27, 1, v23);
            }
            vDSP_vsmul(*((const float **)this + 76), 1, &__B, *((float **)this + 76), 1, v23);
            vDSP_vadd((const float *)v25, 1, *((const float **)this + 76), 1, (float *)v26, 1, v23);
          }
          ++v20;
        }
        while (v20 < *((unsigned int *)this + 150));
      }
    }
  }
  return 0;
}

uint64_t AUDecorrelator::CanScheduleParameters(AUDecorrelator *this)
{
  return 0;
}

uint64_t AUDecorrelator::SetParameter(AUDecorrelator *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a2 <= 2) {
    ++*((_DWORD *)this + 133);
  }
  return 0;
}

uint64_t AUDecorrelator::SetProperty(AUDecorrelator *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      if ((*a5 != 0) != (*((unsigned char *)this + 528) != 0)) {
        *((unsigned char *)this + 528) = *a5 != 0;
      }
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUDecorrelator::GetProperty(AUDecorrelator *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    CFStringRef v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    CFStringRef v6 = (unsigned __int8 *)this + 528;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDecorrelator::GetPropertyInfo(AUDecorrelator *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    BOOL v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    BOOL v7 = 0;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUDecorrelator::Reset(float **this)
{
  return 0;
}

uint64_t AUDecorrelator::Initialize(AUDecorrelator *this)
{
  unsigned int v2 = (AUDecorrelator *)((char *)this + 80);
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 80), 0) + 80);
  if (v3 != *(double *)(ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 128), 0) + 80)
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 88) != 1819304813
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDecorrelator *)((char *)this + 128), 0) + 88) != 1819304813)
  {
    return 4294956428;
  }
  uint64_t v4 = (*(uint64_t (**)(AUDecorrelator *, void, void))(*(void *)this + 72))(this, 0, 0);
  if (v4) {
    (*(void (**)(AUDecorrelator *))(*(void *)this + 64))(this);
  }
  return v4;
}

void AUDecorrelator::~AUDecorrelator(AUDecorrelator *this)
{
  AUDecorrelator::~AUDecorrelator(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B6BC8;
  unsigned int v2 = (void *)*((void *)this + 76);
  if (v2)
  {
    *((void *)this + 77) = v2;
    operator delete(v2);
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUDenoise::SetMaxFramesPerSlice(AUDenoise *this, int a2)
{
  uint64_t result = ausdk::AUBase::SetMaxFramesPerSlice((uint64_t)this, a2);
  if (*((_DWORD *)this + 154) != a2) {
    *((_DWORD *)this + 154) = a2;
  }
  return result;
}

uint64_t AUDenoise::GetScopeExtended(AUDenoise *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 568;
  }
  else {
    return 0;
  }
}

uint64_t AUDenoise::ChangeStreamFormat(AUDenoise *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  if (a4->mSampleRate != a5->mSampleRate) {
    *((void *)this + 78) = *(void *)&a5->mSampleRate;
  }
  return 0;
}

uint64_t AUDenoise::ValidFormat(AUDenoise *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUDenoise::SupportedNumChannels(AUDenoise *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDenoise::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 16;
}

BOOL AUDenoise::StreamFormatWritable(AUDenoise *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDenoise::SupportsTail(AUDenoise *this)
{
  return 1;
}

double AUDenoise::GetTailTime(AUDenoise *this)
{
  return 0.05;
}

double AUDenoise::GetLatency(AUDenoise *this)
{
  return 0.0;
}

uint64_t AUDenoise::GetParameterValueStrings(AUDenoise *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  uint64_t result = 0;
  if (a3 <= 31)
  {
    if (a3)
    {
      if (a3 != 30) {
        return result;
      }
      long long v9 = xmmword_1E623F220;
      CFIndex v7 = 2;
    }
    else
    {
      long long v9 = xmmword_1E623F200;
      long long v10 = *(_OWORD *)&off_1E623F210;
      CFIndex v7 = 4;
    }
  }
  else
  {
    switch(a3)
    {
      case ' ':
        CFStringRef v6 = &xmmword_1E623F230;
        break;
      case ')':
        CFStringRef v6 = &xmmword_1E623F248;
        break;
      case '*':
        CFStringRef v6 = &xmmword_1E623F260;
        break;
      default:
        return result;
    }
    long long v9 = *v6;
    *(void *)&long long v10 = *((void *)v6 + 2);
    CFIndex v7 = 3;
  }
  CFArrayRef v8 = CFArrayCreate(0, (const void **)&v9, v7, 0);
  uint64_t result = 0;
  *a4 = v8;
  return result;
}

uint64_t AUDenoise::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
    this[68] = (OpaqueAudioComponentInstance *)((char *)this[68] + 1);
  }
  return result;
}

UInt8 *AUDenoise::SaveExtendedScopes(AUDenoise *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUDenoise::GetParameterInfo(AUDenoise *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    switch(a3)
    {
      case 18:
        buffer->cfNameString = @"EC Delta EIR.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Delta EIR.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v7 = 0x501502F900000000;
        goto LABEL_14;
      case 19:
        buffer->cfNameString = @"EC IR Delay.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC IR Delay.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v7 = 0x43C8000000000000;
        goto LABEL_14;
      case 20:
        CFStringRef v8 = @"EC Adapted flag.";
        goto LABEL_13;
      case 21:
        buffer->cfNameString = @"EC Time aligned ref signal energy.";
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(@"EC Time aligned ref signal energy.", buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v7 = 0x447A000000000000;
        goto LABEL_14;
      case 22:
        CFStringRef v8 = @"EC Mic-Eclee cross correlation.";
LABEL_13:
        buffer->cfNameString = v8;
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        buffer->defaultCFNumberRef Value = 0.0;
        uint64_t v7 = 0x3F80000000000000;
LABEL_14:
        *(void *)&buffer->minCFNumberRef Value = v7;
        AudioUnitParameterOptions flags = buffer->flags;
        int v10 = 1073774592;
LABEL_68:
        AudioUnitParameterOptions v16 = flags | v10;
LABEL_69:
        uint64_t result = 0;
        buffer->AudioUnitParameterOptions flags = v16;
        break;
      default:
        uint64_t result = 4294956418;
        break;
    }
  }
  else
  {
    if (!a2)
    {
      uint64_t result = 4294956418;
      switch(a3)
      {
        case 0:
          buffer->cfNameString = @"PMWF mode";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"PMWF mode", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          uint64_t v6 = 0x4040000000000000;
          goto LABEL_19;
        case 1:
          CFStringRef v11 = @"Smoothing time constant for mic PSD";
          goto LABEL_17;
        case 2:
          CFStringRef v11 = @"Smoothing time constant for noise PSD";
LABEL_17:
          buffer->cfNameString = v11;
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          *(void *)&buffer->minCFNumberRef Value = 0x4000000000000000;
          AudioUnitParameterValue v12 = 0.38;
          goto LABEL_30;
        case 3:
          buffer->cfNameString = @"Smoothing time constant for SPP";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Smoothing time constant for SPP", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          uint64_t v6 = 0x4000000000000000;
LABEL_19:
          *(void *)&buffer->minCFNumberRef Value = v6;
          buffer->defaultCFNumberRef Value = 0.0;
          goto LABEL_31;
        case 4:
          buffer->cfNameString = @"Parameter for Wiener filter";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Parameter for Wiener filter", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v13 = 0x41A0000000000000;
          goto LABEL_24;
        case 5:
          buffer->cfNameString = @"Initial noise PSD";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Initial noise PSD", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(void *)&buffer->minCFNumberRef Value = 0xC1F00000C2480000;
          AudioUnitParameterValue v12 = -30.0;
          goto LABEL_30;
        case 6:
          buffer->cfNameString = @"A priori SPP";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"A priori SPP", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
          AudioUnitParameterValue v12 = 0.5;
          goto LABEL_30;
        case 7:
          buffer->cfNameString = @"Max SPP";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Max SPP", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v13 = 0x3F80000000000000;
LABEL_24:
          *(void *)&buffer->minCFNumberRef Value = v13;
          AudioUnitParameterValue v12 = 1.0;
          goto LABEL_30;
        case 8:
          buffer->cfNameString = @"Max GLR";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Max GLR", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x47C35000447A0000;
          AudioUnitParameterValue v12 = 100000.0;
          goto LABEL_30;
        case 9:
          buffer->cfNameString = @"Depricated";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Depricated", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x424800003F800000;
          buffer->defaultCFNumberRef Value = 5.0;
          int v10 = -988807168;
          goto LABEL_68;
        case 10:
          buffer->cfNameString = @"Number of frames for MVAD tracker";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Number of frames for MVAD tracker", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x424800003F800000;
          AudioUnitParameterValue v14 = 5.0;
          goto LABEL_72;
        case 11:
          buffer->cfNameString = @"Speech to noise level threshold";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Speech to noise level threshold", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(void *)&buffer->minCFNumberRef Value = 0x41A0000000000000;
          AudioUnitParameterValue v15 = 6.9897;
          goto LABEL_66;
        case 12:
          buffer->cfNameString = @"Noise reduction amount";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Noise reduction amount", buffer->name, 52, 0x8000100u);
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(void *)&buffer->minCFNumberRef Value = 3281387520;
          AudioUnitParameterValue v12 = -300.0;
LABEL_30:
          buffer->defaultCFNumberRef Value = v12;
LABEL_31:
          AudioUnitParameterOptions v16 = buffer->flags | 0xC0000000;
          goto LABEL_69;
        case 13:
          buffer->cfNameString = @"Max a priori SAP";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Max a priori SAP", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
          AudioUnitParameterValue v15 = 0.99;
          goto LABEL_66;
        case 14:
          CFStringRef v17 = @"Filter echo estimates?";
          goto LABEL_35;
        case 15:
          CFStringRef v17 = @"Stop adaptation during echo?";
LABEL_35:
          buffer->cfNameString = v17;
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          AudioUnitParameterOptions v18 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
          *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
          buffer->defaultCFNumberRef Value = 0.0;
          AudioUnitParameterOptions v16 = v18 | 0xC0100000;
          goto LABEL_69;
        case 16:
          CFStringRef v19 = @"Sxx threshold to stop adaptation.";
          goto LABEL_38;
        case 17:
          CFStringRef v19 = @"Eclee threshold to stop adaptation.";
LABEL_38:
          buffer->cfNameString = v19;
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
          buffer->clumpID = 2;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          buffer->defaultCFNumberRef Value = -60.0;
          *(void *)&buffer->minCFNumberRef Value = 3267887104;
          goto LABEL_67;
        case 23:
          buffer->cfNameString = @"Min a priori SAP";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Min a priori SAP", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x3DCCCCCD3C23D70ALL;
          AudioUnitParameterValue v15 = 0.05;
          goto LABEL_66;
        case 24:
          buffer->cfNameString = @"Number of additional SPP iterations";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Number of additional SPP iterations", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v20 = 0x40A0000000000000;
          goto LABEL_60;
        case 25:
          buffer->cfNameString = @"Use full rank Wiener filter?";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Use full rank Wiener filter?", buffer->name, 52, 0x8000100u);
          UInt32 v21 = 1;
          goto LABEL_48;
        case 26:
          buffer->cfNameString = @"Number of frames to initialize noise cov.";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Number of frames to initialize noise cov.", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x41A0000000000000;
          buffer->defaultCFNumberRef Value = 0.0;
          goto LABEL_73;
        case 27:
          buffer->cfNameString = @"Average SPP per frame";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Average SPP per frame", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions v22 = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
          buffer->defaultCFNumberRef Value = 0.0;
          AudioUnitParameterOptions v16 = v22 | 0x40108000;
          goto LABEL_69;
        case 28:
          buffer->cfNameString = @"Gram-Schmidt regularization energy threshold";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Gram-Schmidt regularization energy threshold", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(void *)&buffer->minCFNumberRef Value = 0xC3480000C3960000;
          AudioUnitParameterValue v23 = -250.0;
          goto LABEL_55;
        case 29:
          buffer->cfNameString = @"Time period after which debug metrics are logged";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Time period after which debug metrics are logged", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 1;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Seconds;
          *(void *)&buffer->minCFNumberRef Value = 0x45D0500000000000;
          buffer->defaultCFNumberRef Value = 0.0;
          goto LABEL_56;
        case 30:
          buffer->cfNameString = @"Steering type for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Steering type for iPMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          AudioUnitParameterOptions flags = buffer->flags;
          AudioUnitParameterUnit v24 = kAudioUnitParameterUnit_Indexed;
          goto LABEL_49;
        case 31:
          buffer->cfNameString = @"Use external SPP for iPMWF?";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Use external SPP for iPMWF?", buffer->name, 52, 0x8000100u);
          UInt32 v21 = 3;
LABEL_48:
          buffer->clumpID = v21;
          AudioUnitParameterOptions flags = buffer->flags;
          AudioUnitParameterUnit v24 = kAudioUnitParameterUnit_Boolean;
LABEL_49:
          buffer->unit = v24;
          uint64_t v20 = 0x3F80000000000000;
          goto LABEL_60;
        case 32:
          buffer->cfNameString = @"Type of recursive update of statistics for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Type of recursive update of statistics for iPMWF", buffer->name, 52, 0x8000100u);
          UInt32 v25 = 3;
          goto LABEL_64;
        case 33:
          buffer->cfNameString = @"Minimum frequency for IVA VAD calculator for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Minimum frequency for IVA VAD calculator for iPMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(void *)&buffer->minCFNumberRef Value = 0x44FA000042480000;
          AudioUnitParameterValue v23 = 100.0;
          goto LABEL_55;
        case 34:
          buffer->cfNameString = @"Maximum frequency for IVA VAD calculator for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Maximum frequency for IVA VAD calculator for iPMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Hertz;
          *(void *)&buffer->minCFNumberRef Value = 0x45DAC00044FA0000;
          AudioUnitParameterValue v23 = 7000.0;
          goto LABEL_55;
        case 35:
          buffer->cfNameString = @"Distribution prior for IVA VAD calculator for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Distribution prior for IVA VAD calculator for iPMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x3F8000003DCCCCCDLL;
          AudioUnitParameterValue v23 = 0.5;
          goto LABEL_55;
        case 36:
          buffer->cfNameString = @"Energy threshold for IVA VAD calculator for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Energy threshold for IVA VAD calculator for iPMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 4;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x3DCCCCCD358637BDLL;
          AudioUnitParameterValue v23 = 0.001;
LABEL_55:
          buffer->defaultCFNumberRef Value = v23;
LABEL_56:
          int v10 = -1005584384;
          goto LABEL_68;
        case 37:
          buffer->cfNameString = @"External input VAD for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"External input VAD for iPMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          goto LABEL_62;
        case 38:
          buffer->cfNameString = @"Maximum signal gain for iPMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Maximum signal gain for iPMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(void *)&buffer->minCFNumberRef Value = 0x4120000000000000;
          AudioUnitParameterValue v15 = 6.0;
          goto LABEL_66;
        case 39:
          buffer->cfNameString = @"Target beam index from input plist for iPMWF.";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Target beam index from input plist for iPMWF.", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v20 = 0x428E000000000000;
LABEL_60:
          *(void *)&buffer->minCFNumberRef Value = v20;
          buffer->defaultCFNumberRef Value = 0.0;
          goto LABEL_67;
        case 40:
          buffer->cfNameString = @"Use updated iPMWF filter on current frame";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Use updated iPMWF filter on current frame", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 3;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Boolean;
LABEL_62:
          uint64_t v26 = 0x3F80000000000000;
          goto LABEL_65;
        case 41:
          buffer->cfNameString = @"Guidance mode for GuidedMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Guidance mode for GuidedMWF", buffer->name, 52, 0x8000100u);
          UInt32 v25 = 5;
LABEL_64:
          buffer->clumpID = v25;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          uint64_t v26 = 0x4000000000000000;
LABEL_65:
          *(void *)&buffer->minCFNumberRef Value = v26;
          AudioUnitParameterValue v15 = 1.0;
LABEL_66:
          buffer->defaultCFNumberRef Value = v15;
LABEL_67:
          int v10 = -1072693248;
          goto LABEL_68;
        case 42:
          buffer->cfNameString = @"Covariance inverse calculation mode for GuidedMWF";
          buffer->AudioUnitParameterOptions flags = 0x8000000;
          CFStringGetCString(@"Covariance inverse calculation mode for GuidedMWF", buffer->name, 52, 0x8000100u);
          buffer->clumpID = 5;
          AudioUnitParameterOptions flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          *(void *)&buffer->minCFNumberRef Value = 0x4000000000000000;
          AudioUnitParameterValue v14 = 2.0;
LABEL_72:
          buffer->defaultCFNumberRef Value = v14;
LABEL_73:
          int v10 = -1055916032;
          goto LABEL_68;
        default:
          return result;
      }
    }
    return 4294956430;
  }
  return result;
}

uint64_t AUDenoise::GetParameterList(AUDenoise *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 == 4)
  {
    if (!a3)
    {
      unsigned int v4 = 5;
      goto LABEL_11;
    }
    unsigned int v4 = 5;
    *a3 = 18;
    unsigned int v5 = 22;
    unsigned int v6 = 21;
    unsigned int v7 = 20;
    unsigned int v8 = 19;
    uint64_t v9 = 4;
    uint64_t v10 = 3;
    uint64_t v11 = 2;
    uint64_t v12 = 1;
  }
  else
  {
    if (a2) {
      return 4294956430;
    }
    if (!a3)
    {
      unsigned int v4 = 38;
      goto LABEL_11;
    }
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB87B780;
    *((_OWORD *)a3 + 4) = xmmword_1BB87B790;
    *((_OWORD *)a3 + 5) = xmmword_1BB87B7A0;
    unsigned int v4 = 38;
    unsigned int v5 = 42;
    unsigned int v6 = 41;
    unsigned int v7 = 40;
    *((_OWORD *)a3 + 6) = xmmword_1BB87B7B0;
    *((_OWORD *)a3 + 7) = xmmword_1BB879CC0;
    unsigned int v8 = 39;
    uint64_t v9 = 37;
    uint64_t v10 = 36;
    uint64_t v11 = 35;
    uint64_t v12 = 34;
    *((void *)a3 + 16) = 0x2600000025;
  }
  a3[v12] = v8;
  a3[v11] = v7;
  a3[v10] = v6;
  a3[v9] = v5;
LABEL_11:
  uint64_t result = 0;
  *a4 = v4;
  return result;
}

uint64_t AUDenoise::Render(AUDenoise *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (AUDenoise *)((char *)this + 80);
  char v11 = 1;
  do
  {
    char v12 = v11;
    uint64_t Element = ausdk::AUScope::GetElement(v10, v8);
    if (Element && *(_DWORD *)(Element + 172))
    {
      AudioUnitParameterValue v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
      uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v8, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v9 = 1;
    }
    char v11 = 0;
    uint64_t v8 = 1;
  }
  while ((v12 & 1) != 0);
  AudioUnitParameterOptions v16 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDenoise *)((char *)this + 128), 0);
  v22[0] = ausdk::AUIOElement::PrepareBuffer(v16, a4);
  CFStringRef v17 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDenoise *)((char *)this + 128), 1u);
  uint64_t v18 = ausdk::AUIOElement::PrepareBuffer(v17, a4);
  uint64_t result = 0;
  v22[1] = v18;
  if ((v9 & 1) == 0)
  {
    uint64_t v19 = ausdk::AUScope::SafeGetElement(v10, 0);
    v21[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
    uint64_t v20 = ausdk::AUScope::SafeGetElement(v10, 1u);
    v21[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v20 + 144));
    return (*(uint64_t (**)(AUDenoise *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 2, v21, 2, v22);
  }
  return result;
}

uint64_t AUDenoise::ProcessMultipleBufferLists(AUDenoise *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7, double a8)
{
  int v10 = (int)a3;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  LODWORD(a8) = *((_DWORD *)this + 154);
  *((double *)this + 81) = *((double *)this + 81) + (double)*(unint64_t *)&a8 / *((double *)this + 78);
  uint64_t v12 = *((void *)this + 66);
  if (*((void *)this + 67) != v12)
  {
    AUDenoise::UpdateState((float32x2_t *)this);
    *((void *)this + 67) = v12;
  }
  uint64_t v13 = *((void *)this + 68);
  if (*((void *)this + 69) != v13)
  {
    if (*((_DWORD *)this + 158))
    {
      unint64_t v14 = 0;
      AudioUnitParameterValue v15 = (float *)((char *)this + 836);
      do
      {
        uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 568), v14);
        *(v15 - 4) = ausdk::AUElement::GetParameter(Element, 0x12u);
        CFStringRef v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 568), v14);
        *(v15 - 3) = ausdk::AUElement::GetParameter(v17, 0x13u);
        uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 568), v14);
        *(v15 - 2) = ausdk::AUElement::GetParameter(v18, 0x14u);
        uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 568), v14);
        *(v15 - 1) = ausdk::AUElement::GetParameter(v19, 0x15u);
        uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 568), v14);
        *AudioUnitParameterValue v15 = ausdk::AUElement::GetParameter(v20, 0x16u);
        v15 += 5;
        ++v14;
      }
      while (v14 < *((unsigned int *)this + 158));
    }
    *((void *)this + 69) = v13;
  }
  if (*((_DWORD *)this + 154) != v10) {
    return 4294956422;
  }
  UInt32 v21 = (int *)*a5;
  if (!*a5)
  {
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      unint64_t v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      unint64_t v29 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v61.uint64_t mNumberBuffers = 136315394;
      *(void *)(&v61.mNumberBuffers + 1) = "AUDenoise.cpp";
      LOWORD(v61.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v61.mBuffers[0].mDataByteSize + 2) = 1516;
      std::string v30 = "%25s:%-5d InputSignals cannot be NULL. It is a required input\n";
LABEL_42:
      _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v61, 0x12u);
    }
    return 4294956420;
  }
  int v22 = *v21;
  if (*v21 != *((_DWORD *)this + 158)) {
    return 4294956428;
  }
  AudioUnitParameterValue v23 = a5[1];
  if (!v23)
  {
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      unint64_t v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      unint64_t v29 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v61.uint64_t mNumberBuffers = 136315394;
      *(void *)(&v61.mNumberBuffers + 1) = "AUDenoise.cpp";
      LOWORD(v61.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v61.mBuffers[0].mDataByteSize + 2) = 1524;
      std::string v30 = "%25s:%-5d EchoEstimates cannot be NULL when Beam selection is not Off.\n";
      goto LABEL_42;
    }
    return 4294956420;
  }
  if (v23->mNumberBuffers != v22 || *a7 && (*a7)->mNumberBuffers != v22) {
    return 4294956428;
  }
  AudioUnitParameterUnit v24 = a7[1];
  if (v24)
  {
    if (v24->mNumberBuffers != v22) {
      return 4294956428;
    }
  }
  int v52 = 0;
  UInt32 v25 = (AudioDSP::Utility *)(2 * v10);
  *(void *)&v61.uint64_t mNumberBuffers = *((void *)this + 78);
  v61.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
  int v62 = 4;
  int v63 = v22;
  uint64_t v64 = 32;
  AudioDSP::Utility::DetectNonFinites(v25, v21, &v61, (const AudioStreamBasicDescription *)((char *)&v52 + 3), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v25, a5[1], &v61, (const AudioStreamBasicDescription *)((char *)&v52 + 2), v26);
  if (!*((unsigned char *)this + 560) && (!(HIBYTE(v52) | BYTE2(v52)) || !*((unsigned char *)this + 656)))
  {
    if (*((unsigned char *)this + 809))
    {
      if (*((_DWORD *)this + 158))
      {
        unint64_t v31 = 0;
        char v32 = 0;
        do
        {
          if (*((float *)this + 5 * v31 + 207) == 0.0)
          {
            float v33 = *((float *)this + 5 * v31 + 208);
            float v34 = *((float *)this + 203);
            float v35 = 1.0;
            if (v34 != 0.0) {
              float v35 = __exp10f(v34 / 10.0);
            }
            if (v33 > v35) {
              char v32 = 1;
            }
          }
          else
          {
            uint64_t v36 = *((unsigned int *)this + 154);
            if (v36)
            {
              uint64_t v37 = 0;
              float v39 = 0.0;
              do
              {
                mData = (float *)a5[1]->mBuffers[v31].mData;
                float v39 = v39
                    + (float)((float)(mData[(v36 + v37)] * mData[(v36 + v37)])
                            + (float)(mData[v37] * mData[v37]));
                ++v37;
              }
              while (v36 != v37);
            }
            else
            {
              float v39 = 0.0;
            }
            float v40 = *((float *)this + 204);
            float v41 = 1.0;
            if (v40 != 0.0) {
              float v41 = __exp10f(v40 / 10.0);
            }
            if (v39 > v41) {
              char v32 = 1;
            }
          }
          ++v31;
        }
        while (v31 < *((unsigned int *)this + 158));
      }
      else
      {
        char v32 = 0;
      }
      BOOL v42 = (v32 & 1) == 0;
    }
    else
    {
      BOOL v42 = 1;
    }
    int v43 = *((_DWORD *)this + 165);
    if (v43 == 3)
    {
      GuidedMWF::ProcessBufferList(*((GuidedMWF **)this + 145), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 808), v42);
    }
    else if (v43 == 2)
    {
      iPMWF_HRLS_vDSP::ProcessBufferList(*((iPMWF_HRLS_vDSP **)this + 144), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 808), v42);
    }
    else
    {
      PMWF_FAST_GS_vDSP::ProcessBufferList(*((PMWF_FAST_GS_vDSP **)this + 143), *a5, a5[1], *a7, a7[1], *((unsigned __int8 *)this + 808), v42);
    }
    if (!*((unsigned char *)this + 808)) {
      CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
    }
    int v44 = *((_DWORD *)this + 165);
    if (v44 != 3)
    {
      if (v44 == 2)
      {
        uint64_t v45 = *((void *)this + 144);
        float v53 = 0.0;
        vDSP_meanv(*(const float **)(v45 + 216), 1, &v53, *(unsigned int *)(v45 + 36));
        float v46 = v53;
      }
      else
      {
        float v46 = *(float *)(*((void *)this + 143) + 1520);
      }
      *((float *)this + 183) = v46;
    }
    uint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v47, 0x1Bu, *((float *)this + 183), 0);
    AudioDSP::Utility::DetectNonFinites(v25, *a7, &v61, (const AudioStreamBasicDescription *)((char *)&v52 + 1), v48);
    AudioDSP::Utility::DetectNonFinites(v25, a7[1], &v61, (const AudioStreamBasicDescription *)&v52, v49);
    if (!(BYTE1(v52) | v52) || !*((unsigned char *)this + 656)) {
      goto LABEL_95;
    }
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      unsigned __int8 v51 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope)
      {
LABEL_94:
        (*(void (**)(AUDenoise *))(*(void *)this + 64))(this);
        CopyBufferList(&(*a5)->mNumberBuffers, *a7);
        CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
        *((void *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
LABEL_95:
        AUDenoise::LogMaster((uint64_t)this, *a5, *a7, v50);
        return 0;
      }
    }
    else
    {
      unsigned __int8 v51 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      float v53 = 4.8153e-34;
      unint64_t v54 = "AUDenoise.cpp";
      __int16 v55 = 1024;
      int v56 = 1651;
      __int16 v57 = 1024;
      int v58 = BYTE1(v52);
      __int16 v59 = 1024;
      int v60 = v52;
      _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDenoise: (OutputSignals, PMWFLeeOut) is NOT finite: (%u, %u)\n", (uint8_t *)&v53, 0x1Eu);
    }
    goto LABEL_94;
  }
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  CopyBufferList(&a5[1]->mNumberBuffers, a7[1]);
  if (HIBYTE(v52) | BYTE2(v52))
  {
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      std::string v27 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        goto LABEL_68;
      }
    }
    else
    {
      std::string v27 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      float v53 = 4.8153e-34;
      unint64_t v54 = "AUDenoise.cpp";
      __int16 v55 = 1024;
      int v56 = 1563;
      __int16 v57 = 1024;
      int v58 = HIBYTE(v52);
      __int16 v59 = 1024;
      int v60 = BYTE2(v52);
      _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d AUDenoise: (InputSignals, EchoEstimates) is NOT finite: (%u, %u)\n", (uint8_t *)&v53, 0x1Eu);
    }
  }
LABEL_68:
  *((void *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  return 0;
}

void AUDenoise::UpdateState(float32x2_t *this)
{
  unsigned int v2 = (ausdk::AUScope *)&this[4];
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
  this[82].i32[1] = (int)ausdk::AUElement::GetParameter(Element, 0);
  unsigned int v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[83].f32[0] = ausdk::AUElement::GetParameter(v4, 1u);
  unsigned int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[83].f32[1] = ausdk::AUElement::GetParameter(v5, 2u);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[84].f32[0] = ausdk::AUElement::GetParameter(v6, 3u);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[84].f32[1] = ausdk::AUElement::GetParameter(v7, 4u);
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[85].f32[0] = ausdk::AUElement::GetParameter(v8, 5u);
  char v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[85].f32[1] = ausdk::AUElement::GetParameter(v9, 6u);
  int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[86].f32[0] = ausdk::AUElement::GetParameter(v10, 7u);
  char v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[86].f32[1] = ausdk::AUElement::GetParameter(v11, 8u);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[87].i32[0] = ausdk::AUElement::GetParameter(v12, 9u);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[87].i32[1] = ausdk::AUElement::GetParameter(v13, 0xAu);
  unint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[88].f32[0] = ausdk::AUElement::GetParameter(v14, 0xBu);
  AudioUnitParameterValue v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[88].f32[1] = ausdk::AUElement::GetParameter(v15, 0xCu);
  AudioUnitParameterOptions v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[89].f32[0] = ausdk::AUElement::GetParameter(v16, 0xDu);
  CFStringRef v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[89].f32[1] = ausdk::AUElement::GetParameter(v17, 0x17u);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[90].i32[0] = ausdk::AUElement::GetParameter(v18, 0x18u);
  uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[90].i8[4] = ausdk::AUElement::GetParameter(v19, 0x19u) != 0.0;
  uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[91].i32[0] = ausdk::AUElement::GetParameter(v20, 0x1Au);
  UInt32 v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[91].f32[1] = ausdk::AUElement::GetParameter(v21, 0x1Bu);
  int v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[92].f32[0] = ausdk::AUElement::GetParameter(v22, 0x1Cu);
  AudioUnitParameterValue v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[92].f32[1] = ausdk::AUElement::GetParameter(v23, 0x1Du);
  AudioUnitParameterUnit v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[94].i32[1] = (int)ausdk::AUElement::GetParameter(v24, 0x1Eu);
  UInt32 v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[95].i8[0] = ausdk::AUElement::GetParameter(v25, 0x1Fu) != 0.0;
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[95].i32[1] = (int)ausdk::AUElement::GetParameter(v26, 0x20u);
  std::string v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[96].f32[0] = ausdk::AUElement::GetParameter(v27, 0x21u);
  uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[96].f32[1] = ausdk::AUElement::GetParameter(v28, 0x22u);
  unint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[97].f32[0] = ausdk::AUElement::GetParameter(v29, 0x23u);
  std::string v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[97].f32[1] = ausdk::AUElement::GetParameter(v30, 0x24u);
  unint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[98].f32[0] = ausdk::AUElement::GetParameter(v31, 0x25u);
  char v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[98].f32[1] = ausdk::AUElement::GetParameter(v32, 0x26u);
  float v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[99].i32[0] = ausdk::AUElement::GetParameter(v33, 0x27u);
  float v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[99].i8[4] = ausdk::AUElement::GetParameter(v34, 0x28u) != 0.0;
  float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[100].i32[0] = (int)ausdk::AUElement::GetParameter(v35, 0x29u);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[100].i32[1] = (int)ausdk::AUElement::GetParameter(v36, 0x2Au);
  if (this[92].f32[0] == 0.0) {
    this[92].i32[0] = -1015414784;
  }
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[101].i8[0] = ausdk::AUElement::GetParameter(v37, 0xEu) != 0.0;
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[101].i8[1] = ausdk::AUElement::GetParameter(v38, 0xFu) != 0.0;
  float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[101].f32[1] = ausdk::AUElement::GetParameter(v39, 0x10u);
  float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  this[102].f32[0] = ausdk::AUElement::GetParameter(v40, 0x11u);
  float v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(v41, 1u);
  float v43 = 0.0;
  float v44 = 0.0;
  if (Parameter != 0.0)
  {
    float v45 = *(double *)&this[78];
    float v44 = expf((float)((float)-(float)this[77].u32[0] / v45) / Parameter);
  }
  this[93].f32[0] = v44;
  float v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v47 = ausdk::AUElement::GetParameter(v46, 2u);
  if (v47 != 0.0)
  {
    float v48 = *(double *)&this[78];
    float v43 = expf((float)((float)-(float)this[77].u32[0] / v48) / v47);
  }
  this[93].f32[1] = v43;
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v51 = ausdk::AUElement::GetParameter(v49, 3u);
  float v52 = 0.0;
  if (v51 != 0.0)
  {
    float v53 = *(double *)&this[78];
    float v52 = expf((float)((float)-(float)this[77].u32[0] / v53) / v51);
  }
  this[94].f32[0] = v52;
  if (!*(void *)&this[156] && this[92].f32[1] > 0.0)
  {
    caulk::concurrent::messenger::shared_logging_priority(v50);
    operator new();
  }
  __int32 v54 = this[82].i32[1];
  if (v54 == 3)
  {
    if (this[145])
    {
LABEL_33:
      uint64_t v69 = (float *)this[145];
      float v70 = this[93].f32[0];
      v69[2] = v70;
      float v71 = 1.0;
      v69[13] = sqrtf(1.0 - v70);
      float v72 = this[88].f32[1];
      uint64_t v73 = v69;
      if (v72 != 0.0)
      {
        float v71 = __exp10f(v72 / 20.0);
        uint64_t v73 = (float *)this[145];
      }
      v69[3] = v71;
      v73[6] = this[100].f32[0];
      return;
    }
  }
  else if (v54 == 2)
  {
    if (this[144])
    {
LABEL_22:
      float32x2_t v55 = this[144];
      float v56 = this[93].f32[0];
      float v57 = *(float *)(*(void *)&v55 + 72);
      float v58 = this[93].f32[1];
      *(float *)(*(void *)&v55 + 8) = v56;
      *(float *)(*(void *)&v55 + 12) = v58;
      *(float *)(*(void *)&v55 + 76) = v57 - v56;
      *(float *)(*(void *)&v55 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v57 - v58;
      *(_DWORD *)(*(void *)&v55 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = this[84].i32[1];
      float v59 = this[85].f32[0];
      if (v59 != 0.0) {
        __exp10f(v59 / 10.0);
      }
      if (!*(_DWORD *)(*(void *)&v55 + 84))
      {
        float __A = 1.0 / sqrtf(*(float *)(*(void *)&v55 + 24));
        if (*(_DWORD *)(*(void *)&v55 + 32))
        {
          unsigned int v60 = 0;
          do
          {
            vDSP_vfill(&__A, (float *)(*(void *)(*(void *)&v55 + 168)+ 4 * (*(_DWORD *)(*(void *)&v55 + 36) + *(_DWORD *)(*(void *)&v55 + 40)) * v60), 1, *(unsigned int *)(*(void *)&v55 + 36));
            vDSP_vfill((const float *)(*(void *)&v55 + 24), (float *)(*(void *)(*(void *)&v55 + 696)+ 4 * (*(_DWORD *)(*(void *)&v55 + 36) + *(_DWORD *)(*(void *)&v55 + 40)) * v60), 1, *(unsigned int *)(*(void *)&v55 + 36));
            vDSP_vfill((const float *)(*(void *)&v55 + 24), (float *)(*(void *)(*(void *)&v55 + 744)+ 4 * (*(_DWORD *)(*(void *)&v55 + 36) + *(_DWORD *)(*(void *)&v55 + 40)) * v60++), 1, *(unsigned int *)(*(void *)&v55 + 36));
          }
          while (v60 < *(_DWORD *)(*(void *)&v55 + 32));
        }
      }
      float32x2_t v61 = this[144];
      unsigned int v62 = this[77].u32[0];
      double v63 = (float)*(void *)&this[78] / ((float)v62 + (float)v62);
      *(float *)&double v63 = v63;
      *(uint32x2_t *)(*(void *)&v61 + 108) = vmin_u32(vcvt_u32_f32(vrnda_f32(vabs_f32(vdiv_f32(this[96], (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v63, 0))))), (uint32x2_t)vdup_n_s32(v62));
      *(float32x2_t *)(*(void *)&v61 + 116) = this[97];
      *(_DWORD *)(*(void *)&v61 + 124) = this[98].i32[0];
      float v64 = this[98].f32[1];
      float v65 = 1.0;
      float32x2_t v66 = v61;
      float v67 = 1.0;
      if (v64 != 0.0)
      {
        float v67 = __exp10f(v64 / 10.0);
        float32x2_t v66 = this[144];
      }
      *(float *)(*(void *)&v61 + 128) = v67;
      float v68 = this[88].f32[1];
      if (v68 != 0.0) {
        float v65 = __exp10f(v68 / 20.0);
      }
      *(float *)(*(void *)&v66 + 16) = v65;
      return;
    }
  }
  else if (this[143])
  {
    goto LABEL_20;
  }
  AUDenoise::InitializePMWFClasses((AUDenoise *)this);
  __int32 v54 = this[82].i32[1];
LABEL_20:
  if (v54 == 3) {
    goto LABEL_33;
  }
  if (v54 == 2) {
    goto LABEL_22;
  }
  float32x2_t v74 = this[143];
  float v75 = this[93].f32[0];
  float v76 = *(float *)(*(void *)&v74 + 76);
  *(float *)(*(void *)&v74 + 152) = v76 / v75;
  *(float *)(*(void *)&v74 + 156) = v76 / (float)(v76 - v75);
  float v77 = this[93].f32[1];
  *(float *)(*(void *)&v74 + 8) = v75;
  *(float *)(*(void *)&v74 + 12) = v77;
  *(float *)(*(void *)&v74 + 96) = v76 - v75;
  *(float *)(*(void *)&v74 + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v76 - v77;
  float v78 = this[94].f32[0];
  *(float *)(*(void *)&v74 + 104) = v76 - v78;
  __int32 v79 = this[84].i32[1];
  *(float *)(*(void *)&v74 + 16) = v78;
  *(_DWORD *)(*(void *)&v74 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v79;
  float v80 = this[85].f32[0];
  float v81 = 1.0;
  if (v80 != 0.0) {
    float v81 = __exp10f(v80 / 10.0);
  }
  double v82 = (float32x2_t *)((char *)this + 684);
  if (!*(_DWORD *)(*(void *)&v74 + 148))
  {
    *(float *)(*(void *)&v74 + 24) = v81;
    if (*(_DWORD *)(*(void *)&v74 + 48))
    {
      uint64_t v83 = 0;
      unint64_t v84 = 0;
      do
      {
        vDSP_vfill((const float *)(*(void *)&v74 + 24), *(float **)(*(void *)(*(void *)&v74 + 200) + v83), 1, *(unsigned int *)(*(void *)&v74 + 52));
        vDSP_vfill((const float *)(*(void *)&v74 + 24), *(float **)(*(void *)(*(void *)&v74 + 224) + v83), 1, *(unsigned int *)(*(void *)&v74 + 52));
        ++v84;
        v83 += 24;
      }
      while (v84 < *(unsigned int *)(*(void *)&v74 + 48));
    }
  }
  float32x2_t v85 = this[143];
  uint64_t v86 = (uint64_t)*v82;
  *(float *)(*(void *)&v85 + 92) = (float)(*(float *)(*(void *)&v85 + 76) - COERCE_FLOAT(*v82))
                                     / COERCE_FLOAT(*v82);
  *(void *)(*(void *)&v85 + 28) = v86;
  *(_DWORD *)(*(void *)&v85 + 36) = this[86].i32[1];
  float v87 = this[92].f32[0];
  float v88 = 1.0;
  if (v87 != 0.0) {
    float v88 = __exp10f(v87 / 10.0);
  }
  *(float *)(*(void *)&v85 + 44) = v88;
  __int32 v89 = this[82].i32[1];
  if (v89)
  {
    float32x2_t v90 = this[143];
    if (v89 == 1) {
      *(_DWORD *)(*(void *)&v90 + 108) = 1;
    }
  }
  else
  {
    float32x2_t v90 = this[143];
    *(_DWORD *)(*(void *)&v90 + 108) = 0;
  }
  float v91 = this[88].f32[0];
  float v92 = 1.0;
  float32x2_t v93 = v90;
  float v94 = 1.0;
  if (v91 != 0.0)
  {
    float v94 = __exp10f(v91 / 10.0);
    float32x2_t v93 = this[143];
  }
  *(float *)(*(void *)&v90 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v94;
  float v95 = this[88].f32[1];
  uint64_t v96 = (float32x2_t *)v93;
  if (v95 != 0.0)
  {
    float v92 = __exp10f(v95 / 20.0);
    uint64_t v96 = (float32x2_t *)this[143];
  }
  *(float *)(*(void *)&v93 + 124) = v92;
  v96[16] = this[89];
  v96[17].i32[0] = this[90].i32[0];
  v96[17].i8[4] = this[90].i8[4];
  if (!v96[18].i32[1]) {
    v96[18].i32[0] = this[91].i32[0];
  }
}

void sub_1BB5A5730(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t AUDenoise::LogMaster(uint64_t this, const AudioBufferList *a2, const AudioBufferList *a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(this + 616);
  double v4 = *(double *)(this + 640) + (double)*(unint64_t *)&a4 / *(double *)(this + 624);
  if (v4 < 0.0) {
    double v4 = 0.0;
  }
  *(double *)(this + 64std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
  float v5 = *(float *)(this + 740);
  if (v5 > 0.0 && v4 > v5)
  {
    uint64_t v6 = this;
    unsigned int v7 = *(caulk::concurrent::messenger **)(this + 1248);
    if (v7)
    {
      int v10 = (void *)MEMORY[0x1E4FB7E90];
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(void *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 16) = 0;
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v6 + 640);
      *(void *)uint64_t v11 = &unk_1F14B7088;
      caulk::concurrent::messenger::enqueue(v7, (caulk::concurrent::message *)v11);
      if (*(_DWORD *)(v6 + 632))
      {
        unint64_t v12 = 0;
        p_mData = &a3->mBuffers[0].mData;
        unint64_t v14 = &a2->mBuffers[0].mData;
        do
        {
          uint64_t __C = 0;
          float v25 = 0.0;
          vDSP_svesq((const float *)*v14, 1, (float *)&__C + 1, (2 * *(_DWORD *)(v6 + 616)));
          vDSP_svesq((const float *)*p_mData, 1, (float *)&__C, (2 * *(_DWORD *)(v6 + 616)));
          AudioUnitParameterOptions v16 = (const float *)*v14;
          v14 += 2;
          AudioUnitParameterValue v15 = v16;
          CFStringRef v17 = (const float *)*p_mData;
          p_mData += 2;
          vDSP_distancesq(v15, 1, v17, 1, &v25, (2 * *(_DWORD *)(v6 + 616)));
          float v18 = *(float *)&__C + 2.2204e-16;
          float v19 = log10f((float)(*(float *)&__C + 2.2204e-16) / (float)(v25 + 2.2204e-16)) * 10.0;
          float v20 = log10f(v18 / (float)(*((float *)&__C + 1) + 2.2204e-16)) * 10.0;
          UInt32 v21 = *(caulk::concurrent::messenger **)(v6 + 1248);
          uint64_t v22 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v10 + 16))(*v10, 40, 8);
          *(_DWORD *)(v22 + 16) = 0;
          *(_DWORD *)(v22 + 24) = v12;
          *(float *)(v22 + 28) = v19;
          *(float *)(v22 + 32) = v20;
          *(void *)uint64_t v22 = &unk_1F14B70B0;
          *(void *)(v22 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v21, (caulk::concurrent::message *)v22);
          ++v12;
        }
        while (v12 < *(unsigned int *)(v6 + 632));
      }
      AudioUnitParameterValue v23 = *(caulk::concurrent::messenger **)(v6 + 1248);
      uint64_t v24 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v10 + 16))(*v10, 24, 8);
      *(_DWORD *)(v24 + 16) = 0;
      *(void *)uint64_t v24 = &unk_1F14B70D8;
      *(void *)(v24 + 8) = 0;
      this = caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v24);
      *(void *)(v6 + 64std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    }
  }
  return this;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (caulk::concurrent::message *)a1;
  int v1 = *(_DWORD *)(a1 + 24);
  float v2 = *(float *)(a1 + 28);
  float v3 = *(float *)(a1 + 32);
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
  }
  if (AUDenoiseLogScope(void)::scope)
  {
    double v4 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(void *)AUDenoiseLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
    }
  }
  else
  {
    double v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    uint64_t v8 = "AUDenoise.cpp";
    __int16 v9 = 1024;
    int v10 = 1706;
    __int16 v11 = 1024;
    int v12 = v1;
    __int16 v13 = 2048;
    double v14 = v2;
    __int16 v15 = 2048;
    double v16 = v3;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: SNR measure in [dB] for mic-channel %u , internal: %f (dB), external: %f (dB)\n", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(&v6);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_1,unsigned int &,float &,float &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::perform(caulk::concurrent::message *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  float v3 = a1;
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
  }
  if (AUDenoiseLogScope(void)::scope)
  {
    int v1 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(void *)AUDenoiseLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
    }
  }
  else
  {
    int v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    float v5 = "AUDenoise.cpp";
    __int16 v6 = 1024;
    int v7 = 1711;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: ********* Logging ends *********\n", buf, 0x12u);
  }
  return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(&v3);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  float v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 24, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_2>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::perform(caulk::concurrent::message *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  float v5 = a1;
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v1 = *((void *)a1 + 4);
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
  }
  if (AUDenoiseLogScope(void)::scope)
  {
    float v3 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(void *)AUDenoiseLogScope(void)::scope) {
      return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
    }
  }
  else
  {
    float v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    int v7 = "AUDenoise.cpp";
    __int16 v8 = 1024;
    int v9 = 1690;
    __int16 v10 = 2048;
    uint64_t v11 = v2;
    __int16 v12 = 2048;
    uint64_t v13 = v1;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: ********* Logging begins *********\nAUDenoise: logging (period, timestamp): (%f, %f) (s)\n", buf, 0x26u);
  }
  return caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(&v5);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUDenoise::LogMaster(AudioBufferList const&,AudioBufferList const&)::$_0,double &,double &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

void ___ZL17AUDenoiseLogScopev_block_invoke()
{
}

void AUDenoise::InitializePMWFClasses(AUDenoise *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
  }
  if (AUDenoiseLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(void *)AUDenoiseLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "AUDenoise.cpp";
    __int16 v9 = 1024;
    int v10 = 1899;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Initialize PMWF Classes.\n", (uint8_t *)buf, 0x12u);
  }
LABEL_9:
  float v3 = *((float *)this + 170);
  if (v3 != 0.0) {
    __exp10f(v3 / 10.0);
  }
  float v4 = *((float *)this + 184);
  if (v4 != 0.0) {
    __exp10f(v4 / 10.0);
  }
  float v5 = *((float *)this + 176);
  if (v5 != 0.0) {
    __exp10f(v5 / 10.0);
  }
  float v6 = *((float *)this + 177);
  if (v6 != 0.0) {
    __exp10f(v6 / 20.0);
  }
  if (*((void *)this + 143)) {
    std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 143, 0);
  }
  if (*((void *)this + 144)) {
    std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((void *)this + 144, 0);
  }
  switch(*((_DWORD *)this + 165))
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      float v7 = *((float *)this + 197);
      if (v7 != 0.0) {
        __exp10f(v7 / 10.0);
      }
      operator new();
    case 3:
      operator new();
    default:
      *((void *)this + 148) = *((void *)this + 147);
      std::vector<float>::resize((uint64_t)this + 1176, (*((_DWORD *)this + 154) + 1));
      *((void *)this + 151) = *((void *)this + 150);
      std::vector<float>::resize((uint64_t)this + 1200, (*((_DWORD *)this + 154) + 1));
      *((void *)this + 154) = *((void *)this + 153);
      std::vector<float>::resize((uint64_t)this + 1224, ((2 * *((_DWORD *)this + 154) + 2) * *((_DWORD *)this + 158)));
      *((_OWORD *)this + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
      return;
  }
}

void sub_1BB5A76AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,uint64_t *a33,void *a34,uint64_t *a35,void **a36,void **a37,void **a38,void **a39)
{
  double v50 = *v47;
  if (*v47)
  {
    v46[44] = v50;
    operator delete(v50);
  }
  float v51 = *v45;
  if (*v45)
  {
    v46[41] = v51;
    operator delete(v51);
  }
  float v52 = *v44;
  if (*v44)
  {
    v46[38] = v52;
    operator delete(v52);
  }
  float v53 = *v40;
  if (*v40)
  {
    v46[35] = v53;
    operator delete(v53);
  }
  __int32 v54 = *a12;
  if (*a12)
  {
    v46[32] = v54;
    operator delete(v54);
  }
  float32x2_t v55 = *v41;
  if (*v41)
  {
    v46[29] = v55;
    operator delete(v55);
  }
  float v56 = *a13;
  if (*a13)
  {
    v46[26] = v56;
    operator delete(v56);
  }
  float v57 = *a14;
  if (*a14)
  {
    v46[23] = v57;
    operator delete(v57);
  }
  *(void *)(v48 - 192) = v43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  *(void *)(v48 - 192) = a15;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  *(void *)(v48 - 192) = a16;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  *(void *)(v48 - 192) = a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 192));
  if (*a18) {
    operator delete(*a18);
  }
  float v58 = *a19;
  if (*a19)
  {
    v46[4] = v58;
    operator delete(v58);
  }
  MEMORY[0x1C185D370](v46, 0x10B0C400BE2CFE6);
  std::unique_ptr<InverseWithGramSchmidt>::reset[abi:ne180100](a34, 0);
  std::unique_ptr<InverseWithHRLS>::reset[abi:ne180100](a33, 0);
  std::unique_ptr<InverseWithMoorePenrose>::reset[abi:ne180100](a35, 0);
  if (*a20) {
    operator delete(*a20);
  }
  float v59 = *a21;
  if (*a21)
  {
    v39[57] = v59;
    operator delete(v59);
  }
  unsigned int v60 = *a22;
  if (*a22)
  {
    v39[54] = v60;
    operator delete(v60);
  }
  float32x2_t v61 = *a23;
  if (*a23)
  {
    v39[51] = v61;
    operator delete(v61);
  }
  unsigned int v62 = *a36;
  if (*a36)
  {
    v39[48] = v62;
    operator delete(v62);
  }
  double v63 = *a37;
  if (*a37)
  {
    v39[45] = v63;
    operator delete(v63);
  }
  float v64 = *a24;
  if (*a24)
  {
    v39[42] = v64;
    operator delete(v64);
  }
  float v65 = *a25;
  if (*a25)
  {
    v39[39] = v65;
    operator delete(v65);
  }
  float32x2_t v66 = *a26;
  if (*a26)
  {
    v39[36] = v66;
    operator delete(v66);
  }
  float v67 = *a27;
  if (*a27)
  {
    v39[33] = v67;
    operator delete(v67);
  }
  float v68 = *a28;
  if (*a28)
  {
    v39[30] = v68;
    operator delete(v68);
  }
  uint64_t v69 = *a29;
  if (*a29)
  {
    v39[27] = v69;
    operator delete(v69);
  }
  float v70 = *a30;
  if (*a30)
  {
    v39[24] = v70;
    operator delete(v70);
  }
  float v71 = *a31;
  if (*a31)
  {
    v39[21] = v71;
    operator delete(v71);
  }
  float v72 = *a32;
  if (*a32)
  {
    v39[18] = v72;
    operator delete(v72);
  }
  uint64_t v73 = *v42;
  if (*v42)
  {
    v39[15] = v73;
    operator delete(v73);
  }
  float32x2_t v74 = *a38;
  if (*a38)
  {
    v39[12] = v74;
    operator delete(v74);
  }
  float v75 = *a39;
  if (*a39)
  {
    v39[9] = v75;
    operator delete(v75);
  }
  MEMORY[0x1C185D370](v39, 0x10B0C40D44E31FDLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    float v3 = *(void **)(v2 + 1496);
    if (v3)
    {
      *(void *)(v2 + 1504) = v3;
      operator delete(v3);
    }
    float v4 = *(void **)(v2 + 1472);
    if (v4)
    {
      *(void *)(v2 + 148std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
      operator delete(v4);
    }
    float v5 = *(void **)(v2 + 1448);
    if (v5)
    {
      *(void *)(v2 + 1456) = v5;
      operator delete(v5);
    }
    float v6 = *(void **)(v2 + 1424);
    if (v6)
    {
      *(void *)(v2 + 1432) = v6;
      operator delete(v6);
    }
    float v7 = *(void **)(v2 + 1400);
    if (v7)
    {
      *(void *)(v2 + 1408) = v7;
      operator delete(v7);
    }
    __int16 v8 = *(void **)(v2 + 1376);
    if (v8)
    {
      *(void *)(v2 + 1384) = v8;
      operator delete(v8);
    }
    __int16 v9 = *(void **)(v2 + 1352);
    if (v9)
    {
      *(void *)(v2 + 136std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9;
      operator delete(v9);
    }
    int v10 = *(void **)(v2 + 1328);
    if (v10)
    {
      *(void *)(v2 + 1336) = v10;
      operator delete(v10);
    }
    uint64_t v11 = *(void **)(v2 + 1304);
    if (v11)
    {
      *(void *)(v2 + 1312) = v11;
      operator delete(v11);
    }
    __int16 v12 = *(void **)(v2 + 1280);
    if (v12)
    {
      *(void *)(v2 + 1288) = v12;
      operator delete(v12);
    }
    uint64_t v13 = *(void **)(v2 + 1256);
    if (v13)
    {
      *(void *)(v2 + 1264) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void **)(v2 + 1232);
    if (v14)
    {
      *(void *)(v2 + 124std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v14;
      operator delete(v14);
    }
    __int16 v15 = *(void **)(v2 + 1208);
    if (v15)
    {
      *(void *)(v2 + 1216) = v15;
      operator delete(v15);
    }
    double v16 = *(void **)(v2 + 1184);
    if (v16)
    {
      *(void *)(v2 + 1192) = v16;
      operator delete(v16);
    }
    uint64_t v17 = *(void **)(v2 + 1160);
    if (v17)
    {
      *(void *)(v2 + 1168) = v17;
      operator delete(v17);
    }
    float v18 = *(void **)(v2 + 1136);
    if (v18)
    {
      *(void *)(v2 + 1144) = v18;
      operator delete(v18);
    }
    float v19 = *(void **)(v2 + 1112);
    if (v19)
    {
      *(void *)(v2 + 112std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v19;
      operator delete(v19);
    }
    float v20 = *(void **)(v2 + 1088);
    if (v20)
    {
      *(void *)(v2 + 1096) = v20;
      operator delete(v20);
    }
    UInt32 v21 = *(void **)(v2 + 1064);
    if (v21)
    {
      *(void *)(v2 + 1072) = v21;
      operator delete(v21);
    }
    uint64_t v22 = *(void **)(v2 + 1040);
    if (v22)
    {
      *(void *)(v2 + 1048) = v22;
      operator delete(v22);
    }
    AudioUnitParameterValue v23 = *(void **)(v2 + 1016);
    if (v23)
    {
      *(void *)(v2 + 1024) = v23;
      operator delete(v23);
    }
    uint64_t v24 = *(void **)(v2 + 992);
    if (v24)
    {
      *(void *)(v2 + 100std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v24;
      operator delete(v24);
    }
    float v25 = *(void **)(v2 + 968);
    if (v25)
    {
      *(void *)(v2 + 976) = v25;
      operator delete(v25);
    }
    uint64_t v26 = *(void **)(v2 + 928);
    if (v26)
    {
      *(void *)(v2 + 936) = v26;
      operator delete(v26);
    }
    std::string v27 = *(void **)(v2 + 904);
    if (v27)
    {
      *(void *)(v2 + 912) = v27;
      operator delete(v27);
    }
    uint64_t v28 = *(void **)(v2 + 880);
    if (v28)
    {
      *(void *)(v2 + 888) = v28;
      operator delete(v28);
    }
    unint64_t v29 = *(void **)(v2 + 856);
    if (v29)
    {
      *(void *)(v2 + 864) = v29;
      operator delete(v29);
    }
    std::string v30 = *(void **)(v2 + 832);
    if (v30)
    {
      *(void *)(v2 + 84std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v30;
      operator delete(v30);
    }
    unint64_t v31 = *(void **)(v2 + 808);
    if (v31)
    {
      *(void *)(v2 + 816) = v31;
      operator delete(v31);
    }
    char v32 = *(void **)(v2 + 784);
    if (v32)
    {
      *(void *)(v2 + 792) = v32;
      operator delete(v32);
    }
    float v33 = *(void **)(v2 + 760);
    if (v33)
    {
      *(void *)(v2 + 768) = v33;
      operator delete(v33);
    }
    float v34 = *(void **)(v2 + 736);
    if (v34)
    {
      *(void *)(v2 + 744) = v34;
      operator delete(v34);
    }
    float v35 = *(void **)(v2 + 712);
    if (v35)
    {
      *(void *)(v2 + 72std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v35;
      operator delete(v35);
    }
    uint64_t v36 = *(void **)(v2 + 688);
    if (v36)
    {
      *(void *)(v2 + 696) = v36;
      operator delete(v36);
    }
    uint64_t v37 = *(void **)(v2 + 664);
    if (v37)
    {
      *(void *)(v2 + 672) = v37;
      operator delete(v37);
    }
    uint64_t v38 = *(void **)(v2 + 640);
    if (v38)
    {
      *(void *)(v2 + 648) = v38;
      operator delete(v38);
    }
    float v39 = *(void **)(v2 + 616);
    if (v39)
    {
      *(void *)(v2 + 624) = v39;
      operator delete(v39);
    }
    float v40 = *(void **)(v2 + 592);
    if (v40)
    {
      *(void *)(v2 + 60std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v40;
      operator delete(v40);
    }
    float v41 = *(void **)(v2 + 568);
    if (v41)
    {
      *(void *)(v2 + 576) = v41;
      operator delete(v41);
    }
    BOOL v42 = *(void **)(v2 + 544);
    if (v42)
    {
      *(void *)(v2 + 552) = v42;
      operator delete(v42);
    }
    uint64_t v43 = *(void **)(v2 + 520);
    if (v43)
    {
      *(void *)(v2 + 528) = v43;
      operator delete(v43);
    }
    float v44 = *(void **)(v2 + 496);
    if (v44)
    {
      *(void *)(v2 + 504) = v44;
      operator delete(v44);
    }
    float v45 = *(void **)(v2 + 472);
    if (v45)
    {
      *(void *)(v2 + 48std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v45;
      operator delete(v45);
    }
    float v46 = *(void **)(v2 + 448);
    if (v46)
    {
      *(void *)(v2 + 456) = v46;
      operator delete(v46);
    }
    float v47 = *(void **)(v2 + 416);
    if (v47)
    {
      *(void *)(v2 + 424) = v47;
      operator delete(v47);
    }
    uint64_t v48 = *(void **)(v2 + 392);
    if (v48)
    {
      *(void *)(v2 + 40std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v48;
      operator delete(v48);
    }
    double v50 = (void **)(v2 + 368);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    double v50 = (void **)(v2 + 344);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    double v50 = (void **)(v2 + 320);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    double v50 = (void **)(v2 + 296);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    double v50 = (void **)(v2 + 272);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    double v50 = (void **)(v2 + 248);
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v50);
    double v50 = (void **)(v2 + 224);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    double v50 = (void **)(v2 + 200);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v50);
    uint64_t v49 = *(void **)(v2 + 176);
    if (v49) {
      operator delete(v49);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    float v3 = (void *)v2[102];
    if (v3)
    {
      v2[103] = v3;
      operator delete(v3);
    }
    float v4 = (void *)v2[99];
    if (v4)
    {
      v2[100] = v4;
      operator delete(v4);
    }
    float v5 = (void *)v2[96];
    if (v5)
    {
      v2[97] = v5;
      operator delete(v5);
    }
    float v6 = (void *)v2[93];
    if (v6)
    {
      v2[94] = v6;
      operator delete(v6);
    }
    float v7 = (void *)v2[90];
    if (v7)
    {
      v2[91] = v7;
      operator delete(v7);
    }
    __int16 v8 = (void *)v2[87];
    if (v8)
    {
      v2[88] = v8;
      operator delete(v8);
    }
    __int16 v9 = (void *)v2[84];
    if (v9)
    {
      v2[85] = v9;
      operator delete(v9);
    }
    int v10 = (void *)v2[81];
    if (v10)
    {
      v2[82] = v10;
      operator delete(v10);
    }
    uint64_t v11 = (void *)v2[78];
    if (v11)
    {
      v2[79] = v11;
      operator delete(v11);
    }
    __int16 v12 = (void *)v2[75];
    if (v12)
    {
      v2[76] = v12;
      operator delete(v12);
    }
    uint64_t v13 = (void *)v2[72];
    if (v13)
    {
      v2[73] = v13;
      operator delete(v13);
    }
    uint64_t v14 = (void *)v2[69];
    if (v14)
    {
      v2[70] = v14;
      operator delete(v14);
    }
    __int16 v15 = (void *)v2[66];
    if (v15)
    {
      v2[67] = v15;
      operator delete(v15);
    }
    double v16 = (void *)v2[63];
    if (v16)
    {
      v2[64] = v16;
      operator delete(v16);
    }
    uint64_t v17 = (void *)v2[60];
    if (v17)
    {
      v2[61] = v17;
      operator delete(v17);
    }
    float v18 = (void *)v2[57];
    if (v18)
    {
      v2[58] = v18;
      operator delete(v18);
    }
    float v19 = (void *)v2[54];
    if (v19)
    {
      v2[55] = v19;
      operator delete(v19);
    }
    float v20 = (void *)v2[51];
    if (v20)
    {
      v2[52] = v20;
      operator delete(v20);
    }
    UInt32 v21 = (void *)v2[48];
    if (v21)
    {
      v2[49] = v21;
      operator delete(v21);
    }
    uint64_t v22 = (void *)v2[45];
    if (v22)
    {
      v2[46] = v22;
      operator delete(v22);
    }
    AudioUnitParameterValue v23 = (void *)v2[42];
    if (v23)
    {
      v2[43] = v23;
      operator delete(v23);
    }
    uint64_t v24 = (void *)v2[39];
    if (v24)
    {
      v2[40] = v24;
      operator delete(v24);
    }
    float v25 = (void *)v2[36];
    if (v25)
    {
      v2[37] = v25;
      operator delete(v25);
    }
    uint64_t v26 = (void *)v2[33];
    if (v26)
    {
      v2[34] = v26;
      operator delete(v26);
    }
    std::string v27 = (void *)v2[30];
    if (v27)
    {
      v2[31] = v27;
      operator delete(v27);
    }
    uint64_t v28 = (void *)v2[27];
    if (v28)
    {
      v2[28] = v28;
      operator delete(v28);
    }
    unint64_t v29 = (void *)v2[24];
    if (v29)
    {
      v2[25] = v29;
      operator delete(v29);
    }
    std::string v30 = (void *)v2[21];
    if (v30)
    {
      v2[22] = v30;
      operator delete(v30);
    }
    unint64_t v31 = (void *)v2[18];
    if (v31)
    {
      v2[19] = v31;
      operator delete(v31);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *std::unique_ptr<GuidedMWF>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<InverseWithGramSchmidt>::reset[abi:ne180100](v2 + 65, 0);
    std::unique_ptr<InverseWithHRLS>::reset[abi:ne180100](v2 + 64, 0);
    std::unique_ptr<InverseWithMoorePenrose>::reset[abi:ne180100](v2 + 63, 0);
    float v3 = (void *)v2[60];
    if (v3) {
      operator delete(v3);
    }
    float v4 = (void *)v2[56];
    if (v4)
    {
      v2[57] = v4;
      operator delete(v4);
    }
    float v5 = (void *)v2[53];
    if (v5)
    {
      v2[54] = v5;
      operator delete(v5);
    }
    float v6 = (void *)v2[50];
    if (v6)
    {
      v2[51] = v6;
      operator delete(v6);
    }
    float v7 = (void *)v2[47];
    if (v7)
    {
      v2[48] = v7;
      operator delete(v7);
    }
    __int16 v8 = (void *)v2[44];
    if (v8)
    {
      v2[45] = v8;
      operator delete(v8);
    }
    __int16 v9 = (void *)v2[41];
    if (v9)
    {
      v2[42] = v9;
      operator delete(v9);
    }
    int v10 = (void *)v2[38];
    if (v10)
    {
      v2[39] = v10;
      operator delete(v10);
    }
    uint64_t v11 = (void *)v2[35];
    if (v11)
    {
      v2[36] = v11;
      operator delete(v11);
    }
    __int16 v12 = (void *)v2[32];
    if (v12)
    {
      v2[33] = v12;
      operator delete(v12);
    }
    uint64_t v13 = (void *)v2[29];
    if (v13)
    {
      v2[30] = v13;
      operator delete(v13);
    }
    uint64_t v14 = (void *)v2[26];
    if (v14)
    {
      v2[27] = v14;
      operator delete(v14);
    }
    __int16 v15 = (void *)v2[23];
    if (v15)
    {
      v2[24] = v15;
      operator delete(v15);
    }
    double v16 = (void *)v2[20];
    if (v16)
    {
      v2[21] = v16;
      operator delete(v16);
    }
    uint64_t v17 = (void *)v2[17];
    if (v17)
    {
      v2[18] = v17;
      operator delete(v17);
    }
    float v18 = (void *)v2[14];
    if (v18)
    {
      v2[15] = v18;
      operator delete(v18);
    }
    float v19 = (void *)v2[11];
    if (v19)
    {
      v2[12] = v19;
      operator delete(v19);
    }
    float v20 = (void *)v2[8];
    if (v20)
    {
      v2[9] = v20;
      operator delete(v20);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *std::unique_ptr<InverseWithGramSchmidt>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    if (getMatrixUtilityLog(void)::onceToken != -1) {
      dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_37670);
    }
    float v3 = getMatrixUtilityLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v14 = 134217984;
      *(void *)&v14[4] = v2;
      _os_log_debug_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "[%p] destructed", v14, 0xCu);
    }
    float v4 = (void *)v2[43];
    if (v4)
    {
      v2[44] = v4;
      operator delete(v4);
    }
    float v5 = (void *)v2[40];
    if (v5)
    {
      v2[41] = v5;
      operator delete(v5);
    }
    float v6 = (void *)v2[37];
    if (v6)
    {
      v2[38] = v6;
      operator delete(v6);
    }
    float v7 = (void *)v2[34];
    if (v7)
    {
      v2[35] = v7;
      operator delete(v7);
    }
    __int16 v8 = (void *)v2[31];
    if (v8)
    {
      v2[32] = v8;
      operator delete(v8);
    }
    __int16 v9 = (void *)v2[28];
    if (v9)
    {
      v2[29] = v9;
      operator delete(v9);
    }
    int v10 = (void *)v2[25];
    if (v10)
    {
      v2[26] = v10;
      operator delete(v10);
    }
    uint64_t v11 = (void *)v2[22];
    if (v11)
    {
      v2[23] = v11;
      operator delete(v11);
    }
    *(void *)uint64_t v14 = v2 + 19;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    *(void *)uint64_t v14 = v2 + 16;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    *(void *)uint64_t v14 = v2 + 13;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    *(void *)uint64_t v14 = v2 + 10;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    __int16 v12 = (void *)v2[7];
    if (v12) {
      operator delete(v12);
    }
    uint64_t v13 = (void *)v2[3];
    if (v13)
    {
      v2[4] = v13;
      operator delete(v13);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<InverseWithHRLS>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (getMatrixUtilityLog(void)::onceToken != -1) {
      dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_12636);
    }
    float v3 = getMatrixUtilityLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 134217984;
      uint64_t v13 = v2;
      _os_log_debug_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "[%p] destructed", (uint8_t *)&v12, 0xCu);
    }
    float v4 = *(void **)(v2 + 168);
    if (v4)
    {
      *(void *)(v2 + 176) = v4;
      operator delete(v4);
    }
    float v5 = *(void **)(v2 + 144);
    if (v5)
    {
      *(void *)(v2 + 152) = v5;
      operator delete(v5);
    }
    float v6 = *(void **)(v2 + 120);
    if (v6)
    {
      *(void *)(v2 + 128) = v6;
      operator delete(v6);
    }
    float v7 = *(void **)(v2 + 96);
    if (v7)
    {
      *(void *)(v2 + 104) = v7;
      operator delete(v7);
    }
    __int16 v8 = *(void **)(v2 + 72);
    if (v8)
    {
      *(void *)(v2 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
      operator delete(v8);
    }
    __int16 v9 = *(void **)(v2 + 48);
    if (v9)
    {
      *(void *)(v2 + 56) = v9;
      operator delete(v9);
    }
    int v10 = *(void **)(v2 + 24);
    if (v10)
    {
      *(void *)(v2 + 32) = v10;
      operator delete(v10);
    }
    uint64_t v11 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v11;
      operator delete(v11);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<InverseWithMoorePenrose>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (getMatrixUtilityLog(void)::onceToken != -1) {
      dispatch_once(&getMatrixUtilityLog(void)::onceToken, &__block_literal_global_16286);
    }
    float v3 = getMatrixUtilityLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getMatrixUtilityLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 134217984;
      uint64_t v8 = v2;
      _os_log_debug_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "[%p] destructed", (uint8_t *)&v7, 0xCu);
    }
    float v4 = *(void **)(v2 + 640);
    if (v4)
    {
      *(void *)(v2 + 648) = v4;
      operator delete(v4);
    }
    float v5 = *(void **)(v2 + 600);
    if (v5)
    {
      *(void *)(v2 + 608) = v5;
      operator delete(v5);
    }
    MoorePenrose::~MoorePenrose((MoorePenrose *)(v2 + 40));
    float v6 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUDenoise::CanScheduleParameters(AUDenoise *this)
{
  return 0;
}

uint64_t AUDenoise::SetParameter(AUDenoise *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 568), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    uint64_t v9 = (char *)this + 544;
    goto LABEL_5;
  }
  if (!a3)
  {
    uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDenoise *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v8, a2, a5, 0);
    uint64_t v9 = (char *)this + 528;
LABEL_5:
    uint64_t result = 0;
    ++*(void *)v9;
    return result;
  }
  return 4294956418;
}

uint64_t AUDenoise::SetProperty(AUDenoise *this, int a2, int a3, unsigned int a4, CFArrayRef *__src, size_t __n)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 7303)
  {
    if (a2 > 103698)
    {
      if (a2 == 103699)
      {
        if (__n == 8)
        {
          uint64_t v21 = *((void *)this + 148) - *((void *)this + 147);
          if (CFArrayGetCount(*__src) == v21 >> 2)
          {
            uint64_t v13 = (CFArrayRef *)*((void *)this + 148);
            if (v13 == *((CFArrayRef **)this + 147))
            {
              size_t v9 = 0;
            }
            else
            {
              uint64_t v22 = 0;
              unint64_t v23 = 0;
              do
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v23);
                CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, (void *)(*((void *)this + 147) + v22));
                ++v23;
                uint64_t v13 = (CFArrayRef *)*((void *)this + 147);
                v22 += 4;
              }
              while (v23 < (uint64_t)(*((void *)this + 148) - (void)v13) >> 2);
              size_t v9 = (*((_DWORD *)this + 296) - v13);
            }
            int v35 = *((_DWORD *)this + 165);
            if (v35 == 2)
            {
              uint64_t v11 = *(void **)(*((void *)this + 144) + 576);
            }
            else if (v35 == 3)
            {
              uint64_t v11 = *(void **)(*((void *)this + 145) + 304);
            }
            else
            {
              uint64_t v11 = *(void **)(*((void *)this + 143) + 1208);
            }
            goto LABEL_100;
          }
        }
        if (AUDenoiseLogScope(void)::once != -1) {
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
        }
        if (AUDenoiseLogScope(void)::scope)
        {
          uint64_t v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(void *)AUDenoiseLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          uint64_t v26 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          return 4294956445;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUDenoise.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 430;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 103699;
        uint64_t v28 = "%25s:%-5d Input size of DenoiseInputMaskEstimate_CF is not equal to the the expected size (prop id: %u).\n";
      }
      else
      {
        if (a2 != 1036999) {
          return result;
        }
        if (__n == 8)
        {
          uint64_t v12 = *((void *)this + 151) - *((void *)this + 150);
          if (CFArrayGetCount(*__src) == v12 >> 2)
          {
            uint64_t v13 = (CFArrayRef *)*((void *)this + 151);
            if (v13 == *((CFArrayRef **)this + 150))
            {
              size_t v9 = 0;
            }
            else
            {
              uint64_t v14 = 0;
              unint64_t v15 = 0;
              do
              {
                CFNumberRef v16 = (const __CFNumber *)CFArrayGetValueAtIndex(*__src, v15);
                CFNumberGetValue(v16, kCFNumberFloat32Type, (void *)(*((void *)this + 150) + v14));
                ++v15;
                uint64_t v13 = (CFArrayRef *)*((void *)this + 150);
                v14 += 4;
              }
              while (v15 < (uint64_t)(*((void *)this + 151) - (void)v13) >> 2);
              size_t v9 = (*((_DWORD *)this + 302) - v13);
            }
            int v34 = *((_DWORD *)this + 165);
            if (v34 == 2)
            {
              uint64_t v11 = *(void **)(*((void *)this + 144) + 600);
            }
            else if (v34 == 3)
            {
              uint64_t v11 = *(void **)(*((void *)this + 145) + 328);
            }
            else
            {
              uint64_t v11 = *(void **)(*((void *)this + 143) + 1232);
            }
            goto LABEL_100;
          }
        }
        if (AUDenoiseLogScope(void)::once != -1) {
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
        }
        if (AUDenoiseLogScope(void)::scope)
        {
          uint64_t v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(void *)AUDenoiseLogScope(void)::scope) {
            return 4294956445;
          }
        }
        else
        {
          uint64_t v26 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          return 4294956445;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUDenoise.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 465;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1036999;
        uint64_t v28 = "%25s:%-5d Input size of DenoisePostMaskEstimate_CF is not equal to the the expected size (prop id: %u).\n";
      }
LABEL_94:
      unint64_t v31 = v26;
      uint32_t v32 = 24;
LABEL_169:
      _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, v28, buf, v32);
      return 4294956445;
    }
    if (a2 != 7304)
    {
      if (a2 != 36999) {
        return result;
      }
      size_t v9 = __n;
      if (__n == 4 * (*((_DWORD *)this + 154) + 1))
      {
        int v10 = *((_DWORD *)this + 165);
        if (v10 == 3)
        {
          uint64_t v11 = *(void **)(*((void *)this + 145) + 328);
        }
        else if (v10 == 2)
        {
          uint64_t v11 = *(void **)(*((void *)this + 144) + 600);
        }
        else
        {
          uint64_t v11 = *(void **)(*((void *)this + 143) + 1232);
        }
LABEL_99:
        uint64_t v13 = __src;
LABEL_100:
        memcpy(v11, v13, v9);
        return 0;
      }
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        uint64_t v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          return 4294956445;
        }
      }
      else
      {
        uint64_t v26 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUDenoise.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 449;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 36999;
        uint64_t v28 = "%25s:%-5d Input size of DenoisePostMaskEstimate is not equal to the the expected size (prop id: %u).\n";
        goto LABEL_94;
      }
      return 4294956445;
    }
    if (!__src)
    {
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        std::string v27 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          return 4294956445;
        }
      }
      else
      {
        std::string v27 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        return 4294956445;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUDenoise.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 484;
      uint64_t v28 = "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n";
LABEL_168:
      unint64_t v31 = v27;
      uint32_t v32 = 18;
      goto LABEL_169;
    }
    CFDictionaryRef v17 = *__src;
    uint64_t v18 = *((void *)this + 146);
    unsigned int v19 = *((_DWORD *)this + 198);
    *(unsigned char *)(v18 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
    }
    int v76 = 0;
    if (AUDenoiseLogScope(void)::scope)
    {
      float v20 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        goto LABEL_77;
      }
    }
    else
    {
      float v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 975;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_INFO, "%25s:%-5d Loading sampleRate from topLevelDict.\n", buf, 0x12u);
    }
LABEL_77:
    if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v18 + 64), v17, @"SampleRate", &v76))
    {
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        unint64_t v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          goto LABEL_160;
        }
      }
      else
      {
        unint64_t v29 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 980;
        float v33 = "%25s:%-5d Failed to load the sampling rate from the plist.\n";
LABEL_159:
        _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, v33, buf, 0x12u);
        goto LABEL_160;
      }
      goto LABEL_160;
    }
    unsigned int v75 = 0;
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      std::string v30 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        goto LABEL_118;
      }
    }
    else
    {
      std::string v30 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 986;
      _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nMicsUsed from topLevelDict.\n", buf, 0x12u);
    }
LABEL_118:
    if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v18 + 64), v17, @"nMicsUsed", &v75))
    {
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        unint64_t v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          goto LABEL_160;
        }
      }
      else
      {
        unint64_t v29 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 991;
        float v33 = "%25s:%-5d Failed to load the number of mics from the plist.\n";
        goto LABEL_159;
      }
LABEL_160:
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        std::string v27 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          return 4294956445;
        }
      }
      else
      {
        std::string v27 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        return 4294956445;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUDenoise.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 494;
      uint64_t v28 = "%25s:%-5d Loading SteeringVectorDictionary was not successful.\n";
      goto LABEL_168;
    }
    int v74 = 0;
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      uint64_t v36 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        goto LABEL_139;
      }
    }
    else
    {
      uint64_t v36 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 997;
      _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_INFO, "%25s:%-5d Loading nCoefficients from topLevelDict.\n", buf, 0x12u);
    }
LABEL_139:
    if (DictionaryBlobReader::ReadScalarFromDictionary<unsigned int>(*(uint64_t ***)(v18 + 64), v17, @"nCoefficients", &v74))
    {
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        unint64_t v29 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          goto LABEL_160;
        }
      }
      else
      {
        unint64_t v29 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1002;
        float v33 = "%25s:%-5d Failed to load the number of filter coefficients from the plist.\n";
        goto LABEL_159;
      }
      goto LABEL_160;
    }
    int v38 = v74;
    unint64_t v37 = v75;
    *(_DWORD *)(v18 + 48) = v75;
    int v39 = v76;
    *(_DWORD *)(v18 + 52) = v38;
    *(_DWORD *)(v18 + 56) = v39;
    std::vector<std::vector<float>>::resize((uint64_t *)v18, v37);
    std::vector<std::vector<float>>::resize((uint64_t *)(v18 + 24), *(unsigned int *)(v18 + 48));
    std::to_string((std::string *)buf, v19);
    float v40 = std::string::insert((std::string *)buf, 0, "Beam", 4uLL);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    int64_t v73 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v73 >= 0) {
      BOOL v42 = __p;
    }
    else {
      BOOL v42 = (void **)__p[0];
    }
    CFStringRef v43 = CFStringCreateWithCString(0, (const char *)v42, 0x8000100u);
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v17, v43);
    if (Value)
    {
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        float v45 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          goto LABEL_182;
        }
      }
      else
      {
        float v45 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        float v47 = __p;
        if (v73 < 0) {
          float v47 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1030;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v47;
        _os_log_impl(&dword_1BB0CE000, v45, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
      }
LABEL_182:
      CFRelease(v43);
      CFDictionaryRef v48 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"RealCoefficients");
      if (!v48)
      {
        if (AUDenoiseLogScope(void)::once != -1) {
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
        }
        if (AUDenoiseLogScope(void)::scope)
        {
          double v50 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(void *)AUDenoiseLogScope(void)::scope) {
            goto LABEL_265;
          }
        }
        else
        {
          double v50 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1039;
          unsigned int v62 = "%25s:%-5d Missing dictionary RealCoefficients.\n";
LABEL_258:
          _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_ERROR, v62, buf, 0x12u);
        }
LABEL_265:
        int v70 = 0;
LABEL_266:
        if (SHIBYTE(v73) < 0) {
          operator delete(__p[0]);
        }
        if (v70)
        {
          uint64_t result = 0;
          *((unsigned char *)this + 657) = 1;
          return result;
        }
        goto LABEL_160;
      }
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        uint64_t v49 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          goto LABEL_196;
        }
      }
      else
      {
        uint64_t v49 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1044;
        _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary RealCoefficients.\n", buf, 0x12u);
      }
LABEL_196:
      if (v75)
      {
        uint64_t v51 = 0;
        unint64_t v52 = 0;
        while (1)
        {
          std::to_string(&v77, v52);
          float v53 = std::string::insert(&v77, 0, "Mic", 3uLL);
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          *(void *)&buf[16] = *((void *)&v53->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          float32x2_t v55 = buf[23] >= 0 ? buf : *(const char **)buf;
          CFStringRef v56 = CFStringCreateWithCString(0, v55, 0x8000100u);
          int VectorFromDictionary = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v18 + 64), v48, v56, (char **)(*(void *)v18 + v51));
          CFRelease(v56);
          if (VectorFromDictionary) {
            break;
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          ++v52;
          v51 += 24;
          if (v52 >= v75) {
            goto LABEL_207;
          }
        }
        if (AUDenoiseLogScope(void)::once != -1) {
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
        }
        if (AUDenoiseLogScope(void)::scope)
        {
          float32x2_t v61 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(void *)AUDenoiseLogScope(void)::scope) {
            goto LABEL_263;
          }
        }
        else
        {
          float32x2_t v61 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
          goto LABEL_263;
        }
        LODWORD(v77.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = (std::string::size_type)"iPMWF_HRLS_vDSP.cpp";
        WORD2(v77.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[1] + 6) = 1056;
        float v71 = "%25s:%-5d Error loading RealCoefficients.\n";
        goto LABEL_262;
      }
LABEL_207:
      CFDictionaryRef v58 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"ImagCoefficients");
      if (v58)
      {
        if (AUDenoiseLogScope(void)::once != -1) {
          dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
        }
        if (AUDenoiseLogScope(void)::scope)
        {
          float v59 = *(NSObject **)AUDenoiseLogScope(void)::scope;
          if (!*(void *)AUDenoiseLogScope(void)::scope)
          {
LABEL_235:
            if (!v75)
            {
LABEL_246:
              int v70 = 1;
              *(unsigned char *)(v18 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
              goto LABEL_266;
            }
            uint64_t v63 = 0;
            unint64_t v64 = 0;
            while (1)
            {
              std::to_string(&v77, v64);
              float v65 = std::string::insert(&v77, 0, "Mic", 3uLL);
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              *(void *)&buf[16] = *((void *)&v65->__r_.__value_.__l + 2);
              *(_OWORD *)buf = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v77.__r_.__value_.__l.__data_);
              }
              float v67 = buf[23] >= 0 ? buf : *(const char **)buf;
              CFStringRef v68 = CFStringCreateWithCString(0, v67, 0x8000100u);
              int v69 = DictionaryBlobReader::ReadVectorFromDictionary(*(NSObject ****)(v18 + 64), v58, v68, (char **)(*(void *)(v18 + 24) + v63));
              CFRelease(v68);
              if (v69) {
                break;
              }
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              ++v64;
              v63 += 24;
              if (v64 >= v75) {
                goto LABEL_246;
              }
            }
            if (AUDenoiseLogScope(void)::once != -1) {
              dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
            }
            if (AUDenoiseLogScope(void)::scope)
            {
              float32x2_t v61 = *(NSObject **)AUDenoiseLogScope(void)::scope;
              if (!*(void *)AUDenoiseLogScope(void)::scope)
              {
LABEL_263:
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                goto LABEL_265;
              }
            }
            else
            {
              float32x2_t v61 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
              goto LABEL_263;
            }
            LODWORD(v77.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = (std::string::size_type)"iPMWF_HRLS_vDSP.cpp";
            WORD2(v77.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[1] + 6) = 1084;
            float v71 = "%25s:%-5d Error loading ImagCoefficients.\n";
LABEL_262:
            _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_ERROR, v71, (uint8_t *)&v77, 0x12u);
            goto LABEL_263;
          }
        }
        else
        {
          float v59 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1072;
          _os_log_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_INFO, "%25s:%-5d Found the dictionary ImagCoefficients.\n", buf, 0x12u);
        }
        goto LABEL_235;
      }
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        double v50 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          goto LABEL_265;
        }
      }
      else
      {
        double v50 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1067;
        unsigned int v62 = "%25s:%-5d Missing dictionary ImagCoefficients.\n";
        goto LABEL_258;
      }
      goto LABEL_265;
    }
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      float v46 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope)
      {
LABEL_218:
        CFRelease(v43);
        goto LABEL_265;
      }
    }
    else
    {
      float v46 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      unsigned int v60 = __p;
      if (v73 < 0) {
        unsigned int v60 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "iPMWF_HRLS_vDSP.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1023;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v60;
      _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
    }
    goto LABEL_218;
  }
  switch(a2)
  {
    case 21:
      uint64_t result = 0;
      *((unsigned char *)this + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)__src != 0;
      return result;
    case 3699:
      size_t v9 = __n;
      if (__n == 4 * (*((_DWORD *)this + 154) + 1))
      {
        int v25 = *((_DWORD *)this + 165);
        if (v25 == 3)
        {
          uint64_t v11 = *(void **)(*((void *)this + 145) + 304);
        }
        else if (v25 == 2)
        {
          uint64_t v11 = *(void **)(*((void *)this + 144) + 576);
        }
        else
        {
          uint64_t v11 = *(void **)(*((void *)this + 143) + 1208);
        }
        goto LABEL_99;
      }
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        uint64_t v26 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          return 4294956445;
        }
      }
      else
      {
        uint64_t v26 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AUDenoise.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 414;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 3699;
        uint64_t v28 = "%25s:%-5d Input size of DenoiseInputMaskEstimate is not equal to the the expected size (prop id: %u).\n";
        goto LABEL_94;
      }
      return 4294956445;
    case 3700:
      uint64_t result = 4294956445;
      if (__n >= 4)
      {
        if (*(unsigned char *)__src) {
          return 0;
        }
        else {
          return 4294956445;
        }
      }
      break;
  }
  return result;
}

void sub_1BB5A9FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUDenoise::GetProperty(AUDenoise *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    float v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    float v6 = (unsigned __int8 *)this + 560;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDenoise::GetPropertyInfo(AUDenoise *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDenoise::Reset(AUDenoise *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *((_DWORD *)this + 165);
  if (v1 < 2)
  {
    uint64_t v7 = *((void *)this + 143);
    *(_DWORD *)(v7 + 148) = 0;
    vDSP_vfill((const float *)(v7 + 84), *(float **)(v7 + 392), 1, *(unsigned int *)(v7 + 52));
    LODWORD(v8) = *(_DWORD *)(v7 + 48);
    if (v8)
    {
      unint64_t v9 = 0;
      do
      {
        if (*(_DWORD *)(v7 + 56))
        {
          uint64_t v10 = 0;
          unint64_t v11 = 0;
          do
          {
            vDSP_vclr(*(float **)(*(void *)(*(void *)(v7 + 296) + 24 * v9) + v10), 1, *(unsigned int *)(v7 + 52));
            vDSP_vclr(*(float **)(*(void *)(*(void *)(v7 + 296) + 24 * v9) + v10 + 8), 1, *(unsigned int *)(v7 + 52));
            vDSP_vclr(*(float **)(*(void *)(*(void *)(v7 + 368) + 24 * v9) + v10), 1, *(unsigned int *)(v7 + 52));
            vDSP_vclr(*(float **)(*(void *)(*(void *)(v7 + 368) + 24 * v9) + v10 + 8), 1, *(unsigned int *)(v7 + 52));
            ++v11;
            v10 += 16;
          }
          while (v11 < *(unsigned int *)(v7 + 56));
          LODWORD(v8) = *(_DWORD *)(v7 + 48);
        }
        vDSP_vfill((const float *)(v7 + 80), *(float **)(*(void *)(*(void *)(v7 + 296) + 24 * v9) + 16 * (v8 + v9)), 1, *(unsigned int *)(v7 + 52));
        vDSP_vfill((const float *)(v7 + 80), *(float **)(*(void *)(*(void *)(v7 + 368) + 24 * v9) + 16 * (*(_DWORD *)(v7 + 48) + v9)), 1, *(unsigned int *)(v7 + 52));
        ++v9;
        unint64_t v8 = *(unsigned int *)(v7 + 48);
      }
      while (v9 < v8);
    }
  }
  else if (v1 == 3)
  {
    GuidedMWF::Reset(*((GuidedMWF **)this + 145));
  }
  else if (v1 == 2)
  {
    uint64_t v2 = *((void *)this + 144);
    *(_DWORD *)(v2 + 84) = 0;
    vDSP_vfill((const float *)(v2 + 92), *(float **)(v2 + 192), 1, *(unsigned int *)(v2 + 36));
    vDSP_vclr(*(float **)(v2 + 144), 1, (2 * *(_DWORD *)(v2 + 44)));
    iPMWF_HRLS_vDSP::InitializeFilter((iPMWF_HRLS_vDSP *)v2);
    unsigned int v3 = *(_DWORD *)(v2 + 32);
    if (v3)
    {
      for (unsigned int i = 0; i < v3; ++i)
      {
        unsigned int v5 = 0;
        do
        {
          if (i != v5)
          {
            vDSP_vclr((float *)(*(void *)(v2 + 168) + 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5)), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(void *)(v2 + 168)+ 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5 + *(_DWORD *)(v2 + 44))), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(void *)(v2 + 696) + 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5)), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(void *)(v2 + 696)+ 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5 + *(_DWORD *)(v2 + 44))), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(void *)(v2 + 744) + 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5)), 1, *(unsigned int *)(v2 + 36));
            vDSP_vclr((float *)(*(void *)(v2 + 744)+ 4 * (*(_DWORD *)(v2 + 40) * i + *(_DWORD *)(v2 + 36) * v5 + *(_DWORD *)(v2 + 44))), 1, *(unsigned int *)(v2 + 36));
            unsigned int v3 = *(_DWORD *)(v2 + 32);
          }
          ++v5;
        }
        while (v5 < v3);
      }
    }
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      float v6 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        return 0;
      }
    }
    else
    {
      float v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 136315394;
      uint64_t v14 = "iPMWF_HRLS_vDSP.cpp";
      __int16 v15 = 1024;
      int v16 = 245;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d iPMWF: successful reset.\n", (uint8_t *)&v13, 0x12u);
    }
  }
  return 0;
}

void AUDenoise::Cleanup(AUDenoise *this)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
  }
  if (AUDenoiseLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(void *)AUDenoiseLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    CFDictionaryRef v48 = "AUDenoise.cpp";
    __int16 v49 = 1024;
    int v50 = 222;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Cleanup.\n", buf, 0x12u);
  }
LABEL_9:
  uint64_t v3 = *((void *)this + 143);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(v3 + 48);
    *(float *)(v3 + 84) = (float)v4;
    *(float *)(v3 + 88) = -(float)v4;
    *(_DWORD *)(v3 + 168) = v4;
    vec::fill<BOOL>(*(void *)(v3 + 176), *(void *)(v3 + 184), 0);
    vec::fill<float>(*(void *)(v3 + 200), *(void *)(v3 + 208), (_DWORD *)(v3 + 24));
    vec::fill<float>(*(void *)(v3 + 224), *(void *)(v3 + 232), (_DWORD *)(v3 + 24));
    vec::cleanup<float>((uint64_t *)(v3 + 248));
    vec::cleanup<float>((uint64_t *)(v3 + 272));
    vec::cleanup<float>((uint64_t *)(v3 + 320));
    vec::cleanup<float>((uint64_t *)(v3 + 344));
    LODWORD(v5) = *(_DWORD *)(v3 + 48);
    if (v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        vDSP_vfill((const float *)(v3 + 80), *(float **)(*(void *)(*(void *)(v3 + 296) + v6) + 16 * (v7 + v5)), 1, *(unsigned int *)(v3 + 52));
        vDSP_vfill((const float *)(v3 + 80), *(float **)(*(void *)(*(void *)(v3 + 368) + v6) + 16 * (v7++ + *(_DWORD *)(v3 + 48))), 1, *(unsigned int *)(v3 + 52));
        unint64_t v5 = *(unsigned int *)(v3 + 48);
        v6 += 24;
      }
      while (v7 < v5);
    }
    unint64_t v8 = *(_DWORD **)(v3 + 392);
    uint64_t v9 = *(void *)(v3 + 400) - (void)v8;
    if (v9 >= 1)
    {
      unint64_t v10 = ((unint64_t)v9 >> 2) + 1;
      do
      {
        *v8++ = *(_DWORD *)(v3 + 84);
        --v10;
      }
      while (v10 > 1);
    }
    unint64_t v11 = *(void **)(v3 + 416);
    uint64_t v12 = *(void *)(v3 + 424) - (void)v11;
    if (v12 >= 1) {
      memset_pattern16(v11, &unk_1BB87C230, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
    }
    bzero(*(void **)(v3 + 448), *(void *)(v3 + 456) - *(void *)(v3 + 448));
    bzero(*(void **)(v3 + 472), *(void *)(v3 + 480) - *(void *)(v3 + 472));
    bzero(*(void **)(v3 + 496), *(void *)(v3 + 504) - *(void *)(v3 + 496));
    bzero(*(void **)(v3 + 544), *(void *)(v3 + 552) - *(void *)(v3 + 544));
    bzero(*(void **)(v3 + 568), *(void *)(v3 + 576) - *(void *)(v3 + 568));
    bzero(*(void **)(v3 + 592), *(void *)(v3 + 600) - *(void *)(v3 + 592));
    bzero(*(void **)(v3 + 616), *(void *)(v3 + 624) - *(void *)(v3 + 616));
    bzero(*(void **)(v3 + 640), *(void *)(v3 + 648) - *(void *)(v3 + 640));
    bzero(*(void **)(v3 + 664), *(void *)(v3 + 672) - *(void *)(v3 + 664));
    bzero(*(void **)(v3 + 688), *(void *)(v3 + 696) - *(void *)(v3 + 688));
    bzero(*(void **)(v3 + 712), *(void *)(v3 + 720) - *(void *)(v3 + 712));
    bzero(*(void **)(v3 + 736), *(void *)(v3 + 744) - *(void *)(v3 + 736));
    bzero(*(void **)(v3 + 760), *(void *)(v3 + 768) - *(void *)(v3 + 760));
    bzero(*(void **)(v3 + 784), *(void *)(v3 + 792) - *(void *)(v3 + 784));
    bzero(*(void **)(v3 + 808), *(void *)(v3 + 816) - *(void *)(v3 + 808));
    bzero(*(void **)(v3 + 832), *(void *)(v3 + 840) - *(void *)(v3 + 832));
    bzero(*(void **)(v3 + 856), *(void *)(v3 + 864) - *(void *)(v3 + 856));
    bzero(*(void **)(v3 + 880), *(void *)(v3 + 888) - *(void *)(v3 + 880));
    bzero(*(void **)(v3 + 904), *(void *)(v3 + 912) - *(void *)(v3 + 904));
    bzero(*(void **)(v3 + 928), *(void *)(v3 + 936) - *(void *)(v3 + 928));
    bzero(*(void **)(v3 + 968), *(void *)(v3 + 976) - *(void *)(v3 + 968));
    bzero(*(void **)(v3 + 992), *(void *)(v3 + 1000) - *(void *)(v3 + 992));
    bzero(*(void **)(v3 + 1016), *(void *)(v3 + 1024) - *(void *)(v3 + 1016));
    bzero(*(void **)(v3 + 1040), *(void *)(v3 + 1048) - *(void *)(v3 + 1040));
    bzero(*(void **)(v3 + 1064), *(void *)(v3 + 1072) - *(void *)(v3 + 1064));
    bzero(*(void **)(v3 + 1088), *(void *)(v3 + 1096) - *(void *)(v3 + 1088));
    bzero(*(void **)(v3 + 1112), *(void *)(v3 + 1120) - *(void *)(v3 + 1112));
    bzero(*(void **)(v3 + 1136), *(void *)(v3 + 1144) - *(void *)(v3 + 1136));
    bzero(*(void **)(v3 + 1160), *(void *)(v3 + 1168) - *(void *)(v3 + 1160));
    bzero(*(void **)(v3 + 1184), *(void *)(v3 + 1192) - *(void *)(v3 + 1184));
    bzero(*(void **)(v3 + 1256), *(void *)(v3 + 1264) - *(void *)(v3 + 1256));
    bzero(*(void **)(v3 + 1304), *(void *)(v3 + 1312) - *(void *)(v3 + 1304));
    bzero(*(void **)(v3 + 1280), *(void *)(v3 + 1288) - *(void *)(v3 + 1280));
    int v13 = *(void **)(v3 + 1328);
    uint64_t v14 = *(void *)(v3 + 1336) - (void)v13;
    if (v14 >= 1) {
      memset_pattern16(v13, &unk_1BB87C230, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
    }
    *(_DWORD *)(v3 + 44std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    bzero(*(void **)(v3 + 1352), *(void *)(v3 + 1360) - *(void *)(v3 + 1352));
    bzero(*(void **)(v3 + 1376), *(void *)(v3 + 1384) - *(void *)(v3 + 1376));
    bzero(*(void **)(v3 + 1400), *(void *)(v3 + 1408) - *(void *)(v3 + 1400));
    bzero(*(void **)(v3 + 1424), *(void *)(v3 + 1432) - *(void *)(v3 + 1424));
    bzero(*(void **)(v3 + 1448), *(void *)(v3 + 1456) - *(void *)(v3 + 1448));
    bzero(*(void **)(v3 + 1472), *(void *)(v3 + 1480) - *(void *)(v3 + 1472));
    bzero(*(void **)(v3 + 1496), *(void *)(v3 + 1504) - *(void *)(v3 + 1496));
    *(_DWORD *)(v3 + 148) = 0;
    *(_DWORD *)(v3 + 152std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    __int16 v15 = *(void **)(v3 + 1208);
    uint64_t v16 = *(void *)(v3 + 1216) - (void)v15;
    if (v16 >= 1) {
      memset_pattern16(v15, &unk_1BB873A60, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
    }
    uint64_t v17 = *(void **)(v3 + 1232);
    uint64_t v18 = *(void *)(v3 + 1240) - (void)v17;
    if (v18 >= 1) {
      memset_pattern16(v17, &unk_1BB873A60, 4 * (((unint64_t)v18 >> 2) - ((unint64_t)v18 > 3)) + 4);
    }
  }
  uint64_t v19 = *((void *)this + 144);
  if (v19)
  {
    bzero(*(void **)(v19 + 144), *(void *)(v19 + 152) - *(void *)(v19 + 144));
    bzero(*(void **)(v19 + 168), *(void *)(v19 + 176) - *(void *)(v19 + 168));
    float v20 = *(_DWORD **)(v19 + 192);
    uint64_t v21 = *(void *)(v19 + 200) - (void)v20;
    if (v21 >= 1)
    {
      unint64_t v22 = ((unint64_t)v21 >> 2) + 1;
      do
      {
        *v20++ = *(_DWORD *)(v19 + 92);
        --v22;
      }
      while (v22 > 1);
    }
    bzero(*(void **)(v19 + 360), *(void *)(v19 + 368) - *(void *)(v19 + 360));
    bzero(*(void **)(v19 + 384), *(void *)(v19 + 392) - *(void *)(v19 + 384));
    bzero(*(void **)(v19 + 408), *(void *)(v19 + 416) - *(void *)(v19 + 408));
    bzero(*(void **)(v19 + 432), *(void *)(v19 + 440) - *(void *)(v19 + 432));
    bzero(*(void **)(v19 + 456), *(void *)(v19 + 464) - *(void *)(v19 + 456));
    bzero(*(void **)(v19 + 480), *(void *)(v19 + 488) - *(void *)(v19 + 480));
    bzero(*(void **)(v19 + 504), *(void *)(v19 + 512) - *(void *)(v19 + 504));
    bzero(*(void **)(v19 + 528), *(void *)(v19 + 536) - *(void *)(v19 + 528));
    bzero(*(void **)(v19 + 240), *(void *)(v19 + 248) - *(void *)(v19 + 240));
    bzero(*(void **)(v19 + 264), *(void *)(v19 + 272) - *(void *)(v19 + 264));
    bzero(*(void **)(v19 + 288), *(void *)(v19 + 296) - *(void *)(v19 + 288));
    bzero(*(void **)(v19 + 312), *(void *)(v19 + 320) - *(void *)(v19 + 312));
    bzero(*(void **)(v19 + 336), *(void *)(v19 + 344) - *(void *)(v19 + 336));
    bzero(*(void **)(v19 + 216), *(void *)(v19 + 224) - *(void *)(v19 + 216));
    unint64_t v23 = *(void **)(v19 + 576);
    uint64_t v24 = *(void *)(v19 + 584) - (void)v23;
    if (v24 >= 1) {
      memset_pattern16(v23, &unk_1BB873A60, 4 * (((unint64_t)v24 >> 2) - ((unint64_t)v24 > 3)) + 4);
    }
    int v25 = *(void **)(v19 + 600);
    uint64_t v26 = *(void *)(v19 + 608) - (void)v25;
    if (v26 >= 1) {
      memset_pattern16(v25, &unk_1BB873A60, 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
    }
    std::string v27 = *(void **)(v19 + 768);
    uint64_t v28 = *(void *)(v19 + 776) - (void)v27;
    if (v28 >= 1) {
      memset_pattern16(v27, &unk_1BB873A60, 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
    }
    unint64_t v29 = *(void **)(v19 + 792);
    uint64_t v30 = *(void *)(v19 + 800) - (void)v29;
    if (v30 >= 1) {
      memset_pattern16(v29, &unk_1BB873A60, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
    }
    unint64_t v31 = *(void **)(v19 + 816);
    uint64_t v32 = *(void *)(v19 + 824) - (void)v31;
    if (v32 >= 1) {
      bzero(v31, 4 * (((unint64_t)v32 >> 2) - ((unint64_t)v32 > 3)) + 4);
    }
    bzero(*(void **)(v19 + 624), *(void *)(v19 + 632) - *(void *)(v19 + 624));
    bzero(*(void **)(v19 + 744), *(void *)(v19 + 752) - *(void *)(v19 + 744));
    bzero(*(void **)(v19 + 696), *(void *)(v19 + 704) - *(void *)(v19 + 696));
    bzero(*(void **)(v19 + 672), *(void *)(v19 + 680) - *(void *)(v19 + 672));
    bzero(*(void **)(v19 + 720), *(void *)(v19 + 728) - *(void *)(v19 + 720));
    bzero(*(void **)(v19 + 648), *(void *)(v19 + 656) - *(void *)(v19 + 648));
    float v33 = *(void **)(v19 + 552);
    uint64_t v34 = *(void *)(v19 + 560) - (void)v33;
    if (v34 >= 1) {
      memset_pattern16(v33, &unk_1BB873A60, 4 * (((unint64_t)v34 >> 2) - ((unint64_t)v34 > 3)) + 4);
    }
    float __A = 1.0 / sqrtf(*(float *)(v19 + 24));
    if (*(_DWORD *)(v19 + 32))
    {
      unsigned int v35 = 0;
      do
      {
        vDSP_vfill(&__A, (float *)(*(void *)(v19 + 168) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * v35), 1, *(unsigned int *)(v19 + 36));
        vDSP_vfill((const float *)(v19 + 24), (float *)(*(void *)(v19 + 696) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * v35), 1, *(unsigned int *)(v19 + 36));
        vDSP_vfill((const float *)(v19 + 24), (float *)(*(void *)(v19 + 744) + 4 * (*(_DWORD *)(v19 + 36) + *(_DWORD *)(v19 + 40)) * v35++), 1, *(unsigned int *)(v19 + 36));
        unsigned int v36 = *(_DWORD *)(v19 + 32);
      }
      while (v35 < v36);
      float v37 = (float)v36;
    }
    else
    {
      float v37 = 0.0;
    }
    float v45 = 1.0 / sqrtf(v37);
    vDSP_vfill(&v45, *(float **)(v19 + 792), 1, *(unsigned int *)(v19 + 40));
    vDSP_vfill((const float *)(v19 + 68), (float *)(*(void *)(v19 + 792) + 4 * *(unsigned int *)(v19 + 40)), 1, *(unsigned int *)(v19 + 40));
    vDSP_vfill((const float *)(v19 + 68), (float *)(*(void *)(v19 + 768) + 4 * *(unsigned int *)(v19 + 40)), 1, *(unsigned int *)(v19 + 40));
    iPMWF_HRLS_vDSP::InitializeFilter((iPMWF_HRLS_vDSP *)v19);
    if (AUDenoiseLogScope(void)::once != -1) {
      dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_29983);
    }
    if (AUDenoiseLogScope(void)::scope)
    {
      int v38 = *(NSObject **)AUDenoiseLogScope(void)::scope;
      if (!*(void *)AUDenoiseLogScope(void)::scope) {
        goto LABEL_53;
      }
    }
    else
    {
      int v38 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      CFDictionaryRef v48 = "iPMWF_HRLS_vDSP.cpp";
      __int16 v49 = 1024;
      int v50 = 213;
      _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d iPMWF: successful clean-up.\n", buf, 0x12u);
    }
  }
LABEL_53:
  uint64_t v39 = *((void *)this + 145);
  if (!v39) {
    return;
  }
  bzero(*(void **)(v39 + 136), *(void *)(v39 + 144) - *(void *)(v39 + 136));
  bzero(*(void **)(v39 + 160), *(void *)(v39 + 168) - *(void *)(v39 + 160));
  bzero(*(void **)(v39 + 232), *(void *)(v39 + 240) - *(void *)(v39 + 232));
  bzero(*(void **)(v39 + 256), *(void *)(v39 + 264) - *(void *)(v39 + 256));
  float v40 = *(void **)(v39 + 304);
  uint64_t v41 = *(void *)(v39 + 312) - (void)v40;
  if (v41 >= 1) {
    memset_pattern16(v40, &unk_1BB873A60, 4 * (((unint64_t)v41 >> 2) - ((unint64_t)v41 > 3)) + 4);
  }
  BOOL v42 = *(void **)(v39 + 328);
  uint64_t v43 = *(void *)(v39 + 336) - (void)v42;
  if (v43 >= 1) {
    memset_pattern16(v42, &unk_1BB873A60, 4 * (((unint64_t)v43 >> 2) - ((unint64_t)v43 > 3)) + 4);
  }
  bzero(*(void **)(v39 + 400), *(void *)(v39 + 408) - *(void *)(v39 + 400));
  bzero(*(void **)(v39 + 424), *(void *)(v39 + 432) - *(void *)(v39 + 424));
  GuidedMWF::Reset((GuidedMWF *)v39);
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_33136);
  }
  if (AUDenoiseLogScope(void)::scope)
  {
    float v44 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(void *)AUDenoiseLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    float v44 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    CFDictionaryRef v48 = "GuidedMWF.cpp";
    __int16 v49 = 1024;
    int v50 = 154;
    _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d successful clean-up.\n", buf, 0x12u);
  }
}

uint64_t AUDenoise::Initialize(float32x2_t *this)
{
  *(void *)&v29[5] = *MEMORY[0x1E4F143B8];
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
  }
  if (!AUDenoiseLogScope(void)::scope)
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
LABEL_7:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v25 = "AUDenoise.cpp";
      __int16 v26 = 1024;
      int v27 = 161;
      _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Initialize.\n", buf, 0x12u);
    }
    goto LABEL_9;
  }
  uint64_t v2 = *(NSObject **)AUDenoiseLogScope(void)::scope;
  if (*(void *)AUDenoiseLogScope(void)::scope) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], 0);
  unsigned int v4 = 0;
  this[79].i32[0] = *(_DWORD *)(Element + 108);
  char v5 = 1;
  while (1)
  {
    char v6 = v5;
    int v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], v4) + 108);
    if (v7 != this[79].i32[0]) {
      break;
    }
    char v5 = 0;
    unsigned int v4 = 1;
    if ((v6 & 1) == 0)
    {
      unsigned int v8 = 0;
      char v9 = 1;
      while (1)
      {
        char v10 = v9;
        int v11 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], v8) + 108);
        if (v11 != this[79].i32[0]) {
          break;
        }
        char v9 = 0;
        unsigned int v8 = 1;
        if ((v10 & 1) == 0)
        {
          Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, 4u);
          ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
          BOOL v23 = 0;
          AppFloatCFDictionaryRef Value = CACFPreferencesGetAppFloatValue(@"pmwf_log_period_in_seconds", @"com.apple.coreaudio", &v23);
          if (v23)
          {
            float v14 = AppFloatValue;
            if (v14 > 0.0)
            {
              this[92].f32[1] = v14;
              __int16 v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
              ausdk::AUElement::SetParameter(v15, 0x1Du, v14, 0);
              if (AUDenoiseLogScope(void)::once != -1) {
                dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
              }
              if (AUDenoiseLogScope(void)::scope)
              {
                uint64_t v16 = *(NSObject **)AUDenoiseLogScope(void)::scope;
                if (!*(void *)AUDenoiseLogScope(void)::scope) {
                  goto LABEL_43;
                }
              }
              else
              {
                uint64_t v16 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                int v25 = "AUDenoise.cpp";
                __int16 v26 = 1024;
                int v27 = 196;
                __int16 v28 = 2048;
                *(double *)unint64_t v29 = v14;
                _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Using logPeriod of (%g)s as specified in defaults write pmwf_log_period_in_seconds.\n", buf, 0x1Cu);
              }
            }
          }
LABEL_43:
          AUDenoise::UpdateState(this);
          this[67] = this[66];
          AUDenoise::InitializePMWFClasses((AUDenoise *)this);
          (*(void (**)(float32x2_t *, void, void))(*(void *)this + 72))(this, 0, 0);
          if (AUDenoiseLogScope(void)::once != -1) {
            dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
          }
          if (AUDenoiseLogScope(void)::scope)
          {
            unint64_t v22 = *(NSObject **)AUDenoiseLogScope(void)::scope;
            if (!*(void *)AUDenoiseLogScope(void)::scope) {
              return 0;
            }
          }
          else
          {
            unint64_t v22 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            int v25 = "AUDenoise.cpp";
            __int16 v26 = 1024;
            int v27 = 211;
            _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDenoise: Successfully initialized.\n", buf, 0x12u);
          }
          return 0;
        }
      }
      if (AUDenoiseLogScope(void)::once != -1) {
        dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
      }
      if (AUDenoiseLogScope(void)::scope)
      {
        uint64_t v17 = *(NSObject **)AUDenoiseLogScope(void)::scope;
        if (!*(void *)AUDenoiseLogScope(void)::scope) {
          return 4294956421;
        }
      }
      else
      {
        uint64_t v17 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        __int32 v20 = this[79].i32[0];
        *(_DWORD *)buf = 136315906;
        int v25 = "AUDenoise.cpp";
        __int16 v26 = 1024;
        int v27 = 178;
        __int16 v28 = 1024;
        v29[0] = v11;
        LOWORD(v29[1]) = 1024;
        *(_DWORD *)((char *)&v29[1] + 2) = v20;
        uint64_t v19 = "%25s:%-5d Number of channel in the output stream (%u) not equal to the expected number of channels (%u).\n";
        goto LABEL_38;
      }
      return 4294956421;
    }
  }
  if (AUDenoiseLogScope(void)::once != -1) {
    dispatch_once(&AUDenoiseLogScope(void)::once, &__block_literal_global_15837);
  }
  if (AUDenoiseLogScope(void)::scope)
  {
    uint64_t v17 = *(NSObject **)AUDenoiseLogScope(void)::scope;
    if (!*(void *)AUDenoiseLogScope(void)::scope) {
      return 4294956421;
    }
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    __int32 v18 = this[79].i32[0];
    *(_DWORD *)buf = 136315906;
    int v25 = "AUDenoise.cpp";
    __int16 v26 = 1024;
    int v27 = 171;
    __int16 v28 = 1024;
    v29[0] = v7;
    LOWORD(v29[1]) = 1024;
    *(_DWORD *)((char *)&v29[1] + 2) = v18;
    uint64_t v19 = "%25s:%-5d Number of channel in the input stream (%u) not equal to the expected number of channels (%u).\n";
LABEL_38:
    _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, v19, buf, 0x1Eu);
  }
  return 4294956421;
}

void AUDenoise::CreateExtendedElements(AUDenoise *this)
{
  unsigned int v1 = (AUDenoise *)((char *)this + 568);
  ausdk::AUScope::Initialize((AUDenoise *)((char *)this + 568), this, 4, 16);
  for (unsigned int i = 0; i != 16; ++i)
  {
    std::to_string(&v8, i);
    uint64_t v3 = std::string::insert(&v8, 0, "Mic", 3uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v10 >= 0) {
      char v5 = __p;
    }
    else {
      char v5 = (void **)__p[0];
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB5AB538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUDenoise::~AUDenoise(AUDenoise *this)
{
  AUDenoise::~AUDenoise(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void **v7;
  uint64_t vars8;

  *(void *)this = &unk_1F14B6E18;
  uint64_t v2 = (uint64_t *)((char *)this + 1144);
  std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100]((uint64_t *)this + 143, 0);
  std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((void *)this + 144, 0);
  std::unique_ptr<GuidedMWF>::reset[abi:ne180100]((void *)this + 145, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 156, 0);
  uint64_t v3 = (void *)*((void *)this + 153);
  if (v3)
  {
    *((void *)this + 154) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 150);
  if (v4)
  {
    *((void *)this + 151) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 147);
  if (v5)
  {
    *((void *)this + 148) = v5;
    operator delete(v5);
  }
  CFStringRef v6 = *((void *)this + 146);
  *((void *)this + 146) = 0;
  if (v6) {
    std::default_delete<PMWFStvPlistHolder>::operator()[abi:ne180100](v6);
  }
  std::unique_ptr<GuidedMWF>::reset[abi:ne180100]((void *)this + 145, 0);
  std::unique_ptr<iPMWF_HRLS_vDSP>::reset[abi:ne180100]((void *)this + 144, 0);
  std::unique_ptr<PMWF_FAST_GS_vDSP>::reset[abi:ne180100](v2, 0);
  int v7 = (void **)((char *)this + 584);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v7);

  ausdk::AUBase::~AUBase(this);
}

uint64_t std::default_delete<PMWFStvPlistHolder>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    MEMORY[0x1C185D370](v2, 0x60C4044C4A2DFLL);
  }
  long long v4 = (void **)(a1 + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  long long v4 = (void **)a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x1C185D370](a1, 0x1020C40A98CFEF5);
}

uint64_t AUCircArray::HasCustomViewInDSPAUBundle(AUCircArray *this)
{
  return 1;
}

void AUCircArray::StreamFormatChanged(AUCircArray *this)
{
  if (!*((unsigned char *)this + 633))
  {
    AUCircArray::CreateDefaultConfigPlist((AUCircArray *)&cf, (uint64_t)this);
    AUCircArray::SetConfigPlist(this, (CFDictionaryRef)cf);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1BB5AB790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void AUCircArray::CreateDefaultConfigPlist(AUCircArray *this, uint64_t a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v4 setObject:@"Default (Passthrough)" forKey:@"Version"];
  char v5 = (void *)MEMORY[0x1E4F1C978];
  CFStringRef v6 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a2 + 128), 0) + 108));
  int v7 = [v5 arrayWithObject:v6];
  [v4 setObject:v7 forKey:@"SpeakersInRows"];

  std::string v8 = (void *)MEMORY[0x1E4F1C978];
  char v9 = [NSNumber numberWithUnsignedInt:0];
  int64_t v10 = [v8 arrayWithObject:v9];
  [v4 setObject:v10 forKey:@"FirstDriverAngles"];

  int v11 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v12 = [MEMORY[0x1E4F1CA48] array];
  for (int i = 0; i != 7; ++i)
  {
    if (i == 1)
    {
      __int32 v18 = [NSNumber numberWithFloat:0.0];
      [v11 addObject:v18];

      LODWORD(v19) = 1.0;
      uint64_t v17 = [NSNumber numberWithFloat:v19];
      [v12 addObject:v17];
    }
    else
    {
      if (i)
      {
        __int32 v20 = [NSNumber numberWithFloat:0.0];
        [v11 addObject:v20];

        [NSNumber numberWithFloat:0.0];
      }
      else
      {
        LODWORD(v13) = 1.0;
        __int16 v15 = [NSNumber numberWithFloat:v13];
        [v11 addObject:v15];

        LODWORD(v16) = 1.0;
        [NSNumber numberWithFloat:v16];
      uint64_t v17 = };
      [v12 addObject:v17];
    }
  }
  uint64_t v21 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v11, v12, 0);
  [v4 setObject:v21 forKey:@"BeamCompositions"];

  [v4 setObject:&unk_1F14EC5D8 forKey:@"BeamDescriptions"];
  [v4 setObject:&unk_1F14EC5F0 forKey:@"EQBiQuad"];
  unint64_t v22 = [MEMORY[0x1E4F1CA48] arrayWithObject:&unk_1F14EC630];
  int v23 = 127;
  do
  {
    [v22 addObject:&unk_1F14EC640];
    --v23;
  }
  while (v23);
  uint64_t v24 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v22, v22, 0);
  [v4 setObject:v24 forKey:@"BeamFIRs"];

  int v25 = [MEMORY[0x1E4F1CA48] array];
  int v26 = 4;
  do
  {
    [v25 addObject:v22];
    --v26;
  }
  while (v26);
  int v27 = [MEMORY[0x1E4F1C978] arrayWithObject:v25];
  [v4 setObject:v27 forKey:@"ModalFIRs"];

  __int16 v28 = [NSNumber numberWithUnsignedInt:0];
  [v4 setObject:v28 forKey:@"LatencySamples"];

  id cf = v4;
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::DictionaryRef::DictionaryRef(this, cf);
}

void sub_1BB5ABB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void AUCircArray::SetConfigPlist(AUCircArray *this, CFDictionaryRef theDict)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef theDicta = theDict;
  __int16 v102 = 0;
  CFArrayRef v4 = (const __CFArray *)*((void *)this + 357);
  if (v4)
  {
    int Count = CFArrayGetCount(v4);
    CFDictionaryRef v6 = theDicta;
  }
  else
  {
    int Count = 0;
    CFDictionaryRef v6 = theDict;
  }
  if (!CFDictionaryContainsKey(v6, @"SpeakersInRows"))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 787;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Plist doesn't contain speakers in rows array";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Plist doesn't contain speakers in rows array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, @"FirstDriverAngles"))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 788;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Plist doesn't contain speakers offsets array";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    int v76 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v76, "Plist doesn't contain speakers offsets array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, @"BeamCompositions"))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Plist doesn't contain beam compositions array";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    std::string v77 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v77, "Plist doesn't contain beam compositions array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, @"BeamFIRs"))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 790;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Plist doesn't contain beam FIR array";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    float v78 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v78, "Plist doesn't contain beam FIR array", -1);
  }
  if (!CFDictionaryContainsKey(theDicta, @"ModalFIRs"))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 791;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Plist doesn't contain modal FIR array";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    uint64_t v79 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v79, "Plist doesn't contain modal FIR array", -1);
  }
  CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v100 = 257;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v98 = 257;
  if (theDicta) {
    int v7 = CFDictionaryGetValue(theDicta, @"SpeakersInRows");
  }
  else {
    int v7 = 0;
  }
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 == CFArrayGetTypeID())
  {
    CACFDictionary::GetCACFArray(&theDicta, @"SpeakersInRows", (CACFArray *)&theArray);
  }
  else
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == CFNumberGetTypeID())
    {
      LODWORD(__p) = 0;
      CACFDictionary::GetSInt32((uint64_t)theDicta, @"SpeakersInRows", (int *)&__p);
      if (theArray)
      {
        CFArrayRemoveAllValues(theArray);
        *(void *)&buf[8] = 0;
        LODWORD(valuePtr) = __p;
        CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        *(void *)buf = v10;
        buf[8] = 1;
        if (v10) {
          CFArrayAppendValue(theArray, v10);
        }
        CACFNumber::~CACFNumber((CACFNumber *)buf);
      }
    }
  }
  if (theDicta) {
    int v11 = CFDictionaryGetValue(theDicta, @"FirstDriverAngles");
  }
  else {
    int v11 = 0;
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 == CFArrayGetTypeID())
  {
    CACFDictionary::GetCACFArray(&theDicta, @"FirstDriverAngles", (CACFArray *)&Mutable);
  }
  else
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 == CFNumberGetTypeID())
    {
      *(_DWORD *)buf = 0;
      CACFDictionary::GetFloat32((uint64_t)theDicta, @"FirstDriverAngles", (float *)buf);
      if (Mutable) {
        CFArrayRemoveAllValues(Mutable);
      }
      CACFArray::AppendFloat32(&Mutable, *(float *)buf);
    }
  }
  CFHelper::extractVector<unsigned int>(&v96, &theArray);
  std::vector<unsigned int>::pointer begin = v96.__begin_;
  if (v96.__begin_ == v96.__end_)
  {
    int v15 = 0;
  }
  else
  {
    int v15 = 0;
    do
    {
      unsigned int v16 = *begin++;
      v15 += v16;
    }
    while (begin != v96.__end_);
  }
  if (*((unsigned char *)this + 17)
    && v15 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUCircArray *)((char *)this + 128), 0) + 108))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 802;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Speakers in row array does not have same number of speakers as AU output channels";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    double v82 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v82, "Speakers in row array does not have same number of speakers as AU output channels", -1);
  }
  if (theArray) {
    int v17 = CFArrayGetCount(theArray);
  }
  else {
    int v17 = 0;
  }
  int v18 = (int)Mutable;
  if (Mutable) {
    int v18 = CFArrayGetCount(Mutable);
  }
  if (v17 != v18)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 806;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Speakers in rows array size doesn't match speaker offsets array size";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    float v80 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v80, "Speakers in rows array size doesn't match speaker offsets array size", -1);
  }
  CFArrayRef v94 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v95 = 257;
  CFArrayRef v92 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v93 = 257;
  if (CFDictionaryContainsKey(theDicta, @"BeamCompositions")
    && CFDictionaryContainsKey(theDicta, @"BeamFIRs"))
  {
    CFArrayRef v109 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    __int16 v110 = 257;
    CACFDictionary::GetCACFArray(&theDicta, @"BeamCompositions", (CACFArray *)&v109);
    CFArrayRef v19 = v109;
    CFTypeRef cf = 0;
    CACFArray::GetCFType(&v109, 0, &cf);
    CFTypeRef v20 = cf;
    CFTypeID v21 = CFGetTypeID(cf);
    if (v21 == CFArrayGetTypeID())
    {
      CACFDictionary::operator=((uint64_t)&v94, v19);
    }
    else
    {
      CFTypeID v22 = CFGetTypeID(v20);
      if (v22 == CFNumberGetTypeID())
      {
        int v23 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        *(void *)buf = v23;
        *(_WORD *)&buf[8] = 257;
        if (v23)
        {
          CFArrayAppendValue(v23, v19);
          uint64_t v24 = *(const void **)buf;
        }
        else
        {
          uint64_t v24 = 0;
        }
        CACFDictionary::operator=((uint64_t)&v94, v24);
        CACFArray::~CACFArray((CACFArray *)buf);
      }
    }
    CFArrayRef v121 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    __int16 v122 = 257;
    CACFArray::GetCACFArray(&v94, 0, (CACFArray *)&v121);
    CFArrayRef v119 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    __int16 v120 = 257;
    CACFDictionary::GetCACFArray(&theDicta, @"ModalFIRs", (CACFArray *)&v119);
    CFArrayRef v107 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    __int16 v108 = 257;
    CACFArray::GetCACFArray(&v119, 0, (CACFArray *)&v107);
    if (v107)
    {
      unsigned int v25 = CFArrayGetCount(v107);
      int v26 = v25 - 1;
      CFArrayRef v27 = v121;
      if (!v121)
      {
        if (v25) {
          goto LABEL_190;
        }
        goto LABEL_62;
      }
    }
    else
    {
      unsigned int v25 = 0;
      CFArrayRef v27 = v121;
      int v26 = -1;
      if (!v121)
      {
LABEL_62:
        CFHelper::extractVectorOfVectors<float>((uint64_t *)buf, &v94);
        uint64_t v31 = *(void *)buf;
        uint64_t v30 = *(void *)&buf[8];
        LODWORD(value) = 0;
        std::vector<float>::vector(&__p, (2 * v26) | 1u, &value);
        std::vector<std::vector<float>>::vector(&valuePtr, 0xAAAAAAAAAAAAAAABLL * ((v30 - v31) >> 3), (uint64_t)&__p);
        if (__p)
        {
          v106 = __p;
          operator delete(__p);
        }
        uint64_t v32 = *(void *)buf;
        if (*(void *)&buf[8] != *(void *)buf)
        {
          unint64_t v33 = 0;
          if ((unint64_t)((*(void *)&buf[8] - *(void *)buf) / 24) <= 1) {
            uint64_t v34 = 1;
          }
          else {
            uint64_t v34 = (*(void *)&buf[8] - *(void *)buf) / 24;
          }
          do
          {
            int v35 = 0;
            unsigned int v36 = (int **)(v32 + 24 * v33);
            float v37 = *v36;
            uint64_t v38 = v36[1] - *v36;
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (v118 - valuePtr);
            float v40 = &valuePtr[3 * v33];
            uint64_t v41 = v25;
            do
            {
              if (!v38) {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              if (v39 <= v33) {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              if (v35 <= 1) {
                int v42 = 1;
              }
              else {
                int v42 = v35;
              }
              unint64_t v43 = (v42 - 1);
              if (v43 >= ((unsigned char *)v40[1] - (unsigned char *)*v40) >> 2) {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              int v44 = *v37++;
              *((_DWORD *)*v40 + v43) = v44;
              v35 += 2;
              --v38;
              --v41;
            }
            while (v41);
            ++v33;
          }
          while (v33 != v34);
        }
        std::string __p = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        LOWORD(v106) = 257;
        float v45 = valuePtr;
        float v46 = v118;
        if (valuePtr != v118)
        {
          float v47 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          do
          {
            CFDictionaryRef v48 = CFArrayCreateMutable(0, 0, v47);
            value = v48;
            __int16 v104 = 257;
            int v50 = (float *)*v45;
            __int16 v49 = (float *)v45[1];
            if (*v45 != v49)
            {
              do
                CACFArray::AppendFloat32((CFMutableArrayRef *)&value, *v50++);
              while (v50 != v49);
              CFDictionaryRef v48 = value;
            }
            if (__p) {
              BOOL v51 = BYTE1(v106) == 0;
            }
            else {
              BOOL v51 = 1;
            }
            if (!v51) {
              CFArrayAppendValue((CFMutableArrayRef)__p, v48);
            }
            CACFArray::~CACFArray((CACFArray *)&value);
            v45 += 3;
          }
          while (v45 != v46);
        }
        CACFArray::operator=((uint64_t)&v94, (uint64_t)&__p);
        CACFArray::~CACFArray((CACFArray *)&__p);
        std::string __p = &valuePtr;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        unsigned int valuePtr = (void **)buf;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&valuePtr);
LABEL_89:
        *(void *)buf = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        *(_WORD *)&buf[8] = 257;
        CACFDictionary::GetCACFArray(&theDicta, @"BeamFIRs", (CACFArray *)buf);
        unint64_t v52 = *(const void **)buf;
        std::string __p = 0;
        CACFArray::GetCFType((CFArrayRef *)buf, 0, (const void **)&__p);
        float v53 = __p;
        CFTypeID v54 = CFGetTypeID(__p);
        if (v54 == CFArrayGetTypeID())
        {
          CACFDictionary::operator=((uint64_t)&v92, v52);
        }
        else
        {
          CFTypeID v55 = CFGetTypeID(v53);
          if (v55 == CFNumberGetTypeID())
          {
            CFStringRef v56 = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            unsigned int valuePtr = v56;
            LOWORD(v118) = 257;
            if (v56)
            {
              CFArrayAppendValue((CFMutableArrayRef)v56, v52);
              float v57 = valuePtr;
            }
            else
            {
              float v57 = 0;
            }
            CACFDictionary::operator=((uint64_t)&v92, v57);
            CACFArray::~CACFArray((CACFArray *)&valuePtr);
          }
        }
        CACFArray::~CACFArray((CACFArray *)buf);
        CACFArray::~CACFArray((CACFArray *)&v107);
        CACFArray::~CACFArray((CACFArray *)&v119);
        CACFArray::~CACFArray((CACFArray *)&v121);
        CACFArray::~CACFArray((CACFArray *)&v109);
        goto LABEL_97;
      }
    }
    int v28 = CFArrayGetCount(v27);
    CFArrayRef v29 = v121;
    if (v25 != v28)
    {
      if (!v121 || ((2 * v26) | 1) != CFArrayGetCount(v121)) {
LABEL_190:
      }
        __assert_rtn("GetBeamArrays", "AUCircArray.mm", 737, "firstBeamComp.GetNumberItems() == algoOrder + 1 || firstBeamComp.GetNumberItems() == algoOrder * 2 + 1");
      CFArrayRef v29 = v121;
    }
    if (v29) {
      LODWORD(v29) = CFArrayGetCount(v29);
    }
    if (v29 != v25) {
      goto LABEL_89;
    }
    goto LABEL_62;
  }
LABEL_97:
  if (v94) {
    int v58 = CFArrayGetCount(v94);
  }
  else {
    int v58 = 0;
  }
  int v59 = (int)v92;
  if (v92) {
    int v59 = CFArrayGetCount(v92);
  }
  if (v58 != v59)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&valuePtr, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 812;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = (CFArrayRef *)&valuePtr;
      __int16 v115 = 2080;
      v116 = "Number of beam compositions and beam FIRs does not match";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    float v81 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v81, "Number of beam compositions and beam FIRs does not match", -1);
  }
  unsigned int valuePtr = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  LOWORD(v118) = 257;
  CACFDictionary::GetCACFArray(&theDicta, @"ModalFIRs", (CACFArray *)&valuePtr);
  std::string __p = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  LOWORD(v106) = 257;
  CACFArray::GetCACFArray((CFArrayRef *)&valuePtr, 0, (CACFArray *)&__p);
  CFArrayRef v109 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v110 = 257;
  CACFArray::GetCACFArray(&v94, 0, (CACFArray *)&v109);
  if (__p)
  {
    int v60 = CFArrayGetCount((CFArrayRef)__p);
    CFArrayRef v61 = (const __CFArray *)__p;
    unsigned int v62 = (_DWORD *)((char *)this + 3000);
    *((_DWORD *)this + 75std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v60 - 1;
    if (v61) {
      int v63 = CFArrayGetCount(v61);
    }
    else {
      int v63 = 0;
    }
  }
  else
  {
    int v63 = 0;
    unsigned int v62 = (_DWORD *)((char *)this + 3000);
    *((_DWORD *)this + 75std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = -1;
  }
  if (!v109 || 2 * v63 - 1 != CFArrayGetCount(v109))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v121, 0xFFFFFFFF);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 823;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = &v121;
      __int16 v115 = 2080;
      v116 = "Number of modal filters doesn't match what's expected from beam compositions";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    int v74 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v74, "Number of modal filters doesn't match what's expected from beam compositions", -1);
  }
  CFArrayRef v121 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v122 = 257;
  CACFArray::GetCACFArray(&v94, 0, (CACFArray *)&v121);
  int v64 = (int)v121;
  if (v121) {
    int v64 = CFArrayGetCount(v121);
  }
  if (v64 != *v62 + 1)
  {
    if (!v121) {
      goto LABEL_182;
    }
    if (((2 * *v62) | 1) == CFArrayGetCount(v121)) {
      goto LABEL_115;
    }
    if (v121) {
      unsigned int v85 = CFArrayGetCount(v121);
    }
    else {
LABEL_182:
    }
      unsigned int v85 = 0;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v119, v85);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCircArray.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 827;
      __int16 v113 = 2080;
      p_unsigned int valuePtr = &v119;
      __int16 v115 = 2080;
      v116 = "Beam compositions size doesn't match expected from algo order";
      _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    uint64_t v86 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v86, "Beam compositions size doesn't match expected from algo order", v85);
  }
LABEL_115:
  CFArrayRef v119 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v120 = 257;
  CFArrayRef v107 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v108 = 257;
  value = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v104 = 257;
  CFTypeRef cf = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v91 = 257;
  CFTypeRef v88 = 0;
  char v89 = 1;
  if (CFDictionaryContainsKey(theDicta, @"EQBiQuad"))
  {
    CACFDictionary::GetCACFArray(&theDicta, @"EQBiQuad", (CACFArray *)&v119);
    if (v119)
    {
      if (-858993459 * CFArrayGetCount(v119) >= 0x33333334)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v111, 0xFFFFFFFF);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "AUCircArray.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 834;
          __int16 v113 = 2080;
          p_unsigned int valuePtr = (CFArrayRef *)v111;
          __int16 v115 = 2080;
          v116 = "EQBQ array length not a multiple of 5, invalid";
          _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        float v87 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v87, "EQBQ array length not a multiple of 5, invalid", -1);
      }
    }
  }
  if (CFDictionaryContainsKey(theDicta, @"DriverBQs"))
  {
    CACFDictionary::GetCACFArray(&theDicta, @"DriverBQs", (CACFArray *)&v107);
    int v65 = (int)v107;
    if (v107) {
      int v65 = CFArrayGetCount(v107);
    }
    if (v65 != v15)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v111, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AUCircArray.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 838;
        __int16 v113 = 2080;
        p_unsigned int valuePtr = (CFArrayRef *)v111;
        __int16 v115 = 2080;
        v116 = "Driver BQ array does not have the same number of drivers as spksInRing";
        _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      uint64_t v83 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v83, "Driver BQ array does not have the same number of drivers as spksInRing", -1);
    }
  }
  if (CFDictionaryContainsKey(theDicta, @"DriverMasks"))
  {
    CACFDictionary::GetCACFArray(&theDicta, @"DriverMasks", (CACFArray *)&value);
    int v66 = (int)value;
    if (value) {
      int v66 = CFArrayGetCount((CFArrayRef)value);
    }
    if (v66 != v15)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v111, 0xFFFFFFFF);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AUCircArray.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 842;
        __int16 v113 = 2080;
        p_unsigned int valuePtr = (CFArrayRef *)v111;
        __int16 v115 = 2080;
        v116 = "Driver masks array does not have the same number of drivers as spksInRing";
        _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      unint64_t v84 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v84, "Driver masks array does not have the same number of drivers as spksInRing", -1);
    }
  }
  if (CFDictionaryContainsKey(theDicta, @"BeamDescriptions")) {
    CACFDictionary::GetCACFArray(&theDicta, @"BeamDescriptions", (CACFArray *)&cf);
  }
  if (CFDictionaryContainsKey(theDicta, @"Version"))
  {
    char v89 = 1;
    if (theDicta)
    {
      float v67 = CFDictionaryGetValue(theDicta, @"Version");
      CFStringRef v68 = v67;
      if (v67)
      {
        CFTypeID v69 = CFGetTypeID(v67);
        if (v69 == CFStringGetTypeID()) {
          CACFString::operator=((uint64_t)&v88, v68);
        }
      }
    }
  }
  int v70 = CFDictionaryContainsKey(theDicta, @"LatencySamples");
  float v71 = (int *)((char *)this + 2984);
  if (v70) {
    CACFDictionary::GetSInt32((uint64_t)theDicta, @"LatencySamples", v71);
  }
  else {
    *float v71 = 0;
  }
  CACFArray::operator=((uint64_t)this + 2824, (uint64_t)&theArray);
  CACFArray::operator=((uint64_t)this + 2840, (uint64_t)&Mutable);
  CACFArray::operator=((uint64_t)this + 2856, (uint64_t)&v94);
  CACFArray::operator=((uint64_t)this + 2872, (uint64_t)&v92);
  CACFArray::operator=((uint64_t)this + 2888, (uint64_t)&valuePtr);
  CACFArray::operator=((uint64_t)this + 2968, (uint64_t)&cf);
  CACFString::operator=((uint64_t)this + 2952, (uint64_t)&v88);
  CACFArray::operator=((uint64_t)this + 2904, (uint64_t)&v119);
  CACFArray::operator=((uint64_t)this + 2920, (uint64_t)&v107);
  CACFArray::operator=((uint64_t)this + 2936, (uint64_t)&value);
  CACFDictionary::operator=((uint64_t)this + 2808, theDict);
  CFArrayRef v72 = (const __CFArray *)*((void *)this + 357);
  if (v72) {
    LODWORD(v72) = CFArrayGetCount(v72);
  }
  if (v72 != Count)
  {
    uint64_t v73 = 8;
    do
    {
      (*(void (**)(AUCircArray *, uint64_t, void, uint64_t))(*(void *)this + 432))(this, 4, 0, v73);
      uint64_t v73 = (v73 + 1);
    }
    while (v73 != 16);
    (*(void (**)(AUCircArray *, uint64_t, void, void))(*(void *)this + 432))(this, 4, 0, 0);
  }
  CACFString::~CACFString((CACFString *)&v88);
  CACFArray::~CACFArray((CACFArray *)&cf);
  CACFArray::~CACFArray((CACFArray *)&value);
  CACFArray::~CACFArray((CACFArray *)&v107);
  CACFArray::~CACFArray((CACFArray *)&v119);
  CACFArray::~CACFArray((CACFArray *)&v121);
  CACFArray::~CACFArray((CACFArray *)&v109);
  CACFArray::~CACFArray((CACFArray *)&__p);
  CACFArray::~CACFArray((CACFArray *)&valuePtr);
  CACFArray::~CACFArray((CACFArray *)&v92);
  CACFArray::~CACFArray((CACFArray *)&v94);
  if (v96.__begin_)
  {
    v96.__end_ = v96.__begin_;
    operator delete(v96.__begin_);
  }
  CACFArray::~CACFArray((CACFArray *)&Mutable);
  CACFArray::~CACFArray((CACFArray *)&theArray);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDicta);
}

void sub_1BB5AD498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  CACFNumber::~CACFNumber((CACFNumber *)(v33 - 208));
  CACFArray::~CACFArray((CACFArray *)&a20);
  CACFArray::~CACFArray((CACFArray *)&a22);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a24);
  _Unwind_Resume(a1);
}

uint64_t CACFString::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  if (*(void *)a2 != *(void *)a1)
  {
    if (*(void *)a1) {
      BOOL v5 = *(unsigned char *)(a1 + 8) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)a1);
      uint64_t v3 = *(const void **)a2;
    }
    *(void *)a1 = v3;
    int v6 = *(unsigned __int8 *)(a2 + 8);
    *(unsigned char *)(a1 + 8) = v6;
    if (v6) {
      BOOL v7 = v3 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      CFRetain(v3);
    }
  }
  return a1;
}

uint64_t AUCircArray::PresetWasSet(uint64_t this)
{
  return this;
}

uint64_t AUJBase::CanBypass(AUJBase *this)
{
  return 0;
}

void *AUCircArray::GetValidChannelCounts@<X0>(void *a1@<X8>)
{
  int v3 = -65537;
  return std::vector<AUChannelInfo>::vector(a1, &v3);
}

void *std::vector<AUChannelInfo>::vector(void *a1, _DWORD *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  CFArrayRef v4 = operator new(4uLL);
  *a1 = v4;
  a1[1] = v4;
  a1[2] = v4 + 1;
  *CFArrayRef v4 = *a2;
  a1[1] = v4 + 1;
  return a1;
}

uint64_t AUJBase::Version(AUJBase *this)
{
  return 0;
}

BOOL AUJBase::StreamFormatWritable(AUJBase *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUJBase::SupportsTail(AUJBase *this)
{
  return 1;
}

double AUCircArray::GetLatency(AUCircArray *this)
{
  return *((double *)this + 374);
}

uint64_t AUCircArray::NewFactoryPresetSet(AUCircArray *this, const AUPreset *a2)
{
  uint64_t v3 = 0;
  SInt32 presetNumber = a2->presetNumber;
  for (char i = 1; ; char i = 0)
  {
    int v6 = (const AUPreset *)&kPresets[4 * v3];
    if (presetNumber == v6->presetNumber) {
      break;
    }
    char v7 = i;
    uint64_t v3 = 1;
    if ((v7 & 1) == 0) {
      return 4294956445;
    }
  }
  if (presetNumber == 1)
  {
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 32, 0, 0, 0, 20.0);
    uint64_t v10 = 0;
    do
    {
      (*(void (**)(AUCircArray *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, v10, 0, 0, 0, 0.0);
      (*(void (**)(AUCircArray *, void, void, void, void, double))(*(void *)this + 152))(this, (v10 + 8), 0, 0, 0, 0.0);
      (*(void (**)(AUCircArray *, void, void, void, void, float))(*(void *)this + 152))(this, (v10 + 16), 0, 0, 0, 1.0);
      (*(void (**)(AUCircArray *, void, void, void, void, double))(*(void *)this + 152))(this, (v10 + 24), 0, 0, 0, 0.0);
      uint64_t v10 = (v10 + 1);
    }
    while (v10 != 8);
  }
  else if (!presetNumber)
  {
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 32, 0, 0, 0, 20.0);
    (*(void (**)(AUCircArray *, void, void, void, void, float))(*(void *)this + 152))(this, 0, 0, 0, 0, 30.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 1, 0, 0, 0, 30.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, 2, 0, 0, 0, 0.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, 3, 0, 0, 0, 0.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 4, 0, 0, 0, -90.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 5, 0, 0, 0, 90.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 8, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 9, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 10, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 11, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 12, 0, 0, 0, 2.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 13, 0, 0, 0, 2.0);
    uint64_t v9 = 16;
    do
    {
      (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, v9, 0, 0, 0, 1.0);
      (*(void (**)(AUCircArray *, void, void, void, void, double))(*(void *)this + 152))(this, (v9 + 8), 0, 0, 0, 0.0);
      uint64_t v9 = (v9 + 1);
    }
    while (v9 != 24);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 18, 0, 0, 0, 0.707);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 19, 0, 0, 0, 0.707);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, 22, 0, 0, 0, 0.0);
    (*(void (**)(AUCircArray *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, 23, 0, 0, 0, 0.0);
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v6);
  return 0;
}

uint64_t AUCircArray::GetPresets(AUCircArray *this, const __CFArray **a2)
{
  if (a2)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, 0);
    CFArrayAppendValue(Mutable, kPresets);
    CFArrayAppendValue(Mutable, &dword_1E623F2A8);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUCircArray::GetParameterInfo(AUCircArray *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  AudioUnitParameterOptions v4 = -939524096;
  buffer->AudioUnitParameterOptions flags = -939524096;
  if (a2) {
    return 4294956418;
  }
  if (a3 <= 7)
  {
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Beam Angle %u", a3 + 1);
    buffer->cfNameString = v7;
    AudioUnitParameterOptions v4 = buffer->flags | 0x8000010;
LABEL_5:
    buffer->AudioUnitParameterOptions flags = v4;
    CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 0xC3B400000000000FLL;
    _D0 = 1135869952;
    goto LABEL_18;
  }
  if (a3 <= 0xF)
  {
    CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Beam Type %u", a3 - 7);
    buffer->cfNameString = v10;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 1;
    CFArrayRef v11 = (const __CFArray *)*((void *)this + 357);
    if (!v11 || (unsigned int Count = CFArrayGetCount(v11), Count <= 1)) {
      unsigned int Count = 2;
    }
    HIDWORD(_Dstd::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    *(float *)&_D0 = (float)(Count - 1);
    goto LABEL_18;
  }
  if (a3 <= 0x17)
  {
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Gain %u", a3 - 15);
    buffer->cfNameString = v13;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 14;
    __asm { FMOV            V0.2S, #1.0 }
    goto LABEL_18;
  }
  if (a3 <= 0x1F)
  {
    CFStringRef v18 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Delay %u", a3 - 23);
    buffer->cfNameString = v18;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 24;
    _D0 = 1148846080;
    goto LABEL_18;
  }
  if (a3 == 33)
  {
    CFStringRef v7 = @"Angle Offset";
    buffer->cfNameString = @"Angle Offset";
    goto LABEL_5;
  }
  if (a3 != 32) {
    return 4294956418;
  }
  buffer->cfNameString = @"Blend Time";
  buffer->AudioUnitParameterOptions flags = -939524096;
  CFStringGetCString(@"Blend Time", buffer->name, 52, 0x8000100u);
  *(void *)&buffer->unit = 0x3F80000000000018;
  _D0 = 0x42200000461C4000;
LABEL_18:
  uint64_t result = 0;
  *(void *)&buffer->maxCFDictionaryRef Value = _D0;
  return result;
}

uint64_t AUCircArray::ProcessMultipleBufferLists(atomic_uchar *this, unsigned int *a2, AudioDSP::Utility *a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  if (a4 != 1 || a6 != 1) {
    __assert_rtn("ProcessMultipleBufferLists", "AUCircArray.mm", 443, "inNumberInputBufferLists == 1 && inNumberOutputBufferLists == 1");
  }
  char v11 = 0;
  CFTypeID v12 = (CircArrayKernel **)(this + 2752);
  CFStringRef v13 = this + 704;
  do
  {
    char v14 = v11;
    BOOL v15 = ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::pop((uint64_t)v13, v12);
    char v11 = 1;
  }
  while (v15);
  unsigned int v16 = *v12;
  if (*((unsigned char *)*v12 + 116))
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    int v17 = atomic_exchange(this + 632, 0) & 1;
    unsigned int v16 = (CircArrayKernel *)*((void *)this + 344);
    if (!(v14 & 1 | (v17 == 0))) {
      *((unsigned char *)v16 + 128) = 1;
    }
  }
  AUCircArray::ForwardParamsToKernel((uint64_t)this, (uint64_t)v16, (v17 & 1) == 0);
  uint64_t mNumberBuffers = (*a5)->mNumberBuffers;
  uint64_t v19 = (*a7)->mNumberBuffers;
  if (mNumberBuffers)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 8 * mNumberBuffers;
    uint64_t v22 = 16;
    do
    {
      *(void *)(*((void *)this + 345) + v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)((char *)&(*a5)->mNumberBuffers + v22);
      v20 += 8;
      v22 += 16;
    }
    while (v21 != v20);
  }
  v174 = v12;
  if (v19)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 8 * v19;
    uint64_t v25 = 16;
    do
    {
      *(void *)(*((void *)this + 348) + v23) = *(void *)((char *)&(*a7)->mNumberBuffers + v25);
      v23 += 8;
      v25 += 16;
    }
    while (v24 != v23);
  }
  v178 = a7;
  LOWORD(v186.mSampleRate) = 0;
  int v26 = (const AudioBufferList *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 80), 0) + 80);
  unsigned int v176 = this;
  uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 128), 0);
  v182 = a3;
  AudioDSP::Utility::DetectNonFinites(a3, *a5, v26, (AudioStreamBasicDescription *)((char *)&v186.mSampleRate + 1), v28);
  if (BYTE1(v186.mSampleRate) && this[3004])
  {
    if (AUCircArrayLogScope(void)::once != -1) {
      dispatch_once(&AUCircArrayLogScope(void)::once, &__block_literal_global_16046);
    }
    CFArrayRef v29 = a7;
    if (AUCircArrayLogScope(void)::scope)
    {
      uint64_t v30 = *(id *)AUCircArrayLogScope(void)::scope;
      if (!v30)
      {
LABEL_42:
        float v46 = *v29;
        if (v46->mNumberBuffers)
        {
          UInt32 v47 = 0;
          p_mData = &v46->mBuffers[0].mData;
          do
          {
            bzero(*p_mData, *((unsigned int *)p_mData - 1));
            ++v47;
            p_mData += 2;
          }
          while (v47 < v46->mNumberBuffers);
        }
        return 0;
      }
    }
    else
    {
      uint64_t v30 = MEMORY[0x1E4F14500];
      id v45 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(AudioFormatID *)((char *)&v186.mFormatID + 2) = 136315394;
      *(void *)((char *)&v186.mFormatFlags + 2) = "AUCircArray.mm";
      HIWORD(v186.mFramesPerPacket) = 1024;
      v186.mBytesPerFrame = 481;
      _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d AUCircArray: (InputSignals) is NOT finite", (uint8_t *)&v186.mFormatID + 2, 0x12u);
    }

    CFArrayRef v29 = a7;
    goto LABEL_42;
  }
  uint64_t v31 = *((void *)this + 344);
  uint64_t v179 = *((void *)this + 345);
  v172 = (AudioBufferList *)(Element + 80);
  uint64_t v173 = *((void *)this + 348);
  int v180 = *(_DWORD *)(v31 + 2380);
  if (v180 != a3)
  {
    uint64_t v32 = *(void **)(v31 + 2464);
    uint64_t v33 = *(void *)(v31 + 2472) - (void)v32;
    if (v33 >= 1) {
      bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
    }
  }
  char v34 = 0;
  do
  {
    char v35 = v34;
    BOOL v36 = ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::pop(v31 + 320, (void ***)(v31 + 208));
    char v34 = 1;
  }
  while (v36);
  int v37 = *(unsigned __int8 *)(v31 + 129);
  if (*(unsigned char *)(v31 + 128) || v35 & 1 | (*(unsigned char *)(v31 + 129) != 0))
  {
    *(unsigned char *)(v31 + 128) = 0;
    if (v37)
    {
      unint64_t v38 = 0;
      *(unsigned char *)(v31 + 129) = 0;
      char v39 = 1;
      do
      {
        char v40 = v39;
        uint64_t v41 = *(void *)(v31 + 2856);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2864) - v41) >> 3) <= v38) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        if (*(_DWORD *)(v31 + 2368))
        {
          unint64_t v42 = 0;
          unint64_t v43 = (void *)(v41 + 24 * v38);
          do
          {
            *(_DWORD *)((char *)&v186.mSampleRate + 2) = v42 + 16;
            *(void *)((char *)&v186.mFormatID + 2) = (char *)&v186.mSampleRate + 2;
            int v44 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v31 + 8), (unsigned int *)((char *)&v186.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v186.mFormatID + 2));
            if (v42 >= (uint64_t)(v43[1] - *v43) >> 2) {
              std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
            }
            *(_DWORD *)(*v43 + 4 * v42++) = *((_DWORD *)v44 + 8);
          }
          while (v42 < *(unsigned int *)(v31 + 2368));
        }
        CircArrayKernel::Process(float const* const*,float * const*,unsigned int)::$_0::operator()(v31, v38);
        char v39 = 0;
        unint64_t v38 = 1;
      }
      while ((v40 & 1) != 0);
    }
    else
    {
      double v49 = *(float *)(v31 + 40);
      float v50 = *(float *)(v31 + 2384);
      *(_DWORD *)((char *)&v186.mSampleRate + 2) = 32;
      *(void *)((char *)&v186.mFormatID + 2) = (char *)&v186.mSampleRate + 2;
      float v51 = rintf((float)(v50* *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v31 + 8), (unsigned int *)((char *)&v186.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v186.mFormatID + 2))+ 8))/ 1000.0);
      unsigned int v52 = (uint64_t)v51 & ~((uint64_t)v51 >> 63);
      *(_DWORD *)(v31 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v52;
      *(_DWORD *)(v31 + 124) = v52;
      if (v52 <= 1) {
        unsigned int v52 = 1;
      }
      float32x2_t v53 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(float *)(v31 + 40) > 0.95), 0x1FuLL)), (int8x8_t)1065353216, (int8x8_t)0x3F80000000000000);
      if (*(unsigned char *)(v31 + 116))
      {
        *(void *)(v31 + 96) = 2;
        *(_DWORD *)(v31 + 104) = v52;
        *(float32x2_t *)(v31 + 108) = v53;
        *(unsigned char *)(v31 + 118) = 1;
      }
      else
      {
        *(void *)(v31 + 64) = 2;
        *(_DWORD *)(v31 + 72) = v52;
        *(float32x2_t *)(v31 + 76) = v53;
        *(_WORD *)(v31 + 116) = 257;
        *(_DWORD *)(v31 + 48) = 0;
        *(float *)(v31 + 44) = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v53, 1), v53).f32[0] / (float)v52;
      }
      uint64_t v54 = *(void *)(v31 + 2856);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2864) - v54) >> 3) <= (v49 <= 0.95)) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(_DWORD *)(v31 + 2368))
      {
        unint64_t v55 = 0;
        CFStringRef v56 = (void *)(v54 + 24 * (v49 <= 0.95));
        do
        {
          *(_DWORD *)((char *)&v186.mSampleRate + 2) = v55 + 16;
          *(void *)((char *)&v186.mFormatID + 2) = (char *)&v186.mSampleRate + 2;
          float v57 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v31 + 8), (unsigned int *)((char *)&v186.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v186.mFormatID + 2));
          if (v55 >= (uint64_t)(v56[1] - *v56) >> 2) {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          *(_DWORD *)(*v56 + 4 * v55++) = *((_DWORD *)v57 + 8);
        }
        while (v55 < *(unsigned int *)(v31 + 2368));
      }
      CircArrayKernel::Process(float const* const*,float * const*,unsigned int)::$_0::operator()(v31, v49 <= 0.95);
    }
  }
  int v181 = *(unsigned __int8 *)(v31 + 116);
  if (*(unsigned char *)(v31 + 116))
  {
    unsigned int v177 = 0;
    unsigned int v175 = 1;
  }
  else
  {
    unsigned int v175 = *(float *)(v31 + 40) > 0.95;
    unsigned int v177 = v175;
  }
  if (*(_DWORD *)(v31 + 2368))
  {
    uint64_t v58 = 0;
    uint64_t v185 = 0;
    uint64_t v59 = 0;
    unint64_t v60 = 0;
    do
    {
      float v61 = *(float *)(v31 + 2384);
      *(_DWORD *)((char *)&v186.mSampleRate + 2) = v60 + 24;
      *(void *)((char *)&v186.mFormatID + 2) = (char *)&v186.mSampleRate + 2;
      unsigned int v62 = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v31 + 8), (unsigned int *)((char *)&v186.mSampleRate + 2), (uint64_t)&std::piecewise_construct, (unsigned int **)((char *)&v186.mFormatID + 2));
      uint64_t v63 = *(void *)(v31 + 2392);
      if (0x8E38E38E38E38E39 * ((*(void *)(v31 + 2400) - v63) >> 3) <= v60) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      float v64 = rintf((float)(v61 * *((float *)v62 + 8)) / 1000.0);
      uint64_t v65 = (uint64_t)v64 & ~((uint64_t)v64 >> 63);
      if (*(void *)(v63 + v59 + 64) < (unint64_t)v65) {
        __assert_rtn("SetDelaySamples", "CircularDelay.cpp", 40, "numSamples <= mMaxDelaySamps");
      }
      unint64_t v66 = (uint64_t)v64 & ~((uint64_t)v64 >> 63);
      unint64_t v67 = *(void *)(v63 + v59);
      if (v67 >= v66)
      {
        CFStringRef v68 = (void *)(v63 + v59);
        v68[1] = v66;
        uint64_t v69 = v68[5];
        uint64_t v70 = v69 - v66;
        uint64_t v71 = (int)v67 - (int)v65 + (int)v69;
        if ((int)v69 < (int)v65) {
          uint64_t v72 = v71;
        }
        else {
          uint64_t v72 = v70;
        }
        v68[6] = v72;
      }
      if (v180 == v182)
      {
        uint64_t v73 = *(void *)(v31 + 2392);
        if (0x8E38E38E38E38E39 * ((*(void *)(v31 + 2400) - v73) >> 3) <= v60) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v74 = *(void *)(v31 + 2832);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2840) - v74) >> 3) <= v60) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        unsigned int v75 = (const void **)(v179 + v58);
      }
      else
      {
        if (v182) {
          memmove(*(void **)(v31 + 2464), *(const void **)(v179 + 8 * v60), 4 * v182);
        }
        uint64_t v73 = *(void *)(v31 + 2392);
        if (0x8E38E38E38E38E39 * ((*(void *)(v31 + 2400) - v73) >> 3) <= v60) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v74 = *(void *)(v31 + 2832);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2840) - v74) >> 3) <= v60) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        unsigned int v75 = (const void **)(v31 + 2464);
      }
      unint64_t v76 = *(unsigned int *)(v31 + 2380);
      std::string v77 = (void *)(v73 + v59);
      if (*(void *)(v73 + v59 + 56) < v76) {
        __assert_rtn("Process", "CircularDelay.cpp", 56, "numFrames <= mMaxFrames");
      }
      uint64_t v183 = v58;
      unint64_t v78 = v77[5];
      unint64_t v79 = *v77 - v78;
      if (v79 >= v76) {
        unint64_t v80 = *(unsigned int *)(v31 + 2380);
      }
      else {
        unint64_t v80 = *v77 - v78;
      }
      double v82 = v77 + 2;
      uint64_t v81 = v77[2];
      if (v78 >= (v77[3] - v81) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v83 = (char *)*v75;
      __dst = *(char **)(v74 + v185);
      memcpy((void *)(v81 + 4 * v78), *v75, 4 * v80);
      unint64_t v84 = *(void *)(v73 + v59);
      unint64_t v85 = v77[5] + v80;
      if (v85 >= v84) {
        uint64_t v86 = *(void *)(v73 + v59);
      }
      else {
        uint64_t v86 = 0;
      }
      unint64_t v87 = v85 - v86;
      v77[5] = v87;
      if (v79 < v76)
      {
        if (v87 >= (uint64_t)(v77[3] - *v82) >> 2) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        memcpy((void *)(*v82 + 4 * v87), &v83[4 * v80], 4 * (v76 - v80));
        v77[5] += v76 - v80;
        unint64_t v84 = *(void *)(v73 + v59);
      }
      uint64_t v88 = v73 + v59;
      unint64_t v89 = *(void *)(v73 + v59 + 48);
      unint64_t v90 = v84 - v89;
      if (v84 - v89 >= v76) {
        unint64_t v91 = v76;
      }
      else {
        unint64_t v91 = v84 - v89;
      }
      if (v89 >= (uint64_t)(v77[3] - *v82) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      memcpy(__dst, (const void *)(*v82 + 4 * v89), 4 * v91);
      unint64_t v92 = *(void *)(v73 + v59);
      unint64_t v93 = *(void *)(v88 + 48) + v91;
      if (v93 < v92) {
        unint64_t v92 = 0;
      }
      unint64_t v94 = v93 - v92;
      *(void *)(v88 + 48) = v94;
      if (v90 < v76)
      {
        if (v94 >= (uint64_t)(v77[3] - *v82) >> 2) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v95 = v76 - v91;
        memcpy(&__dst[4 * v91], (const void *)(*v82 + 4 * v94), 4 * v95);
        *(void *)(v88 + 48) += v95;
      }
      ++v60;
      v59 += 72;
      v185 += 24;
      uint64_t v58 = v183 + 8;
    }
    while (v60 < *(unsigned int *)(v31 + 2368));
  }
  vDSP_biquadm(*(vDSP_biquadm_Setup *)(v31 + 2488), *(const float ***)(v31 + 2504), 1, *(float ***)(v31 + 2528), 1, v182);
  if (v181)
  {
    uint64_t v97 = *(void *)(v31 + 3048);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3056) - v97) >> 3) <= 1) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    __int16 v98 = *(_DWORD **)(v97 + 24);
    vDSP_Length v99 = *(unsigned int *)(v31 + 2380);
    if (v99 > (uint64_t)(*(void *)(v97 + 32) - (void)v98) >> 2) {
      __assert_rtn("Process", "ParamRamper.cpp", 53, "outParamValues.size() >= inNumFrames");
    }
    if (*(unsigned char *)(v31 + 117))
    {
      if (v99)
      {
        unint64_t v100 = 0;
        int v101 = *(unsigned __int8 *)(v31 + 116);
        int v102 = 1;
        do
        {
          if (v100 >= *(unsigned int *)(v31 + 68))
          {
            uint64_t v103 = *(void *)(v97 + 24);
            uint64_t v104 = *(void *)(v97 + 32);
            if (v102 && !v101)
            {
              int v101 = 1;
              *(unsigned char *)(v31 + 116) = 1;
              *(_DWORD *)(v31 + 48) = 0;
              *(float *)(v31 + 44) = (float)(*(float *)(v31 + 80) - *(float *)(v31 + 76))
                                   / (float)*(unsigned int *)(v31 + 72);
LABEL_113:
              if (v100 >= (v104 - v103) >> 2) {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              unsigned int v105 = *(_DWORD *)(v31 + 48);
              *(float *)(v103 + 4 * v10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(float *)(v31 + 76) + (float)((float)v105 * *(float *)(v31 + 44));
              *(_DWORD *)(v31 + 48) = v105 + 1;
              if (v105 + 1 >= *(_DWORD *)(v31 + 72))
              {
                *(_WORD *)(v31 + 116) = 0;
                *(_DWORD *)(v31 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v31 + 80);
                int v102 = *(unsigned __int8 *)(v31 + 118);
                int v101 = 0;
                if (*(unsigned char *)(v31 + 118))
                {
                  long long v106 = *(_OWORD *)(v31 + 100);
                  *(_OWORD *)(v31 + 52) = *(_OWORD *)(v31 + 84);
                  *(_OWORD *)(v31 + 68) = v106;
                  int v102 = 1;
                  *(_WORD *)(v31 + 117) = 1;
                }
              }
              goto LABEL_117;
            }
          }
          else
          {
            uint64_t v103 = *(void *)(v97 + 24);
            uint64_t v104 = *(void *)(v97 + 32);
          }
          if (v101) {
            goto LABEL_113;
          }
          if (v100 >= (v104 - v103) >> 2) {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          int v101 = 0;
          *(_DWORD *)(v103 + 4 * v10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v31 + 40);
LABEL_117:
          ++v100;
        }
        while (v99 != v100);
      }
    }
    else if (v99)
    {
      int v107 = *(_DWORD *)(v31 + 2380);
      do
      {
        *v98++ = *(_DWORD *)(v31 + 40);
        --v107;
      }
      while (v107);
    }
    *(AudioFormatID *)((char *)&v186.mFormatID + 2) = 1065353216;
    *(_DWORD *)((char *)&v186.mSampleRate + 2) = -1082130432;
    vDSP_vsmsa(*(const float **)(v97 + 24), 1, (const float *)((char *)&v186.mSampleRate + 2), (const float *)((char *)&v186.mFormatID + 2), *(float **)v97, 1, v99);
  }
  if (*(_DWORD *)(v31 + 2368))
  {
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    unint64_t v112 = 0;
    do
    {
      if (v181)
      {
        __int16 v113 = *(const float ***)(v31 + 3048);
        if (*(const float ***)(v31 + 3056) == v113) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        v114 = *(void **)(v31 + 2856);
        if (*(void **)(v31 + 2864) == v114) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        vDSP_vsmul(*v113, 1, (const float *)(*v114 + v111), *(float **)(v31 + 2928), 1, *(unsigned int *)(v31 + 2380));
        uint64_t v115 = *(void *)(v31 + 3048);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3056) - v115) >> 3) <= 1) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v116 = *(void *)(v31 + 2856);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2864) - v116) >> 3) <= 1) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        vDSP_vsma(*(const float **)(v115 + 24), 1, (const float *)(*(void *)(v116 + 24) + v111), *(const float **)(v31 + 2928), 1, *(float **)(v31 + 2928), 1, *(unsigned int *)(v31 + 2380));
        uint64_t v117 = *(void *)(v31 + 2952);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2960) - v117) >> 3) <= v112) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        vDSP_vmul(*(const float **)(v31 + 2928), 1, *(const float **)(v117 + v110), 1, *(float **)(v31 + 2928), 1, *(unsigned int *)(v31 + 2380));
      }
      else
      {
        uint64_t v119 = *(void *)(v31 + 2952);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2960) - v119) >> 3) <= v112) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v120 = *(void *)(v31 + 2856);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2864) - v120) >> 3) <= v177) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        vDSP_vsmul(*(const float **)(v119 + v110), 1, (const float *)(*(void *)(v120 + 24 * v177) + v111), *(float **)(v31 + 2928), 1, *(unsigned int *)(v31 + 2380));
      }
      uint64_t v121 = *(void *)(v31 + 2616);
      if (0xCF3CF3CF3CF3CF3DLL * ((*(void *)(v31 + 2624) - v121) >> 3) <= v112) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v122 = *(void *)(v31 + 2416);
      if (v112 >= (*(void *)(v31 + 2424) - v122) >> 5) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      FreqDomainConvolver::Process((DSPSplitComplex *)(v121 + v108), *(const float **)(v31 + 2928), 0, *(unsigned int *)(v31 + 2380), (void **)(v122 + v109), v118);
      ++v112;
      v111 += 4;
      v110 += 24;
      v109 += 32;
      v108 += 168;
    }
    while (v112 < *(unsigned int *)(v31 + 2368));
  }
  if (v177 <= v175)
  {
    uint64_t v123 = v177 + 333;
    uint64_t v124 = (8 * v177) | (16 * v177);
    do
    {
      SmartFIR::ProcessFreq(*(SmartFIR **)(v31 + 8 * v123), *(const DSPSplitComplex *const **)(v31 + v124 + 2680), *(float *const **)(v31 + v124 + 2728));
      unint64_t v125 = v123 - 333;
      uint64_t v126 = *(void *)(v31 + 3000);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3008) - v126) >> 3) <= v123 - 333) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v127 = *(void *)(v31 + 2976);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 2984) - v127) >> 3) <= v125) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v128 = *(void *)(v31 + 3024);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3032) - v128) >> 3) <= v125) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      vDSP_mmul(*(const float **)(v126 + v124), 1, *(const float **)(v127 + v124), 1, *(float **)(v128 + v124), 1, *(unsigned int *)(v31 + 2376), *(unsigned int *)(v31 + 2380), *(unsigned int *)(v31 + 2368));
      ++v123;
      v124 += 24;
    }
    while (v123 - v175 != 334);
  }
  unsigned int v129 = *(_DWORD *)(v31 + 2376);
  if (v181)
  {
    if (!v129) {
      goto LABEL_159;
    }
    unsigned int v130 = 0;
    uint64_t v131 = (8 * v177) | (16 * v177);
    do
    {
      uint64_t v132 = *(void *)(v31 + 3024);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3032) - v132) >> 3) <= v177) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v133 = *(void *)(v31 + 3048);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3056) - v133) >> 3) <= v177) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      vDSP_Length v134 = *(unsigned int *)(v31 + 2380);
      v135 = (float *)(*(void *)(v132 + v131) + 4 * v134 * v130);
      vDSP_vmul(v135, 1, *(const float **)(v133 + v131), 1, v135, 1, v134);
      uint64_t v136 = *(void *)(v31 + 3024);
      unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3032) - v136) >> 3);
      if (v137 <= v175) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v138 = *(void *)(v31 + 3048);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3056) - v138) >> 3) <= v175) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      if (v137 <= v177) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v139 = *(_DWORD *)(v31 + 2380) * v130;
      v140 = (float *)(*(void *)(v136 + 24 * v177) + 4 * v139);
      vDSP_vma((const float *)(*(void *)(v136 + 24 * v175) + 4 * v139), 1, *(const float **)(v138 + 24 * v175), 1, v140, 1, v140, 1, *(unsigned int *)(v31 + 2380));
      ++v130;
      unsigned int v129 = *(_DWORD *)(v31 + 2376);
    }
    while (v130 < v129);
  }
  if (v129)
  {
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    unint64_t v143 = 0;
    do
    {
      uint64_t v144 = *(void *)(v31 + 2640);
      if (0xCF3CF3CF3CF3CF3DLL * ((*(void *)(v31 + 2648) - v144) >> 3) <= v143) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v145 = *(void *)(v31 + 3024);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 3032) - v145) >> 3) <= v177) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v146 = *(void *)(v31 + 2440);
      if (v143 >= (*(void *)(v31 + 2448) - v146) >> 5) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      FreqDomainConvolver::Process((DSPSplitComplex *)(v144 + v141), (const float *)(*(void *)(v145 + 24 * v177) + 4 * (*(_DWORD *)(v31 + 2380) * v143++)), 0, *(unsigned int *)(v31 + 2380), (void **)(v146 + v142), v96);
      v142 += 32;
      v141 += 168;
    }
    while (v143 < *(unsigned int *)(v31 + 2376));
  }
LABEL_159:
  SmartFIR::ProcessFreq(*(SmartFIR **)(v31 + 2776), *(const DSPSplitComplex *const **)(v31 + 2784), *(float *const **)(v31 + 2808));
  uint64_t v147 = *(void *)(v31 + 136);
  if (*(void *)(v31 + 144) != v147)
  {
    unint64_t v148 = 0;
    int v149 = 0;
    unsigned int v150 = 1;
    do
    {
      int v151 = *(_DWORD *)(v31 + 2376);
      unint64_t v152 = (v151 * v149);
      uint64_t v153 = *(void *)(v31 + 3096);
      if (v152 >= (*(void *)(v31 + 3104) - v153) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      vDSP_Length v154 = *(unsigned int *)(v31 + 2380);
      unint64_t v155 = v151 * (v150 - 1) * v154;
      uint64_t v156 = *(void *)(v31 + 3072);
      if (v155 >= (*(void *)(v31 + 3080) - v156) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v157 = (v154 * v149);
      uint64_t v158 = *(void *)(v31 + 3120);
      if (v157 >= (*(void *)(v31 + 3128) - v158) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      vDSP_mmul((const float *)(v153 + 4 * v152), 1, (const float *)(v156 + 4 * v155), 1, (float *)(v158 + 4 * v157), 1, *(unsigned int *)(v147 + 4 * v148), v154, *(unsigned int *)(v31 + 2376));
      uint64_t v147 = *(void *)(v31 + 136);
      unint64_t v159 = (*(void *)(v31 + 144) - v147) >> 2;
      if (v159 <= v148) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      v149 += *(_DWORD *)(v147 + 4 * v148);
      unint64_t v148 = v150;
    }
    while (v159 > v150++);
  }
  uint64_t v161 = *(unsigned int *)(v31 + 2372);
  if (v161)
  {
    for (unint64_t i = 0; i != v161; ++i)
    {
      uint64_t v163 = *(void *)(v31 + 2592);
      if (i >= (*(void *)(v31 + 2600) - v163) >> 3) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(v163 + 8 * i) = *(void *)(v173 + 8 * i);
    }
  }
  vDSP_biquadm(*(vDSP_biquadm_Setup *)(v31 + 2552), *(const float ***)(v31 + 2568), 1, *(float ***)(v31 + 2592), 1, v182);
  AudioDSP::Utility::DetectNonFinites(v182, *v178, v172, &v186, v164);
  if (LOBYTE(v186.mSampleRate) && v176[3004])
  {
    if (AUCircArrayLogScope(void)::once != -1) {
      dispatch_once(&AUCircArrayLogScope(void)::once, &__block_literal_global_16046);
    }
    uint64_t v165 = v174;
    if (AUCircArrayLogScope(void)::scope)
    {
      v166 = *(id *)AUCircArrayLogScope(void)::scope;
      if (!v166)
      {
LABEL_181:
        CircArrayKernel::Reset(*v165);
        v168 = *v178;
        if ((*v178)->mNumberBuffers)
        {
          UInt32 v169 = 0;
          v170 = &v168->mBuffers[0].mData;
          do
          {
            bzero(*v170, *((unsigned int *)v170 - 1));
            ++v169;
            v170 += 2;
          }
          while (v169 < v168->mNumberBuffers);
        }
        return 0;
      }
    }
    else
    {
      v166 = MEMORY[0x1E4F14500];
      id v167 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
    {
      *(AudioFormatID *)((char *)&v186.mFormatID + 2) = 136315394;
      *(void *)((char *)&v186.mFormatFlags + 2) = "AUCircArray.mm";
      HIWORD(v186.mFramesPerPacket) = 1024;
      v186.mBytesPerFrame = 489;
      _os_log_impl(&dword_1BB0CE000, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d AUCircArray: (OutputSignals) is NOT finite", (uint8_t *)&v186.mFormatID + 2, 0x12u);
    }

    uint64_t v165 = v174;
    goto LABEL_181;
  }
  return 0;
}

BOOL ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::pop(uint64_t a1, CircArrayKernel **a2)
{
  CFStringRef v10 = 0;
  BOOL v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v10);
  if (v4)
  {
    BOOL v5 = v10;
    if (!v10) {
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    }
    int v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      uint64_t v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<CircArrayKernel>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1BB5AF7BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *AUCircArray::ForwardParamsToKernel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    LODWORD(v16) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned int **))(*(void *)a1 + 144))(a1, 33, a3, 0, &v16);
    uint64_t v10 = 0;
    float v11 = *(float *)&v16;
    while (v10 < *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0) + 108))
    {
      LODWORD(v16) = 0;
      (*(void (**)(uint64_t, uint64_t, void, void, unsigned int **))(*(void *)a1 + 144))(a1, v10, 0, 0, &v16);
      float v12 = *(float *)&v16 - v11;
      unsigned int v15 = v10;
      unsigned int v16 = &v15;
      *((float *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a2 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v12;
      LODWORD(v16) = 0;
      (*(void (**)(uint64_t, void, void, void, unsigned int **))(*(void *)a1 + 144))(a1, (v10 + 8), 0, 0, &v16);
      int v13 = (int)v16;
      unsigned int v15 = v10 + 8;
      unsigned int v16 = &v15;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a2 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v13;
      LODWORD(v16) = 0;
      (*(void (**)(uint64_t, void, void, void, unsigned int **))(*(void *)a1 + 144))(a1, (v10 + 16), 0, 0, &v16);
      int v14 = (int)v16;
      unsigned int v15 = v10 + 16;
      unsigned int v16 = &v15;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a2 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v14;
      uint64_t v10 = (v10 + 1);
    }
  }
  unsigned int v5 = 0;
  int v6 = (uint64_t **)(a2 + 8);
  while (v5 < *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a1 + 80), 0) + 108))
  {
    LODWORD(v16) = 0;
    (*(void (**)(uint64_t, void, void, void, unsigned int **))(*(void *)a1 + 144))(a1, v5 + 24, 0, 0, &v16);
    int v7 = (int)v16;
    unsigned int v15 = v5 + 24;
    unsigned int v16 = &v15;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v15, (uint64_t)&std::piecewise_construct, &v16)+ 8) = v7;
    ++v5;
  }
  LODWORD(v16) = 0;
  (*(void (**)(uint64_t, uint64_t, void, void, unsigned int **))(*(void *)a1 + 144))(a1, 32, 0, 0, &v16);
  int v8 = (int)v16;
  unsigned int v15 = 32;
  unsigned int v16 = &v15;
  uint64_t result = std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v15, (uint64_t)&std::piecewise_construct, &v16);
  *((_DWORD *)result + 8) = v8;
  return result;
}

void ___Z19AUCircArrayLogScopev_block_invoke()
{
}

CircArrayKernel *std::unique_ptr<CircArrayKernel>::reset[abi:ne180100](CircArrayKernel **a1, CircArrayKernel *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    CircArrayKernel::~CircArrayKernel(result);
    JUMPOUT(0x1C185D360);
  }
  return result;
}

void CircArrayKernel::~CircArrayKernel(CircArrayKernel *this)
{
  uint64_t v2 = (void *)*((void *)this + 390);
  if (v2)
  {
    *((void *)this + 391) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 387);
  if (v3)
  {
    *((void *)this + 388) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 384);
  if (v4)
  {
    *((void *)this + 385) = v4;
    operator delete(v4);
  }
  uint64_t v22 = (void **)((char *)this + 3048);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 3024);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 3000);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2976);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2952);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  unsigned int v5 = (void *)*((void *)this + 366);
  if (v5)
  {
    *((void *)this + 367) = v5;
    operator delete(v5);
  }
  uint64_t v22 = (void **)((char *)this + 2904);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2880);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2856);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2832);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  int v6 = (void *)*((void *)this + 351);
  if (v6)
  {
    *((void *)this + 352) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 348);
  if (v7)
  {
    *((void *)this + 349) = v7;
    operator delete(v7);
  }
  std::unique_ptr<SmartFIR>::reset[abi:ne180100]((uint64_t *)this + 347, 0);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v9 = *(void **)((char *)this + i + 2752);
    if (v9)
    {
      *(void *)((char *)this + i + 276std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9;
      operator delete(v9);
    }
  }
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    float v11 = *(void **)((char *)this + j + 2704);
    if (v11)
    {
      *(void *)((char *)this + j + 2712) = v11;
      operator delete(v11);
    }
  }
  for (uint64_t k = 2672; k != 2656; k -= 8)
    std::unique_ptr<SmartFIR>::reset[abi:ne180100]((uint64_t *)((char *)this + k), 0);
  uint64_t v22 = (void **)((char *)this + 2640);
  std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2616);
  std::vector<FreqDomainConvolver>::__destroy_vector::operator()[abi:ne180100](&v22);
  int v13 = (void *)*((void *)this + 324);
  if (v13)
  {
    *((void *)this + 325) = v13;
    operator delete(v13);
  }
  int v14 = (void *)*((void *)this + 321);
  if (v14)
  {
    *((void *)this + 322) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *((void *)this + 319);
  *((void *)this + 319) = 0;
  if (v15) {
    (*((void (**)(void))this + 320))();
  }
  unsigned int v16 = (void *)*((void *)this + 316);
  if (v16)
  {
    *((void *)this + 317) = v16;
    operator delete(v16);
  }
  int v17 = (void *)*((void *)this + 313);
  if (v17)
  {
    *((void *)this + 314) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *((void *)this + 311);
  *((void *)this + 311) = 0;
  if (v18) {
    (*((void (**)(void))this + 312))();
  }
  uint64_t v19 = (void *)*((void *)this + 308);
  if (v19)
  {
    *((void *)this + 309) = v19;
    operator delete(v19);
  }
  uint64_t v22 = (void **)((char *)this + 2440);
  std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2416);
  std::vector<CDSPSplitComplex>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v22 = (void **)((char *)this + 2392);
  std::vector<CircularDelay>::__destroy_vector::operator()[abi:ne180100](&v22);
  *((void *)this + 32) = &unk_1F14B7400;
  ca::concurrent::deferred_deletion_queue<std::vector<std::vector<float>>,10ul,std::default_delete<std::vector<std::vector<float>>>>::~deferred_deletion_queue((uint64_t)this + 320);
  std::unique_ptr<std::vector<std::vector<float>>>::reset[abi:ne180100]((void ***)this + 26, 0);
  uint64_t v22 = (void **)((char *)this + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  uint64_t v20 = (void *)*((void *)this + 20);
  if (v20)
  {
    *((void *)this + 21) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 17);
  if (v21)
  {
    *((void *)this + 18) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

uint64_t AUJBase::CanScheduleParameters(AUJBase *this)
{
  return 0;
}

uint64_t AUCircArray::SetParameter(AUCircArray *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5 = a4;
  int v6 = a3;
  unsigned int v7 = a2;
  AUJBase::SetParameter(this, a2, a3, a4, a5);
  if (!(v5 | v6) && (v7 < 0x18 || v7 == 33)) {
    atomic_store(1u, (unsigned __int8 *)this + 632);
  }
  return 0;
}

uint64_t AUCircArray::SetProperty(AUCircArray *this, int a2, int a3, int a4, CFTypeRef *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 4294956417;
  if (a4 | a3 || !a5) {
    return v5;
  }
  switch(a2)
  {
    case 1718186611:
      goto LABEL_6;
    case 1668179559:
      CFDictionaryRef v13 = (const __CFDictionary *)*a5;
      CFTypeID v14 = CFGetTypeID(*a5);
      if (v14 != CFDictionaryGetTypeID()) {
        return 4294956445;
      }
      *((unsigned char *)this + 633) = 1;
      AUCircArray::SetConfigPlist(this, v13);
      (*(void (**)(AUCircArray *, uint64_t, void, void))(*(void *)this + 432))(this, 1668179559, 0, 0);
      if (AUJBase::AUJBaseLogScope(void)::once != -1) {
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
      }
      if (AUJBase::AUJBaseLogScope(void)::scope)
      {
        uint64_t v15 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
        if (!v15)
        {
LABEL_23:
          if (*((unsigned char *)this + 17)) {
            AUCircArray::CreateKernel((AUCircArray *)v21, (uint64_t)this);
          }
          return 0;
        }
      }
      else
      {
        uint64_t v15 = MEMORY[0x1E4F14500];
        id v16 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AUCircArray.mm";
        __int16 v23 = 1024;
        int v24 = 415;
        _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Changed config plist successfully\n", (uint8_t *)buf, 0x12u);
      }

      goto LABEL_23;
    case 8803:
LABEL_6:
      CFTypeRef v7 = *a5;
      CFTypeID v8 = CFGetTypeID(*a5);
      if (v8 == CFArrayGetTypeID())
      {
        CACFDictionary::operator=((uint64_t)this + 2872, v7);
        uint64_t v9 = *((void *)this + 344);
        if (v9)
        {
          CFHelper::extractVectorOfVectors<float>((uint64_t *)&v19, (CFArrayRef *)this + 359);
          uint64_t v10 = *(void *)(v9 + 208);
          float v11 = *(void **)v10;
          float v12 = *(void **)(v10 + 8);
          if ((void *)(v20 - v19) == (void *)((char *)v12 - *(void *)v10))
          {
            if (v20 == v19 || v12 == v11) {
              std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
            }
            if (*((void *)v19 + 1) - *(void *)v19 == v11[1] - *v11) {
              operator new();
            }
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v21, 0xFFFFFFFF);
              buf[0] = 136315906;
              *(void *)&buf[1] = "CircArrayKernel.mm";
              __int16 v23 = 1024;
              int v24 = 536;
              __int16 v25 = 2080;
              int v26 = v21;
              __int16 v27 = 2080;
              int v28 = "New beam filters differ in size from previous ones";
              _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "New beam filters differ in size from previous ones", -1);
          }
          else
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v21, 0xFFFFFFFF);
              buf[0] = 136315906;
              *(void *)&buf[1] = "CircArrayKernel.mm";
              __int16 v23 = 1024;
              int v24 = 535;
              __int16 v25 = 2080;
              int v26 = v21;
              __int16 v27 = 2080;
              int v28 = "Number of beam FIRs doesn't match current number";
              _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "Number of beam FIRs doesn't match current number", -1);
          }
        }
        return 0;
      }
      return 4294956445;
  }
  return v5;
}

void AUCircArray::CreateKernel(AUCircArray *this, uint64_t a2)
{
  uint64_t v2 = a2;
  CFHelper::extractVector<float>((uint64_t)&v90, (CFArrayRef *)(a2 + 2840));
  CFHelper::extractVectorOfVectors<float>(v89, (CFArrayRef *)(v2 + 2856));
  CFHelper::extractVectorOfVectors<float>(v88, (CFArrayRef *)(v2 + 2872));
  CFHelper::extractVector<unsigned int>(&v87, (CFArrayRef *)(v2 + 2824));
  std::vector<unsigned int>::pointer begin = v87.__begin_;
  uint64_t v76 = v2;
  unsigned int v4 = 0;
  if (v87.__begin_ == v87.__end_)
  {
    uint64_t v84 = 0;
    unint64_t v85 = 0;
    unint64_t v86 = 0;
  }
  else
  {
    do
    {
      unsigned int v5 = *begin++;
      v4 += v5;
    }
    while (begin != v87.__end_);
    unsigned int v6 = 1;
    CFTypeRef v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    uint64_t v84 = 0;
    unint64_t v85 = 0;
    unint64_t v86 = 0;
    do
    {
      std::string __p = CFArrayCreateMutable(0, 0, v7);
      LOWORD(v82) = 257;
      CACFArray::GetCACFArray((CFArrayRef *)(v2 + 2888), v6 - 1, (CACFArray *)&__p);
      CFHelper::extractVectorOfVectors<float>((uint64_t *)&v91, (CFArrayRef *)&__p);
      CFTypeID v8 = v85;
      if ((unint64_t)v85 >= v86)
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v85 - v84) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v86 - v84) >> 3) > v11) {
          unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v86 - v84) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - v84) >> 3) >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v11;
        }
        __int16 v98 = &v86;
        CFDictionaryRef v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v12);
        CFTypeID v14 = &v13[24 * v10];
        *(void *)&long long v95 = v13;
        *((void *)&v95 + 1) = v14;
        uint64_t v97 = &v13[24 * v15];
        *(void *)CFTypeID v14 = 0;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *(_OWORD *)CFTypeID v14 = v91;
        *((void *)v14 + 2) = v92;
        long long v91 = 0uLL;
        unint64_t v92 = 0;
        std::vector<unsigned int> v96 = v14 + 24;
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v84, &v95);
        uint64_t v9 = v85;
        std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v95);
      }
      else
      {
        *unint64_t v85 = 0;
        v8[1] = 0;
        v8[2] = 0;
        *(_OWORD *)CFTypeID v8 = v91;
        v8[2] = v92;
        long long v91 = 0uLL;
        unint64_t v92 = 0;
        uint64_t v9 = v8 + 3;
      }
      unint64_t v85 = v9;
      *(void *)&long long v95 = &v91;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      CACFArray::~CACFArray((CACFArray *)&__p);
      unint64_t v16 = v6++;
    }
    while (v16 < v87.__end_ - v87.__begin_);
  }
  CFArrayRef v17 = *(const __CFArray **)(v2 + 2904);
  if (v17 && CFArrayGetCount(v17))
  {
    CFHelper::extractVector<double>((uint64_t)&__p, (CFArrayRef *)(v2 + 2904));
  }
  else
  {
    uint64_t v18 = operator new(0x28uLL);
    double v82 = (char *)(v18 + 5);
    uint64_t v83 = (char *)(v18 + 5);
    v18[4] = 0;
    *(_OWORD *)uint64_t v18 = xmmword_1BB8A9368;
    *((_OWORD *)v18 + 1) = unk_1BB8A9378;
    std::string __p = v18;
  }
  long long v79 = 0uLL;
  unint64_t v80 = 0;
  CFArrayRef v19 = *(const __CFArray **)(v2 + 2920);
  if (v19 && CFArrayGetCount(v19))
  {
    uint64_t v20 = (const __CFArray **)(v2 + 2920);
    cf[0] = 0;
    cf[1] = 0;
    v78[0] = 0;
    CFArrayRef v21 = *(const __CFArray **)(v2 + 2920);
    if (v21)
    {
      unsigned int Count = CFArrayGetCount(v21);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78[0] - (unint64_t)cf[0]) >> 3) < Count)
      {
        __int16 v98 = v78;
        *(void *)&long long v95 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(Count);
        *((void *)&v95 + 1) = v95 + (char *)cf[1] - (char *)cf[0];
        std::vector<unsigned int> v96 = (char *)*((void *)&v95 + 1);
        uint64_t v97 = (char *)(v95 + 24 * v23);
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(cf, &v95);
        std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)&v95);
      }
    }
    unsigned int v24 = 0;
    __int16 v25 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFArrayRef v26 = *v20;
      if (*v20) {
        LODWORD(v26) = CFArrayGetCount(v26);
      }
      if (v24 >= v26) {
        break;
      }
      CFArrayRef valuePtr = CFArrayCreateMutable(0, 0, v25);
      __int16 v94 = 257;
      CACFArray::GetCACFArray((CFArrayRef *)(v2 + 2920), v24, (CACFArray *)&valuePtr);
      CFHelper::extractVector<double>((uint64_t)&v91, &valuePtr);
      __int16 v27 = cf[1];
      if (cf[1] >= (CFTypeRef)v78[0])
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)cf[1] - (char *)cf[0]) >> 3);
        unint64_t v29 = v28 + 1;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v78[0] - (unint64_t)cf[0]) >> 3) > v29) {
          unint64_t v29 = 0x5555555555555556 * ((uint64_t)(v78[0] - (unint64_t)cf[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78[0] - (unint64_t)cf[0]) >> 3) >= 0x555555555555555) {
          unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v30 = v29;
        }
        __int16 v98 = v78;
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v30);
        uint64_t v32 = &v31[24 * v28];
        *(void *)&long long v95 = v31;
        *((void *)&v95 + 1) = v32;
        uint64_t v97 = &v31[24 * v33];
        *(void *)uint64_t v32 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = 0;
        *(_OWORD *)uint64_t v32 = v91;
        *((void *)v32 + 2) = v92;
        long long v91 = 0uLL;
        unint64_t v92 = 0;
        std::vector<unsigned int> v96 = v32 + 24;
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(cf, &v95);
        CFTypeRef v34 = cf[1];
        std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)&v95);
        cf[1] = v34;
        if ((void)v91)
        {
          *((void *)&v91 + 1) = v91;
          operator delete((void *)v91);
        }
      }
      else
      {
        *(void *)cf[1] = 0;
        v27[1] = 0;
        v27[2] = 0;
        *(_OWORD *)__int16 v27 = v91;
        v27[2] = v92;
        long long v91 = 0uLL;
        unint64_t v92 = 0;
        cf[1] = v27 + 3;
      }
      CACFArray::~CACFArray((CACFArray *)&valuePtr);
      ++v24;
    }
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v79);
    long long v79 = *(_OWORD *)cf;
    unint64_t v80 = (char *)v78[0];
    cf[1] = 0;
    v78[0] = 0;
    cf[0] = 0;
    *(void *)&long long v95 = cf;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  }
  else
  {
    char v35 = (char *)operator new(0x28uLL);
    BOOL v36 = v35;
    for (uint64_t i = 0; i != 40; i += 8)
      *(void *)&v35[i] = 0;
    long long v95 = 0uLL;
    std::vector<unsigned int> v96 = 0;
    *(void *)&long long v91 = &v95;
    BYTE8(v91) = 0;
    if (v4)
    {
      if ((v4 & 0x80000000) != 0) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v38 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((int)v4);
      *(void *)&long long v95 = v38;
      *((void *)&v95 + 1) = v38;
      std::vector<unsigned int> v96 = (char *)&v38[3 * v39];
      char v40 = &v38[3 * (int)v4];
      uint64_t v41 = 24 * (int)v4;
      do
      {
        *unint64_t v38 = 0;
        v38[1] = 0;
        v38[2] = 0;
        std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v38, v36, (uint64_t)v36 + 40, 5uLL);
        v38 += 3;
        v41 -= 24;
      }
      while (v41);
      *((void *)&v95 + 1) = v40;
    }
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v79);
    long long v79 = v95;
    unint64_t v80 = v96;
    std::vector<unsigned int> v96 = 0;
    long long v95 = 0uLL;
    *(void *)&long long v91 = &v95;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    operator delete(v36);
    if (v4)
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v79 + 1) - v79) >> 3);
      uint64_t v43 = v4;
      int v44 = (void *)(v79 + 8);
      do
      {
        if (!v42) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        id v45 = (void *)*(v44 - 1);
        if ((void *)*v44 == v45) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        *id v45 = 0x3FF0000000000000;
        v44 += 3;
        --v42;
        --v43;
      }
      while (v43);
    }
  }
  long long v95 = 0uLL;
  std::vector<unsigned int> v96 = 0;
  CFArrayRef v46 = *(const __CFArray **)(v2 + 2936);
  if (!v46 || !CFArrayGetCount(v46))
  {
    unint64_t v92 = 0;
    long long v53 = 0uLL;
    long long v91 = 0u;
    if (v4)
    {
      uint64_t v54 = (int)v4;
      std::vector<unsigned char>::__vallocate[abi:ne180100](&v91, (int)v4);
      unint64_t v55 = (unsigned char *)*((void *)&v91 + 1);
      uint64_t v56 = *((void *)&v91 + 1) + (int)v4;
      do
      {
        *v55++ = 1;
        --v54;
      }
      while (v54);
      *((void *)&v91 + 1) = v56;
      float v57 = v92;
      long long v53 = v91;
    }
    else
    {
      float v57 = 0;
    }
    long long v95 = v53;
    std::vector<unsigned int> v96 = v57;
LABEL_99:
    ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 128), 0);
    uint64_t v73 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 80), 0) + 108);
    uint64_t v74 = *(unsigned int *)(v2 + 336);
    if (AUJBase::AUJBaseLogScope(void)::once != -1) {
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
    }
    unsigned int v75 = operator new(0xC80uLL, (std::align_val_t)0x40uLL);
    CircArrayKernel::CircArrayKernel((uint64_t)v75, v74, v73, *(_DWORD *)(v2 + 3000), (uint64_t)&v87, (uint64_t)&v90, v89);
  }
  UInt32 v47 = (CFArrayRef *)(v2 + 2936);
  long long v91 = 0uLL;
  unint64_t v92 = 0;
  CFArrayRef v48 = *(const __CFArray **)(v2 + 2936);
  if (v48 && (unsigned int v49 = CFArrayGetCount(v48), (v50 = v49) != 0))
  {
    unint64_t v51 = (unint64_t)operator new(v49);
    unsigned int v52 = (char *)(v51 + v50);
  }
  else
  {
    unsigned int v52 = 0;
    unint64_t v51 = 0;
  }
  char v58 = 0;
  unsigned int v59 = 0;
  unint64_t v60 = (char *)v51;
  while (1)
  {
    CFArrayRef v61 = *v47;
    if (*v47) {
      LODWORD(v61) = CFArrayGetCount(v61);
    }
    if (v59 >= v61)
    {
      *(void *)&long long v91 = v51;
      *((void *)&v91 + 1) = v60;
      long long v95 = v91;
      std::vector<unsigned int> v96 = v52;
      goto LABEL_99;
    }
    cf[0] = 0;
    if (CACFArray::GetCFType(v47, v59, cf))
    {
      CFBooleanRef v62 = (const __CFBoolean *)cf[0];
      if (cf[0])
      {
        CFTypeID v63 = CFGetTypeID(cf[0]);
        if (v63 == CFBooleanGetTypeID())
        {
          BOOL v64 = CFBooleanGetValue(v62) == 0;
        }
        else
        {
          CFTypeID v65 = CFGetTypeID(v62);
          if (v65 != CFNumberGetTypeID()) {
            goto LABEL_77;
          }
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(v62, kCFNumberSInt32Type, &valuePtr);
          BOOL v64 = valuePtr == 0;
        }
        char v58 = !v64;
      }
    }
LABEL_77:
    if (v60 >= v52)
    {
      uint64_t v67 = (uint64_t)&v60[-v51 + 1];
      if (v67 < 0)
      {
        *((void *)&v91 + 1) = v60;
        unint64_t v92 = v52;
        *(void *)&long long v91 = v51;
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      if (2 * (uint64_t)&v52[-v51] > (unint64_t)v67) {
        uint64_t v67 = 2 * (void)&v52[-v51];
      }
      if ((unint64_t)&v52[-v51] >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v68 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v68 = v67;
      }
      if (v68) {
        uint64_t v69 = (char *)operator new(v68);
      }
      else {
        uint64_t v69 = 0;
      }
      uint64_t v70 = &v60[(void)v69 - v51];
      *uint64_t v70 = v58;
      unint64_t v66 = v70 + 1;
      if (v60 != (char *)v51)
      {
        uint64_t v71 = &v60[~v51];
        do
        {
          char v72 = *--v60;
          (v71--)[(void)v69] = v72;
        }
        while (v60 != (char *)v51);
        uint64_t v70 = v69;
      }
      unsigned int v52 = &v69[v68];
      if (v51) {
        operator delete((void *)v51);
      }
      unint64_t v51 = (unint64_t)v70;
    }
    else
    {
      *unint64_t v60 = v58;
      unint64_t v66 = v60 + 1;
    }
    ++v59;
    unint64_t v60 = v66;
    uint64_t v2 = v76;
  }
}

void sub_1BB5B1124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  *(void *)(v37 - 192) = &a17;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  *(void *)(v37 - 192) = &a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  *(void *)(v37 - 192) = &a28;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  *(void *)(v37 - 192) = &a34;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  *(void *)(v37 - 192) = &a37;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 192));
  uint64_t v39 = *(void **)(v37 - 216);
  if (v39)
  {
    *(void *)(v37 - 208) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::drain_trash(uint64_t a1)
{
  uint64_t v3 = 0;
  unsigned int v1 = (atomic_uint *)(a1 + 1024);
  while (1)
  {
    BOOL result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result) {
      break;
    }
    if (!v3) {
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    }
    CircArrayKernel::~CircArrayKernel(v3);
    MEMORY[0x1C185D360]();
  }
  return result;
}

uint64_t AUCircArray::GetProperty(AUCircArray *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t v22 = v5;
  uint64_t v23 = v6;
  uint64_t result = 4294956417;
  if (a2 <= 1668179558)
  {
    switch(a2)
    {
      case 8800:
        unint64_t v10 = (const void *)*((void *)this + 357);
        if (!v10) {
          goto LABEL_31;
        }
        CFRetain(v10);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 357);
        goto LABEL_32;
      case 8801:
        CFDictionaryRef v13 = (const void *)*((void *)this + 353);
        if (!v13) {
          goto LABEL_31;
        }
        CFRetain(v13);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 353);
        goto LABEL_32;
      case 8802:
        CFTypeID v14 = (const void *)*((void *)this + 355);
        if (!v14) {
          goto LABEL_31;
        }
        CFRetain(v14);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 355);
        goto LABEL_32;
      case 8803:
        goto LABEL_9;
      case 8804:
        uint64_t v15 = (const void *)*((void *)this + 361);
        if (!v15) {
          goto LABEL_31;
        }
        CFRetain(v15);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 361);
        goto LABEL_32;
      case 8805:
        unint64_t v16 = (const void *)*((void *)this + 363);
        if (!v16) {
          goto LABEL_31;
        }
        CFRetain(v16);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 363);
        goto LABEL_32;
      case 8806:
        CFArrayRef v17 = (const void *)*((void *)this + 365);
        if (!v17) {
          goto LABEL_31;
        }
        CFRetain(v17);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 365);
        goto LABEL_32;
      case 8807:
        uint64_t v18 = (const void *)*((void *)this + 369);
        if (!v18) {
          goto LABEL_31;
        }
        CFRetain(v18);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 369);
        goto LABEL_32;
      case 8808:
        int valuePtr = *((_DWORD *)this + 750);
        CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case 8809:
        CFArrayRef v19 = (const void *)*((void *)this + 371);
        if (!v19) {
          goto LABEL_31;
        }
        CFRetain(v19);
        CFNumberRef v11 = (CFNumberRef)*((void *)this + 371);
        goto LABEL_32;
      default:
        if (a2 == 21)
        {
          if ((*(unsigned int (**)(AUCircArray *))(*(void *)this + 600))(this))
          {
            uint64_t result = 0;
            *a5 = *((unsigned __int8 *)this + 552);
          }
          else
          {
            return 4294956417;
          }
        }
        return result;
    }
  }
  if (a2 == 1668179559)
  {
    uint64_t v20 = (const void *)*((void *)this + 351);
    if (v20)
    {
      CFRetain(v20);
      CFNumberRef v11 = (CFNumberRef)*((void *)this + 351);
      goto LABEL_32;
    }
LABEL_31:
    CFNumberRef v11 = 0;
    goto LABEL_32;
  }
  if (a2 != 1718186611) {
    return result;
  }
LABEL_9:
  unint64_t v12 = (const void *)*((void *)this + 359);
  if (!v12) {
    goto LABEL_31;
  }
  CFRetain(v12);
  CFNumberRef v11 = (CFNumberRef)*((void *)this + 359);
LABEL_32:
  uint64_t result = 0;
  *(void *)a5 = v11;
  return result;
}

uint64_t AUCircArray::GetPropertyInfo(AUCircArray *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1668179558)
  {
    if (a2 == 1668179559 || a2 == 1718186611)
    {
LABEL_9:
      unsigned int v11 = 8;
LABEL_10:
      BOOL v10 = 1;
      goto LABEL_11;
    }
  }
  else
  {
    if ((a2 - 8800) <= 9)
    {
      if (a2 != 8803)
      {
        BOOL v10 = 0;
        unsigned int v11 = 8;
LABEL_11:
        uint64_t result = 0;
        *a6 = v10;
        *a5 = v11;
        return result;
      }
      goto LABEL_9;
    }
    if (a2 == 21)
    {
      if (((*(uint64_t (**)(AUCircArray *))(*(void *)this + 600))(this) & 1) == 0) {
        return 4294956417;
      }
      unsigned int v11 = 4;
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t AUCircArray::Reset(AUCircArray *this)
{
  unsigned int v1 = (CircArrayKernel *)*((void *)this + 344);
  if (v1) {
    CircArrayKernel::Reset(v1);
  }
  return 0;
}

uint64_t AUCircArray::Initialize(AUCircArray *this)
{
  cf[5] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = AUJBase::Initialize(this);
  if (!v2)
  {
    if (!*((unsigned char *)this + 633))
    {
      AUCircArray::CreateDefaultConfigPlist((AUCircArray *)cf, (uint64_t)this);
      AUCircArray::SetConfigPlist(this, (CFDictionaryRef)cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    AUCircArray::CreateKernel((AUCircArray *)cf, (uint64_t)this);
  }
  return v2;
}

void sub_1BB5B1824(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BB5B183C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10)
{
  if (a2)
  {
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);
    if (a2 == 3)
    {
      unint64_t v12 = __cxa_begin_catch(a1);
      if (AUJBase::AUJBaseLogScope(void)::once != -1) {
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
      }
      CFDictionaryRef v13 = CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
      CFTypeID v14 = v13;
      if (v13)
      {
        uint64_t v15 = v13;
        BOOL v16 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
        CFTypeID v14 = v15;
        if (v16)
        {
          int v17 = v12[66];
          LODWORD(a9) = 136315906;
          *(void *)((char *)&a9 + 4) = "AUCircArray.mm";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 90;
          WORD1(a1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 2080;
          *(void *)((char *)&a10 + 4) = v12 + 2;
          WORD6(a1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = v17;
          _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d CircArray Exception: %s (error = %d)\n", (uint8_t *)&a9, 0x22u);
          CFTypeID v14 = v15;
        }
      }

      __cxa_end_catch();
    }
    else
    {
      uint64_t v18 = (int *)__cxa_begin_catch(a1);
      if (a2 == 2)
      {
        CFArrayRef v19 = v18;
        if (AUJBase::AUJBaseLogScope(void)::once != -1) {
          dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
        }
        uint64_t v20 = CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
        CFArrayRef v21 = v20;
        if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          int v22 = *v19;
          LODWORD(a9) = 136315650;
          *(void *)((char *)&a9 + 4) = "AUCircArray.mm";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 104;
          WORD1(a1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1024;
          DWORD1(a1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v22;
          _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown status thrown: %d\n", (uint8_t *)&a9, 0x18u);
        }

        __cxa_end_catch();
      }
      else
      {
        if (AUJBase::AUJBaseLogScope(void)::once != -1) {
          dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
        }
        uint64_t v23 = CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
        unsigned int v24 = v23;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315394;
          *(void *)((char *)&a9 + 4) = "AUCircArray.mm";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 108;
          _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown error thrown\n", (uint8_t *)&a9, 0x12u);
        }

        __cxa_end_catch();
      }
    }
    JUMPOUT(0x1BB5B17CCLL);
  }
  JUMPOUT(0x1BB5B182CLL);
}

void sub_1BB5B1AE8()
{
}

void AUCircArray::~AUCircArray(AUCircArray *this)
{
  AUCircArray::~AUCircArray(this);

  JUMPOUT(0x1C185D360);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F14B7120;
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2968));
  CACFString::~CACFString((AUCircArray *)((char *)this + 2952));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2936));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2920));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2904));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2888));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2872));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2856));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2840));
  CACFArray::~CACFArray((AUCircArray *)((char *)this + 2824));
  CACFDictionary::~CACFDictionary((AUCircArray *)((char *)this + 2808));
  uint64_t v2 = (void *)*((void *)this + 348);
  if (v2)
  {
    *((void *)this + 349) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 345);
  if (v3)
  {
    *((void *)this + 346) = v3;
    operator delete(v3);
  }
  std::unique_ptr<CircArrayKernel>::reset[abi:ne180100]((CircArrayKernel **)this + 344, 0);
  *((void *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = &unk_1F14B73C0;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue((uint64_t)this + 704);
  *(void *)this = &unk_1F14C2A10;
  unsigned int v4 = (void *)*((void *)this + 76);
  if (v4)
  {
    *((void *)this + 77) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 73);
  if (v5)
  {
    *((void *)this + 74) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 70);
  if (v6)
  {
    *((void *)this + 71) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  *(void *)a1 = &unk_1F14B73E0;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::drain_trash(a1);
  uint64_t v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v3))
  {
    if (v3)
    {
      CircArrayKernel::~CircArrayKernel(v3);
      MEMORY[0x1C185D360]();
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 1024);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 64);
  return a1;
}

void ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue(a1);

  JUMPOUT(0x1C185D360);
}

void ca::concurrent::deferred_deletion_stash<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14B73C0;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));

  JUMPOUT(0x1C185D360);
}

void *ca::concurrent::deferred_deletion_stash<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14B73C0;
  ca::concurrent::deferred_deletion_queue<CircArrayKernel,10ul,std::default_delete<CircArrayKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void SincKernelFactorySingleton::SincKernelFactorySingleton(SincKernelFactorySingleton *this)
{
  SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)&unk_1E9F7FBE8);
  operator new();
}

void sub_1BB5B1E64(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x80C40D6874129);
  uint64_t v3 = SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
  SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton = 0;
  if (v3) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void SincKernelFactorySingleton::instance(SincKernelFactorySingleton *this)
{
  {
    if (v1) {
      SincKernelFactorySingleton::SincKernelFactorySingleton(v1);
    }
  }
}

void sub_1BB5B1F0C(_Unwind_Exception *a1)
{
}

uint64_t SincKernelFactorySingleton::ReferenceSincKernel(SincKernelFactorySingleton *this, double a2, double a3)
{
  BOOL v10 = &unk_1E9F7FBE8;
  char v11 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)&unk_1E9F7FBE8);
  uint64_t v3 = *(void *)(SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton + 8)
     - *(void *)SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
  if (!v3) {
LABEL_8:
  }
    operator new();
  uint64_t v4 = 0;
  unint64_t v5 = v3 >> 3;
  unsigned int v6 = 1;
  while (1)
  {
    uint64_t v7 = *(void *)(*(void *)SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton + 8 * v4);
    if (*(double *)(v7 + 32) == 0.9
      && *(double *)(v7 + 24) == 80.0
      && *(_DWORD *)(v7 + 12) == 11
      && *(_DWORD *)(v7 + 16) == 128)
    {
      break;
    }
    uint64_t v4 = v6;
    if (v5 <= v6++) {
      goto LABEL_8;
    }
  }
  ++*(_DWORD *)(v7 + 8);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v10);
  return v7;
}

void sub_1BB5B290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  std::__split_buffer<KaiserWindow>::~__split_buffer((uint64_t)&a32);
  os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
  MEMORY[0x1C185D370](v32, 0x1080C4003DAF236);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void IR::DelayLine::processPolyphaseQ22_10(IR::DelayLine *this, int a2, int a3, float *__C, vDSP_Length __N)
{
  int v5 = *((_DWORD *)this + 32);
  int v6 = a3 + (1 << (9 - v5)) - 512;
  unsigned int v7 = (unsigned __int16)(v6 & 0x3FF) >> (10 - v5);
  if (v7 >= *((_DWORD *)this + 30)) {
    __assert_rtn("processPolyphaseQ22_10", "DelayLine.cpp", 206, "phaseIndex < mFractionalPhases");
  }
  unsigned int v8 = __N;
  vDSP_Length v11 = *((unsigned int *)this + 33);
  uint64_t v12 = (v11 - 1);
  uint64_t v13 = *((void *)this + 2);
  unint64_t v14 = (*((void *)this + 3) - v13) >> 2;
  unsigned int v15 = (a2 - (v11 + (v6 >> 10)) + v14 + 1) & *((_DWORD *)this + 10);
  BOOL v16 = (const float *)(*((void *)this + 13) + 4 * v7 * v11);
  if (__N == 1)
  {
    vDSP_dotpr((const float *)(v13 + 4 * v15 + 4 * v12), -1, v16, 1, __C, v11);
  }
  else
  {
    if (v14 >= v12 + __N + v15)
    {
      uint64_t v20 = (const float *)(v13 + 4 * v15);
      int v22 = &v16[v12];
      vDSP_Length v19 = __N;
      CFArrayRef v21 = __C;
    }
    else
    {
      if (v14 < (v12 + __N)) {
        __assert_rtn("processPolyphaseQ22_10", "DelayLine.cpp", 216, "inNumFramesToProcess + padOffset <= mDelayLine.size()");
      }
      vDSP_Length v17 = v14 - (v12 + v15);
      uint64_t v18 = &v16[v12];
      vDSP_conv((const float *)(v13 + 4 * v15), 1, v18, -1, __C, 1, v17, v11);
      vDSP_Length v19 = v8 - v17;
      uint64_t v20 = (const float *)*((void *)this + 2);
      CFArrayRef v21 = &__C[v17];
      vDSP_Length v11 = *((unsigned int *)this + 33);
      int v22 = v18;
    }
    vDSP_conv(v20, 1, v22, -1, v21, 1, v19, v11);
  }
}

uint64_t IR::DelayLine::DelayLine(uint64_t a1, int a2, int a3, std::vector<unsigned int>::size_type __n, unsigned int a5, int a6)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = __n;
  *(unsigned char *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v7 = a1 + 16;
  *(_OWORD *)(a1 + 48) = 0u;
  unsigned int v8 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_DWORD *)(a1 + 96) = 1065347625;
  *(_OWORD *)(a1 + 136) = 0u;
  uint64_t v9 = (std::vector<int> *)(a1 + 136);
  *(_OWORD *)(a1 + 184) = 0u;
  BOOL v10 = (const float **)(a1 + 184);
  uint64_t v37 = a1 + 208;
  *(_OWORD *)(a1 + 232) = 0u;
  uint64_t v11 = a1 + 232;
  uint64_t v39 = (char **)(a1 + 256);
  char v40 = (char **)(a1 + 72);
  unint64_t v38 = (float **)(a1 + 160);
  *(_OWORD *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  if (!__n) {
    __assert_rtn("DelayLine", "DelayLine.cpp", 236, "inNumTaps > 0");
  }
  switch(a3)
  {
    case 1:
    case 3:
      *(float *)&std::vector<unsigned int>::value_type __u = 2.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      unint64_t v14 = *(unsigned int *)(a1 + 8);
      *(float *)&std::vector<unsigned int>::value_type __u = 2.0;
      std::vector<float>::assign(v40, v14, &__u);
      unsigned int v15 = 0;
      unsigned int v16 = a2 + 4;
      break;
    case 2:
    case 4:
      *(float *)&std::vector<unsigned int>::value_type __u = 3.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      unint64_t v17 = *(unsigned int *)(a1 + 8);
      *(float *)&std::vector<unsigned int>::value_type __u = 3.0;
      std::vector<float>::assign(v40, v17, &__u);
      unsigned int v15 = 0;
      unsigned int v16 = a2 + 6;
      break;
    case 5:
    case 7:
      goto LABEL_7;
    case 6:
      *(float *)&std::vector<unsigned int>::value_type __u = 0.0;
      std::vector<unsigned int>::assign((std::vector<unsigned int> *)(a1 + 280), __n, &__u);
      std::vector<float>::resize((uint64_t)v38, a5);
      std::vector<float>::resize((uint64_t)v10, a5);
      std::vector<float>::resize(v37, a5);
      std::vector<float>::resize(v11, a5);
      *(float *)&std::vector<unsigned int>::value_type __u = 0.0;
      float __B = 1.0 / (float)a5;
      vDSP_vramp((const float *)&__u, &__B, *(float **)(a1 + 184), 1, (uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 2);
      float v41 = -1.0;
      float __C = 1.0;
      vDSP_vsmsa(*v10, 1, &v41, &__C, *v38, 1, a5);
LABEL_7:
      SincKernelFactorySingleton::instance((SincKernelFactorySingleton *)a1);
      uint64_t v23 = SincKernelFactorySingleton::ReferenceSincKernel(v20, v21, v22);
      *(void *)(a1 + 112) = v23;
      int8x8_t v24 = (int8x8_t)*(unsigned int *)(v23 + 16);
      *(_DWORD *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v24.i32[0];
      uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.i32[0] != 1) {
        __assert_rtn("DelayLine", "DelayLine.cpp", 285, "isPowerOfTwo(mFractionalPhases)");
      }
      *(_DWORD *)(a1 + 124) = v24.i32[0] - 1;
      if (v24.i32[0] >= 2u)
      {
        int v26 = 0;
        do
        {
          ++v26;
          BOOL v27 = v24.i32[0] > 3u;
          v24.i32[0] = (unsigned __int32)v24.i32[0] >> 1;
        }
        while (v27);
      }
      else
      {
        int v26 = 0;
      }
      *(_DWORD *)(a1 + 128) = v26;
      unsigned int v28 = *(_DWORD *)(v23 + 12);
      *(_DWORD *)(a1 + 132) = v28;
      *(void *)(a1 + 104) = *(void *)v23;
      unint64_t v29 = *(unsigned int *)(a1 + 8);
      *(float *)&std::vector<unsigned int>::value_type __u = (float)v28;
      std::vector<float>::assign(v8, v29, &__u);
      unint64_t v30 = *(unsigned int *)(a1 + 8);
      *(float *)&std::vector<unsigned int>::value_type __u = (float)*(unsigned int *)(a1 + 132);
      std::vector<float>::assign(v39, v30, &__u);
      std::vector<int>::size_type v31 = *(unsigned int *)(a1 + 8);
      float v32 = (float)*(unsigned int *)(a1 + 132) * 1024.0;
      float v33 = -1.0;
      if (v32 >= 0.0) {
        float v33 = 1.0;
      }
      std::vector<unsigned int>::value_type __u = (uint64_t)(float)(v32 + (float)(v33 * 0.5));
      std::vector<int>::assign(v9, v31, (std::vector<int>::const_reference)&__u);
      unint64_t v34 = *(unsigned int *)(a1 + 8);
      *(float *)&std::vector<unsigned int>::value_type __u = (float)*(unsigned int *)(a1 + 132);
      std::vector<float>::assign(v40, v34, &__u);
      unsigned int v16 = a6 + a2 + v28;
      unsigned int v15 = v28 - 1;
      break;
    default:
      *(float *)&std::vector<unsigned int>::value_type __u = 0.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      unint64_t v18 = *(unsigned int *)(a1 + 8);
      *(float *)&std::vector<unsigned int>::value_type __u = 0.0;
      std::vector<float>::assign(v40, v18, &__u);
      unsigned int v15 = 0;
      unsigned int v16 = a2 + 1;
      break;
  }
  int v35 = 1 << -(char)__clz(v16 - 1);
  *(float *)&std::vector<unsigned int>::value_type __u = 0.0;
  std::vector<float>::resize(v7, v35 + v15, &__u);
  *(_DWORD *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v35 - 1;
  IR::DelayLine::reset((IR::DelayLine *)a1);
  return a1;
}

void sub_1BB5B2F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14)
{
  double v21 = *a11;
  if (*a11)
  {
    v14[36] = v21;
    operator delete(v21);
  }
  double v22 = *a13;
  if (*a13)
  {
    v14[33] = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v19;
  if (*v19)
  {
    v14[30] = v23;
    operator delete(v23);
  }
  int8x8_t v24 = *a10;
  if (*a10)
  {
    v14[27] = v24;
    operator delete(v24);
  }
  uint8x8_t v25 = *v18;
  if (*v18)
  {
    unsigned char v14[24] = v25;
    operator delete(v25);
  }
  int v26 = *a12;
  if (*a12)
  {
    v14[21] = v26;
    operator delete(v26);
  }
  BOOL v27 = *v17;
  if (*v17)
  {
    v14[18] = v27;
    operator delete(v27);
  }
  unsigned int v28 = *a14;
  if (*a14)
  {
    v14[10] = v28;
    operator delete(v28);
  }
  unint64_t v29 = *v16;
  if (*v16)
  {
    v14[7] = v29;
    operator delete(v29);
  }
  unint64_t v30 = *v15;
  if (*v15)
  {
    v14[3] = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value = (uint64_t)this->__end_cap_.__value_;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    std::vector<int>::pointer end = this->__end_;
    std::vector<int>::size_type v14 = end - begin;
    if (v14 >= __n) {
      std::vector<int>::size_type v15 = __n;
    }
    else {
      std::vector<int>::size_type v15 = end - begin;
    }
    if (v15)
    {
      unsigned int v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      unint64_t v17 = &end[__n - v14];
      std::vector<int>::size_type v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      uint64_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    std::vector<int>::size_type v8 = value >> 1;
    if (value >> 1 <= __n) {
      std::vector<int>::size_type v8 = __n;
    }
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<int>::__vallocate[abi:ne180100](this, v9);
    std::vector<int>::pointer v10 = this->__end_;
    uint64_t v11 = &v10[__n];
    std::vector<int>::size_type v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

void IR::DelayLine::reset(IR::DelayLine *this)
{
  int v2 = *((_DWORD *)this + 1);
  if (v2 == 5 || v2 == 7)
  {
LABEL_12:
    std::vector<int>::pointer v10 = (void *)*((void *)this + 2);
    uint64_t v11 = *((void *)this + 3) - (void)v10;
    if (v11 >= 1) {
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    }
    *((_DWORD *)this + 11) = *((_DWORD *)this + 33) - 1;
    goto LABEL_15;
  }
  if (v2 == 6)
  {
    uint64_t v4 = (void *)*((void *)this + 29);
    uint64_t v5 = *((void *)this + 30) - (void)v4;
    if (v5 >= 1) {
      bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    }
    int v6 = (void *)*((void *)this + 26);
    uint64_t v7 = *((void *)this + 27) - (void)v6;
    if (v7 >= 1) {
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    }
    std::vector<int>::size_type v8 = (void *)*((void *)this + 35);
    uint64_t v9 = *((void *)this + 36) - (void)v8;
    if (v9 >= 1) {
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    }
    goto LABEL_12;
  }
  std::vector<int>::size_type v12 = (void *)*((void *)this + 2);
  uint64_t v13 = *((void *)this + 3) - (void)v12;
  if (v13 >= 1) {
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
LABEL_15:
  *((unsigned char *)this + 12) = 1;
}

void IR::DelayLine::~DelayLine(IR::DelayLine *this)
{
  if ((*((_DWORD *)this + 1) - 5) <= 2)
  {
    SincKernelFactorySingleton::instance(this);
    uint64_t v2 = *((void *)this + 14);
    double v22 = &unk_1E9F7FBE8;
    char v23 = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)&unk_1E9F7FBE8);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
      int v4 = *(_DWORD *)(v2 + 8) - 1;
      *(_DWORD *)(v2 + 8) = v4;
      if (!v4)
      {
        uint64_t v16 = *v3;
        uint64_t v15 = v3[1];
        if (v15 != *v3)
        {
          uint64_t v17 = 0;
          unsigned int v18 = 1;
          while (*(void *)(v16 + 8 * v17) != v2)
          {
            uint64_t v17 = v18;
            if ((v15 - *v3) >> 3 <= (unint64_t)v18++) {
              goto LABEL_4;
            }
          }
          uint64_t v20 = v16 + 8 * v17;
          uint64_t v21 = v15 - (v20 + 8);
          if (v15 != v20 + 8) {
            memmove((void *)(v16 + 8 * v17), (const void *)(v20 + 8), v15 - (v20 + 8));
          }
          v3[1] = v20 + v21;
          free(*(void **)v2);
          MEMORY[0x1C185D370](v2, 0x1080C4003DAF236);
        }
      }
    }
LABEL_4:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v22);
  }
  uint64_t v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 32);
  if (v6)
  {
    *((void *)this + 33) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 29);
  if (v7)
  {
    *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v7;
    operator delete(v7);
  }
  std::vector<int>::size_type v8 = (void *)*((void *)this + 26);
  if (v8)
  {
    *((void *)this + 27) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 23);
  if (v9)
  {
    *((void *)this + 24) = v9;
    operator delete(v9);
  }
  std::vector<int>::pointer v10 = (void *)*((void *)this + 20);
  if (v10)
  {
    *((void *)this + 21) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 17);
  if (v11)
  {
    *((void *)this + 18) = v11;
    operator delete(v11);
  }
  std::vector<int>::size_type v12 = (void *)*((void *)this + 9);
  if (v12)
  {
    *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 6);
  if (v13)
  {
    *((void *)this + 7) = v13;
    operator delete(v13);
  }
  std::vector<int>::size_type v14 = (void *)*((void *)this + 2);
  if (v14)
  {
    *((void *)this + 3) = v14;
    operator delete(v14);
  }
}

uint64_t IR::DelayLine::DelayLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  int v4 = *(_DWORD *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v6;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v7 = (SincKernelFactorySingleton *)std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 136), *(const void **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 2);
  *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 24std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 24std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a1 + 28std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 28std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 280);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a2 + 28std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  if ((*(_DWORD *)(a1 + 4) - 5) <= 2)
  {
    SincKernelFactorySingleton::instance(v7);
    *(void *)(a1 + 112) = SincKernelFactorySingleton::ReferenceSincKernel(v8, v9, v10);
  }
  return a1;
}

void sub_1BB5B3664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10)
{
  uint64_t v20 = *v12;
  if (*v12)
  {
    v10[36] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a10;
  if (*a10)
  {
    v10[33] = v21;
    operator delete(v21);
  }
  double v22 = *v19;
  if (*v19)
  {
    v10[30] = v22;
    operator delete(v22);
  }
  char v23 = *v18;
  if (*v18)
  {
    v10[27] = v23;
    operator delete(v23);
  }
  int8x8_t v24 = *v17;
  if (*v17)
  {
    v10[24] = v24;
    operator delete(v24);
  }
  uint8x8_t v25 = *v16;
  if (*v16)
  {
    v10[21] = v25;
    operator delete(v25);
  }
  int v26 = *v11;
  if (*v11)
  {
    v10[18] = v26;
    operator delete(v26);
  }
  BOOL v27 = *v15;
  if (*v15)
  {
    v10[10] = v27;
    operator delete(v27);
  }
  unsigned int v28 = *v14;
  if (*v14)
  {
    v10[7] = v28;
    operator delete(v28);
  }
  unint64_t v29 = *v13;
  if (*v13)
  {
    v10[3] = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t IR::DelayLine::setDelay(uint64_t this, float a2)
{
  if (!*(_DWORD *)(this + 8)) {
    __assert_rtn("setDelay", "DelayLine.cpp", 397, "inTapIdx < mNumTaps");
  }
  if ((float)*(unsigned int *)this < a2) {
    a2 = (float)*(unsigned int *)this;
  }
  unsigned int v2 = *(_DWORD *)(this + 4);
  if (v2 <= 7)
  {
    int v3 = 1 << v2;
    if ((v3 & 0xE0) != 0)
    {
      a2 = a2 + (float)*(unsigned int *)(this + 132);
    }
    else
    {
      float v4 = a2 + 2.0;
      if ((v3 & 0x14) != 0) {
        a2 = a2 + 3.0;
      }
      if ((v3 & 0xA) != 0) {
        a2 = v4;
      }
    }
  }
  **(float **)(this + 48) = a2;
  return this;
}

void IR::DelayLine::process(IR::DelayLine *this, const float *__src, float **a3, vDSP_Length a4)
{
  float v5 = *((float *)this + 24);
  if (a4)
  {
    if (!__src) {
      __assert_rtn("process", "DelayLine.cpp", 501, "inInputData");
    }
    vDSP_Length v7 = a4;
    int v9 = *((_DWORD *)this + 2);
    uint64_t v10 = (*((void *)this + 3) - *((void *)this + 2)) >> 2;
    if (*((unsigned char *)this + 12))
    {
      IR::DelayLine::swapDelays(this);
      *((unsigned char *)this + 12) = 0;
    }
    switch(*((_DWORD *)this + 1))
    {
      case 1:
        uint64_t v29 = 0;
        uint64_t v30 = *((void *)this + 2);
        unsigned int v31 = *((_DWORD *)this + 10);
        unsigned int v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v30 + 4 * v32) = __src[v29];
          if (v9)
          {
            uint64_t v33 = 0;
            uint64_t v34 = *((void *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                float v35 = *(float *)(v34 + 4 * v33)
                    + (float)((float)(*(float *)(*((void *)this + 6) + 4 * v33) - *(float *)(v34 + 4 * v33))
                            / (float)((int)v7 - v29));
              }
              else
              {
                float v36 = *(float *)(*((void *)this + 6) + 4 * v33);
                float v35 = v36 + (float)(*((float *)this + 24) * (float)(*(float *)(v34 + 4 * v33) - v36));
              }
              *(float *)(v34 + 4 * v33) = v35;
              float v37 = (float)v32 - v35;
              if (v37 >= 0.0) {
                float v38 = -0.0;
              }
              else {
                float v38 = (float)v10;
              }
              float v39 = v37 + v38;
              float v40 = *(float *)(v30 + 4 * (v31 & (int)v39));
              float v41 = *(float *)(v30 + 4 * (((int)v39 + 1) & v31));
              float v42 = *(float *)(v30 + 4 * (((int)v39 + 2) & v31));
              float v43 = *(float *)(v30 + 4 * (((int)v39 - 1) & v31));
              float v44 = v43 + v40 * -2.5 + (float)(v41 + v41) + v42 * -0.5;
              float v45 = (float)(v40 - v41) * 1.5 + (float)(v42 - v43) * 0.5;
              a3[v33++][v29] = v40
                             + (float)((float)((float)((float)(v41 - v43) * 0.5)
                                             + (float)((float)(v44 + (float)(v45 * (float)(v39 - (float)(int)v39)))
                                                     * (float)(v39 - (float)(int)v39)))
                                     * (float)(v39 - (float)(int)v39));
            }
            while ((v9 != 0) != v33);
          }
          unsigned int v32 = v31 & (v32 + 1);
          ++v29;
        }
        while (v29 != v7);
        goto LABEL_76;
      case 2:
        uint64_t v46 = 0;
        uint64_t v47 = *((void *)this + 2);
        unsigned int v48 = *((_DWORD *)this + 10);
        unsigned int v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v47 + 4 * v32) = __src[v46];
          if (v9)
          {
            uint64_t v49 = 0;
            uint64_t v50 = *((void *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                float v51 = *(float *)(v50 + 4 * v49)
                    + (float)((float)(*(float *)(*((void *)this + 6) + 4 * v49) - *(float *)(v50 + 4 * v49))
                            / (float)((int)v7 - v46));
              }
              else
              {
                float v52 = *(float *)(*((void *)this + 6) + 4 * v49);
                float v51 = v52 + (float)(*((float *)this + 24) * (float)(*(float *)(v50 + 4 * v49) - v52));
              }
              *(float *)(v50 + 4 * v49) = v51;
              float v53 = (float)v32 - v51;
              if (v53 >= 0.0) {
                float v54 = -0.0;
              }
              else {
                float v54 = (float)v10;
              }
              float v55 = v53 + v54;
              float v56 = *(float *)(v47 + 4 * (v48 & (int)v55));
              float v57 = *(float *)(v47 + 4 * (((int)v55 + 1) & v48));
              float v58 = *(float *)(v47 + 4 * (((int)v55 + 2) & v48));
              float v59 = *(float *)(v47 + 4 * (((int)v55 + 3) & v48));
              float v60 = *(float *)(v47 + 4 * (((int)v55 - 1) & v48));
              float v61 = *(float *)(v47 + 4 * (((int)v55 - 2) & v48));
              float v62 = (float)(v56 * -2.3333)
                  + v60 * 1.25
                  + (float)(v57 * 1.6667)
                  + v58 * -0.5
                  + (float)(v59 * 0.083333)
                  + (float)(v61 * -0.16667);
              a3[v49++][v46] = v56
                             + (float)((float)((float)((float)((float)(v57 - v60) * 0.66667)
                                                     + (float)((float)(v61 - v58) * 0.083333))
                                             + (float)((float)(v62
                                                             + (float)((float)((float)((float)((float)(v58 - v60)
                                                                                             * 0.58333)
                                                                                     + (float)((float)(v61 - v59)
                                                                                             * 0.083333))
                                                                             + (float)((float)(v56 - v57) * 1.3333))
                                                                     * (float)(v55 - (float)(int)v55)))
                                                     * (float)(v55 - (float)(int)v55)))
                                     * (float)(v55 - (float)(int)v55));
            }
            while ((v9 != 0) != v49);
          }
          unsigned int v32 = v48 & (v32 + 1);
          ++v46;
        }
        while (v46 != v7);
        goto LABEL_76;
      case 3:
        uint64_t v63 = 0;
        uint64_t v64 = *((void *)this + 2);
        unsigned int v65 = *((_DWORD *)this + 10);
        unsigned int v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v64 + 4 * v32) = __src[v63];
          if (v9)
          {
            uint64_t v66 = 0;
            uint64_t v67 = *((void *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                float v68 = *(float *)(v67 + 4 * v66)
                    + (float)((float)(*(float *)(*((void *)this + 6) + 4 * v66) - *(float *)(v67 + 4 * v66))
                            / (float)((int)v7 - v63));
              }
              else
              {
                float v69 = *(float *)(*((void *)this + 6) + 4 * v66);
                float v68 = v69 + (float)(*((float *)this + 24) * (float)(*(float *)(v67 + 4 * v66) - v69));
              }
              *(float *)(v67 + 4 * v66) = v68;
              float v70 = (float)v32 - v68;
              if (v70 >= 0.0) {
                float v71 = -0.0;
              }
              else {
                float v71 = (float)v10;
              }
              float v72 = v70 + v71;
              float v73 = *(float *)(v64 + 4 * (v65 & (int)v72));
              float v74 = *(float *)(v64 + 4 * (((int)v72 + 1) & v65));
              float v75 = *(float *)(v64 + 4 * (((int)v72 - 1) & v65));
              float v76 = (float)(v74 + (float)(v75 * -0.33333)) + v73 * -0.5 - (float)(v74 * 0.16667);
              float v77 = -(v73 - (float)(v74 + v75) * 0.5);
              float v78 = (float)((float)(v74 - v75) * 0.16667) + (float)(v73 - v74) * 0.5;
              a3[v66++][v63] = v73
                             + (float)((float)(v76
                                             + (float)((float)(v77 + (float)(v78 * (float)(v72 - (float)(int)v72)))
                                                     * (float)(v72 - (float)(int)v72)))
                                     * (float)(v72 - (float)(int)v72));
            }
            while ((v9 != 0) != v66);
          }
          unsigned int v32 = v65 & (v32 + 1);
          ++v63;
        }
        while (v63 != v7);
        goto LABEL_76;
      case 4:
        uint64_t v79 = 0;
        uint64_t v80 = *((void *)this + 2);
        unsigned int v81 = *((_DWORD *)this + 10);
        unsigned int v32 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v80 + 4 * v32) = __src[v79];
          if (v9)
          {
            uint64_t v82 = 0;
            uint64_t v83 = *((void *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                float v84 = *(float *)(v83 + 4 * v82)
                    + (float)((float)(*(float *)(*((void *)this + 6) + 4 * v82) - *(float *)(v83 + 4 * v82))
                            / (float)((int)v7 - v79));
              }
              else
              {
                float v85 = *(float *)(*((void *)this + 6) + 4 * v82);
                float v84 = v85 + (float)(*((float *)this + 24) * (float)(*(float *)(v83 + 4 * v82) - v85));
              }
              *(float *)(v83 + 4 * v82) = v84;
              float v86 = (float)v32 - v84;
              if (v86 >= 0.0) {
                float v87 = -0.0;
              }
              else {
                float v87 = (float)v10;
              }
              float v88 = v86 + v87;
              float v89 = *(float *)(v80 + 4 * (v81 & (int)v88));
              float v90 = *(float *)(v80 + 4 * (((int)v88 + 1) & v81));
              float v91 = *(float *)(v80 + 4 * (((int)v88 + 2) & v81));
              float v92 = *(float *)(v80 + 4 * (((int)v88 + 3) & v81));
              float v93 = *(float *)(v80 + 4 * (((int)v88 - 1) & v81));
              float v94 = *(float *)(v80 + 4 * (((int)v88 - 2) & v81));
              float v95 = v88 - (float)(int)v88;
              double v96 = (float)((float)(v91 + v94) * 0.041667);
              float v97 = (float)((float)(v90 + v93) * -0.16667) + v89 * 0.25 + v96;
              float v98 = (float)((float)((float)((float)(v90 * -0.58333) + (float)(v89 * 0.41667)) + (float)(v91 * 0.29167))
                          + (float)((float)(v92 + (float)(v93 + v94)) * -0.041667))
                  + (float)((float)(v97
                                  + (float)((float)((float)((float)((float)(v93 - v91) * 0.041667)
                                                          + (float)((float)(v92 - v94) * 0.0083333))
                                                  + (float)((float)(v90 - v89) * 0.083333))
                                          * v95))
                          * v95);
              float v99 = (float)((float)(v90 + v93) * 0.66667) + v89 * -1.25 - v96;
              float v100 = v99 + (float)(v98 * v95);
              float v101 = v93 * -0.5 + v94 * 0.05 + (float)(v89 * -0.33333) + v90 + v91 * -0.25 + (float)(v92 * 0.033333);
              a3[v82++][v79] = v89 + (float)((float)(v101 + (float)(v100 * v95)) * v95);
            }
            while ((v9 != 0) != v82);
          }
          unsigned int v32 = v81 & (v32 + 1);
          ++v79;
        }
        while (v79 != v7);
LABEL_76:
        *((_DWORD *)this + 11) = v32;
        return;
      case 5:
      case 7:
        unsigned int v11 = v10;
        __E[4] = (float *)__E;
        unsigned int v12 = *((_DWORD *)this + 33);
        uint64_t v13 = v12 - 1;
        if (v12) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v9)
        {
          float v15 = **((float **)this + 6) * 1024.0;
          float v16 = -1.0;
          if (v15 >= 0.0) {
            float v16 = 1.0;
          }
          uint64_t v13 = (uint64_t)(float)(v15 + (float)(v16 * 0.5));
        }
        uint64_t v171 = v13;
        unsigned int v104 = v11;
        unsigned int v166 = v11 - v14;
        int v105 = v7 - v11;
        if (v7 <= v11)
        {
          unsigned int v124 = *((_DWORD *)this + 11);
          if (v124 + v7 >= v11)
          {
            uint64_t v140 = v11 - v124;
            if (v104 != v124) {
              memmove((void *)(*((void *)this + 2) + 4 * v124), __src, 4 * v140);
            }
            if (v140 != v7) {
              memmove((void *)(*((void *)this + 2) + 4 * v14), &__src[v140], 4 * v7 - 4 * v140);
            }
            *((_DWORD *)this + 11) += v105 + v14;
            if (v166 < v7) {
              __assert_rtn("process", "DelayLine.cpp", 612, "inNumFramesToProcess <= delayLineLen - padOffset");
            }
          }
          else
          {
            memmove((void *)(*((void *)this + 2) + 4 * v124), __src, 4 * v7);
            *((_DWORD *)this + 11) += v7;
          }
          if (v12 >= 2) {
            memmove(*((void **)this + 2), (const void *)(*((void *)this + 3) - 4 * v14), 4 * v14);
          }
          if (v9)
          {
            float v141 = **((float **)this + 6);
            uint64_t v142 = *a3;
            float v143 = **((float **)this + 9);
            if ((float)(v143 * 1024.0) < 0.0) {
              float v144 = -1.0;
            }
            else {
              float v144 = 1.0;
            }
            if ((int)((uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5)) - v171) >= 0) {
              unsigned int v145 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5)) - v171;
            }
            else {
              unsigned int v145 = v171 - (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5));
            }
            int v146 = *((_DWORD *)this + 1);
            if (v146 == 7) {
              vDSP_Length v147 = 8;
            }
            else {
              vDSP_Length v147 = 1;
            }
            float v148 = powf(*((float *)this + 24), (float)(int)v147);
            BOOL v149 = v145 > 0x20;
            if (v145 >= 0x21 && (int)v147 <= (int)v7)
            {
              float v151 = v148;
              int v152 = **((_DWORD **)this + 17);
              if (v146 == 7) {
                char v153 = 3;
              }
              else {
                char v153 = 0;
              }
              do
              {
                if (v5 == 2.7183)
                {
                  if (!(v7 >> v153)) {
                    __assert_rtn("process", "DelayLine.cpp", 655, "numSubBlocksRemaining > 0");
                  }
                  vDSP_Length v154 = (_DWORD *)*((void *)this + 17);
                  int v155 = v171;
                  LODWORD(v156) = ((int)v171 - *v154) / (int)(v7 >> v153) + *v154;
                  _DWORD *v154 = v156;
                }
                else
                {
                  float v143 = v141 + (float)(v151 * (float)(v143 - v141));
                  if ((float)(v143 * 1024.0) < 0.0) {
                    float v157 = -1.0;
                  }
                  else {
                    float v157 = 1.0;
                  }
                  uint64_t v156 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v157 * 0.5));
                  int v152 = v156;
                  int v155 = v171;
                }
                IR::DelayLine::processPolyphaseQ22_10(this, v124, v156, v142, v147);
                if (v152 - v155 >= 0) {
                  unsigned int v158 = v152 - v155;
                }
                else {
                  unsigned int v158 = v155 - v152;
                }
                unsigned int v124 = *((_DWORD *)this + 10) & (v124 + v147);
                vDSP_Length v159 = (v7 - v147);
                BOOL v149 = v158 > 0x20;
                v142 += v147;
                BOOL v160 = v158 < 0x21 || (int)v7 - (int)v147 < (int)v147;
                LODWORD(v7) = v7 - v147;
              }
              while (!v160);
              vDSP_Length v7 = v159;
            }
            if ((int)v7 >= 1)
            {
              if (v5 == 2.7183)
              {
                LODWORD(v161) = **((_DWORD **)this + 17);
              }
              else
              {
                if (!v149) {
                  float v143 = v141;
                }
                float v164 = -1.0;
                if ((float)(v143 * 1024.0) >= 0.0) {
                  float v164 = 1.0;
                }
                uint64_t v161 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v164 * 0.5));
              }
              IR::DelayLine::processPolyphaseQ22_10(this, v124, v161, v142, v7);
            }
            **((float **)this + 9) = v143;
          }
        }
        else
        {
          v170 = __src;
          uint64_t v106 = 0;
          uint64_t v107 = v9 != 0;
          unsigned int v108 = *((_DWORD *)this + 11);
          vDSP_Length v168 = v7;
          uint64_t v169 = v7;
          int v167 = v9;
          do
          {
            float v109 = v170[v106];
            uint64_t v110 = *((void *)this + 2);
            *(float *)(v110 + 4 * v108) = v109;
            if (v108 < v14) {
              *(float *)(v110 + 4 * (v108 + v166)) = v109;
            }
            if (v9)
            {
              uint64_t v111 = 0;
              int v112 = v7 - v106;
              do
              {
                if (v5 == 2.7183)
                {
                  uint64_t v113 = *((void *)this + 17);
                  LODWORD(v114) = ((int)v171 - *(_DWORD *)(v113 + 4 * v111)) / v112 + *(_DWORD *)(v113 + 4 * v111);
                }
                else
                {
                  float v115 = *(float *)(*((void *)this + 6) + 4 * v111);
                  uint64_t v116 = *((void *)this + 9);
                  float v117 = v115 + (float)(*((float *)this + 24) * (float)(*(float *)(v116 + 4 * v111) - v115));
                  *(float *)(v116 + 4 * v111) = v117;
                  float v118 = v117 * 1024.0;
                  if (v118 < 0.0) {
                    float v119 = -1.0;
                  }
                  else {
                    float v119 = 1.0;
                  }
                  uint64_t v114 = (uint64_t)(float)(v118 + (float)(v119 * 0.5));
                  uint64_t v113 = *((void *)this + 17);
                }
                *(_DWORD *)(v113 + 4 * v111) = v114;
                char v120 = *((_DWORD *)this + 32);
                char v121 = 10 - v120;
                int v122 = v114 + (1 << (9 - v120)) - 512;
                unsigned int v123 = (unsigned __int16)(v122 & 0x3FF) >> v121;
                if (*((_DWORD *)this + 30) <= v123) {
                  __assert_rtn("process", "DelayLine.cpp", 594, "phaseIndex < mFractionalPhases");
                }
                vDSP_dotpr((const float *)(*((void *)this + 2)+ 4* ((v11 - (v14 + (v122 >> 10)) + *((_DWORD *)this + 11)) & *((_DWORD *)this + 10))+ 4 * v14), -1, (const float *)(*((void *)this + 13) + 4 * *((_DWORD *)this + 33) * v123), 1, &a3[v111++][v106], *((unsigned int *)this + 33));
              }
              while (v107 != v111);
              unsigned int v108 = *((_DWORD *)this + 11);
              LODWORD(v7) = v168;
              int v9 = v167;
            }
            unsigned int v108 = *((_DWORD *)this + 10) & (v108 + 1);
            *((_DWORD *)this + 11) = v108;
            ++v106;
          }
          while (v106 != v169);
        }
        return;
      case 6:
        uint64_t v102 = *((unsigned int *)this + 11);
        unsigned int v103 = *((_DWORD *)this + 33) - 1;
        if ((int)v102 + (int)v7 >= v10)
        {
          uint64_t v125 = (v10 - v102);
          if (v10 != v102) {
            memmove((void *)(*((void *)this + 2) + 4 * v102), __src, 4 * v125);
          }
          if (v125 != v7) {
            memmove((void *)(*((void *)this + 2) + 4 * v103), &__src[v125], 4 * v7 - 4 * v125);
          }
          *((_DWORD *)this + 11) += v7 - v10 + v103;
          if (v10 - v103 <= v7) {
            __assert_rtn("process", "DelayLine.cpp", 703, "inNumFramesToProcess < delayLineLen - padOffset");
          }
        }
        else
        {
          memmove((void *)(*((void *)this + 2) + 4 * v102), __src, 4 * v7);
          *((_DWORD *)this + 11) += v7;
        }
        if (v103) {
          memmove(*((void **)this + 2), (const void *)(*((void *)this + 3) - 4 * v103), 4 * v103);
        }
        if (!v9) {
          return;
        }
        uint64_t v126 = *a3;
        uint64_t v127 = (_DWORD *)*((void *)this + 35);
        LODWORD(v128) = *v127;
        break;
      default:
        uint64_t v17 = 0;
        uint64_t v18 = *((void *)this + 2);
        int v19 = *((_DWORD *)this + 10);
        unsigned int v20 = *((_DWORD *)this + 11);
        do
        {
          *(float *)(v18 + 4 * v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = __src[v17];
          if (v9)
          {
            uint64_t v21 = 0;
            uint64_t v22 = *((void *)this + 9);
            do
            {
              if (v5 == 2.7183)
              {
                float v23 = *(float *)(v22 + 4 * v21)
                    + (float)((float)(*(float *)(*((void *)this + 6) + 4 * v21) - *(float *)(v22 + 4 * v21))
                            / (float)((int)v7 - v17));
              }
              else
              {
                float v24 = *(float *)(*((void *)this + 6) + 4 * v21);
                float v23 = v24 + (float)(*((float *)this + 24) * (float)(*(float *)(v22 + 4 * v21) - v24));
              }
              *(float *)(v22 + 4 * v21) = v23;
              float v25 = (float)v20 - v23;
              if (v25 >= 0.0) {
                float v26 = -0.0;
              }
              else {
                float v26 = (float)v10;
              }
              float v27 = v25 + v26;
              float v28 = *(float *)(v18 + 4 * (v19 & (int)v27));
              a3[v21++][v17] = v28
                             + (float)((float)(v27 - (float)(int)v27)
                                     * (float)(*(float *)(v18 + 4 * (((int)v27 + 1) & v19)) - v28));
            }
            while ((v9 != 0) != v21);
          }
          unsigned int v20 = v19 & (v20 + 1);
          ++v17;
        }
        while (v17 != v7);
        *((_DWORD *)this + 11) = v20;
        return;
    }
    while (1)
    {
      if (v128)
      {
        if (v7 >= v128) {
          vDSP_Length v129 = v128;
        }
        else {
          vDSP_Length v129 = v7;
        }
        float v130 = **((float **)this + 9) * 1024.0;
        if (v130 < 0.0) {
          float v131 = -1.0;
        }
        else {
          float v131 = 1.0;
        }
        IR::DelayLine::processPolyphaseQ22_10(this, v102, (uint64_t)(float)(v130 + (float)(v131 * 0.5)), *((float **)this + 29), v129);
        float v132 = **((float **)this + 32) * 1024.0;
        if (v132 < 0.0) {
          float v133 = -1.0;
        }
        else {
          float v133 = 1.0;
        }
        IR::DelayLine::processPolyphaseQ22_10(this, v102, (uint64_t)(float)(v132 + (float)(v133 * 0.5)), *((float **)this + 26), v129);
        uint64_t v134 = *((void *)this + 20);
        unint64_t v135 = ((unint64_t)(*((void *)this + 21) - v134) >> 2) - **((unsigned int **)this + 35);
        vDSP_vmma((const float *)(v134 + 4 * v135), 1, *((const float **)this + 26), 1, (const float *)(*((void *)this + 23) + 4 * v135), 1, *((const float **)this + 29), 1, v126, 1, v129);
        uint64_t v127 = (_DWORD *)*((void *)this + 35);
        LODWORD(v128) = *v127 - v129;
        *uint64_t v127 = v128;
        vDSP_Length v7 = (v7 - v129);
        if ((int)v129 + (int)v102 >= v10) {
          int v136 = v103 - v10;
        }
        else {
          int v136 = 0;
        }
        LODWORD(v102) = v129 + v102 + v136;
        v126 += v129;
      }
      else
      {
        unint64_t v137 = (float *)*((void *)this + 6);
        uint64_t v138 = (float *)*((void *)this + 9);
        float v139 = *v138;
        if (*v137 == *v138)
        {
          float v162 = v139 * 1024.0;
          float v163 = -1.0;
          if (v162 >= 0.0) {
            float v163 = 1.0;
          }
          IR::DelayLine::processPolyphaseQ22_10(this, v102, (uint64_t)(float)(v162 + (float)(v163 * 0.5)), v126, v7);
          return;
        }
        uint64_t v128 = (*((void *)this + 21) - *((void *)this + 20)) >> 2;
        *uint64_t v127 = v128;
        **((float **)this + 32) = v139;
        *uint64_t v138 = *v137;
      }
      if (!v7) {
        return;
      }
    }
  }
  if (v5 == 2.7183)
  {
    IR::DelayLine::swapDelays(this);
  }
}

void *IR::DelayLine::swapDelays(IR::DelayLine *this)
{
  unsigned int v2 = (const void *)*((void *)this + 6);
  unint64_t v3 = (uint64_t)(*((void *)this + 7) - (void)v2) >> 2;
  float v5 = (char *)this + 72;
  uint64_t result = (void *)*((void *)this + 9);
  unint64_t v6 = (uint64_t)(*((void *)v5 + 1) - (void)result) >> 2;
  if (v6 >= v3) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v7) {
    uint64_t result = memmove(result, v2, 4 * v7);
  }
  if ((*((_DWORD *)this + 1) | 2) == 7)
  {
    std::vector<int>::size_type v8 = (_DWORD *)*((void *)this + 17);
    uint64_t v9 = *((void *)this + 18) - (void)v8;
    uint64_t v10 = (float *)*((void *)this + 6);
    uint64_t v11 = (uint64_t)(*((void *)this + 7) - (void)v10) >> 2 >= (unint64_t)(v9 >> 2)
        ? v9 >> 2
        : (uint64_t)(*((void *)this + 7) - (void)v10) >> 2;
    uint64_t v11 = v11;
    if (v11)
    {
      do
      {
        float v12 = *v10++;
        float v13 = v12 * 1024.0;
        if ((float)(v12 * 1024.0) < 0.0) {
          float v14 = -1.0;
        }
        else {
          float v14 = 1.0;
        }
        *v8++ = (uint64_t)(float)(v13 + (float)(v14 * 0.5));
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t AUFixedGain::SupportedNumChannels(AUFixedGain *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUFixedGain::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUFixedGain::StreamFormatWritable(AUFixedGain *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUFixedGain::SupportsTail(AUFixedGain *this)
{
  return 1;
}

double AUFixedGain::GetTailTime(AUFixedGain *this)
{
  return 0.0;
}

double AUFixedGain::GetLatency(AUFixedGain *this)
{
  return 0.0;
}

uint64_t AUFixedGain::RestoreState(AUFixedGain *this, const void *a2)
{
  return 0;
}

uint64_t AUFixedGain::GetParameterInfo(AUFixedGain *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956418;
  }
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a3 > 0xF) {
    return 4294956418;
  }
  buffer->cfNameString = @"Gain (dB)";
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(@"Gain (dB)", buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = kAudioUnitParameterUnit_Decibels;
  *(void *)&buffer->minCFDictionaryRef Value = 0x41F00000C3480000;
  AudioUnitParameterOptions v6 = buffer->flags | 0x40008000;
  buffer->defaultCFDictionaryRef Value = 0.0;
  buffer->AudioUnitParameterOptions flags = v6;
  return result;
}

uint64_t AUFixedGain::GetParameterList(AUFixedGain *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    LODWORD(v5) = 0;
    uint64_t result = 4294956418;
  }
  else
  {
    uint64_t v5 = 0;
    std::vector<int>::size_type v8 = (AUFixedGain *)((char *)this + 80);
    do
    {
      if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v8, 0) + 108) <= v5) {
        break;
      }
      if (a3) {
        a3[v5] = v5;
      }
      ++v5;
    }
    while (v5 != 16);
    uint64_t result = 0;
  }
  *a4 = v5;
  return result;
}

uint64_t AUFixedGain::Render(AUFixedGain *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  std::vector<int>::size_type v8 = (AUFixedGain *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUFixedGain *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    uint64_t v14 = ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 128), 0);
    uint64_t v15 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
    float v16 = *(uint64_t (**)(AUFixedGain *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176);
    return v16(this, a2, BufferList, v15, a4);
  }
  return result;
}

uint64_t AUFixedGain::ProcessBufferLists(AUFixedGain *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, vDSP_Length __N)
{
  unsigned int v5 = __N;
  int v9 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v9)
  {
    uint64_t v10 = (const void *)*((void *)this + 68);
    if (v10)
    {
      uint64_t v11 = (void *)*((void *)this + 69);
      if (v11) {
        memcpy(v11, v10, 4 * *((unsigned int *)this + 135));
      }
    }
    *((_DWORD *)this + 133) = v9;
  }
  if (a3->mNumberBuffers)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 16;
    do
    {
      if (*((_DWORD *)this + 134) || v12 >= *((unsigned int *)this + 135))
      {
        memcpy(*(void **)((char *)&a4->mNumberBuffers + v13), *(const void **)((char *)&a3->mNumberBuffers + v13), 4 * v5);
      }
      else
      {
        float __B = 0.0;
        float __B = *(float *)(*((void *)this + 69) + 4 * v12);
        vDSP_vsmul(*(const float **)((char *)&a3->mNumberBuffers + v13), 1, &__B, *(float **)((char *)&a4->mNumberBuffers + v13), 1, v5);
      }
      ++v12;
      v13 += 16;
    }
    while (v12 < a3->mNumberBuffers);
  }
  return 0;
}

uint64_t AUFixedGain::CanScheduleParameters(AUFixedGain *this)
{
  return 0;
}

uint64_t AUFixedGain::SetParameter(AUFixedGain *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFixedGain *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUFixedGain::SetProperty(AUFixedGain *this, int a2, int a3, unsigned int a4, _DWORD *a5, size_t size)
{
  if (a3) {
    return 4294956417;
  }
  if ((a2 - 64002) >= 2)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 134) = *a5;
    }
    else
    {
      return 4294956417;
    }
  }
  else
  {
    unsigned int v10 = size;
    if (size)
    {
      CADeprecated::CAAutoFree<float>::allocBytes((void **)this + 68, size);
      uint64_t result = *((void *)this + 68);
      if (result)
      {
        memcpy((void *)result, a5, v10);
        int v11 = v10 >> 2;
        if (v10 >> 2 >= 0x10) {
          int v11 = 16;
        }
        *((_DWORD *)this + 135) = v11;
        if (a2 == 64002)
        {
          if (v11)
          {
            unint64_t v12 = 0;
            do
            {
              uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFixedGain *)((char *)this + 32), 0);
              ausdk::AUElement::SetParameter(Element, v12, *(float *)(*((void *)this + 68) + 4 * v12), 0);
              *(float *)(*((void *)this + 68) + 4 * v12) = __exp10f(*(float *)(*((void *)this + 68) + 4 * v12) / 20.0);
              ++v12;
            }
            while (v12 < *((unsigned int *)this + 135));
          }
        }
        else if (v11)
        {
          unint64_t v14 = 0;
          do
          {
            float v15 = *(float *)(*((void *)this + 68) + 4 * v14) + 1.0e-20;
            float v16 = log10f(v15) * 20.0;
            uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUFixedGain *)((char *)this + 32), 0);
            ausdk::AUElement::SetParameter(v17, v14++, v16, 0);
          }
          while (v14 < *((unsigned int *)this + 135));
        }
        uint64_t result = 0;
        ++*((_DWORD *)this + 132);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUFixedGain::GetProperty(const void **this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64003:
      uint64_t v8 = *((unsigned int *)this + 135);
      if (!v8) {
        return 4294956417;
      }
      memcpy(__dst, this[68], 4 * v8);
      return 0;
    case 64002:
      if (!*((_DWORD *)this + 135)) {
        return 4294956417;
      }
      MEMORY[0x1F4188790](this);
      int v11 = (char *)v19 - ((v10 + 15) & 0x7FFFFFFF0);
      uint64_t v12 = *(unsigned int *)(v9 + 540);
      if (v12)
      {
        uint64_t v13 = *(float **)(v9 + 544);
        unint64_t v14 = (float *)((char *)v19 - ((v10 + 15) & 0x7FFFFFFF0));
        uint64_t v15 = *(unsigned int *)(v9 + 540);
        do
        {
          float v16 = *v13++;
          float v17 = v16 + 1.0e-20;
          *v14++ = log10f(v17) * 20.0;
          --v15;
        }
        while (v15);
        size_t v18 = 4 * v12;
      }
      else
      {
        size_t v18 = 0;
      }
      memcpy(__dst, v11, v18);
      return 0;
    case 21:
      uint64_t v5 = 0;
      char *__dst = *((_DWORD *)this + 134);
      return v5;
  }
  return 4294956417;
}

uint64_t AUFixedGain::GetPropertyInfo(AUFixedGain *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if ((a2 - 64002) >= 2)
  {
    if (a2 != 21) {
      return 4294956417;
    }
    *a6 = 1;
    int v7 = 4;
  }
  else
  {
    *a6 = 1;
    int v7 = 4 * *((_DWORD *)this + 135);
  }
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUFixedGain::Reset(AUFixedGain *this)
{
  uint64_t v1 = (const void *)*((void *)this + 68);
  if (v1 && *((void *)this + 69)) {
    memcpy(*((void **)this + 69), v1, 4 * *((unsigned int *)this + 135));
  }
  return 0;
}

uint64_t AUFixedGain::Initialize(AUFixedGain *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  v9[0] = *(_OWORD *)(Element + 80);
  v9[1] = v3;
  uint64_t v10 = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUFixedGain *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v8.Float64 mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v8.mBytesPerPacket = v5;
  *(void *)&v8.UInt32 mBitsPerChannel = *(void *)(v4 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v9, &v8, v6)) {
    return 4294956428;
  }
  (*(void (**)(AUFixedGain *, void, void))(*(void *)this + 72))(this, 0, 0);
  return 0;
}

void AUFixedGain::~AUFixedGain(AUFixedGain *this)
{
  AUFixedGain::~AUFixedGain(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14B7440;
  unsigned int v2 = (void *)*((void *)this + 69);
  if (v2)
  {
    free(v2);
    *((void *)this + 69) = 0;
  }
  long long v3 = (void *)*((void *)this + 68);
  if (v3)
  {
    free(v3);
    *((void *)this + 68) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

void std::vector<std::unique_ptr<HlcSuppressor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (HlcSuppressor **)**a1;
  if (v2)
  {
    uint64_t v4 = (HlcSuppressor **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<HlcSuppressor>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v7 = (void *)*--v4;
        AudioUnitParameterOptions v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v7 = (void *)*--v4;
        AudioUnitParameterOptions v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<FrequencyDomainCompressor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (FrequencyDomainCompressor **)**a1;
  if (v2)
  {
    uint64_t v4 = (FrequencyDomainCompressor **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<FrequencyDomainCompressor>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100](void *result, uint64_t a2)
{
  unsigned int v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2[31];
    v2[31] = 0;
    if (v3) {
      std::default_delete<MultiRadixRealFFT>::operator()[abi:ne180100](v3);
    }
    uint64_t v4 = (void *)v2[28];
    if (v4)
    {
      v2[29] = v4;
      operator delete(v4);
    }
    long long v5 = (void *)v2[25];
    if (v5)
    {
      v2[26] = v5;
      operator delete(v5);
    }
    AudioUnitParameterOptions v6 = (void *)v2[22];
    if (v6)
    {
      v2[23] = v6;
      operator delete(v6);
    }
    int v7 = (void *)v2[19];
    if (v7)
    {
      v2[20] = v7;
      operator delete(v7);
    }
    AudioStreamBasicDescription v8 = (void *)v2[16];
    if (v8)
    {
      v2[17] = v8;
      operator delete(v8);
    }
    uint64_t v9 = (void *)v2[13];
    if (v9)
    {
      v2[14] = v9;
      operator delete(v9);
    }
    uint64_t v10 = (void *)v2[10];
    if (v10)
    {
      v2[11] = v10;
      operator delete(v10);
    }
    int v11 = (void *)v2[7];
    if (v11)
    {
      v2[8] = v11;
      operator delete(v11);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *std::unique_ptr<PrescriptiveAmplification>::reset[abi:ne180100](void *result, uint64_t a2)
{
  unsigned int v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = (void *)v2[21];
    if (v3)
    {
      v2[22] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v2[18];
    if (v4)
    {
      v2[19] = v4;
      operator delete(v4);
    }
    long long v5 = (void *)v2[15];
    if (v5)
    {
      v2[16] = v5;
      operator delete(v5);
    }
    AudioUnitParameterOptions v6 = (void *)v2[12];
    if (v6)
    {
      v2[13] = v6;
      operator delete(v6);
    }
    int v7 = (void *)v2[9];
    if (v7)
    {
      v2[10] = v7;
      operator delete(v7);
    }
    AudioStreamBasicDescription v8 = (void *)v2[6];
    if (v8)
    {
      v2[7] = v8;
      operator delete(v8);
    }
    uint64_t v9 = (void *)v2[3];
    if (v9)
    {
      v2[4] = v9;
      operator delete(v9);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::default_delete<MultiRadixRealFFT>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

FrequencyDomainCompressor *std::unique_ptr<FrequencyDomainCompressor>::reset[abi:ne180100](FrequencyDomainCompressor **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    FrequencyDomainCompressor::~FrequencyDomainCompressor(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void FrequencyDomainCompressor::~FrequencyDomainCompressor(FrequencyDomainCompressor *this)
{
  unsigned int v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  AudioUnitParameterOptions v6 = (void **)((char *)this + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  long long v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }
}

void std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  long long v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  AudioUnitParameterOptions v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }

  JUMPOUT(0x1C185D370);
}

void std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  NoiseSuppression::Noise::HendriksSPP::~HendriksSPP((NoiseSuppression::Noise::HendriksSPP *)(a1 + 1));

  JUMPOUT(0x1C185D370);
}

HlcSuppressor *std::unique_ptr<HlcSuppressor>::reset[abi:ne180100](HlcSuppressor **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    HlcSuppressor::~HlcSuppressor(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void HlcSuppressor::~HlcSuppressor(HlcSuppressor *this)
{
  unsigned int v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 32);
  if (v3)
  {
    *((void *)this + 33) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  AudioUnitParameterOptions v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 20);
  if (v7)
  {
    *((void *)this + 21) = v7;
    operator delete(v7);
  }
  AudioStreamBasicDescription v8 = (void *)*((void *)this + 17);
  if (v8)
  {
    *((void *)this + 18) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 14);
  if (v9)
  {
    *((void *)this + 15) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 11);
  if (v10)
  {
    *((void *)this + 12) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)this + 8);
  if (v11)
  {
    *((void *)this + 9) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v12;
    operator delete(v12);
  }
}

uint64_t MicSenseUtils::DynamicFIR<float>::DynamicFIR(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v3 = (char **)(a1 + 56);
  *(_DWORD *)(a1 + 24) = 1000593162;
  uint64_t v4 = (char **)(a1 + 80);
  *(_OWORD *)(a1 + 104) = 0u;
  long long v5 = (char **)(a1 + 104);
  AudioUnitParameterOptions v6 = (char **)(a1 + 128);
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 41) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 184) = 0;
  std::vector<float>::resize(a1 + 168, a2);
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v7;
  *(float *)(a1 + 28) = 1.0 / (float)v7;
  int v10 = 0;
  std::vector<float>::assign(v5, v7, &v10);
  int v10 = 0;
  std::vector<float>::assign(v6, v7, &v10);
  int v10 = 0;
  std::vector<float>::assign(v3, v7, &v10);
  unint64_t v8 = 2 * *(void *)(a1 + 8) - 1;
  int v10 = 0;
  std::vector<float>::assign(v4, v8, &v10);
  return a1;
}

void sub_1BB5B5A04(_Unwind_Exception *exception_object)
{
  unint64_t v8 = *v6;
  if (*v6)
  {
    v1[22] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v5;
  if (*v5)
  {
    v1[17] = v9;
    operator delete(v9);
  }
  int v10 = *v4;
  if (*v4)
  {
    v1[14] = v10;
    operator delete(v10);
  }
  int v11 = *v3;
  if (*v3)
  {
    v1[11] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[8] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::SmoothedNoiseEstimator(uint64_t a1, unint64_t a2, float a3, float a4)
{
  *(float *)a1 = a4;
  AudioUnitParameterOptions v6 = NoiseSuppression::Noise::HendriksSPP::HendriksSPP((NoiseSuppression::Noise::HendriksSPP *)(a1 + 8), a3, a2, a4);
  *(_DWORD *)(a1 + 36) = 872415232;
  NoiseSuppression::Noise::HendriksSPP::Init(v6);
  int v9 = 0;
  std::vector<float>::vector((void *)(a1 + 232), a2, &v9);
  int v8 = 0;
  std::vector<float>::vector((void *)(a1 + 256), a2, &v8);
  *(_DWORD *)(a1 + 28std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  return a1;
}

void sub_1BB5B5B40(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 24std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v5;
    operator delete(v5);
  }
  NoiseSuppression::Noise::HendriksSPP::~HendriksSPP(v1);
  _Unwind_Resume(a1);
}

void HearingLossCompensator_Core::SetParameter(HearingLossCompensator_Core *this, unint64_t a2, float a3)
{
  if (HearingLossCompensator_Core::kMaxValue[a2] < a3) {
    a3 = HearingLossCompensator_Core::kMaxValue[a2];
  }
  float v4 = HearingLossCompensator_Core::kMinValue[a2];
  if (a3 < v4) {
    a3 = HearingLossCompensator_Core::kMinValue[a2];
  }
  uint64_t v5 = *(void *)this;
  *(float *)(*(void *)this + 4 * a2) = a3;
  if (a2 > 7)
  {
    switch(a2)
    {
      case 0xDuLL:
        *(_DWORD *)(*((void *)this + 81) + 4) = *(_DWORD *)(v5 + 52);
        *(_DWORD *)(*((void *)this + 82) + 4) = *(_DWORD *)(v5 + 52);
        goto LABEL_11;
      case 0xEuLL:
        PrescriptiveAmplification::SetFineTuningSimple(*((PrescriptiveAmplification **)this + 81), *(float *)(v5 + 56), v4);
        PrescriptiveAmplification::SetFineTuningSimple(*((PrescriptiveAmplification **)this + 82), *(float *)(*(void *)this + 56), v6);
        goto LABEL_11;
      case 0xFuLL:
        **((_DWORD **)this + 81) = *(_DWORD *)(v5 + 60);
        **((_DWORD **)this + 82) = *(_DWORD *)(v5 + 60);
        goto LABEL_11;
      case 0x10uLL:
        if (*((_DWORD *)this + 6))
        {
          unint64_t v7 = 0;
          do
            FrequencyDomainCompressor::SetParameter(*(float ***)(*((void *)this + 90) + 8 * v7++), 5, *(float *)(*(void *)this + 64));
          while (v7 < *((unsigned int *)this + 6));
        }
        return;
      default:
        if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 0x1A)
        {
          *((unsigned char *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
LABEL_11:
          *((unsigned char *)this + 82) = 1;
        }
        else
        {
          switch(a2)
          {
            case 8uLL:
              uint64_t v8 = *((unsigned int *)this + 6);
              if (v8)
              {
                int v9 = (uint64_t *)*((void *)this + 90);
                do
                {
                  uint64_t v11 = *v9++;
                  uint64_t v10 = v11;
                  float v12 = *(float *)(v5 + 32);
                  if (v12 > 60.0) {
                    float v12 = 60.0;
                  }
                  if (v12 < 0.0) {
                    float v12 = 0.0;
                  }
                  *(float *)(*(void *)v10 + 12) = v12;
                  --v8;
                }
                while (v8);
              }
              break;
            case 9uLL:
              uint64_t v13 = *((unsigned int *)this + 6);
              if (v13)
              {
                unint64_t v14 = (uint64_t *)*((void *)this + 90);
                do
                {
                  uint64_t v16 = *v14++;
                  uint64_t v15 = v16;
                  float v17 = *(float *)(v5 + 36);
                  if (v17 > 0.0) {
                    float v17 = 0.0;
                  }
                  if (v17 < -60.0) {
                    float v17 = -60.0;
                  }
                  *(float *)(*(void *)v15 + 16) = v17;
                  --v13;
                }
                while (v13);
              }
              break;
            case 0xAuLL:
              uint64_t v18 = *((unsigned int *)this + 6);
              if (v18)
              {
                int v19 = (float **)*((void *)this + 90);
                do
                {
                  uint64_t v21 = *v19++;
                  unsigned int v20 = v21;
                  float v22 = *(float *)(v5 + 40);
                  if (v22 > 1000.0) {
                    float v22 = 1000.0;
                  }
                  if (v22 < 0.0) {
                    float v22 = 0.0;
                  }
                  *(float *)(*(void *)v20 + 4) = v22;
                  float v23 = expf(-1.0 / (float)((float)(v22 * 0.001) * v20[12]));
                  v20[15] = 1.0 - v23;
                  v20[16] = v23;
                  --v18;
                }
                while (v18);
              }
              break;
            case 0xBuLL:
              uint64_t v33 = *((unsigned int *)this + 6);
              if (v33)
              {
                uint64_t v34 = (float **)*((void *)this + 90);
                do
                {
                  float v36 = *v34++;
                  float v35 = v36;
                  float v37 = *(float *)(v5 + 44);
                  if (v37 > 5000.0) {
                    float v37 = 5000.0;
                  }
                  if (v37 < 0.0) {
                    float v37 = 0.0;
                  }
                  *(float *)(*(void *)v35 + 8) = v37;
                  float v38 = expf(-1.0 / (float)((float)(v37 * 0.001) * v35[12]));
                  v35[17] = 1.0 - v38;
                  v35[18] = v38;
                  --v33;
                }
                while (v33);
              }
              break;
            case 0xCuLL:
              float v39 = expf(-1.0 / (float)((float)(*(float *)(v5 + 48) * 0.001) * *((float *)this + 18)));
              *((float *)this + 16) = v39;
              *((float *)this + 17) = 1.0 - v39;
              break;
            case 0x11uLL:
              *((unsigned char *)this + 77) = *(float *)(v5 + 68) > 0.5;
              break;
            case 0x12uLL:
              uint64_t v24 = *((unsigned int *)this + 6);
              if (v24)
              {
                float v25 = (float **)*((void *)this + 96);
                do
                {
                  float v26 = *v25++;
                  v26[70] = expf(-1.0 / (float)(*(float *)(v5 + 72) * *v26));
                  --v24;
                }
                while (v24);
              }
              break;
            case 0x13uLL:
              *((float *)this + 15) = __exp10f(*(float *)(v5 + 76) / 10.0);
              break;
            case 0x14uLL:
              uint64_t v40 = *((unsigned int *)this + 6);
              if (v40)
              {
                float v41 = (float **)*((void *)this + 99);
                do
                {
                  float v43 = *v41++;
                  float v42 = v43;
                  float v44 = *(float *)(v5 + 80);
                  if (v44 > 100.0) {
                    float v44 = 100.0;
                  }
                  if (v44 < 0.0) {
                    float v44 = 0.0;
                  }
                  *(float *)(*(void *)v42 + 8) = v44;
                  float v45 = expf(-1.0 / (float)((float)(v44 * 0.001) * v42[6]));
                  v42[13] = v45;
                  v42[14] = 1.0 - v45;
                  --v40;
                }
                while (v40);
              }
              break;
            case 0x15uLL:
              uint64_t v46 = *((unsigned int *)this + 6);
              if (v46)
              {
                uint64_t v47 = (uint64_t *)*((void *)this + 99);
                do
                {
                  uint64_t v49 = *v47++;
                  uint64_t v48 = v49;
                  float v50 = *(float *)(v5 + 84);
                  if (v50 > 0.0) {
                    float v50 = 0.0;
                  }
                  if (v50 < -60.0) {
                    float v50 = -60.0;
                  }
                  *(float *)(*(void *)v48 + 16) = v50;
                  --v46;
                }
                while (v46);
              }
              break;
            case 0x18uLL:
              if (*((_DWORD *)this + 6))
              {
                unint64_t v27 = 0;
                do
                  FrequencyDomainCompressor::SetParameter(*(float ***)(*((void *)this + 90) + 8 * v27++), 0, *(float *)(*(void *)this + 96) + 16.0);
                while (v27 < *((unsigned int *)this + 6));
              }
              break;
            case 0x19uLL:
              uint64_t v28 = *((unsigned int *)this + 6);
              if (v28)
              {
                uint64_t v29 = (float **)*((void *)this + 90);
                do
                {
                  unsigned int v31 = *v29++;
                  uint64_t v30 = v31;
                  float v32 = *(float *)(v5 + 100);
                  if (v32 > 30.0) {
                    float v32 = 30.0;
                  }
                  if (v32 < -80.0) {
                    float v32 = -80.0;
                  }
                  *(float *)(*(void *)v30 + 24) = v32;
                  v30[21] = v32;
                  --v28;
                }
                while (v28);
              }
              break;
            case 0x1CuLL:
              *(float *)(*((void *)this + 81) + 8) = 1.0 - *(float *)(v5 + 112);
              *(float *)(*((void *)this + 82) + 8) = 1.0 - *(float *)(v5 + 112);
              goto LABEL_11;
            case 0x1DuLL:
              *(_DWORD *)(*((void *)this + 81) + 12) = *(_DWORD *)(v5 + 116);
              *(_DWORD *)(*((void *)this + 82) + 12) = *(_DWORD *)(v5 + 116);
              goto LABEL_11;
            case 0x1EuLL:
              BOOL v51 = *(float *)(v5 + 120) > 0.5 && *((_DWORD *)this + 6) > 1u;
              *((unsigned char *)this + 79) = v51;
              break;
            case 0x1FuLL:
              *((unsigned char *)this + 83) = *(float *)(v5 + 124) > 0.1;
              break;
            default:
              return;
          }
        }
        break;
    }
  }
  else
  {
    *(_WORD *)((char *)this + 81) = 257;
  }
}

void HearingLossCompensator_Core::SetSensitivityOffset(HearingLossCompensator_Core *this, const float *a2)
{
  unint64_t v2 = *((unsigned int *)this + 6);
  if (v2)
  {
    uint64_t v5 = 0;
    while (!*(void *)(*((void *)this + 90) + 8 * v5))
    {
LABEL_12:
      if (++v5 >= v2) {
        return;
      }
    }
    unint64_t v6 = *((unsigned int *)this + 10);
    int v13 = 0;
    std::vector<float>::vector(&__C, v6, &v13);
    vDSP_vlint(a2, *((const float **)this + 35), 1, __C, 1, *((unsigned int *)this + 10), 8uLL);
    uint64_t v7 = *(void *)(*((void *)this + 90) + 8 * v5);
    uint64_t v8 = __C;
    unint64_t v9 = *(unsigned int *)(v7 + 52);
    if (v9 > v15 - __C) {
      __assert_rtn("SetSensitivityOffset", "FrequencyDomainCompressor.cpp", 148, "offsets_dB.size() >= mNumSubbands");
    }
    if (v9)
    {
      uint64_t v10 = *(float **)(v7 + 112);
      uint64_t v11 = __C;
      do
      {
        float v12 = *v11++;
        *v10++ = *(float *)(v7 + 76) + v12;
        --v9;
      }
      while (v9);
    }
    else if (!__C)
    {
LABEL_11:
      unint64_t v2 = *((unsigned int *)this + 6);
      goto LABEL_12;
    }
    uint64_t v15 = v8;
    operator delete(v8);
    goto LABEL_11;
  }
}

void sub_1BB5B6240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HearingLossCompensator_Core::Process(int **this, void *a2, void *a3, vDSP_Length a4)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v4 != *((_DWORD *)this + 6)) {
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 551, "input.size() == mNumChannels");
  }
  uint64_t v5 = a3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) != v4) {
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 552, "output.size() == mNumChannels");
  }
  vDSP_Length v6 = a4;
  uint64_t v7 = (HearingLossCompensator_Core *)this;
  if (*((_DWORD *)this + 8) != a4) {
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 553, "numFrames == mBlockSize");
  }
  unint64_t v9 = (uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 2;
  if (*((unsigned char *)this + 76))
  {
    if (v9 >= 2 * a4) {
      goto LABEL_6;
    }
LABEL_10:
    __assert_rtn("Process", "HearingLossCompensator_Core.cpp", 554, "mIsFrequencyDomain ? (input[0].size() >= 2 * numFrames) : (input[0].size() >= numFrames)");
  }
  if (v9 < a4) {
    goto LABEL_10;
  }
LABEL_6:
  if (*((unsigned char *)this + 81))
  {
    uint64_t v10 = *this;
    int v11 = **this;
    if (*((unsigned char *)this + 83))
    {
      float v12 = this[26];
      *float v12 = v11;
      v12[1] = v10[1];
      v12[2] = v10[2];
      v12[3] = v10[3];
      v12[4] = v10[4];
      v12[5] = v10[5];
      v12[6] = v10[6];
      v12[7] = v10[7];
      int v13 = (_DWORD *)*((void *)v7 + 29);
      *int v13 = v10[32];
      v13[1] = v10[33];
      v13[2] = v10[34];
      v13[3] = v10[35];
      v13[4] = v10[36];
      v13[5] = v10[37];
      v13[6] = v10[38];
      v13[7] = v10[39];
      vDSP_vlint((const float *)v12, *((const float **)v7 + 35), 1, *((float **)v7 + 32), 1, *((unsigned int *)v7 + 10), 8uLL);
      PrescriptiveAmplification::SetAudiogram(*((void *)v7 + 81), *((void *)v7 + 32), *((void *)v7 + 33));
      vDSP_vlint(*((const float **)v7 + 29), *((const float **)v7 + 35), 1, *((float **)v7 + 32), 1, *((unsigned int *)v7 + 10), 8uLL);
    }
    else
    {
      unint64_t v14 = this[23];
      *unint64_t v14 = v11;
      v14[1] = v10[1];
      v14[2] = v10[2];
      v14[3] = v10[3];
      v14[4] = v10[4];
      v14[5] = v10[5];
      v14[6] = v10[6];
      v14[7] = v10[7];
      vDSP_vlint((const float *)v14, *((const float **)v7 + 35), 1, *((float **)v7 + 32), 1, *((unsigned int *)v7 + 10), 8uLL);
      PrescriptiveAmplification::SetAudiogram(*((void *)v7 + 81), *((void *)v7 + 32), *((void *)v7 + 33));
    }
    PrescriptiveAmplification::SetAudiogram(*((void *)v7 + 82), *((void *)v7 + 32), *((void *)v7 + 33));
    *((unsigned char *)v7 + 81) = 0;
  }
  if (*((unsigned char *)v7 + 80))
  {
    unsigned int v15 = *(float *)(*(void *)v7 + 104);
    unsigned int v16 = *(float *)(*(void *)v7 + 108);
    HearingLossCompensator_Core::SetSensitivityOffset(v7, kHLC_Generic_SensitivityOffsets_dB);
    uint64_t v17 = *((void *)v7 + 81);
    *(_DWORD *)(v17 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    PrescriptiveAmplification::ComputeFdVectors(v17);
    uint64_t v18 = *((void *)v7 + 82);
    *(_DWORD *)(v18 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    PrescriptiveAmplification::ComputeFdVectors(v18);
    if (v15 == 2)
    {
      uint64_t v20 = *((void *)v7 + 81);
      *(_DWORD *)(v20 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
      PrescriptiveAmplification::ComputeFdVectors(v20);
      uint64_t v21 = *((void *)v7 + 82);
      *(_DWORD *)(v21 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
      PrescriptiveAmplification::ComputeFdVectors(v21);
      int v19 = (const float *)&kHLC_B288_Call_SensitivityOffsets_dB;
      switch(v16)
      {
        case 0x200Au:
          int v19 = (const float *)&kHLC_B515_Call_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Bu:
        case 0x200Du:
          int v19 = (const float *)&kHLC_B444_Call_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Cu:
          int v19 = (const float *)&kHLC_B419_Call_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Eu:
          int v19 = (const float *)&kHLC_B298_Call_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Fu:
          goto LABEL_22;
        case 0x2010u:
        case 0x2011u:
        case 0x2013u:
          break;
        case 0x2012u:
        case 0x2014u:
          goto LABEL_21;
        default:
LABEL_20:
          if (v16 == 8228)
          {
LABEL_21:
            int v19 = (const float *)&kHLC_B225_SensitivityOffsets_dB;
LABEL_22:
            HearingLossCompensator_Core::SetSensitivityOffset(v7, v19);
          }
          break;
      }
    }
    else if (v15 == 1)
    {
      int v19 = (const float *)&kHLC_B288_Media_SensitivityOffsets_dB;
      switch(v16)
      {
        case 0x200Au:
          int v19 = (const float *)&kHLC_B515_Media_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Bu:
        case 0x200Du:
          int v19 = (const float *)&kHLC_B444_Media_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Cu:
          int v19 = (const float *)&kHLC_B419_Media_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Eu:
          int v19 = (const float *)&kHLC_B298_Media_SensitivityOffsets_dB;
          goto LABEL_22;
        case 0x200Fu:
          goto LABEL_22;
        case 0x2010u:
        case 0x2011u:
        case 0x2013u:
          break;
        case 0x2012u:
        case 0x2014u:
          goto LABEL_21;
        default:
          goto LABEL_20;
      }
    }
    *((unsigned char *)v7 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  if (*((unsigned char *)v7 + 82))
  {
    unint64_t v22 = *((unsigned int *)v7 + 6);
    if (v22)
    {
      for (unint64_t i = 0; i < v22; ++i)
      {
        uint64_t v24 = *((void *)v7 + i + 81);
        if (v24)
        {
          uint64_t v25 = *(void *)(*((void *)v7 + 90) + 8 * i);
          if (v25)
          {
            PrescriptiveAmplification::GetGainTargets(v24, *(void *)(v25 + 24), *(void *)(v25 + 32));
            unint64_t v22 = *((unsigned int *)v7 + 6);
          }
        }
      }
    }
    *((unsigned char *)v7 + 82) = 0;
  }
  uint64_t v26 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    do
    {
      __A.realp = 0;
      __A.imagp = 0;
      uint64_t v29 = *(float **)(*((void *)v7 + 47) + v27);
      __A.realp = v29;
      __A.imagp = *(float **)(*((void *)v7 + 50) + v27);
      uint64_t v30 = *((unsigned int *)v7 + 8);
      if (*((unsigned char *)v7 + 76))
      {
        if (v30)
        {
          memmove(v29, *(const void **)(v26 + v27), 4 * v30);
          uint64_t v31 = *((unsigned int *)v7 + 8);
          if (v31) {
            memmove(*(void **)(*((void *)v7 + 50) + v27), (const void *)(*(void *)(*a2 + v27) + 4 * v31), 4 * (2 * v31) - 4 * v31);
          }
        }
      }
      else
      {
        if (v30) {
          memmove(*((void **)v7 + 11), *(const void **)(v26 + v27), 4 * v30);
        }
        VPTimeFreqConverter::Analyze(*(VPTimeFreqConverter **)(*((void *)v7 + 84) + 8 * v28), *((const float **)v7 + 11), &__A);
      }
      ++v28;
      uint64_t v26 = *a2;
      v27 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v28);
  }
  LODWORD(v32) = *((_DWORD *)v7 + 6);
  if (v32)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    do
    {
      __A.realp = 0;
      __A.imagp = 0;
      __A.realp = *(float **)(*((void *)v7 + 47) + v33);
      __A.imagp = *(float **)(*((void *)v7 + 50) + v33);
      vDSP_zvmags(&__A, 1, *(float **)(*((void *)v7 + 53) + v33), 1, (*((_DWORD *)v7 + 8) + 1));
      uint64_t v35 = *((void *)v7 + 53) + v33;
      **(float **)uint64_t v35 = *__A.realp * *__A.realp;
      *(float *)(*(void *)(v35 + 8) - 4) = *__A.imagp * *__A.imagp;
      if (*((unsigned char *)v7 + 78))
      {
        float v36 = (const void **)SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::process<std::vector<float>>(*(void *)(*((void *)v7 + 96) + 8 * v34));
        memcpy(*(void **)(*((void *)v7 + 59) + v33), *v36, 4 * *((unsigned int *)v7 + 9));
      }
      ++v34;
      unint64_t v32 = *((unsigned int *)v7 + 6);
      v33 += 24;
    }
    while (v34 < v32);
  }
  if (*((unsigned char *)v7 + 79))
  {
    vDSP_vfill(&MicSenseUtils::kZerof, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
    vDSP_vfill(&MicSenseUtils::kZerof, *((float **)v7 + 11), 1, *((unsigned int *)v7 + 9));
    if (*((_DWORD *)v7 + 6))
    {
      uint64_t v37 = 0;
      unint64_t v38 = 0;
      do
      {
        vDSP_vadd(*(const float **)(*((void *)v7 + 53) + v37), 1, *((const float **)v7 + 17), 1, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
        vDSP_vadd(*(const float **)(*((void *)v7 + 59) + v37), 1, *((const float **)v7 + 11), 1, *((float **)v7 + 11), 1, *((unsigned int *)v7 + 9));
        ++v38;
        unint64_t v39 = *((unsigned int *)v7 + 6);
        v37 += 24;
      }
      while (v38 < v39);
      float v40 = (float)v39;
    }
    else
    {
      float v40 = 0.0;
    }
    *(float *)&__A.realp = v40;
    vDSP_vsdiv(*((const float **)v7 + 17), 1, (const float *)&__A, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
    vDSP_vsdiv(*((const float **)v7 + 11), 1, (const float *)&__A, *((float **)v7 + 11), 1, *((unsigned int *)v7 + 9));
    LODWORD(v32) = *((_DWORD *)v7 + 6);
    if (v32)
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      do
      {
        memcpy(*(void **)(*((void *)v7 + 53) + v41), *((const void **)v7 + 17), 4 * *((unsigned int *)v7 + 9));
        memcpy(*(void **)(*((void *)v7 + 59) + v41), *((const void **)v7 + 11), 4 * *((unsigned int *)v7 + 9));
        ++v42;
        unint64_t v32 = *((unsigned int *)v7 + 6);
        v41 += 24;
      }
      while (v42 < v32);
    }
  }
  unsigned int v108 = a2;
  if (v32)
  {
    unint64_t v43 = 0;
    uint64_t v114 = (const float *)((char *)v7 + 68);
    float v115 = (const float *)((char *)v7 + 64);
    float v117 = (void *)((char *)v7 + 136);
    uint64_t __len = 4 * v6;
    float __B = (float *)((char *)v7 + 60);
    int v112 = v5;
    vDSP_Length v113 = v6;
    uint64_t v111 = v7;
    do
    {
      float v44 = *(float **)(*((void *)v7 + 56) + 24 * v43);
      vDSP_vsmsma(v44, 1, v115, *(const float **)(*((void *)v7 + 53) + 24 * v43), 1, v114, v44, 1, *((unsigned int *)v7 + 9));
      CFilterBank::filterbank_compute_bank32(*((void *)v7 + 80), *(const float **)(*((void *)v7 + 56) + 24 * v43), *(float **)(*((void *)v7 + 68) + 24 * v43));
      float v45 = *(float **)(*((void *)v7 + 68) + 24 * v43);
      vDSP_vmul(v45, 1, *((const float **)v7 + 41), 1, v45, 1, *((unsigned int *)v7 + 10));
      uint64_t v46 = *(void *)(*((void *)v7 + 90) + 8 * v43);
      uint64_t v47 = (uint64_t *)(*((void *)v7 + 68) + 24 * v43);
      uint64_t v48 = *v47;
      vDSP_Length v49 = *(unsigned int *)(v46 + 52);
      if (v49 > (v47[1] - *v47) >> 2) {
        __assert_rtn("Process", "FrequencyDomainCompressor.cpp", 203, "subbandPower.size() >= mNumSubbands");
      }
      uint64_t v50 = *((void *)v7 + 74) + 24 * v43;
      BOOL v51 = *(float **)v50;
      if (v49 > (uint64_t)(*(void *)(v50 + 8) - *(void *)v50) >> 2) {
        __assert_rtn("Process", "FrequencyDomainCompressor.cpp", 204, "subbandGain_dB.size() >= mNumSubbands");
      }
      if (v49)
      {
        unint64_t v116 = v43;
        uint64_t v52 = 0;
        uint64_t v118 = *(void *)(v46 + 112);
        float v54 = *(float **)(v46 + 88);
        float v53 = *(float **)(v46 + 96);
        uint64_t v55 = *(void *)(v46 + 136);
        while (1)
        {
          float v56 = *(float *)(v46 + 84)
              + (float)(*(float *)(v118 + 4 * v52) + (float)(log10f(fmaxf(*(float *)(v48 + 4 * v52), 2.2204e-16)) * 10.0));
          if (*(v53 - 1) < v56) {
            float v56 = *(v53 - 1);
          }
          if (v56 < *v54) {
            float v56 = *v54;
          }
          uint64_t v57 = v53 - v54;
          if (v53 != v54)
          {
            float v58 = v54;
            unint64_t v59 = v53 - v54;
            do
            {
              unint64_t v60 = v59 >> 1;
              float v61 = &v58[v59 >> 1];
              float v63 = *v61;
              float v62 = v61 + 1;
              v59 += ~(v59 >> 1);
              if (v63 < v56) {
                float v58 = v62;
              }
              else {
                unint64_t v59 = v60;
              }
            }
            while (v59);
            uint64_t v57 = v58 - v54;
          }
          int v64 = v57 - 1;
          if ((int)v57 < 1) {
            break;
          }
          uint64_t v65 = *(void *)(v46 + 24);
          if (v57 >= (unint64_t)(v53 - v54)) {
            goto LABEL_77;
          }
          unsigned int v66 = v64 & ~(v64 >> 31);
          float v67 = (float)(v56 - v54[v66]) / (float)(v54[v57] - v54[v66]);
          float v68 = (float)(v67 * *(float *)(*(void *)(v65 + 24 * v52) + 4 * v57))
              + (1.0 - v67) * *(float *)(*(void *)(v65 + 24 * v52) + 4 * v66);
LABEL_79:
          float v69 = *(float *)(v55 + 4 * v52);
          uint64_t v70 = 64;
          if (v68 > v69) {
            uint64_t v70 = 72;
          }
          uint64_t v71 = 60;
          if (v68 > v69) {
            uint64_t v71 = 68;
          }
          float v72 = (float)(v69 * *(float *)(v46 + v70)) + (float)(*(float *)(v46 + v71) * v68);
          *(float *)(v55 + 4 * v52) = v72;
          v51[v52++] = v72;
          if (v52 == v49)
          {
            uint64_t v5 = v112;
            vDSP_Length v6 = v113;
            uint64_t v7 = v111;
            unint64_t v43 = v116;
            goto LABEL_86;
          }
        }
        uint64_t v65 = *(void *)(v46 + 24);
        if (!v57)
        {
          float v68 = **(float **)(v65 + 24 * v52);
          goto LABEL_79;
        }
LABEL_77:
        float v68 = *(float *)(*(void *)(v65 + 24 * v52) + 4 * v64);
        goto LABEL_79;
      }
      vDSP_Length v49 = 0;
LABEL_86:
      vDSP_vclip(v51, 1, (const float *)(*(void *)v46 + 16), (const float *)(*(void *)v46 + 12), v51, 1, v49);
      if (*((unsigned char *)v7 + 77))
      {
        uint64_t v73 = 3 * v43;
        float v74 = *(float **)(*((void *)v7 + 59) + 24 * v43);
        vDSP_vsmul(v74, 1, __B, v74, 1, *((unsigned int *)v7 + 9));
        CFilterBank::filterbank_compute_bank32(*((void *)v7 + 80), *(const float **)(*((void *)v7 + 59) + 24 * v43), *(float **)(*((void *)v7 + 71) + 24 * v43));
        float v75 = *(float **)(*((void *)v7 + 71) + 24 * v43);
        vDSP_vmul(v75, 1, *((const float **)v7 + 41), 1, v75, 1, *((unsigned int *)v7 + 10));
        unint64_t v76 = v43;
        float v77 = *(const float **)(*((void *)v7 + 99) + 8 * v43);
        uint64_t v78 = *((void *)v7 + 71);
        uint64_t v79 = *((void *)v7 + 77) + 8 * v73;
        vDSP_vsmsma(*((const float **)v77 + 23), 1, v77 + 11, *(const float **)(*((void *)v7 + 68) + 8 * v73), 1, v77 + 12, *((float **)v77 + 23), 1, *((unsigned int *)v77 + 7));
        vDSP_vthr(*(const float **)(v78 + 8 * v73), 1, &MicSenseUtils::kepsf, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vdiv(*((const float **)v77 + 8), 1, *((const float **)v77 + 17), 1, *((float **)v77 + 14), 1, *((unsigned int *)v77 + 7));
        vDSP_vmul(*((const float **)v77 + 23), 1, *((const float **)v77 + 14), 1, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vclip(*((const float **)v77 + 8), 1, &MicSenseUtils::kOnef, &kParamValue_Mode1ReverbBlend_Max, *((float **)v77 + 26), 1, *((unsigned int *)v77 + 7));
        vDSP_vsadd(*((const float **)v77 + 26), 1, &kHlcSuppressor_SnrShift, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vmul(*((const float **)v77 + 20), 1, *((const float **)v77 + 14), 1, *((float **)v77 + 11), 1, *((unsigned int *)v77 + 7));
        vDSP_vsmsma(*((const float **)v77 + 11), 1, v77 + 9, *((const float **)v77 + 8), 1, v77 + 10, *((float **)v77 + 11), 1, *((unsigned int *)v77 + 7));
        vDSP_vsadd(*((const float **)v77 + 11), 1, &MicSenseUtils::kOnef, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vdiv(*((const float **)v77 + 8), 1, *((const float **)v77 + 11), 1, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vsq(*((const float **)v77 + 8), 1, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vmul(*((const float **)v77 + 8), 1, *((const float **)v77 + 23), 1, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vmul(*((const float **)v77 + 8), 1, *((const float **)v77 + 14), 1, *((float **)v77 + 29), 1, *((unsigned int *)v77 + 7));
        vDSP_vsadd(*((const float **)v77 + 29), 1, &MicSenseUtils::kOnef, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vdiv(*((const float **)v77 + 8), 1, *((const float **)v77 + 29), 1, *((float **)v77 + 8), 1, *((unsigned int *)v77 + 7));
        vDSP_vsadd(*((const float **)v77 + 26), 1, &MicSenseUtils::kOnef, *((float **)v77 + 11), 1, *((unsigned int *)v77 + 7));
        vDSP_vmul(*((const float **)v77 + 8), 1, *((const float **)v77 + 11), 1, *((float **)v77 + 11), 1, *((unsigned int *)v77 + 7));
        uint64_t v80 = (float *)*((void *)v77 + 11);
        unsigned int v81 = *(float **)v79;
        if (*((void *)v77 + 12) - (void)v80 < *(void *)(v79 + 8) - *(void *)v79) {
          __assert_rtn("ComputeHypergeometricGain", "HlcSuppressor.cpp", 237, "x.size() >= result.size()");
        }
        vDSP_Length v82 = *((unsigned int *)v77 + 7);
        uint64_t v83 = *(float **)v79;
        vDSP_Length v84 = v82;
        unint64_t v43 = v76;
        if (v82)
        {
          do
          {
            float v85 = *v80;
            float v86 = floorf(v85 + v85);
            float v87 = 1.0;
            if (v86 >= 0.0)
            {
              if (v86 <= 19.0) {
                float v87 = (float)((float)((float)-(float)(v86 - (float)(v85 * 2.0))
              }
                                    * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                      + v86
                                      + 1))
                            + (float)((float)(1.0 - (float)-(float)(v86 - (float)(v85 * 2.0)))
                                    * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                      + v86)))
                    / sqrtf(v85 + 0.0001);
              else {
                float v87 = (float)(0.1296 / v85) + 1.0;
              }
            }
            *v83++ = v87;
            ++v80;
            --v84;
          }
          while (v84);
        }
        vDSP_vmul(v81, 1, *((const float **)v77 + 8), 1, v81, 1, v82);
        vDSP_vclip(*(const float **)v79, 1, &MicSenseUtils::kepsf, &MicSenseUtils::kOnef, *(float **)v79, 1, *((unsigned int *)v77 + 7));
        vDSP_vsmsma(*((const float **)v77 + 35), 1, v77 + 13, *(const float **)v79, 1, v77 + 14, *((float **)v77 + 35), 1, *((unsigned int *)v77 + 7));
        memcpy(*(void **)v79, *((const void **)v77 + 35), 4 * *((unsigned int *)v77 + 7));
        vDSP_vmul(*((const float **)v77 + 23), 1, *(const float **)v79, 1, *((float **)v77 + 20), 1, *((unsigned int *)v77 + 7));
        vDSP_vdbcon(*(const float **)v79, 1, &MicSenseUtils::kOnef, *(float **)v79, 1, *((unsigned int *)v77 + 7), 1u);
        uint64_t v88 = *(void *)v77;
        if (*(float *)(*(void *)v77 + 12) != 0.0)
        {
          vDSP_vsadd(*(const float **)v79, 1, (const float *)(*(void *)v77 + 12), *(float **)v79, 1, *((unsigned int *)v77 + 7));
          uint64_t v88 = *(void *)v77;
        }
        vDSP_vclip(*(const float **)v79, 1, (const float *)(v88 + 16), &MicSenseUtils::kZerof, *(float **)v79, 1, *((unsigned int *)v77 + 7));
        vDSP_vadd(*(const float **)(*((void *)v7 + 77) + 24 * v76), 1, *(const float **)(*((void *)v7 + 74) + 24 * v76), 1, *((float **)v7 + 20), 1, *((unsigned int *)v7 + 10));
        vDSP_vclip(*((const float **)v7 + 20), 1, (const float *)(*(void *)v7 + 88), (const float *)(*(void *)v7 + 32), *((float **)v7 + 20), 1, *((unsigned int *)v7 + 10));
        float v89 = (int **)*((void *)v7 + 80);
        uint64_t v90 = *((void *)v7 + 20);
      }
      else
      {
        float v89 = (int **)*((void *)v7 + 80);
        uint64_t v90 = *(void *)(*((void *)v7 + 74) + 24 * v43);
      }
      CFilterBank::filterbank_compute_psd16(v89, v90, *((float **)v7 + 17));
      int v91 = *((_DWORD *)v7 + 9);
      float v92 = (_DWORD *)*((void *)v7 + 17);
      v92[v91 - 1] = v92[v91 - 2];
      if (v91)
      {
        unint64_t v93 = 0;
        do
        {
          uint64_t v94 = *((void *)v7 + 17);
          float v95 = __exp10((float)(*(float *)(v94 + 4 * v93) * 0.05));
          *(float *)(v94 + 4 * v93++) = v95;
          unint64_t v96 = *((unsigned int *)v7 + 9);
        }
        while (v93 < v96);
        float v92 = (_DWORD *)*v117;
      }
      else
      {
        unint64_t v96 = 0;
      }
      memcpy(*(void **)(*((void *)v7 + 62) + 24 * v43), v92, 4 * v96);
      if (*((_DWORD *)v7 + 12)) {
        goto LABEL_104;
      }
      if (*((unsigned char *)v7 + 76)) {
        goto LABEL_111;
      }
      if ((int)*(float *)(*(void *)v7 + 92) >= 1)
      {
LABEL_104:
        vDSP_vthr(*((const float **)v7 + 17), 1, &kHearingLossCompensator_ClipThreshold, *((float **)v7 + 17), 1, *((unsigned int *)v7 + 9));
        float v97 = (int *)*((void *)v7 + 83);
        float v98 = (float **)(*((void *)v7 + 65) + 24 * v43);
        vDSP_Length v99 = *((unsigned int *)v7 + 8);
        if ((int)*(float *)(*(void *)v7 + 92) > 1) {
          MicSenseUtils::GainsToFIR::gainsToLinearPhaseFilter(v97, (uint64_t)v117, v98, v99, 0);
        }
        else {
          MicSenseUtils::GainsToFIR::gainsToMinimumPhaseFilter((uint64_t)v97, (uint64_t)v117, v98, v99);
        }
      }
      if (!*((unsigned char *)v7 + 76) && *(float *)(*(void *)v7 + 92))
      {
        MicSenseUtils::DynamicFIR<float>::setCoefficients(*(void *)(*((void *)v7 + 93) + 8 * v43), (const void **)(*((void *)v7 + 65) + 24 * v43), *((unsigned int *)v7 + 8));
        MicSenseUtils::DynamicFIR<float>::process(*(void *)(*((void *)v7 + 93) + 8 * v43), *(void **)(*v108 + 24 * v43), *(float **)(*v5 + 24 * v43), v6);
        goto LABEL_122;
      }
LABEL_111:
      __A.realp = 0;
      __A.imagp = 0;
      __A.realp = *(float **)(*((void *)v7 + 47) + 24 * v43);
      __A.imagp = *(float **)(*((void *)v7 + 50) + 24 * v43);
      memcpy(*((void **)v7 + 11), *((const void **)v7 + 17), 4 * *((unsigned int *)v7 + 9));
      unsigned int v101 = *((_DWORD *)v7 + 7);
      int v100 = *((_DWORD *)v7 + 8);
      int v102 = v100 + 1;
      unsigned int v103 = (const float *)*((void *)v7 + 11);
      if (v100 + 1 < v101)
      {
        unsigned int v104 = ~v100 + v101;
        do
          v103[v102++] = v103[v104--];
        while (v104);
      }
      vDSP_zrvmul(&__A, 1, v103, 1, &__A, 1, v6);
      if (*((unsigned char *)v7 + 76))
      {
        if (v6)
        {
          memmove(*(void **)(*v5 + 24 * v43), __A.realp, __len);
          imagp = __A.imagp;
          uint64_t v106 = (void *)(*(void *)(*v5 + 24 * v43) + 4 * v6);
          size_t v107 = __len;
LABEL_119:
          memmove(v106, imagp, v107);
        }
      }
      else
      {
        VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*((void *)v7 + 87) + 8 * v43), &__A, *((float **)v7 + 14));
        if (v6)
        {
          imagp = (float *)*((void *)v7 + 14);
          uint64_t v106 = *(void **)(*v5 + 24 * v43);
          size_t v107 = __len;
          goto LABEL_119;
        }
      }
LABEL_122:
      ++v43;
    }
    while (v43 < *((unsigned int *)v7 + 6));
  }
}

uint64_t SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::process<std::vector<float>>(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 24))(a1 + 8);
  float v2 = *(float *)(v1 + 272);
  uint64_t v3 = *(const float **)(v1 + 248);
  uint64_t v4 = *(void *)(v1 + 256);
  uint64_t v5 = *(const float **)(v1 + 224);
  uint64_t v6 = *(void *)(v1 + 232);

  return AddMultiplyRVectorRScalarMultiplyRVectorRScalar<std::vector<float>,std::vector<float>,std::vector<float>>(v1 + 248, v3, v4, v5, v6, v2, 1.0 - v2);
}

void *MicSenseUtils::DynamicFIR<float>::setCoefficients(uint64_t a1, const void **a2, vDSP_Length __N)
{
  if (*(void *)(a1 + 8) < __N) {
    __assert_rtn("setCoefficients", "MicSenseDynamicFIR.hpp", 93, "newFilterLength <= mMaxNumFrames");
  }
  vDSP_Length v3 = __N;
  if (*(void *)(a1 + 16) != __N)
  {
    *(void *)(a1 + 16) = __N;
    vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::setCoefficients(std::vector<float> const&,unsigned long)::val, *(float **)(a1 + 104), 1, __N);
    vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::setCoefficients(std::vector<float> const&,unsigned long)::val, *(float **)(a1 + 128), 1, *(void *)(a1 + 16));
    vDSP_vfill(&MicSenseUtils::DynamicFIR<float>::setCoefficients(std::vector<float> const&,unsigned long)::val, *(float **)(a1 + 80), 1, *(void *)(a1 + 16) + *(void *)(a1 + 8) - 1);
    uint64_t v6 = *(void *)(a1 + 128);
    *(void *)(a1 + 152) = *(void *)(a1 + 104);
    *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v6;
    *(void *)(a1 + 32) = 0;
    vDSP_Length v3 = *(void *)(a1 + 16);
  }
  *(unsigned char *)(a1 + 48) = 1;
  uint64_t v7 = *(void **)(a1 + 56);
  uint64_t v8 = *a2;

  return memcpy(v7, v8, 4 * v3);
}

void *MicSenseUtils::DynamicFIR<float>::process(uint64_t a1, void *__src, float *a3, vDSP_Length a4)
{
  if (*(unsigned char *)(a1 + 48) && !*(void *)(a1 + 32))
  {
    uint64_t v8 = *(void *)(a1 + 152);
    uint64_t v9 = *(void *)(a1 + 104);
    if (v8 == v9) {
      uint64_t v10 = *(void **)(a1 + 128);
    }
    else {
      uint64_t v10 = *(void **)(a1 + 104);
    }
    if (v8 != v9) {
      uint64_t v8 = *(void *)(a1 + 128);
    }
    *(void *)(a1 + 152) = v10;
    *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
    memcpy(v10, *(const void **)(a1 + 56), 4 * *(void *)(a1 + 16));
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = *(void *)(a1 + 40) - 1;
  }
  memcpy((void *)(*(void *)(a1 + 80) + 4 * *(void *)(a1 + 16) - 4), __src, 4 * a4);
  vDSP_conv(*(const float **)(a1 + 80), 1, (const float *)(*(void *)(a1 + 152) + 4 * *(void *)(a1 + 16) - 4), -1, a3, 1, a4, *(void *)(a1 + 16));
  vDSP_Length v11 = *(void *)(a1 + 32);
  if (v11)
  {
    if (v11 >= a4) {
      vDSP_Length v12 = a4;
    }
    else {
      vDSP_Length v12 = *(void *)(a1 + 32);
    }
    vDSP_conv(*(const float **)(a1 + 80), 1, (const float *)(*(void *)(a1 + 160) + 4 * *(void *)(a1 + 16) - 4), -1, *(float **)(a1 + 168), 1, v12, *(void *)(a1 + 16));
    float v13 = *(float *)(a1 + 28);
    float __Start = (float)*(unint64_t *)(a1 + 32) / (float)*(unint64_t *)(a1 + 40);
    float v18 = -v13;
    float v15 = 1.0 - __Start;
    float __Step = v13;
    vDSP_vrampmul(a3, 1, &v15, &__Step, a3, 1, v12);
    vDSP_vrampmuladd(*(const float **)(a1 + 168), 1, &__Start, &v18, a3, 1, v12);
    *(void *)(a1 + 32) -= v12;
  }
  return memmove(*(void **)(a1 + 80), (const void *)(*(void *)(a1 + 80) + 4 * a4), 4 * *(void *)(a1 + 16) - 4);
}

uint64_t AddMultiplyRVectorRScalarMultiplyRVectorRScalar<std::vector<float>,std::vector<float>,std::vector<float>>(uint64_t a1, const float *__A, uint64_t a3, const float *a4, uint64_t a5, float a6, float a7)
{
  float __D = a7;
  float __B = a6;
  uint64_t v7 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (v7 != (a3 - (uint64_t)__A) >> 2) {
    __assert_rtn("AddMultiplyRVectorRScalarMultiplyRVectorRScalar", "SmoothedNoiseEstimator.h", 64, "result.size() == A.size()");
  }
  if (v7 != (a5 - (uint64_t)a4) >> 2) {
    __assert_rtn("AddMultiplyRVectorRScalarMultiplyRVectorRScalar", "SmoothedNoiseEstimator.h", 65, "result.size() == C.size()");
  }
  vDSP_vsmsma(__A, 1, &__B, a4, 1, &__D, *(float **)a1, 1, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  return a1;
}

void AUsubMAEC::myAecCore::~myAecCore(AUsubMAEC::myAecCore *this)
{
  float v2 = (void *)*((void *)this + 371);
  if (v2)
  {
    free(v2);
    *((void *)this + 371) = 0;
  }
  vDSP_Length v3 = (void *)*((void *)this + 372);
  if (v3)
  {
    free(v3);
    *((void *)this + 372) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 383);
  if (v4)
  {
    free(v4);
    *((void *)this + 383) = 0;
  }
  uint64_t v5 = (void *)*((void *)this + 384);
  if (v5)
  {
    free(v5);
    *((void *)this + 384) = 0;
  }
  uint64_t v6 = (void *)*((void *)this + 385);
  if (v6)
  {
    free(v6);
    *((void *)this + 385) = 0;
  }
  uint64_t v7 = (void *)*((void *)this + 386);
  if (v7)
  {
    free(v7);
    *((void *)this + 386) = 0;
  }
  uint64_t v8 = (void *)*((void *)this + 387);
  if (v8)
  {
    free(v8);
    *((void *)this + 387) = 0;
  }
  uint64_t v9 = (void *)*((void *)this + 390);
  if (v9)
  {
    free(v9);
    *((void *)this + 39std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  AUsubMAEC::Kalman::removeKalman((AUsubMAEC::myAecCore *)((char *)this + 1936), 0);
  AUsubMAEC::Kalman::removeKalman((AUsubMAEC::myAecCore *)((char *)this + 2216), 1);
  if (*((unsigned char *)this + 2))
  {
    uint64_t v10 = (void *)*((void *)this + 388);
    if (v10)
    {
      free(v10);
      *((void *)this + 388) = 0;
    }
    vDSP_Length v11 = (void *)*((void *)this + 389);
    if (v11)
    {
      free(v11);
      *((void *)this + 389) = 0;
    }
  }
  vDSP_Length v12 = (void *)*((void *)this + 379);
  if (v12)
  {
    free(v12);
    *((void *)this + 379) = 0;
  }
  float v13 = (void *)*((void *)this + 377);
  if (v13)
  {
    free(v13);
    *((void *)this + 377) = 0;
  }
  unint64_t v14 = (void *)*((void *)this + 378);
  if (v14)
  {
    free(v14);
    *((void *)this + 378) = 0;
  }
  AUsubMAEC::dualEC::~dualEC((AUsubMAEC::myAecCore *)((char *)this + 2712));
  AUsubMAEC::dualEC::~dualEC((AUsubMAEC::myAecCore *)((char *)this + 2496));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1720));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1504));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1288));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 1072));
  AUsubMAEC::learnRate::~learnRate((AUsubMAEC::myAecCore *)((char *)this + 856));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 768));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 680));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 592));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 504));
  AUsubMAEC::myAecBuffers::~myAecBuffers((AUsubMAEC::myAecCore *)((char *)this + 416));
  AUsubMAEC::myFilter::~myFilter((float ***)this + 43);
  AUsubMAEC::myFilter::~myFilter((float ***)this + 34);
  AUsubMAEC::myFilter::~myFilter((float ***)this + 25);
  freeMatrix(*((_DWORD *)this + 41), (float ***)this + 14);
  freeMatrix(*((_DWORD *)this + 41), (float ***)this + 15);
  freeMatrix(*((_DWORD *)this + 41), (float ***)this + 17);
  float v15 = (void *)*((void *)this + 16);
  if (v15)
  {
    free(v15);
    *((void *)this + 16) = 0;
  }
  unsigned int v16 = (void *)*((void *)this + 24);
  if (v16)
  {
    free(v16);
    *((void *)this + 24) = 0;
  }
  uint64_t v17 = (void *)*((void *)this + 18);
  if (v17)
  {
    free(v17);
    *((void *)this + 18) = 0;
  }
  float v18 = (void *)*((void *)this + 19);
  if (v18)
  {
    free(v18);
    *((void *)this + 19) = 0;
  }
  MultiRadixFFT_Dispose(*((void *)this + 1));
  int v19 = (void *)*((void *)this + 10);
  if (v19)
  {
    free(v19);
    *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  uint64_t v20 = (void *)*((void *)this + 11);
  if (v20)
  {
    free(v20);
    *((void *)this + 11) = 0;
  }
  uint64_t v21 = (void *)*((void *)this + 12);
  if (v21)
  {
    free(v21);
    *((void *)this + 12) = 0;
  }
}

void AUsubMAEC::myAecCore::sigOLA(AUsubMAEC::myAecCore *this, float *a2, float *a3, DSPComplex *__C, float *a5, float *a6)
{
  vDSP_vclr((float *)__C, 1, *((int *)this + 733));
  uint64_t v12 = *((int *)this + 5);
  *a3 = a2[v12];
  memcpy(*((void **)this + 12), a2, v12 * 4);
  memcpy(*((void **)this + 13), a3, 4 * *((int *)this + 5));
  DSPSplitComplex v13 = (DSPSplitComplex)*((_OWORD *)this + 6);
  DSPSplitComplex v23 = v13;
  if (*((float *)this + 12) != 1.0)
  {
    vDSP_vsmul(a2, 1, (const float *)this + 12, v13.realp, 1, *((int *)this + 5));
    vDSP_vsmul(a3, 1, (const float *)this + 12, *((float **)this + 13), 1, *((int *)this + 5));
  }
  unint64_t v14 = (MultiRadixRealFFT *)*((void *)this + 1);
  if (v14) {
    MultiRadixRealFFT::RealInPlaceTransform(v14, &v23, -1, *(float *)&v13.realp);
  }
  vDSP_ztoc(&v23, 1, __C, 2, *((int *)this + 5));
  vDSP_vmul((const float *)__C, 1, *((const float **)this + 10), 1, (float *)__C, 1, *((int *)this + 4));
  int v15 = *((_DWORD *)this + 733);
  size_t v16 = 4 * v15;
  if (*((int *)this + 737) <= 1)
  {
    uint64_t v19 = 0;
  }
  else
  {
    int v17 = 0;
    int v18 = 1;
    do
    {
      memmove(&a5[v17], &a5[v17 + v15], v16);
      int v15 = *((_DWORD *)this + 733);
      v17 += v15;
      ++v18;
    }
    while (v18 < *((_DWORD *)this + 737));
    uint64_t v19 = v17;
  }
  memcpy(&a5[v19], __C, v16);
  vDSP_vclr(a6, 1, *((int *)this + 736));
  int v20 = *((_DWORD *)this + 737);
  if (v20 >= 1)
  {
    int v21 = 0;
    int v22 = -1;
    do
    {
      vDSP_vadd(a6, 1, &a5[*((_DWORD *)this + 733) * v21++ + *((_DWORD *)this + 736) * (v20 + v22)], 1, a6, 1, *((int *)this + 736));
      int v20 = *((_DWORD *)this + 737);
      --v22;
    }
    while (v21 < v20);
  }
}

uint64_t IRSpatializer::getLatencyFrames(IRSpatializer *this)
{
  uint64_t v1 = *((void *)this + 42);
  if (!v1) {
    return 0;
  }
  LODWORD(result) = (*(uint64_t (**)(void))(**(void **)(v1 + 24) + 80))(*(void *)(v1 + 24));
  if (*(_DWORD *)(v1 + 172)) {
    return (result + 5);
  }
  else {
    return result;
  }
}

uint64_t IRSpatializer::processAccumulating(IRSpatializer *this, const float *a2, float *const *a3, int a4, float *const *a5, unsigned int a6, vDSP_Length a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a6 == a4)
  {
    if (*((unsigned char *)this + 16))
    {
      if (*((unsigned char *)this + 320) || *((unsigned char *)this + 17))
      {
        *((unsigned char *)this + 32std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
        (*(void (**)(void, void, float))(**(void **)(*((void *)this + 42) + 24) + 48))(*(void *)(*((void *)this + 42) + 24), 0, *((float *)this + 12));
        (*(void (**)(void, uint64_t, float))(**(void **)(*((void *)this + 42) + 24) + 48))(*(void *)(*((void *)this + 42) + 24), 1, *((float *)this + 13));
        (*(void (**)(void, uint64_t, float))(**(void **)(*((void *)this + 42) + 24) + 48))(*(void *)(*((void *)this + 42) + 24), 2, *((float *)this + 14));
        *((unsigned char *)this + 17) = 0;
      }
      float v16 = 0.0;
      if (*((unsigned char *)this + 132)) {
        float v16 = a8;
      }
      int v17 = (float *)*((void *)this + 42);
      float v18 = 3000.0;
      if (*((_DWORD *)this + 81)) {
        float v18 = -1.0;
      }
      v17[40] = v18;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      uint64_t v19 = IR::IRProcessor::processMultipleInputs((IR::IRProcessor *)v17, (const float **)&__p, a5, 1u, a6, a7, v16, 0);
      unsigned int v20 = *(_DWORD *)(*(void *)(*((void *)this + 42) + 24) + 168);
      if (v20 >= a6) {
        unsigned int v20 = a6;
      }
      if (v20)
      {
        unint64_t v21 = 0;
        do
        {
          vDSP_vadd(a5[v21], 1, a3[v21], 1, a3[v21], 1, a7);
          ++v21;
          LODWORD(v22) = *(_DWORD *)(*(void *)(*((void *)this + 42) + 24) + 168);
          if (v22 >= a6) {
            unint64_t v22 = a6;
          }
          else {
            unint64_t v22 = v22;
          }
        }
        while (v21 < v22);
      }
      *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v25 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string[abi:ne180100]<0>(&v33, "IRSpatializer");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", &v33, &v34);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("processAccumulating", &v34, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315138;
        uint64_t v37 = p_p;
        _os_log_debug_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
      return 4294956429;
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v24 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "IRSpatializer");
      uint64_t v27 = std::string::append(&v33, "::", 2uLL);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v34, "processAccumulating", 0x13uLL);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      uint64_t v31 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = v31;
      __int16 v38 = 1024;
      int v39 = a4;
      _os_log_debug_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels", buf, 0x12u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
    return 4294956445;
  }
  return v19;
}

void sub_1BB5B80D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IRSpatializer::reset(IR::FFTFilter ***this)
{
  uint64_t result = IR::IRProcessor::reset(this[42]);
  *((unsigned char *)this + 17) = 1;
  *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
  return result;
}

uint64_t IRSpatializer::initialize(IRSpatializer *this, float a2, unsigned int a3, unsigned int a4)
{
  if (!a4) {
    __assert_rtn("initialize", "IRSpatializer.cpp", 25, "inMaxFramesPerSlice > 0");
  }
  if (a2 <= 0.0) {
    __assert_rtn("initialize", "IRSpatializer.cpp", 26, "inSampleRate > 0");
  }
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  uint64_t v6 = IR::IRProcessor::initialize(*((IR::IRProcessor **)this + 42), a2, a4, 0x80u, 0, 0, 0);
  if (!v6)
  {
    int v9 = 0;
    std::vector<float>::resize((uint64_t)this + 136, a3, &v9);
    int v8 = 0;
    std::vector<float>::resize((uint64_t)this + 272, a3, &v8);
    *((_WORD *)this + 8) = 257;
    *((_DWORD *)this + 5) = IR::IRProcessor::getTailLength(*((IR::IRProcessor **)this + 42));
  }
  return v6;
}

void IRSpatializer::~IRSpatializer(IR::IRProcessor **this)
{
  *this = (IR::IRProcessor *)&unk_1F14B7690;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](this + 42, 0);
  Spatializer::~Spatializer((Spatializer *)this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *this = (IR::IRProcessor *)&unk_1F14B7690;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](this + 42, 0);

  Spatializer::~Spatializer((Spatializer *)this);
}

void IRSpatializer::IRSpatializer(IRSpatializer *this, const IR::IRDataAttributes *a2)
{
  Spatializer::Spatializer(this);
  *float v2 = &unk_1F14B7690;
  v2[42] = 0;
  operator new();
}

void sub_1BB5B8398(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v3, 0x10A1C40AF302FDBLL);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v2, 0);
  Spatializer::~Spatializer(v1);
  _Unwind_Resume(a1);
}

void AUsubMAEC::myFilter::~myFilter(float ***this)
{
  if (*((_DWORD *)this + 16))
  {
    freeMatrix(*((_DWORD *)this + 17), this + 2);
    freeMatrix(*((_DWORD *)this + 17), this + 3);
    freeMatrix(*((_DWORD *)this + 17), this + 4);
    freeMatrix(*((_DWORD *)this + 17), this + 5);
  }
}

void *AUsubMAEC::myFilter::initFilter(uint64_t a1, _DWORD *a2)
{
  int v3 = a2[6];
  *(_DWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 52) = a2[3];
  *(_DWORD *)(a1 + 56) = a2[4];
  int v4 = a2[13];
  *(_DWORD *)(a1 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
  *(_DWORD *)(a1 + 64) = a2[14];
  int v5 = a2[12];
  *(_DWORD *)(a1 + 68) = v5;
  int v6 = v4 * v3;
  *(void *)a1 = allocMatrix(v5, v4 * v3);
  uint64_t result = allocMatrix(*(_DWORD *)(a1 + 68), v6);
  *(void *)(a1 + 8) = result;
  int v8 = *(_DWORD *)(a1 + 64);
  if (v8)
  {
    int v9 = *(_DWORD *)(a1 + 48) * v8;
    *(void *)(a1 + 16) = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    *(void *)(a1 + 24) = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    *(void *)(a1 + 32) = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    uint64_t result = allocMatrix(*(_DWORD *)(a1 + 68), v9);
    *(void *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = result;
  }
  return result;
}

float AUsubMAEC::myFilter::runFilter(AUsubMAEC::myFilter *this, DSPSplitComplex *a2, DSPSplitComplex *a3, float **a4, float **a5, int *a6, int *a7, int a8)
{
  DSPSplitComplex v13 = a2;
  vDSP_vclr(a2->realp, 1, *((int *)this + 12));
  vDSP_vclr(v13->imagp, 1, *((int *)this + 12));
  int v84 = a8;
  if (a8)
  {
    vDSP_vclr(a3->realp, 1, *((int *)this + 12));
    vDSP_vclr(a3->imagp, 1, *((int *)this + 12));
  }
  int64x2_t v15 = *(int64x2_t *)v13;
  DSPSplitComplex __D = (DSPSplitComplex)vaddq_s64(*(int64x2_t *)v13, vdupq_n_s64(4uLL));
  if (*((int *)this + 17) < 1)
  {
    unint64_t v76 = (float *)v15.i64[1];
  }
  else
  {
    vDSP_Length v82 = v13;
    uint64_t v16 = 0;
    do
    {
      if (*((int *)this + 15) >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          int v18 = *((_DWORD *)this + 12);
          int v19 = v18 * v17 + 1;
          unsigned int v20 = (float *)(*(void *)(*(void *)this + 8 * v16) + 4 * v19);
          unint64_t v21 = (float *)(*(void *)(*((void *)this + 1) + 8 * v16) + 4 * v19);
          int v22 = a6[v17] * v18 + 1;
          DSPSplitComplex v23 = &a4[v16][v22];
          uint64_t v24 = a5[v16];
          __B.realp = v20;
          __B.imagp = v21;
          __A.realp = v23;
          __A.imagp = &v24[v22];
          vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, *((int *)this + 14));
          ++v17;
        }
        while (v17 < *((int *)this + 15));
      }
      if (*((int *)this + 16) >= 1)
      {
        uint64_t v25 = 0;
        do
        {
          int v26 = *((_DWORD *)this + 12);
          int v27 = a7[v25] * v26;
          int v28 = v26 * v25 + 1;
          uint64_t v29 = (float *)(*(void *)(*((void *)this + 3) + 8 * v16) + 4 * v28);
          long long v30 = &a4[v16][v27];
          uint64_t v31 = &a5[v16][v27];
          v89.realp = (float *)(*(void *)(*((void *)this + 2) + 8 * v16) + 4 * v28);
          v89.imagp = v29;
          v88.realp = v30;
          v88.imagp = v31;
          vDSP_zvma(&v88, 1, &v89, 1, &__D, 1, &__D, 1, *((int *)this + 14));
          unint64_t v32 = (float *)(*(void *)(*((void *)this + 5) + 8 * v16) + 4 * v28);
          std::string v33 = &a4[v16][v27 + 2];
          std::string v34 = &a5[v16][v27 + 2];
          v89.realp = (float *)(*(void *)(*((void *)this + 4) + 8 * v16) + 4 * v28);
          v89.imagp = v32;
          v88.realp = v33;
          v88.imagp = v34;
          vDSP_zvma(&v88, 1, &v89, 1, &__D, 1, &__D, 1, *((int *)this + 14));
          ++v25;
        }
        while (v25 < *((int *)this + 16));
      }
      if (!v16 && v84)
      {
        memcpy(a3->realp + 1, v82->realp + 1, 4 * *((int *)this + 14));
        memcpy(a3->imagp + 1, v82->imagp + 1, 4 * *((int *)this + 14));
      }
      ++v16;
    }
    while (v16 < *((int *)this + 17));
    uint64_t v35 = *((unsigned int *)this + 17);
    if ((int)v35 > 0)
    {
      uint64_t v36 = 0;
      uint64_t v37 = *(void *)this;
      uint64_t v38 = *((unsigned int *)this + 15);
      uint64_t v39 = *((unsigned int *)this + 16);
      do
      {
        uint64_t v40 = a4[v36];
        if ((int)v38 >= 1)
        {
          uint64_t v41 = *(float **)(v37 + 8 * v36);
          realp = v82->realp;
          uint64_t v43 = *((int *)this + 12);
          uint64_t v44 = *((int *)this + 13);
          float v45 = a6;
          uint64_t v46 = v38;
          do
          {
            int v47 = *v45++;
            float *realp = *realp + (float)(*v41 * v40[v47 * (int)v43]);
            *(float *)v15.i32 = realp[v44] + (float)(v41[v44] * v40[(int)v44 + v47 * (int)v43]);
            realp[v44] = *(float *)v15.i32;
            v41 += v43;
            --v46;
          }
          while (v46);
        }
        if ((int)v39 > 0)
        {
          uint64_t v48 = 0;
          uint64_t v49 = *(void *)(*((void *)this + 2) + 8 * v36);
          uint64_t v50 = *(void *)(*((void *)this + 3) + 8 * v36);
          BOOL v51 = a5[v36];
          uint64_t v52 = v82->realp;
          imagp = v82->imagp;
          uint64_t v54 = *((int *)this + 12);
          uint64_t v55 = *((int *)this + 13);
          uint64_t v56 = v50 + 4 * v55;
          uint64_t v57 = 4 * v54;
          uint64_t v58 = v49 + 4 * v55;
          unint64_t v59 = a7;
          uint64_t v60 = v39;
          do
          {
            int v61 = *v59++;
            int v62 = v61 * v54 + 1;
            *uint64_t v52 = *v52 + (float)((float)(*(float *)(v49 + v48) * v40[v62]) - (float)(*(float *)(v50 + v48) * v51[v62]));
            float *imagp = *imagp
                   + (float)((float)(*(float *)(v50 + v48) * v40[v62]) + (float)(*(float *)(v49 + v48) * v51[v62]));
            int v63 = v61 * v54 + v55 - 1;
            v52[v55] = v52[v55]
                     + (float)((float)(*(float *)(v58 + v48) * v40[v63]) - (float)(*(float *)(v56 + v48) * v51[v63]));
            imagp[v55] = imagp[v55]
                       + (float)((float)(*(float *)(v56 + v48) * v40[v63]) + (float)(*(float *)(v58 + v48) * v51[v63]));
            v48 += v57;
            --v60;
          }
          while (v60);
          uint64_t v64 = 0;
          uint64_t v65 = *(void *)(*((void *)this + 4) + 8 * v36);
          uint64_t v66 = *(void *)(*((void *)this + 5) + 8 * v36);
          float v67 = v82->realp;
          uint64_t v68 = v66 + 4 * v55;
          uint64_t v69 = v65 + 4 * v55;
          uint64_t v70 = a7;
          uint64_t v71 = v39;
          do
          {
            int v72 = *v70++;
            int v73 = v72 * v54 + 2;
            *float v67 = *v67 + (float)((float)(*(float *)(v65 + v64) * v40[v73]) - (float)(*(float *)(v66 + v64) * v51[v73]));
            float *imagp = *imagp
                   + (float)((float)(*(float *)(v66 + v64) * v40[v73]) + (float)(*(float *)(v65 + v64) * v51[v73]));
            int v74 = v72 * v54 + v55 - 2;
            v67[v55] = v67[v55]
                     + (float)((float)(*(float *)(v69 + v64) * v40[v74]) - (float)(*(float *)(v68 + v64) * v51[v74]));
            *(float *)v15.i32 = imagp[v55]
                              + (float)((float)(*(float *)(v68 + v64) * v40[v74])
                                      + (float)(*(float *)(v69 + v64) * v51[v74]));
            imagp[v55] = *(float *)v15.i32;
            v64 += v57;
            --v71;
          }
          while (v71);
        }
        ++v36;
      }
      while (v36 != v35);
      float v75 = v82->imagp;
      float *v75 = 0.0;
      v75[*((int *)this + 13)] = 0.0;
      return *(float *)v15.i32;
    }
    DSPSplitComplex v13 = v82;
    unint64_t v76 = v82->imagp;
  }
  float *v76 = 0.0;
  uint64_t v77 = *((int *)this + 13);
  v76[v77] = 0.0;
  if (v84)
  {
    uint64_t v78 = v13->realp;
    uint64_t v79 = a3->realp;
    float *v79 = *v13->realp;
    uint64_t v80 = a3->imagp;
    *uint64_t v80 = *v76;
    v79[v77] = v78[v77];
    *(float *)v15.i32 = v76[v77];
    v80[v77] = *(float *)v15.i32;
  }
  return *(float *)v15.i32;
}

os_log_t ___Z19getMatrixUtilityLogv_block_invoke_16293()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "AudioDSPMatrixUtility");
  getMatrixUtilityLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t NeuralNetBNNS<signed char>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  memcpy(*(void **)(*(void *)(a1 + 48) + 792), *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 516;
    uint64_t v47 = v2;
    do
    {
      if (v4 != 516) {
        memcpy(*(void **)(*(void *)(v2 + 48) + v4 + 276), *(const void **)(*(void *)(v2 + 48) + v4 - 668), *(void *)(*(void *)(v2 + 48) + v4 - 660) - *(void *)(*(void *)(v2 + 48) + v4 - 668));
      }
      uint64_t v5 = *(void *)(v2 + 48);
      vDSP_Length v6 = *(void *)(v5 + v4 - 508);
      vDSP_Length v7 = *(void *)(v5 + v4 - 156);
      float v8 = 1.0 / *(float *)(v5 + v4 - 352);
      float __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      float __B = v8;
      int v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      int v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        unsigned int v11 = v12 >> 3;
        if (v11 > 4)
        {
          float v51 = -128.0;
          float v13 = 127.0;
        }
        else
        {
          float v51 = flt_1BB8C8330[v11];
          float v13 = flt_1BB8C8344[v11];
        }
        float v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        int v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      uint64_t v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        float v16 = 1.0 / *(float *)v15;
        float v50 = -(float)(*(float *)(v15 + 4) * v16);
        float v51 = v16;
        uint64_t v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        int v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v2 + 40);
          LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = HIDWORD(v20);
          unsigned int v19 = v20 >> 3;
          if (v19 > 4)
          {
            float v49 = -128.0;
            float v21 = 127.0;
          }
          else
          {
            float v49 = flt_1BB8C8330[v19];
            float v21 = flt_1BB8C8344[v19];
          }
          float v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          int v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(void *)(v5 + v4 + 396) + v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(void *)(v5 + v4 + 396) + v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(void *)(v5 + v4 + 396) + v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(void *)(v5 + v4 + 396) + v6), 1, v7);
            break;
        }
      }
      uint64_t v23 = *(void *)(v2 + 48);
      float __B = 0.0;
      uint64_t v24 = v23 + v4;
      vDSP_Length v25 = *(void *)(v23 + v4 - 508);
      vDSP_Length v26 = *(void *)(v23 + v4 - 156);
      float v27 = *(float *)(v23 + v4 - 172);
      float v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          uint64_t v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
      }
      long long v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      float v31 = (float)(v27 * v28) * __B;
      float __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        float v32 = v30[45];
        float v33 = *v30;
        float __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(void *)(v23 + v4 + 396) + v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(void *)(v23 + v4 + 396) + v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(void *)(v23 + v4 + 396) + v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(void *)(v23 + v4 + 396) + v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        float v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      uint64_t v35 = *(void *)(v2 + 48);
      float __C = v31;
      uint64_t v36 = v35 + v4;
      uint64_t v37 = *(void *)(v35 + v4 - 156);
      uint64_t v38 = *(void **)(v35 + v4 + 268);
      uint64_t v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        uint64_t v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<signed char>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        float __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        unint64_t v42 = *(float **)(v36 + 300);
        float __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        uint64_t v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        uint64_t v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<signed char>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      unint64_t v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    unsigned int v45 = v44 - 1;
  }
  else
  {
    unsigned int v45 = -1;
  }
  return *(void *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<signed char>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float __N_4 = a6;
  float v23 = a5;
  int __N = a4;
  vDSP_Length v7 = a2;
  float v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      float __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        uint64_t v9 = a4;
        do
        {
          float v10 = *v8++;
          float v11 = v10;
          if (v10 >= 0.0) {
            float v12 = 1.0;
          }
          else {
            float v12 = a5;
          }
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      float __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_Length v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        uint64_t v15 = a4;
        do
        {
          float v16 = *v8;
          if (*v8 < 0.0) {
            float v16 = (float)(expf(v16) + -1.0) * a5;
          }
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      float v19 = 1.0;
      float __B = 0.0;
      float v17 = 0.2;
      float __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      float __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      float __B = 1.0 / __B;
      vDSP_Length v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

uint64_t NeuralNetBNNS<signed char>::setEmbedding(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 209;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 201;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

void NeuralNetBNNS<signed char>::cleanup(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 44))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(void *)(v4 + 800) - *(void *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(void *)(v4 + 824) - *(void *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(void *)(v4 + 848) - *(void *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(void *)(v4 + 872) - *(void *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(void *)(v4 + 920) - *(void *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<signed char>::getOutput(uint64_t a1)
{
  return *(void *)(a1 + 56) - 152;
}

uint64_t NeuralNetBNNS<signed char>::getOutputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<signed char>::getInputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<signed char>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void NeuralNetBNNS<signed char>::~NeuralNetBNNS(void *a1)
{
  NeuralNetBNNS<signed char>::~NeuralNetBNNS(a1);

  JUMPOUT(0x1C185D370);
}

void *NeuralNetBNNS<signed char>::~NeuralNetBNNS(void *a1)
{
  *a1 = &unk_1F14B7860;
  unint64_t v3 = (void **)(a1 + 6);
  uint64_t v2 = a1[6];
  uint64_t v4 = a1[7];
  if (v4 != v2)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      int v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        uint64_t v2 = a1[6];
        uint64_t v4 = a1[7];
        *(void *)(v2 + 968 * v5 + 784) = 0;
      }
      uint64_t v5 = v6;
      unint64_t v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      BOOL v9 = v8 >= v6;
      BOOL v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  vDSP_Length v13 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  *a1 = &unk_1F14B7800;
  float v11 = (std::__shared_weak_count *)a1[4];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

uint64_t NeuralNetBNNS<short>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  memcpy(*(void **)(*(void *)(a1 + 48) + 792), *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 516;
    uint64_t v47 = v2;
    do
    {
      if (v4 != 516) {
        memcpy(*(void **)(*(void *)(v2 + 48) + v4 + 276), *(const void **)(*(void *)(v2 + 48) + v4 - 668), *(void *)(*(void *)(v2 + 48) + v4 - 660) - *(void *)(*(void *)(v2 + 48) + v4 - 668));
      }
      uint64_t v5 = *(void *)(v2 + 48);
      vDSP_Length v6 = *(void *)(v5 + v4 - 508);
      vDSP_Length v7 = *(void *)(v5 + v4 - 156);
      float v8 = 1.0 / *(float *)(v5 + v4 - 352);
      float __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      float __B = v8;
      BOOL v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      int v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        unsigned int v11 = v12 >> 3;
        if (v11 > 4)
        {
          float v51 = -128.0;
          float v13 = 127.0;
        }
        else
        {
          float v51 = flt_1BB8C8330[v11];
          float v13 = flt_1BB8C8344[v11];
        }
        float v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        int v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      uint64_t v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        float v16 = 1.0 / *(float *)v15;
        float v50 = -(float)(*(float *)(v15 + 4) * v16);
        float v51 = v16;
        float v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        int v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v2 + 40);
          LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = HIDWORD(v20);
          unsigned int v19 = v20 >> 3;
          if (v19 > 4)
          {
            float v49 = -128.0;
            float v21 = 127.0;
          }
          else
          {
            float v49 = flt_1BB8C8330[v19];
            float v21 = flt_1BB8C8344[v19];
          }
          float v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          int v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(void *)(v5 + v4 + 396) + 2 * v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(void *)(v5 + v4 + 396) + 2 * v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(void *)(v5 + v4 + 396) + 2 * v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(void *)(v5 + v4 + 396) + 2 * v6), 1, v7);
            break;
        }
      }
      uint64_t v23 = *(void *)(v2 + 48);
      float __B = 0.0;
      uint64_t v24 = v23 + v4;
      vDSP_Length v25 = *(void *)(v23 + v4 - 508);
      vDSP_Length v26 = *(void *)(v23 + v4 - 156);
      float v27 = *(float *)(v23 + v4 - 172);
      float v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          uint64_t v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
      }
      long long v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      float v31 = (float)(v27 * v28) * __B;
      float __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        float v32 = v30[45];
        float v33 = *v30;
        float __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(void *)(v23 + v4 + 396) + 2 * v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(void *)(v23 + v4 + 396) + 2 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(void *)(v23 + v4 + 396) + 2 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(void *)(v23 + v4 + 396) + 2 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        float v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      uint64_t v35 = *(void *)(v2 + 48);
      float __C = v31;
      uint64_t v36 = v35 + v4;
      uint64_t v37 = *(void *)(v35 + v4 - 156);
      uint64_t v38 = *(void **)(v35 + v4 + 268);
      uint64_t v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        uint64_t v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<short>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        float __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        unint64_t v42 = *(float **)(v36 + 300);
        float __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        uint64_t v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        uint64_t v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<short>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      unint64_t v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    unsigned int v45 = v44 - 1;
  }
  else
  {
    unsigned int v45 = -1;
  }
  return *(void *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<short>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float __N_4 = a6;
  float v23 = a5;
  int __N = a4;
  vDSP_Length v7 = a2;
  float v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      float __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        uint64_t v9 = a4;
        do
        {
          float v10 = *v8++;
          float v11 = v10;
          if (v10 >= 0.0) {
            float v12 = 1.0;
          }
          else {
            float v12 = a5;
          }
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      float __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_Length v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        uint64_t v15 = a4;
        do
        {
          float v16 = *v8;
          if (*v8 < 0.0) {
            float v16 = (float)(expf(v16) + -1.0) * a5;
          }
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      float v19 = 1.0;
      float __B = 0.0;
      float v17 = 0.2;
      float __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      float __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      float __B = 1.0 / __B;
      vDSP_Length v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

uint64_t NeuralNetBNNS<short>::setEmbedding(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 209;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 201;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

void NeuralNetBNNS<short>::cleanup(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 44))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(void *)(v4 + 800) - *(void *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(void *)(v4 + 824) - *(void *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(void *)(v4 + 848) - *(void *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(void *)(v4 + 872) - *(void *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(void *)(v4 + 920) - *(void *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<short>::getOutput(uint64_t a1)
{
  return *(void *)(a1 + 56) - 152;
}

uint64_t NeuralNetBNNS<short>::getOutputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<short>::getInputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<short>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void NeuralNetBNNS<short>::~NeuralNetBNNS(void *a1)
{
  NeuralNetBNNS<short>::~NeuralNetBNNS(a1);

  JUMPOUT(0x1C185D370);
}

void *NeuralNetBNNS<short>::~NeuralNetBNNS(void *a1)
{
  *a1 = &unk_1F14B78C0;
  unint64_t v3 = (void **)(a1 + 6);
  uint64_t v2 = a1[6];
  uint64_t v4 = a1[7];
  if (v4 != v2)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      int v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        uint64_t v2 = a1[6];
        uint64_t v4 = a1[7];
        *(void *)(v2 + 968 * v5 + 784) = 0;
      }
      uint64_t v5 = v6;
      unint64_t v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      BOOL v9 = v8 >= v6;
      BOOL v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  vDSP_Length v13 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  *a1 = &unk_1F14B7800;
  float v11 = (std::__shared_weak_count *)a1[4];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

uint64_t NeuralNetBNNS<int>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  memcpy(*(void **)(*(void *)(a1 + 48) + 792), *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 516;
    uint64_t v47 = v2;
    do
    {
      if (v4 != 516) {
        memcpy(*(void **)(*(void *)(v2 + 48) + v4 + 276), *(const void **)(*(void *)(v2 + 48) + v4 - 668), *(void *)(*(void *)(v2 + 48) + v4 - 660) - *(void *)(*(void *)(v2 + 48) + v4 - 668));
      }
      uint64_t v5 = *(void *)(v2 + 48);
      vDSP_Length v6 = *(void *)(v5 + v4 - 508);
      vDSP_Length v7 = *(void *)(v5 + v4 - 156);
      float v8 = 1.0 / *(float *)(v5 + v4 - 352);
      float __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      float __B = v8;
      BOOL v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      int v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        unsigned int v11 = v12 >> 3;
        if (v11 > 4)
        {
          float v51 = -128.0;
          float v13 = 127.0;
        }
        else
        {
          float v51 = flt_1BB8C8330[v11];
          float v13 = flt_1BB8C8344[v11];
        }
        float v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        int v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      uint64_t v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        float v16 = 1.0 / *(float *)v15;
        float v50 = -(float)(*(float *)(v15 + 4) * v16);
        float v51 = v16;
        float v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        int v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v2 + 40);
          LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = HIDWORD(v20);
          unsigned int v19 = v20 >> 3;
          if (v19 > 4)
          {
            float v49 = -128.0;
            float v21 = 127.0;
          }
          else
          {
            float v49 = flt_1BB8C8330[v19];
            float v21 = flt_1BB8C8344[v19];
          }
          float v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          int v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(void *)(v5 + v4 + 396) + 4 * v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(void *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(void *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(void *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
        }
      }
      uint64_t v23 = *(void *)(v2 + 48);
      float __B = 0.0;
      uint64_t v24 = v23 + v4;
      vDSP_Length v25 = *(void *)(v23 + v4 - 508);
      vDSP_Length v26 = *(void *)(v23 + v4 - 156);
      float v27 = *(float *)(v23 + v4 - 172);
      float v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          uint64_t v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
      }
      long long v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      float v31 = (float)(v27 * v28) * __B;
      float __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        float v32 = v30[45];
        float v33 = *v30;
        float __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(void *)(v23 + v4 + 396) + 4 * v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(void *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(void *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(void *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        float v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      uint64_t v35 = *(void *)(v2 + 48);
      float __C = v31;
      uint64_t v36 = v35 + v4;
      uint64_t v37 = *(void *)(v35 + v4 - 156);
      uint64_t v38 = *(void **)(v35 + v4 + 268);
      uint64_t v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        uint64_t v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<int>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        float __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        unint64_t v42 = *(float **)(v36 + 300);
        float __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        uint64_t v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        uint64_t v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<int>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      unint64_t v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    unsigned int v45 = v44 - 1;
  }
  else
  {
    unsigned int v45 = -1;
  }
  return *(void *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<int>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float __N_4 = a6;
  float v23 = a5;
  int __N = a4;
  vDSP_Length v7 = a2;
  float v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      float __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        uint64_t v9 = a4;
        do
        {
          float v10 = *v8++;
          float v11 = v10;
          if (v10 >= 0.0) {
            float v12 = 1.0;
          }
          else {
            float v12 = a5;
          }
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      float __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_Length v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        uint64_t v15 = a4;
        do
        {
          float v16 = *v8;
          if (*v8 < 0.0) {
            float v16 = (float)(expf(v16) + -1.0) * a5;
          }
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      float v19 = 1.0;
      float __B = 0.0;
      float v17 = 0.2;
      float __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      float __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      float __B = 1.0 / __B;
      vDSP_Length v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

uint64_t NeuralNetBNNS<int>::setEmbedding(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 209;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 201;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

void NeuralNetBNNS<int>::cleanup(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 44))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(void *)(v4 + 800) - *(void *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(void *)(v4 + 824) - *(void *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(void *)(v4 + 848) - *(void *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(void *)(v4 + 872) - *(void *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(void *)(v4 + 920) - *(void *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<int>::getOutput(uint64_t a1)
{
  return *(void *)(a1 + 56) - 152;
}

uint64_t NeuralNetBNNS<int>::getOutputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<int>::getInputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<int>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void NeuralNetBNNS<int>::~NeuralNetBNNS(void *a1)
{
  NeuralNetBNNS<int>::~NeuralNetBNNS(a1);

  JUMPOUT(0x1C185D370);
}

void *NeuralNetBNNS<int>::~NeuralNetBNNS(void *a1)
{
  *a1 = &unk_1F14B7920;
  unint64_t v3 = (void **)(a1 + 6);
  uint64_t v2 = a1[6];
  uint64_t v4 = a1[7];
  if (v4 != v2)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      int v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        uint64_t v2 = a1[6];
        uint64_t v4 = a1[7];
        *(void *)(v2 + 968 * v5 + 784) = 0;
      }
      uint64_t v5 = v6;
      unint64_t v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      BOOL v9 = v8 >= v6;
      BOOL v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  vDSP_Length v13 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  *a1 = &unk_1F14B7800;
  float v11 = (std::__shared_weak_count *)a1[4];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

uint64_t NeuralNetBNNS<float>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  memcpy(*(void **)(*(void *)(a1 + 48) + 792), *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  if (*(_DWORD *)(v2 + 44))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 516;
    uint64_t v47 = v2;
    do
    {
      if (v4 != 516) {
        memcpy(*(void **)(*(void *)(v2 + 48) + v4 + 276), *(const void **)(*(void *)(v2 + 48) + v4 - 668), *(void *)(*(void *)(v2 + 48) + v4 - 660) - *(void *)(*(void *)(v2 + 48) + v4 - 668));
      }
      uint64_t v5 = *(void *)(v2 + 48);
      vDSP_Length v6 = *(void *)(v5 + v4 - 508);
      vDSP_Length v7 = *(void *)(v5 + v4 - 156);
      float v8 = 1.0 / *(float *)(v5 + v4 - 352);
      float __C = -(float)(*(float *)(v5 + v4 - 348) * v8);
      float __B = v8;
      BOOL v9 = (const float **)(v5 + v4 + 276);
      vDSP_vsmsa(*v9, 1, &__B, &__C, (float *)*v9, 1, v6);
      int v10 = *(_DWORD *)(v2 + 40);
      if (v10)
      {
        HIDWORD(v12) = *(_DWORD *)(v2 + 40);
        LODWORD(v12) = HIDWORD(v12);
        unsigned int v11 = v12 >> 3;
        if (v11 > 4)
        {
          float v51 = -128.0;
          float v13 = 127.0;
        }
        else
        {
          float v51 = flt_1BB8C8330[v11];
          float v13 = flt_1BB8C8344[v11];
        }
        float v50 = v13;
        vDSP_vclip(*v9, 1, &v51, &v50, (float *)*v9, 1, v6);
        int v10 = *(_DWORD *)(v2 + 40);
      }
      HIDWORD(v14) = v10;
      LODWORD(v14) = v10;
      switch((v14 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v5 + v4 + 396), *v9, 4 * v6);
          break;
        case 2u:
          vDSP_vfixr16(*v9, 1, *(__int16 **)(v5 + v4 + 396), 1, v6);
          break;
        case 4u:
          vDSP_vfixr32(*v9, 1, *(int **)(v5 + v4 + 396), 1, v6);
          break;
        default:
          vDSP_vfixr8(*v9, 1, *(char **)(v5 + v4 + 396), 1, v6);
          break;
      }
      uint64_t v15 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 448) == 1)
      {
        float v16 = 1.0 / *(float *)v15;
        float v50 = -(float)(*(float *)(v15 + 4) * v16);
        float v51 = v16;
        float v17 = (const float **)(v15 + 300);
        vDSP_vsmsa(*(const float **)(v15 + 300), 1, &v51, &v50, *(float **)(v15 + 300), 1, v7);
        int v18 = *(_DWORD *)(v2 + 40);
        if (v18)
        {
          HIDWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v2 + 40);
          LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = HIDWORD(v20);
          unsigned int v19 = v20 >> 3;
          if (v19 > 4)
          {
            float v49 = -128.0;
            float v21 = 127.0;
          }
          else
          {
            float v49 = flt_1BB8C8330[v19];
            float v21 = flt_1BB8C8344[v19];
          }
          float v48 = v21;
          vDSP_vclip(*v17, 1, &v49, &v48, (float *)*v17, 1, v7);
          int v18 = *(_DWORD *)(v2 + 40);
        }
        HIDWORD(v22) = v18;
        LODWORD(v22) = v18;
        switch((v22 >> 3))
        {
          case 0u:
            memcpy((void *)(*(void *)(v5 + v4 + 396) + 4 * v6), *v17, 4 * v7);
            break;
          case 2u:
            vDSP_vfixr16(*v17, 1, (__int16 *)(*(void *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          case 4u:
            vDSP_vfixr32(*v17, 1, (int *)(*(void *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
          default:
            vDSP_vfixr8(*v17, 1, (char *)(*(void *)(v5 + v4 + 396) + 4 * v6), 1, v7);
            break;
        }
      }
      uint64_t v23 = *(void *)(v2 + 48);
      float __B = 0.0;
      uint64_t v24 = v23 + v4;
      vDSP_Length v25 = *(void *)(v23 + v4 - 508);
      vDSP_Length v26 = *(void *)(v23 + v4 - 156);
      float v27 = *(float *)(v23 + v4 - 172);
      float v28 = *(float *)(v23 + v4 - 352);
      HIDWORD(v29) = *(_DWORD *)(v2 + 40);
      LODWORD(v29) = HIDWORD(v29);
      switch((v29 >> 3))
      {
        case 0u:
          memcpy(*(void **)(v23 + v4 + 276), *(const void **)(v23 + v4 + 396), 4 * v25);
          break;
        case 1u:
          uint64_t v24 = v23 + v4;
          goto LABEL_29;
        case 2u:
          vDSP_vflt16(*(const __int16 **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        case 4u:
          vDSP_vflt32(*(const int **)(v23 + v4 + 396), 1, *(float **)(v23 + v4 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
        default:
LABEL_29:
          vDSP_vflt8(*(const char **)(v24 + 396), 1, *(float **)(v24 + 276), 1, *(void *)(v23 + v4 - 508));
          break;
      }
      long long v30 = (float *)(v23 + v4);
      vDSP_sve(*(const float **)(v23 + v4 + 276), 1, &__B, v25);
      float v31 = (float)(v27 * v28) * __B;
      float __B = v31;
      if (*(_DWORD *)(v23 + v4 + 448) == 1)
      {
        float v32 = v30[45];
        float v33 = *v30;
        float __C = 0.0;
        HIDWORD(v34) = *(_DWORD *)(v2 + 40);
        LODWORD(v34) = HIDWORD(v34);
        switch((v34 >> 3))
        {
          case 0u:
            memcpy(*(void **)(v23 + v4 + 300), (const void *)(*(void *)(v23 + v4 + 396) + 4 * v25), 4 * v26);
            break;
          case 2u:
            vDSP_vflt16((const __int16 *)(*(void *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          case 4u:
            vDSP_vflt32((const int *)(*(void *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
          default:
            vDSP_vflt8((const char *)(*(void *)(v23 + v4 + 396) + 4 * v25), 1, *(float **)(v23 + v4 + 300), 1, v26);
            break;
        }
        vDSP_sve(*(const float **)(v23 + v4 + 300), 1, &__C, v26);
        float v31 = (float)((float)(v32 * v33) * __C) + __B;
      }
      uint64_t v35 = *(void *)(v2 + 48);
      float __C = v31;
      uint64_t v36 = v35 + v4;
      uint64_t v37 = *(void *)(v35 + v4 - 156);
      uint64_t v38 = *(void **)(v35 + v4 + 268);
      uint64_t v39 = *(const void **)(v35 + v4 + 396);
      if (*(_DWORD *)(v35 + v4 + 448) == 1)
      {
        BNNSFilterApply(v38, v39, *(void **)(v36 + 324));
        vDSP_vsadd(*(const float **)(v36 + 324), 1, &__C, *(float **)(v36 + 324), 1, 4 * (int)v37);
        uint64_t v40 = *(float **)(v36 + 324);
        __E = *(float **)(v36 + 348);
        NeuralNetBNNS<float>::applyActivationFunction(v40, v40, 8, 3 * v37, 0.0, 0.0);
        float __B = *(float *)&v37;
        vvtanhf(&v40[3 * (int)v37], &v40[3 * (int)v37], (const int *)&__B);
        vDSP_vmma(v40, 1, __E, 1, &v40[(int)v37], 1, &v40[3 * (int)v37], 1, __E, 1, (int)v37);
        unint64_t v42 = *(float **)(v36 + 300);
        float __B = *(float *)&v37;
        vvtanhf(v42, __E, (const int *)&__B);
        uint64_t v2 = v47;
        vDSP_vmul(&v40[2 * (int)v37], 1, *(const float **)(v36 + 300), 1, *(float **)(v36 + 300), 1, (int)v37);
      }
      else
      {
        uint64_t v43 = (const float **)(v36 + 300);
        BNNSFilterApply(v38, v39, *(void **)(v36 + 300));
        vDSP_vsadd(*v43, 1, &__C, (float *)*v43, 1, (int)v37);
        NeuralNetBNNS<float>::applyActivationFunction(*v43, (float *)*v43, *(_DWORD *)(v36 + 444), v37, *(float *)(v36 + 192), *(float *)(v36 + 196));
      }
      ++v3;
      unint64_t v44 = *(unsigned int *)(v2 + 44);
      v4 += 968;
    }
    while (v3 < v44);
    unsigned int v45 = v44 - 1;
  }
  else
  {
    unsigned int v45 = -1;
  }
  return *(void *)(v2 + 48) + 968 * v45 + 816;
}

void NeuralNetBNNS<float>::applyActivationFunction(const float *a1, float *a2, int a3, int a4, float a5, float a6)
{
  float __N_4 = a6;
  float v23 = a5;
  int __N = a4;
  vDSP_Length v7 = a2;
  float v8 = (float *)a1;
  switch(a3)
  {
    case 1:
      float __B = 0.0;
      vDSP_vthr(a1, 1, &__B, a2, 1, a4);
      break;
    case 2:
      if (a4)
      {
        uint64_t v9 = a4;
        do
        {
          float v10 = *v8++;
          float v11 = v10;
          if (v10 >= 0.0) {
            float v12 = 1.0;
          }
          else {
            float v12 = a5;
          }
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      float __B = 0.5;
      vDSP_vsmul(a1, 1, &__B, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_vsmsa(v7, 1, &__B, &__B, v7, 1, __N);
      break;
    case 4:
      vvtanhf(a2, a1, &__N);
      break;
    case 5:
      vDSP_vsmul(a1, 1, &__N_4, a2, 1, a4);
      vvtanhf(v7, v7, &__N);
      vDSP_Length v13 = __N;
      p_B = &v23;
      goto LABEL_22;
    case 6:
      vvfabsf(a2, a1, &__N);
      break;
    case 7:
      if (a4)
      {
        uint64_t v15 = a4;
        do
        {
          float v16 = *v8;
          if (*v8 < 0.0) {
            float v16 = (float)(expf(v16) + -1.0) * a5;
          }
          *v7++ = v16;
          ++v8;
          --v15;
        }
        while (v15);
      }
      break;
    case 8:
      float v19 = 1.0;
      float __B = 0.0;
      float v17 = 0.2;
      float __C = 0.5;
      vDSP_vsmsa(a1, 1, &v17, &__C, a2, 1, a4);
      vDSP_vclip(v7, 1, &__B, &v19, v7, 1, __N);
      break;
    case 9:
      float __B = 0.0;
      vvexpf(a2, a1, &__N);
      vDSP_sve(v7, 1, &__B, __N);
      float __B = 1.0 / __B;
      vDSP_Length v13 = __N;
      p_B = &__B;
LABEL_22:
      vDSP_vsmul(v7, 1, p_B, v7, 1, v13);
      break;
    default:
      return;
  }
}

uint64_t NeuralNetBNNS<float>::setEmbedding(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 209;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

{
  NSObject **v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (!*v1) {
      return 4294956433;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "NeuralNetImpl.hpp";
    __int16 v6 = 1024;
    int v7 = 201;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d NeuralNetBNNS: Embeddings not supported in BNNS mode", (uint8_t *)&v4, 0x12u);
  }
  return 4294956433;
}

void NeuralNetBNNS<float>::cleanup(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 44))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a1 + 48) + v2;
      vDSP_vclr(*(float **)(v4 + 792), 1, (uint64_t)(*(void *)(v4 + 800) - *(void *)(v4 + 792)) >> 2);
      vDSP_vclr(*(float **)(v4 + 816), 1, (uint64_t)(*(void *)(v4 + 824) - *(void *)(v4 + 816)) >> 2);
      vDSP_vclr(*(float **)(v4 + 840), 1, (uint64_t)(*(void *)(v4 + 848) - *(void *)(v4 + 840)) >> 2);
      vDSP_vclr(*(float **)(v4 + 864), 1, (uint64_t)(*(void *)(v4 + 872) - *(void *)(v4 + 864)) >> 2);
      bzero(*(void **)(v4 + 912), *(void *)(v4 + 920) - *(void *)(v4 + 912));
      ++v3;
      v2 += 968;
    }
    while (v3 < *(unsigned int *)(a1 + 44));
  }
}

uint64_t NeuralNetBNNS<float>::getOutput(uint64_t a1)
{
  return *(void *)(a1 + 56) - 152;
}

uint64_t NeuralNetBNNS<float>::getOutputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 968 * (*(_DWORD *)(a1 + 44) - 1) + 360);
}

uint64_t NeuralNetBNNS<float>::getInputSize(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 8);
}

uint64_t NeuralNetBNNS<float>::getNumLayers(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

void NeuralNetBNNS<float>::~NeuralNetBNNS(void *a1)
{
  NeuralNetBNNS<float>::~NeuralNetBNNS(a1);

  JUMPOUT(0x1C185D370);
}

void *NeuralNetBNNS<float>::~NeuralNetBNNS(void *a1)
{
  *a1 = &unk_1F14B7980;
  unint64_t v3 = (void **)(a1 + 6);
  uint64_t v2 = a1[6];
  uint64_t v4 = a1[7];
  if (v4 != v2)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      int v7 = *(void **)(v2 + 968 * v5 + 784);
      if (v7)
      {
        BNNSFilterDestroy(v7);
        uint64_t v2 = a1[6];
        uint64_t v4 = a1[7];
        *(void *)(v2 + 968 * v5 + 784) = 0;
      }
      uint64_t v5 = v6;
      unint64_t v8 = 0x1B810ECF56BE69C9 * ((v4 - v2) >> 3);
      BOOL v9 = v8 >= v6;
      BOOL v10 = v8 == v6++;
    }
    while (!v10 && v9);
  }
  vDSP_Length v13 = v3;
  std::vector<FullyConnectedLayerBNNS<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  *a1 = &unk_1F14B7800;
  float v11 = (std::__shared_weak_count *)a1[4];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

uint64_t NeuralNetEspresso::process(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 40) != 65568)
  {
    float v17 = *(NSObject ***)(a1 + 8);
    if (v17) {
      int v18 = *v17;
    }
    else {
      int v18 = 0;
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315650;
      float v28 = "NeuralNetImpl.cpp";
      __int16 v29 = 1024;
      int v30 = 958;
      __int16 v31 = 1024;
      int v32 = -66743;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Only Float32 inputs supported.\"", (uint8_t *)&v27, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F14C8B68;
    exception[2] = -66743;
  }
  if (!*(unsigned char *)(a1 + 424)) {
    goto LABEL_24;
  }
  unint64_t v3 = *(const void **)a2;
  int64_t v5 = *(void *)(a2 + 8) - (void)v3;
  if (v5 >> 2 != *(void *)(a1 + 344)
                * *(void *)(a1 + 336)
                * *(void *)(a1 + 352)
                * *(void *)(a1 + 360)
                * *(void *)(a1 + 368))
  {
    uint64_t v19 = *(void *)(a1 + 344)
        * *(void *)(a1 + 336)
        * *(void *)(a1 + 352)
        * *(void *)(a1 + 360)
        * *(void *)(a1 + 368);
    unint64_t v20 = v5;
    float v21 = *(NSObject ***)(a1 + 8);
    if (v21) {
      unint64_t v22 = *v21;
    }
    else {
      unint64_t v22 = 0;
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136316162;
      float v28 = "NeuralNetImpl.cpp";
      __int16 v29 = 1024;
      int v30 = 947;
      __int16 v31 = 1024;
      int v32 = -66743;
      __int16 v33 = 1024;
      int v34 = v20 >> 2;
      __int16 v35 = 1024;
      int v36 = v19;
      _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Input size (%u) and the actual NN input size (%u) not maching!\"", (uint8_t *)&v27, 0x24u);
    }
    vDSP_Length v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)vDSP_Length v26 = &unk_1F14C8B68;
    v26[2] = -66743;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 416) == 65568 ? *(void **)(a1 + 256) : 0;
  memcpy(v6, v3, v5);
  if (!*(unsigned char *)(a1 + 208)) {
    goto LABEL_24;
  }
  uint64_t v7 = espresso_plan_execute_sync();
  if (v7)
  {
    uint64_t v23 = v7;
    uint64_t v24 = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1C185CC00](v24, v23, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  if (!*(unsigned char *)(a1 + 776)) {
LABEL_24:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  if (*(_DWORD *)(a1 + 768) == 65568) {
    unint64_t v8 = *(const void **)(a1 + 608);
  }
  else {
    unint64_t v8 = 0;
  }
  memcpy(*(void **)(a1 + 784), v8, *(void *)(a1 + 792) - *(void *)(a1 + 784));
  if (*(_DWORD *)(a1 + 144) == 1)
  {
    vDSP_vclr(*(float **)(a1 + 856), 1, (uint64_t)(*(void *)(a1 + 864) - *(void *)(a1 + 856)) >> 2);
    uint64_t v9 = *(void *)(a1 + 832);
    uint64_t v10 = *(void *)(a1 + 840);
    while (v9 != v10)
    {
      float v11 = *(void **)v9;
      int v12 = *(_DWORD *)(v9 + 160);
      if (*(_DWORD *)(v9 + 328) == 65568) {
        vDSP_Length v13 = *(const void **)(v9 + 168);
      }
      else {
        vDSP_Length v13 = 0;
      }
      size_t v14 = 4
          * *(void *)(v9 + 80)
          * *(void *)(v9 + 88)
          * *(void *)(v9 + 96)
          * *(void *)(v9 + 104)
          * *(void *)(v9 + 112);
      memcpy(*(void **)(a1 + 856), v13, v14);
      if (v12 == 65568) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = 0;
      }
      memcpy(v15, *(const void **)(a1 + 856), v14);
      v9 += 336;
    }
  }
  return a1 + 784;
}

void sub_1BB5BC64C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t NeuralNetEspresso::setEmbedding(NeuralNetEspresso *this, float a2)
{
  float __A = a2;
  if (*((unsigned char *)this + 600))
  {
    if (*((_DWORD *)this + 148) == 65568) {
      unint64_t v3 = (float *)*((void *)this + 54);
    }
    else {
      unint64_t v3 = 0;
    }
    vDSP_vfill(&__A, v3, 1, *((void *)this + 65)* *((void *)this + 64)* *((void *)this + 66)* *((void *)this + 67)* *((void *)this + 68));
    return 0;
  }
  else
  {
    uint64_t v4 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 3), v4 + 88, 16);
    if (message)
    {
      unsigned int v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 3) + 16), v6);
    }
    return 4294956433;
  }
}

uint64_t NeuralNetEspresso::setEmbedding(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 600))
  {
    if (*(_DWORD *)(a1 + 592) == 65568) {
      unint64_t v3 = *(void **)(a1 + 432);
    }
    else {
      unint64_t v3 = 0;
    }
    memcpy(v3, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
    return 0;
  }
  else
  {
    uint64_t v4 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 24), v4 + 88, 16);
    if (message)
    {
      unsigned int v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(void *)(a1 + 24) + 16), v6);
    }
    return 4294956433;
  }
}

void NeuralNetEspresso::cleanup(NeuralNetEspresso *this)
{
  if (!*((unsigned char *)this + 424)) {
LABEL_26:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  if (*((_DWORD *)this + 104) == 65568) {
    uint64_t v2 = (float *)*((void *)this + 32);
  }
  else {
    uint64_t v2 = 0;
  }
  vDSP_vclr(v2, 1, *((void *)this + 43)* *((void *)this + 42)* *((void *)this + 44)* *((void *)this + 45)* *((void *)this + 46));
  if (*((char *)this + 119) < 0)
  {
    if (!*((void *)this + 13)) {
      goto LABEL_14;
    }
  }
  else if (!*((unsigned char *)this + 119))
  {
    goto LABEL_14;
  }
  if (!*((unsigned char *)this + 600)) {
    goto LABEL_26;
  }
  if (*((_DWORD *)this + 148) == 65568) {
    unint64_t v3 = (float *)*((void *)this + 54);
  }
  else {
    unint64_t v3 = 0;
  }
  vDSP_vclr(v3, 1, *((void *)this + 65)* *((void *)this + 64)* *((void *)this + 66)* *((void *)this + 67)* *((void *)this + 68));
LABEL_14:
  if (!*((unsigned char *)this + 776)) {
    goto LABEL_26;
  }
  if (*((_DWORD *)this + 192) == 65568) {
    uint64_t v4 = (float *)*((void *)this + 76);
  }
  else {
    uint64_t v4 = 0;
  }
  vDSP_vclr(v4, 1, *((void *)this + 87)* *((void *)this + 86)* *((void *)this + 88)* *((void *)this + 89)* *((void *)this + 90));
  vDSP_vclr(*((float **)this + 98), 1, (uint64_t)(*((void *)this + 99) - *((void *)this + 98)) >> 2);
  if (*((_DWORD *)this + 36) == 1)
  {
    uint64_t v5 = *((void *)this + 104);
    uint64_t v6 = *((void *)this + 105);
    while (v5 != v6)
    {
      if (*(_DWORD *)(v5 + 160) == 65568) {
        uint64_t v7 = *(void **)v5;
      }
      else {
        uint64_t v7 = 0;
      }
      bzero(v7, 4* *(void *)(v5 + 80)* *(void *)(v5 + 88)* *(void *)(v5 + 96)* *(void *)(v5 + 104)* *(void *)(v5 + 112));
      v5 += 336;
    }
  }
}

uint64_t NeuralNetEspresso::getOutput(NeuralNetEspresso *this)
{
  return (uint64_t)this + 784;
}

uint64_t NeuralNetEspresso::getOutputSize(NeuralNetEspresso *this)
{
  if (!*((unsigned char *)this + 776)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  return *((void *)this + 87)
       * *((void *)this + 86)
       * *((void *)this + 88)
       * *((void *)this + 89)
       * *((void *)this + 90);
}

uint64_t NeuralNetEspresso::getInputSize(NeuralNetEspresso *this)
{
  if (!*((unsigned char *)this + 424)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  return *((void *)this + 43)
       * *((void *)this + 42)
       * *((void *)this + 44)
       * *((void *)this + 45)
       * *((void *)this + 46);
}

uint64_t NeuralNetEspresso::getNumLayers(NeuralNetEspresso *this)
{
  return 0;
}

void NeuralNetEspresso::~NeuralNetEspresso(NeuralNetEspresso *this)
{
  NeuralNetEspresso::~NeuralNetEspresso(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject **v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unsigned char v10[12];
  __int16 v11;
  int v12;
  uint64_t v13;

  vDSP_Length v13 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B79E0;
  uint64_t v2 = (NSObject **)*((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = *v2;
    if (!*v2) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v10 = 136315394;
    *(void *)&v10[4] = "NeuralNetImpl.cpp";
    float v11 = 1024;
    int v12 = 789;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Destructing.", v10, 0x12u);
  }
LABEL_7:
  uint64_t v4 = (void *)*((void *)this + 107);
  if (v4)
  {
    *((void *)this + 108) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 104);
  if (v5)
  {
    *((void *)this + 105) = v5;
    operator delete(v5);
  }
  *(void *)uint64_t v10 = (char *)this + 808;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  uint64_t v6 = (void *)*((void *)this + 98);
  if (v6)
  {
    *((void *)this + 99) = v6;
    operator delete(v6);
  }
  if (*((unsigned char *)this + 248))
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 30);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (*((unsigned char *)this + 208)) {
    vp::Domain_Pair<std::shared_ptr<vp::vx::components::Audio_Data_Analysis::Node_Decorator_Factory>>::~Domain_Pair((uint64_t)this + 176);
  }
  if (*((unsigned char *)this + 168))
  {
    unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_1F14B7800;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

uint64_t NeuralNetEspressoV2::process(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 336);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NeuralNetEspressoV2::SetInput<float>(a1, v4, (unsigned __int8 *)(a1 + 64), a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)(a1 + 344));
  uint64_t v6 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 336);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NeuralNetEspressoV2::GetOutput<float>((void **)&v23.__r_.__value_.__l.__data_, a1, v6, (unsigned __int8 *)(a1 + 112));
  unint64_t v8 = *(void **)(a1 + 352);
  if (v8)
  {
    *(void *)(a1 + 36std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
    operator delete(v8);
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 36std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    *(void *)(a1 + 368) = 0;
  }
  *(std::string *)(a1 + 352) = v23;
  memset(&v23, 0, sizeof(v23));
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(_DWORD *)(a1 + 136) == 1)
  {
    vDSP_vclr(*(float **)(a1 + 400), 1, (uint64_t)(*(void *)(a1 + 408) - *(void *)(a1 + 400)) >> 2);
    uint64_t v9 = *(long long **)(a1 + 376);
    uint64_t v10 = *(long long **)(a1 + 384);
    if (v9 != v10)
    {
      float v11 = (void **)(a1 + 400);
      do
      {
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v12 = *v9;
          v23.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
          *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
        }
        if (*((char *)v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)v9 + 3), *((void *)v9 + 4));
        }
        else
        {
          long long v13 = *(long long *)((char *)v9 + 24);
          v22.__r_.__value_.__r.__words[2] = *((void *)v9 + 5);
          *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
        }
        size_t v14 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
        uint64_t v15 = *(std::__shared_weak_count **)(a1 + 336);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        NeuralNetEspressoV2::GetOutput<float>((void **)&v20, a1, v14, (unsigned __int8 *)&v22);
        float v16 = *v11;
        if (*v11)
        {
          *(void *)(a1 + 408) = v16;
          operator delete(v16);
          *float v11 = 0;
          *(void *)(a1 + 408) = 0;
          *(void *)(a1 + 416) = 0;
        }
        *(_OWORD *)(a1 + 40std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v20;
        *(void *)(a1 + 416) = v21;
        uint64_t v21 = 0;
        long long v20 = 0uLL;
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        float v17 = *(E5RT::ExecutionStreamOperation **)(a1 + 328);
        int v18 = *(std::__shared_weak_count **)(a1 + 336);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        NeuralNetEspressoV2::SetInput<float>(a1, v17, (unsigned __int8 *)&v23, a1 + 400);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        v9 += 3;
      }
      while (v9 != v10);
    }
  }
  return a1 + 352;
}

void sub_1BB5BCE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NeuralNetEspressoV2::SetInput<float>(uint64_t a1, E5RT::ExecutionStreamOperation *this, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v22, InputPorts);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v22, a3))
  {
    int v18 = *(NSObject ***)(a1 + 8);
    if (v18) {
      uint64_t v19 = *v18;
    }
    else {
      uint64_t v19 = 0;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if ((a3[23] & 0x80u) == 0) {
        long long v20 = (uint64_t *)a3;
      }
      else {
        long long v20 = *(uint64_t **)a3;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1181;
      __int16 v24 = 1024;
      int v25 = -66743;
      __int16 v26 = 2080;
      int v27 = v20;
      _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Input (%s) not available.\"", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F14C8B68;
    exception[2] = -66743;
  }
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v22, a3);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = v8;
  uint64_t v10 = (E5RT::IOPort *)*((void *)v8 + 5);
  float v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPort::GetMemoryObject((uint64_t *)buf, v10);
  long long v12 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*(E5RT::MemoryObject **)buf);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(v12);
  if (v14 >= 4) {
    uint64_t v15 = (void *)DataSpan;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 != *(void *)a4) {
    memmove(v15, *(const void **)a4, v16 - *(void *)a4);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v22);
}

void sub_1BB5BD0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t NeuralNetEspressoV2::GetOutput<float>(void **a1, uint64_t a2, E5RT::ExecutionStreamOperation *this, unsigned __int8 *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v24, OutputPorts);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v24, a4))
  {
    long long v20 = *(NSObject ***)(a2 + 8);
    if (v20) {
      uint64_t v21 = *v20;
    }
    else {
      uint64_t v21 = 0;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      if ((a4[23] & 0x80u) == 0) {
        std::string v22 = (uint64_t *)a4;
      }
      else {
        std::string v22 = *(uint64_t **)a4;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1194;
      __int16 v26 = 1024;
      int v27 = -66743;
      __int16 v28 = 2080;
      __int16 v29 = v22;
      _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Output (%s) not available.\"", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F14C8B68;
    exception[2] = -66743;
  }
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v24, a4);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = v8;
  uint64_t v10 = (E5RT::IOPort *)*((void *)v8 + 5);
  float v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPort::GetMemoryObject((uint64_t *)buf, v10);
  long long v12 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*(E5RT::MemoryObject **)buf);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(v12);
  uint64_t v14 = DataSpan;
  unint64_t v16 = v15;
  unint64_t v17 = v15 >> 2;
  if (v15 >= 4) {
    int v18 = (const void *)DataSpan;
  }
  else {
    int v18 = 0;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  std::vector<float>::vector(a1, v17);
  if (v16 >= 4) {
    memmove(*a1, v18, (size_t)v18 + 4 * v17 - v14);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v24);
}

void sub_1BB5BD32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v30 = (float *)(a1 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 24);
    __int16 v29 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        long long v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (unint64_t i = *v12; i; unint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v30, i + 16, v5 + 16)) {
                goto LABEL_46;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v15 = operator new(0x38uLL);
      v31[0] = v15;
      v31[1] = a1 + 16;
      char v32 = 0;
      *unint64_t v15 = 0;
      v15[1] = v8;
      unint64_t v16 = (std::string *)(v15 + 2);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        v15[4] = *((void *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v15[5] = *((void *)v5 + 5);
      uint64_t v18 = *((void *)v5 + 6);
      v15[6] = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      char v32 = 1;
      float v19 = (float)(unint64_t)(*v6 + 1);
      float v20 = *v30;
      if (!v9 || (float)(v20 * (float)v9) < v19)
      {
        BOOL v21 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v21 = 1;
        }
        unint64_t v22 = v21 | (2 * v9);
        unint64_t v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23) {
          size_t v24 = v23;
        }
        else {
          size_t v24 = v22;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v24);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v25 = *(void *)a1;
      __int16 v26 = *(void **)(*(void *)a1 + 8 * v2);
      if (v26)
      {
        *unint64_t v15 = *v26;
      }
      else
      {
        *unint64_t v15 = *v29;
        *__int16 v29 = v15;
        *(void *)(v25 + 8 * v2) = v29;
        if (!*v15) {
          goto LABEL_45;
        }
        unint64_t v27 = *(void *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v27 >= v9) {
            v27 %= v9;
          }
        }
        else
        {
          v27 &= v9 - 1;
        }
        __int16 v26 = (void *)(*(void *)a1 + 8 * v27);
      }
      void *v26 = v15;
LABEL_45:
      v31[0] = 0;
      ++*v6;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
LABEL_46:
      uint64_t v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BB5BD638(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<vp::vx::io::Object::Log_Context,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<vp::vx::io::Object::Log_Context,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t NeuralNetEspressoV2::setEmbedding(NeuralNetEspressoV2 *this, float a2)
{
  float __A = a2;
  if (*((unsigned char *)this + 312))
  {
    if (*((_DWORD *)this + 76) == 65568) {
      unint64_t v3 = (float *)*((void *)this + 18);
    }
    else {
      unint64_t v3 = 0;
    }
    vDSP_vfill(&__A, v3, 1, *((void *)this + 29)* *((void *)this + 28)* *((void *)this + 30)* *((void *)this + 31)* *((void *)this + 32));
    return 0;
  }
  else
  {
    uint64_t v4 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 3), v4 + 88, 16);
    if (message)
    {
      unint64_t v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 3) + 16), v6);
    }
    return 4294956433;
  }
}

uint64_t NeuralNetEspressoV2::setEmbedding(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 312))
  {
    if (*(_DWORD *)(a1 + 304) == 65568) {
      unint64_t v3 = *(void **)(a1 + 144);
    }
    else {
      unint64_t v3 = 0;
    }
    memcpy(v3, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
    return 0;
  }
  else
  {
    uint64_t v4 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 24), v4 + 88, 16);
    if (message)
    {
      unint64_t v6 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(void *)(a1 + 24) + 16), v6);
    }
    return 4294956433;
  }
}

void NeuralNetEspressoV2::cleanup(NeuralNetEspressoV2 *this)
{
  if (*((char *)this + 111) < 0)
  {
    if (!*((void *)this + 12)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 111))
  {
    goto LABEL_10;
  }
  if (!*((unsigned char *)this + 312)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (*((_DWORD *)this + 76) == 65568) {
    unint64_t v2 = (float *)*((void *)this + 18);
  }
  else {
    unint64_t v2 = 0;
  }
  vDSP_vclr(v2, 1, *((void *)this + 29)* *((void *)this + 28)* *((void *)this + 30)* *((void *)this + 31)* *((void *)this + 32));
LABEL_10:
  unint64_t v3 = (float *)*((void *)this + 44);
  vDSP_Length v4 = (uint64_t)(*((void *)this + 45) - (void)v3) >> 2;

  vDSP_vclr(v3, 1, v4);
}

uint64_t NeuralNetEspressoV2::getOutput(NeuralNetEspressoV2 *this)
{
  return (uint64_t)this + 352;
}

uint64_t NeuralNetEspressoV2::getOutputSize(NeuralNetEspressoV2 *this)
{
  return *((unsigned int *)this + 81);
}

uint64_t NeuralNetEspressoV2::getInputSize(NeuralNetEspressoV2 *this)
{
  return *((unsigned int *)this + 80);
}

uint64_t NeuralNetEspressoV2::getNumLayers(NeuralNetEspressoV2 *this)
{
  return 0;
}

void NeuralNetEspressoV2::~NeuralNetEspressoV2(NeuralNetEspressoV2 *this)
{
  NeuralNetEspressoV2::~NeuralNetEspressoV2(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject **v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unsigned char v9[12];
  __int16 v10;
  int v11;
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B7A40;
  unint64_t v2 = (NSObject **)*((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = *v2;
    if (!*v2) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)unint64_t v9 = 136315394;
    *(void *)&v9[4] = "NeuralNetImpl.cpp";
    uint8x8_t v10 = 1024;
    unint64_t v11 = 1126;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NeuralNetEspressoV2 Destructing.", v9, 0x12u);
  }
LABEL_7:
  vDSP_Length v4 = (void *)*((void *)this + 50);
  if (v4)
  {
    *((void *)this + 5freeMatrix(*((_DWORD *)this + 17), this + 1) = v4;
    operator delete(v4);
  }
  *(void *)unint64_t v9 = (char *)this + 376;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  int8x8_t v5 = (void *)*((void *)this + 44);
  if (v5)
  {
    *((void *)this + 45) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint8x8_t v7 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  *(void *)this = &unk_1F14B7800;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void *MIL2BNNS::process(void *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  memcpy(*(void **)(a1[33] + 40), *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
  ++v2[27];
  BNNSGraphContextExecute_v2();
  unint64_t v3 = (void *)v2[15];
  v2 += 15;
  memcpy(v3, *(const void **)(v2[23] + 40), *(void *)(v2[23] + 8));
  return v2;
}

uint64_t MIL2BNNS::setEmbedding(MIL2BNNS *this, float a2)
{
  float __A = a2;
  uint64_t v3 = *((void *)this + 34);
  if (v3 && *(void *)v3 == 1)
  {
    vDSP_vfill(&__A, *(float **)(v3 + 40), 1, 1uLL);
    return 0;
  }
  else
  {
    uint64_t v5 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 3), v5 + 88, 16);
    if (message)
    {
      uint8x8_t v7 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 3) + 16), v7);
    }
    return 4294956433;
  }
}

uint64_t MIL2BNNS::setEmbedding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 272);
  if (v3 && (vDSP_Length v4 = *(const void **)a2, v6 = *(void *)(a2 + 8) - (void)v4, *(void *)v3 == v6 >> 2))
  {
    memcpy(*(void **)(v3 + 40), v4, v6);
    return 0;
  }
  else
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(a1 + 24), v8 + 88, 16);
    if (message)
    {
      uint8x8_t v10 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*(void *)(a1 + 24) + 16), v10);
    }
    return 4294956433;
  }
}

void MIL2BNNS::cleanup(MIL2BNNS *this)
{
  bzero(*((void **)this + 31), *((void *)this + 32));
  if (*((_DWORD *)this + 28) == 2)
  {
    uint64_t v2 = *((void *)this + 35);
    uint64_t v3 = *((void *)this + 36);
    if (v2 != v3)
    {
      vDSP_Length v4 = (void *)((char *)this + 24 * ((*((_DWORD *)this + 54) & 1) == 0) + 168);
      do
      {
        if (!*(void *)(v2 + 40))
        {
          uint64_t ArgumentPosition = BNNSGraphGetArgumentPosition();
          int64_t v6 = *(void **)(*v4 + 16 * ArgumentPosition);
          if (v6) {
            bzero(v6, *(void *)(*v4 + 16 * ArgumentPosition + 8));
          }
        }
        v2 += 48;
      }
      while (v2 != v3);
    }
  }
}

uint64_t MIL2BNNS::getOutput(MIL2BNNS *this)
{
  return (uint64_t)this + 120;
}

uint64_t MIL2BNNS::getOutputSize(MIL2BNNS *this)
{
  return **((void **)this + 38);
}

uint64_t MIL2BNNS::getInputSize(MIL2BNNS *this)
{
  return **((void **)this + 33);
}

uint64_t MIL2BNNS::getNumLayers(MIL2BNNS *this)
{
  return 0;
}

void MIL2BNNS::~MIL2BNNS(MIL2BNNS *this)
{
  MIL2BNNS::~MIL2BNNS(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  NSObject **v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  const void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unsigned char v12[12];
  __int16 v13;
  int v14;
  uint64_t v15;

  unint64_t v15 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14B7AA0;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2 && !*((void *)this + 20))
  {
    if (*((unsigned char *)this + 224)) {
      munmap(v2, *((void *)this + 19));
    }
    else {
      free(v2);
    }
  }
  if (*((void *)this + 39))
  {
    BNNSGraphContextDestroy_v2();
    *((void *)this + 39) = 0;
    *((void *)this + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  uint64_t v3 = (NSObject **)*((void *)this + 1);
  if (v3)
  {
    vDSP_Length v4 = *v3;
    if (!*v3) {
      goto LABEL_14;
    }
  }
  else
  {
    vDSP_Length v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v12 = 136315394;
    *(void *)&v12[4] = "NeuralNetImpl.cpp";
    unint64_t v13 = 1024;
    unint64_t v14 = 1749;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIL2BNNS Destructing.", v12, 0x12u);
  }
LABEL_14:
  *(void *)uint64_t v12 = (char *)this + 280;
  std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
  uint64_t v5 = *((void *)this + 31);
  *((void *)this + 3freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  if (v5) {
    MEMORY[0x1C185D340](v5, 0x1000C8077774924);
  }
  int64_t v6 = *((void *)this + 30);
  *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  if (v6) {
    MEMORY[0x1C185D340](v6, 0x1000C8077774924);
  }
  for (unint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v8 = *(void **)((char *)this + i + 192);
    if (v8)
    {
      *(void *)((char *)this + i + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
      operator delete(v8);
    }
  }
  unint64_t v9 = (const void *)*((void *)this + 20);
  if (v9) {
    CFRelease(v9);
  }
  uint8x8_t v10 = (void *)*((void *)this + 15);
  if (v10)
  {
    *((void *)this + 16) = v10;
    operator delete(v10);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  *(void *)this = &unk_1F14B7800;
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1BB5BE1A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<MIL2BNNS::GraphTensor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    vDSP_Length v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 6;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t NeuralNetImpl::NeuralNetImpl(uint64_t a1, caulk::deferred_logger **a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F14B7800;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  caulk::deferred_logger::create_v(*a2, a2);
  LOBYTE(v8) = 0;
  AppIntegerCFDictionaryRef Value = CACFPreferencesGetAppIntegerValue(@"neuralnetutility_detailed_logging", @"com.apple.coreaudio", (BOOL *)&v8);
  if ((_BYTE)v8) {
    int v4 = AppIntegerValue;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(NSObject ***)(a1 + 8);
  if (v5)
  {
    int64_t v6 = *v5;
    if (!*v5) {
      return a1;
    }
  }
  else
  {
    int64_t v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315650;
    unint64_t v9 = "NeuralNetImpl.cpp";
    __int16 v10 = 1024;
    int v11 = 82;
    __int16 v12 = 1024;
    int v13 = v4;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Detailed logging set to %d.", (uint8_t *)&v8, 0x18u);
  }
  return a1;
}

void sub_1BB5BE37C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<signed char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint8x8_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      int v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint8x8_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      __int16 v12 = operator new(v11);
    }
    else {
      __int16 v12 = 0;
    }
    uint64_t v14 = &v8[(void)v12];
    unint64_t v15 = &v8[(void)v12 + v4];
    unint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    long long v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--uint64_t v14 = v18;
      }
      while (v7 != v17);
      uint8x8_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<short>::resize(char **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 1;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[2 * a2];
    }
  }
  else
  {
    unint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 1)
    {
      unint64_t v23 = &v5[2 * (a2 - v7)];
      uint64_t v24 = 2 * a2 - 2 * v7;
      do
      {
        *(_WORD *)uint64_t v5 = *a3;
        v5 += 2;
        v24 -= 2;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      if (v9 - v6 <= a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = v9 - v6;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v12 = v11;
      }
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v12);
      unint64_t v15 = &v13[2 * v7];
      unint64_t v16 = &v13[2 * a2];
      uint64_t v17 = 2 * a2 - 2 * v7;
      char v18 = v15;
      do
      {
        *(_WORD *)char v18 = *a3;
        v18 += 2;
        v17 -= 2;
      }
      while (v17);
      float v19 = &v13[2 * v14];
      float v20 = *a1;
      for (unint64_t i = a1[1]; i != v20; i -= 2)
      {
        __int16 v22 = *((_WORD *)i - 1);
        *((_WORD *)v15 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v22;
        v15 -= 2;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer begin = this->__begin_;
  std::vector<int>::pointer end = this->__end_;
  std::vector<int>::size_type v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    uint64_t value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      unint64_t v23 = &end[__sz - v7];
      std::vector<int>::size_type v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4;
      }
      while (v24);
      this->__end_ = v23;
    }
    else
    {
      if (__sz >> 62) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = (char *)value - (char *)begin;
      std::vector<int>::size_type v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz) {
        std::vector<int>::size_type v11 = __sz;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v12);
      unint64_t v15 = (int *)&v13[4 * v7];
      unint64_t v16 = (int *)&v13[4 * __sz];
      std::vector<int>::size_type v17 = 4 * __sz - 4 * v7;
      char v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4;
      }
      while (v17);
      float v19 = (int *)&v13[4 * v14];
      std::vector<int>::pointer v20 = this->__begin_;
      for (std::vector<int>::pointer i = this->__end_; i != v20; --i)
      {
        int v22 = *(i - 1);
        *--unint64_t v15 = v22;
      }
      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  std::vector<int>::size_type v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + freeMatrix(*((_DWORD *)this + 17), this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    os_log_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    os_log_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    float v19 = v16;
LABEL_18:
    os_log_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

uint64_t audiodsp::espresso::v1::network::bind_buffer()
{
  uint64_t result = espresso_network_bind_buffer();
  if (result)
  {
    uint64_t v1 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x1C185CC00](exception, v1, &audiodsp::espresso::v1::error_category(void)::instance);
  }
  return result;
}

void sub_1BB5BE88C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1BB5BE91C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1}::operator()()
{
  uint64_t result = espresso_plan_destroy();
  if (result) {
    __assert_rtn("operator()", "plan.h", 61, "status == ESPRESSO_STATUS_SUCCESS");
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1},std::allocator<void>>::__on_zero_shared()
{
  uint64_t result = espresso_plan_destroy();
  if (result) {
    __assert_rtn("operator()", "plan.h", 61, "status == ESPRESSO_STATUS_SUCCESS");
  }
  return result;
}

void std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::plan::plan(std::shared_ptr<void>,int)::{lambda(void *)#1},std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::context::context(espresso_engine_t,int)::{lambda(void *)#1},std::allocator<void>>::__on_zero_shared()
{
  return espresso_context_destroy();
}

void std::__shared_ptr_pointer<void *,audiodsp::espresso::v1::context::context(espresso_engine_t,int)::{lambda(void *)#1},std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void NeuralNetEspressoV2::AllocateAndBindMemoryToPort(NeuralNetEspressoV2 *this, E5RT::IOPort *a2)
{
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&v6, this);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to a port descriptor.");
  }
  if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v6))
  {
    uint64_t v2 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v6);
    E5RT::TensorDescriptor::GetSize(v2);
    E5RT::BufferObject::AllocMemory();
    if (v5) {
      operator new();
    }
  }
  else
  {
    if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v6))
    {
      unint64_t v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v4, "Found an unsupported descriptor type.");
    }
    E5RT::OperandDescriptor::SurfaceDescriptor(v6);
    E5RT::SurfaceObject::AllocSurface();
    if (v5) {
      operator new();
    }
  }
  E5RT::IOPort::BindMemoryObject();
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BB5BEC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  unint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void MIL2BNNS::getCachedIRLocation(std::string *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a3, @"TaskID");
  CFStringRef v7 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFStringRef v73 = v7;
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a3, @"TaskIteration");
  CFNumberRef v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  CFNumberRef v72 = v9;
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a3, @"BlockSize");
  CFNumberRef v11 = v10;
  if (v10) {
    CFRetain(v10);
  }
  CFNumberRef v71 = v11;
  CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a3, @"CacheIRFile");
  CFNumberRef v13 = v12;
  if (v12)
  {
    CFRetain(v12);
    CFNumberRef v70 = v13;
    BOOL v14 = applesauce::CF::convert_to<BOOL,0>(v13);
  }
  else
  {
    BOOL v14 = 0;
    CFNumberRef v70 = 0;
  }
  if (_xpc_runtime_is_app_sandboxed())
  {
    unint64_t v15 = (NSObject **)*((void *)a2 + 1);
    if (v15)
    {
      unint64_t v16 = *v15;
      if (!*v15) {
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1430;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d app sandboxed: disable cache", buf, 0x12u);
    }
LABEL_27:
    int v22 = (NSObject **)*((void *)a2 + 1);
    if (v22)
    {
      unint64_t v23 = *v22;
      if (!*v22) {
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v23 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1436;
      std::vector<int>::size_type v24 = "%25s:%-5d CacheIRFile flag is disabled";
      uint64_t v25 = v23;
      os_log_type_t v26 = OS_LOG_TYPE_DEBUG;
LABEL_33:
      _os_log_impl(&dword_1BB0CE000, v25, v26, v24, buf, 0x12u);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (!v14) {
    goto LABEL_27;
  }
  if (!v7 || !v9 || !v11)
  {
    unint64_t v27 = (NSObject **)*((void *)a2 + 1);
    if (v27)
    {
      __int16 v28 = *v27;
      if (!*v27) {
        goto LABEL_34;
      }
    }
    else
    {
      __int16 v28 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1440;
      std::vector<int>::size_type v24 = "%25s:%-5d Missing TaskID, TaskIteration, BlockSize, or CacheIRFile in plist  --- can not generate cache file";
      uint64_t v25 = v28;
      os_log_type_t v26 = OS_LOG_TYPE_ERROR;
      goto LABEL_33;
    }
LABEL_34:
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_35;
  }
  size_t v17 = getenv("TMPDIR");
  if (v17) {
    char v18 = v17;
  }
  else {
    char v18 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v69, v18);
  LOBYTE(v19) = *((unsigned char *)&v69.__r_.__value_.__s + 23);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_)
    {
      std::vector<int>::pointer v20 = (std::string *)v69.__r_.__value_.__r.__words[0];
LABEL_52:
      if (v20->__r_.__value_.__s.__data_[size - 1] != 47)
      {
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v29 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v29 = v69.__r_.__value_.__l.__size_;
        }
        uint64_t v30 = buf;
        std::string::basic_string[abi:ne180100]((uint64_t)buf, v29 + 1);
        if ((buf[23] & 0x80u) != 0) {
          uint64_t v30 = *(uint8_t **)buf;
        }
        if (v29)
        {
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v31 = &v69;
          }
          else {
            __int16 v31 = (std::string *)v69.__r_.__value_.__r.__words[0];
          }
          memmove(v30, v31, v29);
        }
        *(_WORD *)&v30[v29] = 47;
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        std::string v69 = *(std::string *)buf;
        uint64_t v19 = HIBYTE(*(void *)&buf[16]);
      }
      if ((v19 & 0x80u) == 0) {
        char v32 = &v69;
      }
      else {
        char v32 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      if (access((const char *)v32, 6))
      {
        __int16 v33 = (NSObject **)*((void *)a2 + 1);
        if (v33)
        {
          int v34 = *v33;
          if (!*v33) {
            goto LABEL_128;
          }
        }
        else
        {
          int v34 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          goto LABEL_128;
        }
        uint64_t v57 = &v69;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v57 = (std::string *)v69.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1457;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v57;
        uint64_t v58 = "%25s:%-5d No RW permission to temp path: %s";
        unint64_t v59 = v34;
        uint32_t v60 = 28;
LABEL_121:
        _os_log_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_ERROR, v58, buf, v60);
        goto LABEL_128;
      }
      applesauce::CF::convert_to<std::string,0>(v7, (uint64_t)&v64);
      uint64_t v37 = std::string::append(&v64, "_", 1uLL);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      unsigned int v39 = applesauce::CF::convert_to<unsigned int,0>(v9);
      std::to_string(&v63, v39);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v63;
      }
      else {
        uint64_t v40 = (std::string *)v63.__r_.__value_.__r.__words[0];
      }
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v41 = v63.__r_.__value_.__l.__size_;
      }
      unint64_t v42 = std::string::append(&v65, (const std::string::value_type *)v40, v41);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      unint64_t v44 = std::string::append(&v66, "_", 1uLL);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      unsigned int v46 = applesauce::CF::convert_to<unsigned int,0>(v11);
      std::to_string(&v62, v46);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v47 = &v62;
      }
      else {
        uint64_t v47 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v62.__r_.__value_.__l.__size_;
      }
      float v49 = std::string::append(&v67, (const std::string::value_type *)v47, v48);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      float v51 = std::string::append(&v68, ".ir", 3uLL);
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = *((void *)&v51->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80u) == 0) {
        float v53 = buf;
      }
      else {
        float v53 = *(uint8_t **)buf;
      }
      if ((buf[23] & 0x80u) == 0) {
        std::string::size_type v54 = buf[23];
      }
      else {
        std::string::size_type v54 = *(void *)&buf[8];
      }
      std::string::append(&v69, (const std::string::value_type *)v53, v54);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      uint64_t v55 = (NSObject **)*((void *)a2 + 1);
      if (v55)
      {
        uint64_t v56 = *v55;
        if (!*v55)
        {
LABEL_127:
          *this = v69;
          this = &v69;
          goto LABEL_128;
        }
      }
      else
      {
        uint64_t v56 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        int v61 = &v69;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v61 = (std::string *)v69.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1454;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v61;
        _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Path to compiled IR file: %s", buf, 0x1Cu);
      }
      goto LABEL_127;
    }
  }
  else if (*((unsigned char *)&v69.__r_.__value_.__s + 23))
  {
    std::vector<int>::pointer v20 = &v69;
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    goto LABEL_52;
  }
  __int16 v35 = (NSObject **)*((void *)a2 + 1);
  if (!v35)
  {
    int v36 = MEMORY[0x1E4F14500];
    goto LABEL_119;
  }
  int v36 = *v35;
  if (*v35)
  {
LABEL_119:
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      goto LABEL_128;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1446;
    uint64_t v58 = "%25s:%-5d Empty temp path";
    unint64_t v59 = v36;
    uint32_t v60 = 18;
    goto LABEL_121;
  }
LABEL_128:
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (v13) {
    CFRelease(v13);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1BB5BF5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v54 - 169) < 0) {
    operator delete(*(void **)(v54 - 192));
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 160));
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 152));
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 144));
  applesauce::CF::TypeRef::~TypeRef((const void **)(v54 - 136));
  _Unwind_Resume(a1);
}

void sub_1BB5BF6F4()
{
}

BOOL MIL2BNNS::loadContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(NSObject ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    if (!*v5) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315650;
    size_t v17 = "NeuralNetImpl.cpp";
    __int16 v18 = 1024;
    int v19 = 1526;
    __int16 v20 = 2048;
    uint64_t v21 = a3;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph size is %zu bytes", (uint8_t *)&v16, 0x1Cu);
    uint64_t v5 = *(NSObject ***)(a1 + 8);
  }
LABEL_7:
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    if (v5)
    {
      CFStringRef v7 = *v5;
      if (!*v5)
      {
LABEL_17:
        uint64_t Streaming = BNNSGraphContextMakeStreaming();
        goto LABEL_22;
      }
    }
    else
    {
      CFStringRef v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v16 = 136315394;
      size_t v17 = "NeuralNetImpl.cpp";
      __int16 v18 = 1024;
      int v19 = 1529;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Mode=ManagedRingBuffer, Invoking BNNSGraphContextMakeStreaming", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_17;
  }
  if (!v5)
  {
    CFNumberRef v8 = MEMORY[0x1E4F14500];
LABEL_19:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v16 = 136315394;
      size_t v17 = "NeuralNetImpl.cpp";
      __int16 v18 = 1024;
      int v19 = 1533;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Invoking BNNSGraphContextMake", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_21;
  }
  CFNumberRef v8 = *v5;
  if (*v5) {
    goto LABEL_19;
  }
LABEL_21:
  uint64_t Streaming = BNNSGraphContextMake();
LABEL_22:
  uint64_t v11 = v10;
  *(void *)(a1 + 312) = Streaming;
  *(void *)(a1 + 32std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v10;
  BOOL v12 = (v10 | Streaming) != 0;
  if (v10 | Streaming)
  {
    CFNumberRef v13 = *(NSObject ***)(a1 + 8);
    if (v13)
    {
      BOOL v14 = *v13;
      if (!*v13)
      {
LABEL_29:
        BNNSGraphContextSetArgumentType();
        return v12;
      }
    }
    else
    {
      BOOL v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315650;
      size_t v17 = "NeuralNetImpl.cpp";
      __int16 v18 = 1024;
      int v19 = 1541;
      __int16 v20 = 2048;
      uint64_t v21 = v11;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d context size is %zu bytes", (uint8_t *)&v16, 0x1Cu);
    }
    goto LABEL_29;
  }
  return v12;
}

void MIL2BNNS::loadModel(MIL2BNNS *this, CFDictionaryRef theDict)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  if (!CFDictionaryContainsKey(theDict, @"DynamicBatchSize")) {
    goto LABEL_16;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DynamicBatchSize");
  CFNumberRef v5 = Value;
  if (Value) {
    CFRetain(Value);
  }
  *(void *)buf = v5;
  BOOL v6 = applesauce::CF::convert_to<BOOL,0>(v5);
  if (v5) {
    CFRelease(v5);
  }
  if (!v6) {
    goto LABEL_16;
  }
  if (CFDictionaryContainsKey(theDict, @"BatchSize"))
  {
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BatchSize");
    CFNumberRef v8 = v7;
    if (v7) {
      CFRetain(v7);
    }
    *(void *)buf = v8;
    int v9 = applesauce::CF::convert_to<unsigned int,0>(v8);
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v10 = (NSObject **)*((void *)this + 1);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (!*v10)
      {
LABEL_20:
        BNNSGraphContextSetBatchSize_v2();
        WorkspaceSize_uint64_t v2 = BNNSGraphContextGetWorkspaceSize_v2();
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1553;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v9;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Use DYNAMIC batch size (batch std::string::size_type size = %d)", buf, 0x18u);
    }
    goto LABEL_20;
  }
  if (CFDictionaryContainsKey(theDict, @"BatchSize"))
  {
LABEL_16:
    WorkspaceSize_uint64_t v2 = BNNSGraphGetWorkspaceSize_v2();
    goto LABEL_21;
  }
  BNNSGraphContextSetBatchSize_v2();
  WorkspaceSize_uint64_t v2 = BNNSGraphContextGetWorkspaceSize_v2();
LABEL_21:
  *((void *)this + 29) = WorkspaceSize_v2;
  if (!WorkspaceSize_v2)
  {
    uint64_t v14 = *((void *)this + 30);
    *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    if (!v14) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (WorkspaceSize_v2 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNSGraphGetWorkspaceSize failed");
  }
  CFNumberRef v13 = malloc_type_valloc(WorkspaceSize_v2, 0x6275D2F5uLL);
  uint64_t v14 = *((void *)this + 30);
  *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v13;
  if (v14) {
LABEL_26:
  }
    MEMORY[0x1C185D340](v14, 0x1000C8077774924);
LABEL_27:
  unint64_t v15 = (NSObject **)*((void *)this + 1);
  if (v15)
  {
    int v16 = *v15;
    if (!*v15) {
      goto LABEL_33;
    }
  }
  else
  {
    int v16 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *((void *)this + 29);
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1582;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v17;
    _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph workspace size is %zu bytes", buf, 0x1Cu);
  }
LABEL_33:
  unsigned int v18 = *((_DWORD *)this + 28);
  if (v18 >= 3)
  {
    float v130 = (NSObject **)*((void *)this + 1);
    if (v130) {
      float v131 = *v130;
    }
    else {
      float v131 = 0;
    }
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1588;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = -66743;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v18;
      _os_log_impl(&dword_1BB0CE000, v131, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Unknown streaming mode (%d).\"", buf, 0x1Eu);
    }
    float v133 = __cxa_allocate_exception(0x10uLL);
    *(void *)float v133 = &unk_1F14C8B68;
    v133[2] = -66743;
  }
  Argumentunsigned int Count = BNNSGraphGetArgumentCount();
  uint64_t v20 = 8 * ArgumentCount;
  MEMORY[0x1F4188790](ArgumentCount);
  if ((unint64_t)(8 * ArgumentCount) >= 0x200) {
    size_t v21 = 512;
  }
  else {
    size_t v21 = 8 * ArgumentCount;
  }
  float v144 = (size_t *)((char *)&v134 - ((8 * ArgumentCount + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v144, v21);
  unint64_t v146 = ArgumentCount;
  MEMORY[0x1F4188790](v22);
  unsigned int v145 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  std::vector<int>::size_type v24 = (NSObject **)*((void *)this + 1);
  if (v24)
  {
    uint64_t v25 = *v24;
    if (!*v24) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v25 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1594;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v146;
    _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d graph has %zu arguments", buf, 0x1Cu);
  }
LABEL_43:
  unint64_t v26 = v146;
  BNNSGraphGetArgumentNames();
  BNNSGraphGetArgumentIntents();
  uint64_t v138 = (void *)((char *)this + 168);
  std::vector<bnns_graph_argument_t>::resize((char **)this + 21, v26);
  unint64_t v135 = (void *)((char *)this + 192);
  std::vector<bnns_graph_argument_t>::resize((char **)this + 24, v26);
  *((void *)this + 27) = 0;
  __int16 v28 = (uint64_t *)((char *)this + 280);
  float v143 = (char *)this + 296;
  uint64_t v29 = *((void *)this + 35);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 37) - v29) >> 4) < v26)
  {
    if (v26 > 0x555555555555555) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v30 = *((void *)this + 36);
    *(void *)&buf[32] = v143;
    __int16 v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL2BNNS::GraphTensor>>(v26);
    *(void *)&buf[8] = &v31[16 * ((v30 - v29) >> 4)];
    *(void *)&buf[16] = *(void *)&buf[8];
    *(void *)buf = v31;
    *(void *)&buf[24] = &v31[48 * v32];
    std::vector<MIL2BNNS::GraphTensor>::__swap_out_circular_buffer((uint64_t *)this + 35, buf);
    uint64_t v33 = std::__split_buffer<MIL2BNNS::GraphTensor>::~__split_buffer((uint64_t)buf);
    __n128 v34 = MEMORY[0x1F4188790](v33);
    __int16 v35 = (uint64_t *)((char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v142 = (void *)((char *)this + 256);
    *((void *)this + 32) = 0;
    goto LABEL_47;
  }
  __n128 v34 = MEMORY[0x1F4188790](v27);
  __int16 v35 = (uint64_t *)((char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v142 = (void *)((char *)this + 256);
  *((void *)this + 32) = 0;
  if (v26)
  {
LABEL_47:
    uint64_t v36 = 0;
    float v141 = (unsigned __int8 **)((char *)this + 40);
    uint64_t v140 = (uint64_t)this + 64;
    float v139 = (unsigned __int8 **)((char *)this + 88);
    v34.n128_u64[0] = 136315650;
    __n128 v136 = v34;
    v34.n128_u64[0] = 136315906;
    __n128 v137 = v34;
    while (1)
    {
      unint64_t v38 = *((void *)this + 36);
      unint64_t v37 = *((void *)this + 37);
      if (v38 >= v37)
      {
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v28) >> 4);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0x555555555555555) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v28) >> 4);
        if (2 * v42 > v41) {
          unint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v43 = 0x555555555555555;
        }
        else {
          unint64_t v43 = v41;
        }
        *(void *)&buf[32] = v143;
        if (v43) {
          unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL2BNNS::GraphTensor>>(v43);
        }
        else {
          uint64_t v44 = 0;
        }
        *(void *)buf = v43;
        *(void *)&buf[8] = v43 + 48 * v40;
        *(void *)&buf[16] = *(void *)&buf[8];
        *(void *)&buf[24] = v43 + 48 * v44;
        MIL2BNNS::GraphTensor::GraphTensor(*(unint64_t **)&buf[8], (uint64_t)this + 312, (const std::string::value_type *)v144[v36]);
        *(void *)&buf[16] += 48;
        std::vector<MIL2BNNS::GraphTensor>::__swap_out_circular_buffer((uint64_t *)this + 35, buf);
        unint64_t v39 = *((void *)this + 36);
        std::__split_buffer<MIL2BNNS::GraphTensor>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        MIL2BNNS::GraphTensor::GraphTensor(*((unint64_t **)this + 36), (uint64_t)this + 312, (const std::string::value_type *)v144[v36]);
        unint64_t v39 = v38 + 48;
        *((void *)this + 36) = v38 + 48;
      }
      *((void *)this + 36) = v39;
      unint64_t v45 = v39 - 48;
      unsigned int v46 = (const void **)(v39 - 32);
      uint64_t v47 = *(unsigned __int8 *)(v39 - 9);
      if ((v47 & 0x80u) == 0) {
        uint64_t v48 = *(unsigned __int8 *)(v39 - 9);
      }
      else {
        uint64_t v48 = *(void *)(v39 - 24);
      }
      uint64_t v49 = *((unsigned __int8 *)this + 63);
      int v50 = (char)v49;
      if ((v49 & 0x80u) != 0) {
        uint64_t v49 = *((void *)this + 6);
      }
      if (v48 != v49) {
        goto LABEL_85;
      }
      if (v50 >= 0) {
        float v51 = (unsigned __int8 *)v141;
      }
      else {
        float v51 = *v141;
      }
      if ((v47 & 0x80) != 0)
      {
        if (memcmp(*v46, v51, *(void *)(v39 - 24))) {
          goto LABEL_85;
        }
      }
      else if (*(unsigned char *)(v39 - 9))
      {
        long long v52 = (unsigned __int8 *)(v39 - 32);
        while (*v52 == *v51)
        {
          ++v52;
          ++v51;
          if (!--v47) {
            goto LABEL_76;
          }
        }
        goto LABEL_85;
      }
LABEL_76:
      if (*(_DWORD *)&v145[4 * v36] != 1) {
        goto LABEL_85;
      }
      *((void *)this + 33) = v45;
      float v53 = (NSObject **)*((void *)this + 1);
      if (v53)
      {
        uint64_t v54 = *v53;
        if (!*v53) {
          goto LABEL_85;
        }
      }
      else
      {
        uint64_t v54 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v55 = (const void *)(v39 - 32);
        if (*(char *)(v39 - 9) < 0) {
          uint64_t v55 = *v46;
        }
        *(_DWORD *)buf = v136.n128_u32[0];
        *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1616;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v55;
        _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified Input Tensor: %s", buf, 0x1Cu);
      }
LABEL_85:
      uint64_t v56 = *(unsigned __int8 *)(v39 - 9);
      if ((v56 & 0x80u) == 0) {
        uint64_t v57 = *(unsigned __int8 *)(v39 - 9);
      }
      else {
        uint64_t v57 = *(void *)(v39 - 24);
      }
      uint64_t v58 = *((unsigned __int8 *)this + 87);
      int v59 = (char)v58;
      if ((v58 & 0x80u) != 0) {
        uint64_t v58 = *((void *)this + 9);
      }
      if (v57 != v58) {
        goto LABEL_110;
      }
      if (v59 >= 0) {
        uint32_t v60 = (unsigned __int8 *)v140;
      }
      else {
        uint32_t v60 = *(unsigned __int8 **)v140;
      }
      if ((v56 & 0x80) != 0)
      {
        if (memcmp(*v46, v60, *(void *)(v39 - 24))) {
          goto LABEL_110;
        }
      }
      else if (*(unsigned char *)(v39 - 9))
      {
        int v61 = (unsigned __int8 *)(v39 - 32);
        while (*v61 == *v60)
        {
          ++v61;
          ++v60;
          if (!--v56) {
            goto LABEL_101;
          }
        }
        goto LABEL_110;
      }
LABEL_101:
      if (*(_DWORD *)&v145[4 * v36] != 1) {
        goto LABEL_110;
      }
      *((void *)this + 34) = v45;
      std::string v62 = (NSObject **)*((void *)this + 1);
      if (v62)
      {
        std::string v63 = *v62;
        if (!*v62) {
          goto LABEL_110;
        }
      }
      else
      {
        std::string v63 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        std::string v64 = (const void *)(v39 - 32);
        if (*(char *)(v39 - 9) < 0) {
          std::string v64 = *v46;
        }
        *(_DWORD *)buf = v136.n128_u32[0];
        *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1620;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v64;
        _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified Embedding Tensor: %s", buf, 0x1Cu);
      }
LABEL_110:
      uint64_t v65 = *(unsigned __int8 *)(v39 - 9);
      if ((v65 & 0x80u) == 0) {
        uint64_t v66 = *(unsigned __int8 *)(v39 - 9);
      }
      else {
        uint64_t v66 = *(void *)(v39 - 24);
      }
      uint64_t v67 = *((unsigned __int8 *)this + 111);
      int v68 = (char)v67;
      if ((v67 & 0x80u) != 0) {
        uint64_t v67 = *((void *)this + 12);
      }
      if (v66 != v67) {
        goto LABEL_135;
      }
      if (v68 >= 0) {
        std::string v69 = (unsigned __int8 *)v139;
      }
      else {
        std::string v69 = *v139;
      }
      if ((v65 & 0x80) != 0)
      {
        if (memcmp(*v46, v69, *(void *)(v39 - 24))) {
          goto LABEL_135;
        }
      }
      else if (*(unsigned char *)(v39 - 9))
      {
        CFNumberRef v70 = (unsigned __int8 *)(v39 - 32);
        while (*v70 == *v69)
        {
          ++v70;
          ++v69;
          if (!--v65) {
            goto LABEL_126;
          }
        }
        goto LABEL_135;
      }
LABEL_126:
      if (*(_DWORD *)&v145[4 * v36] != 2) {
        goto LABEL_135;
      }
      *((void *)this + 38) = v45;
      CFNumberRef v71 = (NSObject **)*((void *)this + 1);
      if (v71)
      {
        CFNumberRef v72 = *v71;
        if (!*v71) {
          goto LABEL_135;
        }
      }
      else
      {
        CFNumberRef v72 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v73 = (const void *)(v39 - 32);
        if (*(char *)(v39 - 9) < 0) {
          CFStringRef v73 = *v46;
        }
        *(_DWORD *)buf = v136.n128_u32[0];
        *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1624;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v73;
        _os_log_impl(&dword_1BB0CE000, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified Output Tensor: %s", buf, 0x1Cu);
      }
LABEL_135:
      if (*(_DWORD *)&v145[4 * v36] == 3)
      {
        if (*((_DWORD *)this + 28) != 2)
        {
          unsigned int v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v123, "Argument has InOut intent but streaming mode is not set as ManagedRingBuffer");
        }
        v35[v36] = *v142;
      }
      else
      {
        uint64_t v74 = *((void *)this + 32);
        v35[v36] = v74;
        uint64_t v75 = *(void *)(v39 - 40);
        *((void *)this + 32) = (v74 + v75 + 63) & 0xFFFFFFFFFFFFFFC0;
        unint64_t v76 = (NSObject **)*((void *)this + 1);
        if (!v76)
        {
          uint64_t v77 = MEMORY[0x1E4F14500];
LABEL_142:
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(v39 - 9) < 0) {
              unsigned int v46 = (const void **)*v46;
            }
            *(_DWORD *)buf = v137.n128_u32[0];
            *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1642;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v46;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v75;
            _os_log_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d allocation for tensor name: %s nBytes: %zu", buf, 0x26u);
          }
          goto LABEL_146;
        }
        uint64_t v77 = *v76;
        if (*v76) {
          goto LABEL_142;
        }
      }
LABEL_146:
      if (++v36 == v146)
      {
        char v78 = 0;
        goto LABEL_148;
      }
    }
  }
  char v78 = 1;
LABEL_148:
  uint64_t v79 = v135;
  if (!*((void *)this + 33))
  {
    char v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "failed to find input graph tensor");
    goto LABEL_224;
  }
  uint64_t v80 = (unint64_t *)*((void *)this + 38);
  if (!v80)
  {
    char v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "failed to find output graph tensor");
LABEL_224:
  }
  if (*((void *)this + 34)) {
    goto LABEL_153;
  }
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 87)) {
      goto LABEL_153;
    }
    goto LABEL_208;
  }
  if (*((void *)this + 9))
  {
LABEL_208:
    char v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v121, "failed to find embedding graph tensor");
    goto LABEL_224;
  }
LABEL_153:
  std::vector<float>::resize((uint64_t)this + 120, *v80);
  unsigned int v81 = malloc_type_aligned_alloc(0x40uLL, *((void *)this + 32), 0x987CB936uLL);
  uint64_t v82 = *((void *)this + 31);
  *((void *)this + 3freeMatrix(*((_DWORD *)this + 17), this + 1) = v81;
  if (v82)
  {
    MEMORY[0x1C185D340](v82, 0x1000C8077774924);
    unsigned int v81 = (void *)*((void *)this + 31);
  }
  bzero(v81, *((void *)this + 32));
  uint64_t v83 = (NSObject **)*((void *)this + 1);
  if (v83)
  {
    int v84 = *v83;
    if (!*v83) {
      goto LABEL_161;
    }
  }
  else
  {
    int v84 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v85 = *v142;
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1662;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v85;
    _os_log_impl(&dword_1BB0CE000, v84, OS_LOG_TYPE_DEFAULT, "%25s:%-5d allocated %zu bytes of tensor data", buf, 0x1Cu);
  }
LABEL_161:
  if ((v78 & 1) == 0)
  {
    uint64_t v86 = 0;
    float v87 = (int *)v145;
    unint64_t v88 = v146;
    do
    {
      int v89 = *v87++;
      if (v89 != 3)
      {
        uint64_t v90 = *((void *)this + 35);
        *(void *)(v90 + v86 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((void *)this + 31) + *v35;
        uint64_t ArgumentPosition = BNNSGraphGetArgumentPosition();
        uint64_t v92 = *(void *)(v90 + v86 + 8);
        unint64_t v93 = v138;
        uint64_t v94 = (void *)(*v138 + 16 * ArgumentPosition);
        *uint64_t v94 = *(void *)(v90 + v86 + 40);
        v94[1] = v92;
        *(_OWORD *)(*v79 + 16 * ArgumentPosition) = *(_OWORD *)(*v93 + 16 * ArgumentPosition);
      }
      v86 += 48;
      ++v35;
      --v88;
    }
    while (v88);
  }
  if (*((_DWORD *)this + 28) == 1)
  {
    Outputunsigned int Count = BNNSGraphGetOutputCount();
    unint64_t v96 = (char *)OutputCount;
    if (OutputCount)
    {
      float v97 = 0;
      int v98 = 0;
      uint64_t v140 = 48 * OutputCount;
      float v143 = (char *)OutputCount;
      do
      {
        uint64_t v99 = *v28;
        unint64_t v101 = *v28 + 48 * (void)v97;
        int v100 = (void *)(v101 + 16);
        LODWORD(v10freeMatrix(*((_DWORD *)this + 17), this + 1) = *(char *)(v101 + 39);
        if ((v101 & 0x80000000) != 0)
        {
          int v102 = (void *)*v100;
          unint64_t v101 = v100[1];
        }
        else
        {
          unint64_t v101 = v101;
          int v102 = v100;
        }
        *(void *)buf = v102;
        *(void *)&buf[8] = v101;
        if (v101 > 9)
        {
          float v144 = v100;
          if (!std::string_view::compare[abi:ne180100](buf, v101 - 10, 0xFFFFFFFFFFFFFFFFLL, "_out_state", 0xAuLL))
          {
            LODWORD(v103) = *((char *)v144 + 23);
            LODWORD(v14freeMatrix(*((_DWORD *)this + 17), this + 1) = v98;
            if ((v103 & 0x80000000) != 0)
            {
              unsigned int v104 = (char *)*v144;
              size_t v103 = v144[1];
            }
            else
            {
              size_t v103 = v103;
              unsigned int v104 = (char *)v144;
            }
            unsigned int v150 = v104;
            size_t v151 = v103;
            unint64_t v105 = std::string_view::find[abi:ne180100]((uint64_t *)&v150, "_out_state", 0);
            if (v151 >= v105) {
              size_t v106 = v105;
            }
            else {
              size_t v106 = v151;
            }
            if ((unint64_t)v96 >= v146)
            {
LABEL_210:
              int v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v122, (const std::string *)buf);
            }
            size_t v107 = v150;
            uint64_t v142 = (void *)(v99 + 48 * (void)v97 + 8);
            uint64_t v108 = v140;
            float v109 = v143;
            while (1)
            {
              uint64_t v110 = *v28;
              uint64_t v111 = *v28 + v108;
              int v112 = (const void **)(v111 + 16);
              if (*(char *)(v111 + 39) < 0)
              {
                uint64_t v114 = *v112;
                unint64_t v113 = *(void *)(v111 + 24);
              }
              else
              {
                unint64_t v113 = *(unsigned __int8 *)(v111 + 39);
                uint64_t v114 = v112;
              }
              float v148 = v114;
              unint64_t v149 = v113;
              unint64_t v115 = std::string_view::find[abi:ne180100]((uint64_t *)&v148, "_in_state", 0);
              unint64_t v116 = v149;
              if (v149 >= v115) {
                unint64_t v116 = v115;
              }
              if (v115 != -1 && v106 == v116 && !memcmp(v107, v148, v106)) {
                break;
              }
              ++v109;
              v108 += 48;
              if ((char *)v146 == v109) {
                goto LABEL_210;
              }
            }
            if (*v142 != *(void *)(v110 + 48 * (void)v109 + 8)
              || *(_DWORD *)&v145[4 * (void)v97] != 2
              || *(_DWORD *)&v145[4 * (void)v109] != 1)
            {
              unsigned int v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" - ", &v147, &v152);
              int v125 = *((char *)v112 + 23);
              if (v125 >= 0) {
                uint64_t v126 = (const std::string::value_type *)v112;
              }
              else {
                uint64_t v126 = (const std::string::value_type *)*v112;
              }
              if (v125 >= 0) {
                std::string::size_type v127 = *((unsigned __int8 *)v112 + 23);
              }
              else {
                std::string::size_type v127 = (std::string::size_type)v112[1];
              }
              uint64_t v128 = std::string::append(&v152, v126, v127);
              long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
              *(void *)&buf[16] = *((void *)&v128->__r_.__value_.__l + 2);
              *(_OWORD *)buf = v129;
              v128->__r_.__value_.__l.__size_ = 0;
              v128->__r_.__value_.__r.__words[2] = 0;
              v128->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v124, (const std::string *)buf);
            }
            uint64_t v117 = *v135;
            long long v118 = *(_OWORD *)(*v135 + 16 * (void)v97);
            *(_OWORD *)(v117 + 16 * (void)v97) = *(_OWORD *)(*v135 + 16 * (void)v109);
            *(_OWORD *)(v117 + 16 * (void)v109) = v118;
            int v98 = v141 + 1;
            unint64_t v96 = v143;
          }
        }
        ++v97;
      }
      while (v97 != v96);
    }
    else
    {
      int v98 = 0;
    }
    float v119 = (NSObject **)*((void *)this + 1);
    if (v119)
    {
      char v120 = *v119;
      if (!*v119) {
        return;
      }
    }
    else
    {
      char v120 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "NeuralNetImpl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1723;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v98;
      _os_log_impl(&dword_1BB0CE000, v120, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Identified %u streaming pairs", buf, 0x18u);
    }
  }
}

void sub_1BB5C0C9C(void *a1, int a2)
{
  __cxa_free_exception(v3);
  if (a2 == 2)
  {
    CFNumberRef v7 = __cxa_begin_catch(a1);
    CFNumberRef v8 = *(NSObject ***)(v2 + 8);
    if (v8) {
      int v9 = *v8;
    }
    else {
      int v9 = 0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v7 + 16))(v7);
      *(_DWORD *)(v4 - 192) = 136315906;
      *(void *)(v4 - 188) = "NeuralNetImpl.cpp";
      *(_WORD *)(v4 - 18std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1024;
      *(_DWORD *)(v4 - 178) = 1727;
      *(_WORD *)(v4 - 174) = 1024;
      *(_DWORD *)(v4 - 172) = -66743;
      *(_WORD *)(v4 - 168) = 2080;
      *(void *)(v4 - 166) = v10;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"Run time error: %s\"", (uint8_t *)(v4 - 192), 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F14C8B68;
    exception[2] = -66743;
  }
  JUMPOUT(0x1BB5C0FE4);
}

void sub_1BB5C0FD0()
{
}

void sub_1BB5C0FDC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::vector<bnns_graph_argument_t>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v15 = &v4[16 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  CFNumberRef v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 4)
  {
    bzero(a1[1], 16 * v6);
    unint64_t v15 = &v3[16 * v6];
LABEL_20:
    a1[1] = v15;
    return;
  }
  if (a2 >> 60) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v11 = (char *)operator new(16 * v10);
  BOOL v12 = &v11[16 * v5];
  CFNumberRef v13 = &v11[16 * v10];
  bzero(v12, 16 * v6);
  uint64_t v14 = &v12[16 * v6];
  if (v3 != v4)
  {
    do
    {
      *((_OWORD *)v12 - freeMatrix(*((_DWORD *)this + 17), this + 1) = *((_OWORD *)v3 - 1);
      v12 -= 16;
      v3 -= 16;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

unint64_t *MIL2BNNS::GraphTensor::GraphTensor(unint64_t *a1, uint64_t a2, const std::string::value_type *a3)
{
  a1[2] = 0;
  a1[3] = 0;
  unint64_t v5 = (std::string *)(a1 + 2);
  a1[4] = 0;
  BNNSGraphContextGetTensorDescriptor_v2();
  if (v11 == 65552)
  {
    unint64_t v6 = 2;
  }
  else
  {
    if (v11 != 65568)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid data type");
    }
    unint64_t v6 = 4;
  }
  unint64_t v7 = MEMORY[0x1C185B140](&v10);
  *a1 = v7 / v6;
  a1[1] = v7;
  std::string::__assign_external(v5, a3);
  a1[5] = 0;
  return a1;
}

void sub_1BB5C1208(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIL2BNNS::GraphTensor>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t *std::vector<MIL2BNNS::GraphTensor>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      long long v6 = *(_OWORD *)(v3 - 32);
      *(void *)(v4 - 16) = *(void *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *uint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<MIL2BNNS::GraphTensor>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t AUSpatialMap::SupportedNumChannels(AUSpatialMap *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSpatialMap::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUSpatialMap::StreamFormatWritable(AUSpatialMap *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSpatialMap::SupportsTail(AUSpatialMap *this)
{
  return 1;
}

double AUSpatialMap::GetTailTime(AUSpatialMap *this)
{
  return 0.0;
}

uint64_t AUSpatialMap::Render(AUSpatialMap *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t result = AUSpatialMap::DeviceSupportsAU(this);
  if (result)
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
    uint64_t v10 = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 128), 0);
    unsigned int v14 = 0;
    int v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
    uint64_t result = ausdk::AUInputElement::PullInput(v11, &v14, a3, 0, a4);
    if (!result)
    {
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      uint64_t v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      return (*(uint64_t (**)(AUSpatialMap *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this
                                                                                                  + 176))(this, a2, BufferList, v13, a4);
    }
  }
  return result;
}

BOOL AUSpatialMap::DeviceSupportsAU(AUSpatialMap *this)
{
  CFBooleanRef v2 = (const __CFBoolean *)MGCopyAnswer();
  int Value = CFBooleanGetValue(v2);
  if (v2) {
    CFRelease(v2);
  }
  if (Value)
  {
    if (AUSpatialMap::DeviceScreenWidth(void)::once != -1) {
      dispatch_once(&AUSpatialMap::DeviceScreenWidth(void)::once, &__block_literal_global_16589);
    }
    if (AUSpatialMap::DeviceScreenWidth(void)::deviceScreenWidth)
    {
      if (AUSpatialMap::DeviceScreenHeight(void)::once != -1) {
        dispatch_once(&AUSpatialMap::DeviceScreenHeight(void)::once, &__block_literal_global_5);
      }
      if (AUSpatialMap::DeviceScreenHeight(void)::deviceScreenHeight) {
        return 1;
      }
    }
  }
  return *((_DWORD *)this + 302) || *((_DWORD *)this + 303);
}

void ___ZN12AUSpatialMap18DeviceScreenHeightEv_block_invoke()
{
  CFNumberRef v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    CFNumberRef v1 = v0;
    CFNumberGetValue(v0, kCFNumberSInt32Type, &AUSpatialMap::DeviceScreenHeight(void)::deviceScreenHeight);
    CFRelease(v1);
  }
}

void ___ZN12AUSpatialMap17DeviceScreenWidthEv_block_invoke()
{
  CFNumberRef v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    CFNumberRef v1 = v0;
    CFNumberGetValue(v0, kCFNumberSInt32Type, &AUSpatialMap::DeviceScreenWidth(void)::deviceScreenWidth);
    CFRelease(v1);
  }
}

uint64_t AUSpatialMap::ProcessBufferLists(AUSpatialMap *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  if (AUSpatialMap::DeviceSupportsAU(this))
  {
    unint64_t mNumberBuffers = a3->mNumberBuffers;
    if (mNumberBuffers == a4->mNumberBuffers && mNumberBuffers != 0)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        size_t mDataByteSize = a3->mBuffers[v11].mDataByteSize;
        if (mDataByteSize == a4->mBuffers[v11].mDataByteSize)
        {
          mData = a3->mBuffers[v11].mData;
          unint64_t v15 = a4->mBuffers[v11].mData;
          if (mData != v15)
          {
            memcpy(v15, mData, mDataByteSize);
            unint64_t mNumberBuffers = a3->mNumberBuffers;
          }
        }
        ++v12;
        ++v11;
      }
      while (v12 < mNumberBuffers);
    }
    if (!*((unsigned char *)this + 1216))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
      if (a5)
      {
        unint64_t v17 = 0;
        uint64_t v18 = *(unsigned int *)(Element + 108);
        p_mData = &a3->mBuffers[0].mData;
        uint64_t v20 = a5;
        do
        {
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = p_mData;
            do
            {
              uint64_t v23 = *v22;
              v22 += 2;
              int v24 = v23[v17];
              *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)this + 68, v21++, v17) = v24;
            }
            while (v18 != v21);
          }
          ++v17;
        }
        while (v17 != v20);
      }
      uint64_t v25 = (uint64_t *)afSTFTWrapper::fltbAnalysisMatrix(*((afSTFTWrapper **)this + 67), (unint64_t *)this + 68);
      if ((uint64_t *)((char *)this + 584) != v25) {
        std::vector<CLiteMatrix>::__assign_with_size[abi:ne180100]<CLiteMatrix*,CLiteMatrix*>((uint64_t *)this + 73, *v25, v25[1], 0xCCCCCCCCCCCCCCCDLL * ((v25[1] - *v25) >> 3));
      }
      if (*((int *)this + 182) >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (_OWORD *)((char *)this + 608);
        do
        {
          vDSP_vclr(*((float **)this + 111), 1, (uint64_t)(*((void *)this + 112) - *((void *)this + 111)) >> 2);
          int64_t v29 = *((int *)this + 299);
          if ((int)v29 < *((_DWORD *)this + 298))
          {
            do
            {
              uint64_t v30 = *((void *)this + 73) + 40 * v29;
              _OWORD *v27 = *(_OWORD *)v30;
              if (v27 != (_OWORD *)v30) {
                std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 624, *(char **)(v30 + 16), *(void *)(v30 + 24), (uint64_t)(*(void *)(v30 + 24) - *(void *)(v30 + 16)) >> 2);
              }
              CLiteMatrix::MatrixMultiply((vDSP_Length *)(*((void *)this + 119) + 40 * v26), (AUSpatialMap *)((char *)this + 608), (AUSpatialMap *)((char *)this + 688), v28);
              ParametricProcessor::calculateFrameEnergy((vDSP_Length *)this + 86, (unint64_t *)this + 81);
              ParametricProcessor::calculateG(*((void *)this + 66), (vDSP_Length *)this + 86, (uint64_t)this + 648, (uint64_t)this + 784);
              if (*((_DWORD *)this + 297) / *((_DWORD *)this + 296) >= 1)
              {
                int64_t v31 = 0;
                do
                {
                  *(float *)(*((void *)this + 103) + 4 * v3freeMatrix(*((_DWORD *)this + 17), this + 1) = (float)(*(float *)LiteMatrix<float>::operator()((unint64_t *)this + 98, 0, v31)* 1.5)* 0.25;
                  ++v31;
                  int v32 = *((_DWORD *)this + 297) / *((_DWORD *)this + 296);
                }
                while (v31 < v32);
                if (v32 >= 1)
                {
                  uint64_t v33 = 0;
                  do
                  {
                    float v34 = *(float *)(*((void *)this + 103) + 4 * v33);
                    __int16 v35 = (float *)LiteMatrix<float>::operator()((unint64_t *)this + 109, v29, 0);
                    *__int16 v35 = v34 + *v35;
                    ++v33;
                  }
                  while (v33 < *((_DWORD *)this + 297) / *((_DWORD *)this + 296));
                }
              }
              ++v29;
            }
            while (v29 < *((int *)this + 298));
          }
          if (*((void *)this + 114) != 1) {
            __assert_rtn("SumRows", "LiteMatrix.cpp", 255, "outputMatrix.NumRows()==1");
          }
          unint64_t v36 = *((void *)this + 115);
          if (v36 != *((void *)this + 110)) {
            __assert_rtn("SumRows", "LiteMatrix.cpp", 256, "outputMatrix.NumCols()==inputMatrix.NumCols()");
          }
          if (v36)
          {
            uint64_t v37 = 0;
            for (unint64_t i = 0; i < v36; ++i)
            {
              float __C = 0.0;
              vDSP_sve((const float *)(*((void *)this + 111) + v37), v36, &__C, *((void *)this + 109));
              float v39 = __C;
              *(float *)LiteMatrix<float>::operator()((unint64_t *)this + 114, 0, i) = v39;
              unint64_t v36 = *((void *)this + 110);
              v37 += 4;
            }
          }
          *(_DWORD *)(*((void *)this + 106) + 4 * v26++) = *(_DWORD *)LiteMatrix<float>::operator()((unint64_t *)this + 114, 0, 0);
        }
        while (v26 < *((int *)this + 182));
      }
    }
  }
  return 0;
}

uint64_t AUSpatialMap::CanScheduleParameters(AUSpatialMap *this)
{
  return 0;
}

uint64_t AUSpatialMap::SetProperty(AUSpatialMap *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1936548727)
  {
    if (a2 == 1936548728)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 302) = *a5;
    }
    else if (a2 == 1936548729)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 303) = *a5;
    }
  }
  else if (a2 == 21)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 1216) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  else if (a2 == 3700)
  {
    uint64_t result = 4294956445;
    if (a6 >= 4)
    {
      if (*(unsigned char *)a5) {
        return 0;
      }
      else {
        return 4294956445;
      }
    }
  }
  return result;
}

uint64_t AUSpatialMap::GetProperty(AUSpatialMap *this, int a2, int a3, unsigned int a4, CFArrayRef *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1886217061)
  {
    if (a2 > 1937141112)
    {
      if (a2 == 1937141113)
      {
        uint64_t v9 = (const void *)*((void *)this + 145);
        uint64_t v10 = *((void *)this + 146);
      }
      else
      {
        if (a2 != 1937141869) {
          return result;
        }
        uint64_t v9 = (const void *)*((void *)this + 106);
        uint64_t v10 = *((void *)this + 107);
      }
    }
    else
    {
      if (a2 == 1886217062)
      {
        uint64_t v11 = (char *)this + 848;
LABEL_22:
        CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(v11);
        uint64_t result = 0;
        char *__dst = CFArray;
        return result;
      }
      if (a2 != 1937141112) {
        return result;
      }
      uint64_t v9 = (const void *)*((void *)this + 142);
      uint64_t v10 = *((void *)this + 143);
    }
    memcpy(__dst, v9, v10 - (void)v9);
    return 0;
  }
  if (a2 > 1836606309)
  {
    if (a2 == 1836606310)
    {
      uint64_t v11 = (char *)this + 1136;
    }
    else
    {
      if (a2 != 1836671846) {
        return result;
      }
      uint64_t v11 = (char *)this + 1160;
    }
    goto LABEL_22;
  }
  if (a2 == 21)
  {
    uint64_t result = 0;
    int v8 = *((unsigned __int8 *)this + 1216);
  }
  else
  {
    if (a2 != 3700) {
      return result;
    }
    uint64_t result = 0;
    int v8 = *((unsigned __int8 *)this + 376);
  }
  *(_DWORD *)__dst = v8;
  return result;
}

uint64_t AUSpatialMap::GetPropertyInfo(AUSpatialMap *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1936548727)
  {
    if (a2 > 1937141111)
    {
      switch(a2)
      {
        case 1937141112:
          BOOL v8 = 0;
          int v10 = *((_DWORD *)this + 286);
          int v11 = *((_DWORD *)this + 284);
          break;
        case 1937141113:
          BOOL v8 = 0;
          int v10 = *((_DWORD *)this + 292);
          int v11 = *((_DWORD *)this + 290);
          break;
        case 1937141869:
          BOOL v8 = 0;
          int v10 = *((_DWORD *)this + 214);
          int v11 = *((_DWORD *)this + 212);
          break;
        default:
          return result;
      }
      unsigned int v9 = (v10 - v11) & 0xFFFFFFFC;
      goto LABEL_23;
    }
    if (a2 != 1936548728 && a2 != 1936548729) {
      return result;
    }
LABEL_19:
    BOOL v8 = 1;
    unsigned int v9 = 4;
    goto LABEL_23;
  }
  if (a2 > 1836606309)
  {
    BOOL v8 = 0;
    unsigned int v9 = 8;
    if (a2 != 1836606310 && a2 != 1836671846 && a2 != 1886217062) {
      return result;
    }
LABEL_23:
    uint64_t result = 0;
    *a5 = v9;
    *a6 = v8;
    return result;
  }
  if (a2 == 21 || a2 == 3700) {
    goto LABEL_19;
  }
  return result;
}

uint64_t AUSpatialMap::Initialize(AUSpatialMap *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFBooleanRef v2 = (AUSpatialMap *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 80), 0);
  long long v4 = *(_OWORD *)(Element + 96);
  long long v15 = *(_OWORD *)(Element + 80);
  long long v16 = v4;
  uint64_t v17 = *(void *)(Element + 112);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUSpatialMap *)((char *)this + 128), 0);
  long long v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v14.Float64 mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v14.mBytesPerPacket = v6;
  *(void *)&v14.UInt32 mBitsPerChannel = *(void *)(v5 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v15, &v14, v7))
  {
    if (AUSpatialMapLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialMapLogScope(void)::once, &__block_literal_global_20);
    }
    if (AUSpatialMapLogScope(void)::scope)
    {
      int v10 = *(NSObject **)AUSpatialMapLogScope(void)::scope;
      if (!*(void *)AUSpatialMapLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      int v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialMap.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 69;
      int v11 = "%25s:%-5d Can't handle different in/out formats\n";
LABEL_25:
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, v11, buf, 0x12u);
    }
    return 4294956428;
  }
  if (HIDWORD(v16) != 4)
  {
    if (AUSpatialMapLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialMapLogScope(void)::once, &__block_literal_global_20);
    }
    if (AUSpatialMapLogScope(void)::scope)
    {
      int v10 = *(NSObject **)AUSpatialMapLogScope(void)::scope;
      if (!*(void *)AUSpatialMapLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      int v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUSpatialMap.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 75;
      int v11 = "%25s:%-5d Can't handle more than 4 input channels\n";
      goto LABEL_25;
    }
    return 4294956428;
  }
  uint64_t result = AUSpatialMap::DeviceSupportsAU(this);
  if (result)
  {
    if (AUSpatialMapLogScope(void)::once != -1) {
      dispatch_once(&AUSpatialMapLogScope(void)::once, &__block_literal_global_20);
    }
    if (AUSpatialMapLogScope(void)::scope)
    {
      unsigned int v9 = *(NSObject **)AUSpatialMapLogScope(void)::scope;
      if (!*(void *)AUSpatialMapLogScope(void)::scope) {
        goto LABEL_37;
      }
    }
    else
    {
      unsigned int v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      if (AUSpatialMap::DeviceScreenWidth(void)::once != -1) {
        dispatch_once(&AUSpatialMap::DeviceScreenWidth(void)::once, &__block_literal_global_16589);
      }
      int v12 = AUSpatialMap::DeviceScreenWidth(void)::deviceScreenWidth;
      if (AUSpatialMap::DeviceScreenHeight(void)::once != -1) {
        dispatch_once(&AUSpatialMap::DeviceScreenHeight(void)::once, &__block_literal_global_5);
      }
      int v13 = AUSpatialMap::DeviceScreenHeight(void)::deviceScreenHeight;
      if (AUSpatialMap::DeviceScreenScale(void)::once != -1) {
        dispatch_once(&AUSpatialMap::DeviceScreenScale(void)::once, &__block_literal_global_11);
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AUSpatialMap.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 84;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 2048;
      *(double *)&long long v24 = *(float *)&AUSpatialMap::DeviceScreenScale(void)::deviceScreenScale;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device supports AU. { screenWidth=%d, screenHeight=%d, screenScale=%f }", buf, 0x28u);
    }
LABEL_37:
    ausdk::AUScope::SafeGetElement(v2, 0);
    operator new();
  }
  return result;
}

void sub_1BB5C2D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1BB5C2EB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN12AUSpatialMap17DeviceScreenScaleEv_block_invoke()
{
  CFNumberRef v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    CFNumberRef v1 = v0;
    CFNumberGetValue(v0, kCFNumberFloat32Type, &AUSpatialMap::DeviceScreenScale(void)::deviceScreenScale);
    CFRelease(v1);
  }
}

void ___ZL20AUSpatialMapLogScopev_block_invoke()
{
}

void AUSpatialMap::~AUSpatialMap(AUSpatialMap *this)
{
  AUSpatialMap::~AUSpatialMap(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void **v20;
  uint64_t vars8;

  *(void *)this = &unk_1F14B7C18;
  CFBooleanRef v2 = (void *)*((void *)this + 145);
  if (v2)
  {
    *((void *)this + 146) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 142);
  if (v3)
  {
    *((void *)this + 143) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 139);
  if (v4)
  {
    *((void *)this + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 134);
  if (v5)
  {
    *((void *)this + 135) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 129);
  if (v6)
  {
    *((void *)this + 13std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 124);
  if (v7)
  {
    *((void *)this + 125) = v7;
    operator delete(v7);
  }
  int v20 = (void **)((char *)this + 952);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v20);
  std::vector<int>::size_type v8 = (void *)*((void *)this + 116);
  if (v8)
  {
    *((void *)this + 117) = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)*((void *)this + 111);
  if (v9)
  {
    *((void *)this + 112) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 106);
  if (v10)
  {
    *((void *)this + 107) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)this + 103);
  if (v11)
  {
    *((void *)this + 104) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 100);
  if (v12)
  {
    *((void *)this + 10freeMatrix(*((_DWORD *)this + 17), this + 1) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)this + 95);
  if (v13)
  {
    *((void *)this + 96) = v13;
    operator delete(v13);
  }
  AudioStreamBasicDescription v14 = (void *)*((void *)this + 92);
  if (v14)
  {
    *((void *)this + 93) = v14;
    operator delete(v14);
  }
  long long v15 = (void *)*((void *)this + 88);
  if (v15)
  {
    *((void *)this + 89) = v15;
    operator delete(v15);
  }
  long long v16 = (void *)*((void *)this + 83);
  if (v16)
  {
    *((void *)this + 84) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 78);
  if (v17)
  {
    *((void *)this + 79) = v17;
    operator delete(v17);
  }
  int v20 = (void **)((char *)this + 584);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v18 = (void *)*((void *)this + 70);
  if (v18)
  {
    *((void *)this + 7freeMatrix(*((_DWORD *)this + 17), this + 1) = v18;
    operator delete(v18);
  }
  __int16 v19 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  std::unique_ptr<ParametricProcessor>::reset[abi:ne180100]((ParametricProcessor **)this + 66, 0);

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUMicIssueDetector::GetScopeExtended(AUMicIssueDetector *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 776;
  }
  else {
    return 0;
  }
}

uint64_t AUMicIssueDetector::ValidFormat(AUMicIssueDetector *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  if (a2 == 2 && a3 == 2)
  {
    if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
      unsigned int v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
    }
    else {
      unsigned int v5 = 0;
    }
LABEL_19:
    if (a4->mChannelsPerFrame == 1) {
      return v5;
    }
    else {
      return 0;
    }
  }
  BOOL v6 = a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105;
  unsigned int v5 = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  if (!v6) {
    unsigned int v5 = 0;
  }
  if (a2 == 2 && (a3 == 4 || a3 == 1)) {
    goto LABEL_19;
  }
  if (a4->mChannelsPerFrame - 2 < 7) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t AUMicIssueDetector::SupportedNumChannels(AUMicIssueDetector *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMicIssueDetector::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 7;
}

BOOL AUMicIssueDetector::StreamFormatWritable(AUMicIssueDetector *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMicIssueDetector::SupportsTail(AUMicIssueDetector *this)
{
  return 1;
}

double AUMicIssueDetector::GetTailTime(AUMicIssueDetector *this)
{
  return 0.0;
}

double AUMicIssueDetector::GetLatency(AUMicIssueDetector *this)
{
  return 0.0;
}

uint64_t AUMicIssueDetector::CopyClumpName(AUMicIssueDetector *this, int a2, int a3, unsigned int a4, const __CFString **a5)
{
  if (a2) {
    return 4294956430;
  }
  if ((a3 - 1) > 4) {
    return 4294956418;
  }
  CFStringRef v7 = CFStringCreateWithCString(0, off_1E623F368[a3 - 1], 0x8000100u);
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUMicIssueDetector::GetParameterValueStrings(AUMicIssueDetector *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 == 4)
  {
    unsigned int v5 = (char *)this + 552;
  }
  else
  {
    if (a2) {
      return 4294956430;
    }
    unsigned int v5 = (char *)this + 528;
  }
  uint64_t result = 4294956418;
  if (!a2 && (uint64_t)(*((void *)v5 + 1) - *(void *)v5) >> 5 <= (unint64_t)a3)
  {
    if (a4)
    {
      if (a3 == 4)
      {
        long long v8 = xmmword_1E623F358;
        CFArrayRef v7 = CFArrayCreate(0, (const void **)&v8, 4, 0);
        uint64_t result = 0;
        *a4 = v7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUMicIssueDetector::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    if (*((unsigned char *)this + 17))
    {
      ++*((_DWORD *)this + 149);
      ++*((_DWORD *)this + 151);
      ++*((_DWORD *)this + 153);
    }
  }
  return result;
}

UInt8 *AUMicIssueDetector::SaveExtendedScopes(AUMicIssueDetector *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUMicIssueDetector::GetParameterInfo(AUMicIssueDetector *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2 == 4)
  {
    long long v4 = (char *)this + 552;
  }
  else
  {
    if (a2) {
      return 4294956430;
    }
    long long v4 = (char *)this + 528;
  }
  BOOL v6 = v4;
  uint64_t v5 = *(void *)v4;
  if (a3 >= (unint64_t)((*((void *)v6 + 1) - v5) >> 5)) {
    return 4294956418;
  }
  uint64_t v7 = v5 + 32 * a3;
  int v8 = *(_DWORD *)(v7 + 12);
  buffer->unit = *(_DWORD *)(v7 + 8);
  buffer->minint Value = *(AudioUnitParameterValue *)(v7 + 16);
  buffer->maxint Value = *(AudioUnitParameterValue *)(v7 + 20);
  buffer->defaultint Value = *(AudioUnitParameterValue *)(v7 + 24);
  int v9 = v8 + 1082130432;
  buffer->AudioUnitParameterOptions flags = v8 + 1082130432;
  signed int v10 = *(_DWORD *)(v7 + 28);
  if (v10 >= 1)
  {
    buffer->clumpID = v10;
    v9 |= 0x100000u;
  }
  CFStringRef v11 = *(const __CFString **)v7;
  buffer->cfNameString = *(CFStringRef *)v7;
  buffer->AudioUnitParameterOptions flags = v9 | 0x8000000;
  CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
  return 0;
}

uint64_t AUMicIssueDetector::SetBusCount(AUMicIssueDetector *this, int a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 == 2)
  {
    if (a3 - 1 <= 4)
    {
      long long v4 = (AUMicIssueDetector *)((char *)this + 128);
      goto LABEL_7;
    }
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    BOOL v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956445;
    }
    int v8 = 136315650;
    int v9 = "AUMicIssueDetector.cpp";
    __int16 v10 = 1024;
    int v11 = 189;
    __int16 v12 = 1024;
    unsigned int v13 = a3;
    uint64_t v7 = "%s:%-5d Invalid number (%u) of output buses requested. We only support 1–5 buses.";
    goto LABEL_15;
  }
  if (a2 != 1) {
    return 4294956430;
  }
  if (a3 - 1 <= 1)
  {
    long long v4 = (AUMicIssueDetector *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v4, a3);
    return 0;
  }
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
  }
  BOOL v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
  if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315650;
    int v9 = "AUMicIssueDetector.cpp";
    __int16 v10 = 1024;
    int v11 = 180;
    __int16 v12 = 1024;
    unsigned int v13 = a3;
    uint64_t v7 = "%s:%-5d Invalid number (%u) of input buses requested. We only support 1-2 input buses.";
LABEL_15:
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v8, 0x18u);
  }
  return 4294956445;
}

BOOL AUMicIssueDetector::BusCountWritable(AUMicIssueDetector *this, int a2)
{
  return (a2 - 1) <= 1 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUMicIssueDetector::Render(AUMicIssueDetector *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  __int16 v10 = (AUMicIssueDetector *)((char *)this + 80);
  while (1)
  {
    uint64_t v11 = *((void *)this + 15);
    if (v11) {
      LODWORD(v12) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    else {
      uint64_t v12 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v9 >= v12) {
      break;
    }
    uint64_t Element = ausdk::AUScope::GetElement(v10, v9);
    if (Element && *(_DWORD *)(Element + 172))
    {
      uint64_t v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v9);
      uint64_t result = ausdk::AUInputElement::PullInput(v14, a2, a3, v9, a4);
      if (result) {
        return result;
      }
    }
    else
    {
      char v8 = 1;
    }
    uint64_t v9 = (v9 + 1);
  }
  unint64_t v16 = 0;
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  do
  {
    uint64_t v17 = *((void *)this + 21);
    if (v17) {
      LODWORD(v18) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    }
    else {
      uint64_t v18 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v16 >= v18)
    {
      uint64_t v20 = 0;
    }
    else
    {
      __int16 v19 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 128), v16);
      uint64_t v20 = ausdk::AUIOElement::PrepareBuffer(v19, a4);
    }
    *((void *)v33 + v16++) = v20;
  }
  while (v16 != 5);
  if (v8) {
    return 0;
  }
  unint64_t v21 = 0;
  v32[0] = 0;
  v32[1] = 0;
  char v22 = 1;
  do
  {
    char v23 = v22;
    uint64_t v24 = *((void *)this + 15);
    if (v24) {
      LODWORD(v25) = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
    }
    else {
      uint64_t v25 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
    }
    if (v21 >= v25)
    {
      uint64_t BufferList = 0;
    }
    else
    {
      uint64_t v26 = ausdk::AUScope::SafeGetElement(v10, v21);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v26 + 144));
    }
    char v22 = 0;
    v32[v21] = BufferList;
    unint64_t v21 = 1;
  }
  while ((v23 & 1) != 0);
  uint64_t v28 = *((void *)this + 15);
  if (v28) {
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
  }
  else {
    uint64_t v29 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v30 = *((void *)this + 21);
  if (v30) {
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 24))(v30);
  }
  else {
    uint64_t v31 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  return (*(uint64_t (**)(AUMicIssueDetector *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, _OWORD *))(*(void *)this + 184))(this, a2, a4, v29, v32, v31, v33);
}

uint64_t AUMicIssueDetector::ProcessMultipleBufferLists(AUMicIssueDetector *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 145) != a3) {
    return 4294956422;
  }
  if (*((_DWORD *)this + 147) != a4) {
    return 4294956419;
  }
  unsigned int v8 = a6;
  if (*((_DWORD *)this + 148) != a6) {
    return 4294956419;
  }
  unsigned int v11 = 2 * a3;
  if (!a3 || *((unsigned char *)this + 576))
  {
    unint64_t v31 = *((unsigned int *)this + 146);
    if (v31)
    {
      unint64_t v32 = 0;
      uint64_t v33 = 16;
      do
      {
        if (v11)
        {
          memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v33), *(const void **)((char *)&(*a5)->mNumberBuffers + v33), 4 * v11);
          unint64_t v31 = *((unsigned int *)this + 146);
        }
        ++v32;
        v33 += 16;
      }
      while (v32 < v31);
      unsigned int v8 = *((_DWORD *)this + 148);
    }
    if (v8 > 1)
    {
      uint64_t v34 = a7[1];
      if (v34 && v11)
      {
        memmove(v34->mBuffers[0].mData, *(const void **)&(*a5)[1].mBuffers[0].mNumberChannels, 4 * v11);
        unsigned int v8 = *((_DWORD *)this + 148);
      }
      if (v8 >= 3)
      {
        uint64_t v35 = a7[2];
        if (v35) {
          vDSP_vfill(&AUMicIssueDetector::kOnef, (float *)v35->mBuffers[0].mData, 1, (unint64_t)v35->mBuffers[0].mDataByteSize >> 2);
        }
      }
    }
  }
  else
  {
    int v12 = *((_DWORD *)this + 149);
    if (v12 != *((_DWORD *)this + 150))
    {
      *((_DWORD *)this + 15std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v12;
      uint64_t v13 = *((void *)this + 67);
      uint64_t v14 = *((void *)this + 66);
      if (v13 != v14)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 12;
        do
        {
          if ((*(unsigned char *)(v14 + v16 + 1) & 0x80) == 0)
          {
            uint64_t v17 = *((void *)this + 78);
            uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 32), 0);
            float Parameter = ausdk::AUElement::GetParameter(Element, v15);
            (*(void (**)(uint64_t, unint64_t, float))(*(void *)v17 + 32))(v17, v15, Parameter);
            uint64_t v13 = *((void *)this + 67);
            uint64_t v14 = *((void *)this + 66);
          }
          ++v15;
          v16 += 32;
        }
        while (v15 < (v13 - v14) >> 5);
      }
      for (uint64_t i = 0; ; uint64_t i = (i + 1))
      {
        uint64_t v21 = *((void *)this + 102);
        if (v21) {
          LODWORD(v22) = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v21 + 24))(v21, a2);
        }
        else {
          uint64_t v22 = (*((void *)this + 100) - *((void *)this + 99)) >> 3;
        }
        if (i >= v22) {
          break;
        }
        uint64_t v23 = *((void *)this + 70);
        uint64_t v24 = *((void *)this + 69);
        if (v23 != v24)
        {
          unint64_t v25 = 0;
          uint64_t v26 = 12;
          do
          {
            if ((*(unsigned char *)(v24 + v26 + 1) & 0x80) == 0)
            {
              uint64_t v27 = *((void *)this + 78);
              uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 776), i);
              float v29 = ausdk::AUElement::GetParameter(v28, v25);
              (*(void (**)(uint64_t, uint64_t, unint64_t, float))(*(void *)v27 + 40))(v27, i, v25, v29);
              uint64_t v23 = *((void *)this + 70);
              uint64_t v24 = *((void *)this + 69);
            }
            ++v25;
            v26 += 32;
          }
          while (v25 < (v23 - v24) >> 5);
        }
      }
      (*(void (**)(void))(**((void **)this + 78) + 64))(*((void *)this + 78));
    }
    int v36 = *((_DWORD *)this + 151);
    if (v36 != *((_DWORD *)this + 152))
    {
      *((_DWORD *)this + 152) = v36;
      uint64_t v37 = *((void *)this + 78);
      unint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 32), 0);
      float v39 = ausdk::AUElement::GetParameter(v38, 3u);
      (*(void (**)(uint64_t, uint64_t, float))(*(void *)v37 + 32))(v37, 3, v39);
    }
    int v40 = *((_DWORD *)this + 153);
    if (v40 != *((_DWORD *)this + 154))
    {
      uint64_t v45 = 0;
      *((_DWORD *)this + 154) = v40;
      while (1)
      {
        uint64_t v46 = *((void *)this + 102);
        if (v46) {
          LODWORD(v47) = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 24))(v46);
        }
        else {
          uint64_t v47 = (*((void *)this + 100) - *((void *)this + 99)) >> 3;
        }
        if (v45 >= v47) {
          break;
        }
        uint64_t v48 = *((void *)this + 78);
        uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 776), v45);
        float v50 = ausdk::AUElement::GetParameter(v49, 6u);
        (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)v48 + 40))(v48, v45, 6, v50);
        uint64_t v51 = *((void *)this + 78);
        long long v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 776), v45);
        float v53 = ausdk::AUElement::GetParameter(v52, 7u);
        (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)v51 + 40))(v51, v45, 7, v53);
        uint64_t v54 = *((void *)this + 78);
        uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 776), v45);
        float v56 = ausdk::AUElement::GetParameter(v55, 8u);
        (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)v54 + 40))(v54, v45, 8, v56);
        uint64_t v57 = *((void *)this + 78);
        uint64_t v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 776), v45);
        float v59 = ausdk::AUElement::GetParameter(v58, 9u);
        (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)v57 + 40))(v57, v45, 9, v59);
        uint64_t v45 = (v45 + 1);
      }
    }
    unint64_t v41 = *((unsigned int *)this + 146);
    if (v41)
    {
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      uint64_t v44 = 16;
      do
      {
        if (v11)
        {
          memmove(*(void **)(*((void *)this + 79) + v42), *(const void **)((char *)&(*a5)->mNumberBuffers + v44), 4 * v11);
          unint64_t v41 = *((unsigned int *)this + 146);
        }
        ++v43;
        v42 += 24;
        v44 += 16;
      }
      while (v43 < v41);
    }
    else
    {
      unint64_t v41 = 0;
    }
    uint32_t v60 = (UInt32 *)((char *)this + 584);
    if (*((_DWORD *)this + 147) > 1u)
    {
      int v61 = a5[1];
      if (v61)
      {
        std::string v62 = v61->mNumberBuffers >= v41 ? (AUMicIssueDetector *)((char *)this + 584) : (AUMicIssueDetector *)a5[1];
        uint64_t v63 = *(unsigned int *)v62;
        if (v63)
        {
          uint64_t v64 = 0;
          uint64_t v65 = 24 * v63;
          uint64_t v66 = 16;
          do
          {
            if (v11) {
              memmove(*(void **)(*((void *)this + 88) + v64), *(const void **)((char *)&a5[1]->mNumberBuffers + v66), 4 * v11);
            }
            v64 += 24;
            v66 += 16;
          }
          while (v65 != v64);
        }
      }
    }
    (*(void (**)(void, char *, char *, char *, char *))(**((void **)this + 78) + 72))(*((void *)this + 78), (char *)this + 632, (char *)this + 656, (char *)this + 680, (char *)this + 704);
    unint64_t v67 = *((unsigned int *)this + 146);
    if (v67)
    {
      uint64_t v68 = 0;
      unint64_t v69 = 0;
      uint64_t v70 = 16;
      do
      {
        if (v11)
        {
          memmove(*(void **)((char *)&(*a7)->mNumberBuffers + v70), *(const void **)(*((void *)this + 82) + v68), 4 * v11);
          unint64_t v67 = *v60;
        }
        ++v69;
        v70 += 16;
        v68 += 24;
      }
      while (v69 < v67);
    }
    unsigned int v71 = *((_DWORD *)this + 148);
    if (v71 > 1)
    {
      if (v11)
      {
        CFNumberRef v72 = a7[1];
        if (v72)
        {
          memmove(v72->mBuffers[0].mData, *((const void **)this + 85), 4 * v11);
          unsigned int v71 = *((_DWORD *)this + 148);
        }
      }
      if (v71 >= 4)
      {
        CFStringRef v73 = a7[3];
        if (v73)
        {
          UInt32 mNumberBuffers = v73->mNumberBuffers;
          if (mNumberBuffers >= *v60) {
            UInt32 mNumberBuffers = *v60;
          }
          if (mNumberBuffers)
          {
            uint64_t v75 = 0;
            uint64_t v76 = 24 * mNumberBuffers;
            uint64_t v77 = 16;
            do
            {
              if (v11) {
                memmove(*(void **)((char *)&a7[3]->mNumberBuffers + v77), *(const void **)(*((void *)this + 91) + v75), 4 * v11);
              }
              v75 += 24;
              v77 += 16;
            }
            while (v76 != v75);
            unsigned int v71 = *((_DWORD *)this + 148);
          }
        }
        if (v71 >= 5)
        {
          if (v11)
          {
            char v78 = a7[4];
            if (v78) {
              memmove(v78->mBuffers[0].mData, *((const void **)this + 94), 4 * v11);
            }
          }
        }
      }
    }
    uint64_t v79 = *((void *)this + 67);
    uint64_t v80 = *((void *)this + 66);
    if (v79 != v80)
    {
      unint64_t v81 = 0;
      uint64_t v82 = 12;
      do
      {
        if ((*(unsigned char *)(v80 + v82 + 1) & 0x80) != 0)
        {
          uint64_t v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 32), 0);
          float v84 = (*(float (**)(void, unint64_t))(**((void **)this + 78) + 48))(*((void *)this + 78), v81);
          ausdk::AUElement::SetParameter(v83, v81, v84, 0);
          uint64_t v79 = *((void *)this + 67);
          uint64_t v80 = *((void *)this + 66);
        }
        ++v81;
        v82 += 32;
      }
      while (v81 < (v79 - v80) >> 5);
    }
    for (uint64_t j = 0; ; uint64_t j = (j + 1))
    {
      uint64_t v86 = *((void *)this + 102);
      if (v86) {
        LODWORD(v87) = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 24))(v86);
      }
      else {
        uint64_t v87 = (*((void *)this + 100) - *((void *)this + 99)) >> 3;
      }
      if (j >= v87) {
        break;
      }
      uint64_t v88 = *((void *)this + 70);
      uint64_t v89 = *((void *)this + 69);
      if (v88 != v89)
      {
        unint64_t v90 = 0;
        uint64_t v91 = 12;
        do
        {
          if ((*(unsigned char *)(v89 + v91 + 1) & 0x80) != 0)
          {
            uint64_t v92 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 776), j);
            float v93 = (*(float (**)(void, uint64_t, unint64_t))(**((void **)this + 78) + 56))(*((void *)this + 78), j, v90);
            ausdk::AUElement::SetParameter(v92, v90, v93, 0);
            uint64_t v88 = *((void *)this + 70);
            uint64_t v89 = *((void *)this + 69);
          }
          ++v90;
          v91 += 32;
        }
        while (v90 < (v88 - v89) >> 5);
      }
    }
    if (v8 >= 3)
    {
      uint64_t v94 = a7[2];
      if (v94)
      {
        unint64_t mDataByteSize = v94->mBuffers[0].mDataByteSize;
        mData = v94->mBuffers[0].mData;
        uint64_t v97 = (*(uint64_t (**)(void))(**((void **)this + 78) + 80))(*((void *)this + 78));
        unint64_t v98 = (uint64_t)(*(void *)(v97 + 8) - *(void *)v97) >> 2;
        if (v98 >= mDataByteSize >> 2) {
          unint64_t v98 = mDataByteSize >> 2;
        }
        if (v98) {
          memmove(mData, *(const void **)v97, 4 * v98);
        }
      }
    }
  }
  return 0;
}

uint64_t AUMicIssueDetector::CanScheduleParameters(AUMicIssueDetector *this)
{
  return 0;
}

uint64_t AUMicIssueDetector::SetParameter(AUMicIssueDetector *this, uint64_t a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a3 == 4)
  {
    uint64_t v15 = *((void *)this + 69);
    if (a2 < (unint64_t)((*((void *)this + 70) - v15) >> 5))
    {
      uint64_t result = 0;
      if ((*(unsigned char *)(v15 + 32 * a2 + 13) & 0x80) != 0) {
        ++*((_DWORD *)this + 153);
      }
      else {
        ++*((_DWORD *)this + 149);
      }
      return result;
    }
LABEL_21:
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  if (a3) {
    return 4294956430;
  }
  uint64_t v12 = *((void *)this + 66);
  if (a2 >= (unint64_t)((*((void *)this + 67) - v12) >> 5)) {
    goto LABEL_21;
  }
  int v13 = *(_DWORD *)(v12 + 32 * a2 + 12);
  uint64_t v18 = 0x100000000FLL;
  if (a2 == 15)
  {
    uint64_t v14 = 0;
  }
  else
  {
    if (a2 != 16)
    {
      uint64_t v17 = (char *)&v19;
      goto LABEL_15;
    }
    uint64_t v14 = 1;
  }
  uint64_t v17 = (char *)((unint64_t)&v18 | (4 * v14));
LABEL_15:
  if (v17 - (char *)&v18 == 8)
  {
    if ((v13 & 0x8000) != 0) {
      ++*((_DWORD *)this + 151);
    }
    else {
      ++*((_DWORD *)this + 149);
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, float))(**((void **)this + 78) + 32))(*((void *)this + 78), a2, a5);
  }
  return 0;
}

uint64_t AUMicIssueDetector::SetProperty(AUMicIssueDetector *this, int a2, int a3, unsigned int a4, const __CFDictionary **a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 != 1001)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 576) = *(_DWORD *)a5 != 0;
      return result;
    }
    return 4294956417;
  }
  if (!a5) {
    return 4294956445;
  }
  if (*((unsigned char *)this + 17)) {
    return 4294956447;
  }
  CFDictionaryRef v7 = *a5;
  if (!*a5) {
    return 4294956445;
  }
  GetScalarFromDictOptional<unsigned int>(*a5, @"AlgorithmCoreType", (char *)this + 620);
  int v8 = *((_DWORD *)this + 155);
  if (v8)
  {
    if ((explicit & 1) == 0)
    {
      {
        AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      }
    }
    __int16 v10 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956445;
    }
    *(_DWORD *)float v29 = 136315394;
    *(void *)&v29[4] = "AUMicIssueDetector.cpp";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 924;
    unsigned int v11 = "%s:%-5d Unsupported Algorithm Core Type Provided";
    goto LABEL_15;
  }
  if ((explicit & 1) == 0
  {
    AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
  }
  uint64_t v12 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
  if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)float v29 = 136315394;
    *(void *)&v29[4] = "AUMicIssueDetector.cpp";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 921;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_INFO, "%s:%-5d Successfully retrieved Algorithm Core Type MicIssueDetectorCorev1 \n", v29, 0x12u);
  }
  _ZNSt3__115allocate_sharedB8ne180100I30AUMicIssueDetectorCoreV1ParamsNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v29);
  int v13 = *(void **)v29;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 104);
  *(_OWORD *)((char *)this + 824) = *(_OWORD *)v29;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    uint64_t v15 = (void *)*((void *)this + 103);
  }
  else
  {
    uint64_t v15 = v13;
  }
  GetScalarFromDictOptional<float>(v7, @"WindProbBandLowFreq", v15);
  GetScalarFromDictOptional<float>(v7, @"WindProbBandHighFreq", (char *)v15 + 4);
  GetScalarFromDictOptional<float>(v7, @"WindLvlBandLowFreq", v15 + 1);
  GetScalarFromDictOptional<float>(v7, @"WindLvlBandMidFreq", (char *)v15 + 12);
  GetScalarFromDictOptional<float>(v7, @"WindLvlBandHighFreq", v15 + 2);
  GetScalarFromDictOptional<float>(v7, @"WindLvlBandEnThr", (char *)v15 + 20);
  GetScalarFromDictOptional<float>(v7, @"WindLvlToGainFlr", v15 + 3);
  GetScalarFromDictOptional<float>(v7, @"WindLvlToGainSlope", (char *)v15 + 28);
  GetScalarFromDictOptional<float>(v7, @"WindLvlToGainMean", v15 + 4);
  GetScalarFromDictOptional<float>(v7, @"WindLvlGainAttackTC", (char *)v15 + 36);
  GetScalarFromDictOptional<float>(v7, @"WindLvlGainReleaseTC", v15 + 5);
  GetScalarFromDictOptional<float>(v7, @"WindLvlGainHoldTime", (char *)v15 + 44);
  GetScalarFromDictOptional<float>(v7, @"EnRatioBandLowFreq", v15 + 6);
  GetScalarFromDictOptional<float>(v7, @"EnRatioBandHighFreq", (char *)v15 + 52);
  GetScalarFromDictOptional<float>(v7, @"EnRatioBandCohrThr", v15 + 7);
  GetScalarFromDictOptional<float>(v7, @"EnRatioToGainFlr", (char *)v15 + 60);
  GetScalarFromDictOptional<float>(v7, @"EnRatioToGainSlope", v15 + 8);
  GetScalarFromDictOptional<float>(v7, @"EnRatioToGainMean", (char *)v15 + 68);
  GetScalarFromDictOptional<float>(v7, @"EnRatioGainAttackTC", v15 + 9);
  GetScalarFromDictOptional<float>(v7, @"EnRatioGainReleaseTC", (char *)v15 + 76);
  GetScalarFromDictOptional<float>(v7, @"EnRatioGainHoldTime", v15 + 10);
  GetScalarFromDictOptional<float>(v7, @"EnRatioGainInEnThr", (char *)v15 + 84);
  GetScalarFromDictOptional<float>(v7, @"EnRatioGainOutEnFloor", v15 + 11);
  GetScalarFromDictOptional<float>(v7, @"GainLowFreq", (char *)v15 + 92);
  GetScalarFromDictOptional<float>(v7, @"GainCrossoverFreq", v15 + 12);
  GetScalarFromDictOptional<float>(v7, @"GainHighFreq", (char *)v15 + 100);
  GetScalarFromDictOptional<float>(v7, @"CohrToGainSigmoidSlope", v15 + 13);
  GetScalarFromDictOptional<float>(v7, @"CohrtoGainSigmoidMean", (char *)v15 + 108);
  GetScalarFromDictOptional<float>(v7, @"GainThreshold", v15 + 14);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, @"PreferredMic");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, v15 + 19);
  }
  else
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    uint64_t v17 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
    {
      CStringPtr = CFStringGetCStringPtr(@"PreferredMic", 0x8000100u);
      *(_DWORD *)float v29 = 136315650;
      *(void *)&v29[4] = "AUMicIssueDetector.cpp";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 907;
      __int16 v30 = 2080;
      unint64_t v31 = CStringPtr;
      _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_INFO, "%s:%-5d Param value for %s not found in plist, using default value.", v29, 0x1Cu);
    }
  }
  GetScalarFromDictOptional<float>(v7, @"MicSwitchGainThr", (char *)v15 + 156);
  GetScalarFromDictOptional<unsigned int>(v7, @"BlockedMicDecisionTC", (char *)v15 + 116);
  GetScalarFromDictOptional<unsigned int>(v7, @"BlockedMicNumBands", v15 + 15);
  uint64_t result = CFDictionaryContainsKey(v7, @"BlockedMicProfile");
  if (result)
  {
    CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(v7, @"BlockedMicProfile");
    CFDataRef v20 = v19;
    if (!v19)
    {
      {
        AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      }
      __int16 v10 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
      if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
        return 4294956445;
      }
      *(_DWORD *)float v29 = 136315394;
      *(void *)&v29[4] = "AUMicIssueDetector.cpp";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 990;
      unsigned int v11 = "%s:%-5d Could not retrieve blocked mic profile data. Will use default\n";
LABEL_15:
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, v11, v29, 0x12u);
      return 4294956445;
    }
    unsigned int Length = CFDataGetLength(v19);
    unsigned int v22 = Length >> 2;
    if (Length >> 2 != 5 * *((_DWORD *)v15 + 30)) {
      return 4294956445;
    }
    uint64_t v23 = v15 + 16;
    std::vector<float>::resize((uint64_t)v23, v22);
    BytePtr = CFDataGetBytePtr(v20);
    if (Length >= 4)
    {
      unint64_t v25 = (unsigned int *)BytePtr;
      uint64_t v26 = (_DWORD *)*v23;
      if (v22 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v22;
      }
      uint64_t result = 0;
      do
      {
        unsigned int v28 = *v25++;
        *v26++ = bswap32(v28);
        --v27;
      }
      while (v27);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void GetScalarFromDictOptional<unsigned int>(const __CFDictionary *a1, const __CFString *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, a3);
  }
  else
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    BOOL v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315650;
      int v8 = "AUMicIssueDetector.cpp";
      __int16 v9 = 1024;
      int v10 = 907;
      __int16 v11 = 2080;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%s:%-5d Param value for %s not found in plist, using default value.", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

double _ZNSt3__115allocate_sharedB8ne180100I30AUMicIssueDetectorCoreV1ParamsNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  CFBooleanRef v2 = (char *)operator new(0xB8uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)CFBooleanRef v2 = &unk_1F14B8138;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 28) = xmmword_1BB87B7E0;
  *(_OWORD *)(v2 + 44) = xmmword_1BB87B7F0;
  *(_OWORD *)(v2 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = xmmword_1BB87B800;
  *(_OWORD *)(v2 + 76) = xmmword_1BB87B810;
  *(_OWORD *)(v2 + 92) = xmmword_1BB87B820;
  *(_OWORD *)(v2 + 168) = 0u;
  *(int32x2_t *)(v2 + 108) = vdup_n_s32(0xC2D20000);
  *(_OWORD *)(v2 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = xmmword_1BB87B830;
  *((_DWORD *)v2 + 34) = 1061997773;
  *(void *)(v2 + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0x3000007D0;
  *((void *)v2 + 2freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  uint64_t v3 = operator new(0x3CuLL);
  *uint64_t v3 = xmmword_1BB8A9744;
  v3[1] = unk_1BB8A9754;
  v3[2] = xmmword_1BB8A9764;
  double result = 536871302.0;
  *(_OWORD *)((char *)v3 + 44) = *(long long *)((char *)&xmmword_1BB8A9764 + 12);
  *((void *)v2 + 19) = v3;
  *((void *)v2 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (char *)v3 + 60;
  *((void *)v2 + 2freeMatrix(*((_DWORD *)this + 17), this + 1) = (char *)v3 + 60;
  *((void *)v2 + 22) = 0x3F33333300000000;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1BB5C4E10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void GetScalarFromDictOptional<float>(const __CFDictionary *a1, const __CFString *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberFloat32Type, a3);
  }
  else
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    BOOL v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315650;
      int v8 = "AUMicIssueDetector.cpp";
      __int16 v9 = 1024;
      int v10 = 907;
      __int16 v11 = 2080;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%s:%-5d Param value for %s not found in plist, using default value.", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void std::__shared_ptr_emplace<AUMicIssueDetectorCoreV1Params>::__on_zero_shared(uint64_t a1)
{
  CFBooleanRef v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<AUMicIssueDetectorCoreV1Params>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B8138;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<AUMicIssueDetectorCoreV1Params>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14B8138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AUMicIssueDetector::GetProperty(AUMicIssueDetector *this, int a2, int a3, uint64_t a4, float *__b)
{
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 > 1002)
    {
      if (a2 == 1003)
      {
        float v8 = 0.0;
        if (*((unsigned char *)this + 17) && !*((unsigned char *)this + 576)) {
          float v8 = (*(float (**)(void, void, double))(**((void **)this + 78) + 48))(*((void *)this + 78), 0, 0.0);
        }
LABEL_24:
        uint64_t result = 0;
        *__b = v8;
        return result;
      }
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v10 = *((unsigned __int8 *)this + 376);
    }
    else
    {
      if (a2 != 21)
      {
        if (a2 == 1002)
        {
          if (*((unsigned char *)this + 17) && !*((unsigned char *)this + 576))
          {
            if (*((_DWORD *)this + 145) != *((_DWORD *)this + 84)) {
              return 4294956446;
            }
            __int16 v11 = (const void **)(*(uint64_t (**)(void))(**((void **)this + 78) + 80))(*((void *)this + 78));
            uint64_t v12 = *((unsigned int *)this + 145);
            if (v12) {
              memmove(__b, *v11, 4 * v12);
            }
          }
          else
          {
            uint64_t v9 = *((unsigned int *)this + 84);
            if (v9) {
              memset_pattern16(__b, &unk_1BB873A60, 4 * v9);
            }
          }
          return 0;
        }
        return result;
      }
      uint64_t result = 0;
      int v10 = *((unsigned __int8 *)this + 576);
    }
    *(_DWORD *)__b = v10;
    return result;
  }
  if (a2 == 1004 && a3 == 4)
  {
    float v8 = 0.0;
    if (*((unsigned char *)this + 17) && !*((unsigned char *)this + 576))
    {
      if (*((_DWORD *)this + 146) <= a4) {
        return result;
      }
      (*(void (**)(void, uint64_t, uint64_t, double))(**((void **)this + 78) + 56))(*((void *)this + 78), a4, 1, 0.0);
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t AUMicIssueDetector::GetPropertyInfo(AUMicIssueDetector *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3)
  {
    uint64_t result = 4294956417;
    if (a2 == 1004 && a3 == 4)
    {
LABEL_4:
      *a6 = 0;
LABEL_5:
      int v7 = 4;
LABEL_6:
      uint64_t result = 0;
      *a5 = v7;
    }
  }
  else
  {
    uint64_t result = 4294956417;
    if (a2 <= 1001)
    {
      if (a2 == 21)
      {
        *a6 = 1;
        goto LABEL_5;
      }
      if (a2 == 1001)
      {
        *a6 = 1;
        int v7 = 8;
        goto LABEL_6;
      }
    }
    else
    {
      if (a2 == 1002)
      {
        *a6 = 1;
        int v7 = 4 * *((_DWORD *)this + 84);
        goto LABEL_6;
      }
      if (a2 == 1003 || a2 == 3700) {
        goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t AUMicIssueDetector::Reset(AUMicIssueDetector *this)
{
  *(_OWORD *)((char *)this + 596) = xmmword_1BB873AA0;
  *(void *)((char *)this + 612) = 1;
  float v2 = *(float *)(*((void *)this + 66) + 120);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 3u, v2, 0);
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v5 = *((void *)this + 102);
    if (v5) {
      LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    else {
      uint64_t v6 = (*((void *)this + 100) - *((void *)this + 99)) >> 3;
    }
    if (i >= v6) {
      break;
    }
    int v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUMicIssueDetector *)((char *)this + 776), i);
    ausdk::AUElement::SetParameter(v7, 6u, *(float *)(*((void *)this + 69) + 216), 0);
  }
  uint64_t v8 = *((void *)this + 78);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  return 0;
}

uint64_t AUMicIssueDetector::Initialize(AUMicIssueDetector *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4)
  {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    if (v3) {
      goto LABEL_6;
    }
LABEL_11:
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    uint64_t v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    int v23 = 136315394;
    uint64_t v24 = "AUMicIssueDetector.cpp";
    __int16 v25 = 1024;
    int v26 = 52;
    int v7 = "%s:%-5d Number of Input Elements provided is less than the Minimum required.";
LABEL_27:
    int v10 = v6;
    uint32_t v11 = 18;
    goto LABEL_28;
  }
  uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  if (!v3) {
    goto LABEL_11;
  }
LABEL_6:
  if (v3 >= 3)
  {
    {
      {
        AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      }
    }
    uint64_t v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    int v23 = 136315394;
    uint64_t v24 = "AUMicIssueDetector.cpp";
    __int16 v25 = 1024;
    int v26 = 56;
    int v7 = "%s:%-5d Number of Input Elements provided is greather than the Maximum supported.";
    goto LABEL_27;
  }
  if (!v5)
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    uint64_t v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    int v23 = 136315394;
    uint64_t v24 = "AUMicIssueDetector.cpp";
    __int16 v25 = 1024;
    int v26 = 60;
    int v7 = "%s:%-5d Number of Output Elements provided is less than the Minimum required.";
    goto LABEL_27;
  }
  if (v5 >= 6)
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    uint64_t v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    int v23 = 136315394;
    uint64_t v24 = "AUMicIssueDetector.cpp";
    __int16 v25 = 1024;
    int v26 = 64;
    int v7 = "%s:%-5d Number of Output Elements provided is greather than the Maximum supported.";
    goto LABEL_27;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 0);
  if (*(_DWORD *)(Element + 88) != 1718773105
    || (uint64_t v9 = Element, (*(_DWORD *)(Element + 108) - 9) <= 0xFFFFFFF8))
  {
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
    }
    uint64_t v6 = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
    if (!os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    int v23 = 136315394;
    uint64_t v24 = "AUMicIssueDetector.cpp";
    __int16 v25 = 1024;
    int v26 = 71;
    int v7 = "%s:%-5d Input Format is Invalid.";
    goto LABEL_27;
  }
  if (v3 > 1)
  {
    uint64_t v13 = (AU::AUMicIssueDetector *)ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 1u);
    if (*((_DWORD *)v13 + 22) != 1718773105 || (*((_DWORD *)v13 + 27) - 9) <= 0xFFFFFFF8)
    {
      log = AU::AUMicIssueDetector::get_log(v13);
      if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
      {
        int v23 = 136315650;
        uint64_t v24 = "AUMicIssueDetector.cpp";
        __int16 v25 = 1024;
        int v26 = 78;
        __int16 v27 = 1024;
        int v28 = 1;
        int v7 = "%s:%-5d Format for ECLee Input Element %u is Invalid.";
        goto LABEL_56;
      }
      return 4294956428;
    }
  }
  unsigned int v15 = 0;
  while (2)
  {
    uint64_t v16 = ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 128), v15);
    uint64_t v17 = v16;
    uint64_t v18 = (const AudioStreamBasicDescription *)(v16 + 80);
    switch(v15)
    {
      case 0u:
        if (AUMicIssueDetector::validOutputFormat(this, v18, *(_DWORD *)(v9 + 108))) {
          goto LABEL_49;
        }
        unsigned int v15 = 0;
        goto LABEL_53;
      case 1u:
      case 4u:
        if (!AUMicIssueDetector::validOutputFormat(this, v18, 1)) {
          goto LABEL_53;
        }
        goto LABEL_49;
      case 2u:
        if (*(_DWORD *)(v16 + 88) == 1819304813)
        {
          double v19 = *(double *)(v16 + 80);
          float v20 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 0) + 80);
          if (v19 == v20 && *(_DWORD *)(v17 + 108) == 1) {
            goto LABEL_49;
          }
        }
        unsigned int v15 = 2;
        goto LABEL_53;
      case 3u:
        if (*(_DWORD *)(v16 + 88) == 1718773105 && (*(_DWORD *)(v16 + 108) - 9) >= 0xFFFFFFF9)
        {
LABEL_49:
          if (v5 == ++v15)
          {
            *((_DWORD *)this + 145) = *((_DWORD *)this + 84);
            *((_DWORD *)this + 146) = *(_DWORD *)(v9 + 108);
            *((_DWORD *)this + 147) = v3;
            *((_DWORD *)this + 148) = v5;
            uint64_t v22 = AUMicIssueDetector::setupCore(this);
            (*(void (**)(AUMicIssueDetector *, void, void))(*(void *)this + 72))(this, 0, 0);
            return v22;
          }
          continue;
        }
        unsigned int v15 = 3;
LABEL_53:
        {
          AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
        }
        log = AU::AUMicIssueDetector::get_log(void)::aumisd_os_log;
        if (os_log_type_enabled((os_log_t)AU::AUMicIssueDetector::get_log(void)::aumisd_os_log, OS_LOG_TYPE_ERROR))
        {
          int v23 = 136315650;
          uint64_t v24 = "AUMicIssueDetector.cpp";
          __int16 v25 = 1024;
          int v26 = 96;
          __int16 v27 = 1024;
          int v28 = v15;
          int v7 = "%s:%-5d Format for Output Element %u is Invalid.";
LABEL_56:
          int v10 = log;
          uint32_t v11 = 24;
LABEL_28:
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v23, v11);
        }
        return 4294956428;
      default:
        goto LABEL_53;
    }
  }
}

uint64_t AU::AUMicIssueDetector::get_log(AU::AUMicIssueDetector *this)
{
  CFNumberRef v1 = (char *)&xmmword_1E9F7EFF8 + 8;
  {
    CFNumberRef v1 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    if (v3)
    {
      AU::AUMicIssueDetector::get_log(void)::aumisd_os_log = (uint64_t)os_log_create("com.apple.coreaudio", "AUMicIssueDetector");
      CFNumberRef v1 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    }
  }
  return *((void *)v1 + 391);
}

BOOL AUMicIssueDetector::validOutputFormat(AUMicIssueDetector *this, const AudioStreamBasicDescription *a2, int a3)
{
  BOOL result = 0;
  if (a2->mFormatID == 1718773105)
  {
    double mSampleRate = a2->mSampleRate;
    float v6 = *(double *)(ausdk::AUScope::SafeGetElement((AUMicIssueDetector *)((char *)this + 80), 0) + 80);
    if (mSampleRate == v6 && a2->mChannelsPerFrame == a3) {
      return 1;
    }
  }
  return result;
}

uint64_t AUMicIssueDetector::setupCore(AUMicIssueDetector *this)
{
  if (!*((_DWORD *)this + 145)) {
    return 0;
  }
  if (!*((_DWORD *)this + 155)) {
    operator new();
  }
  return 4294956421;
}

void sub_1BB5C6030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AUMicIssueDetector::CreateExtendedElements(AUMicIssueDetector *this)
{
  CFNumberRef v1 = (AUMicIssueDetector *)((char *)this + 776);
  ausdk::AUScope::Initialize((AUMicIssueDetector *)((char *)this + 776), this, 4, 8);
  for (unsigned int i = 0; i != 8; ++i)
  {
    std::to_string(&v8, i);
    int v3 = std::string::insert(&v8, 0, "Mic", 3uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB5C6210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUMicIssueDetector::~AUMicIssueDetector(AUMicIssueDetector *this)
{
  AUMicIssueDetector::~AUMicIssueDetector(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void **v8;

  *(void *)this = &unk_1F14B7EE8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::string v8 = (void **)((char *)this + 792);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v8);
  int v3 = (void *)*((void *)this + 94);
  if (v3)
  {
    *((void *)this + 95) = v3;
    operator delete(v3);
  }
  std::string v8 = (void **)((char *)this + 728);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::string v8 = (void **)((char *)this + 704);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  long long v4 = (void *)*((void *)this + 85);
  if (v4)
  {
    *((void *)this + 86) = v4;
    operator delete(v4);
  }
  std::string v8 = (void **)((char *)this + 656);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::string v8 = (void **)((char *)this + 632);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v5 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  CFStringRef v6 = (void *)*((void *)this + 69);
  if (v6)
  {
    *((void *)this + 7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 66);
  if (v7)
  {
    *((void *)this + 67) = v7;
    operator delete(v7);
  }
  ausdk::AUBase::~AUBase(this);
}

float PiecewiseLinearTransform::tx(PiecewiseLinearTransform *this, float result, PiecewiseLinearTransform *a3)
{
  if (a3 == this) {
    return result;
  }
  if (*(float *)this >= result)
  {
    std::string v8 = (char *)this + 4;
    return *(float *)v8;
  }
  if (*((float *)a3 - 2) <= result)
  {
    std::string v8 = (char *)a3 - 4;
    return *(float *)v8;
  }
  unint64_t v3 = (a3 - this) >> 3;
  do
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = (float *)((char *)this + 8 * (v3 >> 1));
    float v7 = *v5;
    CFStringRef v6 = (PiecewiseLinearTransform *)(v5 + 2);
    v3 += ~(v3 >> 1);
    if (v7 > result) {
      unint64_t v3 = v4;
    }
    else {
      this = v6;
    }
  }
  while (v3);
  return *((float *)this - 1)
       + (float)((float)((float)(result - *((float *)this - 2)) * (float)(*((float *)this + 1) - *((float *)this - 1)))
               / (float)(*(float *)this - *((float *)this - 2)));
}

uint64_t ParameterTransformBox::setProperty(ParameterTransformBox *this, int a2, unsigned int a3, unsigned int a4, int a5, uint64_t **a6)
{
  if (a2 == 1)
  {
    int v9 = *(unsigned __int8 *)a6;
    caulk::pooled_semaphore_mutex::_lock((ParameterTransformBox *)((char *)this + 780));
    if (v9) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *((unsigned char *)this + 776) == 0;
    }
    if (v11)
    {
      if (v9 && !*((unsigned char *)this + 776)) {
        ApplyLogTransformationOfXValues(*((char ***)this + 98), v10);
      }
    }
    else
    {
      UndoLogTransformationOfXValues(*((char ***)this + 98), v10);
    }
    *((unsigned char *)this + 776) = v9;
    caulk::pooled_semaphore_mutex::_unlock((ParameterTransformBox *)((char *)this + 780));
    return 0;
  }
  else
  {
    if (!a2 && a5 == 24)
    {
      memset(v12, 0, sizeof(v12));
      std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)v12, *a6, a6[1], a6[1] - *a6);
      if (*((unsigned char *)this + 776)) {
        ApplyLogTransformationOfXValues(v12, v7);
      }
      caulk::pooled_semaphore_mutex::_lock((ParameterTransformBox *)((char *)this + 780));
      operator new();
    }
    return 4294956445;
  }
}

void sub_1BB5C657C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ApplyLogTransformationOfXValues(char **a1, double a2)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F14B8440;
  v3[1] = &__block_literal_global_17019;
  v3[3] = v3;
  PiecewiseLinearTransform::ApplyFunctionToChangeXValues(a1, (uint64_t)v3, a2);
  return std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v3);
}

void sub_1BB5C6674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *UndoLogTransformationOfXValues(char **a1, double a2)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F14B8440;
  v3[1] = &__block_literal_global_8;
  v3[3] = v3;
  PiecewiseLinearTransform::ApplyFunctionToChangeXValues(a1, (uint64_t)v3, a2);
  return std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v3);
}

void sub_1BB5C6714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

float ___Z30UndoLogTransformationOfXValuesR24PiecewiseLinearTransform_block_invoke(float a1)
{
  float result = expf(a1);
  if (LODWORD(result) >> 23 >= 0xFF) {
    __assert_rtn("UndoLogTransformationOfXValues_block_invoke", "ParameterTransformBox.mm", 84, "isfinite(y)");
  }
  return result;
}

void ___Z31ApplyLogTransformationOfXValuesR24PiecewiseLinearTransform_block_invoke(float a1)
{
}

uint64_t ParameterTransformBox::getProperty(ParameterTransformBox *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, unsigned char *a6)
{
  if (a2 == 1)
  {
    *a6 = *((unsigned char *)this + 776);
    *a5 = 1;
  }
  else if (!a2)
  {
    int v9 = (ParameterTransformBox *)((char *)this + 780);
    caulk::pooled_semaphore_mutex::_lock((ParameterTransformBox *)((char *)this + 780));
    double v10 = (uint64_t **)*((void *)this + 98);
    unsigned int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    std::vector<std::pair<float,float>>::__init_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>((char *)&v14, *v10, v10[1], v10[1] - *v10);
    if (*((unsigned char *)this + 776)) {
      UndoLogTransformationOfXValues(&v14, v11);
    }
    uint64_t v12 = v14;
    std::vector<std::pair<float,float>>::__assign_with_size[abi:ne180100]<std::pair<float,float>*,std::pair<float,float>*>(a6, (uint64_t *)v14, v15, ((char *)v15 - v14) >> 3);
    *a5 = 24;
    if (v12) {
      operator delete(v12);
    }
    caulk::pooled_semaphore_mutex::_unlock(v9);
  }
  return 0;
}

void sub_1BB5C6870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  caulk::pooled_semaphore_mutex::_unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t ParameterTransformBox::getPropertyInfo(ParameterTransformBox *this, int a2)
{
  uint64_t v2 = 0x1FFFFD581;
  if (a2 == 1) {
    uint64_t v2 = 0x100000001;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0x100000018;
  }
}

double ParameterTransformBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 2.16793153e233;
  *(_OWORD *)a1 = xmmword_1BB87A8F0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

float ParameterTransformBox::getParameter(ParameterTransformBox *this)
{
  return *((float *)this + 193);
}

uint64_t ParameterTransformBox::setParameter(ParameterTransformBox *this, float a2)
{
  float v2 = a2;
  if (*((unsigned char *)this + 776))
  {
    float v4 = logf(a2);
    if (v2 <= 0.0) {
      float v2 = -30.0;
    }
    else {
      float v2 = v4;
    }
  }
  double v7 = (char *)this + 780;
  int v5 = caulk::pooled_semaphore_mutex::try_lock((ParameterTransformBox *)((char *)this + 780));
  char v8 = v5;
  if (v5) {
    *((float *)this + 193) = PiecewiseLinearTransform::tx(**((PiecewiseLinearTransform ***)this + 98), v2, *(PiecewiseLinearTransform **)(*((void *)this + 98) + 8));
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
}

void sub_1BB5C699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ParameterTransformBox::~ParameterTransformBox(ParameterTransformBox *this)
{
  *(void *)this = &unk_1F14B8170;
  uint64_t v2 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v2) {
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v2);
  }
  DSPGraph::Box::~Box(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B8170;
  uint64_t v2 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v2) {
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v2);
  }

  DSPGraph::Box::~Box(this);
}

uint64_t GetVPProductFamilyType(int a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v1 = a1 - 2;
  uint64_t result = 39;
  switch(v1)
  {
    case 0:
    case 1:
    case 179:
    case 183:
      return 53;
    case 2:
      return 54;
    case 3:
      return 55;
    case 7:
      return 13;
    case 8:
    case 178:
      return 14;
    case 15:
      return 18;
    case 16:
      return 19;
    case 22:
      return 1;
    case 23:
      return 2;
    case 24:
      return 7;
    case 25:
      return 4;
    case 26:
      return 5;
    case 29:
      return 17;
    case 30:
      return 9;
    case 31:
      return 10;
    case 32:
      return 11;
    case 33:
      return 12;
    case 34:
      return 15;
    case 35:
      return 16;
    case 36:
      return 20;
    case 37:
      return 21;
    case 44:
      return 6;
    case 70:
      return 34;
    case 71:
      return 35;
    case 72:
    case 73:
      return 36;
    case 75:
      return 30;
    case 76:
      return 31;
    case 78:
    case 79:
      return 38;
    case 81:
    case 82:
      return 32;
    case 83:
    case 84:
      return 33;
    case 85:
      return 22;
    case 86:
      return 23;
    case 90:
    case 91:
      return 37;
    case 94:
      return 24;
    case 95:
      return 25;
    case 98:
      return 26;
    case 99:
      return 27;
    case 102:
      return 28;
    case 103:
      return 29;
    case 123:
      return 3;
    case 132:
    case 133:
      return result;
    case 136:
    case 137:
      return 40;
    case 138:
    case 139:
      return 41;
    case 144:
    case 145:
      return 42;
    case 146:
    case 147:
      return 43;
    case 148:
    case 149:
      return 44;
    case 150:
    case 151:
      return 45;
    case 152:
    case 153:
      return 46;
    case 154:
    case 155:
      return 47;
    case 156:
    case 157:
      return 48;
    case 158:
      return 49;
    case 159:
    case 160:
      return 50;
    case 161:
    case 162:
      return 51;
    case 167:
      return 52;
    case 175:
      return 8;
    default:
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unint64_t v3 = (void **)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        float v4 = *v3;
        if (!*v3) {
          float v4 = (void *)MEMORY[0x1E4F14500];
        }
        int v5 = v4;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          int v9 = 136315394;
          double v10 = "vpBaseAspen.mm";
          __int16 v11 = 1024;
          int v12 = 296;
          _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: <SERIOUS ERROR> Hardware unknown! default config!", (uint8_t *)&v9, 0x12u);
        }

        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
      }
      CFStringRef v6 = (void **)VPLogScope(void)::scope;
      if (!VPLogScope(void)::scope) {
        return 0;
      }
      uint64_t result = CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0);
      if (result)
      {
        double v7 = *v6;
        if (!*v6) {
          double v7 = (void *)MEMORY[0x1E4F14500];
        }
        char v8 = v7;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v9 = 136315394;
          double v10 = "vpBaseAspen.mm";
          __int16 v11 = 1024;
          int v12 = 298;
          _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Hey I just met you, and this is crazy, but here's my component 'Audio - DSP', so file a radar maybe.", (uint8_t *)&v9, 0x12u);
        }

        return 0;
      }
      return result;
  }
}

void GetAndPrintPortTypeProperty(AudioObjectPropertyScope a1, int a2, AudioObjectID inObjectID, AudioObjectPropertySelector a4, const char *a5, unsigned int *a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  inAddress.mSelector = 1684104048;
  inAddress.mScope = a1;
  inAddress.muint64_t Element = 0;
  CFArrayRef outData = 0;
  UInt32 ioDataSize = 8;
  if (!AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData) && ioDataSize == 8)
  {
    CFIndex Count = CFArrayGetCount(outData);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    int v9 = (void **)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      double v10 = *v9;
      if (!*v9) {
        double v10 = (void *)MEMORY[0x1E4F14500];
      }
      __int16 v11 = v10;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v12 = "REF";
        *(_DWORD *)buf = 136316162;
        uint64_t v48 = "vpBaseAspen.mm";
        if (a1 == 1768845428) {
          int v12 = "MIC";
        }
        __int16 v49 = 1024;
        int v50 = 551;
        *(void *)long long v52 = v12;
        uint64_t v13 = "input";
        __int16 v51 = 2080;
        *(_WORD *)&v52[8] = 1024;
        *(_DWORD *)&v52[10] = Count;
        if (a1 != 1768845428) {
          uint64_t v13 = "output";
        }
        __int16 v53 = 2080;
        uint64_t v54 = (uint8_t *)v13;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s device has %d active %s ports", buf, 0x2Cu);
      }
    }
    if (Count >= 1)
    {
      CFIndex v14 = 0;
      unsigned int v15 = (void *)MEMORY[0x1E4F14500];
      uint64_t v16 = &dword_1BB0CE000;
      while (1)
      {
        AudioObjectID valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(outData, v14);
        if (ValueAtIndex)
        {
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v18 = (void **)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            double v19 = *v18;
            if (!*v18) {
              double v19 = v15;
            }
            float v20 = v19;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v48 = "vpBaseAspen.mm";
              __int16 v49 = 1024;
              int v50 = 561;
              __int16 v51 = 1024;
              *(_DWORD *)long long v52 = valuePtr;
              _os_log_impl(v16, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d current port ID = %d", buf, 0x18u);
            }
          }
        }
        *(void *)&v41.mSelector = 0x676C6F6270747970;
        v41.muint64_t Element = 0;
        int v40 = 0;
        UInt32 ioDataSize = 4;
        if (!AudioObjectGetPropertyData(valuePtr, &v41, 0, 0, &ioDataSize, &v40) && ioDataSize == 4)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v22 = (void **)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            int v23 = *v22;
            if (!*v22) {
              int v23 = v15;
            }
            uint64_t v24 = v23;
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
            {
              __int16 v25 = v15;
              int v26 = v16;
              AudioObjectID v27 = valuePtr;
              CAX4CCString::CAX4CCString((CAX4CCString *)v46, v40);
              *(_DWORD *)buf = 136315906;
              uint64_t v48 = "vpBaseAspen.mm";
              __int16 v49 = 1024;
              int v50 = 572;
              __int16 v51 = 1024;
              *(_DWORD *)long long v52 = v27;
              *(_WORD *)&v52[4] = 2080;
              *(void *)&v52[6] = v46;
              uint64_t v16 = v26;
              _os_log_impl(v26, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d port type for port id %d is %s", buf, 0x22u);
              unsigned int v15 = v25;
            }
          }
          if (v40 == a2) {
            break;
          }
        }
        if (Count == ++v14) {
          goto LABEL_69;
        }
      }
      v39.mSelector = a4;
      *(void *)&v39.mScope = 1735159650;
      UInt32 ioDataSize = 4;
      if (AudioObjectGetPropertyData(valuePtr, &v39, 0, 0, &ioDataSize, a6)) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = ioDataSize == 4;
      }
      int v29 = v28;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      __int16 v30 = (void **)VPLogScope(void)::scope;
      if (v29)
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          unint64_t v31 = *v30;
          if (!*v30) {
            unint64_t v31 = v15;
          }
          uint64_t v32 = v31;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            AudioObjectID v33 = valuePtr;
            CAX4CCString::CAX4CCString((CAX4CCString *)v46, *a6);
            *(_DWORD *)buf = 136316162;
            uint64_t v48 = "vpBaseAspen.mm";
            __int16 v49 = 1024;
            int v50 = 582;
            __int16 v51 = 2080;
            *(void *)long long v52 = a5;
            *(_WORD *)&v52[8] = 1024;
            *(_DWORD *)&v52[10] = v33;
            __int16 v53 = 2080;
            uint64_t v54 = v46;
            _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d port %s type for port id %d is %s", buf, 0x2Cu);
          }
        }
      }
      else
      {
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          uint64_t v34 = *v30;
          if (!*v30) {
            uint64_t v34 = v15;
          }
          uint64_t v35 = v34;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v48 = "vpBaseAspen.mm";
            __int16 v49 = 1024;
            int v50 = 586;
            __int16 v51 = 2080;
            *(void *)long long v52 = a5;
            *(_WORD *)&v52[8] = 1024;
            *(_DWORD *)&v52[10] = valuePtr;
            _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d port %s type for port id %d was not found!", buf, 0x22u);
          }
        }
        *a6 = 0;
      }
    }
  }
LABEL_69:
  if (outData) {
    CFRelease(outData);
  }
}

void sub_1BB5C7750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void dft_v5::paramInit_v5(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = (char *)malloc_type_malloc(0xC8uLL, 0x2C8E6D5CuLL);
  if (!v15)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    AudioObjectID v27 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v16 = (float *)v15;
  *((_DWORD *)v15 + 49) = 0;
  *(_OWORD *)(v15 + 18std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v15 + 164) = 0u;
  *(_OWORD *)(v15 + 148) = 0u;
  *(_OWORD *)(v15 + ++*((_DWORD *)this + 132) = 0u;
  *(_OWORD *)(v15 + 116) = 0u;
  *(_OWORD *)(v15 + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v15 + 84) = 0u;
  *(_OWORD *)(v15 + 68) = 0u;
  *(_OWORD *)(v15 + 52) = 0u;
  *(_OWORD *)(v15 + 36) = 0u;
  *(_OWORD *)(v15 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v15 + 4) = 0u;
  *a1 = v15;
  int v17 = 2 * a3;
  int v18 = a3 + 1;
  *(_DWORD *)unsigned int v15 = 2 * a3;
  if (a8) {
    int v19 = a4 + 1;
  }
  else {
    int v19 = a4;
  }
  *((_DWORD *)v15 + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = a4;
  *((_DWORD *)v15 + 12) = v19;
  *((_DWORD *)v15 + 4) = a3;
  *((_DWORD *)v15 + 7) = a3;
  float v20 = (float)a3;
  *((float *)v15 + 8) = 1.0 / (float)a3;
  *((_DWORD *)v15 + 16) = a5;
  if (a6 && (int v21 = (int)(float)((float)a5 / 5000.0), *((_DWORD *)v15 + 17) = v21, v21 > 0))
  {
    if (v21 < 7) {
      goto LABEL_11;
    }
    int v22 = 6;
  }
  else
  {
    int v22 = 1;
  }
  *((_DWORD *)v15 + 17) = v22;
LABEL_11:
  float v23 = 0.0;
  float v24 = v20 / (float)a5;
  if (a5) {
    float v23 = v24 * 1000.0;
  }
  else {
    float v24 = 0.0;
  }
  *((float *)v15 + 5) = v24;
  *((float *)v15 + 6) = v23;
  *((_DWORD *)v15 + 9) = a3 >> 1;
  *((_DWORD *)v15 + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v18;
  *((_DWORD *)v15 + 13) = a4 * a3;
  *((_DWORD *)v15 + 14) = v19 * v18;
  *((_DWORD *)v15 + 15) = v19 * a3;
  *((_DWORD *)v15 + 24) = 0;
  float v25 = powf((float)(1.0 / (float)((float)a2 * -3.0)) + 1.0, v20);
  v16[22] = 1.0 / (float)v17;
  v16[23] = v25;
  *((_DWORD *)v16 + 25) = a7;
  *((_DWORD *)v16 + 26) = a8;
  *((_DWORD *)v16 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v17;
  v16[21] = 1.0;
  *((_DWORD *)v16 + 18) = a4 * a3 + v17;
  MultiRadixRealFFT_Create();
}

void dft_v5::dftGenericAnalysis2ndHalf(const DSPComplex *a1, float *__C, float *a3, uint64_t a4, int a5)
{
  int v9 = *(_DWORD *)(a4 + 36);
  vDSP_Length v10 = v9;
  if (a5) {
    uint64_t v11 = *(unsigned int *)(a4 + 36);
  }
  else {
    uint64_t v11 = 0;
  }
  vDSP_vclr(__C, 1, 2 * v9);
  vDSP_vclr(a3, 1, 2 * v10);
  v14.realp = &__C[v11];
  v14.imagp = &a3[v11];
  vDSP_ctoz(a1, 2, &v14, 1, v10);
  v14.realp = __C;
  v14.imagp = a3;
  uint64_t v13 = *(MultiRadixRealFFT **)(a4 + 8);
  if (v13) {
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v14, 1, v12);
  }
  vDSP_vsmul(__C, 1, (const float *)(a4 + 88), __C, 1, *(int *)(a4 + 16));
  vDSP_vsmul(a3, 1, (const float *)(a4 + 88), a3, 1, *(int *)(a4 + 16));
}

void dft_v5::dftGenericAnalysis2ndHalf_dsc(const void *a1, const void *a2, float *__C, float *a4, int *a5)
{
  int v10 = *a5 >> 2;
  vDSP_Length v11 = (uint64_t)*a5 >> 2;
  vDSP_vclr(__C, 1, v11);
  vDSP_vclr(a4, 1, v11);
  memcpy(&__C[v10], a1, 4 * v10);
  memcpy(&a4[v10], a2, 4 * v10);
  v15.realp = __C;
  v15.imagp = a4;
  uint64_t v13 = (MultiRadixRealFFT *)*((void *)a5 + 1);
  if (v13) {
    MultiRadixRealFFT::RealInPlaceTransform(v13, &v15, 1, v12);
  }
  vDSP_vsmul(__C, 1, (const float *)a5 + 22, __C, 1, (uint64_t)*a5 >> 1);
  vDSP_Length v14 = (uint64_t)*a5 >> 1;

  vDSP_vsmul(a4, 1, (const float *)a5 + 22, a4, 1, v14);
}

void dft_v5::dftSynthesis(float *__C, float *a2, uint64_t a3)
{
  float v4 = *(float *)(a3 + 84);
  float __B = v4;
  v8.realp = __C;
  v8.imagp = a2;
  if (v4 != 1.0)
  {
    vDSP_vsmul(__C, 1, &__B, __C, 1, *(int *)(a3 + 16));
    vDSP_vsmul(a2, 1, &__B, a2, 1, *(int *)(a3 + 16));
  }
  CFStringRef v6 = *(MultiRadixRealFFT **)(a3 + 8);
  if (v6) {
    MultiRadixRealFFT::RealInPlaceTransform(v6, &v8, -1, v4);
  }
}

uint64_t AUSM::RoomCongruence::Processor::computeAverageRT60(uint64_t *a1, void *a2, float *a3, float *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a4 == a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v12 = getAUSMV2Log(void)::gLog;
    float v10 = 0.0;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t *)*a1;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "computeAverageRT60";
    uint64_t v13 = "[%s|%s] The center freq. array is empty. Returning empty optional.";
    goto LABEL_27;
  }
  if (a2[1] - *a2 != (char *)a4 - (char *)a3)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v12 = getAUSMV2Log(void)::gLog;
    float v10 = 0.0;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t *)*a1;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "computeAverageRT60";
    uint64_t v13 = "[%s|%s] Number of elements in the center freq. and the RT60 vectors is not equal. Returning empty optional.";
LABEL_27:
    _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x16u);
LABEL_17:
    uint64_t v11 = 0;
    return v11 & 0x100000000 | LODWORD(v10);
  }
  AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)buf, a3, a4, 500.0, 4000.0);
  CFStringRef v6 = *(void **)buf;
  if (*(void *)&buf[8] != *(void *)buf)
  {
    float v7 = 0.0;
    DSPSplitComplex v8 = *(uint64_t **)buf;
    do
    {
      uint64_t v9 = *v8++;
      float v7 = v7 + *(float *)(*a2 + 4 * v9);
    }
    while (v8 != *(uint64_t **)&buf[8]);
    float v10 = v7 / (float)(unint64_t)((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
    uint64_t v11 = 0x100000000;
    if (!*(void *)buf) {
      return v11 & 0x100000000 | LODWORD(v10);
    }
LABEL_22:
    operator delete(v6);
    return v11 & 0x100000000 | LODWORD(v10);
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  vDSP_Length v14 = getAUSMV2Log(void)::gLog;
  float v10 = 0.0;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) < 0) {
      a1 = (uint64_t *)*a1;
    }
    int v16 = 136315394;
    int v17 = a1;
    __int16 v18 = 2080;
    int v19 = "computeAverageRT60";
    _os_log_error_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "[%s|%s] No center frequencies within the provided range were found. Returning empty optional.", (uint8_t *)&v16, 0x16u);
  }
  uint64_t v11 = 0;
  if (v6) {
    goto LABEL_22;
  }
  return v11 & 0x100000000 | LODWORD(v10);
}

AUSM::RoomCongruence::RoomConfiguration *AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration(AUSM::RoomCongruence::RoomConfiguration *this, const AUSM::RoomCongruence::RoomConfiguration *a2)
{
  *(void *)this = 0;
  *((void *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  uint64_t v4 = *((void *)a2 + 6);
  *((void *)this + 7) = 0;
  *((void *)this + 6) = v4;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  *((void *)this + 12) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  return this;
}

void sub_1BB5C8238(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  CFStringRef v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  float v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration(AUSM::RoomCongruence::RoomConfiguration *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = v5;
    operator delete(v5);
  }
}

void AUSM::RoomCongruence::Processor::computeTargetMatchingParams(unsigned char *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  float v7 = a2;
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[184] = 0;
  DSPSplitComplex v8 = *(float **)a5;
  uint64_t v9 = *(float **)(a5 + 8);
  float v10 = (char *)v9 - *(void *)a5;
  float v12 = *(float **)a3;
  uint64_t v11 = *(float **)(a3 + 8);
  if (v10 != (char *)v11 - *(void *)a3)
  {
LABEL_25:
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v31 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (*((char *)v7 + 23) < 0) {
      float v7 = (uint64_t *)*v7;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "computeTargetMatchingParams";
    uint64_t v32 = "[%s|%s] Mismatched frequency resolutions between the requested room config and user data. Returning empty optional.";
LABEL_51:
    _os_log_error_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x16u);
    return;
  }
  if (v8 != v9)
  {
    DSPSplitComplex v15 = *(float **)a3;
    int v16 = *(float **)a5;
    while (*v16 == *v15)
    {
      ++v16;
      ++v15;
      if (v16 == v9) {
        goto LABEL_6;
      }
    }
    goto LABEL_25;
  }
LABEL_6:
  if (v12 == v11 || v10 == (char *)40)
  {
LABEL_11:
    uint64_t v18 = AUSM::RoomCongruence::Processor::computeAverageRT60(a2, (void *)(a5 + 24), v8, v9);
    if ((v18 & 0xFF00000000) == 0)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unint64_t v31 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return;
      }
      if (*((char *)v7 + 23) < 0) {
        float v7 = (uint64_t *)*v7;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "computeTargetMatchingParams";
      uint64_t v32 = "[%s|%s] Failed to compute the average RT60 for the preset User Data. Returning empty optional.";
      goto LABEL_51;
    }
    float v19 = *(float *)(a3 + 108);
    if (v19 <= 0.0 || (float v20 = *(float *)&v18, *(float *)&v18 <= 0.0))
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      AudioObjectID v33 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        uint64_t v154 = (uint64_t)v7;
        if (*((char *)v7 + 23) < 0) {
          uint64_t v154 = *v7;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v154;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "computeCorrectionEnvelopeExpDecayCoefficient";
        _os_log_error_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_ERROR, "[%s|%s] One or both of the input RT60 was not greater than zero. Returning empty optional.", buf, 0x16u);
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
      }
      unint64_t v31 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        return;
      }
      if (*((char *)v7 + 23) < 0) {
        float v7 = (uint64_t *)*v7;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "computeTargetMatchingParams";
      uint64_t v32 = "[%s|%s] Failed to compute the correction envelope exponential decay coefficient. Returning empty optional.";
      goto LABEL_51;
    }
    IR::getPresetDataAttributes();
    float v21 = (float)(-6.9078 / v20) + (float)(6.9078 / v19);
    *(float *)&v174[20] = v21;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    int v22 = (char *)&xmmword_1E9F7EFF8 + 8;
    float v23 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = (uint64_t)v7;
      if (*((char *)v7 + 23) < 0) {
        uint64_t v24 = *v7;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "computeTargetMatchingParams";
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(double *)uint64_t v187 = *(float *)&v174[20];
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEFAULT, "[%s|%s] Exp Decay Coeff: %f.", buf, 0x20u);
    }
    float v163 = 0;
    __dst = 0;
    uint64_t v165 = 0;
    if (v21 <= 0.0)
    {
LABEL_101:
      if (!*(unsigned char *)(a3 + 124))
      {
        LOBYTE(__p) = 0;
        LOBYTE(v185) = 0;
        float v73 = *(float *)(a3 + 116);
        if (*(float *)(a3 + 112) >= v73) {
          float v73 = *(float *)(a3 + 112);
        }
        double v74 = pow((float)(v73 * 2.5) / (*(float *)(a3 + 108) * 314.159265), 0.474999994);
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        float v75 = v74;
        uint64_t v76 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v77 = (uint64_t)v7;
          if (*((char *)v7 + 23) < 0) {
            uint64_t v77 = *v7;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v77;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "computeCriticalDistanceCorrectionGainStage";
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)uint64_t v187 = v75;
          _os_log_impl(&dword_1BB0CE000, v76, OS_LOG_TYPE_DEFAULT, "[%s|%s] Critical Distance [m]: %f", buf, 0x20u);
        }
        if (v75 <= 0.0)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          char v78 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            uint64_t v155 = (uint64_t)v7;
            if (*((char *)v7 + 23) < 0) {
              uint64_t v155 = *v7;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v155;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "computeCriticalDistanceCorrectionGainStage";
            _os_log_error_impl(&dword_1BB0CE000, v78, OS_LOG_TYPE_ERROR, "[%s|%s] The computed critical distance must be greater than 0. Returning empty optional.", buf, 0x16u);
          }
          LODWORD(__p) = 0;
          *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
          LOBYTE(v185) = 0;
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v79 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)v7 + 23) < 0) {
              float v7 = (uint64_t *)*v7;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "computeTargetMatchingParams";
            _os_log_error_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to compute the critical distance gain biquad. Returning empty optional.", buf, 0x16u);
          }
          if (v163) {
            operator delete(v163);
          }
          IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&cf);
          return;
        }
        float v112 = log10f(v75 + 2.2204e-16) * -20.0;
        if (*(float *)(a3 + 120) > v112) {
          float v112 = *(float *)(a3 + 120);
        }
        LODWORD(__p) = 1101004800;
        *((float *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v112;
        *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
        LOBYTE(v185) = 1;
        std::vector<AUSM::RoomCongruence::Biquad>::push_back[abi:ne180100](&v163, &__p);
LABEL_241:
        *(void *)&long long __p = 0;
        v182 = 0;
        float v131 = v163;
        int64_t v132 = (unsigned char *)__dst - (unsigned char *)v163;
        if (__dst == v163)
        {
          float v133 = 0;
          uint64_t v134 = 0;
        }
        else
        {
          if (v132 < 0) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          float v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v132 >> 4);
          memmove(v133, v131, v132);
          uint64_t v134 = &v133[16 * (v132 >> 4)];
        }
        int v180 = 0;
        if (((unint64_t)(v134 - v133) >> 4))
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E4F1D510]);
          __n128 v136 = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E4F1D510]);
          __n128 v137 = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E4F1D510]);
          uint64_t v138 = CFArrayCreateMutable(0, ((unint64_t)(v134 - v133) >> 4), MEMORY[0x1E4F1D510]);
          if (v133 != v134)
          {
            float v139 = v133;
            do
            {
              int v140 = *((_DWORD *)v139 + 1);
              int v141 = *((_DWORD *)v139 + 2);
              int v142 = *((_DWORD *)v139 + 3);
              LODWORD(valuePtr) = *(_DWORD *)v139;
              CFNumberRef v143 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              *(void *)buf = v143;
              if (!v143)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
              }
              CFArrayAppendValue(Mutable, v143);
              CFRelease(v143);
              LODWORD(valuePtr) = v140;
              CFNumberRef v144 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              *(void *)buf = v144;
              if (!v144)
              {
                float v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v157, "Could not construct");
              }
              CFArrayAppendValue(v136, v144);
              CFRelease(v144);
              LODWORD(valuePtr) = v141;
              CFNumberRef v145 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
              *(void *)buf = v145;
              if (!v145)
              {
                unsigned int v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v158, "Could not construct");
              }
              CFArrayAppendValue(v137, v145);
              CFRelease(v145);
              LODWORD(valuePtr) = v142;
              CFNumberRef v146 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              *(void *)buf = v146;
              if (!v146)
              {
                vDSP_Length v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v159, "Could not construct");
              }
              CFArrayAppendValue(v138, v146);
              CFRelease(v146);
              v139 += 16;
            }
            while (v139 != v134);
          }
          std::string v147 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionaryAddValue(v147, @"Frequency", Mutable);
          CFDictionaryAddValue(v147, @"Quality", v137);
          CFDictionaryAddValue(v147, @"Gain", v136);
          CFDictionaryAddValue(v147, @"Type", v138);
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v147);
          float v148 = *(void **)buf;
          int v180 = *(void **)buf;
          CFRelease(Mutable);
          CFRelease(v137);
          CFRelease(v136);
          CFRelease(v138);
        }
        else
        {
          float v148 = 0;
        }
        *(void *)&long long __p = v148;
        if (v133) {
          operator delete(v133);
        }
        v182 = v148;
        if (v148)
        {
          CFRetain(v148);
          CFRetain(v148);
          CFRetain(v148);
          unint64_t v149 = v148;
        }
        else
        {
          unint64_t v149 = 0;
        }
        CFTypeRef v150 = cf;
        if (cf) {
          CFRetain(cf);
        }
        *(void *)buf = v150;
        *(_OWORD *)&buf[8] = v167;
        *(_OWORD *)uint64_t v187 = v168;
        *(_OWORD *)&v187[16] = v169;
        v187[32] = v170;
        CFTypeRef v151 = v171;
        if (v171) {
          CFRetain(v171);
        }
        CFTypeRef v188 = v151;
        long long v189 = v172;
        CFTypeRef v152 = v173;
        if (v173) {
          CFRetain(v173);
        }
        CFTypeRef v190 = v152;
        v191[0] = *(_OWORD *)v174;
        *(_OWORD *)((char *)v191 + 9) = *(_OWORD *)&v174[9];
        CFTypeRef v153 = v175;
        if (v175) {
          CFRetain(v175);
        }
        CFTypeRef v192 = v153;
        uint64_t v193 = v176;
        int v194 = v177;
        char v195 = 1;
        if (v149) {
          CFRetain(v149);
        }
        DSPSplitComplex v196 = v149;
        if (v148) {
          CFRetain(v148);
        }
        v197 = v148;
        char v198 = 1;
        if (a1[184])
        {
          AUSM::RoomCongruence::ProcessingResult::operator=((uint64_t)a1, (uint64_t)buf);
        }
        else
        {
          std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult*>((uint64_t)a1, (uint64_t)buf);
          a1[184] = 1;
        }
        AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)buf);
        if (v148) {
          CFRelease(v148);
        }
        if (v149) {
          CFRelease(v149);
        }
        if (v148)
        {
          CFRelease(v148);
          CFRelease(v148);
        }
        if (v163) {
          operator delete(v163);
        }
        if (v175) {
          CFRelease(v175);
        }
        if (v173) {
          CFRelease(v173);
        }
        if (v171) {
          CFRelease(v171);
        }
        if (cf) {
          CFRelease(cf);
        }
        return;
      }
      float __src = 0;
      uint64_t v161 = 0;
      unint64_t v162 = 0;
      std::vector<DataTimeStamp>::reserve(&__src, 3uLL);
      long long __p = 0uLL;
      uint64_t v185 = 0;
      std::vector<float>::reserve((void **)&__p, (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      uint64_t v57 = *(float **)(a3 + 8);
      if (v57 == *(float **)a3)
      {
        CFNumberRef v72 = *(float **)(a3 + 8);
      }
      else
      {
        uint64_t v58 = 0;
        unsigned int v59 = 0;
        do
        {
          float v60 = *(float *)(*(void *)(a3 + 80) + 4 * v58);
          if (!*(unsigned char *)(a3 + 125)) {
            float v60 = v60 + *(float *)(*(void *)(a3 + 56) + 4 * v58);
          }
          float v61 = log10f((float)(v60 / *(float *)(*(void *)(a5 + 104) + 4 * v58)) + 2.2204e-16) * 10.0;
          std::string v62 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v185)
          {
            uint64_t v64 = (char *)__p;
            uint64_t v65 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v67 = (uint64_t)&v185[-__p];
            if ((uint64_t)&v185[-__p] >> 1 > v66) {
              unint64_t v66 = v67 >> 1;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              unint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v185, v68);
              std::string v62 = (char *)*((void *)&__p + 1);
              uint64_t v64 = (char *)__p;
            }
            else
            {
              unint64_t v69 = 0;
            }
            uint64_t v70 = (float *)&v69[4 * v65];
            *uint64_t v70 = v61;
            uint64_t v63 = v70 + 1;
            while (v62 != v64)
            {
              int v71 = *((_DWORD *)v62 - 1);
              v62 -= 4;
              *((_DWORD *)v70-- - freeMatrix(*((_DWORD *)this + 17), this + 1) = v71;
            }
            *(void *)&long long __p = v70;
            *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v63;
            uint64_t v185 = &v69[4 * v68];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            **((float **)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v61;
            uint64_t v63 = (float *)(v62 + 4);
          }
          *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v63;
          CFNumberRef v72 = *(float **)a3;
          uint64_t v57 = *(float **)(a3 + 8);
          uint64_t v58 = ++v59;
        }
        while (v59 < (unint64_t)(((uint64_t)v57 - *(void *)a3) >> 2));
        int v22 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
      }
      float v80 = 0.0;
      AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)&v182, v72, v57, 0.0, 500.0);
      unint64_t v81 = v182;
      uint64_t v82 = v183;
      if (v182 != v183)
      {
        uint64_t v83 = (char *)v182;
        do
        {
          uint64_t v84 = *(void *)v83;
          v83 += 8;
          float v80 = v80 + *(float *)(__p + 4 * v84);
        }
        while (v83 != v183);
      }
      AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)&v180, *(float **)a3, *(float **)(a3 + 8), 500.0, 5000.0);
      uint64_t v85 = v180;
      uint64_t v86 = v181;
      float v87 = 0.0;
      if (v180 != v181)
      {
        uint64_t v88 = (char *)v180;
        do
        {
          uint64_t v89 = *(void *)v88;
          v88 += 8;
          float v87 = v87 + *(float *)(__p + 4 * v89);
        }
        while (v88 != v181);
      }
      AUSM::RoomCongruence::findIndicesOfCenterFreqsWithinRange((uint64_t **)&valuePtr, *(float **)a3, *(float **)(a3 + 8), 5000.0, 21657.0);
      float v90 = v80 / (float)(unint64_t)((v82 - v81) >> 3);
      float v91 = v87 / (float)(unint64_t)((v86 - v85) >> 3);
      float v92 = 0.0;
      if (valuePtr == v179)
      {
        uint64_t v94 = (char *)&xmmword_1E9F7EFF8 + 8;
      }
      else
      {
        float v93 = (uint64_t *)valuePtr;
        uint64_t v94 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
        do
        {
          uint64_t v95 = *v93++;
          float v92 = v92 + *(float *)(__p + 4 * v95);
        }
        while (v93 != (uint64_t *)v179);
      }
      float v96 = v92 / (float)(unint64_t)((v179 - (unsigned char *)valuePtr) >> 3);
      if (v90 <= 12.0) {
        float v97 = v80 / (float)(unint64_t)((v82 - v81) >> 3);
      }
      else {
        float v97 = 12.0;
      }
      if (v90 >= -60.0) {
        float v98 = v97;
      }
      else {
        float v98 = -60.0;
      }
      if (v91 <= 12.0) {
        float v99 = v91;
      }
      else {
        float v99 = 12.0;
      }
      if (v91 >= -60.0) {
        float v100 = v99;
      }
      else {
        float v100 = -60.0;
      }
      if (v96 <= 12.0) {
        float v101 = v96;
      }
      else {
        float v101 = 12.0;
      }
      if (v96 >= -60.0) {
        float v102 = v101;
      }
      else {
        float v102 = -60.0;
      }
      float v103 = v98 - v100;
      unsigned int v104 = v161;
      unint64_t v105 = v162;
      if ((unint64_t)v161 >= v162)
      {
        size_t v107 = (char *)__src;
        uint64_t v108 = (v161 - (unsigned char *)__src) >> 4;
        unint64_t v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 60) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v162 - (void)__src) >> 3 > v109) {
          unint64_t v109 = (uint64_t)(v162 - (void)__src) >> 3;
        }
        if (v162 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v110 = v109;
        }
        if (v110) {
          unint64_t v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v110);
        }
        else {
          uint64_t v111 = 0;
        }
        unint64_t v113 = (float *)(v110 + 16 * v108);
        unint64_t v105 = v110 + 16 * v111;
        *unint64_t v113 = 500.0;
        v113[1] = v103;
        *((void *)v113 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x73F3504F3;
        size_t v106 = (char *)(v113 + 4);
        if (v104 != v107)
        {
          do
          {
            *((_OWORD *)v113 - freeMatrix(*((_DWORD *)this + 17), this + 1) = *((_OWORD *)v104 - 1);
            v113 -= 4;
            v104 -= 16;
          }
          while (v104 != v107);
          unsigned int v104 = v107;
        }
        float __src = v113;
        uint64_t v161 = v106;
        unint64_t v162 = v110 + 16 * v111;
        if (v104) {
          operator delete(v104);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v161 = 1140457472;
        *((float *)v104 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v103;
        *((void *)v104 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x73F3504F3;
        size_t v106 = v104 + 16;
      }
      float v114 = v102 - v100;
      if ((unint64_t)v106 < v105)
      {
        *(_DWORD *)size_t v106 = 1167867904;
        *((float *)v106 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v114;
        *((void *)v106 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x83F3504F3;
        unint64_t v115 = v106 + 16;
        goto LABEL_208;
      }
      unint64_t v116 = (char *)__src;
      uint64_t v117 = (v106 - (unsigned char *)__src) >> 4;
      unint64_t v118 = v117 + 1;
      if ((unint64_t)(v117 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v105 - (void)__src) >> 3 > v118) {
        unint64_t v118 = (uint64_t)(v105 - (void)__src) >> 3;
      }
      if (v105 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v119 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v119 = v118;
      }
      if (v119) {
        unint64_t v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v119);
      }
      else {
        uint64_t v120 = 0;
      }
      char v121 = (char *)(v119 + 16 * v117);
      unint64_t v105 = v119 + 16 * v120;
      *(_DWORD *)char v121 = 1167867904;
      *((float *)v121 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v114;
      *((void *)v121 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x83F3504F3;
      unint64_t v115 = v121 + 16;
      if (v106 == v116)
      {
        float __src = v121;
        uint64_t v161 = v121 + 16;
        unint64_t v116 = v106;
      }
      else
      {
        do
        {
          *((_OWORD *)v121 - freeMatrix(*((_DWORD *)this + 17), this + 1) = *((_OWORD *)v106 - 1);
          v121 -= 16;
          v106 -= 16;
        }
        while (v106 != v116);
        float __src = v121;
        uint64_t v161 = v115;
        if (!v116)
        {
LABEL_208:
          if ((unint64_t)v115 >= v105)
          {
            unsigned int v123 = (char *)__src;
            uint64_t v124 = (v115 - (unsigned char *)__src) >> 4;
            unint64_t v125 = v124 + 1;
            if ((unint64_t)(v124 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v105 - (void)__src) >> 3 > v125) {
              unint64_t v125 = (uint64_t)(v105 - (void)__src) >> 3;
            }
            if (v105 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v126 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v126 = v125;
            }
            if (v126) {
              unint64_t v126 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v126);
            }
            else {
              uint64_t v127 = 0;
            }
            uint64_t v128 = (char *)(v126 + 16 * v124);
            *(_DWORD *)uint64_t v128 = 1101004800;
            *((float *)v128 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v100;
            *((void *)v128 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
            int v122 = v128 + 16;
            if (v115 == v123)
            {
              float __src = v128;
              unint64_t v162 = v126 + 16 * v127;
              unsigned int v123 = v115;
            }
            else
            {
              do
              {
                *((_OWORD *)v128 - freeMatrix(*((_DWORD *)this + 17), this + 1) = *((_OWORD *)v115 - 1);
                v128 -= 16;
                v115 -= 16;
              }
              while (v115 != v123);
              float __src = v128;
              unint64_t v162 = v126 + 16 * v127;
              if (!v123) {
                goto LABEL_225;
              }
            }
            operator delete(v123);
          }
          else
          {
            *(_DWORD *)unint64_t v115 = 1101004800;
            *((float *)v115 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v100;
            *((void *)v115 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
            int v122 = v115 + 16;
          }
LABEL_225:
          uint64_t v161 = v122;
          if (*((void *)v94 + 271) != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          long long v129 = *((void *)v22 + 270);
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)v7 + 23) < 0) {
              float v7 = (uint64_t *)*v7;
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "computeSpectralMatchingCorrectionBiquads";
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(double *)uint64_t v187 = v98;
            *(_WORD *)&v187[8] = 2048;
            *(double *)&v187[10] = v100;
            *(_WORD *)&v187[18] = 2048;
            *(double *)&v187[20] = v102;
            _os_log_impl(&dword_1BB0CE000, v129, OS_LOG_TYPE_DEFAULT, "[%s|%s] Spectral matching gains [dB]: LG: %f, MG: %f, HG: %f.", buf, 0x34u);
          }
          if (valuePtr) {
            operator delete(valuePtr);
          }
          if (v180) {
            operator delete(v180);
          }
          if (v182) {
            operator delete(v182);
          }
          if ((void)__p)
          {
            *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = __p;
            operator delete((void *)__p);
          }
          float v130 = __src;
          std::vector<AUSM::RoomCongruence::Biquad>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AUSM::RoomCongruence::Biquad*>,std::__wrap_iter<AUSM::RoomCongruence::Biquad*>>((uint64_t)&v163, (char *)__dst, (char *)__src, v122, (v122 - (unsigned char *)__src) >> 4);
          if (v130) {
            operator delete(v130);
          }
          goto LABEL_241;
        }
      }
      operator delete(v116);
      goto LABEL_208;
    }
    long long __p = 0uLL;
    uint64_t v185 = 0;
    std::vector<DataTimeStamp>::reserve((void **)&__p, 2uLL);
    switch(a4)
    {
      case '4':
        float v28 = *(float *)(a3 + 108);
        float v26 = (float)(expf(v28 * -4.0) * 180.0) + 170.0;
        float v27 = (float)(11.5 - v28) * log10f(1.0 / v28);
        float v30 = 6000.0;
        float v29 = 2.8;
        break;
      case '5':
        float v34 = *(float *)(a3 + 108);
        float v26 = (float)(expf(v34 * -5.0) * 150.0) + 175.0;
        float v27 = (float)((float)(v34 * -5.0) + 12.8) * log10f(1.4 / v34);
        float v29 = 3.0;
        float v30 = 7000.0;
        float v28 = v34 / 1.4;
        break;
      case '6':
        float v25 = *(float *)(a3 + 108);
        float v26 = (float)(expf(v25 * -4.0) * 140.0) + 195.0;
        float v27 = (float)((float)(v25 * -3.8) + 11.2) * log10f(2.0 / v25);
        float v28 = v25 * 0.5;
        float v29 = 2.5;
        float v30 = 7000.0;
        break;
      default:
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unint64_t v43 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          uint64_t v44 = (uint64_t)v7;
          if (*((char *)v7 + 23) < 0) {
            uint64_t v44 = *v7;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v44;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "computeReflatteningCorrectionBiquads";
          _os_log_error_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_ERROR, "[%s|%s] The selected closest preset is not supported. Returning empty vector.", buf, 0x16u);
        }
        goto LABEL_99;
    }
    uint64_t v35 = *((void *)&__p + 1);
    unint64_t v36 = (unint64_t)v185;
    if (*((void *)&__p + 1) >= (unint64_t)v185)
    {
      uint64_t v38 = __p;
      uint64_t v39 = (uint64_t)(*((void *)&__p + 1) - __p) >> 4;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)&v185[-__p] >> 3 > v40) {
        unint64_t v40 = (uint64_t)&v185[-__p] >> 3;
      }
      if ((unint64_t)&v185[-__p] >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41) {
        unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v41);
      }
      else {
        uint64_t v42 = 0;
      }
      unint64_t v45 = v41 + 16 * v39;
      unint64_t v36 = v41 + 16 * v42;
      *(float *)unint64_t v45 = v26;
      *(float *)(v45 + 4) = v27;
      *(void *)(v45 + 8) = 0x83F333333;
      uint64_t v37 = (float *)(v45 + 16);
      if (v35 != v38)
      {
        do
        {
          *(_OWORD *)(v45 - 16) = *(_OWORD *)(v35 - 16);
          v45 -= 16;
          v35 -= 16;
        }
        while (v35 != v38);
        uint64_t v35 = v38;
      }
      *(void *)&long long __p = v45;
      *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v37;
      if (v35) {
        operator delete((void *)v35);
      }
    }
    else
    {
      **((float **)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v26;
      *(float *)(v35 + 4) = v27;
      *(void *)(v35 + 8) = 0x83F333333;
      uint64_t v37 = (float *)(v35 + 16);
    }
    float v46 = (float)(v28 + -1.0) * v29;
    if ((unint64_t)v37 >= v36)
    {
      uint64_t v48 = (float *)__p;
      uint64_t v49 = (uint64_t)((uint64_t)v37 - __p) >> 4;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v36 - __p) >> 3 > v50) {
        unint64_t v50 = (uint64_t)(v36 - __p) >> 3;
      }
      if (v36 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      if (v51) {
        unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v51);
      }
      else {
        uint64_t v52 = 0;
      }
      unint64_t v53 = v51 + 16 * v49;
      *(float *)unint64_t v53 = v30;
      *(float *)(v53 + 4) = v46;
      *(void *)(v53 + 8) = 0x83F19999ALL;
      uint64_t v47 = (float *)(v53 + 16);
      if (v37 == v48)
      {
        *(void *)&long long __p = v53;
        uint64_t v185 = (char *)(v51 + 16 * v52);
        uint64_t v48 = v37;
      }
      else
      {
        do
        {
          *(_OWORD *)(v53 - 16) = *((_OWORD *)v37 - 1);
          v53 -= 16;
          v37 -= 4;
        }
        while (v37 != v48);
        *(void *)&long long __p = v53;
        uint64_t v185 = (char *)(v51 + 16 * v52);
        if (!v48) {
          goto LABEL_93;
        }
      }
      operator delete(v48);
    }
    else
    {
      float *v37 = v30;
      v37[1] = v46;
      *((void *)v37 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x83F19999ALL;
      uint64_t v47 = v37 + 4;
    }
LABEL_93:
    *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v47;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v54 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = (uint64_t)v7;
      if (*((char *)v7 + 23) < 0) {
        uint64_t v55 = *v7;
      }
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = v55;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "computeReflatteningCorrectionBiquads";
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(double *)uint64_t v187 = v26;
      *(_WORD *)&v187[8] = 2048;
      *(double *)&v187[10] = v27;
      *(_WORD *)&v187[18] = 2048;
      *(double *)&v187[20] = v30;
      *(_WORD *)&v187[28] = 2048;
      *(double *)&v187[30] = v46;
      _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_DEFAULT, "[%s|%s] Reflattening Biquads: Biquad A: freq = %f [Hz], gain = %f [dB], Biquad B: freq = %f, gain = %f.", buf, 0x3Eu);
    }
LABEL_99:
    float v56 = (void *)__p;
    std::vector<AUSM::RoomCongruence::Biquad>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AUSM::RoomCongruence::Biquad*>,std::__wrap_iter<AUSM::RoomCongruence::Biquad*>>((uint64_t)&v163, (char *)__dst, (char *)__p, *((char **)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 4);
    if (v56) {
      operator delete(v56);
    }
    goto LABEL_101;
  }
  int v17 = (float *)&AUSM::RoomCongruence::kOctaveBandFrequencies;
  while (*v12 == *v17)
  {
    ++v12;
    ++v17;
    if (v12 == v11) {
      goto LABEL_11;
    }
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unint64_t v31 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)v7 + 23) < 0) {
      float v7 = (uint64_t *)*v7;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "computeTargetMatchingParams";
    uint64_t v32 = "[%s|%s] only supporting octave band resolution. Returning empty optional.";
    goto LABEL_51;
  }
}

void sub_1BB5C9A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47)
{
  if (__p) {
    operator delete(__p);
  }
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a16);
  if (*((unsigned char *)v47 + 184)) {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(v47);
  }
  _Unwind_Resume(a1);
}

void std::vector<AUSM::RoomCongruence::Biquad>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AUSM::RoomCongruence::Biquad*>,std::__wrap_iter<AUSM::RoomCongruence::Biquad*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  CFStringRef v6 = __src;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (a5 > (uint64_t)(v9 - v10) >> 4)
  {
    uint64_t v11 = *(char **)a1;
    unint64_t v12 = a5 + ((uint64_t)(v10 - *(void *)a1) >> 4);
    if (v12 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (__dst - v11) >> 4;
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 3 > v12) {
      unint64_t v12 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v12;
    }
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    float v26 = (_OWORD *)(v15 + 16 * v13);
    float v27 = (char *)&v26[a5];
    uint64_t v28 = 16 * a5;
    float v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v6;
      v6 += 16;
      *v29++ = v30;
      v28 -= 16;
    }
    while (v28);
    unint64_t v31 = *(char **)a1;
    if (*(char **)a1 == __dst)
    {
      AudioObjectID v33 = v26;
    }
    else
    {
      uint64_t v32 = __dst;
      do
      {
        AudioObjectID v33 = v26 - 1;
        *(v26 - freeMatrix(*((_DWORD *)this + 17), this + 1) = *((_OWORD *)v32 - 1);
        v32 -= 16;
        --v26;
      }
      while (v32 != v31);
    }
    unint64_t v34 = v15 + 16 * v16;
    uint64_t v35 = *(unsigned char **)(a1 + 8);
    uint64_t v36 = v35 - __dst;
    if (v35 != __dst) {
      memmove(v27, __dst, v35 - __dst);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v33;
    *(void *)(a1 + 8) = &v27[v36];
    *(void *)(a1 + 16) = v34;
    if (v37)
    {
      operator delete(v37);
    }
    return;
  }
  uint64_t v17 = v10 - (void)__dst;
  uint64_t v18 = (uint64_t)(v10 - (void)__dst) >> 4;
  if (v18 >= a5)
  {
    float v19 = &__src[16 * a5];
    float v21 = *(char **)(a1 + 8);
LABEL_17:
    int v22 = &__dst[16 * a5];
    float v23 = &v21[-16 * a5];
    uint64_t v24 = v21;
    if ((unint64_t)v23 < v10)
    {
      uint64_t v24 = v21;
      do
      {
        long long v25 = *(_OWORD *)v23;
        v23 += 16;
        *(_OWORD *)uint64_t v24 = v25;
        v24 += 16;
      }
      while ((unint64_t)v23 < v10);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v21[-16 * ((v21 - v22) >> 4)], __dst, v21 - v22);
    }
    if (v19 != v6)
    {
      memmove(__dst, v6, v19 - v6);
    }
    return;
  }
  float v19 = &__src[16 * v18];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  }
  float v21 = (char *)(v10 + v20);
  *(void *)(a1 + 8) = v10 + v20;
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

void std::vector<AUSM::RoomCongruence::Biquad>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  int v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 4;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - (void)*a1;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = (_OWORD *)(v10 + 16 * v7);
    unint64_t v13 = v10 + 16 * v11;
    *unint64_t v12 = *a2;
    CFStringRef v6 = v12 + 1;
    unint64_t v15 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        *--unint64_t v12 = *((_OWORD *)v14 - 1);
        v14 -= 16;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    _OWORD *v5 = *a2;
    CFStringRef v6 = v5 + 1;
  }
  a1[1] = v6;
}

uint64_t AUSM::RoomCongruence::ProcessingResult::operator=(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<IR::IRDataAttributes,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<IR::IRDataAttributes,false> const&>((IR::IRDataAttributes *)a1, a2);
  unint64_t v4 = *(const void **)(a1 + 160);
  int v5 = *(const void **)(a2 + 160);
  *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v6 = *(const void **)(a1 + 168);
  uint64_t v7 = *(const void **)(a2 + 168);
  *(void *)(a1 + 168) = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult*>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
  uint64_t v4 = *(void *)(a2 + 160);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a2 + 160));
  }
  *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
  uint64_t v5 = *(void *)(a2 + 168);
  if (v5) {
    CFRetain(*(CFTypeRef *)(a2 + 168));
  }
  *(void *)(a1 + 168) = v5;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

void std::__optional_storage_base<IR::IRDataAttributes,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<IR::IRDataAttributes,false> const&>(IR::IRDataAttributes *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*((unsigned char *)a1 + 152))
    {
      IR::IRDataAttributes::operator=((uint64_t)a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 152))
  {
    IR::IRDataAttributes::~IRDataAttributes(a1);
    *(unsigned char *)(v2 + 152) = 0;
  }
  else
  {
    *(unsigned char *)(IR::IRDataAttributes::IRDataAttributes((uint64_t)a1, a2) + 152) = 1;
  }
}

void AUSM::RoomCongruence::Processor::process(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3 = a2;
  v276[1] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 158))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v31 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v3 = *(void *)v3;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "process";
      _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEFAULT, "[%s|%s] Room Congruence is turned off. Returning a valid result with an indicator of the feature being turned off.", buf, 0x16u);
    }
    buf[0] = 0;
    char v255 = 0;
    uint64_t v257 = 0;
    uint64_t v256 = 0;
    char v258 = 0;
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 152) = 0;
    *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    *(void *)(a1 + 168) = 0;
    *(unsigned char *)(a1 + 176) = 0;
    *(unsigned char *)(a1 + 184) = 1;
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)buf);
    return;
  }
  uint64_t v220 = a2 + 272;
  BOOL v6 = AUSM::RoomCongruence::TuningParameters::operator==(a2 + 272, a2 + 128);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (v6 && *(unsigned char *)(v3 + 496))
  {
    std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult const&,AUSM::RoomCongruence::ProcessingResult*>(a1, v3 + 312);
    *(unsigned char *)(a1 + 184) = 1;
  }
  CFTypeRef v7 = *a3;
  if (!*a3)
  {
    CFTypeRef cf = 0;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    AudioObjectID v33 = "[Room Congruence] %s: Room configuration invalid - underlying CF object is nil.";
    goto LABEL_65;
  }
  CFRetain(*a3);
  CFTypeRef cf = v7;
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, @"CenterFreqs"))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    AudioObjectID v33 = "[Room Congruence] %s: Room configuration invalid - missing center frequencies.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, @"RT60"))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    AudioObjectID v33 = "[Room Congruence] %s: Room configuration invalid - missing RT60 targets.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, @"RoomSurface"))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    AudioObjectID v33 = "[Room Congruence] %s: Room configuration invalid - missing room surface area.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, @"RoomVolume"))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    AudioObjectID v33 = "[Room Congruence] %s: Room configuration invalid - missing room volume.";
    goto LABEL_65;
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v7, @"EarlyRoomEnergy"))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    AudioObjectID v33 = "[Room Congruence] %s: Room configuration invalid - missing early reflections energy.";
    goto LABEL_65;
  }
  unint64_t v8 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
  if (!applesauce::CF::details::has_key<__CFString const* const&>(*v8, @"LateRoomEnergy"))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v32 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "isRoomConfigurationDictionaryStructurallyValid";
    AudioObjectID v33 = "[Room Congruence] %s: Room configuration invalid - missing late reverb energy.";
LABEL_65:
    _os_log_error_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_ERROR, v33, buf, 0xCu);
LABEL_66:
    char v30 = 0;
    goto LABEL_67;
  }
  uint64_t v9 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(buf, *v9, @"CenterFreqs");
  if (!buf[8])
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v109 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_243;
    }
    *(_DWORD *)v262 = 136315138;
    *(void *)&v262[4] = "isRoomConfigurationDictionaryStructurallyValid";
    unint64_t v110 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the center fre"
           "quencies value in the dictionary.";
    goto LABEL_242;
  }
  unint64_t v10 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(buf);
  CFArrayRef size = applesauce::CF::ArrayRef_proxy::get_size(*v10);
  if (!size)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v109 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_243;
    }
    *(_DWORD *)v262 = 136315138;
    *(void *)&v262[4] = "isRoomConfigurationDictionaryStructurallyValid";
    unint64_t v110 = "[Room Congruence] %s: Room configuration invalid - the center frequency array is empty.";
    goto LABEL_242;
  }
  CFArrayRef v12 = size;
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v245, *(CFTypeRef *)buf);
  unsigned __int8 v13 = AUSM::RoomCongruence::isArrayOf<float>(v245);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&v245);
  if (v13)
  {
    uint64_t v14 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v262, *v14, @"RT60");
    if (v262[8])
    {
      unint64_t v15 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v262);
      CFArrayRef v16 = applesauce::CF::ArrayRef_proxy::get_size(*v15);
      if (v16)
      {
        CFArrayRef v215 = v16;
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v244, *(CFTypeRef *)v262);
        unsigned __int8 v17 = AUSM::RoomCongruence::isArrayOf<float>(v244);
        applesauce::CF::ArrayRef::~ArrayRef((const void **)&v244);
        if (v17)
        {
          uint64_t v18 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cf);
          if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v18, @"RoomVolume") & 0xFF00000000) != 0)
          {
            float v19 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cf);
            if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v19, @"RoomSurface") & 0xFF00000000) != 0)
            {
              v217 = (AUSM::RoomCongruence::ProcessingResult *)a1;
              int64_t v20 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v260, *v20, @"EarlyRoomEnergy");
              if (BYTE8(v260[0]))
              {
                float v21 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v260);
                CFArrayRef v22 = applesauce::CF::ArrayRef_proxy::get_size(*v21);
                if (v22)
                {
                  CFArrayRef v23 = v22;
                  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v243, *(CFTypeRef *)&v260[0]);
                  unsigned __int8 v24 = AUSM::RoomCongruence::isArrayOf<float>(v243);
                  applesauce::CF::ArrayRef::~ArrayRef((const void **)&v243);
                  if (v24)
                  {
                    long long v25 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&cf);
                    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&__p, *v25, @"LateRoomEnergy");
                    if (BYTE8(__p))
                    {
                      float v26 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&__p);
                      CFArrayRef v27 = applesauce::CF::ArrayRef_proxy::get_size(*v26);
                      if (v27)
                      {
                        CFArrayRef v28 = v27;
                        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v242, (CFTypeRef)__p);
                        unsigned __int8 v29 = AUSM::RoomCongruence::isArrayOf<float>(v242);
                        applesauce::CF::ArrayRef::~ArrayRef((const void **)&v242);
                        if (v29)
                        {
                          if (v12 == v215 && v215 == v23 && v23 == v28)
                          {
                            char v30 = 1;
LABEL_495:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
                            goto LABEL_451;
                          }
                          if (getAUSMV2Log(void)::onceToken != -1) {
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                          }
                          int v194 = getAUSMV2Log(void)::gLog;
                          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          {
LABEL_494:
                            char v30 = 0;
                            goto LABEL_495;
                          }
                          *(_DWORD *)v269 = 136315138;
                          *(void *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                          char v195 = "[Room Congruence] %s: Room configuration invalid - center frequencies, rt60, early refl"
                                 "ections energy and late reverb energy arrays should have the same number of elements.";
                        }
                        else
                        {
                          if (getAUSMV2Log(void)::onceToken != -1) {
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                          }
                          int v194 = getAUSMV2Log(void)::gLog;
                          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
                            goto LABEL_494;
                          }
                          *(_DWORD *)v269 = 136315138;
                          *(void *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                          char v195 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual "
                                 "type of the late reverb energy values in the array - must be float.";
                        }
                      }
                      else
                      {
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        int v194 = getAUSMV2Log(void)::gLog;
                        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_494;
                        }
                        *(_DWORD *)v269 = 136315138;
                        *(void *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                        char v195 = "[Room Congruence] %s: Room configuration invalid - the late reverb energy array is empty.";
                      }
                    }
                    else
                    {
                      if (getAUSMV2Log(void)::onceToken != -1) {
                        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                      }
                      int v194 = getAUSMV2Log(void)::gLog;
                      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_494;
                      }
                      *(_DWORD *)v269 = 136315138;
                      *(void *)&v269[4] = "isRoomConfigurationDictionaryStructurallyValid";
                      char v195 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type"
                             " of the late reverb energy value in the dictionary.";
                    }
                    _os_log_error_impl(&dword_1BB0CE000, v194, OS_LOG_TYPE_ERROR, v195, v269, 0xCu);
                    goto LABEL_494;
                  }
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  unint64_t v125 = getAUSMV2Log(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                  {
LABEL_450:
                    char v30 = 0;
LABEL_451:
                    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v260);
                    a1 = (uint64_t)v217;
                    goto LABEL_263;
                  }
                  LODWORD(__p) = 136315138;
                  *(void *)((char *)&__p + 4) = "isRoomConfigurationDictionaryStructurallyValid";
                  unint64_t v126 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of "
                         "the early reflections energy values in the array - must be float.";
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  unint64_t v125 = getAUSMV2Log(void)::gLog;
                  if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_450;
                  }
                  LODWORD(__p) = 136315138;
                  *(void *)((char *)&__p + 4) = "isRoomConfigurationDictionaryStructurallyValid";
                  unint64_t v126 = "[Room Congruence] %s: Room configuration invalid - the early reflection energy array is empty.";
                }
              }
              else
              {
                if (getAUSMV2Log(void)::onceToken != -1) {
                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                }
                unint64_t v125 = getAUSMV2Log(void)::gLog;
                if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_450;
                }
                LODWORD(__p) = 136315138;
                *(void *)((char *)&__p + 4) = "isRoomConfigurationDictionaryStructurallyValid";
                unint64_t v126 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of th"
                       "e early reflections energy value in the dictionary.";
              }
              _os_log_error_impl(&dword_1BB0CE000, v125, OS_LOG_TYPE_ERROR, v126, (uint8_t *)&__p, 0xCu);
              goto LABEL_450;
            }
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unsigned int v123 = getAUSMV2Log(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
              goto LABEL_277;
            }
            LODWORD(v260[0]) = 136315138;
            *(void *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
            uint64_t v124 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the ro"
                   "om surface area value in the dictionary.";
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            unsigned int v123 = getAUSMV2Log(void)::gLog;
            if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
              goto LABEL_277;
            }
            LODWORD(v260[0]) = 136315138;
            *(void *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
            uint64_t v124 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the ro"
                   "om volume value in the dictionary.";
          }
          _os_log_error_impl(&dword_1BB0CE000, v123, OS_LOG_TYPE_ERROR, v124, (uint8_t *)v260, 0xCu);
LABEL_277:
          char v30 = 0;
          goto LABEL_263;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unint64_t v118 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
LABEL_262:
          char v30 = 0;
LABEL_263:
          std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v262);
          goto LABEL_244;
        }
        LODWORD(v260[0]) = 136315138;
        *(void *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
        unint64_t v119 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the RT60 v"
               "alues in the array - must be float.";
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        unint64_t v118 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_262;
        }
        LODWORD(v260[0]) = 136315138;
        *(void *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
        unint64_t v119 = "[Room Congruence] %s: Room configuration invalid - the RT60 array is empty.";
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      unint64_t v118 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_262;
      }
      LODWORD(v260[0]) = 136315138;
      *(void *)((char *)v260 + 4) = "isRoomConfigurationDictionaryStructurallyValid";
      unint64_t v119 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the RT60 val"
             "ue in the dictionary.";
    }
    _os_log_error_impl(&dword_1BB0CE000, v118, OS_LOG_TYPE_ERROR, v119, (uint8_t *)v260, 0xCu);
    goto LABEL_262;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unint64_t v109 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v262 = 136315138;
    *(void *)&v262[4] = "isRoomConfigurationDictionaryStructurallyValid";
    unint64_t v110 = "[Room Congruence] %s: Room configuration invalid - mismatch between queried and actual type of the center fre"
           "quency values in the array - must be float.";
LABEL_242:
    _os_log_error_impl(&dword_1BB0CE000, v109, OS_LOG_TYPE_ERROR, v110, v262, 0xCu);
  }
LABEL_243:
  char v30 = 0;
LABEL_244:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
LABEL_67:
  if (cf) {
    CFRelease(cf);
  }
  if ((v30 & 1) == 0)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v43 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v3 = *(void *)v3;
      }
      *(double *)&uint64_t v44 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "process";
      if (v6) {
        *(double *)&uint64_t v44 = COERCE_DOUBLE("cached data from last valid room");
      }
      __int16 v247 = 2080;
      float __src = v44;
      _os_log_error_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_ERROR, "[%s|%s] Room configuration dictionary structurally invalid. Returning %s.", buf, 0x20u);
    }
    return;
  }
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v240, (CFDictionaryRef)*a3, @"CenterFreqs");
  if (!*a3)
  {
    v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v206, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v239, (CFDictionaryRef)*a3, @"RT60");
  if (!*a3)
  {
    v207 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v207, "Could not construct");
  }
  float v34 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)*a3, @"RoomVolume");
  if (!*a3)
  {
    v208 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v208, "Could not construct");
  }
  float v35 = v34;
  float v36 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)*a3, @"RoomSurface");
  if (!*a3)
  {
    v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v209, "Could not construct");
  }
  float v37 = v36;
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v238, (CFDictionaryRef)*a3, @"EarlyRoomEnergy");
  if (!*a3)
  {
    v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v210, "Could not construct");
  }
  applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v237, (CFDictionaryRef)*a3, @"LateRoomEnergy");
  v276[0] = 0;
  long long v274 = 0u;
  long long v275 = 0u;
  long long v272 = 0u;
  long long v273 = 0u;
  long long __p = 0u;
  long long v271 = 0u;
  CFArrayRef v38 = (const __CFArray *)v240;
  if (v240) {
    CFRetain(v240);
  }
  v219 = (_OWORD *)(v3 + 128);
  if (AUSM::RoomCongruence::isArrayOf<float>(v38))
  {
    CFArrayRef v39 = (const __CFArray *)v239;
    if (v239) {
      CFRetain(v239);
    }
    if (AUSM::RoomCongruence::isArrayOf<float>(v39))
    {
      CFArrayRef v40 = (const __CFArray *)v238;
      if (v238) {
        CFRetain(v238);
      }
      if (AUSM::RoomCongruence::isArrayOf<float>(v40))
      {
        CFArrayRef v41 = (const __CFArray *)v237;
        if (v237) {
          CFRetain(v237);
        }
        char v42 = AUSM::RoomCongruence::isArrayOf<float>(v41) ^ 1;
        if (v41) {
          CFRelease(v41);
        }
      }
      else
      {
        char v42 = 1;
      }
      if (v40) {
        CFRelease(v40);
      }
    }
    else
    {
      char v42 = 1;
    }
    if (v39) {
      CFRelease(v39);
    }
  }
  else
  {
    char v42 = 1;
  }
  if (v38) {
    CFRelease(v38);
  }
  if ((v42 & 1) == 0)
  {
    if (!v240)
    {
      v211 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v211, "Could not construct");
    }
    CFIndex Count = CFArrayGetCount((CFArrayRef)v240);
    if (!v239)
    {
      v212 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v212, "Could not construct");
    }
    CFIndex v46 = CFArrayGetCount((CFArrayRef)v239);
    if (!v238)
    {
      v213 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v213, "Could not construct");
    }
    CFIndex v47 = CFArrayGetCount((CFArrayRef)v238);
    if (!v237)
    {
      v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v214, "Could not construct");
    }
    CFIndex v48 = CFArrayGetCount((CFArrayRef)v237);
    if (Count == v46 && v46 == v47 && v47 == v48)
    {
      v218 = (AUSM::RoomCongruence::ProcessingResult *)a1;
      std::vector<float>::reserve((void **)&__p, Count);
      std::vector<float>::reserve((void **)&v271 + 1, Count);
      std::vector<float>::reserve((void **)&v273 + 1, Count);
      std::vector<float>::reserve((void **)&v275, Count);
      if (Count)
      {
        for (unint64_t i = 0; i != Count; ++i)
        {
          if (!v240)
          {
            v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v201, "Could not construct");
          }
          float v50 = applesauce::CF::details::at_to<float>((const __CFArray *)v240, i);
          float v51 = v50;
          uint64_t v52 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v271)
          {
            uint64_t v54 = (char *)__p;
            uint64_t v55 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
            unint64_t v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 62) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v57 = v271 - __p;
            if ((uint64_t)(v271 - __p) >> 1 > v56) {
              unint64_t v56 = v57 >> 1;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v56;
            }
            if (v58)
            {
              unsigned int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v271, v58);
              uint64_t v52 = (char *)*((void *)&__p + 1);
              uint64_t v54 = (char *)__p;
            }
            else
            {
              unsigned int v59 = 0;
            }
            float v60 = &v59[4 * v55];
            *(float *)float v60 = v51;
            unint64_t v53 = v60 + 4;
            while (v52 != v54)
            {
              int v61 = *((_DWORD *)v52 - 1);
              v52 -= 4;
              *((_DWORD *)v60 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v61;
              v60 -= 4;
            }
            *(void *)&long long __p = v60;
            *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v53;
            *(void *)&long long v271 = &v59[4 * v58];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            **((float **)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v50;
            unint64_t v53 = v52 + 4;
          }
          *((void *)&__p + freeMatrix(*((_DWORD *)this + 17), this + 1) = v53;
          if (!v239)
          {
            v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v202, "Could not construct");
          }
          float v62 = applesauce::CF::details::at_to<float>((const __CFArray *)v239, i);
          float v63 = v62;
          uint64_t v64 = (char *)v272;
          if ((unint64_t)v272 >= *((void *)&v272 + 1))
          {
            unint64_t v66 = (char *)*((void *)&v271 + 1);
            uint64_t v67 = (uint64_t)(v272 - *((void *)&v271 + 1)) >> 2;
            unint64_t v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v69 = *((void *)&v272 + 1) - *((void *)&v271 + 1);
            if ((uint64_t)(*((void *)&v272 + 1) - *((void *)&v271 + 1)) >> 1 > v68) {
              unint64_t v68 = v69 >> 1;
            }
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v68;
            }
            if (v70)
            {
              int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v272 + 8, v70);
              uint64_t v64 = (char *)v272;
              unint64_t v66 = (char *)*((void *)&v271 + 1);
            }
            else
            {
              int v71 = 0;
            }
            CFNumberRef v72 = &v71[4 * v67];
            *(float *)CFNumberRef v72 = v63;
            uint64_t v65 = v72 + 4;
            while (v64 != v66)
            {
              int v73 = *((_DWORD *)v64 - 1);
              v64 -= 4;
              *((_DWORD *)v72 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v73;
              v72 -= 4;
            }
            *((void *)&v271 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v72;
            *(void *)&long long v272 = v65;
            *((void *)&v272 + freeMatrix(*((_DWORD *)this + 17), this + 1) = &v71[4 * v70];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            *(float *)long long v272 = v62;
            uint64_t v65 = v64 + 4;
          }
          *(void *)&long long v272 = v65;
          if (!v238)
          {
            v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v203, "Could not construct");
          }
          float v74 = applesauce::CF::details::at_to<float>((const __CFArray *)v238, i);
          float v75 = v74;
          uint64_t v76 = (char *)v274;
          if ((unint64_t)v274 >= *((void *)&v274 + 1))
          {
            char v78 = (char *)*((void *)&v273 + 1);
            uint64_t v79 = (uint64_t)(v274 - *((void *)&v273 + 1)) >> 2;
            unint64_t v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v81 = *((void *)&v274 + 1) - *((void *)&v273 + 1);
            if ((uint64_t)(*((void *)&v274 + 1) - *((void *)&v273 + 1)) >> 1 > v80) {
              unint64_t v80 = v81 >> 1;
            }
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v80;
            }
            if (v82)
            {
              uint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v274 + 8, v82);
              uint64_t v76 = (char *)v274;
              char v78 = (char *)*((void *)&v273 + 1);
            }
            else
            {
              uint64_t v83 = 0;
            }
            uint64_t v84 = &v83[4 * v79];
            *(float *)uint64_t v84 = v75;
            uint64_t v77 = v84 + 4;
            while (v76 != v78)
            {
              int v85 = *((_DWORD *)v76 - 1);
              v76 -= 4;
              *((_DWORD *)v84 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v85;
              v84 -= 4;
            }
            *((void *)&v273 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v84;
            *(void *)&long long v274 = v77;
            *((void *)&v274 + freeMatrix(*((_DWORD *)this + 17), this + 1) = &v83[4 * v82];
            if (v78) {
              operator delete(v78);
            }
          }
          else
          {
            *(float *)long long v274 = v74;
            uint64_t v77 = v76 + 4;
          }
          *(void *)&long long v274 = v77;
          if (!v237)
          {
            v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v204, "Could not construct");
          }
          float v86 = applesauce::CF::details::at_to<float>((const __CFArray *)v237, i);
          float v87 = v86;
          uint64_t v88 = (char *)*((void *)&v275 + 1);
          if (*((void *)&v275 + 1) >= v276[0])
          {
            float v90 = (char *)v275;
            uint64_t v91 = (uint64_t)(*((void *)&v275 + 1) - v275) >> 2;
            unint64_t v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 62) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v93 = v276[0] - v275;
            if ((uint64_t)(v276[0] - v275) >> 1 > v92) {
              unint64_t v92 = v93 >> 1;
            }
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v94 = v92;
            }
            if (v94)
            {
              uint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v276, v94);
              uint64_t v88 = (char *)*((void *)&v275 + 1);
              float v90 = (char *)v275;
            }
            else
            {
              uint64_t v95 = 0;
            }
            float v96 = &v95[4 * v91];
            *(float *)float v96 = v87;
            uint64_t v89 = v96 + 4;
            while (v88 != v90)
            {
              int v97 = *((_DWORD *)v88 - 1);
              v88 -= 4;
              *((_DWORD *)v96 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v97;
              v96 -= 4;
            }
            *(void *)&long long v275 = v96;
            *((void *)&v275 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v89;
            v276[0] = &v95[4 * v94];
            if (v90) {
              operator delete(v90);
            }
          }
          else
          {
            **((float **)&v275 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v86;
            uint64_t v89 = v88 + 4;
          }
          *((void *)&v275 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v89;
        }
      }
      *(void *)&long long v273 = __PAIR64__(LODWORD(v37), LODWORD(v35));
      a1 = (uint64_t)v218;
    }
  }
  if (v237) {
    CFRelease(v237);
  }
  if (v238) {
    CFRelease(v238);
  }
  if (v239) {
    CFRelease(v239);
  }
  if (v240) {
    CFRelease(v240);
  }
  if (*((void *)&__p + 1) == (void)__p
    || *(float *)&v273 <= 0.0
    || *((float *)&v273 + 1) <= 0.0
    || (unint64_t v98 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2,
        float v99 = (float *)*((void *)&v271 + 1),
        v98 != (uint64_t)(v272 - *((void *)&v271 + 1)) >> 2)
    || (float v100 = (float *)*((void *)&v273 + 1), v98 != (uint64_t)(v274 - *((void *)&v273 + 1)) >> 2)
    || (float v101 = (float *)v275, v98 != (uint64_t)(*((void *)&v275 + 1) - v275) >> 2))
  {
LABEL_216:
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    size_t v107 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v3 = *(void *)v3;
      }
      *(double *)&uint64_t v108 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "process";
      if (v6) {
        *(double *)&uint64_t v108 = COERCE_DOUBLE("cached data from last valid room");
      }
      __int16 v247 = 2080;
      float __src = v108;
      _os_log_error_impl(&dword_1BB0CE000, v107, OS_LOG_TYPE_ERROR, "[%s|%s] Room configuration logically invalid. Returning %s.", buf, 0x20u);
    }
    goto LABEL_219;
  }
  if (v98 <= 1) {
    unint64_t v98 = 1;
  }
  float v102 = (float *)__p;
  do
  {
    float v103 = *v102;
    if ((*(_DWORD *)v102 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || v103 <= 0.0
      || v103 >= 24000.0
      || (*(_DWORD *)v99 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || *v99 < 0.0
      || (*(_DWORD *)v100 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || *v100 < 0.0
      || (*(_DWORD *)v101 & 0x7FFFFFFFu) > 0x7F7FFFFF
      || *v101 < 0.0)
    {
      goto LABEL_216;
    }
    ++v101;
    ++v100;
    ++v99;
    ++v102;
    --v98;
  }
  while (v98);
  unsigned int v104 = (float *)(__p + 4);
  while (v104 != *((float **)&__p + 1))
  {
    float v106 = *(v104 - 1);
    float v105 = *v104++;
    if (v105 < v106) {
      goto LABEL_216;
    }
  }
  *(void *)v269 = v3 + 24;
  v269[8] = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v3 + 24);
  AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v228, (const AUSM::RoomCongruence::RoomConfiguration *)&__p);
  long long v111 = *(_OWORD *)(v3 + 144);
  v226[0] = *v219;
  v226[1] = v111;
  int v227 = *(_DWORD *)(v3 + 160);
  unint64_t v113 = *(float **)(v3 + 168);
  float v112 = *(float **)(v3 + 176);
  float v114 = (float *)v228[0];
  if ((char *)v112 - (char *)v113 != v228[1] - v228[0]) {
    goto LABEL_293;
  }
  while (v113 != v112)
  {
    if (*v113 != *v114) {
      goto LABEL_293;
    }
    ++v113;
    ++v114;
  }
  unint64_t v116 = *(float **)(v3 + 192);
  unint64_t v115 = *(float **)(v3 + 200);
  uint64_t v117 = v229;
  if ((char *)v115 - (char *)v116 != v230 - (void)v229) {
    goto LABEL_293;
  }
  while (v116 != v115)
  {
    if (*v116 != *v117) {
      goto LABEL_293;
    }
    ++v116;
    ++v117;
  }
  if (*(float *)(v3 + 216) != v231) {
    goto LABEL_293;
  }
  if (*(float *)(v3 + 220) != v232) {
    goto LABEL_293;
  }
  char v121 = *(float **)(v3 + 224);
  uint64_t v120 = *(float **)(v3 + 232);
  int v122 = v233;
  if ((char *)v120 - (char *)v121 != v234 - (void)v233) {
    goto LABEL_293;
  }
  while (v121 != v120)
  {
    if (*v121 != *v122) {
      goto LABEL_293;
    }
    ++v121;
    ++v122;
  }
  uint64_t v128 = *(void *)(v3 + 248);
  uint64_t v127 = *(void *)(v3 + 256);
  long long v129 = v235;
  if (v127 - v128 != v236 - (void)v235) {
    goto LABEL_293;
  }
  if (v128 == v127) {
    goto LABEL_291;
  }
  uint64_t v130 = v128 + 4;
  do
  {
    float v131 = *(float *)(v130 - 4);
    float v132 = *v129++;
    float v133 = v132;
    BOOL v134 = v131 != v132 || v130 == v127;
    v130 += 4;
  }
  while (!v134);
  if (v131 == v133)
  {
LABEL_291:
    BOOL v135 = AUSM::RoomCongruence::TuningParameters::operator==(v220, (uint64_t)v226);
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v228);
    if (v135) {
      goto LABEL_415;
    }
  }
  else
  {
LABEL_293:
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v228);
  }
  v262[0] = 0;
  char v268 = 0;
  uint64_t v136 = AUSM::RoomCongruence::Processor::computeAverageRT60((uint64_t *)v3, (void *)&v271 + 1, (float *)__p, *((float **)&__p + 1));
  float v137 = *(float *)&v136;
  if ((v136 & 0xFF00000000) != 0)
  {
    *(_DWORD *)buf = 0;
    std::vector<float>::vector(v260, (uint64_t)(v274 - *((void *)&v273 + 1)) >> 2, buf);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v138 = v137;
    float v139 = getAUSMV2Log(void)::gLog;
    BOOL v140 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
    if (v140)
    {
      uint64_t v141 = v3;
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v141 = *(void *)v3;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = v141;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "tuneTarget";
      __int16 v247 = 2048;
      *(double *)&float __src = v138;
      LOWORD(v249[0]) = 2048;
      *(double *)((char *)v249 + 2) = *(float *)&v273;
      _os_log_impl(&dword_1BB0CE000, v139, OS_LOG_TYPE_DEFAULT, "[%s|%s] From PHASE input: mid-band RT60 = %.3f s, room volume = %.1f m3", buf, 0x2Au);
    }
    char v142 = *(unsigned char *)(v3 + 157);
    int v143 = *(_DWORD *)(v3 + 160);
    if (!*(unsigned char *)(v3 + 156))
    {
      int v158 = 0;
      float v151 = *(float *)&v273;
      float v159 = v138;
      float v138 = 0.0;
      int v149 = v273;
LABEL_322:
      AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)buf, (const AUSM::RoomCongruence::RoomConfiguration *)&__p);
      *(float *)v254 = v138;
      *(float *)&v254[4] = v159;
      *(_DWORD *)&v254[8] = v149;
      *(float *)&v254[12] = v151;
      *(_DWORD *)&v254[16] = v158;
      v254[20] = v142;
      v254[21] = 1;
      *(_DWORD *)&v254[24] = v143;
      if (v268)
      {
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v262, *(char **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v263, (char *)__src, v249[0], (v249[0] - (uint64_t)__src) >> 2);
        uint64_t v264 = v249[2];
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v265, (char *)v250, v251, (v251 - (uint64_t)v250) >> 2);
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v266, (char *)v252, v253, (v253 - (uint64_t)v252) >> 2);
        v267[0] = *(_OWORD *)v254;
        *(_OWORD *)((char *)v267 + 12) = *(_OWORD *)&v254[12];
      }
      else
      {
        AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v262, (const AUSM::RoomCongruence::RoomConfiguration *)buf);
        v267[0] = *(_OWORD *)v254;
        *(_OWORD *)((char *)v267 + 12) = *(_OWORD *)&v254[12];
        char v268 = 1;
      }
      AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)buf);
LABEL_358:
      if (*(void *)&v260[0])
      {
        *((void *)&v260[0] + freeMatrix(*((_DWORD *)this + 17), this + 1) = *(void *)&v260[0];
        operator delete(*(void **)&v260[0]);
      }
      goto LABEL_360;
    }
    float v144 = *(float *)(v3 + 128);
    float v145 = *(float *)(v3 + 132);
    float v146 = *(float *)(v3 + 148);
    float v221 = *(float *)(v3 + 144);
    int v147 = *(_DWORD *)(v3 + 152);
    float v148 = *(float *)(v3 + 140);
    int v149 = v273;
    if (v148 >= *(float *)&v273) {
      float v150 = *(float *)&v273;
    }
    else {
      float v150 = *(float *)(v3 + 140);
    }
    if (*(float *)&v273 >= *(float *)(v3 + 136)) {
      float v151 = v150;
    }
    else {
      float v151 = *(float *)(v3 + 136);
    }
    unint64_t v152 = AUSM::RoomCongruence::computeIdealRt60((AUSM::RoomCongruence *)v140, v151, v144, v145);
    if (!HIDWORD(v152))
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      CFTypeRef v153 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_358;
      }
      uint64_t v154 = v3;
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v154 = *(void *)v3;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v154;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "tuneTarget";
      uint64_t v155 = "[%s|%s] Failed to compute the ideal RT60 for the given data. Returning empty optional.";
LABEL_444:
      _os_log_error_impl(&dword_1BB0CE000, v153, OS_LOG_TYPE_ERROR, v155, buf, 0x16u);
      goto LABEL_358;
    }
    float v160 = *(float *)&v152;
    int v216 = v147;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v161 = v160;
    unint64_t v162 = getAUSMV2Log(void)::gLog;
    BOOL v163 = os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT);
    if (v163)
    {
      uint64_t v164 = v3;
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v164 = *(void *)v3;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v164;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "tuneTarget";
      __int16 v247 = 2048;
      *(double *)&float __src = v161;
      _os_log_impl(&dword_1BB0CE000, v162, OS_LOG_TYPE_DEFAULT, "[%s|%s] The computed ideal RT60: %f", buf, 0x20u);
    }
    if (v138 <= 0.0)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      long long v167 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_357;
      }
      uint64_t v166 = a1;
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "warpRT60";
      long long v168 = "[Room Congruence] %s: The input RT60 to be warped must be greater than 0. Returning empty optional.";
    }
    else
    {
      float v165 = v146 * v161;
      uint64_t v166 = a1;
      if ((float)(v146 * v161) <= v161)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v167 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_357;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "warpRT60";
        long long v168 = "[Room Congruence] %s: The low cut input RT60 for warping must be lower than the high cut RT60. Returning empty optional.";
      }
      else if (v161 <= 0.0)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v167 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_357;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "warpRT60";
        long long v168 = "[Room Congruence] %s: Both low and high cut input RT60 for warping must be greater than 0. Returning empty optional.";
      }
      else
      {
        if ((float)(v221 * v161) > 0.0)
        {
          if (v161 <= v138)
          {
            if (v165 >= v138) {
              float v161 = v161
            }
                   + (float)((float)((float)((float)(v221 * v161) - v161) / (float)(v165 - v161)) * (float)(v138 - v161));
            else {
              float v161 = v221 * v161;
            }
          }
          unint64_t v196 = AUSM::RoomCongruence::computeIdealRt60((AUSM::RoomCongruence *)v163, v148, v144, v145);
          if (!HIDWORD(v196))
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            v197 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              uint64_t v198 = v3;
              if (*(char *)(v3 + 23) < 0) {
                uint64_t v198 = *(void *)v3;
              }
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = v198;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "tuneTarget";
              _os_log_error_impl(&dword_1BB0CE000, v197, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to compute upper RT60 limit.", buf, 0x16u);
            }
            goto LABEL_358;
          }
          float v159 = *(float *)&v196;
          if (v161 <= *(float *)&v196)
          {
            float v159 = v161;
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v199 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v200 = v3;
              if (*(char *)(v3 + 23) < 0) {
                uint64_t v200 = *(void *)v3;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = v200;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = "tuneTarget";
              __int16 v247 = 2048;
              *(double *)&float __src = v159;
              _os_log_impl(&dword_1BB0CE000, v199, OS_LOG_TYPE_DEFAULT, "[%s|%s] Clipping RT60 to max value: %f", buf, 0x20u);
            }
          }
          int v158 = v216;
          goto LABEL_322;
        }
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        long long v167 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
LABEL_357:
          CFTypeRef v153 = getAUSMV2Log(void)::gLog;
          if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
            goto LABEL_358;
          }
          uint64_t v192 = v3;
          if (*(char *)(v3 + 23) < 0) {
            uint64_t v192 = *(void *)v3;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v192;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "tuneTarget";
          uint64_t v155 = "[%s|%s] Failed to compute the warping result for the given tuning and input RT60 data. Returning empty optional.";
          goto LABEL_444;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "warpRT60";
        long long v168 = "[Room Congruence] %s: Both low and high cut output RT60 for warping must be greater than 0. Returning empty optional.";
      }
    }
    _os_log_error_impl(&dword_1BB0CE000, v167, OS_LOG_TYPE_ERROR, v168, buf, 0xCu);
    a1 = v166;
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    goto LABEL_357;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v156 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    uint64_t v157 = v3;
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v157 = *(void *)v3;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v157;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "tuneTarget";
    _os_log_error_impl(&dword_1BB0CE000, v156, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to compute the average RT60 for the target data. Returning empty optional.", buf, 0x16u);
  }
LABEL_360:
  if (!v268)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v172 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v3 = *(void *)v3;
      }
      *(double *)&CFTypeRef v173 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "process";
      if (v6) {
        *(double *)&CFTypeRef v173 = COERCE_DOUBLE("cached data from last valid room");
      }
      __int16 v247 = 2080;
      float __src = v173;
      _os_log_error_impl(&dword_1BB0CE000, v172, OS_LOG_TYPE_ERROR, "[%s|%s] TuneTarget failed. Returning %s.", buf, 0x20u);
    }
    goto LABEL_413;
  }
  AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v260, (const AUSM::RoomCongruence::RoomConfiguration *)v262);
  *(_OWORD *)v261 = v267[0];
  *(_OWORD *)&v261[12] = *(_OWORD *)((char *)v267 + 12);
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  long long v169 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v170 = v3;
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v170 = *(void *)v3;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = v170;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "process";
    __int16 v247 = 2048;
    *(double *)&float __src = *(float *)&v261[4];
    LOWORD(v249[0]) = 2048;
    *(double *)((char *)v249 + 2) = *(float *)&v261[12];
    _os_log_impl(&dword_1BB0CE000, v169, OS_LOG_TYPE_DEFAULT, "[%s|%s] The new target mid-band RT60: %f. The new target room volume: %f", buf, 0x2Au);
  }
  if ((*(_DWORD *)&v261[24] - 1) >= 3)
  {
    unint64_t PresetWithClosestRoomVolume = AUSM::RoomCongruence::Processor::findPresetWithClosestRoomVolume((AUSM::RoomCongruence::Processor *)v3, *(float *)&v261[12]);
    if (!HIDWORD(PresetWithClosestRoomVolume))
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v175 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_412;
      }
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v3 = *(void *)v3;
      }
      *(double *)&uint64_t v176 = COERCE_DOUBLE("empty optional");
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "process";
      if (v6) {
        *(double *)&uint64_t v176 = COERCE_DOUBLE("cached data from last valid room");
      }
      __int16 v247 = 2080;
      float __src = v176;
      int v177 = "[%s|%s] Couldn't find a matching preset. Returning %s.";
LABEL_427:
      long long v189 = v175;
      uint32_t v190 = 32;
LABEL_428:
      _os_log_error_impl(&dword_1BB0CE000, v189, OS_LOG_TYPE_ERROR, v177, buf, v190);
      goto LABEL_412;
    }
    int v171 = PresetWithClosestRoomVolume;
  }
  else
  {
    int v171 = *(_DWORD *)&v261[24] + 51;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  v178 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v179 = v3;
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v179 = *(void *)v3;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v179;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "process";
    __int16 v247 = 1024;
    LODWORD(__src) = v171;
    _os_log_impl(&dword_1BB0CE000, v178, OS_LOG_TYPE_DEFAULT, "[%s|%s] Using library room IR %d", buf, 0x1Cu);
  }
  unint64_t v180 = *(void *)(v3 + 72);
  if (!v180) {
    goto LABEL_409;
  }
  uint8x8_t v181 = (uint8x8_t)vcnt_s8((int8x8_t)v180);
  v181.i16[0] = vaddlv_u8(v181);
  if (v181.u32[0] > 1uLL)
  {
    unint64_t v182 = v171;
    if (v180 <= v171) {
      unint64_t v182 = v171 % v180;
    }
  }
  else
  {
    unint64_t v182 = (v180 - 1) & v171;
  }
  uint64_t v183 = *(uint64_t ***)(*(void *)(v3 + 64) + 8 * v182);
  if (!v183 || (v184 = *v183) == 0)
  {
LABEL_409:
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v175 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_412;
    }
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v3 = *(void *)v3;
    }
    *(double *)&CFTypeRef v188 = COERCE_DOUBLE("empty optional");
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "process";
    if (v6) {
      *(double *)&CFTypeRef v188 = COERCE_DOUBLE("cached data from last valid room");
    }
    __int16 v247 = 2080;
    float __src = v188;
    int v177 = "[%s|%s] Couldn't find user data for the selected IR preset. Returning %s.";
    goto LABEL_427;
  }
  while (1)
  {
    unint64_t v185 = v184[1];
    if (v185 == v171) {
      break;
    }
    if (v181.u32[0] > 1uLL)
    {
      if (v185 >= v180) {
        v185 %= v180;
      }
    }
    else
    {
      v185 &= v180 - 1;
    }
    if (v185 != v182) {
      goto LABEL_409;
    }
LABEL_408:
    v184 = (uint64_t *)*v184;
    if (!v184) {
      goto LABEL_409;
    }
  }
  if (*((_DWORD *)v184 + 4) != v171) {
    goto LABEL_408;
  }
  uint64_t v186 = (uint64_t)(v184 + 3);
  if (!AUSM::RoomCongruence::UserData::isValid((AUSM::RoomCongruence::UserData *)(v184 + 3)))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v175 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_412;
    }
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v3 = *(void *)v3;
    }
    *(double *)&DSPSplitComplex v191 = COERCE_DOUBLE("empty optional");
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "process";
    if (v6) {
      *(double *)&DSPSplitComplex v191 = COERCE_DOUBLE("cached data from last valid room");
    }
    __int16 v247 = 2080;
    float __src = v191;
    int v177 = "[%s|%s] Logically invalid user data retrieved. Returning %s.";
    goto LABEL_427;
  }
  AUSM::RoomCongruence::Processor::computeTargetMatchingParams(buf, (uint64_t *)v3, (uint64_t)v260, v171, v186);
  std::__optional_storage_base<AUSM::RoomCongruence::ProcessingResult,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AUSM::RoomCongruence::ProcessingResult,false>>((AUSM::RoomCongruence::ProcessingResult *)a1, (uint64_t)buf);
  if (v259) {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)buf);
  }
  if (*(unsigned char *)(a1 + 184))
  {
    AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v225, (const AUSM::RoomCongruence::RoomConfiguration *)&__p);
    long long v187 = *(_OWORD *)(v3 + 144);
    v223[0] = *v219;
    v223[1] = v187;
    int v224 = *(_DWORD *)(v3 + 160);
    if (!*(unsigned char *)(a1 + 184)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    AUSM::RoomCongruence::ProcessingResult::ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)v222, (const AUSM::RoomCongruence::ProcessingResult *)a1);
    AUSM::RoomCongruence::Cache::Cache((uint64_t)buf, (const AUSM::RoomCongruence::RoomConfiguration *)v225, v223, (uint64_t)v222);
    AUSM::RoomCongruence::Cache::operator=(v3 + 168, (uint64_t)buf);
    AUSM::RoomCongruence::Cache::~Cache((AUSM::RoomCongruence::Cache *)buf);
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::ProcessingResult *)v222);
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v225);
    goto LABEL_412;
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v193 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v3 = *(void *)v3;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "process";
    int v177 = "[%s|%s] Failed to match the parameters. Returning empty optional.";
    long long v189 = v193;
    uint32_t v190 = 22;
    goto LABEL_428;
  }
LABEL_412:
  AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v260);
LABEL_413:
  if (v268) {
    AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)v262);
  }
LABEL_415:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)v269);
LABEL_219:
  AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)&__p);
}

void sub_1BB5CCB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, AUSM::RoomCongruence::ProcessingResult *a12)
{
  if (*((unsigned char *)a12 + 184)) {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(a12);
  }
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>(applesauce::CF::ArrayRef *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const* const&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  uint64_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1BB5CCFA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AUSM::RoomCongruence::Processor::findPresetWithClosestRoomVolume(AUSM::RoomCongruence::Processor *this, float a2)
{
  if (a2 >= 0.0)
  {
    uint64_t v5 = *((void *)this + 13);
    uint64_t v6 = *((void *)this + 14);
    if (v5 == v6)
    {
      uint64_t v2 = 0;
      int v3 = 0;
      unsigned int v4 = 0;
    }
    else
    {
      uint64_t v7 = v5 + 8;
      if (v5 + 8 != v6)
      {
        float v8 = logf(a2);
        do
        {
          float v9 = vabds_f32(logf(*(float *)(v7 + 4)), v8);
          if (v9 < vabds_f32(logf(*(float *)(v5 + 4)), v8)) {
            uint64_t v5 = v7;
          }
          v7 += 8;
        }
        while (v7 != v6);
      }
      unsigned int v4 = *(_DWORD *)v5 & 0xFFFFFF00;
      int v3 = *(_DWORD *)v5;
      uint64_t v2 = 0x100000000;
    }
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = 0;
    unsigned int v4 = 0;
  }
  return v2 | v4 | v3;
}

void std::__optional_storage_base<AUSM::RoomCongruence::ProcessingResult,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AUSM::RoomCongruence::ProcessingResult,false>>(AUSM::RoomCongruence::ProcessingResult *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*((unsigned char *)a1 + 184))
    {
      AUSM::RoomCongruence::ProcessingResult::operator=((uint64_t)a1, a2);
    }
  }
  else if (*((unsigned char *)a1 + 184))
  {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(a1);
    *(unsigned char *)(v2 + 184) = 0;
  }
  else
  {
    *(unsigned char *)(std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult*>((uint64_t)a1, a2)+ 184) = 1;
  }
}

AUSM::RoomCongruence::ProcessingResult *AUSM::RoomCongruence::ProcessingResult::ProcessingResult(AUSM::RoomCongruence::ProcessingResult *this, const AUSM::RoomCongruence::ProcessingResult *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 152) = 0;
  if (*((unsigned char *)a2 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)this, (uint64_t)a2);
    *((unsigned char *)this + 152) = 1;
  }
  uint64_t v4 = *((void *)a2 + 20);
  if (v4) {
    CFRetain(*((CFTypeRef *)a2 + 20));
  }
  *((void *)this + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
  uint64_t v5 = *((void *)a2 + 21);
  if (v5) {
    CFRetain(*((CFTypeRef *)a2 + 21));
  }
  *((void *)this + 2freeMatrix(*((_DWORD *)this + 17), this + 1) = v5;
  *((unsigned char *)this + 176) = *((unsigned char *)a2 + 176);
  return this;
}

uint64_t AUSM::RoomCongruence::Cache::Cache(uint64_t a1, const AUSM::RoomCongruence::RoomConfiguration *a2, long long *a3, uint64_t a4)
{
  uint64_t v7 = AUSM::RoomCongruence::RoomConfiguration::RoomConfiguration((AUSM::RoomCongruence::RoomConfiguration *)a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  int v10 = *((_DWORD *)a3 + 8);
  *((unsigned char *)v7 + 144) = 0;
  uint64_t v11 = (uint64_t)v7 + 144;
  *(_DWORD *)(v11 - 8) = v10;
  *(_OWORD *)(v11 - 24) = v9;
  *(_OWORD *)(v11 - 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
  *(unsigned char *)(v11 + 152) = 0;
  if (*(unsigned char *)(a4 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes(v11, a4);
    *(unsigned char *)(a1 + 296) = 1;
  }
  uint64_t v12 = *(void *)(a4 + 160);
  if (v12) {
    CFRetain(*(CFTypeRef *)(a4 + 160));
  }
  *(void *)(a1 + 304) = v12;
  uint64_t v13 = *(void *)(a4 + 168);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a4 + 168));
  }
  *(void *)(a1 + 312) = v13;
  *(unsigned char *)(a1 + 32std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(a4 + 176);
  *(unsigned char *)(a1 + 328) = 1;
  return a1;
}

uint64_t AUSM::RoomCongruence::Cache::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 24), *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 56), *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  }
  long long v4 = *(_OWORD *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  uint64_t v6 = (AUSM::RoomCongruence::ProcessingResult *)(a1 + 144);
  uint64_t v7 = a2 + 144;
  if (*(unsigned __int8 *)(a1 + 328) == *(unsigned __int8 *)(a2 + 328))
  {
    if (*(unsigned char *)(a1 + 328)) {
      AUSM::RoomCongruence::ProcessingResult::operator=((uint64_t)v6, v7);
    }
  }
  else if (*(unsigned char *)(a1 + 328))
  {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult(v6);
    *(unsigned char *)(a1 + 328) = 0;
  }
  else
  {
    std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult const&,AUSM::RoomCongruence::ProcessingResult*>((uint64_t)v6, v7);
    *(unsigned char *)(a1 + 328) = 1;
  }
  return a1;
}

void AUSM::RoomCongruence::Cache::~Cache(AUSM::RoomCongruence::Cache *this)
{
  if (*((unsigned char *)this + 328)) {
    AUSM::RoomCongruence::ProcessingResult::~ProcessingResult((AUSM::RoomCongruence::Cache *)((char *)this + 144));
  }

  AUSM::RoomCongruence::RoomConfiguration::~RoomConfiguration(this);
}

uint64_t std::construct_at[abi:ne180100]<AUSM::RoomCongruence::ProcessingResult,AUSM::RoomCongruence::ProcessingResult const&,AUSM::RoomCongruence::ProcessingResult*>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    IR::IRDataAttributes::IRDataAttributes(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
  uint64_t v4 = *(void *)(a2 + 160);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a2 + 160));
  }
  *(void *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v4;
  uint64_t v5 = *(void *)(a2 + 168);
  if (v5) {
    CFRetain(*(CFTypeRef *)(a2 + 168));
  }
  *(void *)(a1 + 168) = v5;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

void AUSM::RoomCongruence::Processor::setTuningParameters(float *a1, CFTypeRef *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFTypeRef v4 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef cf = v4;
  BOOL isTuningParametersDictionaryStructurallyValid = AUSM::RoomCongruence::isTuningParametersDictionaryStructurallyValid((CFDictionaryRef *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (isTuningParametersDictionaryStructurallyValid)
  {
    *(void *)buf = a1 + 6;
    buf[8] = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(a1 + 6));
    CFTypeRef v6 = *a2;
    if (v6)
    {
      CFRetain(v6);
      CFRetain(v6);
    }
    CFTypeRef v22 = v6;
    BOOL v8 = AUSM::RoomCongruence::isTuningParametersDictionaryStructurallyValid((CFDictionaryRef *)&v22);
    if (v22) {
      CFRelease(v22);
    }
    if (v8)
    {
      if (!v6)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      float v9 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, @"k");
      float v10 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, @"exp");
      float v11 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, @"lowerVolumeLimit");
      float v12 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, @"upperVolumeLimit");
      float v13 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, @"alpha");
      float v14 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, @"beta");
      float v15 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v6, @"lowerReverbLevelLimit");
      BOOL v16 = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>((const __CFDictionary *)v6, @"isWarpingEnabled");
      BOOL v17 = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>((const __CFDictionary *)v6, @"useSpectralMatching");
      BOOL v18 = applesauce::CF::details::find_at_key<BOOL,__CFString const* const&>((const __CFDictionary *)v6, @"isRoomCongruenceEnabled");
      int v19 = applesauce::CF::details::find_at_key<unsigned int,__CFString const* const&>((const __CFDictionary *)v6, @"libraryRoomIr");
    }
    else
    {
      BOOL v16 = 0;
      int v19 = 0;
      BOOL v18 = 0;
      float v10 = 0.0;
      BOOL v17 = 1;
      float v11 = 0.0;
      float v12 = 0.0;
      float v13 = 0.0;
      float v14 = 0.0;
      float v15 = 0.0;
      float v9 = 0.0;
    }
    a1[32] = v9;
    a1[33] = v10;
    a1[34] = v11;
    a1[35] = v12;
    a1[36] = v13;
    a1[37] = v14;
    a1[38] = v15;
    *((unsigned char *)a1 + 156) = v16;
    *((unsigned char *)a1 + 157) = v17;
    *((unsigned char *)a1 + 158) = v18;
    *((_DWORD *)a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v19;
    if (v6) {
      CFRelease(v6);
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)buf);
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v7 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a1 + 23) < 0) {
        a1 = *(float **)a1;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v24 = 2080;
      long long v25 = "setTuningParameters";
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "[%s|%s] Tuning Parameters dictionary structurally invalid. Failed to set, returning.", buf, 0x16u);
    }
  }
}

void sub_1BB5CD6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, CFTypeRef cf, char a15)
{
  __cxa_free_exception(v15);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t AUSM::RoomCongruence::Processor::Processor(uint64_t a1, const void **a2)
{
  uint64_t v236 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 36));
  *(_OWORD *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  uint64_t v5 = (void *)(a1 + 40);
  v209 = (void **)(a1 + 64);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  v207 = (void *)(a1 + 104);
  *(_OWORD *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 149) = 0;
  *(_WORD *)(a1 + 157) = 1;
  *(_DWORD *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 293) = 0;
  *(_WORD *)(a1 + 30freeMatrix(*((_DWORD *)this + 17), this + 1) = 1;
  *(_DWORD *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t v7 = (IR::IRDataLoader *)std::string::basic_string[abi:ne180100]((uint64_t)__src, v6 + 26);
  if ((SBYTE7(__src[1]) & 0x80u) == 0) {
    BOOL v8 = __src;
  }
  else {
    BOOL v8 = *(_OWORD **)&__src[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      float v9 = a2;
    }
    else {
      float v9 = *a2;
    }
    uint64_t v7 = (IR::IRDataLoader *)memmove(v8, v9, v6);
  }
  strcpy((char *)v8 + v6, "|RoomCongruence::Processor");
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = __src[0];
  *(void *)(a1 + 16) = *(void *)&__src[1];
  *(void *)&__src[0] = 0x3500000034;
  DWORD2(__src[0]) = 54;
  uint64_t v10 = *(void *)(a1 + 56);
  float v11 = *(IR::IRDataLoader **)(a1 + 40);
  if ((unint64_t)(v10 - (void)v11) < 0xC)
  {
    if (v11)
    {
      *(void *)(a1 + 48) = v11;
      operator delete(v11);
      uint64_t v10 = 0;
      void *v5 = 0;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v12 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 3) {
      uint64_t v12 = 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (IR::IRDataLoader *)operator new(4 * v13);
    float v11 = v7;
    *(void *)(a1 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v7;
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = (char *)v7 + 4 * v13;
    goto LABEL_28;
  }
  float v14 = *(char **)(a1 + 48);
  int64_t v15 = v14 - (char *)v11;
  if ((unint64_t)(v14 - (char *)v11) > 0xB)
  {
LABEL_28:
    *(void *)float v11 = *(void *)&__src[0];
    *((_DWORD *)v11 + 2) = DWORD2(__src[0]);
    size_t v17 = 12;
    goto LABEL_29;
  }
  BOOL v16 = (char *)__src + v15;
  if (v14 != (char *)v11)
  {
    memcpy(*(void **)(a1 + 40), __src, v14 - (char *)v11);
    float v11 = *(IR::IRDataLoader **)(a1 + 48);
  }
  size_t v17 = 12 - v15;
  uint64_t v7 = (IR::IRDataLoader *)memcpy(v11, v16, v17);
LABEL_29:
  *(void *)(a1 + 48) = (char *)v11 + v17;
  CFTypeRef cf = 0;
  BOOL v18 = *(IR::IRDataLoader **)(a1 + 40);
  if ((IR::IRDataLoader *)((char *)v11 + v17) != v18)
  {
    unint64_t v19 = 0;
    v208 = (void *)(a1 + 80);
    while (1)
    {
      IR::IRDataLoader::instance(v7);
      IR::IRDataLoader::getUserData();
      CFTypeRef v20 = cf;
      float v21 = *(const void **)&__src[0];
      CFTypeRef cf = *(CFTypeRef *)&__src[0];
      *(void *)&__src[0] = v20;
      if (v20) {
        CFRelease(v20);
      }
      if (!v21)
      {
        CFTypeRef v215 = 0;
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v36 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          float v37 = v36;
          CFArrayRef v38 = "[Room Congruence] %s: IRData User Data invalid - underlying CF object is nil.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      CFRetain(v21);
      CFTypeRef v215 = v21;
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v21, @"CenterFreqs"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v39 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          float v37 = v39;
          CFArrayRef v38 = "[Room Congruence] %s: IRData User Data invalid - missing center frequencies.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v215) {
        goto LABEL_465;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v215, @"RT60"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v40 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          float v37 = v40;
          CFArrayRef v38 = "[Room Congruence] %s: IRData User Data invalid - missing RT60 targets.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v215) {
        goto LABEL_465;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v215, @"RoomVolume"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v41 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          float v37 = v41;
          CFArrayRef v38 = "[Room Congruence] %s: IRData User Data invalid - missing room volume.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v215) {
        goto LABEL_465;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v215, @"EarlyRoomEnergy"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v42 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          float v37 = v42;
          CFArrayRef v38 = "[Room Congruence] %s: IRData User Data invalid - missing early room energy.";
          goto LABEL_98;
        }
        goto LABEL_99;
      }
      if (!v215) {
        goto LABEL_465;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v215, @"LateRoomEnergy"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v43 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          float v37 = v43;
          CFArrayRef v38 = "[Room Congruence] %s: IRData User Data invalid - missing late room energy.";
          goto LABEL_98;
        }
LABEL_99:
        int v35 = 0;
        goto LABEL_100;
      }
      if (!v215) {
        goto LABEL_465;
      }
      if (!applesauce::CF::details::has_key<__CFString const* const&>((CFDictionaryRef)v215, @"TotalRoomEnergy"))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v44 = getAUSMV2Log(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = "isIrDataUserDataDictionaryStructurallyValid";
          float v37 = v44;
          CFArrayRef v38 = "[Room Congruence] %s: IRData User Data invalid - missing total room energy.";
LABEL_98:
          _os_log_error_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_ERROR, v38, (uint8_t *)__src, 0xCu);
        }
        goto LABEL_99;
      }
      if (!v215)
      {
LABEL_465:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        v203 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(__src, (CFDictionaryRef)v215, @"CenterFreqs");
      if (!BYTE8(__src[0])) {
        break;
      }
      if (!*(void *)&__src[0])
      {
        v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v204, "Could not construct");
      }
      if (!CFArrayGetCount(*(CFArrayRef *)&__src[0]))
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v161 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
          goto LABEL_361;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "isIrDataUserDataDictionaryStructurallyValid";
        float v159 = v161;
        float v160 = "[Room Congruence] %s: IRData User Data invalid - the center frequency array is empty.";
        goto LABEL_360;
      }
      CFTypeRef v22 = *(const void **)&__src[0];
      if (*(void *)&__src[0]) {
        CFRetain(*(CFTypeRef *)&__src[0]);
      }
      v220[1] = v22;
      unsigned __int8 v23 = AUSM::RoomCongruence::isArrayOf<float>((const __CFArray *)v22);
      if (v22) {
        CFRelease(v22);
      }
      if (v23)
      {
        if (!v215)
        {
          v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v205, "Could not construct");
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&buf, (CFDictionaryRef)v215, @"RT60");
        if (BYTE8(buf))
        {
          if (!(void)buf)
          {
            v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v206, "Could not construct");
          }
          if (CFArrayGetCount((CFArrayRef)buf))
          {
            applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v220, (CFTypeRef)buf);
            unsigned __int8 v24 = AUSM::RoomCongruence::isArrayOf<float>((const __CFArray *)v220[0]);
            applesauce::CF::ArrayRef::~ArrayRef(v220);
            if (v24)
            {
              long long v25 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&v215);
              if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(*v25, @"RoomVolume") & 0xFF00000000) != 0)
              {
                uint64_t v26 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v215);
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v233, *v26, @"EarlyRoomEnergy");
                if (BYTE8(buf))
                {
                  CFArrayRef v27 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&buf);
                  if (applesauce::CF::ArrayRef_proxy::get_size(*v27))
                  {
                    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v219, *(CFTypeRef *)v233);
                    unsigned __int8 v28 = AUSM::RoomCongruence::isArrayOf<float>(v219);
                    applesauce::CF::ArrayRef::~ArrayRef((const void **)&v219);
                    if (v28)
                    {
                      unsigned __int8 v29 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v215);
                      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v232, *v29, @"LateRoomEnergy");
                      if (v232[8])
                      {
                        char v30 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v232);
                        if (applesauce::CF::ArrayRef_proxy::get_size(*v30))
                        {
                          applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v218, *(CFTypeRef *)v232);
                          unsigned __int8 v31 = AUSM::RoomCongruence::isArrayOf<float>(v218);
                          applesauce::CF::ArrayRef::~ArrayRef((const void **)&v218);
                          if (v31)
                          {
                            uint64_t v32 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v215);
                            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v231, *v32, @"TotalRoomEnergy");
                            if (v231[8])
                            {
                              AudioObjectID v33 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(v231);
                              if (applesauce::CF::ArrayRef_proxy::get_size(*v33))
                              {
                                applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v217, *(CFTypeRef *)v231);
                                unsigned __int8 v34 = AUSM::RoomCongruence::isArrayOf<float>(v217);
                                applesauce::CF::ArrayRef::~ArrayRef((const void **)&v217);
                                if (v34)
                                {
                                  int v35 = 1;
                                  goto LABEL_426;
                                }
                                if (getAUSMV2Log(void)::onceToken != -1) {
                                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                                }
                                uint64_t v183 = getAUSMV2Log(void)::gLog;
                                if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)v229 = 136315138;
                                  uint64_t v230 = "isIrDataUserDataDictionaryStructurallyValid";
                                  unint64_t v180 = v183;
                                  uint8x8_t v181 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and a"
                                         "ctual type of the total reverb energy values in the array - must be float.";
LABEL_424:
                                  _os_log_error_impl(&dword_1BB0CE000, v180, OS_LOG_TYPE_ERROR, v181, v229, 0xCu);
                                }
                              }
                              else
                              {
                                if (getAUSMV2Log(void)::onceToken != -1) {
                                  dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                                }
                                uint64_t v182 = getAUSMV2Log(void)::gLog;
                                if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)v229 = 136315138;
                                  uint64_t v230 = "isIrDataUserDataDictionaryStructurallyValid";
                                  unint64_t v180 = v182;
                                  uint8x8_t v181 = "[Room Congruence] %s: IRData User Data invalid - the total reverb energy array is empty.";
                                  goto LABEL_424;
                                }
                              }
                            }
                            else
                            {
                              if (getAUSMV2Log(void)::onceToken != -1) {
                                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                              }
                              uint64_t v179 = getAUSMV2Log(void)::gLog;
                              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)v229 = 136315138;
                                uint64_t v230 = "isIrDataUserDataDictionaryStructurallyValid";
                                unint64_t v180 = v179;
                                uint8x8_t v181 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and act"
                                       "ual type of the total reverb energy value in the dictionary.";
                                goto LABEL_424;
                              }
                            }
                            int v35 = 0;
LABEL_426:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v231);
LABEL_411:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v232);
LABEL_396:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v233);
LABEL_381:
                            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf);
                            goto LABEL_362;
                          }
                          if (getAUSMV2Log(void)::onceToken != -1) {
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                          }
                          uint64_t v178 = getAUSMV2Log(void)::gLog;
                          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)float v231 = 136315138;
                            *(void *)&v231[4] = "isIrDataUserDataDictionaryStructurallyValid";
                            uint64_t v175 = v178;
                            uint64_t v176 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual "
                                   "type of the late reverb energy values in the array - must be float.";
LABEL_409:
                            _os_log_error_impl(&dword_1BB0CE000, v175, OS_LOG_TYPE_ERROR, v176, v231, 0xCu);
                          }
                        }
                        else
                        {
                          if (getAUSMV2Log(void)::onceToken != -1) {
                            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                          }
                          uint64_t v177 = getAUSMV2Log(void)::gLog;
                          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)float v231 = 136315138;
                            *(void *)&v231[4] = "isIrDataUserDataDictionaryStructurallyValid";
                            uint64_t v175 = v177;
                            uint64_t v176 = "[Room Congruence] %s: IRData User Data invalid - the late reverb energy array is empty.";
                            goto LABEL_409;
                          }
                        }
                      }
                      else
                      {
                        if (getAUSMV2Log(void)::onceToken != -1) {
                          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                        }
                        uint64_t v174 = getAUSMV2Log(void)::gLog;
                        if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)float v231 = 136315138;
                          *(void *)&v231[4] = "isIrDataUserDataDictionaryStructurallyValid";
                          uint64_t v175 = v174;
                          uint64_t v176 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual ty"
                                 "pe of the late reverb energy value in the dictionary.";
                          goto LABEL_409;
                        }
                      }
                      int v35 = 0;
                      goto LABEL_411;
                    }
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    uint64_t v173 = getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)float v232 = 136315138;
                      *(void *)&v232[4] = "isIrDataUserDataDictionaryStructurallyValid";
                      uint64_t v170 = v173;
                      int v171 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type o"
                             "f the early reflections energy values in the array - must be float.";
LABEL_394:
                      _os_log_error_impl(&dword_1BB0CE000, v170, OS_LOG_TYPE_ERROR, v171, v232, 0xCu);
                    }
                  }
                  else
                  {
                    if (getAUSMV2Log(void)::onceToken != -1) {
                      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                    }
                    uint64_t v172 = getAUSMV2Log(void)::gLog;
                    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)float v232 = 136315138;
                      *(void *)&v232[4] = "isIrDataUserDataDictionaryStructurallyValid";
                      uint64_t v170 = v172;
                      int v171 = "[Room Congruence] %s: IRData User Data invalid - the early reflections energy array is empty.";
                      goto LABEL_394;
                    }
                  }
                }
                else
                {
                  if (getAUSMV2Log(void)::onceToken != -1) {
                    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
                  }
                  uint64_t v169 = getAUSMV2Log(void)::gLog;
                  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)float v232 = 136315138;
                    *(void *)&v232[4] = "isIrDataUserDataDictionaryStructurallyValid";
                    uint64_t v170 = v169;
                    int v171 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of "
                           "the early reflections energy value in the dictionary.";
                    goto LABEL_394;
                  }
                }
                int v35 = 0;
                goto LABEL_396;
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v168 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v233 = 136315138;
                *(void *)&v233[4] = "isIrDataUserDataDictionaryStructurallyValid";
                uint64_t v164 = v168;
                float v165 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the "
                       "room volume value in the dictionary.";
LABEL_379:
                _os_log_error_impl(&dword_1BB0CE000, v164, OS_LOG_TYPE_ERROR, v165, v233, 0xCu);
              }
            }
            else
            {
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
              uint64_t v167 = getAUSMV2Log(void)::gLog;
              if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v233 = 136315138;
                *(void *)&v233[4] = "isIrDataUserDataDictionaryStructurallyValid";
                uint64_t v164 = v167;
                float v165 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the "
                       "RT60 values in the array - must be float.";
                goto LABEL_379;
              }
            }
          }
          else
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v166 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v233 = 136315138;
              *(void *)&v233[4] = "isIrDataUserDataDictionaryStructurallyValid";
              uint64_t v164 = v166;
              float v165 = "[Room Congruence] %s: IRData User Data invalid - the RT60 array is empty.";
              goto LABEL_379;
            }
          }
        }
        else
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v163 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v233 = 136315138;
            *(void *)&v233[4] = "isIrDataUserDataDictionaryStructurallyValid";
            uint64_t v164 = v163;
            float v165 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the RT60"
                   " value in the dictionary.";
            goto LABEL_379;
          }
        }
        int v35 = 0;
        goto LABEL_381;
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v162 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "isIrDataUserDataDictionaryStructurallyValid";
        float v159 = v162;
        float v160 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the center f"
               "requency values in the array - must be float.";
LABEL_360:
        _os_log_error_impl(&dword_1BB0CE000, v159, OS_LOG_TYPE_ERROR, v160, (uint8_t *)&buf, 0xCu);
      }
LABEL_361:
      int v35 = 0;
LABEL_362:
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__src);
LABEL_100:
      uint64_t v7 = (IR::IRDataLoader *)v215;
      if (v215) {
        CFRelease(v215);
      }
      if (!v35) {
        goto LABEL_337;
      }
      if (!v21)
      {
        unint64_t v196 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v196, "Could not construct");
      }
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v214, (CFDictionaryRef)v21, @"CenterFreqs");
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v213, (CFDictionaryRef)v21, @"RT60");
      float v45 = applesauce::CF::details::find_at_key<float,__CFString const* const&>((const __CFDictionary *)v21, @"RoomVolume");
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v212, (CFDictionaryRef)v21, @"EarlyRoomEnergy");
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&v211, (CFDictionaryRef)v21, @"LateRoomEnergy");
      applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,__CFString const* const&>((applesauce::CF::ArrayRef *)&theArray, (CFDictionaryRef)v21, @"TotalRoomEnergy");
      long long v222 = 0u;
      memset(__src, 0, sizeof(__src));
      long long v224 = 0u;
      long long v225 = 0u;
      long long v226 = 0u;
      long long v227 = 0u;
      v228 = 0;
      CFArrayRef v46 = (const __CFArray *)v214;
      if (v214) {
        CFRetain(v214);
      }
      if (!AUSM::RoomCongruence::isArrayOf<float>(v46))
      {
        char v50 = 1;
        goto LABEL_131;
      }
      CFArrayRef v47 = (const __CFArray *)v213;
      if (v213) {
        CFRetain(v213);
      }
      if (AUSM::RoomCongruence::isArrayOf<float>(v47))
      {
        CFArrayRef v48 = (const __CFArray *)v212;
        if (v212) {
          CFRetain(v212);
        }
        if (AUSM::RoomCongruence::isArrayOf<float>(v48))
        {
          CFIndex v2 = (CFIndex)v211;
          if (v211) {
            CFRetain(v211);
          }
          if (AUSM::RoomCongruence::isArrayOf<float>((const __CFArray *)v2))
          {
            CFArrayRef v49 = (const __CFArray *)v211;
            if (v211) {
              CFRetain(v211);
            }
            char v50 = AUSM::RoomCongruence::isArrayOf<float>(v49) ^ 1;
            if (v49) {
              CFRelease(v49);
            }
            if (!v2) {
              goto LABEL_127;
            }
LABEL_126:
            CFRelease((CFTypeRef)v2);
          }
          else
          {
            char v50 = 1;
            if (v2) {
              goto LABEL_126;
            }
          }
        }
        else
        {
          char v50 = 1;
        }
LABEL_127:
        if (v48) {
          CFRelease(v48);
        }
        goto LABEL_129;
      }
      char v50 = 1;
LABEL_129:
      if (v47) {
        CFRelease(v47);
      }
LABEL_131:
      if (v46) {
        CFRelease(v46);
      }
      if ((v50 & 1) == 0)
      {
        if (!v214)
        {
          uint64_t v200 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v200, "Could not construct");
        }
        CFIndex Count = CFArrayGetCount((CFArrayRef)v214);
        if (!v213)
        {
          uint64_t v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v199, "Could not construct");
        }
        CFIndex v52 = CFArrayGetCount((CFArrayRef)v213);
        if (!v212)
        {
          uint64_t v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v198, "Could not construct");
        }
        CFIndex v53 = CFArrayGetCount((CFArrayRef)v212);
        if (!v211)
        {
          v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v197, "Could not construct");
        }
        CFIndex v2 = CFArrayGetCount((CFArrayRef)v211);
        if (!theArray)
        {
          v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v201, "Could not construct");
        }
        CFIndex v54 = CFArrayGetCount(theArray);
        if (Count == v52 && v52 == v53 && v53 == v2 && v2 == v54)
        {
          std::vector<float>::reserve((void **)__src, Count);
          std::vector<float>::reserve((void **)&__src[1] + 1, Count);
          std::vector<float>::reserve((void **)&v224, Count);
          std::vector<float>::reserve((void **)&v225 + 1, Count);
          std::vector<float>::reserve((void **)&v227, Count);
          if (Count)
          {
            for (unint64_t i = 0; i != Count; ++i)
            {
              if (!v214)
              {
                DSPSplitComplex v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v191, "Could not construct");
              }
              float v56 = applesauce::CF::details::at_to<float>((const __CFArray *)v214, i);
              float v57 = v56;
              unint64_t v58 = (char *)*((void *)&__src[0] + 1);
              if (*((void *)&__src[0] + 1) >= *(void *)&__src[1])
              {
                float v60 = *(char **)&__src[0];
                uint64_t v61 = (uint64_t)(*((void *)&__src[0] + 1) - *(void *)&__src[0]) >> 2;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v63 = *(void *)&__src[1] - *(void *)&__src[0];
                if ((uint64_t)(*(void *)&__src[1] - *(void *)&__src[0]) >> 1 > v62) {
                  unint64_t v62 = v63 >> 1;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__src[1], v64);
                  unint64_t v58 = (char *)*((void *)&__src[0] + 1);
                  float v60 = *(char **)&__src[0];
                }
                else
                {
                  uint64_t v65 = 0;
                }
                unint64_t v66 = &v65[4 * v61];
                *(float *)unint64_t v66 = v57;
                unsigned int v59 = v66 + 4;
                while (v58 != v60)
                {
                  int v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v67;
                  v66 -= 4;
                }
                *(void *)&__src[0] = v66;
                *((void *)&__src[0] + freeMatrix(*((_DWORD *)this + 17), this + 1) = v59;
                *(void *)&__src[1] = &v65[4 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                **((float **)&__src[0] + freeMatrix(*((_DWORD *)this + 17), this + 1) = v56;
                unsigned int v59 = v58 + 4;
              }
              *((void *)&__src[0] + freeMatrix(*((_DWORD *)this + 17), this + 1) = v59;
              if (!v213)
              {
                int v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v194, "Could not construct");
              }
              float v68 = applesauce::CF::details::at_to<float>((const __CFArray *)v213, i);
              float v69 = v68;
              unint64_t v70 = (char *)v222;
              if ((unint64_t)v222 >= *((void *)&v222 + 1))
              {
                CFNumberRef v72 = (char *)*((void *)&__src[1] + 1);
                uint64_t v73 = (uint64_t)(v222 - *((void *)&__src[1] + 1)) >> 2;
                unint64_t v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v75 = *((void *)&v222 + 1) - *((void *)&__src[1] + 1);
                if ((uint64_t)(*((void *)&v222 + 1) - *((void *)&__src[1] + 1)) >> 1 > v74) {
                  unint64_t v74 = v75 >> 1;
                }
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v76 = v74;
                }
                if (v76)
                {
                  uint64_t v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v222 + 8, v76);
                  CFNumberRef v72 = (char *)*((void *)&__src[1] + 1);
                  unint64_t v70 = (char *)v222;
                }
                else
                {
                  uint64_t v77 = 0;
                }
                char v78 = &v77[4 * v73];
                *(float *)char v78 = v69;
                int v71 = v78 + 4;
                while (v70 != v72)
                {
                  int v79 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v78 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v79;
                  v78 -= 4;
                }
                *((void *)&__src[1] + freeMatrix(*((_DWORD *)this + 17), this + 1) = v78;
                *(void *)&long long v222 = v71;
                *((void *)&v222 + freeMatrix(*((_DWORD *)this + 17), this + 1) = &v77[4 * v76];
                if (v72) {
                  operator delete(v72);
                }
              }
              else
              {
                *(float *)long long v222 = v68;
                int v71 = v70 + 4;
              }
              *(void *)&long long v222 = v71;
              if (!v212)
              {
                uint64_t v192 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v192, "Could not construct");
              }
              float v80 = applesauce::CF::details::at_to<float>((const __CFArray *)v212, i);
              float v81 = v80;
              unint64_t v82 = (char *)*((void *)&v224 + 1);
              if (*((void *)&v224 + 1) >= (unint64_t)v225)
              {
                uint64_t v84 = (char *)v224;
                uint64_t v85 = (uint64_t)(*((void *)&v224 + 1) - v224) >> 2;
                unint64_t v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v87 = v225 - v224;
                if ((uint64_t)(v225 - v224) >> 1 > v86) {
                  unint64_t v86 = v87 >> 1;
                }
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v88 = v86;
                }
                if (v88)
                {
                  uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v225, v88);
                  unint64_t v82 = (char *)*((void *)&v224 + 1);
                  uint64_t v84 = (char *)v224;
                }
                else
                {
                  uint64_t v89 = 0;
                }
                float v90 = &v89[4 * v85];
                *(float *)float v90 = v81;
                uint64_t v83 = v90 + 4;
                while (v82 != v84)
                {
                  int v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *((_DWORD *)v90 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v91;
                  v90 -= 4;
                }
                *(void *)&long long v224 = v90;
                *((void *)&v224 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v83;
                *(void *)&long long v225 = &v89[4 * v88];
                if (v84) {
                  operator delete(v84);
                }
              }
              else
              {
                **((float **)&v224 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v80;
                uint64_t v83 = v82 + 4;
              }
              *((void *)&v224 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v83;
              if (!v211)
              {
                char v195 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v195, "Could not construct");
              }
              float v92 = applesauce::CF::details::at_to<float>((const __CFArray *)v211, i);
              float v93 = v92;
              unint64_t v94 = (char *)v226;
              if ((unint64_t)v226 >= *((void *)&v226 + 1))
              {
                float v96 = (char *)*((void *)&v225 + 1);
                uint64_t v97 = (uint64_t)(v226 - *((void *)&v225 + 1)) >> 2;
                unint64_t v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v99 = *((void *)&v226 + 1) - *((void *)&v225 + 1);
                if ((uint64_t)(*((void *)&v226 + 1) - *((void *)&v225 + 1)) >> 1 > v98) {
                  unint64_t v98 = v99 >> 1;
                }
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v100 = v98;
                }
                if (v100)
                {
                  float v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v226 + 8, v100);
                  float v96 = (char *)*((void *)&v225 + 1);
                  unint64_t v94 = (char *)v226;
                }
                else
                {
                  float v101 = 0;
                }
                float v102 = &v101[4 * v97];
                *(float *)float v102 = v93;
                uint64_t v95 = v102 + 4;
                while (v94 != v96)
                {
                  int v103 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v102 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v103;
                  v102 -= 4;
                }
                *((void *)&v225 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v102;
                *(void *)&long long v226 = v95;
                *((void *)&v226 + freeMatrix(*((_DWORD *)this + 17), this + 1) = &v101[4 * v100];
                if (v96) {
                  operator delete(v96);
                }
              }
              else
              {
                *(float *)long long v226 = v92;
                uint64_t v95 = v94 + 4;
              }
              *(void *)&long long v226 = v95;
              if (!theArray)
              {
                uint64_t v193 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v193, "Could not construct");
              }
              float v104 = applesauce::CF::details::at_to<float>(theArray, i);
              float v105 = v104;
              float v106 = (char *)*((void *)&v227 + 1);
              if (*((void *)&v227 + 1) >= (unint64_t)v228)
              {
                uint64_t v108 = (char *)v227;
                uint64_t v109 = (uint64_t)(*((void *)&v227 + 1) - v227) >> 2;
                unint64_t v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v111 = (uint64_t)&v228[-v227];
                if ((uint64_t)&v228[-v227] >> 1 > v110) {
                  unint64_t v110 = v111 >> 1;
                }
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v112 = v110;
                }
                if (v112)
                {
                  unint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v228, v112);
                  float v106 = (char *)*((void *)&v227 + 1);
                  uint64_t v108 = (char *)v227;
                }
                else
                {
                  unint64_t v113 = 0;
                }
                float v114 = &v113[4 * v109];
                *(float *)float v114 = v105;
                size_t v107 = v114 + 4;
                while (v106 != v108)
                {
                  int v115 = *((_DWORD *)v106 - 1);
                  v106 -= 4;
                  *((_DWORD *)v114 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v115;
                  v114 -= 4;
                }
                *(void *)&long long v227 = v114;
                *((void *)&v227 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v107;
                v228 = &v113[4 * v112];
                if (v108) {
                  operator delete(v108);
                }
              }
              else
              {
                **((float **)&v227 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v104;
                size_t v107 = v106 + 4;
              }
              *((void *)&v227 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v107;
            }
          }
          float v223 = v45;
        }
      }
      if (theArray) {
        CFRelease(theArray);
      }
      if (v211) {
        CFRelease(v211);
      }
      if (v212) {
        CFRelease(v212);
      }
      if (v213) {
        CFRelease(v213);
      }
      if (v214) {
        CFRelease(v214);
      }
      if (AUSM::RoomCongruence::UserData::isValid((AUSM::RoomCongruence::UserData *)__src))
      {
        unint64_t v116 = *((int *)v18 + v19);
        unint64_t v117 = *(void *)(a1 + 72);
        if (v117)
        {
          uint8x8_t v118 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
          v118.i16[0] = vaddlv_u8(v118);
          if (v118.u32[0] > 1uLL)
          {
            CFIndex v2 = *((int *)v18 + v19);
            if (v117 <= v116) {
              CFIndex v2 = v116 % v117;
            }
          }
          else
          {
            CFIndex v2 = (v117 - 1) & v116;
          }
          unint64_t v119 = (uint64_t **)*((void *)*v209 + v2);
          if (v119)
          {
            for (uint64_t j = *v119; j; uint64_t j = (uint64_t *)*j)
            {
              unint64_t v121 = j[1];
              if (v121 == v116)
              {
                if (*((_DWORD *)j + 4) == v116) {
                  goto LABEL_315;
                }
              }
              else
              {
                if (v118.u32[0] > 1uLL)
                {
                  if (v121 >= v117) {
                    v121 %= v117;
                  }
                }
                else
                {
                  v121 &= v117 - 1;
                }
                if (v121 != v2) {
                  break;
                }
              }
            }
          }
        }
        int v122 = (char *)operator new(0x98uLL);
        *(void *)&long long buf = v122;
        *((void *)&buf + freeMatrix(*((_DWORD *)this + 17), this + 1) = a1 + 80;
        *(void *)int v122 = 0;
        *((void *)v122 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v116;
        *((_DWORD *)v122 + 4) = *((_DWORD *)v18 + v19);
        *(_OWORD *)(v122 + 56) = 0u;
        *(_OWORD *)(v122 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
        *(_OWORD *)(v122 + 24) = 0u;
        *((void *)v122 + 18) = 0;
        *((_OWORD *)v122 + 7) = 0u;
        *((_OWORD *)v122 + 8) = 0u;
        *((_OWORD *)v122 + 5) = 0u;
        *((_OWORD *)v122 + 6) = 0u;
        char v235 = 1;
        float v123 = (float)(unint64_t)(*(void *)(a1 + 88) + 1);
        float v124 = *(float *)(a1 + 96);
        if (!v117 || (float)(v124 * (float)v117) < v123)
        {
          BOOL v125 = (v117 & (v117 - 1)) != 0;
          if (v117 < 3) {
            BOOL v125 = 1;
          }
          unint64_t v126 = v125 | (2 * v117);
          unint64_t v127 = vcvtps_u32_f32(v123 / v124);
          if (v126 <= v127) {
            int8x8_t prime = (int8x8_t)v127;
          }
          else {
            int8x8_t prime = (int8x8_t)v126;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            unint64_t v117 = *(void *)(a1 + 72);
          }
          if (*(void *)&prime <= v117)
          {
            if (*(void *)&prime < v117)
            {
              unint64_t v135 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
              if (v117 < 3
                || (uint8x8_t v136 = (uint8x8_t)vcnt_s8((int8x8_t)v117), v136.i16[0] = vaddlv_u8(v136), v136.u32[0] > 1uLL))
              {
                unint64_t v135 = std::__next_prime(v135);
              }
              else
              {
                uint64_t v137 = 1 << -(char)__clz(v135 - 1);
                if (v135 >= 2) {
                  unint64_t v135 = v137;
                }
              }
              if (*(void *)&prime <= v135) {
                int8x8_t prime = (int8x8_t)v135;
              }
              if (*(void *)&prime >= v117)
              {
                unint64_t v117 = *(void *)(a1 + 72);
              }
              else
              {
                if (prime) {
                  goto LABEL_271;
                }
                uint64_t v157 = *v209;
                std::runtime_error *v209 = 0;
                if (v157) {
                  operator delete(v157);
                }
                unint64_t v117 = 0;
                *(void *)(a1 + 72) = 0;
              }
            }
          }
          else
          {
LABEL_271:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v129 = operator new(8 * *(void *)&prime);
            uint64_t v130 = *v209;
            std::runtime_error *v209 = v129;
            if (v130) {
              operator delete(v130);
            }
            uint64_t v131 = 0;
            *(int8x8_t *)(a1 + 72) = prime;
            do
              *((void *)*v209 + v131++) = 0;
            while (*(void *)&prime != v131);
            float v132 = (void *)*v208;
            if (*v208)
            {
              unint64_t v133 = v132[1];
              uint8x8_t v134 = (uint8x8_t)vcnt_s8(prime);
              v134.i16[0] = vaddlv_u8(v134);
              if (v134.u32[0] > 1uLL)
              {
                if (v133 >= *(void *)&prime) {
                  v133 %= *(void *)&prime;
                }
              }
              else
              {
                v133 &= *(void *)&prime - 1;
              }
              *((void *)*v209 + v133) = v208;
              float v138 = (void *)*v132;
              if (*v132)
              {
                do
                {
                  unint64_t v139 = v138[1];
                  if (v134.u32[0] > 1uLL)
                  {
                    if (v139 >= *(void *)&prime) {
                      v139 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v139 &= *(void *)&prime - 1;
                  }
                  if (v139 != v133)
                  {
                    if (!*((void *)*v209 + v139))
                    {
                      *((void *)*v209 + v139) = v132;
                      goto LABEL_296;
                    }
                    *float v132 = *v138;
                    *float v138 = **((void **)*v209 + v139);
                    **((void **)*v209 + v139) = v138;
                    float v138 = v132;
                  }
                  unint64_t v139 = v133;
LABEL_296:
                  float v132 = v138;
                  float v138 = (void *)*v138;
                  unint64_t v133 = v139;
                }
                while (v138);
              }
            }
            unint64_t v117 = (unint64_t)prime;
          }
          if ((v117 & (v117 - 1)) != 0)
          {
            if (v117 <= v116) {
              CFIndex v2 = v116 % v117;
            }
            else {
              CFIndex v2 = v116;
            }
          }
          else
          {
            CFIndex v2 = (v117 - 1) & v116;
          }
        }
        BOOL v140 = (void *)*((void *)*v209 + v2);
        uint64_t j = (uint64_t *)buf;
        if (v140)
        {
          *(void *)long long buf = *v140;
          goto LABEL_313;
        }
        *(void *)long long buf = *v208;
        void *v208 = j;
        *((void *)*v209 + v2) = v208;
        if (*j)
        {
          unint64_t v141 = *(void *)(*j + 8);
          if ((v117 & (v117 - 1)) != 0)
          {
            if (v141 >= v117) {
              v141 %= v117;
            }
          }
          else
          {
            v141 &= v117 - 1;
          }
          BOOL v140 = (char *)*v209 + 8 * v141;
LABEL_313:
          void *v140 = j;
        }
        *(void *)&long long buf = 0;
        ++*(void *)(a1 + 88);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>>>>::reset[abi:ne180100]((uint64_t *)&buf);
LABEL_315:
        if (j + 3 == (uint64_t *)__src)
        {
          float v142 = v223;
          *((float *)j + 18) = v223;
        }
        else
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 24, *(char **)&__src[0], *((uint64_t *)&__src[0] + 1), (uint64_t)(*((void *)&__src[0] + 1) - *(void *)&__src[0]) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 48, *((char **)&__src[1] + 1), v222, (uint64_t)(v222 - *((void *)&__src[1] + 1)) >> 2);
          *((float *)j + 18) = v223;
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 80, (char *)v224, *((uint64_t *)&v224 + 1), (uint64_t)(*((void *)&v224 + 1) - v224) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 104, *((char **)&v225 + 1), v226, (uint64_t)(v226 - *((void *)&v225 + 1)) >> 2);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)j + 128, (char *)v227, *((uint64_t *)&v227 + 1), (uint64_t)(*((void *)&v227 + 1) - v227) >> 2);
          float v142 = v223;
        }
        int v143 = *((_DWORD *)v18 + v19);
        float v145 = *(_DWORD **)(a1 + 112);
        unint64_t v144 = *(void *)(a1 + 120);
        if ((unint64_t)v145 >= v144)
        {
          int v147 = (_DWORD *)*v207;
          uint64_t v148 = ((uint64_t)v145 - *v207) >> 3;
          unint64_t v149 = v148 + 1;
          if ((unint64_t)(v148 + 1) >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v150 = v144 - (void)v147;
          if (v150 >> 2 > v149) {
            unint64_t v149 = v150 >> 2;
          }
          if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v151 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v151 = v149;
          }
          if (v151)
          {
            if (v151 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v152 = (char *)operator new(8 * v151);
          }
          else
          {
            unint64_t v152 = 0;
          }
          CFTypeRef v153 = &v152[8 * v148];
          *(_DWORD *)CFTypeRef v153 = v143;
          *((float *)v153 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v142;
          uint64_t v154 = v153;
          if (v145 != v147)
          {
            do
            {
              uint64_t v155 = *((void *)v145 - 1);
              v145 -= 2;
              *((void *)v154 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v155;
              v154 -= 8;
            }
            while (v145 != v147);
            float v145 = (_DWORD *)*v207;
          }
          float v146 = v153 + 8;
          *(void *)(a1 + 104) = v154;
          *(void *)(a1 + 112) = v153 + 8;
          *(void *)(a1 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = &v152[8 * v151];
          if (v145) {
            operator delete(v145);
          }
        }
        else
        {
          *float v145 = v143;
          *((float *)v145 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v142;
          float v146 = v145 + 2;
        }
        *(void *)(a1 + 112) = v146;
      }
      AUSM::RoomCongruence::UserData::~UserData((AUSM::RoomCongruence::UserData *)__src);
LABEL_337:
      ++v19;
      BOOL v18 = *(IR::IRDataLoader **)(a1 + 40);
      unint64_t v156 = (uint64_t)(*(void *)(a1 + 48) - (void)v18) >> 2;
      if (v156 <= v19)
      {
        uint64_t v5 = (void *)(a1 + 40);
        goto LABEL_428;
      }
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v158 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_361;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "isIrDataUserDataDictionaryStructurallyValid";
    float v159 = v158;
    float v160 = "[Room Congruence] %s: IRData User Data invalid - mismatch between queried and actual type of the center frequ"
           "encies value in the dictionary.";
    goto LABEL_360;
  }
  unint64_t v156 = ((IR::IRDataLoader *)((char *)v11 + v17) - v18) >> 2;
LABEL_428:
  v5[11] = 0;
  v5[12] = 0;
  *(void *)((char *)v5 + 109) = 0;
  v5[13] = 0;
  *(_WORD *)(a1 + 157) = 1;
  *(_DWORD *)(a1 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  if (v156 != *(void *)(a1 + 88))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    v184 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint32_t v190 = (void *)a1;
      if (*(char *)(a1 + 23) < 0) {
        uint32_t v190 = *(void **)a1;
      }
      LODWORD(__src[0]) = 136315394;
      *(void *)((char *)__src + 4) = v190;
      WORD6(__src[0]) = 2080;
      *(void *)((char *)__src + 14) = "Processor";
      _os_log_error_impl(&dword_1BB0CE000, v184, OS_LOG_TYPE_ERROR, "[%s|%s] One or more of the chosen IR Presets does not contain room congruence data or the data is corrupted.", (uint8_t *)__src, 0x16u);
    }
  }
  unint64_t v185 = *(float **)(a1 + 104);
  uint64_t v186 = *(float **)(a1 + 112);
  unint64_t v187 = 126 - 2 * __clz(((char *)v186 - (char *)v185) >> 3);
  if (v186 == v185) {
    uint64_t v188 = 0;
  }
  else {
    uint64_t v188 = v187;
  }
  std::__introsort<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *,false>(v185, v186, v188, 1);
  if (cf) {
    CFRelease(cf);
  }
  return a1;
}

void sub_1BB5CF984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AUSM::RoomCongruence::Cache *a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,const void *a31,const void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a32);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 192);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 176);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 160);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v38 - 144);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a37);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a30);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a31);
  AUSM::RoomCongruence::Cache::~Cache(a9);
  uint64_t v40 = *a16;
  if (*a16)
  {
    *(void *)(v37 + 112) = v40;
    operator delete(v40);
  }
  std::__hash_table<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::__unordered_map_hasher<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::hash<IR::IRPreset>,std::equal_to<IR::IRPreset>,true>,std::__unordered_map_equal<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::equal_to<IR::IRPreset>,std::hash<IR::IRPreset>,true>,std::allocator<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>>>::~__hash_table(a24);
  uint64_t v41 = *a10;
  if (*a10)
  {
    *(void *)(v37 + 48) = v41;
    operator delete(v41);
  }
  if (*(char *)(v37 + 23) < 0) {
    operator delete(*(void **)v37);
  }
  _Unwind_Resume(a1);
}

void AUSM::RoomCongruence::UserData::~UserData(AUSM::RoomCongruence::UserData *this)
{
  CFIndex v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = v3;
    operator delete(v3);
  }
  CFTypeRef v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  size_t v6 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = v6;
    operator delete(v6);
  }
}

float *std::__introsort<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v44 = *(a2 - 1);
                float v45 = v10[1];
                if (v44 < v45)
                {
                  float v46 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v46;
                  v10[1] = v44;
                  *(a2 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v45;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v10, v10 + 2, v10 + 4, v10 + 6);
                float v47 = *(a2 - 1);
                float v48 = v10[7];
                if (v47 < v48)
                {
                  int v49 = *((_DWORD *)v10 + 6);
                  v10[6] = *(a2 - 2);
                  *((_DWORD *)a2 - 2) = v49;
                  v10[7] = v47;
                  *(a2 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v48;
                  float v50 = v10[7];
                  float v51 = v10[5];
                  if (v50 < v51)
                  {
                    int v52 = *((_DWORD *)v10 + 4);
                    int v53 = *((_DWORD *)v10 + 6);
                    *((_DWORD *)v10 + 4) = v53;
                    *((_DWORD *)v10 + 6) = v52;
                    v10[5] = v50;
                    v10[7] = v51;
                    float v54 = v10[3];
                    if (v50 < v54)
                    {
                      int v55 = *((_DWORD *)v10 + 2);
                      *((_DWORD *)v10 + 2) = v53;
                      *((_DWORD *)v10 + 4) = v55;
                      v10[3] = v50;
                      v10[5] = v54;
                      float v56 = v10[1];
                      if (v50 < v56)
                      {
                        float v57 = *v10;
                        *(_DWORD *)uint64_t v10 = v53;
                        v10[2] = v57;
                        v10[1] = v50;
                        v10[3] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v58 = v10 + 2;
            BOOL v60 = v10 == a2 || v58 == a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = v10;
                do
                {
                  float v63 = v62[3];
                  float v64 = v62[1];
                  unint64_t v62 = v58;
                  if (v63 < v64)
                  {
                    float v65 = *v58;
                    uint64_t v66 = v61;
                    while (1)
                    {
                      int v67 = (float *)((char *)v10 + v66);
                      v67[2] = *(float *)((char *)v10 + v66);
                      v67[3] = *(float *)((char *)v10 + v66 + 4);
                      if (!v66) {
                        break;
                      }
                      v66 -= 8;
                      if (v63 >= *(v67 - 1))
                      {
                        uint64_t v68 = (uint64_t)v10 + v66 + 8;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v68 = (uint64_t)v10;
LABEL_85:
                    *(float *)uint64_t v68 = v65;
                    *(float *)(v68 + 4) = v63;
                  }
                  unint64_t v58 = v62 + 2;
                  v61 += 8;
                }
                while (v62 + 2 != a2);
              }
            }
            else if (!v60)
            {
              uint64_t v97 = v10 + 1;
              do
              {
                float v98 = v9[3];
                float v99 = v9[1];
                float v9 = v58;
                if (v98 < v99)
                {
                  float v100 = *v58;
                  float v101 = v97;
                  do
                  {
                    v101[1] = *(v101 - 1);
                    v101[2] = *v101;
                    float v102 = *(v101 - 2);
                    v101 -= 2;
                  }
                  while (v98 < v102);
                  v101[1] = v100;
                  v101[2] = v98;
                }
                unint64_t v58 = v9 + 2;
                v97 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v69 = (v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  uint64_t v73 = &v10[2 * v72];
                  if (2 * v71 + 2 < (uint64_t)v12 && v73[1] < v73[3])
                  {
                    v73 += 2;
                    uint64_t v72 = 2 * v71 + 2;
                  }
                  float v74 = v73[1];
                  float v75 = v10[2 * v71 + 1];
                  if (v74 >= v75)
                  {
                    unint64_t v76 = &v10[2 * v71];
                    int v77 = *(_DWORD *)v76;
                    do
                    {
                      char v78 = v76;
                      unint64_t v76 = v73;
                      float *v78 = *v73;
                      v78[1] = v74;
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v79 = 2 * v72;
                      uint64_t v72 = (2 * v72) | 1;
                      uint64_t v73 = &v10[2 * v72];
                      uint64_t v80 = v79 + 2;
                      if (v80 < (uint64_t)v12 && v73[1] < v73[3])
                      {
                        v73 += 2;
                        uint64_t v72 = v80;
                      }
                      float v74 = v73[1];
                    }
                    while (v74 >= v75);
                    *(_DWORD *)unint64_t v76 = v77;
                    v76[1] = v75;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v81 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v82 = 0;
                float v83 = *v10;
                int v84 = *((_DWORD *)v10 + 1);
                uint64_t v85 = v10;
                do
                {
                  unint64_t v86 = v85;
                  v85 += 2 * v82 + 2;
                  uint64_t v87 = 2 * v82;
                  uint64_t v82 = (2 * v82) | 1;
                  uint64_t v88 = v87 + 2;
                  if (v88 < v81 && v85[1] < v85[3])
                  {
                    v85 += 2;
                    uint64_t v82 = v88;
                  }
                  *unint64_t v86 = *v85;
                  v86[1] = v85[1];
                }
                while (v82 <= (uint64_t)((unint64_t)(v81 - 2) >> 1));
                if (v85 == a2 - 2)
                {
                  *uint64_t v85 = v83;
                  *((_DWORD *)v85 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v84;
                }
                else
                {
                  *uint64_t v85 = *(a2 - 2);
                  v85[1] = *(a2 - 1);
                  *(a2 - 2) = v83;
                  *((_DWORD *)a2 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v84;
                  uint64_t v89 = (char *)v85 - (char *)v10 + 8;
                  if (v89 >= 9)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 3) - 2) >> 1;
                    float v91 = v10[2 * v90 + 1];
                    float v92 = v85[1];
                    if (v91 < v92)
                    {
                      int v93 = *(_DWORD *)v85;
                      do
                      {
                        unint64_t v94 = v90;
                        uint64_t v95 = v85;
                        uint64_t v85 = &v10[2 * v94];
                        *uint64_t v95 = *v85;
                        v95[1] = v91;
                        if (!v94) {
                          break;
                        }
                        unint64_t v90 = (v94 - 1) >> 1;
                        float v91 = v10[2 * v90 + 1];
                      }
                      while (v91 < v92);
                      *(_DWORD *)uint64_t v85 = v93;
                      v10[2 * v94 + 1] = v92;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v81-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          float v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v9 + 2, v14 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v14 - 2, v14, &v9[2 * v13 + 2]);
            float v15 = *v9;
            float *v9 = *v14;
            *float v14 = v15;
            int v16 = *((_DWORD *)v9 + 1);
            v9[1] = v14[1];
            *((_DWORD *)v14 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          float v17 = v9[1];
          if (*(v9 - 1) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(a2 - 1))
          {
            unsigned __int8 v34 = v9 + 2;
            do
            {
              uint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              float v35 = v34[1];
              v34 += 2;
            }
            while (v17 >= v35);
          }
          else
          {
            uint64_t v32 = v9;
            do
            {
              uint64_t v10 = v32 + 2;
              float v33 = v32[3];
              v32 += 2;
            }
            while (v17 >= v33);
          }
          uint64_t v36 = a2;
          if (v10 < a2)
          {
            uint64_t v37 = a2;
            do
            {
              uint64_t v36 = v37 - 2;
              float v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v17 < v38);
          }
          float v39 = *v9;
          while (v10 < v36)
          {
            float v40 = *v10;
            *uint64_t v10 = *v36;
            *uint64_t v36 = v40;
            int v41 = *((_DWORD *)v10 + 1);
            v10[1] = v36[1];
            *((_DWORD *)v36 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v41;
            do
            {
              float v42 = v10[3];
              v10 += 2;
            }
            while (v17 >= v42);
            do
            {
              float v43 = *(v36 - 1);
              v36 -= 2;
            }
            while (v17 < v43);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            float *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v39;
          *(v10 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v17;
        }
        float v17 = v9[1];
LABEL_13:
        float v18 = *v9;
        unint64_t v19 = v9;
        do
        {
          CFTypeRef v20 = v19;
          v19 += 2;
        }
        while (v20[3] < v17);
        float v21 = a2;
        if (v20 == v9)
        {
          unsigned __int8 v24 = a2;
          while (v19 < v24)
          {
            CFTypeRef v22 = v24 - 2;
            float v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 < v17) {
              goto LABEL_23;
            }
          }
          CFTypeRef v22 = v24;
        }
        else
        {
          do
          {
            CFTypeRef v22 = v21 - 2;
            float v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 >= v17);
        }
LABEL_23:
        uint64_t v10 = v19;
        if (v19 < v22)
        {
          uint64_t v26 = v22;
          do
          {
            float v27 = *v10;
            *uint64_t v10 = *v26;
            float *v26 = v27;
            int v28 = *((_DWORD *)v10 + 1);
            v10[1] = v26[1];
            *((_DWORD *)v26 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v28;
            do
            {
              float v29 = v10[3];
              v10 += 2;
            }
            while (v29 < v17);
            do
            {
              float v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 >= v17);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          float *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v18;
        *(v10 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_34:
        uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v9, v10 - 2);
      uint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::__unordered_map_hasher<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::hash<IR::IRPreset>,std::equal_to<IR::IRPreset>,true>,std::__unordered_map_equal<IR::IRPreset,std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,std::equal_to<IR::IRPreset>,std::hash<IR::IRPreset>,true>,std::allocator<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>>>::~__hash_table(uint64_t a1)
{
  CFIndex v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      AUSM::RoomCongruence::UserData::~UserData((AUSM::RoomCongruence::UserData *)(v2 + 3));
      operator delete(v2);
      CFIndex v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(float *result, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = result[1];
  float v5 = a3[1];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      float v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      float v8 = a2[1];
      float v9 = result[1];
      if (v8 < v9)
      {
        float v10 = *result;
        *uint64_t result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    float v6 = *result;
    if (v5 >= v3)
    {
      *uint64_t result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      float v11 = a3[1];
      if (v11 >= v4) {
        return result;
      }
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a2, a3);
  float v9 = a4[1];
  float v10 = a3[1];
  if (v9 < v10)
  {
    float v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    float v12 = a3[1];
    float v13 = a2[1];
    if (v12 < v13)
    {
      float v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      float v15 = a2[1];
      float v16 = a1[1];
      if (v15 < v16)
      {
        float v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 < v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      float v18 = *(a2 - 1);
      float v19 = a1[7];
      if (v18 < v19)
      {
        int v20 = *((_DWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_DWORD *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v19;
        float v21 = a1[7];
        float v22 = a1[5];
        if (v21 < v22)
        {
          int v23 = *((_DWORD *)a1 + 4);
          int v24 = *((_DWORD *)a1 + 6);
          *((_DWORD *)a1 + 4) = v24;
          *((_DWORD *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          float v25 = a1[3];
          if (v21 < v25)
          {
            int v26 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v24;
            *((_DWORD *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            float v27 = a1[1];
            if (v21 < v27)
            {
              float v28 = *a1;
              *(_DWORD *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      float v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AUSM::RoomCongruence::Processor::Processor(std::string const&)::$_0 &,std::pair<IR::IRPreset,float> *>(a1, a1 + 2, a1 + 4);
      float v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = v10[1];
    if (v13 < v9[1])
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        float v16 = (float *)((char *)a1 + v15);
        v16[6] = *(float *)((char *)a1 + v15 + 16);
        v16[7] = *(float *)((char *)a1 + v15 + 20);
        if (v15 == -16) {
          break;
        }
        v15 -= 8;
        if (v13 >= v16[3])
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_13:
      *(_DWORD *)uint64_t v17 = v14;
      *(float *)(v17 + 4) = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    float v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<IR::IRPreset,AUSM::RoomCongruence::UserData>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      AUSM::RoomCongruence::UserData::~UserData((AUSM::RoomCongruence::UserData *)(v1 + 24));
    }
    operator delete((void *)v1);
  }
}

void ASAFeaturesDSPChain::GetSuperFeatureDimensions(uint64_t a1, std::vector<unsigned int> *this)
{
  float v3 = *(unsigned int **)(a1 + 248);
  std::vector<unsigned int>::resize(this, *v3);
  uint64_t v4 = (uint64_t *)*((void *)v3 + 10);
  float v5 = (uint64_t *)*((void *)v3 + 11);
  if (v4 != v5)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    do
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      v4 += 3;
      *begin++ = ((unint64_t)(v7 - v8) >> 2) + 1;
    }
    while (v4 != v5);
  }
}

uint64_t ASAFeaturesDSPChain::GetNumSuperFeatures(ASAFeaturesDSPChain *this)
{
  return **((unsigned int **)this + 31);
}

uint64_t ASAFeaturesDSPChain::GetInputAudioFormat(ASAFeaturesDSPChain *this, CAStreamBasicDescription *a2)
{
  CFIndex v2 = (long long *)*((void *)this + 7);
  long long v3 = *v2;
  long long v4 = v2[1];
  *((void *)a2 + 4) = *((void *)v2 + 4);
  *(_OWORD *)a2 = v3;
  *((_OWORD *)a2 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v4;
  return 0;
}

uint64_t ASAFeaturesDSPChain::ComputeAllFeaturesFromAudio(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 16) != a3) {
    __assert_rtn("ComputeAllFeaturesFromAudio", "ASAFeaturesDSPChain.cpp", 717, "numAudioSamples == mAudioBufferSize");
  }
  float v9 = *(float **)(a5 + 16);
  uint64_t v10 = *(void *)(a1 + 64);
  float v12 = *(float *)(v10 + 28);
  float v11 = *(float *)(v10 + 32);
  uint64_t v13 = 4 * a3;
  if (a3)
  {
    int v14 = *(float **)(a2 + 16);
    uint64_t v15 = 4 * a3;
    float v16 = *(float **)(a5 + 16);
    float v17 = *(float *)v10;
    float v18 = *(float *)(v10 + 4);
    do
    {
      float v19 = *v14++;
      float v20 = v19;
      float v11 = v17 * (float)((float)(v19 + (float)(v18 * v11)) - v12);
      *v16++ = v11;
      float v12 = v19;
      v15 -= 4;
    }
    while (v15);
  }
  else
  {
    float v20 = *(float *)(v10 + 28);
  }
  *(float *)(v10 + 28) = v20;
  *(float *)(v10 + 32) = v11;
  if (*(unsigned char *)(v10 + 36))
  {
    unsigned int v21 = *(_DWORD *)(v10 + 24);
    if (a3)
    {
      uint64_t v22 = *(void *)(v10 + 16);
      unsigned int v23 = *(float *)(v10 + 8);
      int v24 = v9;
      do
      {
        *int v24 = *(float *)(v22 + 4 * v21) + *v24;
        ++v24;
        unsigned int v25 = v21 + 1;
        if (v25 >= v23) {
          unsigned int v26 = v23;
        }
        else {
          unsigned int v26 = 0;
        }
        unsigned int v21 = v25 - v26;
        v13 -= 4;
      }
      while (v13);
    }
    *(_DWORD *)(v10 + 24) = v21;
  }
  uint64_t v27 = *(void *)(a1 + 72);
  uint64_t v28 = **(void **)(a1 + 216);
  if (*(_DWORD *)(v27 + 4))
  {
    unsigned int v29 = 0;
    do
    {
      size_t v30 = *(unsigned int *)(v27 + 12);
      BOOL v31 = (void *)(v28 + v30 * v29++);
      memcpy(v31, (const void *)(v28 + v30 * v29), v30);
    }
    while (v29 < *(_DWORD *)(v27 + 4));
  }
  else
  {
    unsigned int v29 = 0;
  }
  memcpy((void *)(v28 + *(_DWORD *)(v27 + 12) * v29), v9, *(unsigned int *)(v27 + 12));
  uint64_t v32 = *(void *)(a1 + 80);
  uint64_t v33 = *(void *)(*(void *)(a1 + 216) + 8);
  if (*(_DWORD *)(v32 + 4))
  {
    unsigned int v34 = 0;
    do
    {
      size_t v35 = *(unsigned int *)(v32 + 12);
      uint64_t v36 = (void *)(v33 + v35 * v34++);
      memcpy(v36, (const void *)(v33 + v35 * v34), v35);
    }
    while (v34 < *(_DWORD *)(v32 + 4));
  }
  else
  {
    unsigned int v34 = 0;
  }
  memcpy((void *)(v33 + *(_DWORD *)(v32 + 12) * v34), v9, *(unsigned int *)(v32 + 12));
  uint64_t v37 = *(void *)(a1 + 232);
  uint64_t v38 = *(void *)(a1 + 216);
  float v39 = *(ASAFrontEnd **)(v38 + 8);
  float v40 = *(void ***)(v38 + 16);
  int v41 = *(void ***)(v38 + 24);
  float v42 = *(float **)(v38 + 32);
  float v43 = *(void **)(v38 + 40);
  __dst = *(void **)(v38 + 48);
  float v104 = *(float **)(v38 + 56);
  float v44 = *(float **)(v38 + 80);
  float v105 = *(float **)(v38 + 72);
  float v106 = *(float **)(v38 + 64);
  float __C = *(float **)(v38 + 88);
  ASAFrontEnd::genericComputeMagnitudeSpectrum(*(ASAFrontEnd **)v38, *(const float **)(v37 + 72), *(float **)(v37 + 136), *(unsigned int *)(v37 + 4), *(_DWORD *)(v37 + 40), (void **)(v37 + 48), v40, v45);
  if (v39) {
    ASAFrontEnd::genericComputeMagnitudeSpectrum(v39, *(const float **)(v37 + 80), *(float **)(v37 + 144), *(unsigned int *)(v37 + 8), *(_DWORD *)(v37 + 44), (void **)(v37 + 56), v41, v46);
  }
  vDSP_mmul(*(const float **)(v37 + 96), 1, (const float *)v40, 1, v42, 1, *(unsigned int *)(v37 + 12), 1uLL, *(unsigned int *)(v37 + 40));
  float v47 = *(const float **)(v37 + 136);
  *(_DWORD *)long long buf = *(_DWORD *)(v37 + 4);
  vDSP_vsadd(v47, 1, &VADGenUtils::MagOffset_MagFloorMinus100DB, *(float **)(v37 + 160), 1, *(int *)buf);
  vvlogf(*(float **)(v37 + 160), *(const float **)(v37 + 160), (const int *)buf);
  bzero((void *)(*(void *)(v37 + 160) + 4 * *(unsigned int *)(v37 + 4)), 4 * *(unsigned int *)(v37 + 4));
  *(void *)size_t v107 = *(void *)(v37 + 160);
  *(void *)&v107[2] = *(void *)v107 + 4 * *(unsigned int *)(v37 + 4);
  MultiRadixFFT_CplxInPlaceTransform(*(void **)(v37 + 64), (float **)v107, -1);
  float __B = 1.0 / (float)*(unsigned int *)(v37 + 4);
  vDSP_vsmul(*(const float **)(v37 + 160), 1, &__B, v44, 1, *(unsigned int *)(v37 + 40));
  vDSP_vmul(*(const float **)(v37 + 120), 1, v44, 1, __C, 1, *(unsigned int *)(v37 + 40));
  memcpy(__dst, v43, 4 * *(unsigned int *)(v37 + 40));
  vDSP_mmul(*(const float **)(v37 + 104), 1, v42, 1, (float *)v43, 1, *(unsigned int *)(v37 + 40), 1uLL, *(unsigned int *)(v37 + 12));
  vDSP_vthr((const float *)v43, 1, (const float *)(v37 + 36), (float *)v43, 1, *(unsigned int *)(v37 + 40));
  vDSP_vsub((const float *)v43, 1, (const float *)v40, 1, v104, 1, *(unsigned int *)(v37 + 40));
  v107[0] = *(_DWORD *)(v37 + 12);
  vvlogf(*(float **)(v37 + 152), v42, v107);
  vDSP_mmul(*(const float **)(v37 + 128), 1, *(const float **)(v37 + 152), 1, v106, 1, *(unsigned int *)(v37 + 16), 1uLL, *(unsigned int *)(v37 + 12));
  vDSP_vmul(*(const float **)(v37 + 112), 1, v106, 1, v105, 1, *(unsigned int *)(v37 + 16));
  float v48 = *(_OWORD **)(a1 + 216);
  long long v50 = v48[1];
  *(_OWORD *)size_t v107 = *v48;
  int v49 = *(ASAFeatures **)v107;
  long long v108 = v50;
  long long v51 = v48[3];
  long long v109 = v48[2];
  long long v110 = v51;
  long long v52 = v48[5];
  long long v111 = v48[4];
  long long v112 = v52;
  int v53 = *(float **)(a1 + 240);
  int v54 = *(_DWORD *)(*(void *)(a1 + 248) + 104);
  int v55 = *(_DWORD ***)(a1 + 264);
  ++*((_DWORD *)v53 + 252);
  float v56 = ASAFeatures::computeCenteredRMS(v49, *(unsigned int *)(*(void *)v53 + 64), *(_DWORD *)(*(void *)v53 + 16));
  v53[245] = v56;
  float v57 = log10(v56);
  v53[246] = v57 * 20.0;
  *((unsigned char *)v53 + 976) = 0;
  uint64_t v59 = *((void *)v53 + 16);
  uint64_t v58 = *((void *)v53 + 17);
  if (v59 != v58)
  {
    BOOL v60 = *v55;
    int v61 = 1;
    do
    {
      if ((v61 & v54) != 0)
      {
        unint64_t v62 = *(void (**)(void *, int *))v59;
        uint64_t v63 = *(void *)(v59 + 8);
        float v64 = (void *)((char *)v53 + (v63 >> 1));
        if (v63) {
          unint64_t v62 = *(void (**)(void *, int *))(*v64 + v62);
        }
        v62(v64, v107);
        uint64_t v58 = *((void *)v53 + 17);
      }
      else
      {
        int v65 = 0;
      }
      *v60++ = v65;
      v61 *= 2;
      v59 += 16;
    }
    while (v59 != v58);
  }
  *((unsigned char *)v53 + 976) = 1;
  uint64_t v66 = *(void *)(a1 + 264);
  int v67 = *(const float **)v66;
  if (*(void *)(v66 + 8) == *(void *)v66) {
    goto LABEL_69;
  }
  uint64_t v68 = *(void *)(a1 + 280);
  int64_t v69 = *(_DWORD **)v68;
  if (*(void *)(v68 + 8) == *(void *)v68) {
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v70 = *(void *)(a1 + 272);
  int64_t v71 = *(float **)v70;
  if (*(void *)(v70 + 8) == *(void *)v70) {
    goto LABEL_69;
  }
  uint64_t v72 = *(void *)(a1 + 248);
  uint64_t v73 = *(float **)(v72 + 112);
  if (*(float **)(v72 + 120) == v73) {
    goto LABEL_70;
  }
  float v74 = *(const float **)(v72 + 8);
  if (*(const float **)(v72 + 16) == v74 || (float v75 = *(const float **)(v72 + 32), *(const float **)(v72 + 40) == v75)) {
LABEL_69:
  }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  vDSP_vam(v67, 1, v74, 1, v75, 1, v73, 1, *(unsigned int *)(v72 + 4));
  unint64_t v76 = *(const float **)(v72 + 112);
  if (*(const float **)(v72 + 120) == v76 || (int v77 = *(const float **)(v72 + 56), *(const float **)(v72 + 64) == v77)) {
LABEL_70:
  }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)v72, *(_DWORD *)(v72 + 4), 1.0, v77, *(_DWORD *)(v72 + 4), v76, 1, 0.0, v71, 1);
  if (!*(unsigned char *)(v72 + 136))
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      float v101 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_79;
      }
    }
    else
    {
      float v101 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      int v115 = "FeatureSelection.cpp";
      __int16 v116 = 1024;
      int v117 = 119;
      _os_log_impl(&dword_1BB0CE000, v101, OS_LOG_TYPE_ERROR, "%25s:%-5d Non-binary threshold is unsupported.", buf, 0x12u);
    }
LABEL_79:
    abort();
  }
  char v78 = *(float ***)(v72 + 80);
  uint64_t v79 = *(float ***)(v72 + 88);
  while (v78 != v79)
  {
    if (v78[1] == *v78) {
      goto LABEL_70;
    }
    float v80 = *v71++;
    *v69++ = v80 >= **v78;
    v78 += 3;
  }
  uint64_t v81 = 0;
  unint64_t v82 = 0;
  float v83 = *(uint64_t **)(a1 + 264);
  uint64_t v84 = *v83;
  uint64_t v85 = (v83[1] - *v83) >> 2;
  do
  {
    if (v85 == v82) {
      goto LABEL_70;
    }
    uint64_t v86 = a6[3];
    unint64_t v87 = (a6[4] - v86) >> 2;
    if (v87 <= v82) {
      goto LABEL_67;
    }
    *(_DWORD *)(v86 + 4 * v82) = *(_DWORD *)(v84 + 4 * v82);
    uint64_t v88 = a6[7];
    unint64_t v89 = (a6[8] - v88) >> 4;
    if (v89 <= v82) {
      goto LABEL_67;
    }
    uint64_t v90 = v88 + v81;
    *(void *)(v90 + 8) = *(void *)(a4 + 8);
    *(double *)uint64_t v90 = *(double *)(a4 + 8) * *(double *)(a1 + 40);
    ++v82;
    v81 += 16;
  }
  while (v81 != 304);
  float v91 = **(unsigned int ***)(a1 + 280);
  uint64_t v92 = *(void *)(*(void *)(a1 + 280) + 8) - (void)v91;
  if (v92)
  {
    unint64_t v93 = v92 >> 2;
    uint64_t v94 = 19;
    if (v87 <= 0x13) {
      uint64_t v95 = 19;
    }
    else {
      uint64_t v95 = v87;
    }
    uint64_t v96 = v95 - 19;
    if (v93 <= 1) {
      unint64_t v93 = 1;
    }
    if (v89 > 0x13) {
      uint64_t v94 = v89;
    }
    uint64_t v97 = v94 - 19;
    float v98 = (float *)(v86 + 76);
    float v99 = (double *)(v88 + 312);
    while (v96)
    {
      *float v98 = (float)*v91;
      if (!v97) {
        break;
      }
      *float v99 = *(double *)(a4 + 8);
      --v97;
      ++v91;
      *(v99 - freeMatrix(*((_DWORD *)this + 17), this + 1) = *(double *)(a4 + 8) * *(double *)(a1 + 40);
      --v96;
      ++v98;
      v99 += 2;
      if (!--v93) {
        goto LABEL_66;
      }
    }
LABEL_67:
    __assert_rtn("operator[]", "FeatureTimeSeries.h", 91, "index < mArray.size()");
  }
LABEL_66:
  ++*(_DWORD *)(a1 + 12);
  return 0;
}

uint64_t ASAFeaturesDSPChain::Uninitialize(ASAFeaturesDSPChain *this)
{
  *((unsigned char *)this + 8) = 0;
  uint64_t v2 = *((void *)this + 27);
  if (v2)
  {
    if (*(void *)v2)
    {
      free(*(void **)v2);
      uint64_t v2 = *((void *)this + 27);
    }
    long long v3 = *(void **)(v2 + 8);
    if (v3)
    {
      free(v3);
      uint64_t v2 = *((void *)this + 27);
    }
    long long v4 = *(void **)(v2 + 16);
    if (v4)
    {
      free(v4);
      uint64_t v2 = *((void *)this + 27);
    }
    float v5 = *(void **)(v2 + 24);
    if (v5)
    {
      free(v5);
      uint64_t v2 = *((void *)this + 27);
    }
    float v6 = *(void **)(v2 + 32);
    if (v6)
    {
      free(v6);
      uint64_t v2 = *((void *)this + 27);
    }
    uint64_t v7 = *(void **)(v2 + 40);
    if (v7)
    {
      free(v7);
      uint64_t v2 = *((void *)this + 27);
    }
    uint64_t v8 = *(void **)(v2 + 48);
    if (v8)
    {
      free(v8);
      uint64_t v2 = *((void *)this + 27);
    }
    float v9 = *(void **)(v2 + 56);
    if (v9)
    {
      free(v9);
      uint64_t v2 = *((void *)this + 27);
    }
    uint64_t v10 = *(void **)(v2 + 64);
    if (v10)
    {
      free(v10);
      uint64_t v2 = *((void *)this + 27);
    }
    float v11 = *(void **)(v2 + 72);
    if (v11)
    {
      free(v11);
      uint64_t v2 = *((void *)this + 27);
    }
    float v12 = *(void **)(v2 + 80);
    if (v12)
    {
      free(v12);
      uint64_t v2 = *((void *)this + 27);
    }
    uint64_t v13 = *(void **)(v2 + 88);
    if (v13) {
      free(v13);
    }
  }
  *((_DWORD *)this + 3) = 0;
  return 0;
}

void ASAFeaturesDSPChain::Initialize(uint64_t a1, void *a2, const __CFDictionary *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v9, "");
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  FeaturesDSPChain::InitializeInputOutputBufferSizes(a1, a2, a3, 19);
  if (!v6) {
    operator new();
  }
  std::string::__assign_external(&v9, "Failed to initialize input and output buffer sizes.", 0x33uLL);
  if (EndpointVAD2LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
  }
  if (EndpointVAD2LogScope(void)::scope)
  {
    uint64_t v7 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
    if (!*(void *)EndpointVAD2LogScope(void)::scope) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = &v9;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    int __B = 136315650;
    __B_4 = "ASAFeaturesDSPChain.cpp";
    __int16 v12 = 1024;
    int v13 = 660;
    __int16 v14 = 2080;
    uint64_t v15 = v8;
    _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing ASA features DSP chain: %s", (uint8_t *)&__B, 0x1Cu);
  }
LABEL_12:
  abort();
}

void sub_1BB5D48B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  MEMORY[0x1C185D370](v70, 0x10C402FEFCB83);
  if (__p) {
    operator delete(__p);
  }
  operator delete(v71);
  if (a52) {
    operator delete(a52);
  }
  if (a56) {
    operator delete(a56);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  a59 = &a62;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  float v74 = *(void **)(v72 - 192);
  if (v74)
  {
    *(void *)(v72 - 184) = v74;
    operator delete(v74);
  }
  if (*(char *)(v72 - 201) < 0) {
    operator delete(*(void **)(v72 - 224));
  }
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<ASAFrontEnd>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    long long v3 = (void *)v2[21];
    if (v3) {
      free(v3);
    }
    long long v4 = (void *)v2[20];
    if (v4) {
      free(v4);
    }
    float v5 = (void *)v2[19];
    if (v5) {
      free(v5);
    }
    int v6 = (void *)v2[18];
    if (v6) {
      free(v6);
    }
    uint64_t v7 = (void *)v2[17];
    if (v7) {
      free(v7);
    }
    uint64_t v8 = (void *)v2[16];
    if (v8) {
      free(v8);
    }
    std::string v9 = (void *)v2[15];
    if (v9) {
      free(v9);
    }
    uint64_t v10 = (void *)v2[14];
    if (v10) {
      free(v10);
    }
    float v11 = (void *)v2[13];
    if (v11) {
      free(v11);
    }
    __int16 v12 = (void *)v2[12];
    if (v12) {
      free(v12);
    }
    int v13 = (void *)v2[11];
    if (v13) {
      free(v13);
    }
    __int16 v14 = (void *)v2[10];
    if (v14) {
      free(v14);
    }
    uint64_t v15 = (void *)v2[9];
    if (v15) {
      free(v15);
    }
    MultiRadixFFT_Dispose(v2[8]);
    MultiRadixFFT_Dispose(v2[7]);
    MultiRadixFFT_Dispose(v2[6]);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<FeatureSelection>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    long long v3 = *(void **)(v2 + 112);
    if (v3)
    {
      *(void *)(v2 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v3;
      operator delete(v3);
    }
    uint64_t v7 = (void **)(v2 + 80);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
    long long v4 = *(void **)(v2 + 56);
    if (v4)
    {
      *(void *)(v2 + 64) = v4;
      operator delete(v4);
    }
    float v5 = *(void **)(v2 + 32);
    if (v5)
    {
      *(void *)(v2 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v5;
      operator delete(v5);
    }
    int v6 = *(void **)(v2 + 8);
    if (v6)
    {
      *(void *)(v2 + 16) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t *std::unique_ptr<ASAFeatures>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(v2 + 732);
    if (v3)
    {
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v5 = *(void *)(v2 + 200);
        uint64_t v6 = *(void *)(v2 + 208) - v5;
        if (!v6) {
          break;
        }
        if (i >= v6 >> 3) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v7 = *(void *)(v5 + 8 * i);
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
          unint64_t v3 = *(unsigned int *)(v2 + 732);
        }
      }
    }
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(v2 + 176);
      if (v8 >= (*(void *)(v2 + 184) - v9) >> 3) {
        break;
      }
      uint64_t v10 = *(void *)(v9 + 8 * v8);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      if (++v8 == 18)
      {
        unint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = *(void *)(v2 + 152);
          if (v11 >= (*(void *)(v2 + 160) - v12) >> 3) {
            break;
          }
          uint64_t v13 = *(void *)(v12 + 8 * v11);
          if (v13)
          {
            __int16 v14 = *(void **)(v13 + 16);
            if (v14)
            {
              *(void *)(v13 + 24) = v14;
              operator delete(v14);
            }
            MEMORY[0x1C185D370](v13, 0x1080C400DE93FC6);
          }
          if (++v11 == 18)
          {
            uint64_t v15 = *(void *)(v2 + 592);
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
            uint64_t v16 = *(void **)(v2 + 584);
            if (v16) {
              free(v16);
            }
            float v17 = *(void **)(v2 + 576);
            if (v17) {
              free(v17);
            }
            float v18 = *(void **)(v2 + 568);
            if (v18) {
              free(v18);
            }
            float v19 = *(void **)(v2 + 560);
            if (v19) {
              free(v19);
            }
            float v20 = *(void **)(v2 + 712);
            if (v20) {
              free(v20);
            }
            unsigned int v21 = *(void **)(v2 + 704);
            if (v21) {
              free(v21);
            }
            uint64_t v22 = *(void **)(v2 + 552);
            if (v22) {
              free(v22);
            }
            unsigned int v23 = *(void **)(v2 + 696);
            if (v23) {
              free(v23);
            }
            int v24 = *(void **)(v2 + 688);
            if (v24) {
              free(v24);
            }
            unsigned int v25 = *(void **)(v2 + 680);
            if (v25) {
              free(v25);
            }
            unsigned int v26 = *(void **)(v2 + 672);
            if (v26) {
              free(v26);
            }
            uint64_t v27 = *(void **)(v2 + 664);
            if (v27) {
              free(v27);
            }
            uint64_t v28 = *(void **)(v2 + 544);
            if (v28) {
              free(v28);
            }
            unsigned int v29 = *(void **)(v2 + 536);
            if (v29) {
              free(v29);
            }
            size_t v30 = *(void **)(v2 + 528);
            if (v30) {
              free(v30);
            }
            BOOL v31 = *(void **)(v2 + 520);
            if (v31) {
              free(v31);
            }
            uint64_t v32 = *(void **)(v2 + 512);
            if (v32) {
              free(v32);
            }
            uint64_t v33 = *(void **)(v2 + 504);
            if (v33) {
              free(v33);
            }
            unsigned int v34 = *(void **)(v2 + 496);
            if (v34) {
              free(v34);
            }
            size_t v35 = *(void **)(v2 + 488);
            if (v35) {
              free(v35);
            }
            uint64_t v36 = *(void **)(v2 + 480);
            if (v36) {
              free(v36);
            }
            uint64_t v37 = *(void **)(v2 + 472);
            if (v37) {
              free(v37);
            }
            uint64_t v38 = *(void **)(v2 + 464);
            if (v38) {
              free(v38);
            }
            float v39 = *(void **)(v2 + 456);
            if (v39) {
              free(v39);
            }
            float v40 = *(void **)(v2 + 448);
            if (v40) {
              free(v40);
            }
            int v41 = *(void **)(v2 + 440);
            if (v41) {
              free(v41);
            }
            float v42 = *(void **)(v2 + 432);
            if (v42) {
              free(v42);
            }
            float v43 = *(void **)(v2 + 424);
            if (v43) {
              free(v43);
            }
            float v44 = *(void **)(v2 + 416);
            if (v44) {
              free(v44);
            }
            float v45 = *(void **)(v2 + 408);
            if (v45) {
              free(v45);
            }
            float v46 = *(void **)(v2 + 400);
            if (v46)
            {
              if (*v46) {
                MEMORY[0x1C185D340](*v46, 0x1000C8052888210);
              }
              MEMORY[0x1C185D370](v46, 0x1080C40FC6463CFLL);
            }
            float v47 = *(void **)(v2 + 384);
            if (v47) {
              free(v47);
            }
            float v48 = *(void **)(v2 + 376);
            if (v48) {
              free(v48);
            }
            int v49 = *(void **)(v2 + 368);
            if (v49) {
              free(v49);
            }
            long long v50 = *(void **)(v2 + 360);
            if (v50) {
              free(v50);
            }
            long long v51 = *(void **)(v2 + 352);
            if (v51) {
              free(v51);
            }
            long long v52 = *(void **)(v2 + 344);
            if (v52) {
              free(v52);
            }
            int v53 = *(void **)(v2 + 656);
            if (v53) {
              free(v53);
            }
            int v54 = *(void ****)(v2 + 648);
            if (v54)
            {
              int v55 = v54[1];
              if (v55 != *v54)
              {
                unint64_t v56 = 0;
                int v55 = *v54;
                do
                {
                  if (v55[v56])
                  {
                    free(v55[v56]);
                    int v54 = *(void ****)(v2 + 648);
                    int v55 = *v54;
                  }
                  ++v56;
                }
                while (v56 < v54[1] - v55);
              }
              if (v55)
              {
                v54[1] = v55;
                operator delete(v55);
              }
              MEMORY[0x1C185D370](v54, 0x80C40D6874129);
            }
            float v57 = *(void **)(v2 + 640);
            if (v57) {
              free(v57);
            }
            uint64_t v58 = *(void **)(v2 + 632);
            if (v58) {
              free(v58);
            }
            uint64_t v59 = *(void **)(v2 + 392);
            if (v59)
            {
              if (*v59) {
                MEMORY[0x1C185D340](*v59, 0x1000C8052888210);
              }
              MEMORY[0x1C185D370](v59, 0x1080C40FC6463CFLL);
            }
            BOOL v60 = *(void **)(v2 + 336);
            if (v60) {
              free(v60);
            }
            int v61 = *(void **)(v2 + 328);
            if (v61) {
              free(v61);
            }
            unint64_t v62 = *(void **)(v2 + 320);
            if (v62) {
              free(v62);
            }
            uint64_t v63 = *(void **)(v2 + 312);
            if (v63) {
              free(v63);
            }
            float v64 = *(void **)(v2 + 304);
            if (v64) {
              free(v64);
            }
            int v65 = *(void **)(v2 + 296);
            if (v65) {
              free(v65);
            }
            uint64_t v66 = *(void **)(v2 + 288);
            if (v66) {
              free(v66);
            }
            int v67 = *(void **)(v2 + 280);
            if (v67) {
              free(v67);
            }
            uint64_t v68 = *(void **)(v2 + 272);
            if (v68) {
              free(v68);
            }
            int64_t v69 = *(void **)(v2 + 264);
            if (v69) {
              free(v69);
            }
            uint64_t v70 = *(void **)(v2 + 256);
            if (v70) {
              free(v70);
            }
            int64_t v71 = *(void **)(v2 + 248);
            if (v71) {
              free(v71);
            }
            uint64_t v72 = *(void *)(v2 + 624);
            if (v72)
            {
              uint64_t v85 = *(void ***)(v2 + 624);
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v85);
              MEMORY[0x1C185D370](v72, 0x20C40960023A9);
            }
            uint64_t v73 = *(void **)(v2 + 616);
            if (v73) {
              free(v73);
            }
            float v74 = *(void **)(v2 + 608);
            if (v74) {
              free(v74);
            }
            float v75 = *(void **)(v2 + 600);
            if (v75) {
              free(v75);
            }
            unint64_t v76 = *(void **)(v2 + 240);
            if (v76) {
              free(v76);
            }
            int v77 = *(void **)(v2 + 232);
            if (v77) {
              free(v77);
            }
            char v78 = *(void **)(v2 + 224);
            if (v78) {
              free(v78);
            }
            uint64_t v79 = *(void **)(v2 + 768);
            if (v79)
            {
              *(void *)(v2 + 776) = v79;
              operator delete(v79);
            }
            float v80 = *(void **)(v2 + 744);
            if (v80)
            {
              *(void *)(v2 + 752) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v2 + 200);
            if (v81)
            {
              *(void *)(v2 + 208) = v81;
              operator delete(v81);
            }
            unint64_t v82 = *(void **)(v2 + 176);
            if (v82)
            {
              *(void *)(v2 + 184) = v82;
              operator delete(v82);
            }
            float v83 = *(void **)(v2 + 152);
            if (v83)
            {
              *(void *)(v2 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v83;
              operator delete(v83);
            }
            uint64_t v84 = *(void **)(v2 + 128);
            if (v84)
            {
              *(void *)(v2 + 136) = v84;
              operator delete(v84);
            }
            JUMPOUT(0x1C185D370);
          }
        }
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
    }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  }
  return result;
}

uint64_t *std::unique_ptr<ASAPreprocessor>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 16);
    if (v3) {
      free(v3);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void ASAFeaturesDSPChain::~ASAFeaturesDSPChain(ASAFeaturesDSPChain *this)
{
  ASAFeaturesDSPChain::~ASAFeaturesDSPChain(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(void *)this = &unk_1F14B8488;
  ASAFeaturesDSPChain::Uninitialize(this);
  uint64_t v2 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v2) {
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v2);
  }
  unint64_t v3 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v3) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v3);
  }
  long long v4 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v4) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v4);
  }
  std::unique_ptr<FeatureSelection>::reset[abi:ne180100]((uint64_t *)this + 31, 0);
  std::unique_ptr<ASAFeatures>::reset[abi:ne180100]((uint64_t *)this + 30, 0);
  std::unique_ptr<ASAFrontEnd>::reset[abi:ne180100]((uint64_t **)this + 29, 0);
  uint64_t v5 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v5) {
    MEMORY[0x1C185D370](v5, 0x1000C4027586B93);
  }
  uint64_t v6 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v6) {
    MEMORY[0x1C185D370](v6, 0x80C408F261F10);
  }
  uint64_t v7 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  unint64_t v8 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  unint64_t v11 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 21);
  *((void *)this + 2freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 20);
  *((void *)this + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  __int16 v14 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  float v17 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  float v18 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  float v19 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  float v20 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  unsigned int v21 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *((void *)this + 11);
  *((void *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  unsigned int v23 = *((void *)this + 10);
  *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  if (v23) {
    MEMORY[0x1C185D370](v23, 0x1000C40451B5BE8);
  }
  int v24 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v24) {
    MEMORY[0x1C185D370](v24, 0x1000C40451B5BE8);
  }
  std::unique_ptr<ASAPreprocessor>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  unsigned int v25 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v25) {
    MEMORY[0x1C185D370](v25, 0x1000C400A747E1ELL);
  }
}

uint64_t non-virtual thunk to'AUEndpointVAD2::HandleEvent(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return AUEndpointVAD2::HandleEvent(a1 - 528, a2, a3, a4, a5, a6);
}

uint64_t AUEndpointVAD2::HandleEvent(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = result;
  uint64_t v10 = *(uint64_t **)(result + 600);
  if (v10 != *(uint64_t **)(result + 608))
  {
    do
    {
      uint64_t v13 = *v10++;
      BOOL result = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a2, a3, a4, a5, a6);
    }
    while (v10 != *(uint64_t **)(v9 + 608));
  }
  int v14 = *a2;
  if ((*a2 - 1) < 2)
  {
    *(void *)(v9 + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(a3 + 8);
    *(void *)(v9 + 568) = *(void *)(a4 + 8);
  }
  else
  {
    if ((v14 - 3) >= 2) {
      return result;
    }
    *(void *)(v9 + 584) = *(void *)(a3 + 8);
    *(void *)(v9 + 592) = *(void *)(a4 + 8);
  }
  switch(v14)
  {
    case 1:
      *(_DWORD *)(v9 + 556) = 1;
      uint64_t v15 = 64033;
      goto LABEL_13;
    case 2:
      *(_DWORD *)(v9 + 556) = 0;
      uint64_t v15 = 64034;
      goto LABEL_13;
    case 3:
      *(_DWORD *)(v9 + 576) = 1;
      uint64_t v15 = 64035;
      goto LABEL_13;
    case 4:
      *(_DWORD *)(v9 + 576) = 0;
      uint64_t v15 = 64036;
LABEL_13:
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v9 + 432);
      BOOL result = v16(v9, v15, 0, 0);
      break;
    default:
      return result;
  }
  return result;
}

void non-virtual thunk to'AUEndpointVAD2::~AUEndpointVAD2(AUEndpointVAD2 *this)
{
  AUEndpointVAD2::~AUEndpointVAD2((AUEndpointVAD2 *)((char *)this - 528));

  JUMPOUT(0x1C185D370);
}

{
  AUEndpointVAD2::~AUEndpointVAD2((AUEndpointVAD2 *)((char *)this - 528));
}

void AUEndpointVAD2::~AUEndpointVAD2(AUEndpointVAD2 *this)
{
  *(void *)this = &unk_1F14B84D8;
  *((void *)this + 66) = &unk_1F14B8748;
  uint64_t v2 = *((void *)this + 68);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 68) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 75);
  if (v3)
  {
    *((void *)this + 76) = v3;
    operator delete(v3);
  }

  ausdk::AUBase::~AUBase(this);
}

{
  uint64_t vars8;

  AUEndpointVAD2::~AUEndpointVAD2(this);

  JUMPOUT(0x1C185D370);
}

uint64_t AUEndpointVAD2::SetInputOutputAudioFormat(AUEndpointVAD2 *this, double *a2)
{
  *(double *)uint64_t v6 = *a2;
  v6[1] = 0x296C70636DLL;
  long long v7 = xmmword_1BB87A680;
  uint64_t v8 = 32;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)Element + 56))(Element, v6);
  if (!result)
  {
    uint64_t v5 = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 128), 0);
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 56))(v5, v6);
  }
  return result;
}

uint64_t AUEndpointVAD2::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 536) = a2;
  return this;
}

uint64_t AUEndpointVAD2::ShouldBypassEffect(AUEndpointVAD2 *this)
{
  return *((unsigned __int8 *)this + 536);
}

BOOL AUEndpointVAD2::ValidFormat(AUEndpointVAD2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUEndpointVAD2::SupportedNumChannels(AUEndpointVAD2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUEndpointVAD2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUEndpointVAD2::StreamFormatWritable(AUEndpointVAD2 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUEndpointVAD2::SupportsTail(AUEndpointVAD2 *this)
{
  return 1;
}

double AUEndpointVAD2::GetTailTime(AUEndpointVAD2 *this)
{
  return 0.0;
}

double AUEndpointVAD2::GetLatency(AUEndpointVAD2 *this)
{
  uint64_t v1 = (float *)*((void *)this + 68);
  float v2 = v1[30];
  if (v2 <= v1[31]) {
    float v2 = v1[31];
  }
  if (v1[29] > v2) {
    float v2 = v1[29];
  }
  return (float)(v1[28] + v2);
}

uint64_t AUEndpointVAD2::GetParameterInfo(AUEndpointVAD2 *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  a4->AudioUnitParameterOptions flags = 0x40000000;
  a4->unitName = 0;
  return 4294956418;
}

uint64_t AUEndpointVAD2::Render(AUEndpointVAD2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) < a4) {
    return 4294956422;
  }
  uint64_t v9 = (AUEndpointVAD2 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v11 = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 128), 0);
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v13 = ausdk::AUScope::SafeGetElement(v9, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    return (*(uint64_t (**)(AUEndpointVAD2 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUEndpointVAD2::ProcessMultipleBufferLists(AUEndpointVAD2 *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v10 = *((_DWORD *)this + 156);
  *((_DWORD *)this + 156) = v10 + 1;
  double v11 = *((double *)this + 80);
  if (!v10)
  {
    unint64_t v37 = *((void *)this + 35);
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v38) = *(_DWORD *)&__p[4];
    LODWORD(v39) = *(_DWORD *)__p;
    *((double *)this + 79) = (double)v37 / ((double)v38 / (double)v39 * 1000000000.0);
    for (unint64_t i = (void *)*((void *)this + 75); i != *((void **)this + 76); ++i)
    {
      uint64_t v41 = *i;
      float v42 = (void *)(*i + 80);
      float v44 = (void **)(*i + 104);
      float v43 = *v44;
      *(void *)(v41 + 88) = *v42;
      *(void *)(v41 + 112) = v43;
      *(void *)(v41 + 136) = *(void *)(v41 + 128);
      uint64_t v45 = *(void *)(v41 + 32);
      *(void *)(v41 + 16) = *(void *)(v41 + 8);
      *(void *)(v41 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v45;
      *(void *)(v41 + 64) = *(void *)(v41 + 56);
      std::vector<EndpointDecisionLayerVAD2::Decision>::reserve((uint64_t)v42);
      std::vector<double>::reserve(v44, 8uLL);
      std::vector<double>::reserve((void **)(v41 + 128), 8uLL);
      std::vector<EndpointDecisionLayerVAD2::Decision>::reserve(v41 + 8);
      std::vector<double>::reserve((void **)(v41 + 32), 8uLL);
      std::vector<double>::reserve((void **)(v41 + 56), 8uLL);
      *(void *)(v41 + 152) = 0;
    }
  }
  double v12 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0) + 80);
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a3)
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      float v46 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        return 4294956422;
      }
    }
    else
    {
      float v46 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      int v47 = *((_DWORD *)this + 84);
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "AUEndpointVAD2.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 900;
      __int16 v58 = 1024;
      int v59 = a3;
      __int16 v60 = 1024;
      int v61 = v47;
      _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Incorrect number of input samples! Received %d, but expected %d.", __p, 0x1Eu);
    }
    return 4294956422;
  }
  if (((*(uint64_t (**)(AUEndpointVAD2 *))(*(void *)this + 576))(this) & 1) == 0)
  {
    uint64_t v14 = *((void *)this + 68);
    uint64_t v15 = *a5;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    ++*(_DWORD *)(v14 + 384);
    int v16 = *(_DWORD *)(*(void *)(v14 + 64) + 88);
    double v17 = v11 / v12;
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v14 + 32), v15, v17, a3);
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v14 + 48), v15, v17, a3);
    unsigned int v18 = *(_DWORD *)(*(void *)(v14 + 64) + 88) - v16;
    *(_DWORD *)(v14 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v18;
    if (v18)
    {
      for (unsigned int j = 0; j < v18; ++j)
      {
        ++*(_DWORD *)(v14 + 384);
        uint64_t v20 = *(void *)(v14 + 64);
        int v56 = j - v18;
        VectorTimeSeriesSynchronizer<float>::GetSynchronizedVector(v20, &v56, *(void *)(v14 + 272));
        uint64_t v21 = *(void *)(v14 + 272);
        uint64_t v22 = *(float **)(v21 + 24);
        uint64_t v23 = *(void *)(v21 + 32) - (void)v22;
        if ((v23 & 0x3FFFFFFFCLL) != 0)
        {
          unsigned int v24 = 0;
          unint64_t v25 = (unint64_t)v23 >> 2;
          unsigned int v26 = **(int ***)(v14 + 296);
          unint64_t v27 = v23 >> 2;
          uint64_t v28 = ((unint64_t)v23 >> 2);
          unint64_t v29 = (v25 - 1);
          do
          {
            if (v27 <= v29) {
              __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
            }
            float v30 = *v22++;
            float v31 = (float)(unint64_t)(v30 + 0.5);
            int v32 = *v26++;
            v24 += v32 * v31;
            --v28;
          }
          while (v28);
        }
        else
        {
          unsigned int v24 = 0;
        }
        uint64_t v33 = *(void *)(v14 + 96);
        if (*(unsigned char *)(v14 + 288))
        {
          double v13 = MixViterbiProd::Update(v33, *(_DWORD *)(v14 + 292), v24, (_OWORD *)(v21 + 48));
        }
        else
        {
          double v13 = MixViterbiProd::Initialize(v33, v24, (_OWORD *)(v21 + 48));
          *(unsigned char *)(v14 + 288) = 1;
        }
        *(_DWORD *)(v14 + 292) = v24;
        unsigned int v18 = *(_DWORD *)(v14 + 80);
      }
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(*(void **)__p);
    }
    if (!*(_DWORD *)(v14 + 28))
    {
      *(double *)long long __p = *(double *)(v14 + 16) * v17;
      *(double *)&__p[8] = v17;
      double v48 = *(float *)(v14 + 112);
      uint64_t v49 = *(void *)(v14 + 96);
      int v50 = *(unsigned __int8 *)(v49 + 232);
      double v51 = 0.0;
      if (!*(unsigned char *)(v49 + 232))
      {
        MRRingBuffer<DataTimeStamp>::GetSample(*(void *)(v49 + 192), *(_DWORD *)(v49 + 224) - 1);
        double v51 = v52;
      }
      double v53 = v17 - v48;
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v14 + 336));
      *(void *)(v14 + 32std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(v14 + 312);
      uint64_t v54 = *(void *)(v14 + 96);
      if (v50 || v53 > v51)
      {
        int v56 = 0;
        if (MixViterbiProd::getForceDecodeTimeFramesRelativeToPresent((MixViterbiProd *)v54, v53, &v56)
          && v56 > *(_DWORD *)(v54 + 216))
        {
          MixViterbiProd::updateDecode(v54, (void *)(v14 + 336), (char **)(v14 + 312), v56);
        }
      }
      else
      {
        if (*(unsigned char *)(v54 + 232)) {
          __assert_rtn("DecodeFromConvergence", "MixViterbiProd.cpp", 166, "!mNeverConverged");
        }
        MixViterbiProd::updateDecode(*(void *)(v14 + 96), (void *)(v14 + 336), (char **)(v14 + 312), *(_DWORD *)(v54 + 224));
      }
      if (*(void *)(v14 + 344) != *(void *)(v14 + 336) && *(void *)(v14 + 320) != *(void *)(v14 + 312)) {
        EndpointVAD2::UpdateAndDispatchDecisions(v14, (void **)(v14 + 336), (uint64_t *)(v14 + 312), (uint64_t)__p, *(void *)(v14 + 104), *(_DWORD *)(v14 + 24), (unsigned char *)(v14 + 304));
      }
    }
  }
  mData = (*a5)->mBuffers[0].mData;
  size_t v35 = (*a7)->mBuffers[0].mData;
  if (mData != v35) {
    memcpy(v35, mData, (*a5)->mBuffers[0].mDataByteSize);
  }
  uint64_t result = 0;
  LODWORD(v13) = *((_DWORD *)this + 84);
  *((double *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((double *)this + 80) + (double)*(unint64_t *)&v13;
  return result;
}

void sub_1BB5D6490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUEndpointVAD2::CanScheduleParameters(AUEndpointVAD2 *this)
{
  return 0;
}

uint64_t AUEndpointVAD2::SetProperty(AUEndpointVAD2 *this, int a2, int a3, unsigned int a4, CFDictionaryRef theDict, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956431;
  switch(a2)
  {
    case 64010:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CommonParameters");
      CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ULDATParameters");
      CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ASAParameters");
      CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ViterbiParameters");
      EndpointVAD2::SetProperties(Value, (CFTypeRef *)(*((void *)this + 68) + 144), v17);
      EndpointVAD2::SetProperties(v14, (CFTypeRef *)(*((void *)this + 68) + 152), v18);
      EndpointVAD2::SetProperties(v15, (CFTypeRef *)(*((void *)this + 68) + 160), v19);
      EndpointVAD2::SetProperties(v16, (CFTypeRef *)(*((void *)this + 68) + 168), v20);
      uint64_t result = 0;
      *((unsigned char *)this + 552) = 1;
      return result;
    case 64011:
    case 64012:
    case 64013:
    case 64014:
    case 64015:
    case 64016:
    case 64017:
    case 64018:
    case 64019:
    case 64020:
    case 64021:
    case 64033:
    case 64034:
    case 64035:
    case 64036:
    case 64037:
    case 64038:
    case 64039:
    case 64040:
    case 64041:
    case 64042:
    case 64043:
    case 64044:
      return result;
    case 64022:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 28) = *(unsigned char *)theDict == 0;
      return result;
    case 64023:
      AUEndpointVAD2::AddHandler(this, (uint64_t)theDict);
      goto LABEL_25;
    case 64024:
      if (*(unsigned char *)theDict)
      {
        double v9 = *((double *)this + 80);
        uint64_t Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
        EndpointVAD2::DoneProcessingAudio(*((EndpointVAD2 **)this + 68), v9 / *(double *)(Element + 80));
      }
      goto LABEL_25;
    case 64025:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 112) = *(_DWORD *)theDict;
      return result;
    case 64026:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 116) = *(_DWORD *)theDict;
      return result;
    case 64027:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)theDict;
      return result;
    case 64028:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 124) = *(_DWORD *)theDict;
      return result;
    case 64029:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 128) = *(_DWORD *)theDict;
      return result;
    case 64030:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + ++*((_DWORD *)this + 132) = *(_DWORD *)theDict;
      return result;
    case 64031:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 136) = *(_DWORD *)theDict;
      return result;
    case 64032:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)theDict;
      return result;
    default:
      if (a2 == 3700) {
        return result;
      }
      if (a2 != 21) {
        return 4294956417;
      }
      if (a6 >= 4)
      {
        int v11 = *(_DWORD *)theDict;
        int v12 = *(_DWORD *)theDict != 0;
        if (v12 != (*(unsigned int (**)(AUEndpointVAD2 *))(*(void *)this + 576))(this)) {
          (*(void (**)(AUEndpointVAD2 *, BOOL))(*(void *)this + 584))(this, v11 != 0);
        }
LABEL_25:
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = 4294956445;
      }
      break;
  }
  return result;
}

void AUEndpointVAD2::AddHandler(void *a1, uint64_t a2)
{
  long long v4 = (void *)a1[76];
  unint64_t v5 = a1[77];
  if ((unint64_t)v4 >= v5)
  {
    long long v7 = (void *)a1[75];
    uint64_t v8 = v4 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    double v13 = &v12[8 * v8];
    *(void *)double v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v4 != v7)
    {
      do
      {
        uint64_t v14 = *--v4;
        *((void *)v13 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v14;
        v13 -= 8;
      }
      while (v4 != v7);
      long long v4 = (void *)a1[75];
    }
    a1[75] = v13;
    a1[76] = v6;
    a1[77] = &v12[8 * v11];
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *long long v4 = a2;
    uint64_t v6 = v4 + 1;
  }
  a1[76] = v6;
}

uint64_t AUEndpointVAD2::GetProperty(AUEndpointVAD2 *this, int a2, int a3, unsigned int a4, void **a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64010:
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v26 = 136315394;
      unint64_t v27 = "AUEndpointVAD2.cpp";
      __int16 v28 = 1024;
      int v29 = 447;
      unint64_t v25 = "%25s:%-5d The top-level parameter data structure is not saved internally! Instead, you should query specific"
            " AU properties individually.";
      goto LABEL_102;
    case 64011:
      uint64_t v10 = *(void *)(*((void *)this + 68) + 32);
      goto LABEL_19;
    case 64012:
      uint64_t v11 = *(void *)(*((void *)this + 68) + 32);
      goto LABEL_21;
    case 64013:
      uint64_t v12 = *(void *)(*((void *)this + 68) + 32);
      int v13 = *(_DWORD *)(v12 + 160);
      uint64_t v14 = *(void *)(v12 + 24);
      CFDictionaryRef v15 = (float **)a5;
      int v16 = 10;
      goto LABEL_27;
    case 64014:
      uint64_t result = 0;
      int v9 = 10;
      goto LABEL_80;
    case 64015:
      uint64_t result = 0;
      int v9 = *(_DWORD *)(*((void *)this + 68) + 84);
      goto LABEL_80;
    case 64016:
      uint64_t v10 = *(void *)(*((void *)this + 68) + 48);
LABEL_19:
      uint64_t v17 = *(void *)(*(void *)(v10 + 112) + 48);
      memcpy(a5[2], *(const void **)(v17 + 16), *(unsigned int *)(v17 + 12));
      uint64_t result = 0;
      int v18 = *(_DWORD *)(v17 + 12);
      *((_DWORD *)a5 + 2) = v18;
      *((_DWORD *)a5 + 3) = v18;
      return result;
    case 64017:
      uint64_t v11 = *(void *)(*((void *)this + 68) + 48);
LABEL_21:
      (*(void (**)(void, void **))(**(void **)(v11 + 8) + 40))(*(void *)(v11 + 8), a5);
      return 0;
    case 64018:
      uint64_t v19 = *((void *)this + 68);
      int v16 = *(_DWORD *)(v19 + 88) + 19;
      uint64_t v20 = *(void *)(v19 + 48);
      int v13 = *(_DWORD *)(v20 + 160);
      uint64_t v14 = *(void *)(v20 + 24);
      goto LABEL_26;
    case 64019:
      uint64_t result = 0;
      int v9 = *(_DWORD *)(*((void *)this + 68) + 88) + 19;
      goto LABEL_80;
    case 64020:
      uint64_t result = 0;
      int v9 = *(_DWORD *)(*((void *)this + 68) + 88);
      goto LABEL_80;
    case 64021:
      uint64_t v21 = *((void *)this + 68);
      int v16 = *(_DWORD *)(v21 + 92);
      int v13 = *(_DWORD *)(v21 + 80);
      uint64_t v14 = *(void *)(v21 + 64);
LABEL_26:
      CFDictionaryRef v15 = (float **)a5;
LABEL_27:
      EndpointVAD2::GetInterleavedFeaturesFromQueue(v15, v16, v13, v14);
      return 0;
    case 64022:
      uint64_t result = 0;
      *(unsigned char *)a5 = *(_DWORD *)(*((void *)this + 68) + 28) == 0;
      return result;
    case 64023:
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v26 = 136315394;
      unint64_t v27 = "AUEndpointVAD2.cpp";
      __int16 v28 = 1024;
      int v29 = 534;
      unint64_t v25 = "%25s:%-5d kAUEndpointVAD2Property_EventHandler is write-only.";
      goto LABEL_102;
    case 64024:
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v26 = 136315394;
      unint64_t v27 = "AUEndpointVAD2.cpp";
      __int16 v28 = 1024;
      int v29 = 539;
      unint64_t v25 = "%25s:%-5d kAUEndpointVAD2Property_DoneProcessingAudioForNonRealTimeDecode is write-only.";
      goto LABEL_102;
    case 64025:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 112);
      goto LABEL_48;
    case 64026:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 116);
      goto LABEL_48;
    case 64027:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 120);
      goto LABEL_48;
    case 64028:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 124);
      goto LABEL_48;
    case 64029:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 128);
      goto LABEL_48;
    case 64030:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 132);
      goto LABEL_48;
    case 64031:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 136);
      goto LABEL_48;
    case 64032:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 140);
LABEL_48:
      *(_DWORD *)a5 = v22;
      return result;
    case 64033:
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v26 = 136315394;
      unint64_t v27 = "AUEndpointVAD2.cpp";
      __int16 v28 = 1024;
      int v29 = 584;
      unint64_t v25 = "%25s:%-5d kAUEndpointVAD2Property_RecurrentVADSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_102;
    case 64034:
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v26 = 136315394;
      unint64_t v27 = "AUEndpointVAD2.cpp";
      __int16 v28 = 1024;
      int v29 = 589;
      unint64_t v25 = "%25s:%-5d kAUEndpointVAD2Property_RecurrentVADNonspeechDetectionEvent cannot be directly accessed.";
      goto LABEL_102;
    case 64035:
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v26 = 136315394;
      unint64_t v27 = "AUEndpointVAD2.cpp";
      __int16 v28 = 1024;
      int v29 = 594;
      unint64_t v25 = "%25s:%-5d kAUEndpointVAD2Property_EndpointerSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_102;
    case 64036:
      if (EndpointVAD2LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
      }
      if (EndpointVAD2LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
        if (!*(void *)EndpointVAD2LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 136315394;
        unint64_t v27 = "AUEndpointVAD2.cpp";
        __int16 v28 = 1024;
        int v29 = 599;
        unint64_t v25 = "%25s:%-5d kAUEndpointVAD2Property_EndpointerNonspeechDetectionEvent cannot be directly accessed.";
LABEL_102:
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v26, 0x12u);
      }
      return 4294956449;
    case 64037:
      uint64_t result = 0;
      int v9 = *((_DWORD *)this + 139);
      goto LABEL_80;
    case 64038:
      uint64_t result = 0;
      double v23 = *((double *)this + 70);
      goto LABEL_78;
    case 64039:
      uint64_t result = 0;
      double v23 = *((double *)this + 71);
      goto LABEL_78;
    case 64040:
      uint64_t result = 0;
      int v9 = *((_DWORD *)this + 144);
      goto LABEL_80;
    case 64041:
      uint64_t result = 0;
      double v23 = *((double *)this + 73);
      goto LABEL_78;
    case 64042:
      uint64_t result = 0;
      double v23 = *((double *)this + 74);
      goto LABEL_78;
    case 64043:
      uint64_t result = 0;
      uint64_t v24 = *(void *)(*((void *)this + 68) + 32);
      goto LABEL_77;
    case 64044:
      uint64_t result = 0;
      uint64_t v24 = *(void *)(*((void *)this + 68) + 48);
LABEL_77:
      double v23 = *(float *)(v24 + 164);
LABEL_78:
      *(double *)a5 = v23;
      return result;
    default:
      if (a2 == 3700)
      {
        uint64_t result = 0;
        int v9 = *((unsigned __int8 *)this + 376);
      }
      else
      {
        if (a2 != 21) {
          return 4294956417;
        }
        int v9 = (*(uint64_t (**)(AUEndpointVAD2 *))(*(void *)this + 576))(this);
        uint64_t result = 0;
      }
LABEL_80:
      *(_DWORD *)a5 = v9;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD2::GetPropertyInfo(AUEndpointVAD2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64010:
      char v7 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_6;
    case 64011:
    case 64013:
    case 64016:
    case 64018:
    case 64021:
      char v7 = 0;
      unsigned int v8 = 0;
      goto LABEL_21;
    case 64012:
    case 64017:
      char v7 = 0;
      unsigned int v8 = 40;
      goto LABEL_21;
    case 64014:
    case 64015:
    case 64019:
    case 64020:
    case 64037:
    case 64040:
      goto LABEL_11;
    case 64022:
      char v7 = 1;
      goto LABEL_16;
    case 64023:
      unsigned int v8 = 8;
      goto LABEL_20;
    case 64024:
      unsigned int v8 = 0;
      char v7 = *((_DWORD *)this + 156) != 0;
      goto LABEL_21;
    case 64025:
    case 64026:
    case 64027:
    case 64028:
    case 64029:
    case 64030:
    case 64031:
    case 64032:
      char v7 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_12;
    case 64033:
    case 64034:
    case 64035:
    case 64036:
      char v7 = 0;
LABEL_16:
      unsigned int v8 = 1;
      goto LABEL_21;
    case 64038:
    case 64039:
    case 64041:
    case 64042:
    case 64043:
    case 64044:
      char v7 = 0;
LABEL_6:
      unsigned int v8 = 8;
      goto LABEL_21;
    default:
      if (a2 == 21)
      {
        unsigned int v8 = 4;
LABEL_20:
        char v7 = 1;
      }
      else
      {
        if (a2 != 3700) {
          return 4294956417;
        }
LABEL_11:
        char v7 = 0;
LABEL_12:
        unsigned int v8 = 4;
      }
LABEL_21:
      uint64_t result = 0;
      *a6 = v7;
      *a5 = v8;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD2::Reset(AUEndpointVAD2 *this)
{
  if (*((unsigned char *)this + 17) && *((_DWORD *)this + 156)) {
    (*(void (**)(AUEndpointVAD2 *))(*(void *)this + 56))(this);
  }
  return 0;
}

uint64_t AUEndpointVAD2::Initialize(AUEndpointVAD2 *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  (*(void (**)(AUEndpointVAD2 *))(*(void *)this + 64))(this);
  *((_DWORD *)this + 156) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  double v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0) + 80);
  if (v2 != *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 128), 0) + 80)) {
    return 4294956421;
  }
  if (*(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0) + 80) < 8000.0)
  {
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      long long v4 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        return 4294956421;
      }
    }
    else
    {
      long long v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUEndpointVAD2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 92;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Audio sampling rate must be 8000 Hz or higher.", buf, 0x12u);
    }
    return 4294956421;
  }
  if (*((unsigned char *)this + 552))
  {
    uint64_t v5 = *((void *)this + 68);
    ausdk::AUScope::SafeGetElement((AUEndpointVAD2 *)((char *)this + 80), 0);
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    if (*(void *)(v5 + 152) && *(void *)(v5 + 160))
    {
      if (*(unsigned char *)(v5 + 8))
      {
        *(unsigned char *)(v5 + 8) = 0;
        *(unsigned char *)(v5 + 304) = 0;
        *(void *)(v5 + 368) = *(void *)(v5 + 360);
      }
      int valuePtr = 0;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 144), @"VADMode");
      if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
      {
        *(_DWORD *)(v5 + 24) = valuePtr;
        uint64_t v13 = 0;
        memset(buf, 0, sizeof(buf));
        operator new();
      }
      std::string::__assign_external(&v11, "Failed to read VAD mode from plist.", 0x23uLL);
    }
    else
    {
      std::string::__assign_external(&v11, "At least one settings dictionary is null. You must load all settings before initializing.", 0x59uLL);
    }
    if (EndpointVAD2LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
    }
    if (EndpointVAD2LogScope(void)::scope)
    {
      unsigned int v8 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
      if (!*(void *)EndpointVAD2LogScope(void)::scope) {
        goto LABEL_39;
      }
    }
    else
    {
      unsigned int v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = &v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "EndpointVAD2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 283;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v9;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing EndpointVAD2: %s", buf, 0x1Cu);
    }
LABEL_39:
    abort();
  }
  if (EndpointVAD2LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD2LogScope(void)::once, &__block_literal_global_6);
  }
  if (!EndpointVAD2LogScope(void)::scope)
  {
    char v7 = MEMORY[0x1E4F14500];
LABEL_25:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUEndpointVAD2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 107;
      _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUEndpointVAD2: The top-level plist property is unset. Setting the AU to bypass mode (no VAD outputs).", buf, 0x12u);
    }
    goto LABEL_27;
  }
  char v7 = *(NSObject **)EndpointVAD2LogScope(void)::scope;
  if (*(void *)EndpointVAD2LogScope(void)::scope) {
    goto LABEL_25;
  }
LABEL_27:
  (*(void (**)(AUEndpointVAD2 *, uint64_t))(*(void *)this + 584))(this, 1);
  return 0;
}

void sub_1BB5D86BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

DspLib::LoudnessNormalizer::Algorithm *AULoudnessNormalizer::newDspLibAlgorithm(AULoudnessNormalizer *this)
{
  uint64_t v1 = (DspLib::LoudnessNormalizer::Algorithm *)operator new(0x2780uLL, (std::align_val_t)0x40uLL);
  DspLib::LoudnessNormalizer::Algorithm::Algorithm(v1);
  return v1;
}

void sub_1BB5D89A0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D360](v1, 64);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessNormalizer::Version(AULoudnessNormalizer *this)
{
  return 50593792;
}

uint64_t AULoudnessNormalizer::GetParameterValueStrings(AULoudnessNormalizer *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  if (!a4) {
    return 0;
  }
  int v5 = *(_DWORD *)(*((void *)this + 211) + 4 * a3);
  if ((v5 - 11) <= 1)
  {
    uint64_t v6 = DspLib::LoudnessMeter::Parameters::kStateNames;
LABEL_4:
    char v7 = v6 + 4;
    goto LABEL_17;
  }
  uint64_t result = 4294956418;
  if (v5 <= 18)
  {
    if (v5 == 2)
    {
      uint64_t v6 = DspLib::LoudnessNormalizer::Parameters::kRenderQualityNames;
      goto LABEL_4;
    }
    if (v5 != 16) {
      return result;
    }
    uint64_t v6 = DspLib::LoudnessNormalizer::Parameters::kResetModeNames;
    char v7 = DspLib::LoudnessNormalizer::Parameters::kGainCurveNames;
  }
  else
  {
    switch(v5)
    {
      case 19:
        uint64_t v6 = DspLib::LoudnessNormalizer::Parameters::kAutomationModeNames;
        break;
      case 32:
        uint64_t v6 = DspLib::LoudnessNormalizer::Parameters::kGainCurveNames;
        break;
      case 36:
        uint64_t v6 = DspLib::LoudnessNormalizer::Parameters::kWeightingFilterNames;
        char v7 = DspLib::LoudnessNormalizer::Parameters::kAutomationModeNames;
        goto LABEL_17;
      default:
        return result;
    }
    char v7 = v6 + 3;
  }
LABEL_17:
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<char const*,char const* const*>(v6, v7);
  uint64_t result = 0;
  *a4 = CFArray;
  return result;
}

uint64_t AULoudnessNormalizer::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = AUDspLib::RestoreState(this, a2);
  if (!result)
  {
    uint64_t result = AUDspLib::loadDefaultAudioChannelLayout((AUDspLib *)this, (CFDictionaryRef)a2);
    if (!result)
    {
      float v5 = *(float *)&AULoudnessNormalizer::mSystemVolume_dB;
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 4), 0);
      ausdk::AUElement::SetParameter(Element, 1u, v5, 0);
      return 0;
    }
  }
  return result;
}

uint64_t AULoudnessNormalizer::GetParameterInfo(AULoudnessNormalizer *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  switch(a3)
  {
    case 0x3E8u:
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x4316000000000000;
      *(void *)&buffer->defaultCFNumberRef Value = 0xC800200000000000;
      CFStringRef v5 = @"environmental noise dB SPL - raw";
      goto LABEL_11;
    case 0x3E9u:
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      *(void *)&buffer->defaultCFNumberRef Value = 0xC800200000000000;
      CFStringRef v5 = @"environmental wind activity";
      goto LABEL_11;
    case 0x3EAu:
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      *(void *)&buffer->defaultCFNumberRef Value = 0xC800200000000000;
      CFStringRef v5 = @"environmental self voice activity";
      goto LABEL_11;
    case 0x3EBu:
      goto LABEL_6;
    case 0x3ECu:
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      CFStringRef v5 = @"environmental noise dB SPL - smooth";
      *(void *)&buffer->minCFNumberRef Value = 0x4316000000000000;
      buffer->cfNameString = @"environmental noise dB SPL - smooth";
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = 1208000512;
      goto LABEL_13;
    default:
      if (a3 == 1937141612)
      {
        AUDspLib::GetParameterInfo(this, a2, 1u, buffer);
        buffer->flags += 0x10000000;
        return 0;
      }
      if (a3 == 100)
      {
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        *(void *)&buffer->minCFNumberRef Value = 0x42480000C2480000;
        *(void *)&buffer->defaultCFNumberRef Value = 0x4800800000000000;
        CFStringRef v5 = @"total momentary gain";
LABEL_11:
        buffer->cfNameString = v5;
LABEL_13:
        CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
        return 0;
      }
LABEL_6:
      return AUDspLib::GetParameterInfo(this, a2, a3, buffer);
  }
}

BOOL AULoudnessNormalizer::BusCountWritable(AULoudnessNormalizer *this, int a2)
{
  return a2 == 1;
}

uint64_t AULoudnessNormalizer::SetParameter(AULoudnessNormalizer *this, unsigned int a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  float v5 = a5.n128_f32[0];
  unsigned int v6 = a4;
  unsigned int v7 = a3;
  unsigned int v9 = *((_DWORD *)this + 439) - 1;
  if (v9 >= a2) {
    unsigned int v9 = a2;
  }
  if (a2 == 1937141612)
  {
    (*(void (**)(AULoudnessNormalizer *, uint64_t, uint64_t, uint64_t, __n128))(*(void *)this + 152))(this, 1, a3, a4, a5);
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
    unsigned int v12 = 1937141612;
LABEL_11:
    float v18 = v5;
    goto LABEL_12;
  }
  uint64_t v14 = *(unsigned int *)(*((void *)this + 211) + 4 * v9);
  if (v14 == 1)
  {
    AULoudnessNormalizer::mSystemVolume_dB = a5.n128_u32[0];
    uint64_t v15 = *((void *)this + 66);
    if (v15) {
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v15 + 112))(v15, 1, a5);
    }
    uint64_t v16 = *((void *)this + 68);
    if (*((void *)this + 69) != v16) {
      *(float *)(v16 + 4) = v5;
    }
LABEL_10:
    uint64_t v17 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v17, v6);
    unsigned int v12 = a2;
    goto LABEL_11;
  }
  switch(a2)
  {
    case 0x3EAu:
      uint64_t v26 = *((void *)this + 66);
      if (!v26) {
        return 0;
      }
      *(unsigned char *)(v26 + 1364) = roundf(a5.n128_f32[0]) != 0.0;
      unint64_t v27 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v27, v6);
      unsigned int v12 = 1002;
      goto LABEL_11;
    case 0x3E9u:
      uint64_t v24 = *((void *)this + 66);
      if (!v24) {
        return 0;
      }
      *(_DWORD *)(v24 + 136std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = a5.n128_u32[0];
      unint64_t v25 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v25, v6);
      unsigned int v12 = 1001;
      goto LABEL_11;
    case 0x3E8u:
      uint64_t v20 = (DspLib::LoudnessNormalizer::Algorithm *)*((void *)this + 66);
      if (!v20) {
        return 0;
      }
      float v21 = DspLib::LoudnessNormalizer::Algorithm::processEnvironmentalNoiseSmoothing(*((DspLib::LoudnessNormalizer::Algorithm **)this + 66), a5.n128_f32[0]);
      DspLib::LoudnessNormalizer::Algorithm::setEnvironmentalNoiseSPL(v20, v21);
      int v22 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
      double v23 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v22, v6);
      ausdk::AUElement::SetParameter(v23, 0x3E8u, v5, 0);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AULoudnessNormalizer *)((char *)this + 32), 0);
      unsigned int v12 = 1004;
      float v18 = v21;
LABEL_12:
      ausdk::AUElement::SetParameter(Element, v12, v18, 0);
      return 0;
  }
  if (v14 == 47 || v14 == 34)
  {
    uint64_t v28 = *((void *)this + 66);
    if (!v28)
    {
      ausdk::AUBase::SetParameter(this, a2, a3, a4, a5.n128_f32[0]);
      return 0;
    }
    *(_DWORD *)(*((void *)this + 68) + 4 * v14) = a5.n128_u32[0];
    (*(void (**)(uint64_t, __n128))(*(void *)v28 + 112))(v28, a5);
    goto LABEL_10;
  }

  return AUDspLib::SetParameter(this, a2, a3, a4, a5.n128_f32[0]);
}

uint64_t AULoudnessNormalizer::GetParameter(AULoudnessNormalizer *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  if (a2 == 100)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AULoudnessNormalizer *)((char *)this + 32), 0);
    float Parameter = ausdk::AUElement::GetParameter(Element, 0);
    unsigned int v9 = (DspLib::LoudnessNormalizer::Algorithm *)*((void *)this + 66);
    LODWORD(v1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    if (v9 && !*((unsigned char *)this + 2113) && Parameter != 0.0) {
      double v10 = DspLib::LoudnessNormalizer::Algorithm::totalMomentaryGainIndB(v9);
    }
  }
  else
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    *(float *)&double v10 = ausdk::AUElement::GetParameter(v14, a2);
  }
  *a5 = *(float *)&v10;
  return 0;
}

uint64_t AULoudnessNormalizer::SetProperty(AULoudnessNormalizer *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  if (a2 == 1920165236)
  {
    unsigned int v9 = (DspLib::LoudnessNormalizer::Algorithm *)*((void *)this + 66);
    if (!v9) {
      return 0;
    }
    caulk::pooled_semaphore_mutex::_lock((AULoudnessNormalizer *)((char *)this + 1824));
    int v10 = *a5;
    if (*a5 == 2)
    {
      unsigned __int8 v13 = atomic_load((unsigned __int8 *)this + 1821);
      if ((v13 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else if (v10 != 1)
    {
      if (!v10)
      {
        DspLib::LoudnessNormalizer::Algorithm::expectedLoudnessAfterReset(v9);
LABEL_12:
        DspLib::LoudnessNormalizer::Algorithm::resetLoudnessHistory(v9, v11);
      }
LABEL_13:
      caulk::pooled_semaphore_mutex::_unlock((AULoudnessNormalizer *)((char *)this + 1824));
      return 0;
    }
    float v11 = DspLib::LoudnessNormalizer::Algorithm::maxGainKneePoint(v9);
    goto LABEL_12;
  }

  return AUDspLib::SetProperty(this, a2, a3, a4, a5, a6, a7);
}

void sub_1BB5D90DC(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessNormalizer::GetPropertyInfo(AULoudnessNormalizer *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 1920165236) {
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  *a6 = 1;
  *a5 = 4;
  return 0;
}

uint64_t AULoudnessNormalizer::Initialize(AULoudnessNormalizer *this)
{
  unsigned int v2 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AULoudnessNormalizer *)((char *)this + 80), 0) + 108);
  if (v2 >= 3 && v2 != *((unsigned __int16 *)this + 900)) {
    return 4294956428;
  }

  return AUDspLib::Initialize(this);
}

void AULoudnessNormalizer::~AULoudnessNormalizer(AULoudnessNormalizer *this)
{
  AUDspLib::~AUDspLib(this);

  JUMPOUT(0x1C185D370);
}

void AULoudnessNormalizer::AULoudnessNormalizer(AULoudnessNormalizer *this, OpaqueAudioComponentInstance *a2)
{
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  unsigned int v2 = (void *)AUDspLib::AUDspLib((uint64_t)this, a2, (uint64_t)&DspLib::LoudnessNormalizer::Parameters::kParameterList, &v9, @"AULoudnessNormalizer_ViewFactory", 0);
  *unsigned int v2 = &unk_1F14B8770;
  unint64_t v3 = (ausdk::AUScope *)(v2 + 4);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 4), 0);
  ausdk::AUElement::SetParameter(Element, 0x73766F6Cu, 0.0, 0);
  float v5 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v5, 0x3E8u, 0.0, 0);
  unsigned int v6 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v6, 0x3ECu, 0.0, 0);
  unsigned int v7 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v7, 0x3E9u, 0.0, 0);
  unsigned int v8 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v3, 0);
  ausdk::AUElement::SetParameter(v8, 0x3EAu, 0.0, 0);
}

void sub_1BB5D92C4(_Unwind_Exception *a1)
{
  AUDspLib::~AUDspLib(v1);
  _Unwind_Resume(a1);
}

void clsp::ParameterUpdater::GetArraysData(CFDictionaryRef *this, const CACFDictionary *a2, const __CFString *a3, uint64_t a4, double *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double v21 = 0.0;
  if (!CFDictionaryContainsKey(*this, a2))
  {
    CFArrayRef theArray = a2;
    LOBYTE(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
    *(_DWORD *)uint64_t v17 = 512;
    CACFString::GetCString((const __CFString *)a2, &v22, v17, v9);
    snprintf(__str, 0x200uLL, "Key not found in inConfig: %s", (const char *)&v22);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, __str);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  }
  CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __int16 v20 = 257;
  CACFDictionary::GetCACFArray(this, (const __CFString *)a2, (CACFArray *)&theArray);
  CFStringRef Count = (const __CFString *)CFArrayGetCount(theArray);
  if (Count != (const __CFString *)((char *)&a3->isa + 1))
  {
    *(void *)uint64_t v17 = a2;
    char v18 = 1;
    *(_DWORD *)uint64_t v16 = 512;
    CACFString::GetCString((const __CFString *)a2, &v22, v16, v11);
    snprintf(__str, 0x200uLL, "Key does not have proper length in inConfig: %s", (const char *)&v22);
    uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, __str);
    v15->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  }
  uint64_t v12 = 0;
  uint64_t v13 = Count;
  do
  {
    CACFArray::GetFloat64(&theArray, v12, &v21);
    *(double *)(a4 + 8 * v12++) = v21;
  }
  while (v13 != v12);
  CACFArray::~CACFArray((CACFArray *)&theArray);
}

void sub_1BB5D94F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  CACFString::~CACFString((CACFString *)&a11);
  CACFArray::~CACFArray((CACFArray *)&a13);
  _Unwind_Resume(a1);
}

clsp::FirFilter *clsp::FirFilter::FirFilter(clsp::FirFilter *this, CFArrayRef *a2, double a3)
{
  if (*a2) {
    unint64_t Count = CFArrayGetCount(*a2);
  }
  else {
    unint64_t Count = 0;
  }
  int v13 = 0;
  std::vector<float>::vector(this, Count, &v13);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*a2)
  {
    uint64_t v7 = CFArrayGetCount(*a2);
    if (v7)
    {
      uint64_t v8 = 0;
      for (uint64_t i = 0; i != v7; ++i)
      {
        CACFArray::GetFloat32(a2, i, (float *)(*(void *)this + v8));
        v8 += 4;
      }
    }
  }
  float v10 = a3;
  unint64_t v11 = DspLib::FFT::resampleFIRfilterSize((DspLib::FFT *)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 2), 48000.0, v10);
  std::vector<float>::resize((uint64_t)this + 24, v11);
  std::vector<float>::resize((uint64_t)this + 48, v11);
  DspLib::FFT::resampleFIRfilter(*(void **)this, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2, *((float **)this + 3), 48000.0, v10, (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2, (DspLib *)1);
  return this;
}

void sub_1BB5D968C(_Unwind_Exception *exception_object)
{
  float v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  unsigned int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void clsp::FirFilter::firlsfilter(clsp::FirFilter *this, float *a2, float *__C, unsigned int a4)
{
  if (a4)
  {
    vDSP_Length v7 = (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2;
    uint64_t v8 = a4;
    do
    {
      long long v9 = (_DWORD *)*((void *)this + 6);
      uint64_t v10 = *((void *)this + 7) - 4;
      if ((_DWORD *)v10 != v9)
      {
        memmove(v9 + 1, v9, v10 - (void)v9);
        long long v9 = (_DWORD *)*((void *)this + 6);
      }
      int v11 = *(_DWORD *)a2++;
      _DWORD *v9 = v11;
      vDSP_dotpr(*((const float **)this + 6), 1, *((const float **)this + 3), 1, __C++, v7);
      --v8;
    }
    while (v8);
  }
}

uint64_t AUResidualEchoSuppressorV3::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AUResidualEchoSuppressorV3::ShouldBypassEffect(AUResidualEchoSuppressorV3 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUResidualEchoSuppressorV3::ChangeStreamFormat(AUResidualEchoSuppressorV3 *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  unsigned int v6 = a3;
  int v7 = a2;
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (v7 != 2 || v6)
  {
    if (v7 == 1 && v6 <= 2)
    {
      long long v9 = (BOOL *)this + v6 + 540;
      BOOL *v9 = a5->mFormatID == 1718773105;
    }
  }
  else
  {
    *((unsigned char *)this + 544) = a5->mFormatID == 1718773105;
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV3::ValidFormat(AUResidualEchoSuppressorV3 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (a4->mChannelsPerFrame != 1) {
    return 0;
  }
  int v6 = (int)a2;
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (v6 == 1)
  {
    if (a3 > 2 || result == 1) {
      return result;
    }
    goto LABEL_11;
  }
  if (v6 != 2) {
    return result;
  }
  if (result) {
    return 1;
  }
  uint64_t result = 0;
  if (!a3)
  {
LABEL_11:
    if (a4->mFormatID == 1718773105)
    {
      long long v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      uint64_t v10 = *(void *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      int v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 == 4) {
        return result;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV3::SupportedNumChannels(AUResidualEchoSuppressorV3 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUResidualEchoSuppressorV3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUResidualEchoSuppressorV3::StreamFormatWritable(AUResidualEchoSuppressorV3 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUResidualEchoSuppressorV3::SupportsTail(AUResidualEchoSuppressorV3 *this)
{
  return 1;
}

double AUResidualEchoSuppressorV3::GetTailTime(AUResidualEchoSuppressorV3 *this)
{
  return 0.0;
}

double AUResidualEchoSuppressorV3::GetLatency(AUResidualEchoSuppressorV3 *this)
{
  return 0.0;
}

uint64_t AUResidualEchoSuppressorV3::GetParameterInfo(AUResidualEchoSuppressorV3 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->unitName = 0;
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x23)
  {
    CFStringRef v6 = off_1E623F768[a3];
    AudioUnitParameterUnit v7 = dword_1BB8A9F20[a3];
    AudioUnitParameterValue v8 = flt_1BB8A9FB0[a3];
    AudioUnitParameterValue v9 = flt_1BB8AA040[a3];
    AudioUnitParameterValue v10 = flt_1BB8AA0D0[a3];
    int v11 = dword_1BB8AA160[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFNumberRef Value = v8;
    buffer->maxCFNumberRef Value = v9;
    buffer->defaultCFNumberRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

BOOL AUResidualEchoSuppressorV3::BusCountWritable(AUResidualEchoSuppressorV3 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUResidualEchoSuppressorV3::Render(AUResidualEchoSuppressorV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v34[4] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterValue v8 = (AUResidualEchoSuppressorV3 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 0);
  int v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t v12 = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!v12)
  {
    uint64_t v13 = ausdk::AUScope::GetElement(v8, 1u);
    if (v13 && *(_DWORD *)(v13 + 172))
    {
      uint64_t v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
      uint64_t v12 = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4);
      uint64_t v15 = ausdk::AUScope::SafeGetElement(v8, 1u);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
      if (v12) {
        return v12;
      }
    }
    else
    {
      uint64_t v18 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    }
    uint64_t v19 = BufferList;
    uint64_t v20 = ausdk::AUScope::GetElement(v8, 2u);
    if (v20 && *(_DWORD *)(v20 + 172))
    {
      double v21 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 2u);
      uint64_t v12 = ausdk::AUInputElement::PullInput(v21, a2, a3, 2, a4);
      uint64_t v22 = ausdk::AUScope::SafeGetElement(v8, 2u);
      uint64_t v23 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v22 + 144));
      if (v12) {
        return v12;
      }
    }
    else
    {
      uint64_t v24 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t v23 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v24 + 144));
    }
    uint64_t v25 = v23;
    uint64_t v26 = ausdk::AUScope::GetElement(v8, 3u);
    if (!v26 || !*(_DWORD *)(v26 + 172))
    {
      uint64_t v30 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t v29 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v30 + 144));
LABEL_23:
      uint64_t v31 = v29;
      uint64_t v32 = ausdk::AUScope::SafeGetElement(v8, 0);
      v34[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v32 + 144));
      v34[1] = v19;
      v34[2] = v25;
      v34[3] = v31;
      uint64_t v33 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      return (*(uint64_t (**)(AUResidualEchoSuppressorV3 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 4, v34, 1, &v33);
    }
    unint64_t v27 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 3u);
    uint64_t v12 = ausdk::AUInputElement::PullInput(v27, a2, a3, 3, a4);
    uint64_t v28 = ausdk::AUScope::SafeGetElement(v8, 3u);
    uint64_t v29 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v28 + 144));
    if (!v12) {
      goto LABEL_23;
    }
  }
  return v12;
}

uint64_t AUResidualEchoSuppressorV3::ProcessMultipleBufferLists(AUResidualEchoSuppressorV3 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  v136[2] = *(float **)MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  if ((*(unsigned int (**)(AUResidualEchoSuppressorV3 *, unsigned int *))(*(void *)this + 576))(this, a2))
  {
    uint64_t v10 = a7[1];
    unsigned int mDataByteSize = v10->mBuffers[0].mDataByteSize;
    if (mDataByteSize >= 4) {
      memset_pattern16(v10->mBuffers[0].mData, &unk_1BB873A60, mDataByteSize & 0xFFFFFFFC);
    }
    if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 544)) {
      memcpy((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    }
    else {
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    }
    return 0;
  }
  int v13 = *((_DWORD *)this + 133);
  if (v13 != *((_DWORD *)this + 134))
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    *(float *)&uint64_t v15 = ausdk::AUElement::GetParameter(Element, 1u);
    *(void *)&long long v129 = v15;
    uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    *(float *)&uint64_t v17 = ausdk::AUElement::GetParameter(v16, 2u);
    *(void *)&long long v128 = v17;
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    unsigned int Parameter = ausdk::AUElement::GetParameter(v18, 8u);
    uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    unsigned int v133 = ausdk::AUElement::GetParameter(v20, 9u);
    double v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v22 = ausdk::AUElement::GetParameter(v21, 0xAu);
    uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v24 = ausdk::AUElement::GetParameter(v23, 0xBu);
    uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v26 = ausdk::AUElement::GetParameter(v25, 0xCu);
    unint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v132 = ausdk::AUElement::GetParameter(v27, 0xDu);
    uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v131 = ausdk::AUElement::GetParameter(v28, 0xEu);
    uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v130 = ausdk::AUElement::GetParameter(v29, 0xFu);
    uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v31 = ausdk::AUElement::GetParameter(v30, 0x10u);
    uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v33 = ausdk::AUElement::GetParameter(v32, 0x11u);
    unsigned int v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v35 = ausdk::AUElement::GetParameter(v34, 0x12u);
    uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v37 = ausdk::AUElement::GetParameter(v36, 0x13u);
    unint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v126 = ausdk::AUElement::GetParameter(v38, 0x14u);
    unint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    unsigned int v127 = ausdk::AUElement::GetParameter(v39, 0x15u);
    float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v125 = ausdk::AUElement::GetParameter(v40, 0x16u);
    uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v124 = ausdk::AUElement::GetParameter(v41, 0x17u);
    float v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    unsigned int v43 = ausdk::AUElement::GetParameter(v42, 0x18u);
    float v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    unsigned int v45 = ausdk::AUElement::GetParameter(v44, 0x19u);
    uint64_t v46 = *((void *)this + 70);
    *(int32x2_t *)(v46 + 36) = vneg_s32(vabs_s32(vcvt_s32_f32((float32x2_t)__PAIR64__(v128, v129))));
    *(_DWORD *)(v46 + 44) = Parameter;
    int v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    LODWORD(v129) = ausdk::AUElement::GetParameter(v47, 0x1Au);
    double v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    LODWORD(v128) = ausdk::AUElement::GetParameter(v48, 0x1Bu);
    uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v123 = ausdk::AUElement::GetParameter(v49, 0x1Cu);
    int v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    int v51 = (int)ausdk::AUElement::GetParameter(v50, 0x1Eu);
    double v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    int v53 = (int)ausdk::AUElement::GetParameter(v52, 0x1Du);
    uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v122 = ausdk::AUElement::GetParameter(v54, 0x1Fu);
    float v55 = __exp10f(v22 / 10.0);
    float v56 = __exp10f(v24 / 10.0);
    float v57 = __exp10f(v26 / 10.0);
    float v58 = __exp10f(v31 / 10.0);
    float v59 = __exp10f(v33 / 10.0);
    float v60 = __exp10f(v35 / 10.0);
    float v61 = __exp10f(v37 / 10.0);
    float v62 = __exp10f(v126 / 10.0);
    uint64_t v63 = *((void *)this + 70);
    *(_DWORD *)(v63 + 496) = v133;
    *(float *)(v63 + 50std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v55;
    *(float *)(v63 + 504) = v56;
    *(float *)(v63 + 508) = v57;
    *(float *)(v63 + 556) = v132;
    *(float *)(v63 + 512) = v131;
    *(float *)(v63 + 516) = v130;
    *(float *)(v63 + 52std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v58;
    *(float *)(v63 + 524) = v59;
    *(float *)(v63 + 528) = v60;
    *(float *)(v63 + 532) = v61;
    *(float *)(v63 + 536) = v62;
    *(_DWORD *)(v63 + 54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v127;
    *(float *)(v63 + 548) = v125;
    *(float *)(v63 + 552) = v124;
    *(_DWORD *)(v63 + 572) = v43;
    *(_DWORD *)(v63 + 576) = v45;
    unsigned int v64 = (float)*(int *)(v63 + 8);
    float v65 = (float)*(int *)(v63 + 12) * 0.5;
    float v66 = v65 / (float)v64;
    float v67 = fmaxf(*(float *)&v129, 300.0);
    if (v67 < v65) {
      float v65 = v67;
    }
    unsigned int v68 = vcvtms_u32_f32(v65 / v66);
    if (v68 < v64) {
      unsigned int v64 = v68;
    }
    *(_DWORD *)(v63 + 664) = v64;
    *(_DWORD *)(v63 + 668) = v128;
    *(float *)(v63 + 672) = v123;
    *(_DWORD *)uint64_t v63 = v53;
    if (v51 < 0) {
      int v69 = v51;
    }
    else {
      int v69 = -v51;
    }
    *(_DWORD *)(v63 + 32) = v69;
    float v70 = __exp10f((float)v69 * 0.1);
    *(float *)(v63 + 56) = v70;
    *(float *)(v63 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = sqrtf(v70);
    uint64_t v71 = *((void *)this + 70);
    float v72 = v122;
    *(float *)(v71 + 48) = v122;
    *(float *)(v71 + 52) = __exp10f(v72 * 0.1);
    uint64_t v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    *(float *)(*((void *)this + 70) + 688) = ausdk::AUElement::GetParameter(v73, 0x21u);
    float v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    float v75 = ausdk::AUElement::GetParameter(v74, 0x22u);
    uint64_t v76 = *((void *)this + 70);
    *(float *)(v76 + 68std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1.0
                          - expf(-1.0 / (float)(v75 * (float)((float)*(int *)(v76 + 12) / (float)*(int *)(v76 + 8))));
    if (!*(_DWORD *)v76) {
      *(_DWORD *)(v76 + 676) = 0;
    }
    *((_DWORD *)this + 134) = v13;
  }
  int v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
  int v78 = (int)ausdk::AUElement::GetParameter(v77, 6u);
  uint64_t v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
  float v80 = ausdk::AUElement::GetParameter(v79, 7u);
  uint64_t v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
  float v82 = ausdk::AUElement::GetParameter(v81, 0xDu);
  uint64_t v83 = *((void *)this + 70);
  *(_DWORD *)(v83 + 488) = v78;
  *(float *)(v83 + 492) = v80;
  *(float *)(v83 + 556) = v82;
  int v84 = *(_DWORD *)v83;
  uint64_t v85 = *((unsigned int *)this + 84);
  if (*(int *)v83 >= 2)
  {
    mData = 0;
    unint64_t v87 = 0;
    uint64_t v88 = 0;
    unint64_t v89 = 0;
  }
  else
  {
    mData = (float *)a5[1]->mBuffers[0].mData;
    unint64_t v87 = &mData[v85];
    uint64_t v88 = (float *)a5[2]->mBuffers[0].mData;
    unint64_t v89 = &v88[v85];
  }
  uint64_t v90 = (uint64_t)*a5;
  float v91 = a5[3];
  if (v91) {
    uint64_t v92 = (uint64_t)v91->mBuffers[0].mData;
  }
  else {
    uint64_t v92 = 0;
  }
  unint64_t v93 = *(float **)(v90 + 16);
  v136[0] = mData;
  v136[1] = v87;
  v135[0] = v88;
  v135[1] = v89;
  BOOL v96 = v84 < 2 && mData != 0 && v88 != 0;
  if ((v84 > 1 || v96) && *((unsigned char *)this + 541))
  {
    if (*((unsigned char *)this + 542) && *((unsigned char *)this + 540) && v93)
    {
      v134[0] = v93;
      v134[1] = &v93[v85];
      CResidualSuppressorV3::speex_preprocess_run_freq(v83, v134, v136, v135, v92);
      if (*((unsigned char *)this + 544))
      {
        uint64_t v97 = *((void *)this + 70);
        float v98 = *(const void **)(v97 + 344);
        float v99 = *(const void **)(v97 + 352);
        float v100 = (char *)(*a7)->mBuffers[0].mData;
        uint64_t v101 = *((unsigned int *)this + 84);
        float v102 = &v100[4 * v101];
        memcpy(v100, v98, 4 * v101);
        memcpy(v102, v99, 4 * *((unsigned int *)this + 84));
        memcpy(a7[1]->mBuffers[0].mData, *(const void **)(*((void *)this + 70) + 112), 4 * *(int *)(*((void *)this + 70) + 8));
      }
      goto LABEL_52;
    }
    uint64_t v12 = 0xFFFFFFFFLL;
    if (*((unsigned char *)this + 542) && !*((unsigned char *)this + 540) && v93)
    {
      MEMORY[0x1F4188790](v83);
      float v104 = (char *)&v121 - ((v103 + 15) & 0x7FFFFFFF0);
      memcpy(v104, v105, 4 * *((unsigned int *)this + 84));
      CResidualSuppressorV3::speex_preprocess_run(*((void *)this + 70), v104, v136, v135, v92);
      if (*((unsigned char *)this + 544))
      {
        uint64_t v106 = *((void *)this + 70);
        size_t v107 = *(const void **)(v106 + 344);
        long long v108 = *(const void **)(v106 + 352);
        long long v109 = (char *)(*a7)->mBuffers[0].mData;
        uint64_t v110 = *((unsigned int *)this + 84);
        long long v111 = &v109[4 * v110];
        memcpy(v109, v107, 4 * v110);
        memcpy(v111, v108, 4 * *((unsigned int *)this + 84));
        long long v112 = a7[1]->mBuffers[0].mData;
        uint64_t v113 = *((void *)this + 70);
        float v114 = *(const void **)(v113 + 112);
        size_t v115 = 4 * *(int *)(v113 + 8);
      }
      else
      {
        long long v112 = (*a7)->mBuffers[0].mData;
        size_t v115 = 4 * *((unsigned int *)this + 84);
        float v114 = v104;
      }
      memcpy(v112, v114, v115);
LABEL_52:
      if (*((_DWORD *)this + 138) == 2)
      {
        __int16 v116 = a7[1];
        unsigned int v117 = v116->mBuffers[0].mDataByteSize;
        if (v117 >= 4) {
          memset_pattern16(v116->mBuffers[0].mData, &unk_1BB873A60, v117 & 0xFFFFFFFC);
        }
      }
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  uint64_t v118 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v118, 0x20u, *(float *)(*((void *)this + 70) + 220), 0);
  if (**((int **)this + 70) >= 1)
  {
    unint64_t v119 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v119, 0x23u, *(float *)(*((void *)this + 70) + 676), 0);
  }
  return v12;
}

uint64_t AUResidualEchoSuppressorV3::CanScheduleParameters(AUResidualEchoSuppressorV3 *this)
{
  return 0;
}

uint64_t AUResidualEchoSuppressorV3::SetParameter(AUResidualEchoSuppressorV3 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a2 <= 0x22 && ((1 << a2) & 0x6FFFFDF27) != 0)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    ++*((_DWORD *)this + 133);
  }
  else
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    ausdk::AUElement::SetParameter(v12, a2, a5, 0);
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV3::SetProperty(AUResidualEchoSuppressorV3 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      int v8 = *a5;
      int v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUResidualEchoSuppressorV3 *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUResidualEchoSuppressorV3 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV3::GetProperty(AUResidualEchoSuppressorV3 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    int v7 = (*(uint64_t (**)(AUResidualEchoSuppressorV3 *))(*(void *)this + 576))(this);
LABEL_7:
    uint64_t result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AUResidualEchoSuppressorV3::GetPropertyInfo(AUResidualEchoSuppressorV3 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    BOOL v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    BOOL v7 = 0;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUResidualEchoSuppressorV3::Reset(AUResidualEchoSuppressorV3 *this)
{
  return 0;
}

void AUResidualEchoSuppressorV3::Cleanup(AUResidualEchoSuppressorV3 *this)
{
  uint64_t v2 = *((void *)this + 70);
  if (v2)
  {
    CResidualSuppressorV3::speex_preprocess_state_res_destroy(v2);
    *((void *)this + 7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
}

uint64_t AUResidualEchoSuppressorV3::Initialize(AUResidualEchoSuppressorV3 *this)
{
  char v2 = 0;
  unint64_t v3 = (AUResidualEchoSuppressorV3 *)((char *)this + 80);
  for (unsigned int i = 1; ; unsigned int i = 2)
  {
    char v5 = v2;
    uint64_t Element = ausdk::AUScope::SafeGetElement(v3, i - 1);
    if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v3, i) + 80)) {
      break;
    }
    char v2 = 1;
    if (v5)
    {
      double v7 = *(double *)(ausdk::AUScope::SafeGetElement(v3, 0) + 80);
      if (v7 == *(double *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 0) + 80))
      {
        *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
        *((unsigned char *)this + 54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 0) + 88) == 1718773105;
        *((unsigned char *)this + 54freeMatrix(*((_DWORD *)this + 17), this + 1) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 1u) + 88) == 1718773105;
        *((unsigned char *)this + 542) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 2u) + 88) == 1718773105;
        *((unsigned char *)this + 543) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 3u) + 88) == 1718773105;
        *((unsigned char *)this + 544) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 0)+ 88) == 1718773105;
        *((unsigned char *)this + 545) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV3 *)((char *)this + 128), 1u)+ 88) == 1718773105;
        uint64_t v8 = ausdk::AUScope::SafeGetElement(v3, 0);
        double v9 = *(double *)(v8 + 80);
        int v11 = *(_DWORD *)(v8 + 88);
        int v10 = *(_DWORD *)(v8 + 92);
        int v12 = *(_DWORD *)(v8 + 104);
        int v13 = *(_DWORD *)(v8 + 108);
        uint64_t v14 = ausdk::AUScope::SafeGetElement(v3, 1u);
        double v15 = *(double *)(v14 + 80);
        int v17 = *(_DWORD *)(v14 + 88);
        int v16 = *(_DWORD *)(v14 + 92);
        int v18 = *(_DWORD *)(v14 + 104);
        int v19 = *(_DWORD *)(v14 + 108);
        uint64_t v20 = (_DWORD *)ausdk::AUScope::SafeGetElement(v3, 2u);
        if (v9 == v15)
        {
          int v25 = v20[22];
          int v24 = v20[23];
          if ((v11 == 1819304813 || v11 == 1718773105) && (v10 & 2) == 0 && v13 == 1 && ((v10 & 1) != 0 || v12 == 2))
          {
            if ((v17 == 1819304813 || v17 == 1718773105)
              && (v16 & 2) == 0
              && v19 == 1
              && ((v16 & 1) != 0 || v18 == 2)
              && (v25 == 1819304813 || v25 == 1718773105)
              && (v24 & 2) == 0
              && v20[27] == 1
              && ((v24 & 1) != 0 || v20[26] == 2))
            {
              unint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v27, 1u);
              uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v28, 2u);
              uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              *((_DWORD *)this + 138) = ausdk::AUElement::GetParameter(v29, 8u);
              uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v30, 9u);
              float v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float Parameter = ausdk::AUElement::GetParameter(v31, 0xAu);
              float v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float v34 = ausdk::AUElement::GetParameter(v33, 0xBu);
              float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float v36 = ausdk::AUElement::GetParameter(v35, 0xCu);
              float v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v37, 0xDu);
              unint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v38, 0xEu);
              unint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v39, 0xFu);
              float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float v41 = ausdk::AUElement::GetParameter(v40, 0x10u);
              float v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float v60 = ausdk::AUElement::GetParameter(v42, 0x11u);
              unsigned int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float v59 = ausdk::AUElement::GetParameter(v43, 0x12u);
              float v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float v58 = ausdk::AUElement::GetParameter(v44, 0x13u);
              unsigned int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              float v57 = ausdk::AUElement::GetParameter(v45, 0x14u);
              uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v46, 0x15u);
              int v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v47, 0x16u);
              double v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v48, 0x17u);
              uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v49, 0x18u);
              int v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v50, 0x19u);
              int v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v51, 0x1Au);
              double v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v52, 0x1Bu);
              int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v53, 0x1Cu);
              uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v54, 0x1Eu);
              float v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v55, 0x1Du);
              float v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV3 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v56, 0x1Fu);
              (*(void (**)(AUResidualEchoSuppressorV3 *))(*(void *)this + 64))(this);
              __exp10f(Parameter * 0.1);
              __exp10f(v34 * 0.1);
              __exp10f(v36 * 0.1);
              __exp10f(v41 * 0.1);
              __exp10f(v60 * 0.1);
              __exp10f(v59 * 0.1);
              __exp10f(v58 * 0.1);
              __exp10f(v57 * 0.1);
              CResidualSuppressorV3::speex_preprocess_state_res_init((CResidualSuppressorV3 *)*((unsigned int *)this + 84), v9);
            }
            double v21 = (FILE **)MEMORY[0x1E4F143C8];
            float v22 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v23 = "_vpio_res: check 3 failed!\n";
          }
          else
          {
            double v21 = (FILE **)MEMORY[0x1E4F143C8];
            float v22 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v23 = "_vpio_res: check 2 failed!\n";
          }
        }
        else
        {
          double v21 = (FILE **)MEMORY[0x1E4F143C8];
          float v22 = (FILE *)*MEMORY[0x1E4F143C8];
          uint64_t v23 = "_vpio_res: check 1 failed!\n";
        }
        fwrite(v23, 0x1BuLL, 1uLL, v22);
        fflush(*v21);
      }
      return 4294956428;
    }
  }
  return 4294956428;
}

void AUResidualEchoSuppressorV3::~AUResidualEchoSuppressorV3(AUResidualEchoSuppressorV3 *this)
{
  AUResidualEchoSuppressorV3::~AUResidualEchoSuppressorV3(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14B8A00;
  char v2 = *((void *)this + 70);
  if (v2)
  {
    CResidualSuppressorV3::speex_preprocess_state_res_destroy(v2);
    *((void *)this + 7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

void AUSoftClip::NewKernel(AUSoftClip *this)
{
}

uint64_t SoftClipKernel::ProcessStereoNonInterleaved(SoftClipKernel *this, const AudioBufferList *a2, AudioBufferList *a3, unsigned int a4, BOOL *a5, __n128 a6)
{
  int v10 = (_DWORD *)*((void *)this + 1);
  int v11 = v10[148];
  if (v11 != *((_DWORD *)this + 12))
  {
    a6.n128_f32[0] = SoftClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 12) = v11;
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *, __n128))(*(void *)v10 + 592))(v10, a6);
  if ((result & 1) == 0)
  {
    mData = (float *)a2->mBuffers[0].mData;
    uint64_t v14 = *(float **)&a2[1].mBuffers[0].mNumberChannels;
    double v15 = (float *)a3->mBuffers[0].mData;
    int v16 = *(float **)&a3[1].mBuffers[0].mNumberChannels;
    if (*((float *)this + 6) >= 1.0)
    {
      if (a4)
      {
        float v29 = *((float *)this + 10);
        float v30 = -v29;
        uint64_t v31 = a4;
        do
        {
          float v32 = *mData++;
          float v33 = v32;
          if (v32 >= v30) {
            float v34 = v33;
          }
          else {
            float v34 = -v29;
          }
          if (v33 <= v29) {
            float v35 = v34;
          }
          else {
            float v35 = v29;
          }
          *v15++ = v35;
          float v36 = *v14++;
          float v37 = v36;
          if (v36 >= v30) {
            float v38 = v37;
          }
          else {
            float v38 = -v29;
          }
          if (v37 <= v29) {
            float v39 = v38;
          }
          else {
            float v39 = v29;
          }
          *v16++ = v39;
          --v31;
        }
        while (v31);
      }
    }
    else if (a4)
    {
      float v18 = *((float *)this + 7);
      float v17 = *((float *)this + 8);
      float v19 = *((float *)this + 9);
      float v20 = *((float *)this + 10);
      float v21 = *((float *)this + 11);
      float v22 = -v18;
      float v23 = -v17;
      uint64_t v24 = a4;
      do
      {
        float v25 = *mData;
        float v26 = v21 * *mData;
        if (*mData >= 0.0)
        {
          if (v26 > v18)
          {
            float v25 = v20;
            if (v26 < v17) {
              float v25 = v20 + (float)((float)((float)(v26 - v17) * (float)(v26 - v17)) * v19);
            }
          }
        }
        else if (v26 < v22)
        {
          float v25 = -v20;
          if (v26 >= v23) {
            float v25 = (float)((float)-(float)((float)((float)-v26 - v17) * (float)((float)-v26 - v17)) * v19) - v20;
          }
        }
        *double v15 = v25;
        float v27 = *v14;
        float v28 = v21 * *v14;
        if (*v14 >= 0.0)
        {
          if (v28 > v18)
          {
            float v27 = v20;
            if (v28 < v17) {
              float v27 = v20 + (float)((float)((float)(v28 - v17) * (float)(v28 - v17)) * v19);
            }
          }
        }
        else if (v28 < v22)
        {
          float v27 = -v20;
          if (v28 >= v23) {
            float v27 = (float)((float)-(float)((float)((float)-v28 - v17) * (float)((float)-v28 - v17)) * v19) - v20;
          }
        }
        *v16++ = v27;
        ++v14;
        ++v15;
        ++mData;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

float SoftClipKernel::CalculateCoeffs(SoftClipKernel *this)
{
  char v2 = (ausdk::AUScope *)(*((void *)this + 1) + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x68617264u);
  float v5 = __exp10f(Parameter * 0.05);
  CFStringRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v7 = ausdk::AUElement::GetParameter(v6, 0x736F6674u);
  float v8 = __exp10f(v7 * 0.05);
  if (v8 >= (float)(v5 * 0.98)) {
    float v8 = v5;
  }
  *((float *)this + 5) = v5;
  *((float *)this + 6) = v8;
  float v9 = v8 / v5;
  float v10 = v5 / ((v9 + -1.0) * 4.0);
  *((float *)this + 7) = v9;
  *((float *)this + 8) = 2.0 - v9;
  *((float *)this + 9) = v10;
  *((float *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v5;
  float result = 1.0 / v5;
  *((float *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = 1.0 / v5;
  return result;
}

uint64_t SoftClipKernel::Process(SoftClipKernel *this, float *a2, float *a3, int a4, BOOL *a5, __n128 a6)
{
  float v10 = (_DWORD *)*((void *)this + 1);
  int v11 = v10[148];
  if (v11 != *((_DWORD *)this + 12))
  {
    a6.n128_f32[0] = SoftClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 12) = v11;
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *, __n128))(*(void *)v10 + 592))(v10, a6);
  if ((result & 1) == 0)
  {
    if (*((float *)this + 6) >= 1.0)
    {
      if (a4)
      {
        float v20 = *((float *)this + 10);
        do
        {
          float v21 = *a2++;
          float v22 = v21;
          if (v21 >= (float)-v20) {
            float v23 = v22;
          }
          else {
            float v23 = -v20;
          }
          if (v22 <= v20) {
            float v24 = v23;
          }
          else {
            float v24 = v20;
          }
          *a3++ = v24;
          --a4;
        }
        while (a4);
      }
    }
    else if (a4)
    {
      float v14 = *((float *)this + 7);
      float v13 = *((float *)this + 8);
      float v15 = *((float *)this + 9);
      float v16 = *((float *)this + 10);
      float v17 = *((float *)this + 11);
      do
      {
        float v18 = *a2;
        float v19 = v17 * *a2;
        if (*a2 >= 0.0)
        {
          if (v19 > v14)
          {
            float v18 = v16;
            if (v19 < v13) {
              float v18 = v16 + (float)((float)((float)(v19 - v13) * (float)(v19 - v13)) * v15);
            }
          }
        }
        else if (v19 < (float)-v14)
        {
          float v18 = -v16;
          if (v19 >= (float)-v13) {
            float v18 = (float)((float)-(float)((float)((float)-v19 - v13) * (float)((float)-v19 - v13)) * v15) - v16;
          }
        }
        *a3++ = v18;
        ++a2;
        --a4;
      }
      while (a4);
    }
  }
  return result;
}

void SoftClipKernel::~SoftClipKernel(SoftClipKernel *this)
{
}

BOOL AUSoftClip::ValidFormat(AUSoftClip *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  BOOL v8 = 0;
  int v7 = 0;
  CAStreamBasicDescription::IdentifyCommonPCMFormat(a4, &v7, &v8);
  BOOL result = 0;
  if (v7 == 1) {
    return a4->mChannelsPerFrame < 3 || !v8;
  }
  return result;
}

uint64_t AUSoftClip::SupportedNumChannels(AUSoftClip *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSoftClip::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

uint64_t AUSoftClip::SupportsTail(AUSoftClip *this)
{
  return 1;
}

double AUSoftClip::GetTailTime(AUSoftClip *this)
{
  return 0.0;
}

double AUSoftClip::GetLatency(AUSoftClip *this)
{
  return 0.0;
}

uint64_t AUSoftClip::GetParameterInfo(AUSoftClip *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = -1073741824;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  if (a3 == 1751216740)
  {
    AudioUnitParameterValue v7 = -24.0;
    CFStringRef v6 = @"hard clip level dB";
  }
  else
  {
    if (a3 != 1936680564) {
      return 4294956418;
    }
    CFStringRef v6 = @"soft clip level dB";
    AudioUnitParameterValue v7 = -48.0;
  }
  buffer->cfNameString = v6;
  buffer->AudioUnitParameterOptions flags = -939524096;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = kAudioUnitParameterUnit_Decibels;
  buffer->minCFNumberRef Value = v7;
  *(void *)&buffer->maxCFNumberRef Value = 0;
  return result;
}

uint64_t AUSoftClip::ProcessBufferLists(AUSoftClip *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  if (a3->mNumberBuffers == 2)
  {
    float v9 = (void *)*((void *)this + 66);
    if (!*v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F14C8B68;
      exception[2] = -10868;
    }
    char IsInputSilent = ausdk::AUEffectBase::IsInputSilent(this, *a2, a5);
    (*(void (**)(void, const AudioBufferList *, AudioBufferList *, uint64_t, char *))(*(void *)*v9 + 32))(*v9, a3, a4, a5, &IsInputSilent);
    if (!IsInputSilent) {
      *a2 &= ~0x10u;
    }
  }
  else
  {
    ausdk::AUEffectBase::ProcessBufferLists(this, a2, a3, a4, a5);
  }
  return 0;
}

uint64_t ausdk::AUEffectBase::IsInputSilent(ausdk::AUEffectBase *this, char a2, unsigned int a3)
{
  double v6 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 128), 0) + 80);
  double v7 = (*(double (**)(ausdk::AUEffectBase *))(*(void *)this + 344))(this);
  (*(void (**)(ausdk::AUEffectBase *))(*(void *)this + 352))(this);
  if ((a2 & 0x10) == 0)
  {
    uint64_t result = 0;
    *((unsigned char *)this + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
    return result;
  }
  if (!*((unsigned char *)this + 560))
  {
    unsigned int v10 = *((_DWORD *)this + 139);
    if (v10) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v10 = (v6 * (v7 + v8));
  *((_DWORD *)this + 139) = v10;
  *((unsigned char *)this + 56std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  if (!v10) {
    return 1;
  }
LABEL_5:
  uint64_t result = 0;
  BOOL v11 = v10 >= a3;
  unsigned int v12 = v10 - a3;
  if (!v11) {
    unsigned int v12 = 0;
  }
  *((_DWORD *)this + 139) = v12;
  return result;
}

uint64_t AUSoftClip::SetParameter(AUSoftClip *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUSoftClip::Reset(AUSoftClip *this, int a2)
{
  long long v4 = (void *)*((void *)this + 66);
  float v5 = (void *)*((void *)this + 67);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 16))(*v4);
    }
    ++v4;
  }
  if (!a2)
  {
    double v6 = (void *)*((void *)this + 66);
    if (*((void **)this + 67) != v6)
    {
      if (*v6) {
        (*(void (**)(void))(*(void *)*v6 + 16))(*v6);
      }
    }
  }
  return 0;
}

double AUSoftClip::Cleanup(AUSoftClip *this)
{
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  double result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUSoftClip::Initialize(AUSoftClip *this)
{
  uint64_t v2 = ausdk::AUEffectBase::Initialize(this);
  if (!v2) {
    (*(void (**)(AUSoftClip *, void, void))(*(void *)this + 72))(this, 0, 0);
  }
  return v2;
}

void AUSoftClip::~AUSoftClip(AUSoftClip *this)
{
  AUSoftClip::~AUSoftClip(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14B8C60;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  *(_OWORD *)((char *)this + 568) = 0u;
  *(void *)this = &unk_1F14C8258;
  unint64_t v3 = v2;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

void ___ZL22AUNeuralNetVADLogScopev_block_invoke_18211()
{
}

void DirectionalVAD::setTargetDirection(DirectionalVAD *this, float a2, float a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(float *)this = a2;
  if (a3 >= -90.0 && a3 <= 90.0)
  {
    *((float *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = a3;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_18203);
  }
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    double v6 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    double v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = *((float *)this + 1);
    int v8 = 136315906;
    float v9 = "DirectionalVAD.cpp";
    __int16 v10 = 1024;
    int v11 = 82;
    __int16 v12 = 2048;
    double v13 = a3;
    __int16 v14 = 2048;
    double v15 = v7;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Target elevation not set to (%f), it remains at the current value (%f). Elevation must be in range [-90, 90].\n", (uint8_t *)&v8, 0x26u);
  }
}

void DirectionalVAD::setCurrentDirection(float **this, float a2, float a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *this[9] = a2;
  if (a3 >= -90.0 && a3 <= 90.0)
  {
    *this[12] = a3;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_18203);
  }
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    double v6 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    double v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = *this[12];
    int v8 = 136315906;
    float v9 = "DirectionalVAD.cpp";
    __int16 v10 = 1024;
    int v11 = 110;
    __int16 v12 = 2048;
    double v13 = a3;
    __int16 v14 = 2048;
    double v15 = v7;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Current elevation not set to (%f), it remains at the current value (%f). Elevation must be in range [-90, 90].\n", (uint8_t *)&v8, 0x26u);
  }
}

void DirectionalVAD::setShapeParameter(DirectionalVAD *this, float a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0.0)
  {
    *((float *)this + 14) = a2;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_18203);
  }
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    long long v4 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    long long v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *((float *)this + 14);
    int v6 = 136315906;
    double v7 = "DirectionalVAD.cpp";
    __int16 v8 = 1024;
    int v9 = 127;
    __int16 v10 = 2048;
    double v11 = a2;
    __int16 v12 = 2048;
    double v13 = v5;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Shape parameter not set to (%f), it remains at the current value (%f). Valid range is >= 0.\n", (uint8_t *)&v6, 0x26u);
  }
}

void DirectionalVAD::setConditionalTargetPrior(DirectionalVAD *this, float a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0.0 && a2 <= 1.0)
  {
    *((float *)this + 15) = a2;
    return;
  }
  if (AUNeuralNetVADLogScope(void)::once != -1) {
    dispatch_once(&AUNeuralNetVADLogScope(void)::once, &__block_literal_global_18203);
  }
  if (AUNeuralNetVADLogScope(void)::scope)
  {
    double v5 = *(NSObject **)AUNeuralNetVADLogScope(void)::scope;
    if (!*(void *)AUNeuralNetVADLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    double v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = *((float *)this + 15);
    int v7 = 136315906;
    __int16 v8 = "DirectionalVAD.cpp";
    __int16 v9 = 1024;
    int v10 = 136;
    __int16 v11 = 2048;
    double v12 = a2;
    __int16 v13 = 2048;
    double v14 = v6;
    _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Conditional target prior not set to (%f), it remains at the current value (%f). Valid range is [0, 1].\n", (uint8_t *)&v7, 0x26u);
  }
}

void AUHOAZoom::GetChannelLayoutTags(void **a1@<X8>)
{
  unint64_t v3 = operator new(4uLL);
  *unint64_t v3 = 1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), 1uLL);
  double v5 = (char *)*a1;
  double v6 = (char *)a1[1];
  __int16 v8 = &v4[v7];
  *long long v4 = 12517380;
  __int16 v9 = v4 + 1;
  int v10 = v4;
  while (v6 != v5)
  {
    int v11 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *--int v10 = v11;
  }
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  if (v5)
  {
    operator delete(v5);
    __int16 v8 = a1[2];
  }
  a1[1] = v9;
  int v12 = ((*v3 + 1) * (*v3 + 1)) | 0xBE0000;
  if (v9 >= v8)
  {
    double v14 = *a1;
    uint64_t v15 = ((char *)v9 - (unsigned char *)*a1) >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (char *)v8 - v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      float v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), v18);
      double v14 = *a1;
      __int16 v9 = a1[1];
    }
    else
    {
      float v19 = 0;
    }
    float v20 = (int *)&v19[4 * v15];
    float v21 = &v19[4 * v18];
    int *v20 = v12;
    __int16 v13 = v20 + 1;
    while (v9 != (_DWORD *)v14)
    {
      int v22 = *--v9;
      *--float v20 = v22;
    }
    *a1 = v20;
    a1[1] = v13;
    a1[2] = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    v4[1] = v12;
    __int16 v13 = v4 + 2;
  }
  a1[1] = v13;

  operator delete(v3);
}

void sub_1BB5DC21C(_Unwind_Exception *a1)
{
  long long v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::SetAudioChannelLayout(AUHOAZoom *this, unsigned int a2, unsigned int a3, const AudioChannelLayout *a4)
{
  if (!a4) {
    return 4294956428;
  }
  AudioChannelLayoutTag mChannelLayoutTag = a4->mChannelLayoutTag;
  if (!ChannelLayoutTagIsSupportedHOA(a4->mChannelLayoutTag)) {
    return 4294956428;
  }
  AUHOAZoom::UpdateChannelLayoutTag(this, mChannelLayoutTag);
  return 0;
}

uint64_t AUHOAZoom::UpdateChannelLayoutTag(AUHOAZoom *this, int a2)
{
  if (!ChannelLayoutTagIsSupportedHOA(a2)) {
    __assert_rtn("UpdateChannelLayoutTag", "AUHOAZoom.mm", 126, "ChannelLayoutTagIsSupportedHOA(tag)");
  }
  *((_DWORD *)this + 162) = a2;
  if ((a2 & 0xFFFF0000) == 0xBE0000) {
    int v4 = 1;
  }
  else {
    int v4 = 2 * ((a2 & 0xFFFF0000) != 12517376);
  }
  *((_DWORD *)this + 136) = v4;
  *((void *)this + 79) = (unsigned __int16)a2;
  uint64_t result = GetHOAOrderForNumberOfChannels((unsigned __int16)a2);
  *((_DWORD *)this + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = result;
  return result;
}

char *AUHOAZoom::GetAudioChannelLayout(AUHOAZoom *this, unsigned int a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  if (a3) {
    ausdk::Throw((ausdk *)0xFFFFD583);
  }
  *a5 = 1;
  int v6 = *((_DWORD *)this + 162);
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  uint64_t v7 = 0;
  std::vector<char>::pointer begin = __p.__begin_;
  *((_DWORD *)__p.__begin_ + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  *((_DWORD *)begin + 2) = 0;
  *(_DWORD *)std::vector<char>::pointer begin = v6;
  if ((v6 | 0x10000) != 0x10000)
  {
    if ((_WORD)v6)
    {
      uint64_t v7 = (char *)(__p.__end_ - begin);
      if (a4 && v7) {
        memcpy(a4, begin, (LODWORD(__p.__end_) - begin));
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  __p.__end_ = begin;
  operator delete(begin);
  return v7;
}

uint64_t AUHOAZoom::ValidFormat(AUHOAZoom *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  BOOL v6 = a4->mFormatID == 1718773105 && a4->mBitsPerChannel == 64;
  AudioFormatFlags v7 = v6 & (a4->mFormatFlags >> 5);
  int HOAOrderForNumberOfChannels = GetHOAOrderForNumberOfChannels(a4->mChannelsPerFrame);
  if ((HOAOrderForNumberOfChannels + 1) * (HOAOrderForNumberOfChannels + 1) == mChannelsPerFrame) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t AUHOAZoom::SupportedNumChannels(AUHOAZoom *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUHOAZoom::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUHOAZoom::StreamFormatWritable(AUHOAZoom *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUHOAZoom::SupportsTail(AUHOAZoom *this)
{
  return 1;
}

double AUHOAZoom::GetLatency(AUHOAZoom *this)
{
  return 0.0;
}

uint64_t AUHOAZoom::RestoreState(AUHOAZoom *this, void *cf)
{
  *(void *)&long long v28 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    return 4294956445;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  uint64_t v5 = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, cf);
  if (v5)
  {
    uint64_t v6 = v5;
    if (getAUHOAZoomLog(void)::onceToken != -1) {
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
    }
    AudioFormatFlags v7 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUHOAZoom.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 406;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v6;
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s:%i Error %i while restoring state", buf, 0x18u);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "HOAZoomCurve");
    std::string::basic_string[abi:ne180100]<0>(&v24, "HOAZoomInDominanceCurve");
    std::string::basic_string[abi:ne180100]<0>(&v26, "HOAZoomOutDominanceCurve");
    unint64_t v18 = 0;
    float v19 = 0;
    float v20 = 0;
    float v21 = &v18;
    char v22 = 0;
    unint64_t v18 = (long long *)operator new(0x48uLL);
    float v19 = v18;
    float v20 = (char *)v18 + 72;
    uint64_t v9 = 0;
    float v19 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (long long *)buf, &v28, (std::string *)v18);
    do
    {
      if (*((char *)&v27 + v9 + 7) < 0) {
        operator delete(*(void **)((char *)&v26 + v9));
      }
      v9 -= 24;
    }
    while (v9 != -72);
    memset(&v17, 0, sizeof(v17));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v18, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v18) >> 3));
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    ZoomCurveValue::LoadFromDictionary((uint64_t)buf, cf, (long long **)&v17, (uint64_t *)__p);
    int v10 = (char *)this + 560;
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 70));
    uint64_t v11 = *(void *)&buf[8];
    *((void *)this + 69) = *(void *)buf;
    *((void *)this + 7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v11;
    uint64_t v12 = *(void *)&buf[16];
    *((void *)this + 7freeMatrix(*((_DWORD *)this + 17), this + 1) = *(void *)&buf[16];
    if (v12)
    {
      *(void *)(v11 + 16) = v10;
      *(void *)long long buf = &buf[8];
      *(_OWORD *)&buf[8] = 0uLL;
    }
    else
    {
      *((void *)this + 69) = v10;
    }
    std::vector<std::__fs::filesystem::path>::__vdeallocate((std::vector<std::string> *)this + 24);
    *((_OWORD *)this + 36) = v24;
    *((void *)this + 74) = v25;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    __int16 v13 = (void **)((char *)this + 600);
    if (*((char *)this + 623) < 0) {
      operator delete(*v13);
    }
    *(_OWORD *)__int16 v13 = v26;
    *((void *)this + 77) = v27;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    float v21 = (long long **)&v24;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(void **)&buf[8]);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    float v21 = (long long **)&v17;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    double v14 = (DominanceZoom *)*((void *)this + 67);
    if (v14) {
      DominanceZoom::SetZoomCurveValue(v14, (AUHOAZoom *)((char *)this + 552));
    }
    *(void *)long long buf = &v18;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return 0;
  }
  return v6;
}

void sub_1BB5DC784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  a24 = &a19;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

uint64_t ___Z15getAUHOAZoomLogv_block_invoke()
{
  getAUHOAZoomLog(void)::gLog = (uint64_t)os_log_create("com.apple.coreaudio", "hoaz");

  return MEMORY[0x1F41817F8]();
}

uint64_t AUHOAZoom::SaveState(std::vector<std::string> *this, ausdk **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  ausdk::AUBase::SaveState((ausdk::AUBase *)this, a2);
  CFTypeID v4 = *a2;
  if (v4)
  {
    uint64_t end = (uint64_t)this[22].__end_;
    if (end)
    {
      DominanceZoom::CopyZoomCurveValue(&buf, end);
      p_uint64_t end = (std::string *)&this[23].__end_;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[23].__end_->__r_.__value_.__r.__words);
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
      this[23].__begin_ = (std::vector<std::string>::pointer)buf.__r_.__value_.__r.__words[0];
      this[23].__end_ = (std::vector<std::string>::pointer)size;
      std::string::size_type v8 = buf.__r_.__value_.__r.__words[2];
      this[23].__end_cap_.__value_ = (std::string *)buf.__r_.__value_.__r.__words[2];
      if (v8)
      {
        *(void *)(size + 16) = p_end;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
      }
      else
      {
        this[23].__begin_ = p_end;
      }
      std::vector<std::__fs::filesystem::path>::__vdeallocate(this + 24);
      *(_OWORD *)&this[24].__begin_ = v14;
      this[24].__end_cap_.__value_ = v15;
      uint64_t v15 = 0;
      long long v14 = 0uLL;
      p_std::vector<char>::pointer begin = (void **)&this[25].__begin_;
      if (SHIBYTE(this[25].__end_cap_.__value_) < 0) {
        operator delete(*p_begin);
      }
      *(_OWORD *)p_std::vector<char>::pointer begin = v16;
      this[25].__end_cap_.__value_ = v17;
      HIBYTE(v17) = 0;
      LOBYTE(v16) = 0;
      uint64_t v12 = (void **)&v14;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((void *)buf.__r_.__value_.__l.__size_);
    }
    ZoomCurveValue::SaveToDictionary((ZoomCurveValue *)&this[23], v4);
    return 0;
  }
  else
  {
    if (getAUHOAZoomLog(void)::onceToken != -1) {
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
    }
    uint64_t v9 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AUHOAZoom.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 422;
      _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%s:%i AUBase::SaveState didn't produce valid dictionary?", (uint8_t *)&buf, 0x12u);
    }
    return 4294956445;
  }
}

__n128 AUHOAZoom::GetParameterInfo(AUHOAZoom *this, int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  if (!a2)
  {
    uint64_t ParameterMap = AUHOAZoom::GetParameterMap(this);
    int v10 = *(uint64_t **)(ParameterMap + 8);
    uint64_t v8 = ParameterMap + 8;
    uint64_t v9 = v10;
    if (v10)
    {
      uint64_t v11 = v8;
      uint64_t v12 = (uint64_t)v9;
      do
      {
        unsigned int v13 = *(_DWORD *)(v12 + 32);
        BOOL v14 = v13 >= a3;
        if (v13 >= a3) {
          uint64_t v15 = (uint64_t *)v12;
        }
        else {
          uint64_t v15 = (uint64_t *)(v12 + 8);
        }
        if (v14) {
          uint64_t v11 = v12;
        }
        uint64_t v12 = *v15;
      }
      while (*v15);
      if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a3)
      {
        while (1)
        {
          while (1)
          {
            unsigned int v16 = *((_DWORD *)v9 + 8);
            if (v16 <= a3) {
              break;
            }
            uint64_t v9 = (uint64_t *)*v9;
            if (!v9) {
              goto LABEL_19;
            }
          }
          if (v16 >= a3) {
            break;
          }
          uint64_t v9 = (uint64_t *)v9[1];
          if (!v9) {
LABEL_19:
          }
            std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
        }
        long long v17 = *(_OWORD *)(v9 + 5);
        long long v18 = *(_OWORD *)(v9 + 9);
        *(_OWORD *)&a4->name[16] = *(_OWORD *)(v9 + 7);
        *(_OWORD *)&a4->name[32] = v18;
        *(_OWORD *)a4->name = v17;
        __n128 result = *(__n128 *)(v9 + 11);
        long long v19 = *(_OWORD *)(v9 + 13);
        long long v20 = *(_OWORD *)(v9 + 15);
        *(void *)&a4->AudioUnitParameterOptions flags = v9[17];
        *(_OWORD *)&a4->clumpID = v19;
        *(_OWORD *)&a4->unit = v20;
        *(__n128 *)&a4->name[48] = result;
      }
    }
  }
  return result;
}

uint64_t AUHOAZoom::GetParameterMap(AUHOAZoom *this)
{
  uint64_t result = *((void *)this + 66);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1BB5DCC80(_Unwind_Exception *a1)
{
  *(void *)(v2 - 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v1;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(*(char **)(v2 + 8));
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void AUHOAZoom::AddParameterToMap(uint64_t **a1, unsigned int a2, int a3, const __CFString *a4, uint64_t a5, float a6, float a7, float a8)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  memset(&v36, 0, sizeof(v36));
  bzero(buffer, 0x80uLL);
  LODWORD(v34) = 0;
  *(void *)((char *)&v34 + 4) = __PAIR64__(LODWORD(a7), LODWORD(a6));
  *((float *)&v34 + 3) = a8;
  LODWORD(v35) = a3;
  if (&v36 != (std::vector<std::string> *)a5)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v36, *(std::string **)a5, *(long long **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3));
    a3 = v35;
  }
  *((void *)&v33 + freeMatrix(*((_DWORD *)this + 17), this + 1) = a4;
  LODWORD(v35) = a3 | 0x8000000;
  CFStringGetCString(a4, buffer, 52, 0x8000100u);
  LODWORD(v33) = 0;
  LODWORD(v35) = v35 | 0x100000;
  long long v17 = (char **)(a1 + 1);
  unsigned int v16 = (char *)a1[1];
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        long long v18 = (char **)v16;
        unsigned int v19 = *((_DWORD *)v16 + 8);
        if (v19 <= a2) {
          break;
        }
        unsigned int v16 = *v18;
        long long v17 = v18;
        if (!*v18) {
          goto LABEL_11;
        }
      }
      if (v19 >= a2) {
        break;
      }
      unsigned int v16 = v18[1];
      if (!v16)
      {
        long long v17 = v18 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    long long v18 = (char **)(a1 + 1);
LABEL_11:
    long long v20 = (char *)operator new(0xA8uLL);
    *((void *)v20 + 18) = 0;
    long long v21 = v31;
    *(_OWORD *)(v20 + 88) = v32;
    long long v22 = v34;
    *(_OWORD *)(v20 + 104) = v33;
    *(_OWORD *)(v20 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v22;
    long long v23 = v30;
    *(_OWORD *)(v20 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)buffer;
    *(_OWORD *)(v20 + 56) = v23;
    *((_DWORD *)v20 + 8) = a2;
    std::vector<char>::pointer begin = (long long *)v36.__begin_;
    *((void *)v20 + 17) = v35;
    *(_OWORD *)(v20 + 72) = v21;
    uint64_t end = (long long *)v36.__end_;
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)begin) >> 3);
    *((void *)v20 + 19) = 0;
    *((void *)v20 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v20 + 6, begin, end, v26);
    *(void *)long long v20 = 0;
    *((void *)v20 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
    *((void *)v20 + 2) = v18;
    *long long v17 = v20;
    uint64_t v27 = (uint64_t *)**a1;
    if (v27)
    {
      *a1 = v27;
      long long v20 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v20);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  long long v28 = &v36;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_1BB5DCF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  operator delete(v9);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,HOAZoomParameterInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,HOAZoomParameterInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,HOAZoomParameterInfo>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 144);
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

uint64_t AUHOAZoom::GetParameterList(AUHOAZoom *this, int a2, unsigned int *a3, unsigned int *a4)
{
  *a4 = 0;
  if (!a2)
  {
    uint64_t ParameterMap = (void *)AUHOAZoom::GetParameterMap(this);
    *a4 = ParameterMap[2];
    if (a3)
    {
      int v10 = (void *)*ParameterMap;
      uint64_t v8 = ParameterMap + 1;
      uint64_t v9 = v10;
      if (v10 != v8)
      {
        uint64_t v11 = 0;
        do
        {
          a3[v11] = *((_DWORD *)v9 + 8);
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              unsigned int v13 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              unsigned int v13 = (void *)v9[2];
              BOOL v14 = *v13 == (void)v9;
              uint64_t v9 = v13;
            }
            while (!v14);
          }
          ++v11;
          uint64_t v9 = v13;
        }
        while (v13 != v8);
      }
    }
  }
  return 0;
}

uint64_t AUHOAZoom::BusCountWritable(AUHOAZoom *this)
{
  return 0;
}

uint64_t AUHOAZoom::Render(AUHOAZoom *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = (AUHOAZoom *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 128), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUHOAZoom *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, &v13, 1, &BufferList);
  }
  return result;
}

uint64_t AUHOAZoom::ProcessMultipleBufferLists(AUHOAZoom *this, unsigned int *a2, int a3, CLiteMatrix *a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294956428;
  if (a4 != 1 || a6 != 1) {
    return result;
  }
  uint64_t v9 = *((void *)this + 78);
  if (v9 != a3) {
    return 4294956422;
  }
  uint64_t v10 = *((void *)this + 67);
  if (!v10) {
    return 4294956429;
  }
  uint64_t v11 = *a5;
  uint64_t v12 = *a7;
  if (!*((unsigned char *)this + 652))
  {
    if (atomic_exchange((atomic_uint *volatile)(v10 + 336), 0))
    {
      uint64_t v64 = v10 + 192;
      int v19 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v10 + 192));
      char v65 = v19;
      if (v19)
      {
        DominanceCurveCoordinator::UpdateEffectiveDominanceCurve((DominanceCurveCoordinator *)v10);
        uint64_t v21 = *(void *)(v10 + 280);
        uint64_t v20 = *(void *)(v10 + 288);
        if (0xCCCCCCCCCCCCCCCDLL * ((v20 - v21) >> 3) == (uint64_t)(*(void *)(v10 + 80) - *(void *)(v10 + 72)) >> 2)
        {
          if (v20 != v21)
          {
            uint64_t v22 = 0;
            unint64_t v23 = 0;
            do
            {
              uint64_t v24 = *(void *)(v10 + 72);
              if (v23 >= (*(void *)(v10 + 80) - v24) >> 2) {
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
              int v63 = *(_DWORD *)(v10 + 320);
              int v25 = *(_DWORD *)(v10 + 304);
              float v26 = *(float *)(v24 + 4 * v23);
              double v27 = v26;
              if (v26 < 0.0 || v26 > 1.0)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1) {
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
                }
                float v29 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string buf = 136315650;
                  float v67 = "DominanceZoom.cpp";
                  __int16 v68 = 1024;
                  int v69 = 22;
                  __int16 v70 = 2048;
                  double v71 = v26;
                  _os_log_error_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "%s:%i illegal dominance parameter value: %f", buf, 0x1Cu);
                }
              }
              if (v25 != 1)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1) {
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
                }
                long long v30 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string buf = 136315394;
                  float v67 = "DominanceZoom.cpp";
                  __int16 v68 = 1024;
                  int v69 = 23;
                  _os_log_error_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, "%s:%i only first order is supported now", buf, 0x12u);
                }
              }
              uint64_t v31 = ((v25 + 1) * (v25 + 1));
              if (*(void *)(v21 + v22 + 8) != v31)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1) {
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
                }
                long long v32 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string buf = 136315394;
                  float v67 = "DominanceZoom.cpp";
                  __int16 v68 = 1024;
                  int v69 = 26;
                  _os_log_error_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_ERROR, "%s:%i bad outMatrix num cols", buf, 0x12u);
                }
              }
              if (*(void *)(v21 + v22) != v31)
              {
                if (getAUHOAZoomLog(void)::onceToken != -1) {
                  dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
                }
                long long v33 = getAUHOAZoomLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string buf = 136315394;
                  float v67 = "DominanceZoom.cpp";
                  __int16 v68 = 1024;
                  int v69 = 27;
                  _os_log_error_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_ERROR, "%s:%i bad outMatrix num rows", buf, 0x12u);
                }
              }
              if (v25 != 1) {
                goto LABEL_55;
              }
              float v34 = 1.0 - v27 * 0.9 * (v27 * 0.9);
              float v35 = sqrtf(v34);
              if (v63 == 1)
              {
                float v40 = v27 * 1.33333333;
                uint64_t v38 = *(void *)(v21 + v22 + 16);
                uint64_t v37 = *(void *)(v21 + v22 + 24);
                *(void *)uint64_t v38 = 1065353216;
                *(_DWORD *)(v38 + 8) = 0;
                *(float *)(v38 + 12) = v40;
                *(_DWORD *)(v38 + 16) = 0;
                *(float *)(v38 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v35;
                float v39 = v26 / -3.0;
              }
              else
              {
                if (v63)
                {
                  if (getAUHOAZoomLog(void)::onceToken != -1) {
                    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
                  }
                  float v41 = getAUHOAZoomLog(void)::gLog;
                  if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)std::string buf = 136315650;
                    float v67 = "DominanceZoom.cpp";
                    __int16 v68 = 1024;
                    int v69 = 75;
                    __int16 v70 = 1024;
                    LODWORD(v7freeMatrix(*((_DWORD *)this + 17), this + 1) = v63;
                    _os_log_error_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_ERROR, "%s:%i unsupported normalization %i", buf, 0x18u);
                  }
                  goto LABEL_55;
                }
                float v36 = v27 * 0.769800373;
                uint64_t v38 = *(void *)(v21 + v22 + 16);
                uint64_t v37 = *(void *)(v21 + v22 + 24);
                *(void *)uint64_t v38 = 1065353216;
                *(_DWORD *)(v38 + 8) = 0;
                *(float *)(v38 + 12) = v36;
                *(_DWORD *)(v38 + 16) = 0;
                *(float *)(v38 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v35;
                float v39 = v26 / -1.7321;
              }
              *(void *)(v38 + 24) = 0;
              *(void *)(v38 + 32) = 0;
              *(float *)(v38 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v35;
              *(_DWORD *)(v38 + 44) = 0;
              *(float *)(v38 + 48) = v39;
              *(_DWORD *)(v38 + 52) = 0;
              *(_DWORD *)(v38 + 56) = 0;
              *(_DWORD *)(v38 + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1065353216;
              bzero((void *)(v38 + 4 * ((v37 - v38) >> 3)), 0x40uLL);
LABEL_55:
              ++v23;
              uint64_t v21 = *(void *)(v10 + 280);
              v22 += 40;
            }
            while (v23 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v10 + 288) - v21) >> 3));
          }
        }
        else
        {
          if (getAUHOAZoomLog(void)::onceToken != -1) {
            dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
          }
          float v42 = getAUHOAZoomLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            float v67 = "DominanceZoom.cpp";
            __int16 v68 = 1024;
            int v69 = 116;
            _os_log_error_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "%s:%i bad dominanceValues size", buf, 0x12u);
          }
        }
      }
      else
      {
        atomic_fetch_add((atomic_uint *volatile)(v10 + 336), 1u);
      }
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v64);
    }
    unint64_t v43 = *v11;
    if (*(void *)(v10 + 312) != v43) {
      __assert_rtn("Process", "DominanceZoom.cpp", 122, "inBuffer->mNumberBuffers == mNumChannels");
    }
    if (v43 != *v12) {
      __assert_rtn("Process", "DominanceZoom.cpp", 123, "outBuffer->mNumberBuffers == mNumChannels");
    }
    uint64_t v44 = *(void *)(v10 + 328);
    if (((v44 ^ v9) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      __assert_rtn("Process", "DominanceZoom.cpp", 124, "numSamples == mBlockSize * 2");
    }
    if (v44 != -1)
    {
      unint64_t v45 = 0;
      uint64_t v46 = (int **)(v11 + 4);
      int v47 = v12 + 4;
      do
      {
        if (v43)
        {
          unint64_t v48 = 0;
          uint64_t v49 = v46;
          do
          {
            if (v45)
            {
              uint64_t v50 = *(void *)(v10 + 328);
              int v51 = (*v49)[v45];
              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 200), v48, std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v51;
              int v52 = 0;
              if (v45 != v50) {
                int v52 = (*v49)[*(void *)(v10 + 328) + v45];
              }
            }
            else
            {
              int v53 = **v49;
              *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 200), v48, std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v53;
              int v52 = 0;
            }
            CLiteMatrix::Get((CLiteMatrix *)(v10 + 200), v48, 0);
            *uint64_t v54 = v52;
            ++v48;
            v49 += 2;
          }
          while (v48 < *(void *)(v10 + 312));
        }
        uint64_t v55 = *(void *)(v10 + 280);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v10 + 288) - v55) >> 3) <= v45) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        CLiteMatrix::MatrixMultiply((vDSP_Length *)(v55 + 40 * v45), (const CLiteMatrix *)(v10 + 200), (const CLiteMatrix *)(v10 + 240), a4);
        unint64_t v43 = *(void *)(v10 + 312);
        if (v43)
        {
          unint64_t v56 = 0;
          float v57 = v47;
          do
          {
            if (v45)
            {
              uint64_t v58 = *(void *)(v10 + 328);
              int v59 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 240), v56, 0);
              float v60 = (_DWORD *)*v57;
              if (v45 == v58)
              {
                unint64_t v61 = *(void *)(v10 + 328);
              }
              else
              {
                v60[v45] = v59;
                CLiteMatrix::Get((CLiteMatrix *)(v10 + 240), v56, 0);
                int v59 = *v62;
                float v60 = (_DWORD *)*v57;
                unint64_t v61 = *(void *)(v10 + 328) + v45;
              }
              v60[v61] = v59;
            }
            else
            {
              *(_DWORD *)*float v57 = *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)(v10 + 240), v56, 0);
            }
            ++v56;
            unint64_t v43 = *(void *)(v10 + 312);
            v57 += 2;
          }
          while (v56 < v43);
        }
        ++v45;
      }
      while (v45 < *(void *)(v10 + 328) + 1);
    }
    return 0;
  }
  unint64_t v13 = *v11;
  if (v13 != *v12 || !*v11) {
    return 0;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    size_t v16 = v11[v14 + 3];
    if (v16 == v12[v14 + 3])
    {
      long long v17 = *(const void **)&v11[v14 + 4];
      long long v18 = *(void **)&v12[v14 + 4];
      if (v17 != v18)
      {
        memcpy(v18, v17, v16);
        unint64_t v13 = *v11;
      }
    }
    uint64_t result = 0;
    ++v15;
    v14 += 4;
  }
  while (v15 < v13);
  return result;
}

void sub_1BB5DDA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::CanScheduleParameters(AUHOAZoom *this)
{
  return 0;
}

uint64_t AUHOAZoom::SetParameter(DominanceZoom **this, unsigned int a2, int a3, float a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956430;
  }
  if (a2 == 1)
  {
    if (this[67])
    {
      if (getAUHOAZoomLog(void)::onceToken != -1) {
        dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
      }
      uint64_t v10 = getAUHOAZoomLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 136315650;
        unint64_t v13 = "AUHOAZoom.mm";
        __int16 v14 = 1024;
        int v15 = 512;
        __int16 v16 = 2048;
        double v17 = a4;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s:%i Setting FOV %f on mDominanceZoom", (uint8_t *)&v12, 0x1Cu);
      }
      DominanceZoom::SetFOV(this[67], a4);
    }
    LOBYTE(v8) = 1;
    goto LABEL_18;
  }
  if (a2 == 2)
  {
    uint64_t v8 = this[67];
    if (v8)
    {
      if (getAUHOAZoomLog(void)::onceToken != -1) {
        dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
      }
      uint64_t v9 = getAUHOAZoomLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 136315650;
        unint64_t v13 = "AUHOAZoom.mm";
        __int16 v14 = 1024;
        int v15 = 505;
        __int16 v16 = 2048;
        double v17 = a4;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%s:%i Setting manual zoom amount %f on mDominanceZoom", (uint8_t *)&v12, 0x1Cu);
      }
      DominanceZoom::SetZoomAmount(this[67], a4);
      LOBYTE(v8) = 0;
    }
LABEL_18:
    *((unsigned char *)this + 644) = (_BYTE)v8;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  return 0;
}

uint64_t AUHOAZoom::GetParameter(float **this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  if (!a3)
  {
    int v12 = this[67];
    if (v12)
    {
      if (a2 == 1)
      {
        if (getAUHOAZoomLog(void)::onceToken != -1) {
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
        }
        uint64_t v18 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 136315394;
          long long v28 = "DominanceZoom.cpp";
          __int16 v29 = 1024;
          int v30 = 211;
          _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "%s:%i --", (uint8_t *)&v27, 0x12u);
        }
        caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1) {
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
        }
        int v19 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 136315394;
          long long v28 = "DominanceZoom.cpp";
          __int16 v29 = 1024;
          int v30 = 211;
          _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEFAULT, "%s:%i locked", (uint8_t *)&v27, 0x12u);
        }
        float v20 = v12[47];
        caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1) {
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
        }
        uint64_t v21 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 136315906;
          long long v28 = "AUHOAZoom.mm";
          __int16 v29 = 1024;
          int v30 = 480;
          __int16 v31 = 1024;
          int v32 = 1;
          __int16 v33 = 2048;
          double v34 = v20;
          _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEFAULT, "%s:%i Read param %i val %f from mDominanceZoom", (uint8_t *)&v27, 0x22u);
        }
        uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
        ausdk::AUElement::SetParameter(v22, 1u, v20, 0);
      }
      else if (!a2)
      {
        if (getAUHOAZoomLog(void)::onceToken != -1) {
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
        }
        unint64_t v13 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 136315394;
          long long v28 = "DominanceZoom.cpp";
          __int16 v29 = 1024;
          int v30 = 224;
          _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%s:%i --", (uint8_t *)&v27, 0x12u);
        }
        caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1) {
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
        }
        __int16 v14 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 136315394;
          long long v28 = "DominanceZoom.cpp";
          __int16 v29 = 1024;
          int v30 = 224;
          _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%s:%i locked", (uint8_t *)&v27, 0x12u);
        }
        float v15 = v12[46];
        caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v12 + 48));
        if (getAUHOAZoomLog(void)::onceToken != -1) {
          dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
        }
        __int16 v16 = getAUHOAZoomLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 136315906;
          long long v28 = "AUHOAZoom.mm";
          __int16 v29 = 1024;
          int v30 = 475;
          __int16 v31 = 1024;
          int v32 = 0;
          __int16 v33 = 2048;
          double v34 = v15;
          _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%s:%i Read param %i val %f from mDominanceZoom", (uint8_t *)&v27, 0x22u);
        }
        double v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
        ausdk::AUElement::SetParameter(v17, 0, v15, 0);
      }
    }
    unint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(this + 4), 0);
    *a5 = ausdk::AUElement::GetParameter(v23, a2);
    if (getAUHOAZoomLog(void)::onceToken != -1) {
      dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
    }
    uint64_t v24 = getAUHOAZoomLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      double v25 = *a5;
      int v27 = 136315906;
      long long v28 = "AUHOAZoom.mm";
      __int16 v29 = 1024;
      int v30 = 488;
      __int16 v31 = 1024;
      int v32 = a2;
      __int16 v33 = 2048;
      double v34 = v25;
      _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEFAULT, "%s:%i param ID %i outValue %f", (uint8_t *)&v27, 0x22u);
    }
  }
  return 0;
}

void sub_1BB5DE1BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::SetProperty(AUHOAZoom *this, int a2, int a3, unsigned int a4, _DWORD *a5, int a6)
{
  *(void *)&long long v29 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    *((unsigned char *)this + 652) = *a5 != 0;
    return 4294956417;
  }
  if (a2 != 2000) {
    return 4294956417;
  }
  uint64_t result = 4294956445;
  if (a6 == 8)
  {
    uint64_t v8 = *(void **)a5;
    if (*(void *)a5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "HOAZoomCurve");
      std::string::basic_string[abi:ne180100]<0>(&v25, "HOAZoomInDominanceCurve");
      std::string::basic_string[abi:ne180100]<0>(&v27, "HOAZoomOutDominanceCurve");
      uint64_t v18 = 0;
      int v19 = 0;
      float v20 = 0;
      uint64_t v21 = &v18;
      char v22 = 0;
      uint64_t v18 = (long long *)operator new(0x48uLL);
      int v19 = v18;
      float v20 = (char *)v18 + 72;
      uint64_t v9 = 0;
      int v19 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, &v23, &v29, (std::string *)v18);
      do
      {
        if (*((char *)&v28 + v9 + 7) < 0) {
          operator delete(*(void **)((char *)&v27 + v9));
        }
        v9 -= 24;
      }
      while (v9 != -72);
      memset(&v17, 0, sizeof(v17));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, v18, v19, 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v18) >> 3));
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      ZoomCurveValue::LoadFromDictionary((uint64_t)&v23, v8, (long long **)&v17, (uint64_t *)__p);
      uint64_t v10 = (char *)this + 560;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 70));
      uint64_t v11 = *((void *)&v23 + 1);
      *((void *)this + 69) = v23;
      *((void *)this + 7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v11;
      uint64_t v12 = v24;
      *((void *)this + 7freeMatrix(*((_DWORD *)this + 17), this + 1) = v24;
      if (v12)
      {
        *(void *)(v11 + 16) = v10;
        *(void *)&long long v23 = (char *)&v23 + 8;
        *((void *)&v23 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
        uint64_t v24 = 0;
      }
      else
      {
        *((void *)this + 69) = v10;
      }
      std::vector<std::__fs::filesystem::path>::__vdeallocate((std::vector<std::string> *)this + 24);
      *((_OWORD *)this + 36) = v25;
      *((void *)this + 74) = v26;
      uint64_t v26 = 0;
      long long v25 = 0uLL;
      unint64_t v13 = (void **)((char *)this + 600);
      if (*((char *)this + 623) < 0) {
        operator delete(*v13);
      }
      *(_OWORD *)unint64_t v13 = v27;
      *((void *)this + 77) = v28;
      HIBYTE(v28) = 0;
      LOBYTE(v27) = 0;
      uint64_t v21 = (long long **)&v25;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)&v23 + 1));
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v21 = (long long **)&v17;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      __int16 v14 = (DominanceZoom *)*((void *)this + 67);
      if (v14) {
        DominanceZoom::SetZoomCurveValue(v14, (AUHOAZoom *)((char *)this + 552));
      }
      *(void *)&long long v23 = &v18;
      std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      return 0;
    }
  }
  return result;
}

void sub_1BB5DE454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  a24 = &a19;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::GetProperty(std::vector<std::string> *this, int a2, int a3, unsigned int a4, __CFDictionary **a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    uint64_t v5 = 4294956417;
    if (a2 > 2000)
    {
      if (a2 == 2001)
      {
        std::string v17 = objc_opt_new();
        uint64_t v10 = v17;
        if (v17)
        {
          if (this[22].__end_)
          {
            id v18 = v17;
            std::vector<std::string>::pointer end = this[22].__end_;
            if (getAUHOAZoomLog(void)::onceToken != -1) {
              dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
            }
            float v20 = getAUHOAZoomLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "DominanceZoom.cpp";
              __int16 v40 = 1024;
              int v41 = 230;
              _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEFAULT, "%s:%i --", buf, 0x12u);
            }
            caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)&end[8]);
            if (getAUHOAZoomLog(void)::onceToken != -1) {
              dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_34782);
            }
            uint64_t v21 = getAUHOAZoomLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "DominanceZoom.cpp";
              __int16 v40 = 1024;
              int v41 = 230;
              _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEFAULT, "%s:%i locked", buf, 0x12u);
            }
            if (atomic_load((unsigned int *)&end[14])) {
              DominanceCurveCoordinator::UpdateEffectiveDominanceCurve((DominanceCurveCoordinator *)end);
            }
            memset(&__p, 0, sizeof(__p));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, end[3].__r_.__value_.__l.__data_, end[3].__r_.__value_.__l.__size_, (uint64_t)(end[3].__r_.__value_.__l.__size_ - end[3].__r_.__value_.__r.__words[0]) >> 2);
            caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)&end[8]);
            std::vector<std::string>::pointer begin = this[26].__begin_;
            double v24 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[3].__end_, 0) + 80);
            id v25 = v18;
            uint64_t v26 = objc_opt_new();
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            for (unsigned int i = (_DWORD *)__p.__r_.__value_.__r.__words[0]; i != (_DWORD *)size; ++i)
            {
              LODWORD(v27) = *i;
              int v30 = [NSNumber numberWithFloat:v27];
              [v26 addObject:v30];
            }
            [v25 setObject:v26 forKeyedSubscript:@"DominanceValues"];
            __int16 v31 = [NSNumber numberWithUnsignedInt:begin];
            [v25 setObject:v31 forKeyedSubscript:@"BlockSize"];

            int v32 = [NSNumber numberWithDouble:v24];
            [v25 setObject:v32 forKeyedSubscript:@"SampleRate"];

            *a5 = (__CFDictionary *)v25;
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v5 = 0;
          }
          else
          {
            uint64_t v5 = 4294956429;
          }
        }
        else
        {
          uint64_t v5 = 4294956433;
        }
        goto LABEL_41;
      }
      if (a2 != 3700) {
        return v5;
      }
      uint64_t v5 = 0;
      int value_low = LOBYTE(this[15].__end_cap_.__value_);
    }
    else
    {
      if (a2 != 21)
      {
        if (a2 != 2000) {
          return v5;
        }
        uint64_t v9 = objc_opt_new();
        uint64_t v10 = v9;
        if (v9)
        {
          uint64_t v11 = v9;
          uint64_t v12 = (uint64_t)this[22].__end_;
          if (v12)
          {
            DominanceZoom::CopyZoomCurveValue(&__p, v12);
            p_std::vector<std::string>::pointer end = (std::string *)&this[23].__end_;
            std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[23].__end_->__r_.__value_.__r.__words);
            std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
            this[23].__begin_ = (std::vector<std::string>::pointer)__p.__r_.__value_.__r.__words[0];
            this[23].__end_ = (std::vector<std::string>::pointer)v14;
            std::string::size_type v15 = __p.__r_.__value_.__r.__words[2];
            this[23].__end_cap_.__value_ = (std::string *)__p.__r_.__value_.__r.__words[2];
            if (v15)
            {
              *(void *)(v14 + 16) = p_end;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
            }
            else
            {
              this[23].__begin_ = p_end;
            }
            std::vector<std::__fs::filesystem::path>::__vdeallocate(this + 24);
            *(_OWORD *)&this[24].__begin_ = v35;
            this[24].__end_cap_.__value_ = v36;
            float v36 = 0;
            long long v35 = 0uLL;
            p_std::vector<std::string>::pointer begin = (void **)&this[25].__begin_;
            if (SHIBYTE(this[25].__end_cap_.__value_) < 0) {
              operator delete(*p_begin);
            }
            *(_OWORD *)p_std::vector<std::string>::pointer begin = v37;
            this[25].__end_cap_.__value_ = v38;
            HIBYTE(v38) = 0;
            LOBYTE(v37) = 0;
            *(void *)std::string buf = &v35;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((void *)__p.__r_.__value_.__l.__size_);
          }
          ZoomCurveValue::SaveToDictionary((ZoomCurveValue *)&this[23], v11);
          uint64_t v5 = 0;
          *a5 = v11;
        }
        else
        {
          uint64_t v5 = 4294956433;
        }
LABEL_41:

        return v5;
      }
      uint64_t v5 = 0;
      int value_low = BYTE4(this[27].__begin_);
    }
    *(_DWORD *)a5 = value_low;
    return v5;
  }
  return 4294956417;
}

void sub_1BB5DE974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t AUHOAZoom::GetPropertyInfo(AUHOAZoom *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result = 4294956417;
  if (!a3)
  {
    if (a2 > 2000)
    {
      if (a2 == 2001)
      {
        BOOL v7 = 0;
LABEL_13:
        unsigned int v8 = 8;
        goto LABEL_14;
      }
      if (a2 != 3700) {
        return result;
      }
      BOOL v7 = 0;
    }
    else
    {
      if (a2 != 21)
      {
        if (a2 != 2000) {
          return result;
        }
        BOOL v7 = 1;
        goto LABEL_13;
      }
      BOOL v7 = 1;
    }
    unsigned int v8 = 4;
LABEL_14:
    uint64_t result = 0;
    *a5 = v8;
    *a6 = v7;
  }
  return result;
}

void AUHOAZoom::Cleanup(AUHOAZoom *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (getAUHOAZoomLog(void)::onceToken != -1) {
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
  }
  uint64_t v2 = getAUHOAZoomLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    uint64_t v5 = "AUHOAZoom.mm";
    __int16 v6 = 1024;
    int v7 = 197;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%s:%i ----", (uint8_t *)&v4, 0x12u);
  }
  uint64_t v3 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v3) {
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](v3);
  }
}

void std::default_delete<DominanceZoom>::operator()[abi:ne180100](uint64_t a1)
{
  int v4 = (void **)(a1 + 280);
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 216);
  if (v3)
  {
    *(void *)(a1 + 224) = v3;
    operator delete(v3);
  }
  DominanceCurveCoordinator::~DominanceCurveCoordinator((void **)a1);

  JUMPOUT(0x1C185D370);
}

void DominanceCurveCoordinator::~DominanceCurveCoordinator(void **this)
{
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  uint64_t v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v3 = this + 3;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(this[1]);
}

uint64_t AUHOAZoom::Initialize(AUHOAZoom *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (getAUHOAZoomLog(void)::onceToken != -1) {
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
  }
  uint64_t v2 = getAUHOAZoomLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUHOAZoomLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AUHOAZoom.mm";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 144;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "%s:%i ---", (uint8_t *)&buf, 0x12u);
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 80), 0);
  long long v4 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&buf.double mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&buf.mBytesPerPacket = v4;
  *(void *)&buf.UInt32 mBitsPerChannel = *(void *)(Element + 112);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUHOAZoom *)((char *)this + 128), 0);
  long long v6 = *(_OWORD *)(v5 + 96);
  long long v8 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)uint64_t v9 = v6;
  *(void *)&v9[16] = *(void *)(v5 + 112);
  if (*(double *)&v8 == buf.mSampleRate
    && DWORD2(v8) == buf.mFormatID
    && *(void *)v9 == *(void *)&buf.mBytesPerPacket
    && *(void *)&v9[12] == *(void *)&buf.mChannelsPerFrame
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v8, &buf, 0, 0)
    && *((void *)this + 79) == buf.mChannelsPerFrame
    && *((_DWORD *)this + 160) == 1)
  {
    *((void *)this + 78) = *((unsigned int *)this + 84);
    operator new();
  }
  return 4294956428;
}

void sub_1BB5DF284(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10B2C4085F10906);
  _Unwind_Resume(a1);
}

id getAUHOAZoomLog(void)
{
  if (getAUHOAZoomLog(void)::onceToken != -1) {
    dispatch_once(&getAUHOAZoomLog(void)::onceToken, &__block_literal_global_18288);
  }
  CFNumberRef v0 = (void *)getAUHOAZoomLog(void)::gLog;

  return v0;
}

void AUHOAZoom::~AUHOAZoom(AUHOAZoom *this)
{
  *(void *)this = &unk_1F14B90D0;
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  uint64_t v3 = (void **)((char *)this + 576);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 70));
  uint64_t v2 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v2) {
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](v2);
  }
  std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
  MEMORY[0x1C185D370]();
}

{
  uint64_t v2;
  void **v3;

  *(void *)this = &unk_1F14B90D0;
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  uint64_t v3 = (void **)((char *)this + 576);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*((void **)this + 70));
  uint64_t v2 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v2) {
    std::default_delete<DominanceZoom>::operator()[abi:ne180100](v2);
  }
  std::unique_ptr<std::map<unsigned int,HOAZoomParameterInfo>>::reset[abi:ne180100]((uint64_t *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

BOOL AUDeesser::ValidFormat(AUDeesser *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame < 3 && v5;
}

uint64_t AUDeesser::SupportedNumChannels(AUDeesser *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDeesser::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 2;
}

BOOL AUDeesser::StreamFormatWritable(AUDeesser *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDeesser::SupportsTail(AUDeesser *this)
{
  return 1;
}

double AUDeesser::GetTailTime(AUDeesser *this)
{
  return 0.0;
}

double AUDeesser::GetLatency(AUDeesser *this)
{
  return 0.0;
}

uint64_t AUDeesser::CopyClumpName(AUDeesser *this, int a2, int a3, unsigned int a4, __CFString **a5)
{
  if (a2) {
    return 4294956430;
  }
  if ((a3 - 1) > 2) {
    return 4294956418;
  }
  int v7 = off_1E623F8A8[a3 - 1];
  CFRetain(v7);
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUDeesser::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 135);
  }
  return result;
}

uint64_t AUDeesser::GetParameterInfo(AUDeesser *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956418;
  }
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  UInt32 v6 = 2;
  switch(a3)
  {
    case 0:
      buffer->clumpID = 1;
      CFStringRef v7 = @"Low Suppression Band Start Frequency";
      buffer->cfNameString = @"Low Suppression Band Start Frequency";
      uint64_t v8 = 0x467A000042C80000;
      int v9 = -1073741824;
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Hertz;
      AudioUnitParameterValue v11 = 2500.0;
      goto LABEL_28;
    case 1:
    case 2:
      buffer->clumpID = 1;
      if (a3 == 1) {
        CFStringRef v7 = @"Low Suppression Band End Frequency";
      }
      else {
        CFStringRef v7 = @"High Suppression Band End Frequency";
      }
      buffer->cfNameString = v7;
      uint64_t v8 = 0x473B800043480000;
      int v9 = -1073741824;
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Hertz;
      AudioUnitParameterValue v11 = 6000.0;
      goto LABEL_28;
    case 3:
      goto LABEL_11;
    case 4:
      UInt32 v6 = 3;
LABEL_11:
      buffer->clumpID = v6;
      CFStringRef v7 = @"Suppression RMS Level";
      buffer->cfNameString = @"Suppression RMS Level";
      uint64_t v8 = 0x41400000C2C00000;
      int v9 = -1073741824;
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Decibels;
      int v12 = -1038614528;
      goto LABEL_22;
    case 5:
      goto LABEL_13;
    case 6:
      UInt32 v6 = 3;
LABEL_13:
      buffer->clumpID = v6;
      CFStringRef v7 = @"Threshold Ratio (RMS)";
      buffer->cfNameString = @"Threshold Ratio (RMS)";
      uint64_t v8 = 0x41400000C2C00000;
      int v9 = -1073741824;
      AudioUnitParameterValue v11 = -9.0;
      goto LABEL_25;
    case 7:
      goto LABEL_15;
    case 8:
      UInt32 v6 = 3;
LABEL_15:
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Generic;
      CFStringRef v7 = @"Threshold Smoothing Time (ms)";
      buffer->clumpID = v6;
      buffer->cfNameString = @"Threshold Smoothing Time (ms)";
      uint64_t v8 = 0x42C8000040C00000;
      int v9 = -1073741824;
      AudioUnitParameterValue v11 = 24.0;
      goto LABEL_28;
    case 9:
      goto LABEL_17;
    case 10:
      UInt32 v6 = 3;
LABEL_17:
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Generic;
      CFStringRef v7 = @"Suppression Attack Time (ms)";
      buffer->clumpID = v6;
      buffer->cfNameString = @"Suppression Attack Time (ms)";
      uint64_t v8 = 0x4496000040C00000;
      int v9 = -1073741824;
      AudioUnitParameterValue v11 = 10.0;
      goto LABEL_28;
    case 11:
      goto LABEL_19;
    case 12:
      UInt32 v6 = 3;
LABEL_19:
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Generic;
      buffer->clumpID = v6;
      CFStringRef v7 = @"Suppression Release Time (ms)";
      buffer->cfNameString = @"Suppression Release Time (ms)";
      uint64_t v8 = 0x4496000040C00000;
      int v9 = -1073741824;
      int v12 = 1120403456;
      goto LABEL_22;
    case 13:
      goto LABEL_21;
    case 14:
      UInt32 v6 = 3;
LABEL_21:
      int v9 = 1073774592;
      buffer->clumpID = v6;
      CFStringRef v7 = @"Measured Threshold Ratio (RMS)";
      buffer->cfNameString = @"Measured Threshold Ratio (RMS)";
      uint64_t v8 = 0x41400000C2C00000;
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Decibels;
      int v12 = -1027604480;
LABEL_22:
      AudioUnitParameterValue v11 = *(float *)&v12;
      goto LABEL_28;
    case 15:
      goto LABEL_24;
    case 16:
      UInt32 v6 = 3;
LABEL_24:
      int v9 = 1073774592;
      CFStringRef v7 = @"S Band Compression";
      buffer->clumpID = v6;
      buffer->cfNameString = @"S Band Compression";
      uint64_t v8 = 0x41A0000000000000;
      AudioUnitParameterValue v11 = 0.0;
LABEL_25:
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Decibels;
      goto LABEL_28;
    case 17:
      goto LABEL_27;
    case 18:
      UInt32 v6 = 3;
LABEL_27:
      buffer->clumpID = v6;
      CFStringRef v7 = @"Monitor S Detection";
      buffer->cfNameString = @"Monitor S Detection";
      uint64_t v8 = 0x3F80000000000000;
      int v9 = -1073741824;
      AudioUnitParameterValue v11 = 0.0;
      AudioUnitParameterUnit v10 = kAudioUnitParameterUnit_Boolean;
LABEL_28:
      buffer->AudioUnitParameterOptions flags = 135266304;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = v10;
      *(void *)&buffer->minCFNumberRef Value = v8;
      buffer->defaultCFNumberRef Value = v11;
      buffer->flags |= v9;
      break;
    default:
      uint64_t result = 4294956418;
      break;
  }
  return result;
}

uint64_t AUDeesser::Render(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = (AUDeesser *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  unsigned int v15 = 0;
  AudioUnitParameterValue v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUDeesser *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUDeesser::ProcessBufferLists(AUDeesser *this, unsigned int *a2, AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  int v10 = *((_DWORD *)this + 135);
  if (*((_DWORD *)this + 136) != v10)
  {
    AUDeesser::UpdateParameters(this);
    *((_DWORD *)this + 136) = v10;
  }
  if (*((_DWORD *)this + 134) || *((_DWORD *)this + 137) <= 1u) {
    goto LABEL_5;
  }
  int v12 = (BlockProcessor *)*((void *)this + 66);
  if (v12)
  {
    char v16 = a4;
    std::string v17 = a3;
    return BlockProcessor::Process(v12, a5, (const AudioBufferList **)&v17, &v16);
  }
  uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  uint64_t v14 = (_DWORD *)ausdk::AUBufferList::PrepareBuffer((AUDeesser *)((char *)this + 896), Element + 2, a5);
  CopyBufferList(&a3->mNumberBuffers, v14);
  int v15 = *((_DWORD *)this + 137);
  if (v15 == 4)
  {
    AUDeesser::Crossover4Way(this, a2, (const AudioTimeStamp *)((char *)this + 672), a4, a5);
    goto LABEL_6;
  }
  if (v15 == 3)
  {
    AUDeesser::Crossover3Way(this, a2, (const AudioTimeStamp *)((char *)this + 672), a4, a5);
    goto LABEL_6;
  }
  if (v15 != 2) {
LABEL_5:
  }
    CopyBufferList(&a3->mNumberBuffers, a4);
  else {
    AUDeesser::Crossover2Way(this, a2, (const AudioTimeStamp *)((char *)this + 672), a4, a5);
  }
LABEL_6:
  uint64_t result = 0;
  *((double *)this + 84) = *((double *)this + 84) + (double)a5;
  return result;
}

void AUDeesser::UpdateParameters(AUDeesser *this)
{
  int v2 = 0;
  uint64_t v3 = (char *)this + 736;
  do
  {
    for (uint64_t i = 0; i != 80; i += 8)
      AudioUnitSetParameter(*(AudioUnit *)&v3[i], v2 + 1000, 0, 0, 1.0, 0);
    ++v2;
  }
  while (v2 != 8);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0);
  CFStringRef v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  float v8 = ausdk::AUElement::GetParameter(v7, 1u);
  int v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  float v10 = ausdk::AUElement::GetParameter(v9, 2u);
  float v11 = *(double *)(ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0) + 80) * 0.49000001;
  int v47 = (AUDeesser *)((char *)this + 32);
  if (Parameter >= v11)
  {
    *((_DWORD *)this + 137) = 1;
LABEL_10:
    int v12 = 0;
    char v13 = 1;
    do
    {
      char v14 = v13;
      AudioUnitParameterID v15 = v12 | 0xFA0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v12 | 0xFA0, 0, 0, 0.0, 0);
      AudioUnitParameterID v16 = v12 | 0x3E8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v12 | 0x3E8, 0, 0, 0.0, 0);
      AudioUnitParameterID v17 = v12 | 0xBB8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v12 | 0xBB8, 0, 0, v8, 0);
      AudioUnitParameterID v18 = v12 | 0x7D0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v18, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v17, 0, 0, v8, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v18, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v17, 0, 0, v10, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v18, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v17, 0, 0, v10, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v18, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v17, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v18, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v17, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v18, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v17, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 98), v18, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v17, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 99), v18, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v17, 0, 0, v10, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 100), v18, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v15, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v16, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v17, 0, 0, v10, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 101), v18, 0, 0, 2.0, 0);
      char v13 = 0;
      int v12 = 1;
    }
    while ((v14 & 1) != 0);
    goto LABEL_18;
  }
  if (v8 >= v11)
  {
    int v19 = 0;
    *((_DWORD *)this + 137) = 2;
    char v20 = 1;
    do
    {
      char v21 = v20;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v19 | 0xFA0, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v19 | 0x3E8, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v19 | 0xBB8, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v19 | 0xFA0, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v19 | 0x3E8, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v19 | 0xBB8, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v19 | 0x7D0, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v19 | 0x7D0, 0, 0, 2.0, 0);
      char v20 = 0;
      int v19 = 1;
    }
    while ((v21 & 1) != 0);
  }
  else
  {
    if (v10 < v11)
    {
      *((_DWORD *)this + 137) = 4;
      goto LABEL_10;
    }
    int v22 = 0;
    *((_DWORD *)this + 137) = 3;
    char v23 = 1;
    do
    {
      char v24 = v23;
      AudioUnitParameterID v25 = v22 | 0xFA0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v22 | 0xFA0, 0, 0, 0.0, 0);
      AudioUnitParameterID v26 = v22 | 0x3E8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v22 | 0x3E8, 0, 0, 0.0, 0);
      AudioUnitParameterID v27 = v22 | 0xBB8;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v22 | 0xBB8, 0, 0, Parameter, 0);
      AudioUnitParameterID v28 = v22 | 0x7D0;
      AudioUnitSetParameter(*((AudioUnit *)this + 92), v28, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v25, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v26, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v27, 0, 0, Parameter, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 93), v28, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v25, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v26, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v27, 0, 0, v8, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 94), v28, 0, 0, 2.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v25, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v26, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v27, 0, 0, v8, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 95), v28, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v25, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v26, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v27, 0, 0, v8, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 96), v28, 0, 0, 1.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v25, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v26, 0, 0, 0.0, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v27, 0, 0, v8, 0);
      AudioUnitSetParameter(*((AudioUnit *)this + 97), v28, 0, 0, 2.0, 0);
      char v23 = 0;
      int v22 = 1;
    }
    while ((v24 & 1) != 0);
  }
LABEL_18:
  long long v29 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  *((float *)this + 163) = ausdk::AUElement::GetParameter(v29, 3u);
  int v30 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  *((float *)this + 165) = ausdk::AUElement::GetParameter(v30, 5u);
  __int16 v31 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  *((float *)this + 164) = ausdk::AUElement::GetParameter(v31, 4u);
  int v32 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  *((float *)this + 166) = ausdk::AUElement::GetParameter(v32, 6u);
  __int16 v33 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  float v34 = ausdk::AUElement::GetParameter(v33, 9u);
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 7u, 0, 0, (float)(1000.0 / v34) * -0.06, 0);
  long long v35 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  float v36 = ausdk::AUElement::GetParameter(v35, 0xBu);
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 6u, 0, 0, (float)(1000.0 / v36) * 0.06, 0);
  long long v37 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  float v38 = ausdk::AUElement::GetParameter(v37, 7u);
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 8u, 0, 0, v38, 0);
  float v39 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  *((unsigned char *)this + 648) = ausdk::AUElement::GetParameter(v39, 0x11u) > 0.0;
  __int16 v40 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  float v41 = ausdk::AUElement::GetParameter(v40, 0xAu);
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 7u, 0, 0, (float)(1000.0 / v41) * -0.06, 0);
  uint64_t v42 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  float v43 = ausdk::AUElement::GetParameter(v42, 0xCu);
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 6u, 0, 0, (float)(1000.0 / v43) * 0.06, 0);
  uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  float v45 = ausdk::AUElement::GetParameter(v44, 8u);
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 8u, 0, 0, v45, 0);
  uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v47, 0);
  *((unsigned char *)this + 649) = ausdk::AUElement::GetParameter(v46, 0x12u) > 0.0;
}

void AUDeesser::Crossover2Way(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, UInt32 a5)
{
  long long v9 = *(_OWORD *)&a3->mRateScalar;
  *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a3->mSampleTime;
  *(_OWORD *)&inTimeStamp.mRateScalar = v9;
  long long v10 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v10;
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 896));
  CopyBufferList((unsigned int *)BufferList, a4);
  float __C = 0.0;
  vDSP_Length v12 = a5;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  float __C = __C / (float)a5;
  char v13 = (const float **)((char *)this + 552);
  uint64_t v14 = *((unsigned int *)this + 139);
  *(float *)(*((void *)this + 71) + 4 * v14) = __C;
  unsigned int v15 = *((_DWORD *)this + 140);
  *((_DWORD *)this + 139) = ((int)v14 + 1) % v15;
  unsigned int v16 = *((_DWORD *)this + 138);
  if (v16 < v15) {
    *(_DWORD *)char v13 = v16 + 1;
  }
  double v17 = SlidingRMSWindow::ComputeRMS(v13);
  *(float *)&double v17 = *(float *)&v17 + 1.0e-20;
  float v18 = log10f(*(float *)&v17) * 10.0;
  AudioUnitProcess(*((AudioUnit *)this + 93), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  float __C = 0.0;
  vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, a5);
  float __C = __C / (float)a5;
  int v19 = (const float **)((char *)this + 584);
  uint64_t v20 = *((unsigned int *)this + 147);
  *(float *)(*((void *)this + 75) + 4 * v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = __C;
  unsigned int v21 = *((_DWORD *)this + 148);
  *((_DWORD *)this + 147) = ((int)v20 + 1) % v21;
  unsigned int v22 = *((_DWORD *)this + 146);
  if (v22 < v21) {
    *(_DWORD *)int v19 = v22 + 1;
  }
  double v23 = SlidingRMSWindow::ComputeRMS(v19);
  *(float *)&double v23 = *(float *)&v23 + 1.0e-20;
  float v24 = log10f(*(float *)&v23) * 10.0;
  float v25 = v24 - v18;
  float v26 = 0.0;
  if (v18 >= -50.0 && v25 >= *((float *)this + 165))
  {
    if (!*((_DWORD *)this + 232)) {
      float v24 = -0.0;
    }
    float v26 = *((float *)this + 163) + v24;
    char v27 = 1;
  }
  else
  {
    char v27 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 1u, 0, 0, v26, 0);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0xDu, v25, 0);
  AudioUnitProcess(*((AudioUnit *)this + 92), a2, &inTimeStamp, a5, a4);
  if (!*((unsigned char *)this + 648)) {
    AudioUnitProcess(*((AudioUnit *)this + 102), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  }
  if (a4->mNumberBuffers)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v31 = BufferList + 16;
    do
    {
      if (*((unsigned char *)this + 648)) {
        bzero(a4->mBuffers[v29].mData, a4->mBuffers[v29].mDataByteSize);
      }
      if ((v27 & 1) != 0 || !*((unsigned char *)this + 648)) {
        vDSP_vadd(*(const float **)(v31 + v29 * 16), 1, (const float *)a4->mBuffers[v29].mData, 1, (float *)a4->mBuffers[v29].mData, 1, v12);
      }
      ++v30;
      ++v29;
    }
    while (v30 < a4->mNumberBuffers);
  }
  outCFNumberRef Value = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 102), 0x3Eu, 0, 0, &outValue);
  int v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v32, 0xFu, outValue, 0);
}

void AUDeesser::Crossover3Way(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, unsigned int a5)
{
  long long v9 = *(_OWORD *)&a3->mRateScalar;
  *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a3->mSampleTime;
  *(_OWORD *)&inTimeStamp.mRateScalar = v9;
  long long v10 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v10;
  float v11 = (AUDeesser *)((char *)this + 832);
  uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  ausdk::AUBufferList::PrepareBuffer(v11, Element + 2, a5);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 896));
  CopyBufferList((unsigned int *)BufferList, a4);
  float __C = 0.0;
  vDSP_Length v14 = a5;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  float __C = __C / (float)a5;
  unsigned int v15 = (const float **)((char *)this + 552);
  uint64_t v16 = *((unsigned int *)this + 139);
  *(float *)(*((void *)this + 71) + 4 * v16) = __C;
  unsigned int v17 = *((_DWORD *)this + 140);
  *((_DWORD *)this + 139) = ((int)v16 + 1) % v17;
  unsigned int v18 = *((_DWORD *)this + 138);
  if (v18 < v17) {
    *(_DWORD *)unsigned int v15 = v18 + 1;
  }
  double v19 = SlidingRMSWindow::ComputeRMS(v15);
  *(float *)&double v19 = *(float *)&v19 + 1.0e-20;
  float v20 = log10f(*(float *)&v19);
  unsigned int v21 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList(v11);
  AudioUnitProcess(*((AudioUnit *)this + 92), a2, &inTimeStamp, a5, a4);
  CopyBufferList(&a4->mNumberBuffers, v21);
  AUDeesser::ApplyAllpassFilter((AudioUnit *)this, a2, &inTimeStamp, a4, v21, 2u, 3, a5);
  CopyBufferList((unsigned int *)BufferList, a4);
  AudioUnitProcess(*((AudioUnit *)this + 93), a2, &inTimeStamp, a5, a4);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)BufferList);
  AudioUnitProcess(*((AudioUnit *)this + 97), a2, &inTimeStamp, a5, a4);
  if (v21->mNumberBuffers)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 16;
    do
    {
      vDSP_vadd(*(const float **)((char *)&a4->mNumberBuffers + v23), 1, *(const float **)((char *)&v21->mNumberBuffers + v23), 1, *(float **)((char *)&v21->mNumberBuffers + v23), 1, a5);
      ++v22;
      v23 += 16;
    }
    while (v22 < v21->mNumberBuffers);
  }
  float v24 = v20 * 10.0;
  AudioUnitProcess(*((AudioUnit *)this + 96), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  float __C = 0.0;
  vDSP_svesq(*(const float **)(BufferList + 16), 1, &__C, a5);
  float __C = __C / (float)a5;
  float v25 = (const float **)((char *)this + 584);
  uint64_t v26 = *((unsigned int *)this + 147);
  *(float *)(*((void *)this + 75) + 4 * v26) = __C;
  unsigned int v27 = *((_DWORD *)this + 148);
  *((_DWORD *)this + 147) = ((int)v26 + 1) % v27;
  unsigned int v28 = *((_DWORD *)this + 146);
  if (v28 < v27) {
    *(_DWORD *)float v25 = v28 + 1;
  }
  double v29 = SlidingRMSWindow::ComputeRMS(v25);
  *(float *)&double v29 = *(float *)&v29 + 1.0e-20;
  float v30 = log10f(*(float *)&v29) * 10.0;
  float v31 = v30 - v24;
  float v32 = 0.0;
  if (v24 >= -50.0 && v31 >= *((float *)this + 165))
  {
    if (!*((_DWORD *)this + 232)) {
      float v30 = -0.0;
    }
    float v32 = *((float *)this + 163) + v30;
    char v33 = 1;
  }
  else
  {
    char v33 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 1u, 0, 0, v32, 0);
  float v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v34, 0xDu, v31, 0);
  if (!*((unsigned char *)this + 648)) {
    AudioUnitProcess(*((AudioUnit *)this + 102), a2, &inTimeStamp, a5, (AudioBufferList *)BufferList);
  }
  if (v21->mNumberBuffers)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v37 = BufferList + 16;
    do
    {
      if (*((unsigned char *)this + 648)) {
        bzero(v21->mBuffers[v35].mData, v21->mBuffers[v35].mDataByteSize);
      }
      if ((v33 & 1) != 0 || !*((unsigned char *)this + 648)) {
        vDSP_vadd(*(const float **)(v37 + v35 * 16), 1, (const float *)v21->mBuffers[v35].mData, 1, (float *)v21->mBuffers[v35].mData, 1, v14);
      }
      ++v36;
      ++v35;
    }
    while (v36 < v21->mNumberBuffers);
  }
  CopyBufferList(&v21->mNumberBuffers, a4);
  outCFNumberRef Value = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 102), 0x3Eu, 0, 0, &outValue);
  float v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0xFu, outValue, 0);
}

unsigned int *AUDeesser::Crossover4Way(AUDeesser *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, unsigned int a5)
{
  long long v9 = *(_OWORD *)&a3->mRateScalar;
  *(_OWORD *)&inTimeStamp.mSampleTime = *(_OWORD *)&a3->mSampleTime;
  *(_OWORD *)&inTimeStamp.mRateScalar = v9;
  long long v10 = *(_OWORD *)&a3->mSMPTETime.mHours;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
  *(_OWORD *)&inTimeStamp.mSMPTETime.mHours = v10;
  float v11 = (AUDeesser *)((char *)this + 832);
  vDSP_Length v12 = (AUDeesser *)((char *)this + 128);
  uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  ausdk::AUBufferList::PrepareBuffer(v11, Element + 2, a5);
  vDSP_Length v14 = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement(v12, 0);
  ausdk::AUBufferList::PrepareBuffer((AUDeesser *)((char *)this + 864), v14 + 2, a5);
  uint64_t BufferList = (unsigned int *)ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 896));
  CopyBufferList(BufferList, a4);
  float __C = 0.0;
  vDSP_Length v15 = a5;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  float v16 = (float)a5;
  float __C = __C / (float)a5;
  unsigned int v17 = (const float **)((char *)this + 552);
  uint64_t v18 = *((unsigned int *)this + 139);
  *(float *)(*((void *)this + 71) + 4 * v18) = __C;
  unsigned int v19 = *((_DWORD *)this + 140);
  *((_DWORD *)this + 139) = ((int)v18 + 1) % v19;
  unsigned int v20 = *((_DWORD *)this + 138);
  if (v20 < v19) {
    *(_DWORD *)unsigned int v17 = v20 + 1;
  }
  double v21 = SlidingRMSWindow::ComputeRMS(v17);
  *(float *)&double v21 = *(float *)&v21 + 1.0e-20;
  float v22 = log10f(*(float *)&v21);
  AudioUnitProcess(*((AudioUnit *)this + 92), a2, &inTimeStamp, a5, a4);
  uint64_t v23 = ausdk::AUBufferList::GetBufferList(v11);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AUDeesser::ApplyAllpassFilter((AudioUnit *)this, a2, &inTimeStamp, (AudioBufferList *)v23, a4, 2u, 3, a5);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AudioUnitProcess(*((AudioUnit *)this + 98), a2, &inTimeStamp, a5, a4);
  float v24 = (_DWORD *)ausdk::AUBufferList::GetBufferList((AUDeesser *)((char *)this + 864));
  float v25 = v24;
  if (*((unsigned char *)this + 648) || *((unsigned char *)this + 649))
  {
    if (*v24)
    {
      unint64_t v26 = 0;
      unsigned int v27 = (void **)(v24 + 4);
      do
      {
        bzero(*v27, *((unsigned int *)v27 - 1));
        ++v26;
        v27 += 2;
      }
      while (v26 < *v25);
    }
  }
  else
  {
    CopyBufferList(&a4->mNumberBuffers, v24);
  }
  float v28 = v22 * 10.0;
  AudioUnitProcess(*((AudioUnit *)this + 99), a2, &inTimeStamp, a5, (AudioBufferList *)v23);
  float __C = 0.0;
  vDSP_svesq(*(const float **)(v23 + 16), 1, &__C, a5);
  float __C = __C / v16;
  double v29 = (const float **)((char *)this + 584);
  uint64_t v30 = *((unsigned int *)this + 147);
  *(float *)(*((void *)this + 75) + 4 * v3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = __C;
  unsigned int v31 = *((_DWORD *)this + 148);
  *((_DWORD *)this + 147) = ((int)v30 + 1) % v31;
  unsigned int v32 = *((_DWORD *)this + 146);
  if (v32 < v31) {
    *(_DWORD *)double v29 = v32 + 1;
  }
  double v33 = SlidingRMSWindow::ComputeRMS(v29);
  *(float *)&double v33 = *(float *)&v33 + 1.0e-20;
  float v34 = log10f(*(float *)&v33) * 10.0;
  float v35 = v34 - v28;
  float v36 = 0.0;
  ioActionFlags = a2;
  if (v28 >= -50.0 && v35 >= *((float *)this + 165))
  {
    if (!*((_DWORD *)this + 232)) {
      float v34 = -0.0;
    }
    float v36 = *((float *)this + 163) + v34;
    BOOL v37 = 1;
  }
  else
  {
    BOOL v37 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 102), 1u, 0, 0, v36, 0);
  float v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v38, 0xDu, v35, 0);
  if (!*((unsigned char *)this + 648)) {
    AudioUnitProcess(*((AudioUnit *)this + 102), a2, &inTimeStamp, a5, (AudioBufferList *)v23);
  }
  outCFNumberRef Value = 0.0;
  AudioUnitGetParameter(*((AudioUnit *)this + 102), 0x3Eu, 0, 0, &outValue);
  float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v39, 0xFu, outValue, 0);
  if (!*((unsigned char *)this + 648)) {
    BOOL v37 = *((unsigned char *)this + 649) == 0;
  }
  unint64_t v40 = *v25;
  if (v40)
  {
    unint64_t v41 = 0;
    uint64_t v42 = 4;
    do
    {
      if (v37)
      {
        vDSP_vadd(*(const float **)(v23 + v42 * 4), 1, *(const float **)&v25[v42], 1, *(float **)&v25[v42], 1, a5);
        unint64_t v40 = *v25;
      }
      ++v41;
      v42 += 4;
    }
    while (v41 < v40);
  }
  CopyBufferList(BufferList, a4);
  AudioUnitProcess(*((AudioUnit *)this + 93), a2, &inTimeStamp, a5, a4);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AUDeesser::ApplyAllpassFilter((AudioUnit *)this, a2, &inTimeStamp, (AudioBufferList *)v23, a4, 4u, 5, a5);
  CopyBufferList(&a4->mNumberBuffers, (_DWORD *)v23);
  AudioUnitProcess(*((AudioUnit *)this + 100), a2, &inTimeStamp, a5, a4);
  float __C = 0.0;
  vDSP_svesq((const float *)a4->mBuffers[0].mData, 1, &__C, a5);
  float __C = __C / v16;
  float v43 = (const float **)((char *)this + 616);
  uint64_t v44 = *((unsigned int *)this + 155);
  *(float *)(*((void *)this + 79) + 4 * v44) = __C;
  unsigned int v45 = *((_DWORD *)this + 156);
  *((_DWORD *)this + 155) = ((int)v44 + 1) % v45;
  unsigned int v46 = *((_DWORD *)this + 154);
  if (v46 < v45) {
    *(_DWORD *)float v43 = v46 + 1;
  }
  double v47 = SlidingRMSWindow::ComputeRMS(v43);
  *(float *)&double v47 = *(float *)&v47 + 1.0e-20;
  float v48 = log10f(*(float *)&v47) * 10.0;
  float v49 = v48 - v28;
  float v50 = 0.0;
  if (v28 >= -50.0 && v49 >= *((float *)this + 166))
  {
    if (!*((_DWORD *)this + 232)) {
      float v48 = -0.0;
    }
    float v50 = *((float *)this + 164) + v48;
    BOOL v51 = 1;
  }
  else
  {
    BOOL v51 = 0;
  }
  AudioUnitSetParameter(*((AudioUnit *)this + 103), 1u, 0, 0, v50, 0);
  int v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v52, 0xEu, v49, 0);
  if (!*((unsigned char *)this + 649)) {
    AudioUnitProcess(*((AudioUnit *)this + 103), a2, &inTimeStamp, a5, a4);
  }
  AudioUnitGetParameter(*((AudioUnit *)this + 103), 0x3Eu, 0, 0, &outValue);
  int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDeesser *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v53, 0x10u, outValue, 0);
  if (!*((unsigned char *)this + 649)) {
    BOOL v51 = *((unsigned char *)this + 648) == 0;
  }
  unint64_t v54 = *v25;
  if (v54)
  {
    unint64_t v55 = 0;
    uint64_t v56 = 4;
    do
    {
      if (v51)
      {
        vDSP_vadd(*(const float **)((char *)&a4->mNumberBuffers + v56 * 4), 1, *(const float **)&v25[v56], 1, *(float **)&v25[v56], 1, a5);
        unint64_t v54 = *v25;
      }
      ++v55;
      v56 += 4;
    }
    while (v55 < v54);
  }
  AudioUnitProcess(*((AudioUnit *)this + 101), ioActionFlags, &inTimeStamp, a5, (AudioBufferList *)v23);
  unint64_t v57 = *v25;
  if (v57)
  {
    unint64_t v58 = 0;
    uint64_t v59 = 4;
    do
    {
      if (!*((unsigned char *)this + 649) && !*((unsigned char *)this + 648))
      {
        vDSP_vadd(*(const float **)(v23 + v59 * 4), 1, *(const float **)&v25[v59], 1, *(float **)&v25[v59], 1, v15);
        unint64_t v57 = *v25;
      }
      ++v58;
      v59 += 4;
    }
    while (v58 < v57);
  }
  return CopyBufferList(v25, a4);
}

void AUDeesser::ApplyAllpassFilter(AudioUnit *this, unsigned int *a2, const AudioTimeStamp *a3, AudioBufferList *a4, AudioBufferList *a5, unsigned int a6, int a7, UInt32 inNumberFrames)
{
  vDSP_Length v14 = (char *)(this + 92);
  AudioUnitProcess(this[a6 + 92], a2, a3, inNumberFrames, a5);
  AudioUnitProcess(*(AudioUnit *)&v14[8 * a7], a2, a3, inNumberFrames, a4);
  if (a5->mNumberBuffers)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 16;
    do
    {
      vDSP_vadd(*(const float **)((char *)&a5->mNumberBuffers + v16), 1, *(const float **)((char *)&a4->mNumberBuffers + v16), 1, *(float **)((char *)&a5->mNumberBuffers + v16), 1, inNumberFrames);
      ++v15;
      v16 += 16;
    }
    while (v15 < a5->mNumberBuffers);
  }
}

uint64_t AUDeesser::CanScheduleParameters(AUDeesser *this)
{
  return 0;
}

uint64_t AUDeesser::SetParameter(AUDeesser *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 135);
  return 0;
}

uint64_t AUDeesser::SetProperty(AUDeesser *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64001)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 232) = *a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 == 3700)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 376) = *(unsigned char *)a5;
      return result;
    }
    return 4294956445;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *((_DWORD *)this + 134) = *a5;
  return result;
}

uint64_t AUDeesser::GetProperty(AUDeesser *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 64001:
      int v6 = *((_DWORD *)this + 232);
      break;
    case 3700:
      int v6 = *((unsigned __int8 *)this + 376);
      break;
    case 21:
      int v6 = *((_DWORD *)this + 134);
      break;
    default:
      return 4294956417;
  }
  uint64_t result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUDeesser::GetPropertyInfo(AUDeesser *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 21 && a2 != 64001 && a2 != 3700) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDeesser::Reset(AUDeesser *this)
{
  *((void *)this + 69) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 77) = 0;
  uint64_t result = AudioUnitReset(*((AudioUnit *)this + 102), 0, 0);
  if (!result)
  {
    uint64_t result = AudioUnitReset(*((AudioUnit *)this + 103), 0, 0);
    if (!result)
    {
      uint64_t v3 = 0;
      long long v4 = (char *)this + 736;
      while (1)
      {
        uint64_t result = AudioUnitReset(*(AudioUnit *)&v4[v3], 0, 0);
        if (result) {
          break;
        }
        v3 += 8;
        if (v3 == 80) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t AUDeesser::Cleanup(AUDeesser *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 736;
  while (1)
  {
    long long v4 = *(OpaqueAudioComponentInstance **)&v3[v2];
    if (v4)
    {
      uint64_t result = AudioUnitUninitialize(v4);
      if (result) {
        break;
      }
    }
    v2 += 8;
    if (v2 == 80)
    {
      int v6 = (OpaqueAudioComponentInstance *)*((void *)this + 102);
      if (!v6 || (uint64_t result = AudioUnitUninitialize(v6), !result))
      {
        uint64_t result = *((void *)this + 103);
        if (result) {
          uint64_t result = AudioUnitUninitialize((AudioUnit)result);
        }
      }
      break;
    }
  }
  uint64_t v7 = *((void *)this + 66);
  if (v7)
  {
    BlockBuffer::~BlockBuffer((BlockBuffer *)(v7 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)v7);
    uint64_t result = MEMORY[0x1C185D370]();
    *((void *)this + 66) = 0;
  }
  return result;
}

double AUDeesser::Initialize(AUDeesser *this)
{
  uint64_t v2 = (AUDeesser *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 80), 0);
  long long v4 = *(_OWORD *)(Element + 96);
  long long v15 = *(_OWORD *)(Element + 80);
  *(_OWORD *)uint64_t v16 = v4;
  *(void *)&v16[16] = *(void *)(Element + 112);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  long long v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v14.double mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v14.mBytesPerPacket = v6;
  *(void *)&v14.UInt32 mBitsPerChannel = *(void *)(v5 + 112);
  double result = *(double *)&v15;
  if (*(double *)&v15 == v14.mSampleRate
    && DWORD2(v15) == v14.mFormatID
    && *(void *)v16 == *(void *)&v14.mBytesPerPacket
    && *(void *)&v16[12] == *(void *)&v14.mChannelsPerFrame
    && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v15, &v14, 0, 0))
  {
    unsigned int v8 = *((_DWORD *)this + 84);
    unsigned int inData = v8;
    if (!*((unsigned char *)this + 376) || (float v9 = (float)v8 / v14.mSampleRate, v9 > 0.02))
    {
      unsigned int inData = (v14.mSampleRate * dbl_1BB87B850[*((_DWORD *)this + 232) == 0]) & 0xFFFFFFFC;
      ausdk::AUScope::SafeGetElement(v2, 0);
      ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
      operator new();
    }
    std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100]((uint64_t)this + 832);
    *((void *)this + 106) = 0;
    *((_OWORD *)this + 52) = 0u;
    *((unsigned char *)this + 856) = 1;
    ausdk::AUBufferList::Allocate((AUDeesser *)((char *)this + 832), &v14, v8);
    std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100]((uint64_t)this + 864);
    *((void *)this + 11std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    *((_OWORD *)this + 54) = 0u;
    *((unsigned char *)this + 888) = 1;
    ausdk::AUBufferList::Allocate((AUDeesser *)((char *)this + 864), &v14, v8);
    std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100]((uint64_t)this + 896);
    *((void *)this + 114) = 0;
    *((_OWORD *)this + 56) = 0u;
    *((unsigned char *)this + 92std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
    ausdk::AUBufferList::Allocate((AUDeesser *)((char *)this + 896), &v14, v8);
    if (!(*(unsigned int (**)(AUDeesser *, void, void))(*(void *)this + 72))(this, 0, 0))
    {
      uint64_t v10 = 736;
      while (!AudioUnitSetProperty(*(AudioUnit *)((char *)this + v10), 0xEu, 0, 0, &inData, 4u))
      {
        v10 += 8;
        if (v10 == 816)
        {
          if (!AudioUnitSetProperty(*((AudioUnit *)this + 102), 0xEu, 0, 0, &inData, 4u)
            && !AudioUnitSetProperty(*((AudioUnit *)this + 103), 0xEu, 0, 0, &inData, 4u))
          {
            AUDeesser::UpdateParameters(this);
            *((_DWORD *)this + 136) = *((_DWORD *)this + 135);
            double result = AUDeesser::InitializeUnderlyingAUs(this);
            if (!v11)
            {
              if (((float)(flt_1BB8793A0[*((_DWORD *)this + 232) == 0] / (float)inData) / *(double *)&v15) <= 1) {
                unsigned int v12 = 1;
              }
              else {
                unsigned int v12 = ((float)(flt_1BB8793A0[*((_DWORD *)this + 232) == 0] / (float)inData)
              }
                                   / *(double *)&v15);
              std::valarray<float>::resize((uint64_t)this + 568, *(double *)&v15, 0.0);
              *((_DWORD *)this + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v12;
              *((void *)this + 69) = 0;
              std::valarray<float>::resize((uint64_t)this + 600, *(double *)&v15, 0.0);
              *((_DWORD *)this + 148) = v12;
              *((void *)this + 73) = 0;
              std::valarray<float>::resize((uint64_t)this + 632, *(double *)&v15, 0.0);
              *((_DWORD *)this + 156) = v12;
              double result = 0.0;
              *((void *)this + 77) = 0;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

void sub_1BB5E1AB0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40622722D2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<ausdk::AUBufferList,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = result;
    if (*(void *)(result + 8))
    {
      double result = (*((uint64_t (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
      *(void *)(v1 + 8) = 0;
    }
    *(void *)(v1 + 16) = 0;
    *(_DWORD *)uint64_t v1 = 0;
    *(unsigned char *)(v1 + 24) = 0;
  }
  return result;
}

double AUDeesser::InitializeUnderlyingAUs(AUDeesser *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  uint64_t v3 = 0;
  long long v4 = *(_OWORD *)(Element + 96);
  long long v12 = *(_OWORD *)(Element + 80);
  long long v13 = v4;
  uint64_t v14 = *(void *)(Element + 112);
  while (1)
  {
    uint64_t v5 = *(OpaqueAudioComponentInstance **)((char *)this + v3 + 736);
    if (v5)
    {
      long long v9 = v12;
      long long v10 = v13;
      uint64_t v11 = v14;
      if (SetUpAudioUnit(v5, &v9, 0)) {
        break;
      }
    }
    v3 += 8;
    if (v3 == 80)
    {
      uint64_t v7 = (OpaqueAudioComponentInstance *)*((void *)this + 102);
      long long v9 = v12;
      long long v10 = v13;
      uint64_t v11 = v14;
      if (!SetUpAudioUnit(v7, &v9, 1))
      {
        unsigned int v8 = (OpaqueAudioComponentInstance *)*((void *)this + 103);
        long long v9 = v12;
        long long v10 = v13;
        uint64_t v11 = v14;
        SetUpAudioUnit(v8, &v9, 1);
        double result = 0.0;
        *((_OWORD *)this + 44) = 0u;
        *((_OWORD *)this + 45) = 0u;
        *((_OWORD *)this + 42) = 0u;
        *((_OWORD *)this + 43) = 0u;
        *((_DWORD *)this + 182) = 1;
      }
      return result;
    }
  }
  return result;
}

uint64_t SetUpAudioUnit(OpaqueAudioComponentInstance *a1, const void *a2, int a3)
{
  int inData = a3;
  uint64_t result = AudioUnitUninitialize(a1);
  if (!result)
  {
    uint64_t result = AudioUnitSetProperty(a1, 8u, 1u, 0, a2, 0x28u);
    if (!result)
    {
      uint64_t result = AudioUnitSetProperty(a1, 8u, 2u, 0, a2, 0x28u);
      if (!result)
      {
        if (!a3 || (uint64_t result = AudioUnitSetProperty(a1, 0xE74u, 0, 0, &inData, 4u), !result))
        {
          UInt32 ioDataSize = 4;
          unsigned int outData = 0;
          uint64_t result = AudioUnitGetProperty(a1, 0xBu, 1u, 0, &outData, &ioDataSize);
          if (!result)
          {
            if (outData)
            {
              for (unsigned int i = 0; i < outData; ++i)
              {
                int v9 = 0;
                AudioUnitSetProperty(a1, 0x33u, 1u, 0, &v9, 4u);
              }
            }
            UInt32 ioDataSize = 4;
            unsigned int outData = 0;
            uint64_t result = AudioUnitGetProperty(a1, 0xBu, 2u, 0, &outData, &ioDataSize);
            if (!result)
            {
              if (outData)
              {
                for (unsigned int j = 0; j < outData; ++j)
                {
                  int v9 = 0;
                  AudioUnitSetProperty(a1, 0x33u, 2u, 0, &v9, 4u);
                }
              }
              return AudioUnitInitialize(a1);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AUDeesser::BlockProcessClassFunc(AUDeesser *this, void *a2, unsigned int **a3, AudioBufferList **a4, AudioBufferList **a5)
{
  unsigned int v7 = a2;
  int v9 = (AUDeesser *)((char *)this + 896);
  uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement((AUDeesser *)((char *)this + 128), 0);
  uint64_t v11 = (_DWORD *)ausdk::AUBufferList::PrepareBuffer(v9, Element + 2, v7);
  CopyBufferList(*a3, v11);
  unsigned int v14 = 512;
  int v12 = *((_DWORD *)this + 137);
  switch(v12)
  {
    case 4:
      AUDeesser::Crossover4Way(this, &v14, (const AudioTimeStamp *)((char *)this + 672), *a4, v7);
      break;
    case 3:
      AUDeesser::Crossover3Way(this, &v14, (const AudioTimeStamp *)((char *)this + 672), *a4, v7);
      break;
    case 2:
      AUDeesser::Crossover2Way(this, &v14, (const AudioTimeStamp *)((char *)this + 672), *a4, v7);
      break;
    default:
      CopyBufferList(*a3, *a4);
      break;
  }
  *((double *)this + 84) = *((double *)this + 84) + (double)v7;
  return 0;
}

void AUDeesser::~AUDeesser(OpaqueAudioComponentInstance **this)
{
  AUDeesser::~AUDeesser(this);

  JUMPOUT(0x1C185D370);
}

{
  OSStatus v2;
  uint64_t i;
  OpaqueAudioComponentInstance *v4;
  OSStatus v5;
  OpaqueAudioComponentInstance *v6;
  uint64_t vars8;

  *this = (OpaqueAudioComponentInstance *)&unk_1F14B9340;
  AUDeesser::Cleanup((AUDeesser *)this);
  uint64_t v2 = 0;
  for (unsigned int i = 92; i != 102; ++i)
  {
    if (this[i])
    {
      uint64_t v2 = AudioComponentInstanceDispose(this[i]);
      this[i] = 0;
    }
  }
  if (!v2)
  {
    long long v4 = this[102];
    if (!v4 || (uint64_t v5 = AudioComponentInstanceDispose(v4), this[102] = 0, !v5))
    {
      long long v6 = this[103];
      if (v6)
      {
        AudioComponentInstanceDispose(v6);
        this[103] = 0;
      }
    }
  }
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 112));
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 108));
  std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 104));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(this + 77));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(this + 73));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(this + 69));

  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t std::__optional_destruct_base<ausdk::AUBufferList,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(void *)(a1 + 8))
    {
      (*((void (**)(void))ausdk::BufferAllocator::instance(void)::global + 3))();
      *(void *)(a1 + 8) = 0;
    }
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)a1 = 0;
  }
  return a1;
}

float learnrate_v4::getAdaptationRate4_v6(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  float __B = 0.0;
  MEMORY[0x1F4188790](a1);
  uint64_t v3 = (float *)&v27[-((v2 + 15) & 0x7FFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  int v9 = (float *)&v27[-v8];
  if (*(_DWORD *)(v10 + 148) == 1)
  {
    float __B = *(float *)(a1 + 140) + *(float *)(a1 + 140);
    vDSP_Length v11 = v5;
    vDSP_vsmul(*(const float **)(a1 + 64), 1, &__B, v3, 1, v5);
    float __B = 9.0e-10;
    vDSP_vsadd(*(const float **)(a1 + 48), 1, &__B, v9, 1, v11);
    vDSP_vmin(v3, 1, v9, 1, v3, 1, v11);
    float __B = 0.35;
    vDSP_vsmul(v3, 1, &__B, v3, 1, v11);
    float __B = *(float *)(a1 + 144) * 0.3;
    vDSP_vsmul(v9, 1, &__B, *(float **)(a1 + 112), 1, v11);
    vDSP_vadd(v3, 1, *(const float **)(a1 + 112), 1, v3, 1, v11);
    vDSP_vdiv(v9, 1, v3, 1, *(float **)(a1 + 112), 1, v11);
  }
  else
  {
    float v13 = (float)(v5 - 1);
    if (v7)
    {
      float v14 = *(float *)(a1 + 4);
      float v15 = (float)(v13 * 2000.0) * 9.3132e-10;
      float result = 0.0;
      if (v14 > v15)
      {
        float v16 = v14 * 0.25;
        float __B = v16;
        float v17 = *(float *)(a1 + 32);
        if (v16 > (float)(v17 * 0.25))
        {
          float __B = v17 * 0.25;
          float v16 = v17 * 0.25;
        }
        float result = v16 / v17;
      }
    }
    else
    {
      float v18 = (float)(v13 * 1000.0) * 9.3132e-10;
      float result = 0.0;
      if (*(float *)(a1 + 376) > v18)
      {
        if (!v6) {
          ++*(_DWORD *)(a1 + 380);
        }
        float v19 = *(float *)(a1 + 336);
        float v20 = *(float *)(a1 + 340);
        float result = 0.25;
        if (v19 > v20)
        {
          float v21 = *(float *)(a1 + 320);
          if (v21 > v19 || v21 < v20)
          {
            if (v21 <= v19) {
              float result = *(float *)(a1 + 348);
            }
            else {
              float result = *(float *)(a1 + 344);
            }
          }
          else
          {
            float result = *(float *)(a1 + 348)
                   + (float)((float)((float)(v21 - v20) / (float)(v19 - v20))
                           * (float)(*(float *)(a1 + 344) - *(float *)(a1 + 348)));
          }
          float v23 = 0.25;
          if (result >= 0.25) {
            float v23 = result;
          }
          if (*(_DWORD *)(a1 + 380) <= *(_DWORD *)(a1 + 384)) {
            float result = v23;
          }
        }
      }
    }
    float v24 = fminf(result * 2.5, 1.0);
    if (v6 == 2) {
      float result = v24;
    }
    if (v5 >= 1)
    {
      uint64_t v25 = v5;
      unint64_t v26 = *(float **)(a1 + 112);
      do
      {
        *v26++ = result;
        --v25;
      }
      while (v25);
    }
    if (!v6)
    {
      float result = result + *(float *)(a1 + 152);
      *(float *)(a1 + 152) = result;
    }
  }
  return result;
}

void learnrate_v4::updateStatistics_echo(int a1, const float *a2, const float *__A, float *a4)
{
  vDSP_Length v8 = a1;
  vDSP_svesq(__A, 1, a4 + 6, a1);
  vDSP_svesq(a2, 1, a4 + 8, v8);
  float v9 = a4[8];
  a4[9] = v9;
  a4[10] = v9;
  float v10 = (float)((float)(2 * a1) * 100.0) * 9.3132e-10;
  if (v9 < v10) {
    a4[8] = v10;
  }

  vDSP_dotpr(a2, 1, __A, 1, a4 + 5, v8);
}

void learnrate_v4::adaptLmsFilter_v4(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  int v6 = v5;
  uint64_t v8 = v7;
  float v10 = v9;
  int v12 = v11;
  float v14 = v13;
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  vDSP_Length v15 = v5[4];
  vDSP_Length v16 = v5[10];
  uint64_t v105 = v5[11];
  uint64_t v17 = v9[23];
  vDSP_Length v99 = (int)v9[9];
  uint64_t v103 = v5[15];
  int v18 = v9[19];
  uint64_t v19 = (int)v9[18];
  *(_DWORD *)(v7 + 72) = v19;
  *(_DWORD *)(v7 + 76) = v18;
  int v109 = v18;
  float __A = 0.0;
  vDSP_vmul(*(const float **)(v2 + 96), 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 112), 1, v16);
  uint64_t v90 = (float *)v14;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v14, 1, v149, 1, v15);
  float v91 = (float *)v12;
  vDSP_vmul(*(const float **)(v2 + 112), 1, v12, 1, v148, 1, v15);
  float v20 = *(float **)v8;
  uint64_t v104 = v17;
  unsigned int v127 = v6;
  if ((int)v17 >= 1)
  {
    int v21 = v105;
    uint64_t v92 = v8;
    uint64_t v93 = (v109 + 1) * (int)v15;
    uint64_t v102 = 4 * v99;
    uint64_t v22 = 4 * v15;
    vDSP_Length __N = (v19 * v15);
    uint64_t v23 = (int)__N;
    uint64_t v24 = *(void *)(v2 + 104);
    uint64_t v26 = v4[2];
    uint64_t v25 = (float *)v4[3];
    unsigned int v27 = *(float **)(v8 + 8);
    uint64_t v121 = *(float **)(v8 + 16);
    float v123 = *(float **)(v8 + 24);
    vDSP_Length v28 = *(void *)v10;
    uint64_t v29 = *((void *)v10 + 1);
    int v100 = v109 + 1 - v19;
    uint64_t v101 = 4 * v105;
    uint64_t v95 = &v145[v19];
    uint64_t v96 = 4 * v19;
    uint64_t v30 = v24 + 4 * v19;
    uint64_t v94 = &v146[v19];
    vDSP_Length v31 = v99;
    int v107 = v19;
    uint64_t v32 = 0;
    uint64_t v134 = 4 * v15;
    float v125 = v4;
    uint64_t v97 = v10;
    uint64_t v98 = v2;
    do
    {
      vDSP_Length v117 = v28;
      uint64_t v119 = v29;
      uint64_t v115 = v30;
      if (*(unsigned char *)(v4[16] + v32))
      {
        float __C = v27;
        if (v21 >= 1)
        {
          uint64_t v33 = 0;
          float v34 = v145;
          float v35 = v146;
          uint64_t v36 = v105;
          do
          {
            *v35++ = *(_DWORD *)(v28 + v33);
            *v34++ = *(_DWORD *)(v29 + v33);
            v33 += v22;
            --v36;
          }
          while (v36);
        }
        uint64_t v106 = v32;
        if (v10[17] == 1)
        {
          float __A = 0.0;
          if ((int)__N >= 1)
          {
            uint64_t v37 = v24;
            float v38 = v25;
            uint64_t v39 = v26;
            vDSP_vfill(&__A, v20, 1, __N);
            vDSP_vfill(&__A, __C, 1, __N);
            vDSP_vfill(&__A, v121, 1, __N);
            vDSP_vfill(&__A, v123, 1, __N);
            uint64_t v26 = v39;
            uint64_t v25 = v38;
            uint64_t v24 = v37;
            uint64_t v23 = (int)__N;
            uint64_t v22 = 4 * v15;
          }
          int v40 = *(_DWORD *)(v92 + 36);
          vDSP_Length v41 = (v40 - v93);
          if ((int)v41 >= 1)
          {
            uint64_t v131 = v24;
            uint64_t v42 = v25;
            uint64_t v43 = v26;
            vDSP_vfill(&__A, &v20[v93], 1, (v40 - v93));
            vDSP_vfill(&__A, &__C[v93], 1, v41);
            vDSP_vfill(&__A, &v121[v93], 1, v41);
            vDSP_vfill(&__A, &v123[v93], 1, v41);
            uint64_t v26 = v43;
            uint64_t v25 = v42;
            uint64_t v24 = v131;
            uint64_t v23 = (int)__N;
            uint64_t v22 = 4 * v15;
          }
        }
        long long v111 = v20;
        if (v107 <= v109)
        {
          uint64_t v44 = v96;
          int v45 = v100;
          vDSP_Length v47 = v117;
          uint64_t v46 = v119;
          float v48 = v20;
          float v49 = __C;
          long long v129 = v25;
          uint64_t v132 = v24;
          uint64_t v128 = v26;
          do
          {
            float __A = *(float *)(v24 + v44);
            int v50 = *(_DWORD *)(v4[11] + v44) * v15;
            BOOL v51 = (const float *)(v47 + v23 * 4);
            BOOL v140 = (float *)(v46 + v23 * 4);
            __Da = &v48[v23];
            float v138 = &v49[v23];
            int v52 = (const float *)(v26 + 4 * v50);
            int v53 = &v25[v50];
            vDSP_vmma(v149, 1, v52, 1, v148, 1, v53, 1, __E, 1, v15);
            vDSP_vsma(__E, 1, &__A, v51, 1, __Da, 1, v15);
            unint64_t v54 = v52;
            uint64_t v4 = v125;
            vDSP_vmmsb(v148, 1, v54, 1, v149, 1, v53, 1, __E, 1, v15);
            vDSP_vsma(__E, 1, &__A, v140, 1, v138, 1, v15);
            uint64_t v26 = v128;
            uint64_t v25 = v129;
            uint64_t v24 = v132;
            uint64_t v23 = (int)__N;
            uint64_t v22 = 4 * v15;
            float v49 = (float *)((char *)v49 + v134);
            float v48 = (float *)((char *)v48 + v134);
            v46 += v134;
            v47 += v134;
            v44 += 4;
            --v45;
          }
          while (v45);
        }
        uint64_t v32 = v106;
        float v20 = v111;
        unsigned int v27 = __C;
        float v10 = v97;
        int v21 = v105;
        vDSP_Length v31 = v99;
        uint64_t v55 = v115;
        if (v107 <= v109)
        {
          uint64_t v56 = 0;
          unint64_t v57 = *(float **)(v98 + 112);
          float v58 = *v90 * *v57;
          float v59 = *v91 * v57[v15];
          uint64_t v60 = v4[11] + v96;
          uint64_t v61 = v23 * 4;
          do
          {
            int v62 = *(_DWORD *)(v60 + 4 * v56) * v15;
            *(float *)((char *)v111 + v6freeMatrix(*((_DWORD *)this + 17), this + 1) = *(float *)&v94[v56]
                                           + (float)((float)(v58 * *(float *)(v115 + 4 * v56))
                                                   * *(float *)(v26 + 4 * v62));
            *(float *)((char *)__C + v6freeMatrix(*((_DWORD *)this + 17), this + 1) = *(float *)&v95[v56]
                                          + (float)((float)(v59 * *(float *)(v115 + 4 * v56)) * v25[v62]);
            v61 += v22;
            ++v56;
          }
          while (v100 != v56);
        }
      }
      else
      {
        uint64_t v63 = v24;
        uint64_t v64 = v25;
        char v65 = v10;
        uint64_t v66 = v26;
        vDSP_vclr(v20, 1, v31);
        vDSP_vclr(v27, 1, v31);
        uint64_t v55 = v115;
        uint64_t v26 = v66;
        float v10 = v65;
        int v21 = v105;
        uint64_t v25 = v64;
        uint64_t v24 = v63;
        uint64_t v23 = (int)__N;
        uint64_t v22 = 4 * v15;
      }
      v121 += v31;
      v123 += v31;
      float v20 = (float *)((char *)v20 + v102);
      unsigned int v27 = (float *)((char *)v27 + v102);
      ++v32;
      uint64_t v29 = v119 + v102;
      vDSP_Length v28 = v117 + v102;
      v24 += v101;
      uint64_t v30 = v55 + v101;
      v26 += 4 * v103;
      v25 += v103;
    }
    while (v32 != v104);
    uint64_t v8 = v92;
    float v20 = *(float **)v92;
    int v6 = v127;
  }
  int v135 = *v6;
  uint64_t v116 = v4[16];
  vDSP_Length v118 = *(int *)(v8 + 36);
  uint64_t v110 = *(int *)(v8 + 72);
  int v108 = *(_DWORD *)(v8 + 76);
  unint64_t v141 = *(float **)(v8 + 16);
  DSPSplitComplex __D = *(float **)(v8 + 8);
  unint64_t v139 = *(float **)(v8 + 24);
  float v67 = (float *)*(unsigned int *)(v8 + 92);
  vDSP_vclr(*(float **)(v8 + 48), 1, *(int *)(v8 + 88));
  __Ca = v67;
  if ((int)v67 >= 1)
  {
    uint64_t v68 = 0;
    float v130 = *(float **)(v8 + 48);
    uint64_t v133 = v135 >> 1;
    size_t v69 = 4 * v133;
    vDSP_Length v70 = (uint64_t)v135 >> 2;
    if (v135 >> 1 <= 2) {
      int v71 = 2;
    }
    else {
      int v71 = v135 >> 1;
    }
    uint64_t v126 = ((v71 - 1) >> 1) + 1;
    uint64_t v72 = (int)v110 * (uint64_t)(v135 >> 1);
    float v124 = &v141[v72];
    uint64_t v112 = 4 * v118;
    float v122 = &v139[v72];
    do
    {
      uint64_t v120 = v68;
      if (*(unsigned char *)(v116 + v68))
      {
        if ((int)v110 <= v108)
        {
          float v74 = v122;
          uint64_t v73 = v124;
          int v75 = ~v110;
          uint64_t v76 = v110;
          do
          {
            int v77 = &v141[v76 * v133];
            int v78 = &v139[v76 * v133];
            v144.realp = v77;
            v144.imagp = v78;
            memcpy(v77, &v20[v76 * v133], v69);
            memcpy(v78, &__D[v76 * v133], v69);
            float v80 = (MultiRadixRealFFT *)*((void *)v127 + 1);
            if (v80) {
              MultiRadixRealFFT::RealInPlaceTransform(v80, &v144, -1, v79);
            }
            float __B = *((float *)v127 + 22) * *((float *)v127 + 21);
            vDSP_vsmul(v77, 1, &__B, v77, 1, v70);
            vDSP_vsmul(v78, 1, &__B, v78, 1, v70);
            vDSP_vclr(&v77[v70], 1, v70);
            vDSP_vclr(&v78[v70], 1, v70);
            if (v135 >= 2)
            {
              float v82 = &v130[(v135 >> 1) * (v127[11] + v75)];
              uint64_t v83 = v74;
              uint64_t v84 = v126;
              uint64_t v85 = v73;
              do
              {
                int v86 = *(_DWORD *)v85++;
                *(_DWORD *)float v82 = v86;
                float v87 = *v83++;
                float v81 = v87;
                v82[1] = v87;
                v82 += 2;
                --v84;
              }
              while (v84);
            }
            uint64_t v88 = (MultiRadixRealFFT *)*((void *)v127 + 1);
            if (v88) {
              MultiRadixRealFFT::RealInPlaceTransform(v88, &v144, 1, v81);
            }
            ++v76;
            uint64_t v73 = (float *)((char *)v73 + v69);
            --v75;
            float v74 = (float *)((char *)v74 + v69);
          }
          while (v108 + 1 != v76);
        }
      }
      else
      {
        vDSP_vclr(v141, 1, v118);
        vDSP_vclr(v139, 1, v118);
        vDSP_vclr(v130, 1, v118);
      }
      v20 += v118;
      __D += v118;
      float v130 = (float *)((char *)v130 + v112);
      uint64_t v68 = v120 + 1;
      v141 += v118;
      float v124 = (float *)((char *)v124 + v112);
      float v122 = (float *)((char *)v122 + v112);
      v139 += v118;
    }
    while ((float *)(v120 + 1) != __Ca);
  }
}

uint64_t AULowFlow::newDspLibAlgorithm(AULowFlow *this, int a2)
{
  if (a2 == 4 || a2 == 2) {
    operator new();
  }
  return 0;
}

void sub_1BB5E2D70(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C40037DD517);
  _Unwind_Resume(a1);
}

uint64_t AULowFlow::Version(AULowFlow *this)
{
  return 197888;
}

uint64_t AULowFlow::SupportedNumChannels(AULowFlow *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AULowFlow::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 2;
}

uint64_t AULowFlow::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  unsigned int v3 = AUDspLib::RestoreState(this, a2);
  LODWORD(result) = (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, void, void, void, float))*this
                     + 19))(this, 4, 0, 0, 0, *((float *)this + 542));
  if (result) {
    return result;
  }
  else {
    return v3;
  }
}

uint64_t AULowFlow::SetParameter(AULowFlow *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t result = AUDspLib::SetParameter(this, a2, a3, a4, a5);
  unsigned int v9 = *((_DWORD *)this + 439) - 1;
  if (v9 >= a2) {
    unsigned int v9 = a2;
  }
  if (*(_DWORD *)(*((void *)this + 211) + 4 * v9) == 4) {
    *((float *)this + 542) = a5;
  }
  return result;
}

uint64_t AULowFlow::SetProperty(id *this, int a2, int a3, unsigned int a4, id *a5, void *a6, int *a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a2 == 6620)
  {
    if (a3) {
      return 4294956430;
    }
    if (a6 != 8) {
      return 4294956445;
    }
    uint64_t v32 = applesauce::dispatch::v1::queue::get(*a5);
    obunsigned int j = (id)[v32 mutableCopy];
    uint64_t v33 = (NSMutableDictionary *)obj;
    vDSP_Length v31 = [(NSMutableDictionary *)v33 objectForKeyedSubscript:@"Name"];
    if (v31
      || ([(NSMutableDictionary *)v33 objectForKeyedSubscript:@"AcousticID"],
          float v10 = objc_claimAutoreleasedReturnValue(),
          v10,
          v10))
    {
      float v34 = [(NSMutableDictionary *)v33 objectForKeyedSubscript:@"ChannelData"];
      if (v34 && [v34 count] == 2)
      {
        char v11 = 0;
        uint64_t v12 = 0;
        while (1)
        {
          float v13 = [v34 objectAtIndexedSubscript:v12];
          float v14 = v13;
          if (!v13) {
            break;
          }
          vDSP_Length v15 = [v13 objectForKeyedSubscript:@"AnalogGain"];
          if (!v15)
          {

            break;
          }
          vDSP_Length v16 = [v14 objectForKeyedSubscript:@"PressureResponse"];
          if (v16)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v17 = v16;
              BOOL v18 = [v17 length] == 4096;

              if (v18) {
                goto LABEL_18;
              }
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                id v19 = v16;
                if ([v19 count] != 1024) {
                  goto LABEL_35;
                }
                long long v37 = 0u;
                long long v38 = 0u;
                long long v35 = 0u;
                long long v36 = 0u;
                id v20 = v19;
                uint64_t v25 = [v20 countByEnumeratingWithState:&v35 objects:v40 count:16];
                if (v25)
                {
                  uint64_t v26 = *(void *)v36;
                  while (2)
                  {
                    for (uint64_t i = 0; i != v25; ++i)
                    {
                      if (*(void *)v36 != v26) {
                        objc_enumerationMutation(v20);
                      }
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                      {
                        int v24 = 1;
                        id v19 = v20;
                        goto LABEL_38;
                      }
                    }
                    uint64_t v25 = [v20 countByEnumeratingWithState:&v35 objects:v40 count:16];
                    if (v25) {
                      continue;
                    }
                    break;
                  }
                }

LABEL_18:
                id v19 = [v14 objectForKeyedSubscript:@"ThieleSmall"];
                if (v19)
                {
                  v39[0] = @"Bl";
                  v39[1] = @"Reb";
                  v39[2] = @"Mms";
                  v39[3] = @"MmsFrontPort";
                  v39[4] = @"Rms";
                  v39[5] = @"RmsFrontPort";
                  v39[6] = @"Kms";
                  v39[7] = @"KmsFrontPort";
                  id v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v39 count:8];
                  unint64_t v21 = 0;
                  while ([v20 count] > v21)
                  {
                    uint64_t v22 = [v20 objectAtIndexedSubscript:v21];
                    uint64_t v23 = [v19 objectForKeyedSubscript:v22];

                    ++v21;
                    if (!v23)
                    {
                      int v24 = 1;
                      goto LABEL_38;
                    }
                  }
                  int v24 = 0;
LABEL_38:
                }
                else
                {
LABEL_35:
                  int v24 = 1;
                }

                goto LABEL_40;
              }
            }
          }
          int v24 = 1;
LABEL_40:

          char v28 = (v24 != 0) | v11;
          char v11 = 1;
          uint64_t v12 = 1;
          if (v28)
          {
            BOOL v29 = v24 == 0;
            if (v29) {
              uint64_t v8 = 0;
            }
            else {
              uint64_t v8 = 4294956445;
            }

            if (v29)
            {
              updateModelParametersDictionary(v33);
              objc_storeStrong(this + 272, obj);
              if (*((unsigned char *)this + 17)) {
                AULowFlow::setModelParameters((AULowFlow *)this);
              }
              uint64_t v8 = 0;
            }
            goto LABEL_53;
          }
        }
      }
    }
    else
    {
    }
    uint64_t v8 = 4294956445;
LABEL_53:

    return v8;
  }

  return AUDspLib::SetProperty((AUDspLib *)this, a2, a3, a4, (int *)a5, a6, a7);
}

void sub_1BB5E3314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void updateModelParametersDictionary(NSMutableDictionary *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v36 = a1;
  id v34 = [(NSMutableDictionary *)v36 objectForKeyedSubscript:@"AcousticID"];
  if (v34)
  {
    [(NSMutableDictionary *)v36 removeObjectForKey:@"AcousticID"];
    uint64_t v1 = [(NSMutableDictionary *)v36 objectForKeyedSubscript:@"Name"];
    if (!v1)
    {
      uint64_t v2 = [NSString stringWithFormat:@"Acoustic ID: %@", v34];
      [(NSMutableDictionary *)v36 setObject:v2 forKeyedSubscript:@"Name"];
    }
  }
  unsigned int v3 = [(NSMutableDictionary *)v36 objectForKeyedSubscript:@"ChannelData"];
  uint64_t v4 = [v3 objectAtIndexedSubscript:0];
  id v35 = [v4 objectForKeyedSubscript:@"PressureResponse"];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v38 = [(NSMutableDictionary *)v36 objectForKeyedSubscript:@"ChannelData"];
    int v5 = [MEMORY[0x1E4F1CA48] array];
    unsigned int v6 = 0;
    uint64_t v39 = v5;
    while ([v38 count] > (unint64_t)v6)
    {
      uint64_t v7 = [v38 objectAtIndexedSubscript:v6];
      uint64_t v8 = [v7 objectForKeyedSubscript:@"PressureResponse"];
      uint64_t v9 = [v8 count];
      long long v37 = &v33;
      *(void *)&double v10 = MEMORY[0x1F4188790](v9).n128_u64[0];
      uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      for (unsigned int i = 0; objc_msgSend(v8, "count", v10) > (unint64_t)i; ++i)
      {
        float v14 = [v8 objectAtIndexedSubscript:i];
        [v14 floatValue];
        *(_DWORD *)&v12[4 * i] = v15;
      }
      uint64_t v16 = [v8 count];
      id v17 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v12 length:4 * v16];
      BOOL v18 = (void *)MEMORY[0x1E4F1CA60];
      id v19 = [v7 objectForKeyedSubscript:@"AnalogGain"];
      id v20 = [v7 objectForKeyedSubscript:@"ThieleSmall"];
      unint64_t v21 = objc_msgSend(v18, "dictionaryWithObjectsAndKeys:", v19, @"AnalogGain", v17, @"PressureResponse", v20, @"ThieleSmall", 0);

      uint64_t v22 = [v7 objectForKeyedSubscript:@"TweeterResponse"];
      uint64_t v23 = v39;
      if (v22)
      {
        uint64_t v24 = [v22 count];
        *(void *)&double v25 = MEMORY[0x1F4188790](v24).n128_u64[0];
        unsigned int v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
        for (unsigned int j = 0; objc_msgSend(v22, "count", v25) > (unint64_t)j; ++j)
        {
          BOOL v29 = [v22 objectAtIndexedSubscript:j];
          [v29 floatValue];
          *(_DWORD *)&v27[4 * j] = v30;
        }
        vDSP_Length v31 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v27, 4 * objc_msgSend(v22, "count"));
        uint64_t v32 = [v7 objectForKeyedSubscript:@"TweeterGain"];
        [v21 setValue:v32 forKey:@"TweeterGain"];

        [v21 setValue:v31 forKey:@"TweeterResponse"];
        uint64_t v23 = v39;
      }
      [v23 addObject:v21];

      ++v6;
      int v5 = v39;
    }
    [(NSMutableDictionary *)v36 setObject:v5 forKeyedSubscript:@"ChannelData"];
  }
}

void sub_1BB5E3864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AULowFlow::setModelParameters(AULowFlow *this)
{
  *(void *)&double v2 = MEMORY[0x1F4188790](this).n128_u64[0];
  uint64_t v3 = v1;
  uint64_t v4 = *(_DWORD **)(v1 + 2144);
  if (v4 == *(_DWORD **)(v1 + 2152))
  {
    int v5 = 0;
    unsigned int v6 = 0;
  }
  else
  {
    if (*v4 == 4) {
      int v5 = &v47;
    }
    else {
      int v5 = 0;
    }
    if (*v4 == 4) {
      unsigned int v6 = &v46;
    }
    else {
      unsigned int v6 = 0;
    }
  }
  int v46 = 0;
  int v45 = objc_msgSend(*(id *)(v1 + 2176), "objectForKeyedSubscript:", @"ChannelData", v2);
  if ([v45 count] == 2)
  {
    uint64_t v7 = 0;
    uint64_t v43 = v5;
    uint64_t v44 = v6;
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    int v9 = !v8;
    char v10 = 1;
    do
    {
      char v11 = v10;
      uint64_t v12 = objc_msgSend(v45, "objectAtIndexedSubscript:", v7, v43);
      float v13 = [v12 objectForKeyedSubscript:@"ThieleSmall"];
      float v14 = [v12 objectForKeyedSubscript:@"AnalogGain"];
      [v14 floatValue];
      v49[9 * v7] = v15;

      uint64_t v16 = [v13 objectForKeyedSubscript:@"Bl"];
      [v16 floatValue];
      v49[9 * v7 + 1] = v17;

      BOOL v18 = [v13 objectForKeyedSubscript:@"Reb"];
      [v18 floatValue];
      v49[9 * v7 + 2] = v19;

      id v20 = [v13 objectForKeyedSubscript:@"Mms"];
      [v20 floatValue];
      v49[9 * v7 + 3] = v21;

      uint64_t v22 = [v13 objectForKeyedSubscript:@"MmsFrontPort"];
      [v22 floatValue];
      v49[9 * v7 + 4] = v23;

      uint64_t v24 = [v13 objectForKeyedSubscript:@"Rms"];
      [v24 floatValue];
      v49[9 * v7 + 5] = v25;

      uint64_t v26 = [v13 objectForKeyedSubscript:@"RmsFrontPort"];
      [v26 floatValue];
      v49[9 * v7 + 6] = v27;

      char v28 = [v13 objectForKeyedSubscript:@"Kms"];
      [v28 floatValue];
      v49[9 * v7 + 7] = v29;

      int v30 = [v13 objectForKeyedSubscript:@"KmsFrontPort"];
      [v30 floatValue];
      v49[9 * v7 + 8] = v31;

      uint64_t v32 = [v12 objectForKeyedSubscript:@"PressureResponse"];
      if ([v32 length] != 4096) {
        goto LABEL_33;
      }
      [v32 getBytes:&v48[4096 * v7] length:4096];
      if (v9)
      {
        uint64_t v33 = [v12 objectForKeyedSubscript:@"TweeterGain"];
        [v33 floatValue];
        int *v44 = v34;

        id v35 = [v12 objectForKeyedSubscript:@"TweeterResponse"];
        long long v36 = v35;
        if (!v35 || [v35 length] != 4096)
        {

LABEL_33:
          goto LABEL_34;
        }
        [v36 getBytes:&v43[4096 * v7] length:4096];
      }
      char v10 = 0;
      uint64_t v7 = 1;
    }
    while ((v11 & 1) != 0);

    long long v37 = (uint64_t *)(v3 + 528);
    uint64_t v38 = -1;
    do
    {
      if (*(_DWORD *)(v3 + 1588))
      {
        uint64_t v39 = *(unsigned int **)(v3 + 2144);
        if (v39 == *(unsigned int **)(v3 + 2152)) {
          unint64_t v40 = 0;
        }
        else {
          unint64_t v40 = *v39;
        }
      }
      else
      {
        unint64_t v40 = 1;
      }
      if (++v38 >= v40) {
        break;
      }
      uint64_t v41 = v37 + 7;
      int v42 = DspLib::LowFlow::Algorithm::setModelParameters(*v37, (uint64_t)v49, (uint64_t)v48, v43, v44);
      long long v37 = v41;
    }
    while (!v42);
  }
  else
  {
LABEL_34:
  }
}

void sub_1BB5E3D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t AULowFlow::GetProperty(AULowFlow *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  if (a2 == 6620)
  {
    if (a3)
    {
      return 4294956430;
    }
    else
    {
      BOOL v8 = (void *)*((void *)this + 272);
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        uint64_t result = 0;
        *a5 = v9;
      }
      else
      {
        return 4294956433;
      }
    }
  }
  else
  {
    return AUDspLib::GetProperty(this, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t AULowFlow::GetPropertyInfo(AULowFlow *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 6620) {
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  if (a3) {
    return 4294956430;
  }
  uint64_t result = 0;
  *a5 = 8;
  *a6 = 1;
  return result;
}

uint64_t AULowFlow::Initialize(AULowFlow *this)
{
  uint64_t v2 = AUDspLib::Initialize(this);
  if (!v2 && *((void *)this + 272)) {
    AULowFlow::setModelParameters(this);
  }
  return v2;
}

void AULowFlow::~AULowFlow(id *this)
{
  AUDspLib::~AUDspLib((AUDspLib *)this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  AUDspLib::~AUDspLib((AUDspLib *)this);
}

uint64_t AUWindKill::ValidFormat(AUWindKill *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  UInt32 mBitsPerChannel = a4->mBitsPerChannel;
  if (a2 != 2 || a3 != 2)
  {
    if (mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
      uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
    }
    else {
      uint64_t result = 0;
    }
    if (a2 == 1)
    {
      UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    }
    else
    {
      if (a2 != 2) {
        return result;
      }
      UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
      if (a3) {
        goto LABEL_48;
      }
    }
    BOOL v16 = mChannelsPerFrame == 2;
    goto LABEL_49;
  }
  UInt32 mBytesPerPacket = a4->mBytesPerPacket;
  UInt32 mBytesPerFrame = a4->mBytesPerFrame;
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  BOOL v8 = a4->mFormatID == 1819304813 && a4->mFramesPerPacket == 1;
  BOOL v11 = !v8 || mBytesPerFrame != mBytesPerPacket || mBitsPerChannel >> 3 > mBytesPerFrame || mChannelsPerFrame == 0;
  if (!v11
    && ((AudioFormatFlags mFormatFlags = a4->mFormatFlags, (mFormatFlags & 0x20) != 0)
     || (BOOL v8 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame,
         mBytesPerPacket /= mChannelsPerFrame,
         v8)))
  {
    int v18 = 8 * mBytesPerPacket;
    BOOL v12 = mBytesPerPacket == 4 && (a4->mFormatFlags & 0x1F84) == 0;
    if (mFormatFlags)
    {
      BOOL v19 = (a4->mFormatFlags & 0x1F84) == 0;
    }
    else
    {
      BOOL v12 = 0;
      BOOL v19 = 1;
    }
    if (v18 == mBitsPerChannel)
    {
      int v20 = v19;
    }
    else
    {
      BOOL v12 = 0;
      int v20 = 1;
    }
    if ((mFormatFlags & 2) != 0)
    {
      BOOL v12 = 0;
      int v13 = 1;
    }
    else
    {
      int v13 = v20;
    }
  }
  else
  {
    BOOL v12 = 0;
    int v13 = 0;
  }
  if (mBitsPerChannel == 32) {
    LODWORD(result) = v12 & v13;
  }
  else {
    LODWORD(result) = 0;
  }
LABEL_48:
  BOOL v16 = mChannelsPerFrame == 1;
LABEL_49:
  if (v16) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUWindKill::SupportedNumChannels(AUWindKill *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUWindKill::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUWindKill::StreamFormatWritable(AUWindKill *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUWindKill::SupportsTail(AUWindKill *this)
{
  return 1;
}

double AUWindKill::GetTailTime(AUWindKill *this)
{
  return 0.05;
}

double AUWindKill::GetLatency(AUWindKill *this)
{
  return 0.0;
}

uint64_t AUWindKill::GetParameterValueStrings(AUWindKill *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  if (a2) {
    return 4294956430;
  }
  if (a3 != 13) {
    return 0;
  }
  v7[0] = xmmword_1E623FB20;
  v7[1] = *(_OWORD *)off_1E623FB30;
  CFArrayRef v6 = CFArrayCreate(0, (const void **)v7, 4, 0);
  uint64_t result = 0;
  *a4 = v6;
  return result;
}

uint64_t AUWindKill::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 132);
  }
  return result;
}

uint64_t AUWindKill::GetParameterInfo(AUWindKill *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956430;
  }
  if (a3 > 0x27) {
    return 4294956418;
  }
  CFStringRef v6 = off_1E623FB40[a3];
  UInt32 v7 = dword_1BB8AA82C[a3];
  AudioUnitParameterUnit v8 = dword_1BB8AA8CC[a3];
  AudioUnitParameterValue v9 = flt_1BB8AA96C[a3];
  AudioUnitParameterValue v10 = flt_1BB8AAA0C[a3];
  AudioUnitParameterValue v11 = flt_1BB8AAAAC[a3];
  int v12 = dword_1BB8AAB4C[a3];
  buffer->cfNameString = v6;
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->clumpID = v7;
  AudioUnitParameterOptions flags = buffer->flags;
  buffer->unit = v8;
  buffer->minCFNumberRef Value = v9;
  buffer->maxCFNumberRef Value = v10;
  buffer->defaultCFNumberRef Value = v11;
  buffer->AudioUnitParameterOptions flags = flags | v12;
  return result;
}

uint64_t AUWindKill::GetParameterList(AUWindKill *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    unsigned int v4 = 0;
    uint64_t result = 4294956430;
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_1BB87B860;
      *((_OWORD *)a3 + freeMatrix(*((_DWORD *)this + 17), this + 1) = xmmword_1BB87B870;
      *((_OWORD *)a3 + 2) = xmmword_1BB87B880;
      *((_OWORD *)a3 + 3) = xmmword_1BB87B600;
      *((_OWORD *)a3 + 4) = xmmword_1BB87B890;
      *((_OWORD *)a3 + 5) = xmmword_1BB87B8A0;
      *((_OWORD *)a3 + 6) = xmmword_1BB87B8B0;
      *((_OWORD *)a3 + 7) = xmmword_1BB87B8C0;
      *((_OWORD *)a3 + 8) = xmmword_1BB87A9F0;
      *((_OWORD *)a3 + 9) = xmmword_1BB87B630;
    }
    unsigned int v4 = 40;
  }
  *a4 = v4;
  return result;
}

uint64_t AUWindKill::SetBusCount(AUWindKill *this, int a2, unsigned int a3)
{
  if (a2 == 1 && a3 == 1)
  {
    uint64_t v3 = (AUWindKill *)((char *)this + 80);
    unsigned int v4 = 1;
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v3, v4);
    return 0;
  }
  uint64_t v5 = 4294956445;
  if (a2 == 2 && a3 - 1 <= 2)
  {
    uint64_t v3 = (AUWindKill *)((char *)this + 128);
    unsigned int v4 = a3;
    goto LABEL_7;
  }
  return v5;
}

BOOL AUWindKill::BusCountWritable(AUWindKill *this, int a2)
{
  return a2 == 2 && *((unsigned char *)this + 17) == 0;
}

uint64_t AUWindKill::Render(AUWindKill *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  void v22[3] = *MEMORY[0x1E4F143B8];
  AudioUnitParameterUnit v8 = (AUWindKill *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 80), 0);
  if (Element && *(_DWORD *)(Element + 172))
  {
    AudioUnitParameterValue v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
    if (result) {
      return result;
    }
    char v12 = 0;
  }
  else
  {
    char v12 = 1;
  }
  unint64_t v13 = 0;
  memset(v22, 0, 24);
  do
  {
    uint64_t v14 = *((void *)this + 21);
    if (v14) {
      LODWORD(v15) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
    }
    else {
      uint64_t v15 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (v13 >= v15)
    {
      uint64_t v17 = 0;
    }
    else
    {
      BOOL v16 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 128), v13);
      uint64_t v17 = ausdk::AUIOElement::PrepareBuffer(v16, a4);
    }
    v22[v13++] = v17;
  }
  while (v13 != 3);
  if (v12) {
    return 0;
  }
  uint64_t v18 = ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
  uint64_t v19 = *((void *)this + 21);
  if (v19) {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  else {
    uint64_t v20 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  return (*(uint64_t (**)(AUWindKill *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, void *))(*(void *)this + 184))(this, a2, a4, 1, &BufferList, v20, v22);
}

uint64_t AUWindKill::ProcessMultipleBufferLists(AUWindKill *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7, double a8, double a9, double a10)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  int v15 = *((_DWORD *)this + 132);
  if (*((_DWORD *)this + 133) != v15)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((unsigned char *)this + 1384) = ausdk::AUElement::GetParameter(Element, 0) != 0.0;
    uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 347) = ausdk::AUElement::GetParameter(v17, 1u);
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 348) = ausdk::AUElement::GetParameter(v18, 0x1Bu);
    uint64_t v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 349) = ausdk::AUElement::GetParameter(v19, 2u);
    uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 35std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v20, 3u);
    int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 35freeMatrix(*((_DWORD *)this + 17), this + 1) = ausdk::AUElement::GetParameter(v21, 4u);
    uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 352) = ausdk::AUElement::GetParameter(v22, 5u);
    int v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 353) = ausdk::AUElement::GetParameter(v23, 6u);
    uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 354) = ausdk::AUElement::GetParameter(v24, 7u);
    int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 355) = ausdk::AUElement::GetParameter(v25, 8u);
    uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 356) = ausdk::AUElement::GetParameter(v26, 0x13u);
    int v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 357) = ausdk::AUElement::GetParameter(v27, 9u);
    char v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 358) = ausdk::AUElement::GetParameter(v28, 0xAu);
    int v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 359) = ausdk::AUElement::GetParameter(v29, 0xBu);
    int v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 36std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v30, 0xCu);
    int v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((_DWORD *)this + 36freeMatrix(*((_DWORD *)this + 17), this + 1) = (int)ausdk::AUElement::GetParameter(v31, 0xDu);
    uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((_DWORD *)this + 362) = ausdk::AUElement::GetParameter(v32, 0xEu);
    uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 363) = ausdk::AUElement::GetParameter(v33, 0xFu);
    int v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 364) = ausdk::AUElement::GetParameter(v34, 0x14u);
    id v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 365) = ausdk::AUElement::GetParameter(v35, 0x1Cu);
    long long v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 366) = ausdk::AUElement::GetParameter(v36, 0x1Du);
    long long v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 367) = ausdk::AUElement::GetParameter(v37, 0x10u);
    uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 368) = ausdk::AUElement::GetParameter(v38, 0x15u);
    uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 369) = ausdk::AUElement::GetParameter(v39, 0x11u);
    unint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 37std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v40, 0x16u);
    uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 37freeMatrix(*((_DWORD *)this + 17), this + 1) = ausdk::AUElement::GetParameter(v41, 0x12u);
    int v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 372) = ausdk::AUElement::GetParameter(v42, 0x1Eu);
    uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 373) = ausdk::AUElement::GetParameter(v43, 0x17u);
    uint64_t v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 374) = ausdk::AUElement::GetParameter(v44, 0x18u);
    int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 375) = ausdk::AUElement::GetParameter(v45, 0x19u);
    int v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 376) = ausdk::AUElement::GetParameter(v46, 0x1Au);
    char v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((unsigned char *)this + 1508) = ausdk::AUElement::GetParameter(v47, 0x1Fu) != 0.0;
    float v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 378) = ausdk::AUElement::GetParameter(v48, 0x20u);
    float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 379) = ausdk::AUElement::GetParameter(v49, 0x21u);
    int v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 38std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v50, 0x22u);
    BOOL v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 38freeMatrix(*((_DWORD *)this + 17), this + 1) = ausdk::AUElement::GetParameter(v51, 0x23u);
    int v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 382) = ausdk::AUElement::GetParameter(v52, 0x24u);
    int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 383) = ausdk::AUElement::GetParameter(v53, 0x25u);
    unint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 384) = ausdk::AUElement::GetParameter(v54, 0x26u);
    uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
    *((float *)this + 385) = ausdk::AUElement::GetParameter(v55, 0x27u);
    float v56 = *(double *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 80), 0) + 80);
    float v57 = v56 * 0.5;
    if (*((float *)this + 351) > (float)(v56 * 0.5))
    {
      *((float *)this + 35freeMatrix(*((_DWORD *)this + 17), this + 1) = v57;
      float v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v58, 4u, *((float *)this + 351), 0);
    }
    float v59 = *((float *)this + 352);
    if (v59 > v57)
    {
      *((float *)this + 352) = v57;
      uint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v60, 5u, *((float *)this + 352), 0);
      float v59 = *((float *)this + 352);
    }
    if (*((float *)this + 351) > v59)
    {
      *((float *)this + 35freeMatrix(*((_DWORD *)this + 17), this + 1) = v59;
      uint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v61, 4u, *((float *)this + 351), 0);
    }
    if (*((float *)this + 356) > v57)
    {
      *((float *)this + 356) = v57;
      int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v62, 0x13u, *((float *)this + 356), 0);
    }
    if (*((float *)this + 357) > v57)
    {
      *((float *)this + 357) = v57;
      uint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v63, 9u, *((float *)this + 357), 0);
    }
    if (*((float *)this + 358) > v57)
    {
      *((float *)this + 358) = v57;
      uint64_t v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v64, 0xAu, *((float *)this + 358), 0);
    }
    if (*((float *)this + 367) > v57)
    {
      *((float *)this + 367) = v57;
      char v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v65, 0x10u, *((float *)this + 367), 0);
    }
    if (*((float *)this + 368) > v57)
    {
      *((float *)this + 368) = v57;
      uint64_t v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v66, 0x15u, *((float *)this + 368), 0);
    }
    float v67 = *((float *)this + 369);
    if (v67 > v57)
    {
      *((float *)this + 369) = v57;
      uint64_t v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v68, 0x11u, *((float *)this + 369), 0);
      float v67 = *((float *)this + 369);
    }
    float v69 = *((float *)this + 367);
    if (v69 > v67)
    {
      *((float *)this + 367) = v67;
      vDSP_Length v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v70, 0x10u, *((float *)this + 367), 0);
      float v69 = *((float *)this + 367);
    }
    float v71 = *((float *)this + 368);
    if (v71 < v69)
    {
      *((float *)this + 368) = v69;
      uint64_t v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v72, 0x15u, *((float *)this + 368), 0);
      float v71 = *((float *)this + 368);
    }
    float v73 = *((float *)this + 369);
    if (v71 > v73)
    {
      *((float *)this + 368) = v73;
      float v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v74, 0x15u, *((float *)this + 368), 0);
    }
    long long v75 = *(_OWORD *)((char *)this + 1496);
    *(_OWORD *)((char *)this + 76std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)((char *)this + 1480);
    *(_OWORD *)((char *)this + 776) = v75;
    long long v76 = *(_OWORD *)((char *)this + 1528);
    *(_OWORD *)((char *)this + 792) = *(_OWORD *)((char *)this + 1512);
    long long v77 = *(_OWORD *)((char *)this + 1432);
    *(_OWORD *)((char *)this + 696) = *(_OWORD *)((char *)this + 1416);
    *(_OWORD *)((char *)this + 712) = v77;
    long long v78 = *(_OWORD *)((char *)this + 1464);
    *(_OWORD *)((char *)this + 728) = *(_OWORD *)((char *)this + 1448);
    *(_OWORD *)((char *)this + 744) = v78;
    long long v79 = *(_OWORD *)((char *)this + 1400);
    *(_OWORD *)((char *)this + 664) = *(_OWORD *)((char *)this + 1384);
    *(_OWORD *)((char *)this + 68std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v79;
    *(_OWORD *)((char *)this + 808) = v76;
    WindDetectorAndSuppressor::UpdateWindSuppressorCoreState((AUWindKill *)((char *)this + 544));
    *((_DWORD *)this + 133) = v15;
  }
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  float v80 = *a5;
  if (!*a5) {
    return 4294956420;
  }
  if (v80->mNumberBuffers != 2) {
    return 4294956428;
  }
  unint64_t v81 = 0;
  uint64_t v106 = 0;
  int v107 = 0;
  int v108 = 0;
  do
  {
    if (v81 >= a6) {
      float v82 = 0;
    }
    else {
      float v82 = a7[v81];
    }
    *(&v106 + v81++) = v82;
  }
  while (v81 != 3);
  uint64_t v83 = v106;
  if (v106)
  {
    if (v106->mNumberBuffers != 2) {
      return 4294956428;
    }
  }
  uint64_t v84 = v107;
  if (v107)
  {
    if (v107->mNumberBuffers != 1) {
      return 4294956428;
    }
  }
  uint64_t v85 = v108;
  if (v108)
  {
    if (v108->mNumberBuffers != 1) {
      return 4294956428;
    }
  }
  if (*((unsigned char *)this + 536))
  {
    if (v106 && v106->mNumberBuffers)
    {
      uint64_t v86 = 0;
      unint64_t v87 = 0;
      do
      {
        memcpy(v83->mBuffers[v86].mData, (*a5)->mBuffers[v86].mData, (*a5)->mBuffers[v86].mDataByteSize);
        ++v87;
        ++v86;
      }
      while (v87 < v83->mNumberBuffers);
    }
    if (v84) {
      bzero(v84->mBuffers[0].mData, v84->mBuffers[0].mDataByteSize);
    }
    if (v85 && a3) {
      memset_pattern16(v85->mBuffers[0].mData, &unk_1BB873A60, 4 * a3);
    }
    WindDetectorAndSuppressor::ResetOutputPropertiesAndParams((AUWindKill *)((char *)this + 544));
  }
  else
  {
    WindDetectorAndSuppressor::ProcessBufferLists((AUWindKill *)((char *)this + 544), v80, v106, v107, v108, a8, a9, a10);
  }
  long long v89 = *(_OWORD *)((char *)this + 776);
  *(_OWORD *)((char *)this + 148std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)((char *)this + 760);
  *(_OWORD *)((char *)this + 1496) = v89;
  long long v90 = *(_OWORD *)((char *)this + 792);
  long long v91 = *(_OWORD *)((char *)this + 712);
  *(_OWORD *)((char *)this + 1416) = *(_OWORD *)((char *)this + 696);
  *(_OWORD *)((char *)this + 1432) = v91;
  long long v92 = *(_OWORD *)((char *)this + 744);
  *(_OWORD *)((char *)this + 1448) = *(_OWORD *)((char *)this + 728);
  *(_OWORD *)((char *)this + 1464) = v92;
  long long v93 = *(_OWORD *)((char *)this + 680);
  *(_OWORD *)((char *)this + 1384) = *(_OWORD *)((char *)this + 664);
  *(_OWORD *)((char *)this + 140std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v93;
  long long v94 = *(_OWORD *)((char *)this + 808);
  *(_OWORD *)((char *)this + 1512) = v90;
  *(_OWORD *)((char *)this + 1528) = v94;
  uint64_t v95 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  float v96 = 0.0;
  if (*((unsigned char *)this + 1384)) {
    float v96 = 1.0;
  }
  ausdk::AUElement::SetParameter(v95, 0, v96, 0);
  uint64_t v97 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v97, 1u, *((float *)this + 347), 0);
  uint64_t v98 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v98, 0x1Bu, *((float *)this + 348), 0);
  vDSP_Length v99 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v99, 0xEu, (float)*((unsigned int *)this + 362), 0);
  int v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v100, 0xFu, *((float *)this + 363), 0);
  uint64_t v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v101, 0x14u, *((float *)this + 364), 0);
  uint64_t v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v102, 0x1Cu, *((float *)this + 365), 0);
  uint64_t v103 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v103, 0x1Du, *((float *)this + 366), 0);
  uint64_t v104 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v104, 0x19u, *((float *)this + 375), 0);
  uint64_t v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v105, 0x1Au, *((float *)this + 376), 0);
  return 0;
}

uint64_t AUWindKill::CanScheduleParameters(AUWindKill *this)
{
  return 0;
}

uint64_t AUWindKill::SetParameter(AUWindKill *this, unsigned int a2, int a3, float a4)
{
  if (a3) {
    return 4294956418;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUWindKill *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, a2, a4, 0);
  uint64_t result = 0;
  ++*((_DWORD *)this + 132);
  return result;
}

uint64_t AUWindKill::SetProperty(AUWindKill *this, int a2, int a3, unsigned int a4, unsigned char *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t result = 4294956445;
    if (a6 >= 4)
    {
      if (*a5) {
        return 0;
      }
      else {
        return 4294956445;
      }
    }
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *((unsigned char *)this + 536) = *(_DWORD *)a5 != 0;
  }
  return result;
}

uint64_t AUWindKill::GetProperty(AUWindKill *this, int a2, int a3, unsigned int a4, float *__b)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 5629)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v8 = *((unsigned __int8 *)this + 536);
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v8 = *((unsigned __int8 *)this + 376);
    }
    *(_DWORD *)__b = v8;
    return result;
  }
  switch(a2)
  {
    case 5630:
      if (!*((unsigned char *)this + 17) || *((unsigned char *)this + 536))
      {
LABEL_21:
        uint64_t v11 = *((unsigned int *)this + 84);
        if (v11) {
          memset_pattern16(__b, &unk_1BB873A60, 4 * v11);
        }
        return 0;
      }
      AudioUnitParameterValue v9 = (unsigned char *)*((void *)this + 115);
      AudioUnitParameterValue v10 = (unsigned char *)*((void *)this + 116);
LABEL_26:
      if (v10 != v9) {
        memmove(__b, v9, v10 - v9);
      }
      return 0;
    case 5631:
      if (!*((unsigned char *)this + 17) || *((unsigned char *)this + 536)) {
        goto LABEL_21;
      }
      AudioUnitParameterValue v9 = (unsigned char *)*((void *)this + 112);
      AudioUnitParameterValue v10 = (unsigned char *)*((void *)this + 113);
      goto LABEL_26;
    case 5632:
      float v7 = 0.0;
      if (*((unsigned char *)this + 17) && !*((unsigned char *)this + 536))
      {
        if (*((unsigned char *)this + 1384)) {
          float v7 = 1.0;
        }
      }
      uint64_t result = 0;
      *__b = v7;
      break;
  }
  return result;
}

uint64_t AUWindKill::GetPropertyInfo(AUWindKill *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 5629)
  {
    if (a2 == 5630 || a2 == 5631)
    {
      *a6 = 1;
      int v8 = 4 * *((_DWORD *)this + 84);
      goto LABEL_13;
    }
    if (a2 != 5632) {
      return result;
    }
    *a6 = 0;
LABEL_11:
    int v8 = 4;
LABEL_13:
    uint64_t result = 0;
    *a5 = v8;
    return result;
  }
  if (a2 == 21 || a2 == 3700)
  {
    *a6 = 1;
    goto LABEL_11;
  }
  return result;
}

uint64_t AUWindKill::Reset(AUWindKill *this)
{
  if (*((unsigned char *)this + 17))
  {
    uint64_t v2 = (char *)this + 544;
    WindDetectorAndSuppressor::Reset((AUWindKill *)((char *)this + 544));
    long long v3 = *(_OWORD *)(v2 + 232);
    *(_OWORD *)((char *)this + 148std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(v2 + 216);
    *(_OWORD *)((char *)this + 1496) = v3;
    long long v4 = *(_OWORD *)(v2 + 264);
    *(_OWORD *)((char *)this + 1512) = *(_OWORD *)(v2 + 248);
    *(_OWORD *)((char *)this + 1528) = v4;
    long long v5 = *(_OWORD *)(v2 + 168);
    *(_OWORD *)((char *)this + 1416) = *(_OWORD *)(v2 + 152);
    *(_OWORD *)((char *)this + 1432) = v5;
    long long v6 = *(_OWORD *)(v2 + 200);
    *(_OWORD *)((char *)this + 1448) = *(_OWORD *)(v2 + 184);
    *(_OWORD *)((char *)this + 1464) = v6;
    long long v7 = *(_OWORD *)(v2 + 136);
    *(_OWORD *)((char *)this + 1384) = *(_OWORD *)(v2 + 120);
    *(_OWORD *)((char *)this + 140std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v7;
  }
  return 0;
}

uint64_t AUWindKill::Initialize(AUWindKill *this)
{
  uint64_t v2 = (AUWindKill *)((char *)this + 80);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 80), 0) + 108) != 2) {
    return 4294956421;
  }
  for (unsigned int i = 0; ; ++i)
  {
    uint64_t v4 = *((void *)this + 21);
    if (v4) {
      LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
    }
    if (i >= v5) {
      break;
    }
    if (i - 1 >= 2)
    {
      if (!i && *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 128), 0) + 108) != 2) {
        return 4294956421;
      }
    }
    else if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUWindKill *)((char *)this + 128), i) + 108) != 1)
    {
      return 4294956421;
    }
  }
  double v7 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  int v8 = *((_DWORD *)this + 84);
  *((double *)this + 7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v7;
  *((_DWORD *)this + 142) = v8;
  if (!v8) {
    __assert_rtn("initialize", "WindSuppressorCore.cpp", 28, "blockSize > 0");
  }
  if (v7 <= 0.0) {
    __assert_rtn("initialize", "WindSuppressorCore.cpp", 29, "sampleRate > 0.0f");
  }
  *((unsigned char *)this + 1376) = 1;
  *((_DWORD *)this + 269) = 1;
  *((_DWORD *)this + 268) = v8;
  *((double *)this + 137) = v7;
  unint64_t v9 = (2 * v8);
  *((_DWORD *)this + 266) = v9;
  *((_DWORD *)this + 267) = v8 + 1;
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 151, v9, &__C);
  unint64_t v10 = *((unsigned int *)this + 266);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 154, v10, &__C);
  unint64_t v11 = *((unsigned int *)this + 266);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 157, v11, &__C);
  unint64_t v12 = *((unsigned int *)this + 266);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 145, v12, &__C);
  unint64_t v13 = *((unsigned int *)this + 266);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 148, v13, &__C);
  unint64_t v14 = *((unsigned int *)this + 266);
  float __C = 1.0;
  std::vector<float>::assign((char **)this + 142, v14, &__C);
  std::vector<WindUtility::EventTracker<float>>::resize((void *)this + 169, *((unsigned int *)this + 269));
  unint64_t v15 = *((unsigned int *)this + 269);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 160, v15, &__C);
  std::vector<float>::assign((char **)this + 166, (*((_DWORD *)this + 269) + 1), &WindSuppressorCore::kDefaultAggOmniBlendingRatio);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 163, *((unsigned int *)this + 269));
  if (*((_DWORD *)this + 269))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      std::vector<float>::assign((char **)(*((void *)this + 163) + v16), *((unsigned int *)this + 267), &WindSuppressorCore::kDefaultGains);
      ++v17;
      v16 += 24;
    }
    while (v17 < *((unsigned int *)this + 269));
  }
  if (!*((unsigned char *)this + 1376)) {
    __assert_rtn("setFrequencySmoothingFilter", "WindSuppressorCore.cpp", 163, "mInitialized");
  }
  *((_DWORD *)this + 27freeMatrix(*((_DWORD *)this + 17), this + 1) = 5;
  uint64_t v18 = (float *)*((void *)this + 145);
  if (*((void *)this + 146) - (void)v18 <= 0x13uLL) {
    __assert_rtn("generateFrequencySmoothingWindow", "WindSuppressorCore.cpp", 466, "window.size() >= N");
  }
  vDSP_hann_window(v18, 5uLL, 0);
  float __C = 0.0;
  vDSP_sve(*((const float **)this + 145), 1, &__C, 5uLL);
  if (__C < 2.2204e-16) {
    float __C = 1.0;
  }
  vDSP_vsdiv(*((const float **)this + 145), 1, &__C, *((float **)this + 145), 1, 5uLL);
  WindDetectorAndSuppressor::UpdateNonTrivialParameters((AUWindKill *)((char *)this + 544), v19, v20, v21);
  unint64_t v22 = *((unsigned int *)this + 142);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 103, v22, &__C);
  unint64_t v23 = *((unsigned int *)this + 142);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 106, v23, &__C);
  unint64_t v24 = (2 * *((_DWORD *)this + 142));
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 109, v24, &__C);
  unint64_t v25 = *((unsigned int *)this + 142);
  float __C = 1.0;
  std::vector<float>::assign((char **)this + 112, v25, &__C);
  std::vector<float>::assign((char **)this + 115, *((unsigned int *)this + 142), (_DWORD *)this + 136);
  unint64_t v26 = *((unsigned int *)this + 142);
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 121, v26, &__C);
  unint64_t v27 = *((unsigned int *)this + 142);
  float __C = 1.0;
  std::vector<float>::assign((char **)this + 124, v27, &__C);
  unint64_t v28 = (2 * *((_DWORD *)this + 142));
  float __C = 0.0;
  std::vector<float>::assign((char **)this + 127, v28, &__C);
  *((unsigned char *)this + 552) = 1;
  WindDetectorAndSuppressor::Reset((AUWindKill *)((char *)this + 544));
  (*(void (**)(AUWindKill *, void, void))(*(void *)this + 72))(this, 0, 0);
  return 0;
}

void AUWindKill::~AUWindKill(AUWindKill *this)
{
  *(void *)this = &unk_1F14B9820;
  WindDetectorAndSuppressor::~WindDetectorAndSuppressor((AUWindKill *)((char *)this + 544));
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F14B9820;
  WindDetectorAndSuppressor::~WindDetectorAndSuppressor((AUWindKill *)((char *)this + 544));

  ausdk::AUBase::~AUBase(this);
}

uint64_t AUECMIMOHelper::ValidFormat(AUECMIMOHelper *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v6 = (int)a2;
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    uint64_t result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  if (v6 == 2)
  {
    if (a4->mChannelsPerFrame == 1) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 0;
    }
  }
  else if (v6 == 1)
  {
    if (a4->mChannelsPerFrame) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 0;
    }
  }
  if (a3 <= 1)
  {
    if (a4->mChannelsPerFrame < 9) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUECMIMOHelper::SupportedNumChannels(AUECMIMOHelper *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUECMIMOHelper::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 8;
}

BOOL AUECMIMOHelper::StreamFormatWritable(AUECMIMOHelper *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUECMIMOHelper::SupportsTail(AUECMIMOHelper *this)
{
  return 1;
}

double AUECMIMOHelper::GetTailTime(AUECMIMOHelper *this)
{
  return 0.0;
}

double AUECMIMOHelper::GetLatency(AUECMIMOHelper *this)
{
  return 0.0;
}

uint64_t AUECMIMOHelper::GetParameterInfo(AUECMIMOHelper *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0xE)
  {
    CFStringRef v6 = off_1E623FC80[a3];
    AudioUnitParameterUnit v7 = dword_1BB8AAC0C[a3];
    AudioUnitParameterValue v8 = flt_1BB8AAC48[a3];
    AudioUnitParameterValue v9 = flt_1BB8AAC84[a3];
    AudioUnitParameterValue v10 = flt_1BB8AACC0[a3];
    int v11 = dword_1BB8AACFC[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFNumberRef Value = v8;
    buffer->maxCFNumberRef Value = v9;
    buffer->defaultCFNumberRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUECMIMOHelper::GetParameterList(AUECMIMOHelper *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + freeMatrix(*((_DWORD *)this + 17), this + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((void *)a3 + 6) = 0xD0000000CLL;
    a3[14] = 14;
  }
  uint64_t result = 0;
  *a4 = 15;
  return result;
}

uint64_t AUECMIMOHelper::Render(AUECMIMOHelper *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 128), 0);
  uint64_t v9 = ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 80), 0);
  if (!v9 || !*(_DWORD *)(v9 + 172)) {
    return 4294956420;
  }
  AudioUnitParameterValue v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    uint64_t v14 = ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 80), 1u);
    if (v14 && *(_DWORD *)(v14 + 172))
    {
      unint64_t v15 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 1u);
      uint64_t result = ausdk::AUInputElement::PullInput(v15, a2, a3, 1, a4);
      if (!result)
      {
        uint64_t v16 = ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 1u);
        v19[0] = BufferList;
        v19[1] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v16 + 144));
        uint64_t v18 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
        return (*(uint64_t (**)(AUECMIMOHelper *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 2, v19, 1, &v18);
      }
    }
    else
    {
      uint64_t v17 = ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0);
      ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
      ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
      return 0;
    }
  }
  return result;
}

uint64_t AUECMIMOHelper::ProcessMultipleBufferLists(AUECMIMOHelper *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  int v10 = *((_DWORD *)this + 197);
  if (*((_DWORD *)this + 198) != v10)
  {
    AUECMIMOHelper::update_params(this);
    *((_DWORD *)this + 198) = v10;
  }
  if (*((_DWORD *)this + 135))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 16;
    do
    {
      uint64_t v14 = *(const void **)((char *)&a5[1]->mNumberBuffers + v13);
      memcpy(*(void **)(*((void *)this + 78) + v11), (const void *)(*(void *)(*((void *)this + 78) + v11) + 4 * *((int *)this + 132)), 4 * *((int *)this + 132));
      memcpy((void *)(*(void *)(*((void *)this + 78) + v11) + 4 * *((int *)this + 132)), v14, 4 * *((int *)this + 132));
      float __C = 0.0;
      vDSP_svesq(*(const float **)(*((void *)this + 78) + v11), 1, &__C, *((int *)this + 133));
      *(float *)(*(void *)(*((void *)this + 95) + v11) + 4 * *((int *)this + 155)) = __C;
      ++v12;
      v11 += 24;
      v13 += 16;
    }
    while (v12 < *((unsigned int *)this + 135));
  }
  mData = (*a7)->mBuffers[0].mData;
  memcpy(mData, a5[1]->mBuffers[0].mData, 4 * *((int *)this + 132));
  LODWORD(v16) = *((_DWORD *)this + 135);
  if (v16 >= 2)
  {
    unint64_t v17 = 1;
    uint64_t v18 = 32;
    do
    {
      vDSP_vadd(*(const float **)((char *)&a5[1]->mNumberBuffers + v18), 1, (const float *)mData, 1, (float *)mData, 1, *((int *)this + 132));
      ++v17;
      unint64_t v16 = *((unsigned int *)this + 135);
      v18 += 16;
    }
    while (v17 < v16);
  }
  if (*((unsigned char *)this + 576))
  {
    int v19 = *((_DWORD *)this + 132);
    float v66 = 0.0;
    float v67 = 0.0;
    int v20 = *((_DWORD *)this + 137);
    if (v20 < 1)
    {
      float v29 = 1.0e-30;
      float v28 = 0.0;
      float v25 = 1.0e-30;
      float v27 = 0.0;
      float v24 = 0.0;
    }
    else
    {
      int v21 = 0;
      vDSP_Length v22 = (2 * v19);
      int v23 = *((_DWORD *)this + 136);
      float v24 = 0.0;
      float v25 = 1.0e-30;
      int v26 = v16;
      float v27 = 0.0;
      float v28 = 0.0;
      float v29 = 1.0e-30;
      do
      {
        if (v26)
        {
          unint64_t v30 = 0;
          int v63 = v21;
          int v64 = v26 * v21 * v23 * *((_DWORD *)this + 133);
          do
          {
            if (v23 >= 1)
            {
              int v31 = 0;
              int v32 = 0;
              int v65 = v64 + v23 * v30 * *((_DWORD *)this + 133);
              do
              {
                int v33 = v65 + *((_DWORD *)this + 133) * v32;
                vDSP_svesq((const float *)(*((void *)this + 81) + 4 * v33), 1, &v67, v22);
                int v34 = *((_DWORD *)this + 155);
                int v35 = v31 + v34;
                if (v31 + v34 < 0) {
                  int v35 = *((_DWORD *)this + 136) + v34 - v32;
                }
                uint64_t v36 = v33;
                float v37 = *(float *)(*(void *)(*((void *)this + 95) + 24 * v30) + 4 * v35);
                float v38 = v67;
                vDSP_vsub((const float *)(*((void *)this + 81) + 4 * v33), 1, (const float *)(*((void *)this + 89) + 4 * v33), 1, *((float **)this + 92), 1, v22);
                vDSP_svesq(*((const float **)this + 92), 1, &v66, *((int *)this + 133));
                uint64_t v39 = (const float *)*((void *)this + 92);
                unint64_t v40 = (const float *)(*((void *)this + 84) + 4 * v36);
                vDSP_Length v41 = *((int *)this + 133);
                float v42 = *((float *)this + 152);
                float __C = 0.0;
                vDSP_dotpr(v39, 1, v40, 1, &__C, v41);
                float v68 = 0.0;
                float v69 = 0.0;
                vDSP_svesq(v39, 1, &v69, v41);
                vDSP_svesq(v40, 1, &v68, v41);
                float v43 = sqrtf(v68 * v69);
                float v44 = 0.0;
                if (v43 > v42) {
                  float v44 = __C / (float)((float)(v42 / 100.0) + v43);
                }
                float v29 = v29 + v38;
                float v25 = v25 + (float)(v38 * v37);
                float v27 = v27 + (float)((float)(v38 * v37) * (float)v32);
                float v24 = v24 + (float)((float)(v38 * v37) * v44);
                memcpy((void *)(*((void *)this + 84) + 4 * v36), *((const void **)this + 92), 4 * *((int *)this + 133));
                float v28 = v28 + (float)(*(float *)(*(void *)(*((void *)this + 95) + 24 * v30) + 4 * v35) * v66);
                ++v32;
                int v23 = *((_DWORD *)this + 136);
                --v31;
              }
              while (v32 < v23);
              LODWORD(v16) = *((_DWORD *)this + 135);
            }
            ++v30;
          }
          while (v30 < v16);
          int v20 = *((_DWORD *)this + 137);
          int v26 = v16;
          int v21 = v63;
        }
        ++v21;
      }
      while (v21 < v20);
    }
    float v46 = -1.0;
    if ((float)(v24 / v25) >= -1.0) {
      float v46 = v24 / v25;
    }
    if (v46 > 1.0) {
      float v46 = 1.0;
    }
    float v47 = *((float *)this + 145);
    uint64_t v48 = 588;
    if (v46 > v47) {
      uint64_t v48 = 584;
    }
    float v49 = (float)(v46 * (float)(1.0 - *(float *)((char *)this + v48))) + (float)(*(float *)((char *)this + v48) * v47);
    *((float *)this + 145) = v49;
    float v50 = *((float *)this + 148);
    float v51 = 0.0;
    if (v49 > v50) {
      float v51 = (float)(v49 - v50) * *((float *)this + 151);
    }
    *((float *)this + 175) = (float)((float)((float)((float)(v27 / v25) + 0.5) * 1000.0) * (float)*((int *)this + 132))
                           / (float)*((int *)this + 134);
    float v52 = *((float *)this + 196);
    uint64_t v53 = 612;
    if (v52 > v25) {
      uint64_t v53 = 616;
    }
    float v54 = (float)(v28 * 100.0)
        / (float)((float)((float)(*(float *)((char *)this + v53) * v52) + 1.0e-20)
                + (float)((float)(1.0 - *(float *)((char *)this + v53)) * v25));
    *((float *)this + 174) = v54;
    *((float *)this + 176) = v25 / v29;
    *((float *)this + 196) = v25;
    if (v54 <= v51 && *((unsigned char *)this + 596) != 0) {
      float v54 = v51;
    }
    *((float *)this + 15std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v54;
    memcpy(*((void **)this + 89), *((const void **)this + 81), (4 * *((_DWORD *)this + 133) * v20 * v16 * *((_DWORD *)this + 136)));
  }
  else
  {
    *((void *)this + 87) = 1148829696;
    *((_DWORD *)this + 176) = 1065353216;
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 1u, *((float *)this + 174), 0);
  float v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v57, 2u, *((float *)this + 175), 0);
  float v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v58, 3u, *((float *)this + 176), 0);
  float v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v59, 7u, *((float *)this + 145), 0);
  uint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v60, 8u, *((float *)this + 150), 0);
  uint64_t result = 0;
  int v61 = *((_DWORD *)this + 155);
  if (v61 + 1 < *((_DWORD *)this + 136)) {
    int v62 = v61 + 1;
  }
  else {
    int v62 = 0;
  }
  *((_DWORD *)this + 155) = v62;
  return result;
}

void AUECMIMOHelper::update_params(AUECMIMOHelper *this)
{
  uint64_t v2 = (AUECMIMOHelper *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((float *)this + 153) = ausdk::AUElement::GetParameter(Element, 5u);
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 154) = ausdk::AUElement::GetParameter(v4, 6u);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 146) = ausdk::AUElement::GetParameter(v5, 0xAu);
  CFStringRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 147) = ausdk::AUElement::GetParameter(v6, 0xBu);
  AudioUnitParameterUnit v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 148) = fmaxf(ausdk::AUElement::GetParameter(v7, 0xCu), 0.0);
  AudioUnitParameterValue v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 596) = ausdk::AUElement::GetParameter(v8, 9u) != 0.0;
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 15freeMatrix(*((_DWORD *)this + 17), this + 1) = ausdk::AUElement::GetParameter(v9, 0xDu);
  int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v11 = ausdk::AUElement::GetParameter(v10, 0xEu) * 0.1;
  *((float *)this + 152) = __exp10f(v11);
}

uint64_t AUECMIMOHelper::CanScheduleParameters(AUECMIMOHelper *this)
{
  return 0;
}

uint64_t AUECMIMOHelper::SetParameter(AUECMIMOHelper *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  }
  else
  {
    if (*((unsigned char *)this + 17) && (a2 - 9 < 6 || a2 == 5)) {
      ++*((_DWORD *)this + 197);
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  }
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUECMIMOHelper::SetProperty(AUECMIMOHelper *this, int a2, int a3, unsigned int a4, _DWORD *__src, size_t __n)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 103800)
  {
    if (__n == 4
                      * *((_DWORD *)this + 133)
                      * *((_DWORD *)this + 137)
                      * *((_DWORD *)this + 135)
                      * *((_DWORD *)this + 136))
    {
      *((unsigned char *)this + 576) = 1;
      memcpy(*((void **)this + 81), __src, __n);
      return 0;
    }
    else
    {
      uint64_t v6 = 0;
      *((unsigned char *)this + 576) = 0;
    }
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    if (__n >= 4)
    {
      uint64_t v6 = 0;
      *((_DWORD *)this + 142) = *__src != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return v6;
}

uint64_t AUECMIMOHelper::GetProperty(AUECMIMOHelper *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v6 = *((unsigned __int8 *)this + 376);
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    int v6 = *((_DWORD *)this + 142);
  }
  uint64_t result = 0;
  *a5 = v6;
  return result;
}

uint64_t AUECMIMOHelper::GetPropertyInfo(AUECMIMOHelper *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 103800)
  {
    *a6 = 1;
    int v7 = 4 * *((_DWORD *)this + 133) * *((_DWORD *)this + 137) * *((_DWORD *)this + 135) * *((_DWORD *)this + 136);
  }
  else
  {
    if (a2 == 3700)
    {
      *a6 = 0;
    }
    else
    {
      if (a2 != 21) {
        return 4294956417;
      }
      *a6 = 1;
    }
    int v7 = 4;
  }
  uint64_t result = 0;
  *a5 = v7;
  return result;
}

uint64_t AUECMIMOHelper::Initialize(AUECMIMOHelper *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v3 != 2) {
    return 4294956428;
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if (v5 != 1) {
    return 4294956428;
  }
  int v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 1u) + 108);
  if ((v6 - 9) < 0xFFFFFFF8) {
    return 4294956428;
  }
  int v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0) + 108);
  if ((v7 - 9) < 0xFFFFFFF8
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 128), 0) + 108) != 1)
  {
    return 4294956428;
  }
  *((_DWORD *)this + 135) = v6;
  *((_DWORD *)this + 137) = v7;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((_DWORD *)this + 139) = (int)ausdk::AUElement::GetParameter(Element, 0);
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((float *)this + 174) = ausdk::AUElement::GetParameter(v9, 1u);
  int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((float *)this + 175) = ausdk::AUElement::GetParameter(v10, 2u);
  float v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((float *)this + 176) = ausdk::AUElement::GetParameter(v11, 3u);
  unint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((_DWORD *)this + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (int)ausdk::AUElement::GetParameter(v12, 4u);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((float *)this + 145) = ausdk::AUElement::GetParameter(v13, 7u);
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  *((float *)this + 15std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v14, 8u);
  AUECMIMOHelper::update_params(this);
  *((_DWORD *)this + 198) = *((_DWORD *)this + 197);
  int v15 = *((_DWORD *)this + 84);
  *((_DWORD *)this + ++*((_DWORD *)this + 132) = v15;
  *((_DWORD *)this + 133) = 2 * v15;
  *((_DWORD *)this + 138) = v15 + 1;
  float v16 = *(double *)(ausdk::AUScope::SafeGetElement((AUECMIMOHelper *)((char *)this + 80), 0) + 80);
  *((_DWORD *)this + 134) = (int)v16;
  float v17 = (float)(int)v16;
  int v18 = (float)((float)(v17 * (float)*((int *)this + 139)) / 1000.0);
  int v19 = *((_DWORD *)this + 132);
  if (v19 > v18) {
    int v18 = *((_DWORD *)this + 132);
  }
  unsigned int v20 = vcvtps_u32_f32((float)v18 / (float)v19);
  *((_DWORD *)this + 136) = v20;
  int v21 = v19 * v20;
  *((_DWORD *)this + 14freeMatrix(*((_DWORD *)this + 17), this + 1) = v21;
  *((_DWORD *)this + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (float)((float)((float)v21 / v17) * 1000.0);
  vDSP_Length v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUECMIMOHelper *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v22, 4u, (float)*((int *)this + 140), 0);
  AUECMIMOHelper::fcn_vector_init((uint64_t *)this + 78, *((_DWORD *)this + 135), *((_DWORD *)this + 133));
  unint64_t v23 = (4
                     * *((_DWORD *)this + 133)
                     * *((_DWORD *)this + 137)
                     * *((_DWORD *)this + 135)
                     * *((_DWORD *)this + 136));
  int v28 = 0;
  *((void *)this + 82) = *((void *)this + 81);
  std::vector<float>::resize((uint64_t)this + 648, v23, &v28);
  unint64_t v24 = (4
                     * *((_DWORD *)this + 133)
                     * *((_DWORD *)this + 137)
                     * *((_DWORD *)this + 135)
                     * *((_DWORD *)this + 136));
  int v28 = 0;
  *((void *)this + 9std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((void *)this + 89);
  std::vector<float>::resize((uint64_t)this + 712, v24, &v28);
  unint64_t v25 = (4
                     * *((_DWORD *)this + 133)
                     * *((_DWORD *)this + 137)
                     * *((_DWORD *)this + 135)
                     * *((_DWORD *)this + 136));
  int v28 = 0;
  *((void *)this + 85) = *((void *)this + 84);
  std::vector<float>::resize((uint64_t)this + 672, v25, &v28);
  AUECMIMOHelper::fcn_vector_init((uint64_t *)this + 95, *((_DWORD *)this + 135), *((_DWORD *)this + 136));
  unint64_t v26 = *((unsigned int *)this + 133);
  int v28 = 0;
  *((void *)this + 93) = *((void *)this + 92);
  std::vector<float>::resize((uint64_t)this + 736, v26, &v28);
  uint64_t result = 0;
  *((_DWORD *)this + 196) = 0;
  return result;
}

void AUECMIMOHelper::fcn_vector_init(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  int v9 = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
  uint64_t v6 = a2;
  std::vector<std::vector<float>>::resize(a1, a2);
  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 24 * v6;
    do
    {
      std::vector<float>::resize(*a1 + v7, a3, &v9);
      v7 += 24;
    }
    while (v8 != v7);
  }
}

void AUECMIMOHelper::~AUECMIMOHelper(AUECMIMOHelper *this)
{
  AUECMIMOHelper::~AUECMIMOHelper(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(void *)this = &unk_1F14B9A70;
  uint64_t v6 = (void **)((char *)this + 760);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = (void *)*((void *)this + 92);
  if (v2)
  {
    *((void *)this + 93) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 89);
  if (v3)
  {
    *((void *)this + 9std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 84);
  if (v4)
  {
    *((void *)this + 85) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 81);
  if (v5)
  {
    *((void *)this + 82) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)((char *)this + 624);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  ausdk::AUBase::~AUBase(this);
}

void ___Z10SCLogScopev_block_invoke()
{
}

void GetDOAFrequencySmoothingOptions(void *a1)
{
  *(void *)&long long v16 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v11, "0");
  std::string::basic_string[abi:ne180100]<0>(v12, "1/48");
  std::string::basic_string[abi:ne180100]<0>(v13, "1/24");
  std::string::basic_string[abi:ne180100]<0>(v14, "1/12");
  std::string::basic_string[abi:ne180100]<0>(v15, "1/6");
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = &v6;
  char v10 = 0;
  uint64_t v6 = (std::string *)operator new(0x78uLL);
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 5;
  uint64_t v2 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, &v11, &v16, v6);
  uint64_t v7 = v2;
  uint64_t v3 = operator new(0x14uLL);
  v3[4] = 1042983595;
  *(_OWORD *)uint64_t v3 = xmmword_1BB8AAD38;
  uint64_t v4 = v8;
  *a1 = v6;
  a1[1] = v2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v3 + 5;
  a1[5] = v3 + 5;
  int v9 = &v6;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v15[i + 2]) < 0) {
      operator delete((void *)v15[i]);
    }
  }
}

void sub_1BB5E6A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  a13 = (void **)&a10;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 119) < 0) {
      operator delete(*(void **)(&a15 + v16 + 96));
    }
    v16 -= 24;
    if (v16 == -120) {
      _Unwind_Resume(a1);
    }
  }
}

void FillSpatialCaptureParameterMap(uint64_t **a1)
{
  uint64_t v279 = *MEMORY[0x1E4F143B8];
  std::vector<std::string>::vector(&v275, 2uLL);
  std::vector<std::string>::pointer begin = v275.__begin_;
  if (SHIBYTE(v275.__begin_[1].__r_.__value_.__r.__words[2]) < 0)
  {
    v275.__begin_[1].__r_.__value_.__l.__size_ = 4;
    std::vector<std::string>::pointer data = (std::vector<std::string>::pointer)begin[1].__r_.__value_.__l.__data_;
  }
  else
  {
    std::vector<std::string>::pointer data = v275.__begin_ + 1;
    *((unsigned char *)&v275.__begin_[1].__r_.__value_.__s + 23) = 4;
  }
  strcpy((char *)data, "Back");
  std::vector<std::string>::pointer v4 = v275.__begin_;
  if (SHIBYTE(v275.__begin_->__r_.__value_.__r.__words[2]) < 0)
  {
    v275.__begin_->__r_.__value_.__l.__size_ = 5;
    std::vector<std::string>::pointer v4 = (std::vector<std::string>::pointer)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v275.__begin_->__r_.__value_.__s + 23) = 5;
  }
  strcpy((char *)v4, "Front");
  memset(&v274, 0, sizeof(v274));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v274, (long long *)v275.__begin_, (long long *)v275.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v275.__end_ - (char *)v275.__begin_) >> 3));
  uint64_t v5 = (char *)operator new(8uLL);
  long long v271 = v5;
  *(void *)uint64_t v5 = 0x100000000;
  long long v272 = v5 + 8;
  long long v273 = v5 + 8;
  AUSpatialCapture::AddParameterToMap(a1, 0, 1u, -1073741824, @"Camera Direction", (uint64_t)&v274, 0, &v271, 0.0, 1.0, 1.0);
  if (v271)
  {
    long long v272 = v271;
    operator delete(v271);
  }
  v276.__begin_ = &v274;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::vector<std::string>::vector(&v270, 4uLL);
  std::vector<std::string>::pointer v6 = v270.__begin_;
  if (SHIBYTE(v270.__begin_->__r_.__value_.__r.__words[2]) < 0)
  {
    v270.__begin_->__r_.__value_.__l.__size_ = 8;
    std::vector<std::string>::pointer v6 = (std::vector<std::string>::pointer)v6->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v270.__begin_->__r_.__value_.__s + 23) = 8;
  }
  strcpy((char *)v6, "Portrait");
  std::vector<std::string>::pointer v7 = v270.__begin_;
  if (SHIBYTE(v270.__begin_[1].__r_.__value_.__r.__words[2]) < 0)
  {
    v270.__begin_[1].__r_.__value_.__l.__size_ = 18;
    std::vector<std::string>::pointer v8 = (std::vector<std::string>::pointer)v7[1].__r_.__value_.__l.__data_;
  }
  else
  {
    std::vector<std::string>::pointer v8 = v270.__begin_ + 1;
    *((unsigned char *)&v270.__begin_[1].__r_.__value_.__s + 23) = 18;
  }
  strcpy((char *)v8, "PortraitUpsideDown");
  std::string::__assign_external(v270.__begin_ + 2, "LandscapeLeft (home button right)", 0x21uLL);
  std::string::__assign_external(v270.__begin_ + 3, "LandscapeRight (home button left)", 0x21uLL);
  memset(&v269, 0, sizeof(v269));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v269, (long long *)v270.__begin_, (long long *)v270.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v270.__end_ - (char *)v270.__begin_) >> 3));
  v267 = 0;
  std::string __p = 0;
  uint64_t v268 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 1u, 1u, -1073741824, @"Target UI Orientation", (uint64_t)&v269, 0, (char **)&__p, 1.0, 4.0, 3.0);
  if (__p)
  {
    v267 = __p;
    operator delete(__p);
  }
  v276.__begin_ = &v269;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v265, 0, sizeof(v265));
  uint64_t v264 = 0;
  v262 = 0;
  v263 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Eu, 0, 1073782784, @"Active UI Orientation", (uint64_t)v265, 0, (char **)&v262, 0.0, 4.0, 3.0);
  if (v262)
  {
    v263 = v262;
    operator delete(v262);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v265;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v261, 0, sizeof(v261));
  int v9 = operator new(4uLL);
  char v258 = v9;
  _DWORD *v9 = 1;
  v260 = v9 + 1;
  char v259 = v9 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Eu, 0, -1073741824, @"Camera field of view", (uint64_t)v261, 0, (char **)&v258, 1.0, 180.0, 69.654);
  if (v258)
  {
    char v259 = v258;
    operator delete(v258);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v261;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v257, 0, sizeof(v257));
  char v10 = operator new(8uLL);
  v254 = v10;
  *char v10 = 0x100000000;
  uint64_t v256 = v10 + 1;
  char v255 = v10 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x32u, 0xDu, -1073741824, @"Beam gain (front camera)", (uint64_t)v257, 0, (char **)&v254, -12.0, 12.0, 0.0);
  if (v254)
  {
    char v255 = v254;
    operator delete(v254);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v257;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v253, 0, sizeof(v253));
  long long v11 = operator new(8uLL);
  v250 = v11;
  *long long v11 = 0x100000000;
  v252 = v11 + 1;
  uint64_t v251 = v11 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x33u, 0xDu, -1073741824, @"Default beam gain (back camera)", (uint64_t)v253, 0, (char **)&v250, -12.0, 12.0, 0.0);
  if (v250)
  {
    uint64_t v251 = v250;
    operator delete(v250);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v253;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v249, 0, sizeof(v249));
  unint64_t v12 = operator new(8uLL);
  v246 = v12;
  *unint64_t v12 = 0x100000000;
  v248 = v12 + 1;
  __int16 v247 = v12 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x34u, 0xDu, -1073741824, @"Zoom in beam gain (back camera)", (uint64_t)v249, 0, (char **)&v246, -12.0, 12.0, 0.0);
  if (v246)
  {
    __int16 v247 = v246;
    operator delete(v246);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v249;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v245, 0, sizeof(v245));
  uint64_t v13 = operator new(8uLL);
  CFArrayRef v242 = v13;
  *uint64_t v13 = 0x100000000;
  CFArrayRef v244 = v13 + 1;
  CFArrayRef v243 = v13 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x35u, 0xDu, -1073741824, @"Zoom out beam gain (back camera)", (uint64_t)v245, 0, (char **)&v242, -12.0, 12.0, 0.0);
  if (v242)
  {
    CFArrayRef v243 = v242;
    operator delete(v242);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v245;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v241, 0, sizeof(v241));
  uint64_t v14 = operator new(4uLL);
  CFTypeRef v238 = v14;
  *uint64_t v14 = 1;
  CFTypeRef v240 = v14 + 1;
  CFTypeRef v239 = v14 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Fu, 0, 1073782784, @"Zoom out -> default fade", (uint64_t)v241, 1, (char **)&v238, 0.0, 1.0, 1.0);
  if (v238)
  {
    CFTypeRef v239 = v238;
    operator delete(v238);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v241;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v237, 0, sizeof(v237));
  int v15 = operator new(4uLL);
  uint64_t v234 = v15;
  *int v15 = 1;
  uint64_t v236 = v15 + 1;
  char v235 = v15 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x30u, 0, 1073782784, @"Default + zoom out -> zoom in fade", (uint64_t)v237, 1, (char **)&v234, 0.0, 1.0, 1.0);
  if (v234)
  {
    char v235 = v234;
    operator delete(v234);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v237;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v233, 0, sizeof(v233));
  uint64_t v16 = operator new(4uLL);
  uint64_t v230 = v16;
  *uint64_t v16 = 1;
  float v232 = v16 + 1;
  float v231 = v16 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x31u, 2u, -1073733632, @"Override FOV control of beam fading", (uint64_t)v233, 1, (char **)&v230, 0.0, 1.0, 0.0);
  if (v230)
  {
    float v231 = v230;
    operator delete(v230);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v233;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v229, 0, sizeof(v229));
  float v17 = operator new(4uLL);
  long long v226 = v17;
  *float v17 = 1;
  v228 = v17 + 1;
  long long v227 = v17 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Cu, 0, -1073741824, @"Override Zoom out -> default fade", (uint64_t)v229, 1, (char **)&v226, 0.0, 1.0, 1.0);
  if (v226)
  {
    long long v227 = v226;
    operator delete(v226);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v229;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v225, 0, sizeof(v225));
  int v18 = operator new(4uLL);
  long long v222 = v18;
  *int v18 = 1;
  long long v224 = v18 + 1;
  float v223 = v18 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Du, 0, -1073741824, @"Override default + zoom out -> zoom in fade", (uint64_t)v225, 1, (char **)&v222, 0.0, 1.0, 0.0);
  if (v222)
  {
    float v223 = v222;
    operator delete(v222);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v225;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v221, 0, sizeof(v221));
  int v19 = operator new(4uLL);
  CFArrayRef v218 = v19;
  _DWORD *v19 = 0;
  uint64_t v220 = v19 + 1;
  CFArrayRef v219 = v19 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x16u, 2u, -1073741824, @"Limit wind boost", (uint64_t)v221, 2, (char **)&v218, 0.0, 1.0, 1.0);
  if (v218)
  {
    CFArrayRef v219 = v218;
    operator delete(v218);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v221;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v217, 0, sizeof(v217));
  unsigned int v20 = operator new(4uLL);
  CFTypeRef v214 = v20;
  _DWORD *v20 = 0;
  int v216 = v20 + 1;
  CFTypeRef v215 = v20 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x17u, 8u, -1069547520, @"Cutoff frequency for wind boost limiting", (uint64_t)v217, 2, (char **)&v214, 1.0, 24000.0, 500.0);
  if (v214)
  {
    CFTypeRef v215 = v214;
    operator delete(v214);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v217;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v213, 0, sizeof(v213));
  int v21 = operator new(4uLL);
  v210 = v21;
  *int v21 = 0;
  CFTypeRef v212 = v21 + 1;
  CFTypeRef v211 = v21 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x18u, 0xDu, -1073741824, @"Wind boost detection threshold (dB)", (uint64_t)v213, 2, (char **)&v210, 0.0, 12.0, 6.0);
  if (v210)
  {
    CFTypeRef v211 = v210;
    operator delete(v210);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v213;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v209, 0, sizeof(v209));
  vDSP_Length v22 = operator new(4uLL);
  v206 = v22;
  _DWORD *v22 = 0;
  v208 = v22 + 1;
  v207 = v22 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x19u, 0xDu, -1073741824, @"Max wind boost allowed (dB)", (uint64_t)v209, 2, (char **)&v206, 0.0, 12.0, 0.0);
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v209;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v205, 0, sizeof(v205));
  unint64_t v23 = operator new(4uLL);
  v202 = v23;
  _DWORD *v23 = 0;
  v204 = v23 + 1;
  v203 = v23 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x20u, 8u, 1077977088, @"Current Crossover Frequency (MAX)", (uint64_t)v205, 2, (char **)&v202, 20.0, 20000.0, 20.0);
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v205;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v201, 0, sizeof(v201));
  unint64_t v24 = operator new(4uLL);
  uint64_t v198 = v24;
  *unint64_t v24 = 0;
  uint64_t v200 = v24 + 1;
  uint64_t v199 = v24 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x21u, 0xDu, -1006632960, @"Scale Cutoff", (uint64_t)v201, 2, (char **)&v198, -100.0, 100.0, -100.0);
  if (v198)
  {
    uint64_t v199 = v198;
    operator delete(v198);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v201;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v197, 0, sizeof(v197));
  unint64_t v25 = operator new(4uLL);
  int v194 = v25;
  _DWORD *v25 = 0;
  unint64_t v196 = v25 + 1;
  char v195 = v25 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x22u, 4u, -1006632960, @"Raw Scale Smoothing", (uint64_t)v197, 2, (char **)&v194, 0.0, 10.0, 0.03);
  if (v194)
  {
    char v195 = v194;
    operator delete(v194);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v197;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v193, 0, sizeof(v193));
  unint64_t v26 = operator new(4uLL);
  uint32_t v190 = v26;
  _DWORD *v26 = 0;
  uint64_t v192 = v26 + 1;
  DSPSplitComplex v191 = v26 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x23u, 0xDu, -1073741824, @"Omni Blend Scale Thres", (uint64_t)v193, 2, (char **)&v190, -100.0, 100.0, -12.0);
  if (v190)
  {
    DSPSplitComplex v191 = v190;
    operator delete(v190);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v193;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v189, 0, sizeof(v189));
  float v27 = operator new(4uLL);
  uint64_t v186 = v27;
  _DWORD *v27 = 0;
  uint64_t v188 = v27 + 1;
  unint64_t v187 = v27 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x24u, 8u, -1073741824, @"Crossover Max Frequency", (uint64_t)v189, 2, (char **)&v186, 0.0, 20000.0, 1250.0);
  if (v186)
  {
    unint64_t v187 = v186;
    operator delete(v186);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v189;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v185, 0, sizeof(v185));
  int v28 = operator new(4uLL);
  uint64_t v182 = v28;
  _DWORD *v28 = 0;
  v184 = v28 + 1;
  uint64_t v183 = v28 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x25u, 4u, -1073741824, @"Crossover Index Attack", (uint64_t)v185, 2, (char **)&v182, 0.0, 10.0, 0.1);
  if (v182)
  {
    uint64_t v183 = v182;
    operator delete(v182);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v185;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v181, 0, sizeof(v181));
  float v29 = operator new(4uLL);
  uint64_t v178 = v29;
  *float v29 = 0;
  unint64_t v180 = v29 + 1;
  uint64_t v179 = v29 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x26u, 4u, -1073741824, @"Crossover Index Release", (uint64_t)v181, 2, (char **)&v178, 0.0, 10.0, 1.0);
  if (v178)
  {
    uint64_t v179 = v178;
    operator delete(v178);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v181;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v177, 0, sizeof(v177));
  unint64_t v30 = operator new(4uLL);
  uint64_t v174 = v30;
  *unint64_t v30 = 0;
  uint64_t v176 = v30 + 1;
  uint64_t v175 = v30 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x27u, 4u, -1073741824, @"Crossover Index Hold", (uint64_t)v177, 2, (char **)&v174, 0.0, 10.0, 1.5);
  if (v174)
  {
    uint64_t v175 = v174;
    operator delete(v174);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v177;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v173, 0, sizeof(v173));
  int v31 = operator new(4uLL);
  uint64_t v170 = v31;
  *int v31 = 0;
  uint64_t v172 = v31 + 1;
  int v171 = v31 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x28u, 4u, -1006632960, @"Crossover Index Smoothing", (uint64_t)v173, 2, (char **)&v170, 0.0, 10.0, 0.4);
  if (v170)
  {
    int v171 = v170;
    operator delete(v170);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v173;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v169, 0, sizeof(v169));
  int v32 = operator new(4uLL);
  uint64_t v166 = v32;
  _DWORD *v32 = 0;
  uint64_t v168 = v32 + 1;
  uint64_t v167 = v32 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x29u, 8u, -1073741824, @"Min Omni Blend Crossover Frequency", (uint64_t)v169, 2, (char **)&v166, 0.0, 20000.0, 250.0);
  if (v166)
  {
    uint64_t v167 = v166;
    operator delete(v166);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v169;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v165, 0, sizeof(v165));
  int v33 = operator new(4uLL);
  uint64_t v162 = v33;
  *int v33 = 0;
  uint64_t v164 = v33 + 1;
  uint64_t v163 = v33 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Au, 0xDu, -1073741824, @"Min Omni Blend Abs. Energy Trigger", (uint64_t)v165, 2, (char **)&v162, -200.0, 200.0, -90.0);
  if (v162)
  {
    uint64_t v163 = v162;
    operator delete(v162);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v165;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v161, 0, sizeof(v161));
  int v34 = operator new(4uLL);
  uint64_t v158 = v34;
  *int v34 = 0;
  float v160 = v34 + 1;
  float v159 = v34 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Bu, 4u, -1073741824, @"Wind / Scratch Detect Trigger Attack", (uint64_t)v161, 2, (char **)&v158, 0.0, 1.0, 0.25);
  if (v158)
  {
    float v159 = v158;
    operator delete(v158);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v161;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v157, 0, sizeof(v157));
  int v35 = operator new(4uLL);
  uint64_t v154 = v35;
  *int v35 = 0;
  unint64_t v156 = v35 + 1;
  uint64_t v155 = v35 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Cu, 4u, -1006632960, @"Wind / Scratch Detect Trigger Release", (uint64_t)v157, 2, (char **)&v154, 0.0, 1.0, 0.25);
  if (v154)
  {
    uint64_t v155 = v154;
    operator delete(v154);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v157;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v153, 0, sizeof(v153));
  uint64_t v36 = operator new(4uLL);
  uint64_t v150 = v36;
  *uint64_t v36 = 0;
  unint64_t v152 = v36 + 1;
  unint64_t v151 = v36 + 1;
  AUSpatialCapture::AddParameterToMap(a1, 0x2Du, 0, -1006632960, @"Cross Fade Length Ramp Slope", (uint64_t)v153, 2, (char **)&v150, 0.0, 10.0, 0.75);
  if (v150)
  {
    unint64_t v151 = v150;
    operator delete(v150);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v153;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v149, 0, sizeof(v149));
  uint64_t v148 = 0;
  float v146 = 0;
  int v147 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 2u, 2u, -1006632960, @"Enable DOA smoothing", (uint64_t)v149, 3, (char **)&v146, 0.0, 1.0, 0.0);
  if (v146)
  {
    int v147 = v146;
    operator delete(v146);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v149;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v145, 0, sizeof(v145));
  uint64_t v144 = 0;
  float v142 = 0;
  int v143 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 3u, 0, -1006632960, @"DOA time smoothing", (uint64_t)v145, 3, (char **)&v142, 0.0, 1.0, 0.0);
  if (v142)
  {
    int v143 = v142;
    operator delete(v142);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v145;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  GetDOAFrequencySmoothingOptions(&v276);
  std::vector<std::string>::pointer v38 = v276.__begin_;
  std::vector<std::string>::pointer end = v276.__end_;
  GetDOAFrequencySmoothingOptions(&v136);
  long long v140 = v136;
  uint64_t v141 = v137;
  uint64_t v137 = 0;
  long long v136 = 0uLL;
  uint64_t v135 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 4u, 1u, -1006632960, @"DOA frequency smoothing", (uint64_t)&v140, 3, (char **)&v133, 0.0, (float)(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v38) >> 3) - 1), 0.0);
  if (v133)
  {
    uint64_t v134 = v133;
    operator delete(v133);
  }
  uint64_t v102 = (std::string *)&v140;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (v138)
  {
    unint64_t v139 = v138;
    operator delete(v138);
  }
  uint64_t v102 = (std::string *)&v136;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (v277[0])
  {
    v277[1] = v277[0];
    operator delete(v277[0]);
  }
  *(void *)&long long v136 = &v276;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
  memset(v132, 0, sizeof(v132));
  uint64_t v131 = 0;
  long long v129 = 0;
  float v130 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 5u, 0, -1006632960, @"DOA smoothing bias", (uint64_t)v132, 3, (char **)&v129, 0.0, 1.0, 0.0);
  if (v129)
  {
    float v130 = v129;
    operator delete(v129);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v132;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v128, 0, sizeof(v128));
  uint64_t v127 = 0;
  float v125 = 0;
  uint64_t v126 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 6u, 2u, -1006632960, @"Override measured DOA", (uint64_t)v128, 3, (char **)&v125, 0.0, 1.0, 0.0);
  if (v125)
  {
    uint64_t v126 = v125;
    operator delete(v125);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v128;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v124, 0, sizeof(v124));
  uint64_t v123 = 0;
  uint64_t v121 = 0;
  float v122 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 7u, 0, -1006632960, @"Override azimuth", (uint64_t)v124, 3, (char **)&v121, -180.0, 180.0, 0.0);
  if (v121)
  {
    float v122 = v121;
    operator delete(v121);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v124;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v120, 0, sizeof(v120));
  uint64_t v119 = 0;
  vDSP_Length v117 = 0;
  vDSP_Length v118 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 8u, 0, -1006632960, @"Override elevation", (uint64_t)v120, 3, (char **)&v117, -90.0, 90.0, 0.0);
  if (v117)
  {
    vDSP_Length v118 = v117;
    operator delete(v117);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v120;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v116, 0, sizeof(v116));
  uint64_t v115 = 0;
  uint64_t v113 = 0;
  float v114 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 9u, 0, -1006632960, @"Coefficient smoothing", (uint64_t)v116, 3, (char **)&v113, 0.0, 4.0, 2.0);
  if (v113)
  {
    float v114 = v113;
    operator delete(v113);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v116;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v112, 0, sizeof(v112));
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xAu, 2u, -1006632960, @"Enable Parametric timbre filter", (uint64_t)v112, 3, (char **)&v109, 0.0, 1.0, 1.0);
  if (v109)
  {
    uint64_t v110 = v109;
    operator delete(v109);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v112;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::string::basic_string[abi:ne180100]<0>(&v276, "Mono");
  std::string::basic_string[abi:ne180100]<0>(v277, "Linear");
  long long v136 = 0uLL;
  uint64_t v137 = 0;
  uint64_t v102 = (std::string *)&v136;
  LOBYTE(v103) = 0;
  *(void *)&long long v136 = operator new(0x30uLL);
  *((void *)&v136 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v136;
  uint64_t v137 = v136 + 48;
  uint64_t v39 = 0;
  *((void *)&v136 + freeMatrix(*((_DWORD *)this + 17), this + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v137, (long long *)&v276, &v278, (std::string *)v136);
  do
  {
    if (SHIBYTE(v277[v39 + 2]) < 0) {
      operator delete(*(void **)((char *)&v276 + v39 * 8 + 24));
    }
    v39 -= 3;
  }
  while (v39 != -6);
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v136 + 1) - v136) >> 3);
  memset(&v108, 0, sizeof(v108));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v108, (long long *)v136, *((long long **)&v136 + 1), v40);
  uint64_t v106 = 0;
  uint64_t v105 = 0;
  uint64_t v107 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x11u, 1u, -1006632960, @"Low signal select", (uint64_t)&v108, 3, (char **)&v105, 0.0, (float)(v40 - 1), 0.0);
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }
  v276.__begin_ = &v108;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::string::basic_string[abi:ne180100]<0>(&v276, "Spaced omni");
  std::string::basic_string[abi:ne180100]<0>(v277, "Linear");
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  p_std::vector<std::string>::pointer data = 0;
  *(void *)&long long v278 = &v102;
  BYTE8(v278) = 0;
  uint64_t v102 = (std::string *)operator new(0x30uLL);
  uint64_t v103 = v102;
  p_std::vector<std::string>::pointer data = (void **)&v102[2].__r_.__value_.__l.__data_;
  uint64_t v41 = 0;
  uint64_t v103 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v276, &v278, v102);
  do
  {
    if (SHIBYTE(v277[v41 + 2]) < 0) {
      operator delete(*(void **)((char *)&v276 + v41 * 8 + 24));
    }
    v41 -= 3;
  }
  while (v41 != -6);
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v103 - (char *)v102) >> 3);
  memset(&v101, 0, sizeof(v101));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, (long long *)v102, (long long *)v103, v42);
  vDSP_Length v99 = 0;
  uint64_t v98 = 0;
  uint64_t v100 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x12u, 1u, -1006632960, @"High signal select", (uint64_t)&v101, 3, (char **)&v98, 0.0, (float)(v42 - 1), 0.0);
  if (v98)
  {
    vDSP_Length v99 = v98;
    operator delete(v98);
  }
  v276.__begin_ = &v101;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v97, 0, sizeof(v97));
  uint64_t v96 = 0;
  long long v94 = 0;
  uint64_t v95 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xEu, 8u, -1002438656, @"Min Parameteric Frequency", (uint64_t)v97, 3, (char **)&v94, 20.0, 1000.0, 100.0);
  if (v94)
  {
    uint64_t v95 = v94;
    operator delete(v94);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v97;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  memset(v93, 0, sizeof(v93));
  long long v91 = 0;
  uint64_t v92 = 0;
  long long v90 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xFu, 8u, -1002438656, @"Max Parameteric Frequency", (uint64_t)v93, 3, (char **)&v90, 20.0, 24000.0, 2700.0);
  if (v90)
  {
    long long v91 = v90;
    operator delete(v90);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v93;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v88 = 0;
  memset(v89, 0, sizeof(v89));
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x10u, 0x15u, -1006632960, @"Parameteric filter transition width", (uint64_t)v89, 3, (char **)&v86, 0.0, 2.0, 0.5);
  if (v86)
  {
    unint64_t v87 = v86;
    operator delete(v86);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v89;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v84 = 0;
  memset(v85, 0, sizeof(v85));
  float v82 = 0;
  uint64_t v83 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Fu, 8u, 1145085952, @"Max Calculated Parameteric Frequency", (uint64_t)v85, 3, (char **)&v82, 20.0, 24000.0, 2700.0);
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v85;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v80 = 0;
  memset(v81, 0, sizeof(v81));
  long long v78 = 0;
  long long v79 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x13u, 0xDu, -1006632960, @"Low gain", (uint64_t)v81, 3, (char **)&v78, -6.0, 6.0, 0.0);
  if (v78)
  {
    long long v79 = v78;
    operator delete(v78);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v81;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v76 = 0;
  memset(v77, 0, sizeof(v77));
  float v74 = 0;
  long long v75 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x14u, 0xDu, -1006632960, @"Mid gain", (uint64_t)v77, 3, (char **)&v74, -6.0, 6.0, 0.0);
  if (v74)
  {
    long long v75 = v74;
    operator delete(v74);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v77;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v72 = 0;
  memset(v73, 0, sizeof(v73));
  vDSP_Length v70 = 0;
  float v71 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x15u, 0xDu, -1006632960, @"High gain", (uint64_t)v73, 3, (char **)&v70, -6.0, 6.0, 0.0);
  if (v70)
  {
    float v71 = v70;
    operator delete(v70);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v73;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v68 = 0;
  memset(v69, 0, sizeof(v69));
  float v66 = 0;
  float v67 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xBu, 0, -1006632960, @"DRR multiplier", (uint64_t)v69, 3, (char **)&v66, 0.0, 2.0, 1.2);
  if (v66)
  {
    float v67 = v66;
    operator delete(v66);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v69;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v64 = 0;
  memset(v65, 0, sizeof(v65));
  int v62 = 0;
  int v63 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xCu, 0, -1002438656, @"DRR mix regularization", (uint64_t)v65, 3, (char **)&v62, 1.0e-12, 1.0, 0.001);
  if (v62)
  {
    int v63 = v62;
    operator delete(v62);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v65;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  uint64_t v60 = 0;
  memset(v61, 0, sizeof(v61));
  float v58 = 0;
  float v59 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0xDu, 0, -1006632960, @"DRR filter smoothing", (uint64_t)v61, 3, (char **)&v58, 0.0, 4.0, 0.0);
  if (v58)
  {
    float v59 = v58;
    operator delete(v58);
  }
  v276.__begin_ = (std::vector<std::string>::pointer)v61;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  std::vector<std::string>::vector(&v276, 2uLL);
  uint64_t v43 = 0;
  char v44 = 1;
  do
  {
    char v45 = v44;
    *(void *)((char *)&v278 + 7) = 0;
    *(void *)&long long v278 = 0;
    if (v44)
    {
      uint64_t v46 = 0x7261656E694CLL;
      char v47 = 6;
    }
    else
    {
      qmemcpy(&v278, "Linear", 6);
      uint64_t v46 = 0x656C62616D6F6F5ALL;
      char v47 = 14;
    }
    uint64_t v48 = &v276.__begin_[v43];
    if (SHIBYTE(v48->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48->__r_.__value_.__l.__data_);
    }
    char v44 = 0;
    v48->__r_.__value_.__r.__words[0] = v46;
    v48->__r_.__value_.__l.__size_ = v278;
    *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v278 + 7);
    *((unsigned char *)&v48->__r_.__value_.__s + 23) = v47;
    uint64_t v43 = 1;
  }
  while ((v45 & 1) != 0);
  unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v276.__end_ - (char *)v276.__begin_) >> 3);
  memset(&v57, 0, sizeof(v57));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, (long long *)v276.__begin_, (long long *)v276.__end_, v49);
  float v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Au, 1u, -1006632960, @"Render mode (doesn't control MCLP)", (uint64_t)&v57, 3, (char **)&v54, 0.0, (float)(v49 - 1), 0.0);
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  *(void *)&long long v278 = &v57;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
  uint64_t v52 = 0;
  memset(v53, 0, sizeof(v53));
  float v50 = 0;
  float v51 = 0;
  AUSpatialCapture::AddParameterToMap(a1, 0x1Bu, 0, -1006632960, @"Depreciated", (uint64_t)v53, 3, (char **)&v50, 0.0, 1.0, 0.0);
  if (v50)
  {
    float v51 = v50;
    operator delete(v50);
  }
  *(void *)&long long v278 = v53;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
  *(void *)&long long v278 = &v276;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v278);
  v276.__begin_ = (std::vector<std::string>::pointer)&v102;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v276.__begin_ = (std::vector<std::string>::pointer)&v136;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v276.__begin_ = (std::vector<std::string>::pointer)&v270;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
  v276.__begin_ = (std::vector<std::string>::pointer)&v275;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v276);
}

void sub_1BB5E89B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v12 - 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = &a12;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 120));
  *(void *)(v12 - 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v12 - 168;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 120));
  *(void *)(v12 - 168) = &STACK[0x270];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  *(void *)(v12 - 168) = &STACK[0x3F0];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  *(void *)(v12 - 168) = &STACK[0xA38];
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  *(void *)(v12 - 168) = v12 - 192;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 168));
  _Unwind_Resume(a1);
}

void sub_1BB5E8B98()
{
  STACK[0x278] = v0;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 120));
  uint64_t v2 = 0;
  uint64_t v3 = v1 - 168;
  while (1)
  {
    if (*(char *)(v3 + v2 + 47) < 0) {
      operator delete(*(void **)(v3 + v2 + 24));
    }
    v2 -= 24;
    if (v2 == -48) {
      JUMPOUT(0x1BB5E8B58);
    }
  }
}

void sub_1BB5E8BDC()
{
  if (*(char *)(v0 - 145) < 0) {
    operator delete(*(void **)(v0 - 168));
  }
  JUMPOUT(0x1BB5E8B58);
}

void sub_1BB5E8BF4()
{
}

void sub_1BB5E8C1C()
{
  STACK[0x3F8] = v0;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  uint64_t v2 = 0;
  uint64_t v3 = v1 - 168;
  while (1)
  {
    if (*(char *)(v3 + v2 + 47) < 0) {
      operator delete(*(void **)(v3 + v2 + 24));
    }
    v2 -= 24;
    if (v2 == -48) {
      JUMPOUT(0x1BB5E8B68);
    }
  }
}

void sub_1BB5E8C60()
{
  if (*(char *)(v0 - 145) < 0) {
    operator delete(*(void **)(v0 - 168));
  }
  JUMPOUT(0x1BB5E8B68);
}

void sub_1BB5E8C78()
{
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](this, __n);
  std::vector<std::string>::pointer end = this->__end_;
  size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
  bzero(end, v5);
  this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  return this;
}

void sub_1BB5E9290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::pair<std::vector<std::string>,std::vector<float>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  std::vector<std::string>::pointer v4 = (void **)a1;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void GetSpatialCaptureDSPGraphSource(std::string *a1, void *a2, int a3, int **a4, uint64_t a5, int a6, int a7)
{
  uint64_t v1178 = *MEMORY[0x1E4F143B8];
  id v1160 = a2;
  uint64_t v12 = [v1160 objectForKeyedSubscript:@"sampleRate"];
  [v12 doubleValue];
  double v14 = v13;

  if (v14 <= 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad sample rate");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  int v15 = [v1160 objectForKeyedSubscript:@"numMics"];
  unsigned int v16 = [v15 unsignedIntValue];

  if (!v16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad number of mics");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  __x.__r_.__value_.__s.__data_[0] = 0;
  std::vector<char>::vector(&v1174, 0x20uLL, (const std::vector<char>::value_type *)&__x);
  std::vector<char>::pointer begin = v1174.__begin_;
  *((_DWORD *)v1174.__begin_ + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  *((_DWORD *)begin + 2) = 0;
  *(_DWORD *)std::vector<char>::pointer begin = a3;
  if (!a3 || a3 == 0x10000)
  {
    v1174.__end_ = begin;
    operator delete(begin);
    goto LABEL_2206;
  }
  unsigned int v18 = (unsigned __int16)a3;
  v1174.__end_ = begin;
  operator delete(begin);
  if (!(_WORD)a3)
  {
LABEL_2206:
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad number of outputs");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  int v19 = [v1160 objectForKeyedSubscript:@"numSDLSBeams"];
  unsigned int v20 = [v19 unsignedIntValue];

  if (!v20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad number of linear spatial beams");
    DSPGraph::ThrowException();
    goto LABEL_2211;
  }
  int v21 = [v1160 objectForKeyedSubscript:@"nFFT"];
  unsigned int v22 = [v21 unsignedIntValue];

  if (v22 <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1174, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/AUSpatialCapture/SpatialCapture.mm");
    std::string::basic_string[abi:ne180100]<0>(&__x, "GetSpatialCaptureDSPGraphSource");
    std::string::basic_string[abi:ne180100]<0>(&v1177, "bad block size");
    DSPGraph::ThrowException();
LABEL_2211:
    __break(1u);
  }
  AppBooleanCFNumberRef Value = CACFPreferencesGetAppBooleanValue(@"enable_spatial_capture_recording", @"com.apple.coreaudio", 0);
  memset(&v1174, 0, sizeof(v1174));
  std::to_string(&v1166, (int)v14);
  unint64_t v23 = std::string::insert(&v1166, 0, "    ; Defines                                    \n    [def procRate ",
          0x44uLL);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v1167.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1167.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  unint64_t v25 = std::string::append(&v1167, "]                  \n    [def numMics ", 0x25uLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v1168.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1175, v16);
  if ((v1175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v27 = &v1175;
  }
  else {
    float v27 = (std::string *)v1175.__r_.__value_.__r.__words[0];
  }
  if ((v1175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v1175.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v1175.__r_.__value_.__l.__size_;
  }
  float v29 = std::string::append(&v1168, (const std::string::value_type *)v27, size);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v1176.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  int v31 = std::string::append(&v1176, "]                     \n    [def numOutputs ", 0x2BuLL);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v1169.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1165, v18);
  if ((v1165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v33 = &v1165;
  }
  else {
    int v33 = (std::string *)v1165.__r_.__value_.__r.__words[0];
  }
  if ((v1165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v1165.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v1165.__r_.__value_.__l.__size_;
  }
  int v35 = std::string::append(&v1169, (const std::string::value_type *)v33, v34);
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  float v37 = std::string::append(&v1170, "]                     \n    [def numLinBeams ", 0x2CuLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1164, v20);
  if ((v1164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &v1164;
  }
  else {
    uint64_t v39 = (std::string *)v1164.__r_.__value_.__r.__words[0];
  }
  if ((v1164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v1164.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v1164.__r_.__value_.__l.__size_;
  }
  uint64_t v41 = std::string::append(&v1171, (const std::string::value_type *)v39, v40);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  uint64_t v43 = std::string::append(&v1172, "]                     \n    [def fftBlockSize ", 0x2DuLL);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1163, v22 >> 1);
  if ((v1163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v45 = &v1163;
  }
  else {
    char v45 = (std::string *)v1163.__r_.__value_.__r.__words[0];
  }
  if ((v1163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v46 = HIBYTE(v1163.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v46 = v1163.__r_.__value_.__l.__size_;
  }
  char v47 = std::string::append(&v1177, (const std::string::value_type *)v45, v46);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  unint64_t v49 = std::string::append(&__x, "] \n", 3uLL);
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1163.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1164.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1165.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1175.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1175.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1168.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1167.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1166.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n     ; Output\n     out finalOut\n     ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_x = &__x;
  }
  else {
    p_x = (std::string *)__x.__r_.__value_.__r.__words[0];
  }
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = __x.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_x, v52);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__x.__r_.__value_.__l.__data_);
    if (a6) {
      goto LABEL_68;
    }
  }
  else if (a6)
  {
LABEL_68:
    std::string::basic_string[abi:ne180100]<0>(&__x, "\n                                      in refInTd\n                                      box refIn fft 1 1\n                                      wire refInTd refIn ([procRate] [numMics] [fftBlockSize])\n                                      ");
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v53 = &__x;
    }
    else {
      uint64_t v53 = (std::string *)__x.__r_.__value_.__r.__words[0];
    }
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = __x.__r_.__value_.__l.__size_;
    }
    goto LABEL_81;
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n            in refIn\n                                      ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v53 = &__x;
  }
  else {
    uint64_t v53 = (std::string *)__x.__r_.__value_.__r.__words[0];
  }
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v54 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v54 = __x.__r_.__value_.__l.__size_;
  }
LABEL_81:
  std::string::append(a1, (const std::string::value_type *)v53, v54);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n                                  ;\n"
    "                                  ; Mic selection\n"
    "                                  ;\n"
    "                                  box micSelectCoordinator scmicselect 0 0\n"
    "                                  \n"
    "                                  ; Linear spatial (full signal)\n"
    "                                  box linFullSignal (aufx bmfd appl) 1 3\n"
    "                                  box linDead0 dead 1 0\n"
    "                                  box linDead1 dead 1 0\n"
    "                                  box linPatcher chansel 1 1\n"
    "                                  \n"
    "                                  wire refIn                                 linFullSignal                       (fr"
    "eq [procRate] [numMics] [fftBlockSize])\n"
    "                                  wire (linFullSignal 0)                     linDead0                            (fr"
    "eq [procRate] 1 [fftBlockSize])\n"
    "                                  wire (linFullSignal 1)                     linDead1                            (fr"
    "eq [procRate] 1 [fftBlockSize])\n"
    "                                  wire (linFullSignal 2)                     linPatcher                          (fr"
    "eq [procRate] [numLinBeams] [fftBlockSize])\n"
    "                                  ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v55 = &__x;
  }
  else {
    uint64_t v55 = (std::string *)__x.__r_.__value_.__r.__words[0];
  }
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v56 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v56 = __x.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v55, v56);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__x.__r_.__value_.__l.__data_);
    if (!a7) {
      goto LABEL_101;
    }
  }
  else if (!a7)
  {
    goto LABEL_101;
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "\n                                  box linFullSignalFTT fft 1 1\n                                  ");
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v57 = &__x;
  }
  else {
    std::string v57 = (std::string *)__x.__r_.__value_.__r.__words[0];
  }
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v58 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v58 = __x.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v57, v58);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
LABEL_101:
  unsigned int v59 = 0;
  do
  {
    std::to_string(&v1170, v59 + 3);
    uint64_t v60 = std::string::insert(&v1170, 0, "wireProperty (micSelectCoordinator ", 0x23uLL);
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    int v62 = std::string::append(&v1171, ") (linPatcher ", 0xEuLL);
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1169, v59);
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = &v1169;
    }
    else {
      uint64_t v64 = (std::string *)v1169.__r_.__value_.__r.__words[0];
    }
    if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v1169.__r_.__value_.__l.__size_;
    }
    float v66 = std::string::append(&v1172, (const std::string::value_type *)v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    uint64_t v68 = std::string::append(&v1177, ") true\n", 7uLL);
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    __x.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      vDSP_Length v70 = &__x;
    }
    else {
      vDSP_Length v70 = (std::string *)__x.__r_.__value_.__r.__words[0];
    }
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v71 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v71 = __x.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v70, v71);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    ++v59;
  }
  while (v18 != v59);
  std::to_string(&v1170, 3u);
  uint64_t v72 = std::string::insert(&v1170, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
  long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  float v74 = std::string::append(&v1171, " 0 0) (linFullSignal ", 0x15uLL);
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1169, 4u);
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v76 = &v1169;
  }
  else {
    uint64_t v76 = (std::string *)v1169.__r_.__value_.__r.__words[0];
  }
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v77 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v77 = v1169.__r_.__value_.__l.__size_;
  }
  long long v78 = std::string::append(&v1172, (const std::string::value_type *)v76, v77);
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  uint64_t v80 = std::string::append(&v1177, ") true\n", 7uLL);
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v82 = &__x;
  }
  else {
    float v82 = (std::string *)__x.__r_.__value_.__r.__words[0];
  }
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v83 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v83 = __x.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v82, v83);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1170, v18 + 2);
  uint64_t v84 = std::string::insert(&v1170, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  uint64_t v86 = std::string::append(&v1171, " 0 0) (linFullSignal ", 0x15uLL);
  long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1169, 5u);
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v88 = &v1169;
  }
  else {
    uint64_t v88 = (std::string *)v1169.__r_.__value_.__r.__words[0];
  }
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v89 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v89 = v1169.__r_.__value_.__l.__size_;
  }
  long long v90 = std::string::append(&v1172, (const std::string::value_type *)v88, v89);
  long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  uint64_t v92 = std::string::append(&v1177, ") true\n", 7uLL);
  long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0;
  v92->__r_.__value_.__r.__words[2] = 0;
  v92->__r_.__value_.__r.__words[0] = 0;
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v94 = &__x;
  }
  else {
    long long v94 = (std::string *)__x.__r_.__value_.__r.__words[0];
  }
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v95 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v95 = __x.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v94, v95);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1170, 0x1Eu);
  uint64_t v96 = std::string::insert(&v1170, 0, "param ", 6uLL);
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  uint64_t v98 = std::string::append(&v1171, " ", 1uLL);
  long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0;
  v98->__r_.__value_.__r.__words[2] = 0;
  v98->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1169, 3u);
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v100 = &v1169;
  }
  else {
    uint64_t v100 = (std::string *)v1169.__r_.__value_.__r.__words[0];
  }
  if ((v1169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v101 = HIBYTE(v1169.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v101 = v1169.__r_.__value_.__l.__size_;
  }
  uint64_t v102 = std::string::append(&v1172, (const std::string::value_type *)v100, v101);
  long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  uint64_t v104 = std::string::append(&v1177, "\n", 1uLL);
  long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  __x.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x1Eu);
  uint64_t v106 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  std::string v108 = std::string::append(&v1170, " (micSelectCoordinator ", 0x17uLL);
  long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Eu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v110 = &v1176;
  }
  else {
    uint64_t v110 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v111 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v111 = v1176.__r_.__value_.__l.__size_;
  }
  uint64_t v112 = std::string::append(&v1171, (const std::string::value_type *)v110, v111);
  long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0;
  v112->__r_.__value_.__r.__words[2] = 0;
  v112->__r_.__value_.__r.__words[0] = 0;
  float v114 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v116 = &v1177;
  }
  else {
    uint64_t v116 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v117 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v117 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v116, v117);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0);
  vDSP_Length v118 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  uint64_t v120 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v121;
  v120->__r_.__value_.__l.__size_ = 0;
  v120->__r_.__value_.__r.__words[2] = 0;
  v120->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v122 = &v1177;
  }
  else {
    float v122 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v123 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v123 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v122, v123);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0);
  float v124 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v125;
  v124->__r_.__value_.__l.__size_ = 0;
  v124->__r_.__value_.__r.__words[2] = 0;
  v124->__r_.__value_.__r.__words[0] = 0;
  uint64_t v126 = std::string::append(&v1170, " (micSelectCoordinator ", 0x17uLL);
  long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v128 = &v1176;
  }
  else {
    uint64_t v128 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v129 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v129 = v1176.__r_.__value_.__l.__size_;
  }
  float v130 = std::string::append(&v1171, (const std::string::value_type *)v128, v129);
  long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  uint64_t v132 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v134 = &v1177;
  }
  else {
    uint64_t v134 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v135 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v135 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v134, v135);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x32u);
  long long v136 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v137;
  v136->__r_.__value_.__l.__size_ = 0;
  v136->__r_.__value_.__r.__words[2] = 0;
  v136->__r_.__value_.__r.__words[0] = 0;
  float v138 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v140 = &v1177;
  }
  else {
    long long v140 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v141 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v141 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v140, v141);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x33u);
  float v142 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  uint64_t v144 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v145;
  v144->__r_.__value_.__l.__size_ = 0;
  v144->__r_.__value_.__r.__words[2] = 0;
  v144->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v146 = &v1177;
  }
  else {
    float v146 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v147 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v147 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v146, v147);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x34u);
  uint64_t v148 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  uint64_t v150 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v152 = &v1177;
  }
  else {
    unint64_t v152 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v153 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v153 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v152, v153);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x35u);
  uint64_t v154 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  unint64_t v156 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v158 = &v1177;
  }
  else {
    uint64_t v158 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v159 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v159 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v158, v159);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x2Fu);
  float v160 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  uint64_t v162 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v163;
  v162->__r_.__value_.__l.__size_ = 0;
  v162->__r_.__value_.__r.__words[2] = 0;
  v162->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v164 = &v1177;
  }
  else {
    uint64_t v164 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v165 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v165 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v164, v165);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x30u);
  uint64_t v166 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v167;
  v166->__r_.__value_.__l.__size_ = 0;
  v166->__r_.__value_.__r.__words[2] = 0;
  v166->__r_.__value_.__r.__words[0] = 0;
  uint64_t v168 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v169;
  v168->__r_.__value_.__l.__size_ = 0;
  v168->__r_.__value_.__r.__words[2] = 0;
  v168->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v170 = &v1177;
  }
  else {
    uint64_t v170 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v171 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v171 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v170, v171);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x31u);
  uint64_t v172 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v173;
  v172->__r_.__value_.__l.__size_ = 0;
  v172->__r_.__value_.__r.__words[2] = 0;
  v172->__r_.__value_.__r.__words[0] = 0;
  uint64_t v174 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v175;
  v174->__r_.__value_.__l.__size_ = 0;
  v174->__r_.__value_.__r.__words[2] = 0;
  v174->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v176 = &v1177;
  }
  else {
    uint64_t v176 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v177 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v177 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v176, v177);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x1Cu);
  uint64_t v178 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v179;
  v178->__r_.__value_.__l.__size_ = 0;
  v178->__r_.__value_.__r.__words[2] = 0;
  v178->__r_.__value_.__r.__words[0] = 0;
  unint64_t v180 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v181;
  v180->__r_.__value_.__l.__size_ = 0;
  v180->__r_.__value_.__r.__words[2] = 0;
  v180->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v182 = &v1177;
  }
  else {
    uint64_t v182 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v183 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v183 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v182, v183);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x1Du);
  v184 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v185;
  v184->__r_.__value_.__l.__size_ = 0;
  v184->__r_.__value_.__r.__words[2] = 0;
  v184->__r_.__value_.__r.__words[0] = 0;
  uint64_t v186 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v187;
  v186->__r_.__value_.__l.__size_ = 0;
  v186->__r_.__value_.__r.__words[2] = 0;
  v186->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v188 = &v1177;
  }
  else {
    uint64_t v188 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v189 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v189 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v188, v189);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x19u);
  uint32_t v190 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v191;
  v190->__r_.__value_.__l.__size_ = 0;
  v190->__r_.__value_.__r.__words[2] = 0;
  v190->__r_.__value_.__r.__words[0] = 0;
  uint64_t v192 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v193;
  v192->__r_.__value_.__l.__size_ = 0;
  v192->__r_.__value_.__r.__words[2] = 0;
  v192->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v194 = &v1177;
  }
  else {
    int v194 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v195 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v195 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v194, v195);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x18u);
  unint64_t v196 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v197;
  v196->__r_.__value_.__l.__size_ = 0;
  v196->__r_.__value_.__r.__words[2] = 0;
  v196->__r_.__value_.__r.__words[0] = 0;
  uint64_t v198 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v199;
  v198->__r_.__value_.__l.__size_ = 0;
  v198->__r_.__value_.__r.__words[2] = 0;
  v198->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v200 = &v1177;
  }
  else {
    uint64_t v200 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v201 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v201 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v200, v201);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x17u);
  v202 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v203;
  v202->__r_.__value_.__l.__size_ = 0;
  v202->__r_.__value_.__r.__words[2] = 0;
  v202->__r_.__value_.__r.__words[0] = 0;
  v204 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v205;
  v204->__r_.__value_.__l.__size_ = 0;
  v204->__r_.__value_.__r.__words[2] = 0;
  v204->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v206 = &v1177;
  }
  else {
    v206 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v207 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v207 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v206, v207);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x16u);
  v208 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v209;
  v208->__r_.__value_.__l.__size_ = 0;
  v208->__r_.__value_.__r.__words[2] = 0;
  v208->__r_.__value_.__r.__words[0] = 0;
  v210 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v210->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v211;
  v210->__r_.__value_.__l.__size_ = 0;
  v210->__r_.__value_.__r.__words[2] = 0;
  v210->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFTypeRef v212 = &v1177;
  }
  else {
    CFTypeRef v212 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v213 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v213 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v212, v213);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x20u);
  CFTypeRef v214 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v215;
  v214->__r_.__value_.__l.__size_ = 0;
  v214->__r_.__value_.__r.__words[2] = 0;
  v214->__r_.__value_.__r.__words[0] = 0;
  int v216 = std::string::append(&v1172, " 0.0 out\n", 9uLL);
  long long v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v217;
  v216->__r_.__value_.__l.__size_ = 0;
  v216->__r_.__value_.__r.__words[2] = 0;
  v216->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFArrayRef v218 = &v1177;
  }
  else {
    CFArrayRef v218 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v219 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v219 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v218, v219);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x21u);
  uint64_t v220 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v221;
  v220->__r_.__value_.__l.__size_ = 0;
  v220->__r_.__value_.__r.__words[2] = 0;
  v220->__r_.__value_.__r.__words[0] = 0;
  long long v222 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v223;
  v222->__r_.__value_.__l.__size_ = 0;
  v222->__r_.__value_.__r.__words[2] = 0;
  v222->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v224 = &v1177;
  }
  else {
    long long v224 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v225 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v225 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v224, v225);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x22u);
  long long v226 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v227;
  v226->__r_.__value_.__l.__size_ = 0;
  v226->__r_.__value_.__r.__words[2] = 0;
  v226->__r_.__value_.__r.__words[0] = 0;
  v228 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v229;
  v228->__r_.__value_.__l.__size_ = 0;
  v228->__r_.__value_.__r.__words[2] = 0;
  v228->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v230 = &v1177;
  }
  else {
    uint64_t v230 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v231 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v231 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v230, v231);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x23u);
  float v232 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v233;
  v232->__r_.__value_.__l.__size_ = 0;
  v232->__r_.__value_.__r.__words[2] = 0;
  v232->__r_.__value_.__r.__words[0] = 0;
  uint64_t v234 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v235;
  v234->__r_.__value_.__l.__size_ = 0;
  v234->__r_.__value_.__r.__words[2] = 0;
  v234->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v236 = &v1177;
  }
  else {
    uint64_t v236 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v237 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v237 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v236, v237);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x24u);
  CFTypeRef v238 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v239;
  v238->__r_.__value_.__l.__size_ = 0;
  v238->__r_.__value_.__r.__words[2] = 0;
  v238->__r_.__value_.__r.__words[0] = 0;
  CFTypeRef v240 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v241;
  v240->__r_.__value_.__l.__size_ = 0;
  v240->__r_.__value_.__r.__words[2] = 0;
  v240->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFArrayRef v242 = &v1177;
  }
  else {
    CFArrayRef v242 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v243 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v243 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v242, v243);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x25u);
  CFArrayRef v244 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v245;
  v244->__r_.__value_.__l.__size_ = 0;
  v244->__r_.__value_.__r.__words[2] = 0;
  v244->__r_.__value_.__r.__words[0] = 0;
  v246 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v247;
  v246->__r_.__value_.__l.__size_ = 0;
  v246->__r_.__value_.__r.__words[2] = 0;
  v246->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v248 = &v1177;
  }
  else {
    v248 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v249 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v249 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v248, v249);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x26u);
  v250 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v251;
  v250->__r_.__value_.__l.__size_ = 0;
  v250->__r_.__value_.__r.__words[2] = 0;
  v250->__r_.__value_.__r.__words[0] = 0;
  v252 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v253;
  v252->__r_.__value_.__l.__size_ = 0;
  v252->__r_.__value_.__r.__words[2] = 0;
  v252->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v254 = &v1177;
  }
  else {
    v254 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v255 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v255 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v254, v255);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x27u);
  uint64_t v256 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v257;
  v256->__r_.__value_.__l.__size_ = 0;
  v256->__r_.__value_.__r.__words[2] = 0;
  v256->__r_.__value_.__r.__words[0] = 0;
  char v258 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v259;
  v258->__r_.__value_.__l.__size_ = 0;
  v258->__r_.__value_.__r.__words[2] = 0;
  v258->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v260 = &v1177;
  }
  else {
    v260 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v261 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v261 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v260, v261);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x28u);
  v262 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v262->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v263;
  v262->__r_.__value_.__l.__size_ = 0;
  v262->__r_.__value_.__r.__words[2] = 0;
  v262->__r_.__value_.__r.__words[0] = 0;
  uint64_t v264 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v265;
  v264->__r_.__value_.__l.__size_ = 0;
  v264->__r_.__value_.__r.__words[2] = 0;
  v264->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v266 = &v1177;
  }
  else {
    v266 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v267 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v267 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v266, v267);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x29u);
  uint64_t v268 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v269 = *(_OWORD *)&v268->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v268->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v269;
  v268->__r_.__value_.__l.__size_ = 0;
  v268->__r_.__value_.__r.__words[2] = 0;
  v268->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string> v270 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v271 = *(_OWORD *)&v270->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v270->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v271;
  v270->__r_.__value_.__l.__size_ = 0;
  v270->__r_.__value_.__r.__words[2] = 0;
  v270->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v272 = &v1177;
  }
  else {
    long long v272 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v273 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v273 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v272, v273);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x2Au);
  std::string v274 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v275;
  v274->__r_.__value_.__l.__size_ = 0;
  v274->__r_.__value_.__r.__words[2] = 0;
  v274->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string> v276 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v277 = *(_OWORD *)&v276->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v276->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v277;
  v276->__r_.__value_.__l.__size_ = 0;
  v276->__r_.__value_.__r.__words[2] = 0;
  v276->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v278 = &v1177;
  }
  else {
    long long v278 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v279 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v279 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v278, v279);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x2Bu);
  v280 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v281 = *(_OWORD *)&v280->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v280->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v281;
  v280->__r_.__value_.__l.__size_ = 0;
  v280->__r_.__value_.__r.__words[2] = 0;
  v280->__r_.__value_.__r.__words[0] = 0;
  v282 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v283 = *(_OWORD *)&v282->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v282->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v283;
  v282->__r_.__value_.__l.__size_ = 0;
  v282->__r_.__value_.__r.__words[2] = 0;
  v282->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v284 = &v1177;
  }
  else {
    v284 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v285 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v285 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v284, v285);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x2Cu);
  v286 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v287 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v286->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v287;
  v286->__r_.__value_.__l.__size_ = 0;
  v286->__r_.__value_.__r.__words[2] = 0;
  v286->__r_.__value_.__r.__words[0] = 0;
  v288 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v289 = *(_OWORD *)&v288->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v288->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v289;
  v288->__r_.__value_.__l.__size_ = 0;
  v288->__r_.__value_.__r.__words[2] = 0;
  v288->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v290 = &v1177;
  }
  else {
    v290 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v291 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v291 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v290, v291);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1171, 0x2Du);
  v292 = std::string::insert(&v1171, 0, "param ", 6uLL);
  long long v293 = *(_OWORD *)&v292->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v292->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v293;
  v292->__r_.__value_.__l.__size_ = 0;
  v292->__r_.__value_.__r.__words[2] = 0;
  v292->__r_.__value_.__r.__words[0] = 0;
  v294 = std::string::append(&v1172, " 0.0\n", 5uLL);
  long long v295 = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v294->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v295;
  v294->__r_.__value_.__l.__size_ = 0;
  v294->__r_.__value_.__r.__words[2] = 0;
  v294->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v296 = &v1177;
  }
  else {
    v296 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v297 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v297 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v296, v297);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x19u);
  v298 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v299 = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v298->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v299;
  v298->__r_.__value_.__l.__size_ = 0;
  v298->__r_.__value_.__r.__words[2] = 0;
  v298->__r_.__value_.__r.__words[0] = 0;
  v300 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v301;
  v300->__r_.__value_.__l.__size_ = 0;
  v300->__r_.__value_.__r.__words[2] = 0;
  v300->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Bu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v302 = &v1176;
  }
  else {
    v302 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v303 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v303 = v1176.__r_.__value_.__l.__size_;
  }
  v304 = std::string::append(&v1171, (const std::string::value_type *)v302, v303);
  long long v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v305;
  v304->__r_.__value_.__l.__size_ = 0;
  v304->__r_.__value_.__r.__words[2] = 0;
  v304->__r_.__value_.__r.__words[0] = 0;
  v306 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v307 = *(_OWORD *)&v306->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v306->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v307;
  v306->__r_.__value_.__l.__size_ = 0;
  v306->__r_.__value_.__r.__words[2] = 0;
  v306->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v308 = &v1177;
  }
  else {
    v308 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v309 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v309 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v308, v309);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x18u);
  v310 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v311 = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v310->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v311;
  v310->__r_.__value_.__l.__size_ = 0;
  v310->__r_.__value_.__r.__words[2] = 0;
  v310->__r_.__value_.__r.__words[0] = 0;
  v312 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v313;
  v312->__r_.__value_.__l.__size_ = 0;
  v312->__r_.__value_.__r.__words[2] = 0;
  v312->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Au);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v314 = &v1176;
  }
  else {
    v314 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v315 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v315 = v1176.__r_.__value_.__l.__size_;
  }
  v316 = std::string::append(&v1171, (const std::string::value_type *)v314, v315);
  long long v317 = *(_OWORD *)&v316->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v316->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v317;
  v316->__r_.__value_.__l.__size_ = 0;
  v316->__r_.__value_.__r.__words[2] = 0;
  v316->__r_.__value_.__r.__words[0] = 0;
  v318 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v319 = *(_OWORD *)&v318->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v318->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v319;
  v318->__r_.__value_.__l.__size_ = 0;
  v318->__r_.__value_.__r.__words[2] = 0;
  v318->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v320 = &v1177;
  }
  else {
    v320 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v321 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v321 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v320, v321);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x17u);
  v322 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v323;
  v322->__r_.__value_.__l.__size_ = 0;
  v322->__r_.__value_.__r.__words[2] = 0;
  v322->__r_.__value_.__r.__words[0] = 0;
  v324 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v325 = *(_OWORD *)&v324->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v324->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v325;
  v324->__r_.__value_.__l.__size_ = 0;
  v324->__r_.__value_.__r.__words[2] = 0;
  v324->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x19u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v326 = &v1176;
  }
  else {
    v326 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v327 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v327 = v1176.__r_.__value_.__l.__size_;
  }
  v328 = std::string::append(&v1171, (const std::string::value_type *)v326, v327);
  long long v329 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v328->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v329;
  v328->__r_.__value_.__l.__size_ = 0;
  v328->__r_.__value_.__r.__words[2] = 0;
  v328->__r_.__value_.__r.__words[0] = 0;
  v330 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v331 = *(_OWORD *)&v330->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v330->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v331;
  v330->__r_.__value_.__l.__size_ = 0;
  v330->__r_.__value_.__r.__words[2] = 0;
  v330->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v332 = &v1177;
  }
  else {
    v332 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v333 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v333 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v332, v333);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x16u);
  v334 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v335;
  v334->__r_.__value_.__l.__size_ = 0;
  v334->__r_.__value_.__r.__words[2] = 0;
  v334->__r_.__value_.__r.__words[0] = 0;
  v336 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v337;
  v336->__r_.__value_.__l.__size_ = 0;
  v336->__r_.__value_.__r.__words[2] = 0;
  v336->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x17u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v338 = &v1176;
  }
  else {
    v338 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v339 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v339 = v1176.__r_.__value_.__l.__size_;
  }
  v340 = std::string::append(&v1171, (const std::string::value_type *)v338, v339);
  long long v341 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v340->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v341;
  v340->__r_.__value_.__l.__size_ = 0;
  v340->__r_.__value_.__r.__words[2] = 0;
  v340->__r_.__value_.__r.__words[0] = 0;
  v342 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v343 = *(_OWORD *)&v342->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v342->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v343;
  v342->__r_.__value_.__l.__size_ = 0;
  v342->__r_.__value_.__r.__words[2] = 0;
  v342->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v344 = &v1177;
  }
  else {
    v344 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v345 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v345 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v344, v345);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x20u);
  v346 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v347 = *(_OWORD *)&v346->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v346->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v347;
  v346->__r_.__value_.__l.__size_ = 0;
  v346->__r_.__value_.__r.__words[2] = 0;
  v346->__r_.__value_.__r.__words[0] = 0;
  v348 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v348->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v349;
  v348->__r_.__value_.__l.__size_ = 0;
  v348->__r_.__value_.__r.__words[2] = 0;
  v348->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Cu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v350 = &v1176;
  }
  else {
    v350 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v351 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v351 = v1176.__r_.__value_.__l.__size_;
  }
  v352 = std::string::append(&v1171, (const std::string::value_type *)v350, v351);
  long long v353 = *(_OWORD *)&v352->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v352->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v353;
  v352->__r_.__value_.__l.__size_ = 0;
  v352->__r_.__value_.__r.__words[2] = 0;
  v352->__r_.__value_.__r.__words[0] = 0;
  v354 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v355 = *(_OWORD *)&v354->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v354->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v355;
  v354->__r_.__value_.__l.__size_ = 0;
  v354->__r_.__value_.__r.__words[2] = 0;
  v354->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v356 = &v1177;
  }
  else {
    v356 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v357 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v357 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v356, v357);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x21u);
  v358 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v359 = *(_OWORD *)&v358->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v358->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v359;
  v358->__r_.__value_.__l.__size_ = 0;
  v358->__r_.__value_.__r.__words[2] = 0;
  v358->__r_.__value_.__r.__words[0] = 0;
  v360 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v360->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v361;
  v360->__r_.__value_.__l.__size_ = 0;
  v360->__r_.__value_.__r.__words[2] = 0;
  v360->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Du);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v362 = &v1176;
  }
  else {
    v362 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v363 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v363 = v1176.__r_.__value_.__l.__size_;
  }
  v364 = std::string::append(&v1171, (const std::string::value_type *)v362, v363);
  long long v365 = *(_OWORD *)&v364->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v364->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v365;
  v364->__r_.__value_.__l.__size_ = 0;
  v364->__r_.__value_.__r.__words[2] = 0;
  v364->__r_.__value_.__r.__words[0] = 0;
  v366 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v367 = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v366->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v367;
  v366->__r_.__value_.__l.__size_ = 0;
  v366->__r_.__value_.__r.__words[2] = 0;
  v366->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v368 = &v1177;
  }
  else {
    v368 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v369 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v369 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v368, v369);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x22u);
  v370 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v371 = *(_OWORD *)&v370->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v370->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v371;
  v370->__r_.__value_.__l.__size_ = 0;
  v370->__r_.__value_.__r.__words[2] = 0;
  v370->__r_.__value_.__r.__words[0] = 0;
  v372 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v373 = *(_OWORD *)&v372->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v372->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v373;
  v372->__r_.__value_.__l.__size_ = 0;
  v372->__r_.__value_.__r.__words[2] = 0;
  v372->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Eu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v374 = &v1176;
  }
  else {
    v374 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v375 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v375 = v1176.__r_.__value_.__l.__size_;
  }
  v376 = std::string::append(&v1171, (const std::string::value_type *)v374, v375);
  long long v377 = *(_OWORD *)&v376->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v376->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v377;
  v376->__r_.__value_.__l.__size_ = 0;
  v376->__r_.__value_.__r.__words[2] = 0;
  v376->__r_.__value_.__r.__words[0] = 0;
  v378 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v378->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v379;
  v378->__r_.__value_.__l.__size_ = 0;
  v378->__r_.__value_.__r.__words[2] = 0;
  v378->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v380 = &v1177;
  }
  else {
    v380 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v381 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v381 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v380, v381);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x23u);
  v382 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v383 = *(_OWORD *)&v382->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v382->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v383;
  v382->__r_.__value_.__l.__size_ = 0;
  v382->__r_.__value_.__r.__words[2] = 0;
  v382->__r_.__value_.__r.__words[0] = 0;
  v384 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v385 = *(_OWORD *)&v384->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v384->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v385;
  v384->__r_.__value_.__l.__size_ = 0;
  v384->__r_.__value_.__r.__words[2] = 0;
  v384->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x1Fu);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v386 = &v1176;
  }
  else {
    v386 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v387 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v387 = v1176.__r_.__value_.__l.__size_;
  }
  v388 = std::string::append(&v1171, (const std::string::value_type *)v386, v387);
  long long v389 = *(_OWORD *)&v388->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v388->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v389;
  v388->__r_.__value_.__l.__size_ = 0;
  v388->__r_.__value_.__r.__words[2] = 0;
  v388->__r_.__value_.__r.__words[0] = 0;
  v390 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v391 = *(_OWORD *)&v390->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v390->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v391;
  v390->__r_.__value_.__l.__size_ = 0;
  v390->__r_.__value_.__r.__words[2] = 0;
  v390->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v392 = &v1177;
  }
  else {
    v392 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v393 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v393 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v392, v393);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x24u);
  v394 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v395 = *(_OWORD *)&v394->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v394->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v395;
  v394->__r_.__value_.__l.__size_ = 0;
  v394->__r_.__value_.__r.__words[2] = 0;
  v394->__r_.__value_.__r.__words[0] = 0;
  v396 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v397 = *(_OWORD *)&v396->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v396->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v397;
  v396->__r_.__value_.__l.__size_ = 0;
  v396->__r_.__value_.__r.__words[2] = 0;
  v396->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x20u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v398 = &v1176;
  }
  else {
    v398 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v399 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v399 = v1176.__r_.__value_.__l.__size_;
  }
  v400 = std::string::append(&v1171, (const std::string::value_type *)v398, v399);
  long long v401 = *(_OWORD *)&v400->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v400->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v401;
  v400->__r_.__value_.__l.__size_ = 0;
  v400->__r_.__value_.__r.__words[2] = 0;
  v400->__r_.__value_.__r.__words[0] = 0;
  v402 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v403 = *(_OWORD *)&v402->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v402->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v403;
  v402->__r_.__value_.__l.__size_ = 0;
  v402->__r_.__value_.__r.__words[2] = 0;
  v402->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v404 = &v1177;
  }
  else {
    v404 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v405 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v405 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v404, v405);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x25u);
  v406 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v407 = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v406->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v407;
  v406->__r_.__value_.__l.__size_ = 0;
  v406->__r_.__value_.__r.__words[2] = 0;
  v406->__r_.__value_.__r.__words[0] = 0;
  v408 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v409 = *(_OWORD *)&v408->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v408->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v409;
  v408->__r_.__value_.__l.__size_ = 0;
  v408->__r_.__value_.__r.__words[2] = 0;
  v408->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x21u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v410 = &v1176;
  }
  else {
    v410 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v411 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v411 = v1176.__r_.__value_.__l.__size_;
  }
  v412 = std::string::append(&v1171, (const std::string::value_type *)v410, v411);
  long long v413 = *(_OWORD *)&v412->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v412->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v413;
  v412->__r_.__value_.__l.__size_ = 0;
  v412->__r_.__value_.__r.__words[2] = 0;
  v412->__r_.__value_.__r.__words[0] = 0;
  v414 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v414->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v415;
  v414->__r_.__value_.__l.__size_ = 0;
  v414->__r_.__value_.__r.__words[2] = 0;
  v414->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v416 = &v1177;
  }
  else {
    v416 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v417 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v417 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v416, v417);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x26u);
  v418 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v419 = *(_OWORD *)&v418->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v418->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v419;
  v418->__r_.__value_.__l.__size_ = 0;
  v418->__r_.__value_.__r.__words[2] = 0;
  v418->__r_.__value_.__r.__words[0] = 0;
  v420 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v421 = *(_OWORD *)&v420->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v420->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v421;
  v420->__r_.__value_.__l.__size_ = 0;
  v420->__r_.__value_.__r.__words[2] = 0;
  v420->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x22u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v422 = &v1176;
  }
  else {
    v422 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v423 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v423 = v1176.__r_.__value_.__l.__size_;
  }
  v424 = std::string::append(&v1171, (const std::string::value_type *)v422, v423);
  long long v425 = *(_OWORD *)&v424->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v424->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v425;
  v424->__r_.__value_.__l.__size_ = 0;
  v424->__r_.__value_.__r.__words[2] = 0;
  v424->__r_.__value_.__r.__words[0] = 0;
  v426 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v427 = *(_OWORD *)&v426->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v426->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v427;
  v426->__r_.__value_.__l.__size_ = 0;
  v426->__r_.__value_.__r.__words[2] = 0;
  v426->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v428 = &v1177;
  }
  else {
    v428 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v429 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v429 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v428, v429);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x27u);
  v430 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v431 = *(_OWORD *)&v430->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v430->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v431;
  v430->__r_.__value_.__l.__size_ = 0;
  v430->__r_.__value_.__r.__words[2] = 0;
  v430->__r_.__value_.__r.__words[0] = 0;
  v432 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v433 = *(_OWORD *)&v432->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v432->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v433;
  v432->__r_.__value_.__l.__size_ = 0;
  v432->__r_.__value_.__r.__words[2] = 0;
  v432->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x23u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v434 = &v1176;
  }
  else {
    v434 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v435 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v435 = v1176.__r_.__value_.__l.__size_;
  }
  v436 = std::string::append(&v1171, (const std::string::value_type *)v434, v435);
  long long v437 = *(_OWORD *)&v436->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v436->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v437;
  v436->__r_.__value_.__l.__size_ = 0;
  v436->__r_.__value_.__r.__words[2] = 0;
  v436->__r_.__value_.__r.__words[0] = 0;
  v438 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v439 = *(_OWORD *)&v438->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v438->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v439;
  v438->__r_.__value_.__l.__size_ = 0;
  v438->__r_.__value_.__r.__words[2] = 0;
  v438->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v440 = &v1177;
  }
  else {
    v440 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v441 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v441 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v440, v441);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x28u);
  v442 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v443 = *(_OWORD *)&v442->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v442->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v443;
  v442->__r_.__value_.__l.__size_ = 0;
  v442->__r_.__value_.__r.__words[2] = 0;
  v442->__r_.__value_.__r.__words[0] = 0;
  v444 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v445 = *(_OWORD *)&v444->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v444->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v445;
  v444->__r_.__value_.__l.__size_ = 0;
  v444->__r_.__value_.__r.__words[2] = 0;
  v444->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x24u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v446 = &v1176;
  }
  else {
    v446 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v447 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v447 = v1176.__r_.__value_.__l.__size_;
  }
  v448 = std::string::append(&v1171, (const std::string::value_type *)v446, v447);
  long long v449 = *(_OWORD *)&v448->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v448->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v449;
  v448->__r_.__value_.__l.__size_ = 0;
  v448->__r_.__value_.__r.__words[2] = 0;
  v448->__r_.__value_.__r.__words[0] = 0;
  v450 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v451 = *(_OWORD *)&v450->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v450->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v451;
  v450->__r_.__value_.__l.__size_ = 0;
  v450->__r_.__value_.__r.__words[2] = 0;
  v450->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v452 = &v1177;
  }
  else {
    v452 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v453 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v453 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v452, v453);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x29u);
  v454 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v455 = *(_OWORD *)&v454->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v454->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v455;
  v454->__r_.__value_.__l.__size_ = 0;
  v454->__r_.__value_.__r.__words[2] = 0;
  v454->__r_.__value_.__r.__words[0] = 0;
  v456 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v456->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v457;
  v456->__r_.__value_.__l.__size_ = 0;
  v456->__r_.__value_.__r.__words[2] = 0;
  v456->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x25u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v458 = &v1176;
  }
  else {
    v458 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v459 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v459 = v1176.__r_.__value_.__l.__size_;
  }
  v460 = std::string::append(&v1171, (const std::string::value_type *)v458, v459);
  long long v461 = *(_OWORD *)&v460->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v460->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v461;
  v460->__r_.__value_.__l.__size_ = 0;
  v460->__r_.__value_.__r.__words[2] = 0;
  v460->__r_.__value_.__r.__words[0] = 0;
  v462 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v463 = *(_OWORD *)&v462->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v462->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v463;
  v462->__r_.__value_.__l.__size_ = 0;
  v462->__r_.__value_.__r.__words[2] = 0;
  v462->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v464 = &v1177;
  }
  else {
    v464 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v465 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v465 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v464, v465);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x2Au);
  v466 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v467 = *(_OWORD *)&v466->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v466->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v467;
  v466->__r_.__value_.__l.__size_ = 0;
  v466->__r_.__value_.__r.__words[2] = 0;
  v466->__r_.__value_.__r.__words[0] = 0;
  v468 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v469 = *(_OWORD *)&v468->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v468->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v469;
  v468->__r_.__value_.__l.__size_ = 0;
  v468->__r_.__value_.__r.__words[2] = 0;
  v468->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x26u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v470 = &v1176;
  }
  else {
    v470 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v471 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v471 = v1176.__r_.__value_.__l.__size_;
  }
  v472 = std::string::append(&v1171, (const std::string::value_type *)v470, v471);
  long long v473 = *(_OWORD *)&v472->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v472->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v473;
  v472->__r_.__value_.__l.__size_ = 0;
  v472->__r_.__value_.__r.__words[2] = 0;
  v472->__r_.__value_.__r.__words[0] = 0;
  v474 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v475 = *(_OWORD *)&v474->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v474->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v475;
  v474->__r_.__value_.__l.__size_ = 0;
  v474->__r_.__value_.__r.__words[2] = 0;
  v474->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v476 = &v1177;
  }
  else {
    v476 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v477 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v477 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v476, v477);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x2Bu);
  v478 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v479 = *(_OWORD *)&v478->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v478->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v479;
  v478->__r_.__value_.__l.__size_ = 0;
  v478->__r_.__value_.__r.__words[2] = 0;
  v478->__r_.__value_.__r.__words[0] = 0;
  v480 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v481 = *(_OWORD *)&v480->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v480->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v481;
  v480->__r_.__value_.__l.__size_ = 0;
  v480->__r_.__value_.__r.__words[2] = 0;
  v480->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x27u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v482 = &v1176;
  }
  else {
    v482 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v483 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v483 = v1176.__r_.__value_.__l.__size_;
  }
  v484 = std::string::append(&v1171, (const std::string::value_type *)v482, v483);
  long long v485 = *(_OWORD *)&v484->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v484->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v485;
  v484->__r_.__value_.__l.__size_ = 0;
  v484->__r_.__value_.__r.__words[2] = 0;
  v484->__r_.__value_.__r.__words[0] = 0;
  v486 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v487 = *(_OWORD *)&v486->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v486->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v487;
  v486->__r_.__value_.__l.__size_ = 0;
  v486->__r_.__value_.__r.__words[2] = 0;
  v486->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v488 = &v1177;
  }
  else {
    v488 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v489 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v489 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v488, v489);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x2Cu);
  v490 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v491 = *(_OWORD *)&v490->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v490->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v491;
  v490->__r_.__value_.__l.__size_ = 0;
  v490->__r_.__value_.__r.__words[2] = 0;
  v490->__r_.__value_.__r.__words[0] = 0;
  v492 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v493 = *(_OWORD *)&v492->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v492->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v493;
  v492->__r_.__value_.__l.__size_ = 0;
  v492->__r_.__value_.__r.__words[2] = 0;
  v492->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x28u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v494 = &v1176;
  }
  else {
    v494 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v495 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v495 = v1176.__r_.__value_.__l.__size_;
  }
  v496 = std::string::append(&v1171, (const std::string::value_type *)v494, v495);
  long long v497 = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v496->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v497;
  v496->__r_.__value_.__l.__size_ = 0;
  v496->__r_.__value_.__r.__words[2] = 0;
  v496->__r_.__value_.__r.__words[0] = 0;
  v498 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v499 = *(_OWORD *)&v498->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v498->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v499;
  v498->__r_.__value_.__l.__size_ = 0;
  v498->__r_.__value_.__r.__words[2] = 0;
  v498->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v500 = &v1177;
  }
  else {
    v500 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v501 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v501 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v500, v501);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  std::to_string(&v1169, 0x2Du);
  v502 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
  long long v503 = *(_OWORD *)&v502->__r_.__value_.__l.__data_;
  v1170.__r_.__value_.__r.__words[2] = v502->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v503;
  v502->__r_.__value_.__l.__size_ = 0;
  v502->__r_.__value_.__r.__words[2] = 0;
  v502->__r_.__value_.__r.__words[0] = 0;
  v504 = std::string::append(&v1170, " (linFullSignal ", 0x10uLL);
  long long v505 = *(_OWORD *)&v504->__r_.__value_.__l.__data_;
  v1171.__r_.__value_.__r.__words[2] = v504->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v505;
  v504->__r_.__value_.__l.__size_ = 0;
  v504->__r_.__value_.__r.__words[2] = 0;
  v504->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v1176, 0x29u);
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v506 = &v1176;
  }
  else {
    v506 = (std::string *)v1176.__r_.__value_.__r.__words[0];
  }
  if ((v1176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v507 = HIBYTE(v1176.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v507 = v1176.__r_.__value_.__l.__size_;
  }
  v508 = std::string::append(&v1171, (const std::string::value_type *)v506, v507);
  long long v509 = *(_OWORD *)&v508->__r_.__value_.__l.__data_;
  v1172.__r_.__value_.__r.__words[2] = v508->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v509;
  v508->__r_.__value_.__l.__size_ = 0;
  v508->__r_.__value_.__r.__words[2] = 0;
  v508->__r_.__value_.__r.__words[0] = 0;
  v510 = std::string::append(&v1172, " 0 0)\n", 6uLL);
  long long v511 = *(_OWORD *)&v510->__r_.__value_.__l.__data_;
  v1177.__r_.__value_.__r.__words[2] = v510->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v511;
  v510->__r_.__value_.__l.__size_ = 0;
  v510->__r_.__value_.__r.__words[2] = 0;
  v510->__r_.__value_.__r.__words[0] = 0;
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v512 = &v1177;
  }
  else {
    v512 = (std::string *)v1177.__r_.__value_.__r.__words[0];
  }
  if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v513 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v513 = v1177.__r_.__value_.__l.__size_;
  }
  std::string::append(&__x, (const std::string::value_type *)v512, v513);
  if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1172.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1176.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1171.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1170.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1169.__r_.__value_.__l.__data_);
  }
  if ((char *)a4[1] - (char *)*a4 == 4)
  {
    int v514 = **a4;
    if (v514 != 1)
    {
      if (!v514)
      {
        std::string::append(a1, "\n         box postGain (aufx dbgn abox) 1 1\n         ;\n"
          "         ; Linear spatial (full signal)\n"
          "         ;\n"
          "         ",
          0x73uLL);
        if (a7) {
          v515 = "\n"
        }
                 "             wire linPatcher                            linFullSignalFTT                    (freq [proc"
                 "Rate] [numOutputs] [fftBlockSize])\n"
                 "             wire linFullSignalFTT                      postGain                            ([procRate]"
                 " [numOutputs] [fftBlockSize])\n"
                 "             wire postGain                              finalOut                            ([procRate]"
                 " [numOutputs] [fftBlockSize])\n"
                 "             ";
        else {
          v515 = "\n"
        }
                 "             wire linPatcher                            postGain                            (freq [proc"
                 "Rate] [numOutputs] [fftBlockSize])\n"
                 "             wire postGain                              finalOut                            (freq [proc"
                 "Rate] [numOutputs] [fftBlockSize])\n"
                 "             ";
        if (a7) {
          std::string::size_type v516 = 418;
        }
        else {
          std::string::size_type v516 = 290;
        }
        std::string::append(a1, v515, v516);
        std::string::append(a1, "\n        param 1000 -3.0\n        wireGraphParam 1000 (postGain 0 0 0)\n        ", 0x4EuLL);
        if (!AppBooleanValue) {
          goto LABEL_1031;
        }
        if (SCLogScope(void)::once != -1) {
          dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
        }
        if (SCLogScope(void)::scope)
        {
          id v517 = *(id *)SCLogScope(void)::scope;
          if (!v517) {
            goto LABEL_2132;
          }
        }
        else
        {
          id v517 = (id)MEMORY[0x1E4F14500];
          id v1106 = MEMORY[0x1E4F14500];
        }
        v1107 = v517;
        if (os_log_type_enabled(v1107, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v1177.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v1177.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SpatialCapture.mm";
          WORD2(v1177.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v1177.__r_.__value_.__r.__words[1] + 6) = 375;
          _os_log_impl(&dword_1BB0CE000, v1107, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling recording", (uint8_t *)&v1177, 0x12u);
        }

LABEL_2132:
        std::operator+<char>();
        v1108 = std::string::append(&v1169, "ref-in-sc.wav\"     refIn \n            record \"", 0x2EuLL);
        long long v1109 = *(_OWORD *)&v1108->__r_.__value_.__l.__data_;
        v1170.__r_.__value_.__r.__words[2] = v1108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1109;
        v1108->__r_.__value_.__l.__size_ = 0;
        v1108->__r_.__value_.__r.__words[2] = 0;
        v1108->__r_.__value_.__r.__words[0] = 0;
        int v1110 = *(char *)(a5 + 23);
        if (v1110 >= 0) {
          v1111 = (const std::string::value_type *)a5;
        }
        else {
          v1111 = *(const std::string::value_type **)a5;
        }
        if (v1110 >= 0) {
          std::string::size_type v1112 = *(unsigned __int8 *)(a5 + 23);
        }
        else {
          std::string::size_type v1112 = *(void *)(a5 + 8);
        }
        v1113 = std::string::append(&v1170, v1111, v1112);
        long long v1114 = *(_OWORD *)&v1113->__r_.__value_.__l.__data_;
        v1171.__r_.__value_.__r.__words[2] = v1113->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1114;
        v1113->__r_.__value_.__l.__size_ = 0;
        v1113->__r_.__value_.__r.__words[2] = 0;
        v1113->__r_.__value_.__r.__words[0] = 0;
        v1115 = std::string::append(&v1171, "linFullSignal-sc.wav\"     (linFullSignal 2) \n            record \"", 0x41uLL);
        long long v1116 = *(_OWORD *)&v1115->__r_.__value_.__l.__data_;
        v1172.__r_.__value_.__r.__words[2] = v1115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1116;
        v1115->__r_.__value_.__l.__size_ = 0;
        v1115->__r_.__value_.__r.__words[2] = 0;
        v1115->__r_.__value_.__r.__words[0] = 0;
        int v1117 = *(char *)(a5 + 23);
        if (v1117 >= 0) {
          v1118 = (const std::string::value_type *)a5;
        }
        else {
          v1118 = *(const std::string::value_type **)a5;
        }
        if (v1117 >= 0) {
          std::string::size_type v1119 = *(unsigned __int8 *)(a5 + 23);
        }
        else {
          std::string::size_type v1119 = *(void *)(a5 + 8);
        }
        v1120 = std::string::append(&v1172, v1118, v1119);
        long long v1121 = *(_OWORD *)&v1120->__r_.__value_.__l.__data_;
        v1177.__r_.__value_.__r.__words[2] = v1120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1121;
        v1120->__r_.__value_.__l.__size_ = 0;
        v1120->__r_.__value_.__r.__words[2] = 0;
        v1120->__r_.__value_.__r.__words[0] = 0;
        v1122 = std::string::append(&v1177, "linPatcher-sc.wav\"     linPatcher \n            ", 0x2FuLL);
        v1123 = (char *)v1122->__r_.__value_.__r.__words[0];
        v1176.__r_.__value_.__r.__words[0] = v1122->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v1176.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1122->__r_.__value_.__r.__words[1] + 7);
        char v1124 = HIBYTE(v1122->__r_.__value_.__r.__words[2]);
        v1122->__r_.__value_.__l.__size_ = 0;
        v1122->__r_.__value_.__r.__words[2] = 0;
        v1122->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v1174.__end_cap_.__value_) < 0) {
          operator delete(v1174.__begin_);
        }
        v1174.__begin_ = v1123;
        v1174.__end_ = (std::vector<char>::pointer)v1176.__r_.__value_.__r.__words[0];
        *(std::vector<char>::pointer *)((char *)&v1174.__end_ + 7) = *(std::vector<char>::pointer *)((char *)v1176.__r_.__value_.__r.__words + 7);
        HIBYTE(v1174.__end_cap_.__value_) = v1124;
        if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1177.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1171.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1170.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0)
        {
          v1125 = (void *)v1169.__r_.__value_.__r.__words[0];
LABEL_2204:
          operator delete(v1125);
          goto LABEL_1031;
        }
        goto LABEL_1031;
      }
      goto LABEL_1022;
    }
    std::string::append(a1, "\n                           box focused (aufx bmfd appl) 1 3\n                           box focusedDead dead 2 0\n                           box focusedPatcher chansel 1 1\n                           box focusedVsSpatialMix scmx 2 1\n                           \n                           box wide (aufx bmfd appl) 1 3\n                           box wideDead dead 2 0\n                           box widePatcher chansel 1 1\n                           box wideVsSpatialMix scmx 2 1\n                           \n                           box focusedFOVToBeamMix paramtx 0 0\n                           box wideFOVToBeamMix    paramtx 0 0\n                           \n                           box focusedBeamMixOverrideSwitch paramsw 0 0\n                           box wideBeamMixOverrideSwitch    paramsw 0 0\n                           \n                           box defaultBeamGainCamDirSwitch paramsw 0 0\n"
      "                           box focusedBeamGainCamDirSwitch paramsw 0 0\n"
      "                           box wideBeamGainCamDirSwitch paramsw 0 0\n"
      "\n"
      "                           wire refIn                           focused                       (freq [procRate] [nu"
      "mMics] [fftBlockSize])\n"
      "                           wire (focused 0)                     (focusedDead 0)               (freq [procRate] 1 ["
      "fftBlockSize])\n"
      "                           wire (focused 1)                     (focusedDead 1)               (freq [procRate] 1 ["
      "fftBlockSize])\n"
      "                           wire (focused 2)                     focusedPatcher                (freq [procRate] [nu"
      "mLinBeams] [fftBlockSize])\n"
      "\n"
      "                           wire refIn                           wide                       (freq [procRate] [numMi"
      "cs] [fftBlockSize])\n"
      "                           wire (wide 0)                        (wideDead 0)               (freq [procRate] 1 [fft"
      "BlockSize])\n"
      "                           wire (wide 1)                        (wideDead 1)               (freq [procRate] 1 [fft"
      "BlockSize])\n"
      "                           wire (wide 2)                        widePatcher                (freq [procRate] [numLi"
      "nBeams] [fftBlockSize])\n"
      "\n"
      "                           wire widePatcher                     (wideVsSpatialMix 0)       (freq [procRate] [numOu"
      "tputs] [fftBlockSize])\n"
      "                           wire linPatcher                      (wideVsSpatialMix 1)       (freq [procRate] [numOu"
      "tputs] [fftBlockSize])\n"
      "                           wire focusedPatcher                  (focusedVsSpatialMix 1)       (freq [procRate] [nu"
      "mOutputs] [fftBlockSize])\n"
      "\n"
      "                           wire wideVsSpatialMix                (focusedVsSpatialMix 0)       (freq [procRate] [nu"
      "mOutputs] [fftBlockSize])\n"
      "\n"
      "                           ",
      0xA7FuLL);
    if (a7) {
      v525 = "\n"
    }
             "             wire focusedVsSpatialMix             linFullSignalFTT              (freq [procRate] [numOutput"
             "s] [fftBlockSize])\n"
             "             wire linFullSignalFTT                finalOut                      ([procRate] [numOutputs] [f"
             "ftBlockSize])\n"
             "             ";
    else {
      v525 = "\n"
    }
             "             wire focusedVsSpatialMix             finalOut                      (freq [procRate] [numOutput"
             "s] [fftBlockSize])\n"
             "                          ";
    if (a7) {
      std::string::size_type v526 = 261;
    }
    else {
      std::string::size_type v526 = 153;
    }
    std::string::append(a1, v525, v526);
    std::to_string(&v1171, 0x2Eu);
    v527 = std::string::insert(&v1171, 0, "param ", 6uLL);
    long long v528 = *(_OWORD *)&v527->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v527->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v528;
    v527->__r_.__value_.__l.__size_ = 0;
    v527->__r_.__value_.__r.__words[2] = 0;
    v527->__r_.__value_.__r.__words[0] = 0;
    v529 = std::string::append(&v1172, " 0.0\n", 5uLL);
    long long v530 = *(_OWORD *)&v529->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v529->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v530;
    v529->__r_.__value_.__l.__size_ = 0;
    v529->__r_.__value_.__r.__words[2] = 0;
    v529->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v531 = &v1177;
    }
    else {
      v531 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v532 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v532 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v531, v532);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    char v533 = 0;
    uint64_t v534 = 0;
    v1175.__r_.__value_.__r.__words[0] = (std::string::size_type)"focused";
    v1175.__r_.__value_.__l.__size_ = (std::string::size_type)"wide";
    do
    {
      char v1161 = v533;
      std::string::basic_string[abi:ne180100]<0>(&v1177, *(&v1175.__r_.__value_.__l.__data_ + v534));
      std::to_string(&v1168, 0x2Eu);
      v535 = std::string::insert(&v1168, 0, "wireGraphParam ", 0xFuLL);
      long long v536 = *(_OWORD *)&v535->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v535->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v536;
      v535->__r_.__value_.__l.__size_ = 0;
      v535->__r_.__value_.__r.__words[2] = 0;
      v535->__r_.__value_.__r.__words[0] = 0;
      v537 = std::string::append(&v1176, " (", 2uLL);
      long long v538 = *(_OWORD *)&v537->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v537->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v538;
      v537->__r_.__value_.__l.__size_ = 0;
      v537->__r_.__value_.__r.__words[2] = 0;
      v537->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v539 = &v1177;
      }
      else {
        v539 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v540 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v540 = v1177.__r_.__value_.__l.__size_;
      }
      v541 = std::string::append(&v1169, (const std::string::value_type *)v539, v540);
      long long v542 = *(_OWORD *)&v541->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v541->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v542;
      v541->__r_.__value_.__l.__size_ = 0;
      v541->__r_.__value_.__r.__words[2] = 0;
      v541->__r_.__value_.__r.__words[0] = 0;
      v543 = std::string::append(&v1170, "FOVToBeamMix", 0xCuLL);
      long long v544 = *(_OWORD *)&v543->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v543->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v544;
      v543->__r_.__value_.__l.__size_ = 0;
      v543->__r_.__value_.__r.__words[2] = 0;
      v543->__r_.__value_.__r.__words[0] = 0;
      v545 = std::string::append(&v1171, " 0 0 0)\n", 8uLL);
      long long v546 = *(_OWORD *)&v545->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v545->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v546;
      v545->__r_.__value_.__l.__size_ = 0;
      v545->__r_.__value_.__r.__words[2] = 0;
      v545->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v547 = &v1172;
      }
      else {
        v547 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v548 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v548 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v547, v548);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      std::operator+<char>();
      v549 = std::string::append(&v1176, "FOVToBeamMix", 0xCuLL);
      long long v550 = *(_OWORD *)&v549->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v549->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v550;
      v549->__r_.__value_.__l.__size_ = 0;
      v549->__r_.__value_.__r.__words[2] = 0;
      v549->__r_.__value_.__r.__words[0] = 0;
      v551 = std::string::append(&v1169, " 0 0 0) (", 9uLL);
      long long v552 = *(_OWORD *)&v551->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v551->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v552;
      v551->__r_.__value_.__l.__size_ = 0;
      v551->__r_.__value_.__r.__words[2] = 0;
      v551->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v553 = &v1177;
      }
      else {
        v553 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v554 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v554 = v1177.__r_.__value_.__l.__size_;
      }
      v555 = std::string::append(&v1170, (const std::string::value_type *)v553, v554);
      long long v556 = *(_OWORD *)&v555->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v555->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v556;
      v555->__r_.__value_.__l.__size_ = 0;
      v555->__r_.__value_.__r.__words[2] = 0;
      v555->__r_.__value_.__r.__words[0] = 0;
      v557 = std::string::append(&v1171, "BeamMixOverrideSwitch 1 0 0) true\n", 0x22uLL);
      long long v558 = *(_OWORD *)&v557->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v557->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v558;
      v557->__r_.__value_.__l.__size_ = 0;
      v557->__r_.__value_.__r.__words[2] = 0;
      v557->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v559 = &v1172;
      }
      else {
        v559 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v560 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v560 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v559, v560);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      std::operator+<char>();
      v561 = std::string::append(&v1168, "BeamMixOverrideSwitch 0 0 0) (", 0x1EuLL);
      long long v562 = *(_OWORD *)&v561->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v561->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v562;
      v561->__r_.__value_.__l.__size_ = 0;
      v561->__r_.__value_.__r.__words[2] = 0;
      v561->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v563 = &v1177;
      }
      else {
        v563 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v564 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v564 = v1177.__r_.__value_.__l.__size_;
      }
      v565 = std::string::append(&v1176, (const std::string::value_type *)v563, v564);
      long long v566 = *(_OWORD *)&v565->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v565->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v566;
      v565->__r_.__value_.__l.__size_ = 0;
      v565->__r_.__value_.__r.__words[2] = 0;
      v565->__r_.__value_.__r.__words[0] = 0;
      v567 = std::string::append(&v1169, "VsSpatialMix ", 0xDuLL);
      long long v568 = *(_OWORD *)&v567->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v567->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v568;
      v567->__r_.__value_.__l.__size_ = 0;
      v567->__r_.__value_.__r.__words[2] = 0;
      v567->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1167, 0);
      if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v569 = &v1167;
      }
      else {
        v569 = (std::string *)v1167.__r_.__value_.__r.__words[0];
      }
      if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v570 = HIBYTE(v1167.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v570 = v1167.__r_.__value_.__l.__size_;
      }
      v571 = std::string::append(&v1170, (const std::string::value_type *)v569, v570);
      long long v572 = *(_OWORD *)&v571->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v571->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v572;
      v571->__r_.__value_.__l.__size_ = 0;
      v571->__r_.__value_.__r.__words[2] = 0;
      v571->__r_.__value_.__r.__words[0] = 0;
      v573 = std::string::append(&v1171, " 0 0) true\n", 0xBuLL);
      long long v574 = *(_OWORD *)&v573->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v573->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v574;
      v573->__r_.__value_.__l.__size_ = 0;
      v573->__r_.__value_.__r.__words[2] = 0;
      v573->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v575 = &v1172;
      }
      else {
        v575 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v576 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v576 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v575, v576);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1176, 0);
      v577 = std::string::insert(&v1176, 0, "wireGraphParam ", 0xFuLL);
      long long v578 = *(_OWORD *)&v577->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v577->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v578;
      v577->__r_.__value_.__l.__size_ = 0;
      v577->__r_.__value_.__r.__words[2] = 0;
      v577->__r_.__value_.__r.__words[0] = 0;
      v579 = std::string::append(&v1169, " (", 2uLL);
      long long v580 = *(_OWORD *)&v579->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v579->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v580;
      v579->__r_.__value_.__l.__size_ = 0;
      v579->__r_.__value_.__r.__words[2] = 0;
      v579->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v581 = &v1177;
      }
      else {
        v581 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v582 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v582 = v1177.__r_.__value_.__l.__size_;
      }
      v583 = std::string::append(&v1170, (const std::string::value_type *)v581, v582);
      long long v584 = *(_OWORD *)&v583->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v583->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v584;
      v583->__r_.__value_.__l.__size_ = 0;
      v583->__r_.__value_.__r.__words[2] = 0;
      v583->__r_.__value_.__r.__words[0] = 0;
      v585 = std::string::append(&v1171, "BeamGainCamDirSwitch 0 0 0)\n", 0x1CuLL);
      long long v586 = *(_OWORD *)&v585->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v585->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v586;
      v585->__r_.__value_.__l.__size_ = 0;
      v585->__r_.__value_.__r.__words[2] = 0;
      v585->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v587 = &v1172;
      }
      else {
        v587 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v588 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v588 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v587, v588);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1176, 0x32u);
      v589 = std::string::insert(&v1176, 0, "wireGraphParam ", 0xFuLL);
      long long v590 = *(_OWORD *)&v589->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v589->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v590;
      v589->__r_.__value_.__l.__size_ = 0;
      v589->__r_.__value_.__r.__words[2] = 0;
      v589->__r_.__value_.__r.__words[0] = 0;
      v591 = std::string::append(&v1169, " (", 2uLL);
      long long v592 = *(_OWORD *)&v591->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v591->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v592;
      v591->__r_.__value_.__l.__size_ = 0;
      v591->__r_.__value_.__r.__words[2] = 0;
      v591->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v593 = &v1177;
      }
      else {
        v593 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v594 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v594 = v1177.__r_.__value_.__l.__size_;
      }
      v595 = std::string::append(&v1170, (const std::string::value_type *)v593, v594);
      long long v596 = *(_OWORD *)&v595->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v595->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v596;
      v595->__r_.__value_.__l.__size_ = 0;
      v595->__r_.__value_.__r.__words[2] = 0;
      v595->__r_.__value_.__r.__words[0] = 0;
      v597 = std::string::append(&v1171, "BeamGainCamDirSwitch 1 0 0)\n", 0x1CuLL);
      long long v598 = *(_OWORD *)&v597->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v597->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v598;
      v597->__r_.__value_.__l.__size_ = 0;
      v597->__r_.__value_.__r.__words[2] = 0;
      v597->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v599 = &v1172;
      }
      else {
        v599 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v600 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v600 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v599, v600);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      unsigned int v601 = 0;
      do
      {
        std::to_string(&v1167, v601 + 3);
        v602 = std::string::insert(&v1167, 0, "wireProperty (micSelectCoordinator ", 0x23uLL);
        long long v603 = *(_OWORD *)&v602->__r_.__value_.__l.__data_;
        v1168.__r_.__value_.__r.__words[2] = v602->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v603;
        v602->__r_.__value_.__l.__size_ = 0;
        v602->__r_.__value_.__r.__words[2] = 0;
        v602->__r_.__value_.__r.__words[0] = 0;
        v604 = std::string::append(&v1168, ") (", 3uLL);
        long long v605 = *(_OWORD *)&v604->__r_.__value_.__l.__data_;
        v1176.__r_.__value_.__r.__words[2] = v604->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v605;
        v604->__r_.__value_.__l.__size_ = 0;
        v604->__r_.__value_.__r.__words[2] = 0;
        v604->__r_.__value_.__r.__words[0] = 0;
        if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v606 = &v1177;
        }
        else {
          v606 = (std::string *)v1177.__r_.__value_.__r.__words[0];
        }
        if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v607 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v607 = v1177.__r_.__value_.__l.__size_;
        }
        v608 = std::string::append(&v1176, (const std::string::value_type *)v606, v607);
        long long v609 = *(_OWORD *)&v608->__r_.__value_.__l.__data_;
        v1169.__r_.__value_.__r.__words[2] = v608->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v609;
        v608->__r_.__value_.__l.__size_ = 0;
        v608->__r_.__value_.__r.__words[2] = 0;
        v608->__r_.__value_.__r.__words[0] = 0;
        v610 = std::string::append(&v1169, "Patcher ", 8uLL);
        long long v611 = *(_OWORD *)&v610->__r_.__value_.__l.__data_;
        v1170.__r_.__value_.__r.__words[2] = v610->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v611;
        v610->__r_.__value_.__l.__size_ = 0;
        v610->__r_.__value_.__r.__words[2] = 0;
        v610->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v1166, v601);
        if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v612 = &v1166;
        }
        else {
          v612 = (std::string *)v1166.__r_.__value_.__r.__words[0];
        }
        if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v613 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v613 = v1166.__r_.__value_.__l.__size_;
        }
        v614 = std::string::append(&v1170, (const std::string::value_type *)v612, v613);
        long long v615 = *(_OWORD *)&v614->__r_.__value_.__l.__data_;
        v1171.__r_.__value_.__r.__words[2] = v614->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v615;
        v614->__r_.__value_.__l.__size_ = 0;
        v614->__r_.__value_.__r.__words[2] = 0;
        v614->__r_.__value_.__r.__words[0] = 0;
        v616 = std::string::append(&v1171, ") true\n", 7uLL);
        long long v617 = *(_OWORD *)&v616->__r_.__value_.__l.__data_;
        v1172.__r_.__value_.__r.__words[2] = v616->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v617;
        v616->__r_.__value_.__l.__size_ = 0;
        v616->__r_.__value_.__r.__words[2] = 0;
        v616->__r_.__value_.__r.__words[0] = 0;
        if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v618 = &v1172;
        }
        else {
          v618 = (std::string *)v1172.__r_.__value_.__r.__words[0];
        }
        if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v619 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v619 = v1172.__r_.__value_.__l.__size_;
        }
        std::string::append(a1, (const std::string::value_type *)v618, v619);
        if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1171.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1166.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1170.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1169.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1176.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1168.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v1167.__r_.__value_.__l.__data_);
        }
        ++v601;
      }
      while (v18 != v601);
      std::to_string(&v1167, 3u);
      v620 = std::string::insert(&v1167, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
      long long v621 = *(_OWORD *)&v620->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v620->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v621;
      v620->__r_.__value_.__l.__size_ = 0;
      v620->__r_.__value_.__r.__words[2] = 0;
      v620->__r_.__value_.__r.__words[0] = 0;
      v622 = std::string::append(&v1168, " 0 0) (", 7uLL);
      long long v623 = *(_OWORD *)&v622->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v622->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v623;
      v622->__r_.__value_.__l.__size_ = 0;
      v622->__r_.__value_.__r.__words[2] = 0;
      v622->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v624 = &v1177;
      }
      else {
        v624 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v625 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v625 = v1177.__r_.__value_.__l.__size_;
      }
      v626 = std::string::append(&v1176, (const std::string::value_type *)v624, v625);
      long long v627 = *(_OWORD *)&v626->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v626->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v627;
      v626->__r_.__value_.__l.__size_ = 0;
      v626->__r_.__value_.__r.__words[2] = 0;
      v626->__r_.__value_.__r.__words[0] = 0;
      v628 = std::string::append(&v1169, " ", 1uLL);
      long long v629 = *(_OWORD *)&v628->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v628->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v629;
      v628->__r_.__value_.__l.__size_ = 0;
      v628->__r_.__value_.__r.__words[2] = 0;
      v628->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 4u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v630 = &v1166;
      }
      else {
        v630 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v631 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v631 = v1166.__r_.__value_.__l.__size_;
      }
      v632 = std::string::append(&v1170, (const std::string::value_type *)v630, v631);
      long long v633 = *(_OWORD *)&v632->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v632->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v633;
      v632->__r_.__value_.__l.__size_ = 0;
      v632->__r_.__value_.__r.__words[2] = 0;
      v632->__r_.__value_.__r.__words[0] = 0;
      v634 = std::string::append(&v1171, ") true\n", 7uLL);
      long long v635 = *(_OWORD *)&v634->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v634->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v635;
      v634->__r_.__value_.__l.__size_ = 0;
      v634->__r_.__value_.__r.__words[2] = 0;
      v634->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v636 = &v1172;
      }
      else {
        v636 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v637 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v637 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v636, v637);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, v18 + 2);
      v638 = std::string::insert(&v1167, 0, "wireParam (micSelectCoordinator ", 0x20uLL);
      long long v639 = *(_OWORD *)&v638->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v638->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v639;
      v638->__r_.__value_.__l.__size_ = 0;
      v638->__r_.__value_.__r.__words[2] = 0;
      v638->__r_.__value_.__r.__words[0] = 0;
      v640 = std::string::append(&v1168, " 0 0) (", 7uLL);
      long long v641 = *(_OWORD *)&v640->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v640->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v641;
      v640->__r_.__value_.__l.__size_ = 0;
      v640->__r_.__value_.__r.__words[2] = 0;
      v640->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v642 = &v1177;
      }
      else {
        v642 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v643 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v643 = v1177.__r_.__value_.__l.__size_;
      }
      v644 = std::string::append(&v1176, (const std::string::value_type *)v642, v643);
      long long v645 = *(_OWORD *)&v644->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v644->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v645;
      v644->__r_.__value_.__l.__size_ = 0;
      v644->__r_.__value_.__r.__words[2] = 0;
      v644->__r_.__value_.__r.__words[0] = 0;
      v646 = std::string::append(&v1169, " ", 1uLL);
      long long v647 = *(_OWORD *)&v646->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v646->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v647;
      v646->__r_.__value_.__l.__size_ = 0;
      v646->__r_.__value_.__r.__words[2] = 0;
      v646->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 5u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v648 = &v1166;
      }
      else {
        v648 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v649 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v649 = v1166.__r_.__value_.__l.__size_;
      }
      v650 = std::string::append(&v1170, (const std::string::value_type *)v648, v649);
      long long v651 = *(_OWORD *)&v650->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v650->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v651;
      v650->__r_.__value_.__l.__size_ = 0;
      v650->__r_.__value_.__r.__words[2] = 0;
      v650->__r_.__value_.__r.__words[0] = 0;
      v652 = std::string::append(&v1171, ") true\n", 7uLL);
      long long v653 = *(_OWORD *)&v652->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v652->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v653;
      v652->__r_.__value_.__l.__size_ = 0;
      v652->__r_.__value_.__r.__words[2] = 0;
      v652->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v654 = &v1172;
      }
      else {
        v654 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v655 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v655 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v654, v655);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x19u);
      v656 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v657 = *(_OWORD *)&v656->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v656->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v657;
      v656->__r_.__value_.__l.__size_ = 0;
      v656->__r_.__value_.__r.__words[2] = 0;
      v656->__r_.__value_.__r.__words[0] = 0;
      v658 = std::string::append(&v1168, " (", 2uLL);
      long long v659 = *(_OWORD *)&v658->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v658->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v659;
      v658->__r_.__value_.__l.__size_ = 0;
      v658->__r_.__value_.__r.__words[2] = 0;
      v658->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v660 = &v1177;
      }
      else {
        v660 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v661 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v661 = v1177.__r_.__value_.__l.__size_;
      }
      v662 = std::string::append(&v1176, (const std::string::value_type *)v660, v661);
      long long v663 = *(_OWORD *)&v662->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v662->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v663;
      v662->__r_.__value_.__l.__size_ = 0;
      v662->__r_.__value_.__r.__words[2] = 0;
      v662->__r_.__value_.__r.__words[0] = 0;
      v664 = std::string::append(&v1169, " ", 1uLL);
      long long v665 = *(_OWORD *)&v664->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v664->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v665;
      v664->__r_.__value_.__l.__size_ = 0;
      v664->__r_.__value_.__r.__words[2] = 0;
      v664->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Bu);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v666 = &v1166;
      }
      else {
        v666 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v667 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v667 = v1166.__r_.__value_.__l.__size_;
      }
      v668 = std::string::append(&v1170, (const std::string::value_type *)v666, v667);
      long long v669 = *(_OWORD *)&v668->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v668->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v669;
      v668->__r_.__value_.__l.__size_ = 0;
      v668->__r_.__value_.__r.__words[2] = 0;
      v668->__r_.__value_.__r.__words[0] = 0;
      v670 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v671 = *(_OWORD *)&v670->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v670->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v671;
      v670->__r_.__value_.__l.__size_ = 0;
      v670->__r_.__value_.__r.__words[2] = 0;
      v670->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v672 = &v1172;
      }
      else {
        v672 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v673 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v673 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v672, v673);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x18u);
      v674 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v675 = *(_OWORD *)&v674->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v674->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v675;
      v674->__r_.__value_.__l.__size_ = 0;
      v674->__r_.__value_.__r.__words[2] = 0;
      v674->__r_.__value_.__r.__words[0] = 0;
      v676 = std::string::append(&v1168, " (", 2uLL);
      long long v677 = *(_OWORD *)&v676->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v676->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v677;
      v676->__r_.__value_.__l.__size_ = 0;
      v676->__r_.__value_.__r.__words[2] = 0;
      v676->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v678 = &v1177;
      }
      else {
        v678 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v679 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v679 = v1177.__r_.__value_.__l.__size_;
      }
      v680 = std::string::append(&v1176, (const std::string::value_type *)v678, v679);
      long long v681 = *(_OWORD *)&v680->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v680->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v681;
      v680->__r_.__value_.__l.__size_ = 0;
      v680->__r_.__value_.__r.__words[2] = 0;
      v680->__r_.__value_.__r.__words[0] = 0;
      v682 = std::string::append(&v1169, " ", 1uLL);
      long long v683 = *(_OWORD *)&v682->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v682->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v683;
      v682->__r_.__value_.__l.__size_ = 0;
      v682->__r_.__value_.__r.__words[2] = 0;
      v682->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Au);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v684 = &v1166;
      }
      else {
        v684 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v685 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v685 = v1166.__r_.__value_.__l.__size_;
      }
      v686 = std::string::append(&v1170, (const std::string::value_type *)v684, v685);
      long long v687 = *(_OWORD *)&v686->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v686->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v687;
      v686->__r_.__value_.__l.__size_ = 0;
      v686->__r_.__value_.__r.__words[2] = 0;
      v686->__r_.__value_.__r.__words[0] = 0;
      v688 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v689 = *(_OWORD *)&v688->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v688->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v689;
      v688->__r_.__value_.__l.__size_ = 0;
      v688->__r_.__value_.__r.__words[2] = 0;
      v688->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v690 = &v1172;
      }
      else {
        v690 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v691 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v691 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v690, v691);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x17u);
      v692 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v693 = *(_OWORD *)&v692->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v692->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v693;
      v692->__r_.__value_.__l.__size_ = 0;
      v692->__r_.__value_.__r.__words[2] = 0;
      v692->__r_.__value_.__r.__words[0] = 0;
      v694 = std::string::append(&v1168, " (", 2uLL);
      long long v695 = *(_OWORD *)&v694->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v694->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v695;
      v694->__r_.__value_.__l.__size_ = 0;
      v694->__r_.__value_.__r.__words[2] = 0;
      v694->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v696 = &v1177;
      }
      else {
        v696 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v697 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v697 = v1177.__r_.__value_.__l.__size_;
      }
      v698 = std::string::append(&v1176, (const std::string::value_type *)v696, v697);
      long long v699 = *(_OWORD *)&v698->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v698->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v699;
      v698->__r_.__value_.__l.__size_ = 0;
      v698->__r_.__value_.__r.__words[2] = 0;
      v698->__r_.__value_.__r.__words[0] = 0;
      v700 = std::string::append(&v1169, " ", 1uLL);
      long long v701 = *(_OWORD *)&v700->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v700->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v701;
      v700->__r_.__value_.__l.__size_ = 0;
      v700->__r_.__value_.__r.__words[2] = 0;
      v700->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x19u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v702 = &v1166;
      }
      else {
        v702 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v703 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v703 = v1166.__r_.__value_.__l.__size_;
      }
      v704 = std::string::append(&v1170, (const std::string::value_type *)v702, v703);
      long long v705 = *(_OWORD *)&v704->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v704->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v705;
      v704->__r_.__value_.__l.__size_ = 0;
      v704->__r_.__value_.__r.__words[2] = 0;
      v704->__r_.__value_.__r.__words[0] = 0;
      v706 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v707 = *(_OWORD *)&v706->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v706->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v707;
      v706->__r_.__value_.__l.__size_ = 0;
      v706->__r_.__value_.__r.__words[2] = 0;
      v706->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v708 = &v1172;
      }
      else {
        v708 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v709 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v709 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v708, v709);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x16u);
      v710 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v711 = *(_OWORD *)&v710->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v710->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v711;
      v710->__r_.__value_.__l.__size_ = 0;
      v710->__r_.__value_.__r.__words[2] = 0;
      v710->__r_.__value_.__r.__words[0] = 0;
      v712 = std::string::append(&v1168, " (", 2uLL);
      long long v713 = *(_OWORD *)&v712->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v712->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v713;
      v712->__r_.__value_.__l.__size_ = 0;
      v712->__r_.__value_.__r.__words[2] = 0;
      v712->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v714 = &v1177;
      }
      else {
        v714 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v715 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v715 = v1177.__r_.__value_.__l.__size_;
      }
      v716 = std::string::append(&v1176, (const std::string::value_type *)v714, v715);
      long long v717 = *(_OWORD *)&v716->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v716->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v717;
      v716->__r_.__value_.__l.__size_ = 0;
      v716->__r_.__value_.__r.__words[2] = 0;
      v716->__r_.__value_.__r.__words[0] = 0;
      v718 = std::string::append(&v1169, " ", 1uLL);
      long long v719 = *(_OWORD *)&v718->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v718->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v719;
      v718->__r_.__value_.__l.__size_ = 0;
      v718->__r_.__value_.__r.__words[2] = 0;
      v718->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x17u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v720 = &v1166;
      }
      else {
        v720 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v721 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v721 = v1166.__r_.__value_.__l.__size_;
      }
      v722 = std::string::append(&v1170, (const std::string::value_type *)v720, v721);
      long long v723 = *(_OWORD *)&v722->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v722->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v723;
      v722->__r_.__value_.__l.__size_ = 0;
      v722->__r_.__value_.__r.__words[2] = 0;
      v722->__r_.__value_.__r.__words[0] = 0;
      v724 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v725 = *(_OWORD *)&v724->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v724->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v725;
      v724->__r_.__value_.__l.__size_ = 0;
      v724->__r_.__value_.__r.__words[2] = 0;
      v724->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v726 = &v1172;
      }
      else {
        v726 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v727 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v727 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v726, v727);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x21u);
      v728 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v729 = *(_OWORD *)&v728->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v728->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v729;
      v728->__r_.__value_.__l.__size_ = 0;
      v728->__r_.__value_.__r.__words[2] = 0;
      v728->__r_.__value_.__r.__words[0] = 0;
      v730 = std::string::append(&v1168, " (", 2uLL);
      long long v731 = *(_OWORD *)&v730->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v730->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v731;
      v730->__r_.__value_.__l.__size_ = 0;
      v730->__r_.__value_.__r.__words[2] = 0;
      v730->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v732 = &v1177;
      }
      else {
        v732 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v733 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v733 = v1177.__r_.__value_.__l.__size_;
      }
      v734 = std::string::append(&v1176, (const std::string::value_type *)v732, v733);
      long long v735 = *(_OWORD *)&v734->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v734->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v735;
      v734->__r_.__value_.__l.__size_ = 0;
      v734->__r_.__value_.__r.__words[2] = 0;
      v734->__r_.__value_.__r.__words[0] = 0;
      v736 = std::string::append(&v1169, " ", 1uLL);
      long long v737 = *(_OWORD *)&v736->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v736->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v737;
      v736->__r_.__value_.__l.__size_ = 0;
      v736->__r_.__value_.__r.__words[2] = 0;
      v736->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Du);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v738 = &v1166;
      }
      else {
        v738 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v739 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v739 = v1166.__r_.__value_.__l.__size_;
      }
      v740 = std::string::append(&v1170, (const std::string::value_type *)v738, v739);
      long long v741 = *(_OWORD *)&v740->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v740->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v741;
      v740->__r_.__value_.__l.__size_ = 0;
      v740->__r_.__value_.__r.__words[2] = 0;
      v740->__r_.__value_.__r.__words[0] = 0;
      v742 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v743 = *(_OWORD *)&v742->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v742->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v743;
      v742->__r_.__value_.__l.__size_ = 0;
      v742->__r_.__value_.__r.__words[2] = 0;
      v742->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v744 = &v1172;
      }
      else {
        v744 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v745 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v745 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v744, v745);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x22u);
      v746 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v747 = *(_OWORD *)&v746->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v746->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v747;
      v746->__r_.__value_.__l.__size_ = 0;
      v746->__r_.__value_.__r.__words[2] = 0;
      v746->__r_.__value_.__r.__words[0] = 0;
      v748 = std::string::append(&v1168, " (", 2uLL);
      long long v749 = *(_OWORD *)&v748->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v748->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v749;
      v748->__r_.__value_.__l.__size_ = 0;
      v748->__r_.__value_.__r.__words[2] = 0;
      v748->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v750 = &v1177;
      }
      else {
        v750 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v751 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v751 = v1177.__r_.__value_.__l.__size_;
      }
      v752 = std::string::append(&v1176, (const std::string::value_type *)v750, v751);
      long long v753 = *(_OWORD *)&v752->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v752->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v753;
      v752->__r_.__value_.__l.__size_ = 0;
      v752->__r_.__value_.__r.__words[2] = 0;
      v752->__r_.__value_.__r.__words[0] = 0;
      v754 = std::string::append(&v1169, " ", 1uLL);
      long long v755 = *(_OWORD *)&v754->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v754->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v755;
      v754->__r_.__value_.__l.__size_ = 0;
      v754->__r_.__value_.__r.__words[2] = 0;
      v754->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Eu);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v756 = &v1166;
      }
      else {
        v756 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v757 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v757 = v1166.__r_.__value_.__l.__size_;
      }
      v758 = std::string::append(&v1170, (const std::string::value_type *)v756, v757);
      long long v759 = *(_OWORD *)&v758->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v758->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v759;
      v758->__r_.__value_.__l.__size_ = 0;
      v758->__r_.__value_.__r.__words[2] = 0;
      v758->__r_.__value_.__r.__words[0] = 0;
      v760 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v761 = *(_OWORD *)&v760->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v760->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v761;
      v760->__r_.__value_.__l.__size_ = 0;
      v760->__r_.__value_.__r.__words[2] = 0;
      v760->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v762 = &v1172;
      }
      else {
        v762 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v763 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v763 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v762, v763);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x23u);
      v764 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v765 = *(_OWORD *)&v764->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v764->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v765;
      v764->__r_.__value_.__l.__size_ = 0;
      v764->__r_.__value_.__r.__words[2] = 0;
      v764->__r_.__value_.__r.__words[0] = 0;
      v766 = std::string::append(&v1168, " (", 2uLL);
      long long v767 = *(_OWORD *)&v766->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v766->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v767;
      v766->__r_.__value_.__l.__size_ = 0;
      v766->__r_.__value_.__r.__words[2] = 0;
      v766->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v768 = &v1177;
      }
      else {
        v768 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v769 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v769 = v1177.__r_.__value_.__l.__size_;
      }
      v770 = std::string::append(&v1176, (const std::string::value_type *)v768, v769);
      long long v771 = *(_OWORD *)&v770->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v770->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v771;
      v770->__r_.__value_.__l.__size_ = 0;
      v770->__r_.__value_.__r.__words[2] = 0;
      v770->__r_.__value_.__r.__words[0] = 0;
      v772 = std::string::append(&v1169, " ", 1uLL);
      long long v773 = *(_OWORD *)&v772->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v772->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v773;
      v772->__r_.__value_.__l.__size_ = 0;
      v772->__r_.__value_.__r.__words[2] = 0;
      v772->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x1Fu);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v774 = &v1166;
      }
      else {
        v774 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v775 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v775 = v1166.__r_.__value_.__l.__size_;
      }
      v776 = std::string::append(&v1170, (const std::string::value_type *)v774, v775);
      long long v777 = *(_OWORD *)&v776->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v776->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v777;
      v776->__r_.__value_.__l.__size_ = 0;
      v776->__r_.__value_.__r.__words[2] = 0;
      v776->__r_.__value_.__r.__words[0] = 0;
      v778 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v779 = *(_OWORD *)&v778->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v778->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v779;
      v778->__r_.__value_.__l.__size_ = 0;
      v778->__r_.__value_.__r.__words[2] = 0;
      v778->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v780 = &v1172;
      }
      else {
        v780 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v781 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v781 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v780, v781);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x24u);
      v782 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v783 = *(_OWORD *)&v782->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v782->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v783;
      v782->__r_.__value_.__l.__size_ = 0;
      v782->__r_.__value_.__r.__words[2] = 0;
      v782->__r_.__value_.__r.__words[0] = 0;
      v784 = std::string::append(&v1168, " (", 2uLL);
      long long v785 = *(_OWORD *)&v784->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v784->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v785;
      v784->__r_.__value_.__l.__size_ = 0;
      v784->__r_.__value_.__r.__words[2] = 0;
      v784->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v786 = &v1177;
      }
      else {
        v786 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v787 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v787 = v1177.__r_.__value_.__l.__size_;
      }
      v788 = std::string::append(&v1176, (const std::string::value_type *)v786, v787);
      long long v789 = *(_OWORD *)&v788->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v788->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v789;
      v788->__r_.__value_.__l.__size_ = 0;
      v788->__r_.__value_.__r.__words[2] = 0;
      v788->__r_.__value_.__r.__words[0] = 0;
      v790 = std::string::append(&v1169, " ", 1uLL);
      long long v791 = *(_OWORD *)&v790->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v790->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v791;
      v790->__r_.__value_.__l.__size_ = 0;
      v790->__r_.__value_.__r.__words[2] = 0;
      v790->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x20u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v792 = &v1166;
      }
      else {
        v792 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v793 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v793 = v1166.__r_.__value_.__l.__size_;
      }
      v794 = std::string::append(&v1170, (const std::string::value_type *)v792, v793);
      long long v795 = *(_OWORD *)&v794->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v794->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v795;
      v794->__r_.__value_.__l.__size_ = 0;
      v794->__r_.__value_.__r.__words[2] = 0;
      v794->__r_.__value_.__r.__words[0] = 0;
      v796 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v797 = *(_OWORD *)&v796->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v796->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v797;
      v796->__r_.__value_.__l.__size_ = 0;
      v796->__r_.__value_.__r.__words[2] = 0;
      v796->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v798 = &v1172;
      }
      else {
        v798 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v799 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v799 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v798, v799);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x25u);
      v800 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v801 = *(_OWORD *)&v800->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v800->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v801;
      v800->__r_.__value_.__l.__size_ = 0;
      v800->__r_.__value_.__r.__words[2] = 0;
      v800->__r_.__value_.__r.__words[0] = 0;
      v802 = std::string::append(&v1168, " (", 2uLL);
      long long v803 = *(_OWORD *)&v802->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v802->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v803;
      v802->__r_.__value_.__l.__size_ = 0;
      v802->__r_.__value_.__r.__words[2] = 0;
      v802->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v804 = &v1177;
      }
      else {
        v804 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v805 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v805 = v1177.__r_.__value_.__l.__size_;
      }
      v806 = std::string::append(&v1176, (const std::string::value_type *)v804, v805);
      long long v807 = *(_OWORD *)&v806->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v806->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v807;
      v806->__r_.__value_.__l.__size_ = 0;
      v806->__r_.__value_.__r.__words[2] = 0;
      v806->__r_.__value_.__r.__words[0] = 0;
      v808 = std::string::append(&v1169, " ", 1uLL);
      long long v809 = *(_OWORD *)&v808->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v808->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v809;
      v808->__r_.__value_.__l.__size_ = 0;
      v808->__r_.__value_.__r.__words[2] = 0;
      v808->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x21u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v810 = &v1166;
      }
      else {
        v810 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v811 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v811 = v1166.__r_.__value_.__l.__size_;
      }
      v812 = std::string::append(&v1170, (const std::string::value_type *)v810, v811);
      long long v813 = *(_OWORD *)&v812->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v812->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v813;
      v812->__r_.__value_.__l.__size_ = 0;
      v812->__r_.__value_.__r.__words[2] = 0;
      v812->__r_.__value_.__r.__words[0] = 0;
      v814 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v815 = *(_OWORD *)&v814->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v814->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v815;
      v814->__r_.__value_.__l.__size_ = 0;
      v814->__r_.__value_.__r.__words[2] = 0;
      v814->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v816 = &v1172;
      }
      else {
        v816 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v817 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v817 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v816, v817);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x26u);
      v818 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v819 = *(_OWORD *)&v818->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v818->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v819;
      v818->__r_.__value_.__l.__size_ = 0;
      v818->__r_.__value_.__r.__words[2] = 0;
      v818->__r_.__value_.__r.__words[0] = 0;
      v820 = std::string::append(&v1168, " (", 2uLL);
      long long v821 = *(_OWORD *)&v820->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v820->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v821;
      v820->__r_.__value_.__l.__size_ = 0;
      v820->__r_.__value_.__r.__words[2] = 0;
      v820->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v822 = &v1177;
      }
      else {
        v822 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v823 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v823 = v1177.__r_.__value_.__l.__size_;
      }
      v824 = std::string::append(&v1176, (const std::string::value_type *)v822, v823);
      long long v825 = *(_OWORD *)&v824->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v824->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v825;
      v824->__r_.__value_.__l.__size_ = 0;
      v824->__r_.__value_.__r.__words[2] = 0;
      v824->__r_.__value_.__r.__words[0] = 0;
      v826 = std::string::append(&v1169, " ", 1uLL);
      long long v827 = *(_OWORD *)&v826->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v826->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v827;
      v826->__r_.__value_.__l.__size_ = 0;
      v826->__r_.__value_.__r.__words[2] = 0;
      v826->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x22u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v828 = &v1166;
      }
      else {
        v828 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v829 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v829 = v1166.__r_.__value_.__l.__size_;
      }
      v830 = std::string::append(&v1170, (const std::string::value_type *)v828, v829);
      long long v831 = *(_OWORD *)&v830->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v830->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v831;
      v830->__r_.__value_.__l.__size_ = 0;
      v830->__r_.__value_.__r.__words[2] = 0;
      v830->__r_.__value_.__r.__words[0] = 0;
      v832 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v833 = *(_OWORD *)&v832->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v832->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v833;
      v832->__r_.__value_.__l.__size_ = 0;
      v832->__r_.__value_.__r.__words[2] = 0;
      v832->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v834 = &v1172;
      }
      else {
        v834 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v835 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v835 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v834, v835);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x27u);
      v836 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v837 = *(_OWORD *)&v836->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v836->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v837;
      v836->__r_.__value_.__l.__size_ = 0;
      v836->__r_.__value_.__r.__words[2] = 0;
      v836->__r_.__value_.__r.__words[0] = 0;
      v838 = std::string::append(&v1168, " (", 2uLL);
      long long v839 = *(_OWORD *)&v838->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v838->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v839;
      v838->__r_.__value_.__l.__size_ = 0;
      v838->__r_.__value_.__r.__words[2] = 0;
      v838->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v840 = &v1177;
      }
      else {
        v840 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v841 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v841 = v1177.__r_.__value_.__l.__size_;
      }
      v842 = std::string::append(&v1176, (const std::string::value_type *)v840, v841);
      long long v843 = *(_OWORD *)&v842->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v842->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v843;
      v842->__r_.__value_.__l.__size_ = 0;
      v842->__r_.__value_.__r.__words[2] = 0;
      v842->__r_.__value_.__r.__words[0] = 0;
      v844 = std::string::append(&v1169, " ", 1uLL);
      long long v845 = *(_OWORD *)&v844->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v844->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v845;
      v844->__r_.__value_.__l.__size_ = 0;
      v844->__r_.__value_.__r.__words[2] = 0;
      v844->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x23u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v846 = &v1166;
      }
      else {
        v846 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v847 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v847 = v1166.__r_.__value_.__l.__size_;
      }
      v848 = std::string::append(&v1170, (const std::string::value_type *)v846, v847);
      long long v849 = *(_OWORD *)&v848->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v848->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v849;
      v848->__r_.__value_.__l.__size_ = 0;
      v848->__r_.__value_.__r.__words[2] = 0;
      v848->__r_.__value_.__r.__words[0] = 0;
      v850 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v851 = *(_OWORD *)&v850->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v850->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v851;
      v850->__r_.__value_.__l.__size_ = 0;
      v850->__r_.__value_.__r.__words[2] = 0;
      v850->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v852 = &v1172;
      }
      else {
        v852 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v853 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v853 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v852, v853);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x28u);
      v854 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v855 = *(_OWORD *)&v854->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v854->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v855;
      v854->__r_.__value_.__l.__size_ = 0;
      v854->__r_.__value_.__r.__words[2] = 0;
      v854->__r_.__value_.__r.__words[0] = 0;
      v856 = std::string::append(&v1168, " (", 2uLL);
      long long v857 = *(_OWORD *)&v856->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v856->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v857;
      v856->__r_.__value_.__l.__size_ = 0;
      v856->__r_.__value_.__r.__words[2] = 0;
      v856->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v858 = &v1177;
      }
      else {
        v858 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v859 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v859 = v1177.__r_.__value_.__l.__size_;
      }
      v860 = std::string::append(&v1176, (const std::string::value_type *)v858, v859);
      long long v861 = *(_OWORD *)&v860->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v860->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v861;
      v860->__r_.__value_.__l.__size_ = 0;
      v860->__r_.__value_.__r.__words[2] = 0;
      v860->__r_.__value_.__r.__words[0] = 0;
      v862 = std::string::append(&v1169, " ", 1uLL);
      long long v863 = *(_OWORD *)&v862->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v862->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v863;
      v862->__r_.__value_.__l.__size_ = 0;
      v862->__r_.__value_.__r.__words[2] = 0;
      v862->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x24u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v864 = &v1166;
      }
      else {
        v864 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v865 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v865 = v1166.__r_.__value_.__l.__size_;
      }
      v866 = std::string::append(&v1170, (const std::string::value_type *)v864, v865);
      long long v867 = *(_OWORD *)&v866->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v866->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v867;
      v866->__r_.__value_.__l.__size_ = 0;
      v866->__r_.__value_.__r.__words[2] = 0;
      v866->__r_.__value_.__r.__words[0] = 0;
      v868 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v869 = *(_OWORD *)&v868->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v868->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v869;
      v868->__r_.__value_.__l.__size_ = 0;
      v868->__r_.__value_.__r.__words[2] = 0;
      v868->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v870 = &v1172;
      }
      else {
        v870 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v871 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v871 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v870, v871);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x29u);
      v872 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v873 = *(_OWORD *)&v872->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v872->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v873;
      v872->__r_.__value_.__l.__size_ = 0;
      v872->__r_.__value_.__r.__words[2] = 0;
      v872->__r_.__value_.__r.__words[0] = 0;
      v874 = std::string::append(&v1168, " (", 2uLL);
      long long v875 = *(_OWORD *)&v874->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v874->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v875;
      v874->__r_.__value_.__l.__size_ = 0;
      v874->__r_.__value_.__r.__words[2] = 0;
      v874->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v876 = &v1177;
      }
      else {
        v876 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v877 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v877 = v1177.__r_.__value_.__l.__size_;
      }
      v878 = std::string::append(&v1176, (const std::string::value_type *)v876, v877);
      long long v879 = *(_OWORD *)&v878->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v878->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v879;
      v878->__r_.__value_.__l.__size_ = 0;
      v878->__r_.__value_.__r.__words[2] = 0;
      v878->__r_.__value_.__r.__words[0] = 0;
      v880 = std::string::append(&v1169, " ", 1uLL);
      long long v881 = *(_OWORD *)&v880->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v880->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v881;
      v880->__r_.__value_.__l.__size_ = 0;
      v880->__r_.__value_.__r.__words[2] = 0;
      v880->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x25u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v882 = &v1166;
      }
      else {
        v882 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v883 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v883 = v1166.__r_.__value_.__l.__size_;
      }
      v884 = std::string::append(&v1170, (const std::string::value_type *)v882, v883);
      long long v885 = *(_OWORD *)&v884->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v884->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v885;
      v884->__r_.__value_.__l.__size_ = 0;
      v884->__r_.__value_.__r.__words[2] = 0;
      v884->__r_.__value_.__r.__words[0] = 0;
      v886 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v887 = *(_OWORD *)&v886->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v886->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v887;
      v886->__r_.__value_.__l.__size_ = 0;
      v886->__r_.__value_.__r.__words[2] = 0;
      v886->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v888 = &v1172;
      }
      else {
        v888 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v889 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v889 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v888, v889);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x2Au);
      v890 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v891 = *(_OWORD *)&v890->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v890->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v891;
      v890->__r_.__value_.__l.__size_ = 0;
      v890->__r_.__value_.__r.__words[2] = 0;
      v890->__r_.__value_.__r.__words[0] = 0;
      v892 = std::string::append(&v1168, " (", 2uLL);
      long long v893 = *(_OWORD *)&v892->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v892->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v893;
      v892->__r_.__value_.__l.__size_ = 0;
      v892->__r_.__value_.__r.__words[2] = 0;
      v892->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v894 = &v1177;
      }
      else {
        v894 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v895 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v895 = v1177.__r_.__value_.__l.__size_;
      }
      v896 = std::string::append(&v1176, (const std::string::value_type *)v894, v895);
      long long v897 = *(_OWORD *)&v896->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v896->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v897;
      v896->__r_.__value_.__l.__size_ = 0;
      v896->__r_.__value_.__r.__words[2] = 0;
      v896->__r_.__value_.__r.__words[0] = 0;
      v898 = std::string::append(&v1169, " ", 1uLL);
      long long v899 = *(_OWORD *)&v898->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v898->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v899;
      v898->__r_.__value_.__l.__size_ = 0;
      v898->__r_.__value_.__r.__words[2] = 0;
      v898->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x26u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v900 = &v1166;
      }
      else {
        v900 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v901 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v901 = v1166.__r_.__value_.__l.__size_;
      }
      v902 = std::string::append(&v1170, (const std::string::value_type *)v900, v901);
      long long v903 = *(_OWORD *)&v902->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v902->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v903;
      v902->__r_.__value_.__l.__size_ = 0;
      v902->__r_.__value_.__r.__words[2] = 0;
      v902->__r_.__value_.__r.__words[0] = 0;
      v904 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v905 = *(_OWORD *)&v904->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v904->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v905;
      v904->__r_.__value_.__l.__size_ = 0;
      v904->__r_.__value_.__r.__words[2] = 0;
      v904->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v906 = &v1172;
      }
      else {
        v906 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v907 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v907 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v906, v907);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x2Bu);
      v908 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v909 = *(_OWORD *)&v908->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v908->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v909;
      v908->__r_.__value_.__l.__size_ = 0;
      v908->__r_.__value_.__r.__words[2] = 0;
      v908->__r_.__value_.__r.__words[0] = 0;
      v910 = std::string::append(&v1168, " (", 2uLL);
      long long v911 = *(_OWORD *)&v910->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v910->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v911;
      v910->__r_.__value_.__l.__size_ = 0;
      v910->__r_.__value_.__r.__words[2] = 0;
      v910->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v912 = &v1177;
      }
      else {
        v912 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v913 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v913 = v1177.__r_.__value_.__l.__size_;
      }
      v914 = std::string::append(&v1176, (const std::string::value_type *)v912, v913);
      long long v915 = *(_OWORD *)&v914->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v914->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v915;
      v914->__r_.__value_.__l.__size_ = 0;
      v914->__r_.__value_.__r.__words[2] = 0;
      v914->__r_.__value_.__r.__words[0] = 0;
      v916 = std::string::append(&v1169, " ", 1uLL);
      long long v917 = *(_OWORD *)&v916->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v916->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v917;
      v916->__r_.__value_.__l.__size_ = 0;
      v916->__r_.__value_.__r.__words[2] = 0;
      v916->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x27u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v918 = &v1166;
      }
      else {
        v918 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v919 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v919 = v1166.__r_.__value_.__l.__size_;
      }
      v920 = std::string::append(&v1170, (const std::string::value_type *)v918, v919);
      long long v921 = *(_OWORD *)&v920->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v920->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v921;
      v920->__r_.__value_.__l.__size_ = 0;
      v920->__r_.__value_.__r.__words[2] = 0;
      v920->__r_.__value_.__r.__words[0] = 0;
      v922 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v923 = *(_OWORD *)&v922->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v922->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v923;
      v922->__r_.__value_.__l.__size_ = 0;
      v922->__r_.__value_.__r.__words[2] = 0;
      v922->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v924 = &v1172;
      }
      else {
        v924 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v925 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v925 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v924, v925);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x2Cu);
      v926 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v927 = *(_OWORD *)&v926->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v926->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v927;
      v926->__r_.__value_.__l.__size_ = 0;
      v926->__r_.__value_.__r.__words[2] = 0;
      v926->__r_.__value_.__r.__words[0] = 0;
      v928 = std::string::append(&v1168, " (", 2uLL);
      long long v929 = *(_OWORD *)&v928->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v928->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v929;
      v928->__r_.__value_.__l.__size_ = 0;
      v928->__r_.__value_.__r.__words[2] = 0;
      v928->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v930 = &v1177;
      }
      else {
        v930 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v931 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v931 = v1177.__r_.__value_.__l.__size_;
      }
      v932 = std::string::append(&v1176, (const std::string::value_type *)v930, v931);
      long long v933 = *(_OWORD *)&v932->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v932->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v933;
      v932->__r_.__value_.__l.__size_ = 0;
      v932->__r_.__value_.__r.__words[2] = 0;
      v932->__r_.__value_.__r.__words[0] = 0;
      v934 = std::string::append(&v1169, " ", 1uLL);
      long long v935 = *(_OWORD *)&v934->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v934->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v935;
      v934->__r_.__value_.__l.__size_ = 0;
      v934->__r_.__value_.__r.__words[2] = 0;
      v934->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x28u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v936 = &v1166;
      }
      else {
        v936 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v937 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v937 = v1166.__r_.__value_.__l.__size_;
      }
      v938 = std::string::append(&v1170, (const std::string::value_type *)v936, v937);
      long long v939 = *(_OWORD *)&v938->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v938->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v939;
      v938->__r_.__value_.__l.__size_ = 0;
      v938->__r_.__value_.__r.__words[2] = 0;
      v938->__r_.__value_.__r.__words[0] = 0;
      v940 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v941 = *(_OWORD *)&v940->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v940->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v941;
      v940->__r_.__value_.__l.__size_ = 0;
      v940->__r_.__value_.__r.__words[2] = 0;
      v940->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v942 = &v1172;
      }
      else {
        v942 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v943 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v943 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v942, v943);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0x2Du);
      v944 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v945 = *(_OWORD *)&v944->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v944->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v945;
      v944->__r_.__value_.__l.__size_ = 0;
      v944->__r_.__value_.__r.__words[2] = 0;
      v944->__r_.__value_.__r.__words[0] = 0;
      v946 = std::string::append(&v1168, " (", 2uLL);
      long long v947 = *(_OWORD *)&v946->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v946->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v947;
      v946->__r_.__value_.__l.__size_ = 0;
      v946->__r_.__value_.__r.__words[2] = 0;
      v946->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v948 = &v1177;
      }
      else {
        v948 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v949 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v949 = v1177.__r_.__value_.__l.__size_;
      }
      v950 = std::string::append(&v1176, (const std::string::value_type *)v948, v949);
      long long v951 = *(_OWORD *)&v950->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v950->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v951;
      v950->__r_.__value_.__l.__size_ = 0;
      v950->__r_.__value_.__r.__words[2] = 0;
      v950->__r_.__value_.__r.__words[0] = 0;
      v952 = std::string::append(&v1169, " ", 1uLL);
      long long v953 = *(_OWORD *)&v952->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v952->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v953;
      v952->__r_.__value_.__l.__size_ = 0;
      v952->__r_.__value_.__r.__words[2] = 0;
      v952->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0x29u);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v954 = &v1166;
      }
      else {
        v954 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v955 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v955 = v1166.__r_.__value_.__l.__size_;
      }
      v956 = std::string::append(&v1170, (const std::string::value_type *)v954, v955);
      long long v957 = *(_OWORD *)&v956->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v956->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v957;
      v956->__r_.__value_.__l.__size_ = 0;
      v956->__r_.__value_.__r.__words[2] = 0;
      v956->__r_.__value_.__r.__words[0] = 0;
      v958 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v959 = *(_OWORD *)&v958->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v958->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v959;
      v958->__r_.__value_.__l.__size_ = 0;
      v958->__r_.__value_.__r.__words[2] = 0;
      v958->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v960 = &v1172;
      }
      else {
        v960 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v961 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v961 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v960, v961);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      std::to_string(&v1167, 0);
      v962 = std::string::insert(&v1167, 0, "wireGraphParam ", 0xFuLL);
      long long v963 = *(_OWORD *)&v962->__r_.__value_.__l.__data_;
      v1168.__r_.__value_.__r.__words[2] = v962->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v963;
      v962->__r_.__value_.__l.__size_ = 0;
      v962->__r_.__value_.__r.__words[2] = 0;
      v962->__r_.__value_.__r.__words[0] = 0;
      v964 = std::string::append(&v1168, " (", 2uLL);
      long long v965 = *(_OWORD *)&v964->__r_.__value_.__l.__data_;
      v1176.__r_.__value_.__r.__words[2] = v964->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v965;
      v964->__r_.__value_.__l.__size_ = 0;
      v964->__r_.__value_.__r.__words[2] = 0;
      v964->__r_.__value_.__r.__words[0] = 0;
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v966 = &v1177;
      }
      else {
        v966 = (std::string *)v1177.__r_.__value_.__r.__words[0];
      }
      if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v967 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v967 = v1177.__r_.__value_.__l.__size_;
      }
      v968 = std::string::append(&v1176, (const std::string::value_type *)v966, v967);
      long long v969 = *(_OWORD *)&v968->__r_.__value_.__l.__data_;
      v1169.__r_.__value_.__r.__words[2] = v968->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v969;
      v968->__r_.__value_.__l.__size_ = 0;
      v968->__r_.__value_.__r.__words[2] = 0;
      v968->__r_.__value_.__r.__words[0] = 0;
      v970 = std::string::append(&v1169, "VsSpatialMix ", 0xDuLL);
      long long v971 = *(_OWORD *)&v970->__r_.__value_.__l.__data_;
      v1170.__r_.__value_.__r.__words[2] = v970->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v971;
      v970->__r_.__value_.__l.__size_ = 0;
      v970->__r_.__value_.__r.__words[2] = 0;
      v970->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v1166, 0);
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v972 = &v1166;
      }
      else {
        v972 = (std::string *)v1166.__r_.__value_.__r.__words[0];
      }
      if ((v1166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v973 = HIBYTE(v1166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v973 = v1166.__r_.__value_.__l.__size_;
      }
      v974 = std::string::append(&v1170, (const std::string::value_type *)v972, v973);
      long long v975 = *(_OWORD *)&v974->__r_.__value_.__l.__data_;
      v1171.__r_.__value_.__r.__words[2] = v974->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v975;
      v974->__r_.__value_.__l.__size_ = 0;
      v974->__r_.__value_.__r.__words[2] = 0;
      v974->__r_.__value_.__r.__words[0] = 0;
      v976 = std::string::append(&v1171, " 0 0)\n", 6uLL);
      long long v977 = *(_OWORD *)&v976->__r_.__value_.__l.__data_;
      v1172.__r_.__value_.__r.__words[2] = v976->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v977;
      v976->__r_.__value_.__l.__size_ = 0;
      v976->__r_.__value_.__r.__words[2] = 0;
      v976->__r_.__value_.__r.__words[0] = 0;
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v978 = &v1172;
      }
      else {
        v978 = (std::string *)v1172.__r_.__value_.__r.__words[0];
      }
      if ((v1172.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v979 = HIBYTE(v1172.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v979 = v1172.__r_.__value_.__l.__size_;
      }
      std::string::append(&__x, (const std::string::value_type *)v978, v979);
      if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1172.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1176.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1167.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v1177.__r_.__value_.__l.__data_);
      }
      char v533 = 1;
      uint64_t v534 = 1;
    }
    while ((v1161 & 1) == 0);
    std::to_string(&v1169, 0x1Du);
    v980 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    long long v981 = *(_OWORD *)&v980->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v980->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v981;
    v980->__r_.__value_.__l.__size_ = 0;
    v980->__r_.__value_.__r.__words[2] = 0;
    v980->__r_.__value_.__r.__words[0] = 0;
    v982 = std::string::append(&v1170, " (", 2uLL);
    long long v983 = *(_OWORD *)&v982->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v982->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v983;
    v982->__r_.__value_.__l.__size_ = 0;
    v982->__r_.__value_.__r.__words[2] = 0;
    v982->__r_.__value_.__r.__words[0] = 0;
    v984 = std::string::append(&v1171, "focused", 7uLL);
    long long v985 = *(_OWORD *)&v984->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v984->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v985;
    v984->__r_.__value_.__l.__size_ = 0;
    v984->__r_.__value_.__r.__words[2] = 0;
    v984->__r_.__value_.__r.__words[0] = 0;
    v986 = std::string::append(&v1172, "BeamMixOverrideSwitch 2 0 0)\n", 0x1DuLL);
    long long v987 = *(_OWORD *)&v986->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v986->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v987;
    v986->__r_.__value_.__l.__size_ = 0;
    v986->__r_.__value_.__r.__words[2] = 0;
    v986->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v988 = &v1177;
    }
    else {
      v988 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v989 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v989 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v988, v989);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1169, 0x1Cu);
    v990 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    long long v991 = *(_OWORD *)&v990->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v990->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v991;
    v990->__r_.__value_.__l.__size_ = 0;
    v990->__r_.__value_.__r.__words[2] = 0;
    v990->__r_.__value_.__r.__words[0] = 0;
    v992 = std::string::append(&v1170, " (", 2uLL);
    long long v993 = *(_OWORD *)&v992->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v992->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v993;
    v992->__r_.__value_.__l.__size_ = 0;
    v992->__r_.__value_.__r.__words[2] = 0;
    v992->__r_.__value_.__r.__words[0] = 0;
    v994 = std::string::append(&v1171, "wide", 4uLL);
    long long v995 = *(_OWORD *)&v994->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v994->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v995;
    v994->__r_.__value_.__l.__size_ = 0;
    v994->__r_.__value_.__r.__words[2] = 0;
    v994->__r_.__value_.__r.__words[0] = 0;
    v996 = std::string::append(&v1172, "BeamMixOverrideSwitch 2 0 0)\n", 0x1DuLL);
    long long v997 = *(_OWORD *)&v996->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v996->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v997;
    v996->__r_.__value_.__l.__size_ = 0;
    v996->__r_.__value_.__r.__words[2] = 0;
    v996->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v998 = &v1177;
    }
    else {
      v998 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v999 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v999 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v998, v999);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1169, 0x31u);
    v1000 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    long long v1001 = *(_OWORD *)&v1000->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1000->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1001;
    v1000->__r_.__value_.__l.__size_ = 0;
    v1000->__r_.__value_.__r.__words[2] = 0;
    v1000->__r_.__value_.__r.__words[0] = 0;
    v1002 = std::string::append(&v1170, " (", 2uLL);
    long long v1003 = *(_OWORD *)&v1002->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1002->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1003;
    v1002->__r_.__value_.__l.__size_ = 0;
    v1002->__r_.__value_.__r.__words[2] = 0;
    v1002->__r_.__value_.__r.__words[0] = 0;
    v1004 = std::string::append(&v1171, "focused", 7uLL);
    long long v1005 = *(_OWORD *)&v1004->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1004->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1005;
    v1004->__r_.__value_.__l.__size_ = 0;
    v1004->__r_.__value_.__r.__words[2] = 0;
    v1004->__r_.__value_.__r.__words[0] = 0;
    v1006 = std::string::append(&v1172, "BeamMixOverrideSwitch 0 0 0)\n", 0x1DuLL);
    long long v1007 = *(_OWORD *)&v1006->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1006->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1007;
    v1006->__r_.__value_.__l.__size_ = 0;
    v1006->__r_.__value_.__r.__words[2] = 0;
    v1006->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1008 = &v1177;
    }
    else {
      v1008 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1009 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1009 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1008, v1009);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1169, 0x31u);
    v1010 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    long long v1011 = *(_OWORD *)&v1010->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1010->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1011;
    v1010->__r_.__value_.__l.__size_ = 0;
    v1010->__r_.__value_.__r.__words[2] = 0;
    v1010->__r_.__value_.__r.__words[0] = 0;
    v1012 = std::string::append(&v1170, " (", 2uLL);
    long long v1013 = *(_OWORD *)&v1012->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1012->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1013;
    v1012->__r_.__value_.__l.__size_ = 0;
    v1012->__r_.__value_.__r.__words[2] = 0;
    v1012->__r_.__value_.__r.__words[0] = 0;
    v1014 = std::string::append(&v1171, "wide", 4uLL);
    long long v1015 = *(_OWORD *)&v1014->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1014->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1015;
    v1014->__r_.__value_.__l.__size_ = 0;
    v1014->__r_.__value_.__r.__words[2] = 0;
    v1014->__r_.__value_.__r.__words[0] = 0;
    v1016 = std::string::append(&v1172, "BeamMixOverrideSwitch 0 0 0)\n", 0x1DuLL);
    long long v1017 = *(_OWORD *)&v1016->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1016->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1017;
    v1016->__r_.__value_.__l.__size_ = 0;
    v1016->__r_.__value_.__r.__words[2] = 0;
    v1016->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1018 = &v1177;
    }
    else {
      v1018 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1019 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1019 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1018, v1019);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1171, 0);
    v1020 = std::string::insert(&v1171, 0, "wireGraphParam ", 0xFuLL);
    long long v1021 = *(_OWORD *)&v1020->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1020->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1021;
    v1020->__r_.__value_.__l.__size_ = 0;
    v1020->__r_.__value_.__r.__words[2] = 0;
    v1020->__r_.__value_.__r.__words[0] = 0;
    v1022 = std::string::append(&v1172, " (defaultBeamGainCamDirSwitch 0 0 0)\n", 0x25uLL);
    long long v1023 = *(_OWORD *)&v1022->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1022->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1023;
    v1022->__r_.__value_.__l.__size_ = 0;
    v1022->__r_.__value_.__r.__words[2] = 0;
    v1022->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1024 = &v1177;
    }
    else {
      v1024 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1025 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1025 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1024, v1025);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1171, 0x32u);
    v1026 = std::string::insert(&v1171, 0, "wireGraphParam ", 0xFuLL);
    long long v1027 = *(_OWORD *)&v1026->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1026->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1027;
    v1026->__r_.__value_.__l.__size_ = 0;
    v1026->__r_.__value_.__r.__words[2] = 0;
    v1026->__r_.__value_.__r.__words[0] = 0;
    v1028 = std::string::append(&v1172, " (defaultBeamGainCamDirSwitch 1 0 0)\n", 0x25uLL);
    long long v1029 = *(_OWORD *)&v1028->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1028->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1029;
    v1028->__r_.__value_.__l.__size_ = 0;
    v1028->__r_.__value_.__r.__words[2] = 0;
    v1028->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1030 = &v1177;
    }
    else {
      v1030 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1031 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1031 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1030, v1031);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1169, 0x35u);
    v1032 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    long long v1033 = *(_OWORD *)&v1032->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1032->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1033;
    v1032->__r_.__value_.__l.__size_ = 0;
    v1032->__r_.__value_.__r.__words[2] = 0;
    v1032->__r_.__value_.__r.__words[0] = 0;
    v1034 = std::string::append(&v1170, " (", 2uLL);
    long long v1035 = *(_OWORD *)&v1034->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1034->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1035;
    v1034->__r_.__value_.__l.__size_ = 0;
    v1034->__r_.__value_.__r.__words[2] = 0;
    v1034->__r_.__value_.__r.__words[0] = 0;
    v1036 = std::string::append(&v1171, "wide", 4uLL);
    long long v1037 = *(_OWORD *)&v1036->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1036->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1037;
    v1036->__r_.__value_.__l.__size_ = 0;
    v1036->__r_.__value_.__r.__words[2] = 0;
    v1036->__r_.__value_.__r.__words[0] = 0;
    v1038 = std::string::append(&v1172, "BeamGainCamDirSwitch 2 0 0)\n", 0x1CuLL);
    long long v1039 = *(_OWORD *)&v1038->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1038->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1039;
    v1038->__r_.__value_.__l.__size_ = 0;
    v1038->__r_.__value_.__r.__words[2] = 0;
    v1038->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1040 = &v1177;
    }
    else {
      v1040 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1041 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1041 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1040, v1041);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1169, 0x34u);
    v1042 = std::string::insert(&v1169, 0, "wireGraphParam ", 0xFuLL);
    long long v1043 = *(_OWORD *)&v1042->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1042->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1043;
    v1042->__r_.__value_.__l.__size_ = 0;
    v1042->__r_.__value_.__r.__words[2] = 0;
    v1042->__r_.__value_.__r.__words[0] = 0;
    v1044 = std::string::append(&v1170, " (", 2uLL);
    long long v1045 = *(_OWORD *)&v1044->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1044->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1045;
    v1044->__r_.__value_.__l.__size_ = 0;
    v1044->__r_.__value_.__r.__words[2] = 0;
    v1044->__r_.__value_.__r.__words[0] = 0;
    v1046 = std::string::append(&v1171, "focused", 7uLL);
    long long v1047 = *(_OWORD *)&v1046->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1046->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1047;
    v1046->__r_.__value_.__l.__size_ = 0;
    v1046->__r_.__value_.__r.__words[2] = 0;
    v1046->__r_.__value_.__r.__words[0] = 0;
    v1048 = std::string::append(&v1172, "BeamGainCamDirSwitch 2 0 0)\n", 0x1CuLL);
    long long v1049 = *(_OWORD *)&v1048->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1048->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1049;
    v1048->__r_.__value_.__l.__size_ = 0;
    v1048->__r_.__value_.__r.__words[2] = 0;
    v1048->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1050 = &v1177;
    }
    else {
      v1050 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1051 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1051 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1050, v1051);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    std::to_string(&v1171, 0x33u);
    v1052 = std::string::insert(&v1171, 0, "wireGraphParam ", 0xFuLL);
    long long v1053 = *(_OWORD *)&v1052->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1052->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1053;
    v1052->__r_.__value_.__l.__size_ = 0;
    v1052->__r_.__value_.__r.__words[2] = 0;
    v1052->__r_.__value_.__r.__words[0] = 0;
    v1054 = std::string::append(&v1172, " (defaultBeamGainCamDirSwitch 2 0 0)\n", 0x25uLL);
    long long v1055 = *(_OWORD *)&v1054->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1054->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1055;
    v1054->__r_.__value_.__l.__size_ = 0;
    v1054->__r_.__value_.__r.__words[2] = 0;
    v1054->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1056 = &v1177;
    }
    else {
      v1056 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1057 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1057 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1056, v1057);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v1168, "wireParam (");
    v1058 = std::string::append(&v1168, "focused", 7uLL);
    long long v1059 = *(_OWORD *)&v1058->__r_.__value_.__l.__data_;
    v1176.__r_.__value_.__r.__words[2] = v1058->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v1059;
    v1058->__r_.__value_.__l.__size_ = 0;
    v1058->__r_.__value_.__r.__words[2] = 0;
    v1058->__r_.__value_.__r.__words[0] = 0;
    v1060 = std::string::append(&v1176, "BeamGainCamDirSwitch 0 0 0) (", 0x1DuLL);
    long long v1061 = *(_OWORD *)&v1060->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1060->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1061;
    v1060->__r_.__value_.__l.__size_ = 0;
    v1060->__r_.__value_.__r.__words[2] = 0;
    v1060->__r_.__value_.__r.__words[0] = 0;
    v1062 = std::string::append(&v1169, "focused", 7uLL);
    long long v1063 = *(_OWORD *)&v1062->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1062->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1063;
    v1062->__r_.__value_.__l.__size_ = 0;
    v1062->__r_.__value_.__r.__words[2] = 0;
    v1062->__r_.__value_.__r.__words[0] = 0;
    v1064 = std::string::append(&v1170, "VsSpatialMix ", 0xDuLL);
    long long v1065 = *(_OWORD *)&v1064->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1064->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1065;
    v1064->__r_.__value_.__l.__size_ = 0;
    v1064->__r_.__value_.__r.__words[2] = 0;
    v1064->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1167, 2u);
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1066 = &v1167;
    }
    else {
      v1066 = (std::string *)v1167.__r_.__value_.__r.__words[0];
    }
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1067 = HIBYTE(v1167.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1067 = v1167.__r_.__value_.__l.__size_;
    }
    v1068 = std::string::append(&v1171, (const std::string::value_type *)v1066, v1067);
    long long v1069 = *(_OWORD *)&v1068->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1068->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1069;
    v1068->__r_.__value_.__l.__size_ = 0;
    v1068->__r_.__value_.__r.__words[2] = 0;
    v1068->__r_.__value_.__r.__words[0] = 0;
    v1070 = std::string::append(&v1172, " 0 0) true\n", 0xBuLL);
    long long v1071 = *(_OWORD *)&v1070->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1070->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1071;
    v1070->__r_.__value_.__l.__size_ = 0;
    v1070->__r_.__value_.__r.__words[2] = 0;
    v1070->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1072 = &v1177;
    }
    else {
      v1072 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1073 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1073 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1072, v1073);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1167.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1176.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1168.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v1168, "wireParam (");
    v1074 = std::string::append(&v1168, "wide", 4uLL);
    long long v1075 = *(_OWORD *)&v1074->__r_.__value_.__l.__data_;
    v1176.__r_.__value_.__r.__words[2] = v1074->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v1075;
    v1074->__r_.__value_.__l.__size_ = 0;
    v1074->__r_.__value_.__r.__words[2] = 0;
    v1074->__r_.__value_.__r.__words[0] = 0;
    v1076 = std::string::append(&v1176, "BeamGainCamDirSwitch 0 0 0) (", 0x1DuLL);
    long long v1077 = *(_OWORD *)&v1076->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1076->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1077;
    v1076->__r_.__value_.__l.__size_ = 0;
    v1076->__r_.__value_.__r.__words[2] = 0;
    v1076->__r_.__value_.__r.__words[0] = 0;
    v1078 = std::string::append(&v1169, "wide", 4uLL);
    long long v1079 = *(_OWORD *)&v1078->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1078->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1079;
    v1078->__r_.__value_.__l.__size_ = 0;
    v1078->__r_.__value_.__r.__words[2] = 0;
    v1078->__r_.__value_.__r.__words[0] = 0;
    v1080 = std::string::append(&v1170, "VsSpatialMix ", 0xDuLL);
    long long v1081 = *(_OWORD *)&v1080->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1080->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1081;
    v1080->__r_.__value_.__l.__size_ = 0;
    v1080->__r_.__value_.__r.__words[2] = 0;
    v1080->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1167, 1u);
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1082 = &v1167;
    }
    else {
      v1082 = (std::string *)v1167.__r_.__value_.__r.__words[0];
    }
    if ((v1167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1083 = HIBYTE(v1167.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1083 = v1167.__r_.__value_.__l.__size_;
    }
    v1084 = std::string::append(&v1171, (const std::string::value_type *)v1082, v1083);
    long long v1085 = *(_OWORD *)&v1084->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1084->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1085;
    v1084->__r_.__value_.__l.__size_ = 0;
    v1084->__r_.__value_.__r.__words[2] = 0;
    v1084->__r_.__value_.__r.__words[0] = 0;
    v1086 = std::string::append(&v1172, " 0 0) true\n", 0xBuLL);
    long long v1087 = *(_OWORD *)&v1086->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1086->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1087;
    v1086->__r_.__value_.__l.__size_ = 0;
    v1086->__r_.__value_.__r.__words[2] = 0;
    v1086->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1088 = &v1177;
    }
    else {
      v1088 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1089 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1089 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1088, v1089);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1167.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1176.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1168.__r_.__value_.__l.__data_);
    }
    v1090 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v1176, "wireParam (");
    v1091 = std::string::append(v1090, "defaultBeamGainCamDirSwitch 0 0 0) (", 0x24uLL);
    long long v1092 = *(_OWORD *)&v1091->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1091->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1092;
    v1091->__r_.__value_.__l.__size_ = 0;
    v1091->__r_.__value_.__r.__words[2] = 0;
    v1091->__r_.__value_.__r.__words[0] = 0;
    v1093 = std::string::append(&v1169, "wide", 4uLL);
    long long v1094 = *(_OWORD *)&v1093->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1093->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1094;
    v1093->__r_.__value_.__l.__size_ = 0;
    v1093->__r_.__value_.__r.__words[2] = 0;
    v1093->__r_.__value_.__r.__words[0] = 0;
    v1095 = std::string::append(&v1170, "VsSpatialMix ", 0xDuLL);
    long long v1096 = *(_OWORD *)&v1095->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1095->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1096;
    v1095->__r_.__value_.__l.__size_ = 0;
    v1095->__r_.__value_.__r.__words[2] = 0;
    v1095->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v1168, 2u);
    if ((v1168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1097 = &v1168;
    }
    else {
      v1097 = (std::string *)v1168.__r_.__value_.__r.__words[0];
    }
    if ((v1168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1098 = HIBYTE(v1168.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1098 = v1168.__r_.__value_.__l.__size_;
    }
    v1099 = std::string::append(&v1171, (const std::string::value_type *)v1097, v1098);
    long long v1100 = *(_OWORD *)&v1099->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1099->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1100;
    v1099->__r_.__value_.__l.__size_ = 0;
    v1099->__r_.__value_.__r.__words[2] = 0;
    v1099->__r_.__value_.__r.__words[0] = 0;
    v1101 = std::string::append(&v1172, " 0 0) true\n", 0xBuLL);
    long long v1102 = *(_OWORD *)&v1101->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1102;
    v1101->__r_.__value_.__l.__size_ = 0;
    v1101->__r_.__value_.__r.__words[2] = 0;
    v1101->__r_.__value_.__r.__words[0] = 0;
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v1103 = &v1177;
    }
    else {
      v1103 = (std::string *)v1177.__r_.__value_.__r.__words[0];
    }
    if ((v1177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v1104 = HIBYTE(v1177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v1104 = v1177.__r_.__value_.__l.__size_;
    }
    std::string::append(&__x, (const std::string::value_type *)v1103, v1104);
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1168.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1176.__r_.__value_.__l.__data_);
    }
    if (!AppBooleanValue) {
      goto LABEL_1031;
    }
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      id v1105 = *(id *)SCLogScope(void)::scope;
      if (!v1105) {
        goto LABEL_2160;
      }
    }
    else
    {
      id v1105 = (id)MEMORY[0x1E4F14500];
      id v1126 = MEMORY[0x1E4F14500];
    }
    v1127 = v1105;
    if (os_log_type_enabled(v1127, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v1177.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v1177.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SpatialCapture.mm";
      WORD2(v1177.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v1177.__r_.__value_.__r.__words[1] + 6) = 488;
      _os_log_impl(&dword_1BB0CE000, v1127, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling recording", (uint8_t *)&v1177, 0x12u);
    }

LABEL_2160:
    std::operator+<char>();
    v1128 = std::string::append(&v1166, "ref-in-sc.wav\"     refIn \n            record \"", 0x2EuLL);
    long long v1129 = *(_OWORD *)&v1128->__r_.__value_.__l.__data_;
    v1167.__r_.__value_.__r.__words[2] = v1128->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1167.__r_.__value_.__l.__data_ = v1129;
    v1128->__r_.__value_.__l.__size_ = 0;
    v1128->__r_.__value_.__r.__words[2] = 0;
    v1128->__r_.__value_.__r.__words[0] = 0;
    int v1130 = *(char *)(a5 + 23);
    if (v1130 >= 0) {
      v1131 = (const std::string::value_type *)a5;
    }
    else {
      v1131 = *(const std::string::value_type **)a5;
    }
    if (v1130 >= 0) {
      std::string::size_type v1132 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v1132 = *(void *)(a5 + 8);
    }
    v1133 = std::string::append(&v1167, v1131, v1132);
    long long v1134 = *(_OWORD *)&v1133->__r_.__value_.__l.__data_;
    v1168.__r_.__value_.__r.__words[2] = v1133->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1168.__r_.__value_.__l.__data_ = v1134;
    v1133->__r_.__value_.__l.__size_ = 0;
    v1133->__r_.__value_.__r.__words[2] = 0;
    v1133->__r_.__value_.__r.__words[0] = 0;
    v1135 = std::string::append(&v1168, "linFullSignal-sc.wav\"     (linFullSignal 2) \n            record \"", 0x41uLL);
    long long v1136 = *(_OWORD *)&v1135->__r_.__value_.__l.__data_;
    v1176.__r_.__value_.__r.__words[2] = v1135->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1176.__r_.__value_.__l.__data_ = v1136;
    v1135->__r_.__value_.__l.__size_ = 0;
    v1135->__r_.__value_.__r.__words[2] = 0;
    v1135->__r_.__value_.__r.__words[0] = 0;
    int v1137 = *(char *)(a5 + 23);
    if (v1137 >= 0) {
      v1138 = (const std::string::value_type *)a5;
    }
    else {
      v1138 = *(const std::string::value_type **)a5;
    }
    if (v1137 >= 0) {
      std::string::size_type v1139 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v1139 = *(void *)(a5 + 8);
    }
    v1140 = std::string::append(&v1176, v1138, v1139);
    long long v1141 = *(_OWORD *)&v1140->__r_.__value_.__l.__data_;
    v1169.__r_.__value_.__r.__words[2] = v1140->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1169.__r_.__value_.__l.__data_ = v1141;
    v1140->__r_.__value_.__l.__size_ = 0;
    v1140->__r_.__value_.__r.__words[2] = 0;
    v1140->__r_.__value_.__r.__words[0] = 0;
    v1142 = std::string::append(&v1169, "linPatcher-sc.wav\"     linPatcher \n            record \"", 0x37uLL);
    long long v1143 = *(_OWORD *)&v1142->__r_.__value_.__l.__data_;
    v1170.__r_.__value_.__r.__words[2] = v1142->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1170.__r_.__value_.__l.__data_ = v1143;
    v1142->__r_.__value_.__l.__size_ = 0;
    v1142->__r_.__value_.__r.__words[2] = 0;
    v1142->__r_.__value_.__r.__words[0] = 0;
    int v1144 = *(char *)(a5 + 23);
    if (v1144 >= 0) {
      v1145 = (const std::string::value_type *)a5;
    }
    else {
      v1145 = *(const std::string::value_type **)a5;
    }
    if (v1144 >= 0) {
      std::string::size_type v1146 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v1146 = *(void *)(a5 + 8);
    }
    v1147 = std::string::append(&v1170, v1145, v1146);
    long long v1148 = *(_OWORD *)&v1147->__r_.__value_.__l.__data_;
    v1171.__r_.__value_.__r.__words[2] = v1147->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1171.__r_.__value_.__l.__data_ = v1148;
    v1147->__r_.__value_.__l.__size_ = 0;
    v1147->__r_.__value_.__r.__words[2] = 0;
    v1147->__r_.__value_.__r.__words[0] = 0;
    v1149 = std::string::append(&v1171, "focusedPatcher-sc.wav\"     focusedPatcher \n            record \"", 0x3FuLL);
    long long v1150 = *(_OWORD *)&v1149->__r_.__value_.__l.__data_;
    v1172.__r_.__value_.__r.__words[2] = v1149->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1172.__r_.__value_.__l.__data_ = v1150;
    v1149->__r_.__value_.__l.__size_ = 0;
    v1149->__r_.__value_.__r.__words[2] = 0;
    v1149->__r_.__value_.__r.__words[0] = 0;
    int v1151 = *(char *)(a5 + 23);
    if (v1151 >= 0) {
      v1152 = (const std::string::value_type *)a5;
    }
    else {
      v1152 = *(const std::string::value_type **)a5;
    }
    if (v1151 >= 0) {
      std::string::size_type v1153 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v1153 = *(void *)(a5 + 8);
    }
    v1154 = std::string::append(&v1172, v1152, v1153);
    long long v1155 = *(_OWORD *)&v1154->__r_.__value_.__l.__data_;
    v1177.__r_.__value_.__r.__words[2] = v1154->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v1177.__r_.__value_.__l.__data_ = v1155;
    v1154->__r_.__value_.__l.__size_ = 0;
    v1154->__r_.__value_.__r.__words[2] = 0;
    v1154->__r_.__value_.__r.__words[0] = 0;
    v1156 = std::string::append(&v1177, "focused-sc.wav\"     (focused 2) \n            ", 0x2DuLL);
    v1157 = (char *)v1156->__r_.__value_.__r.__words[0];
    v1175.__r_.__value_.__r.__words[0] = v1156->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v1175.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v1156->__r_.__value_.__r.__words[1] + 7);
    char v1158 = HIBYTE(v1156->__r_.__value_.__r.__words[2]);
    v1156->__r_.__value_.__l.__size_ = 0;
    v1156->__r_.__value_.__r.__words[2] = 0;
    v1156->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1174.__end_cap_.__value_) < 0) {
      operator delete(v1174.__begin_);
    }
    v1174.__begin_ = v1157;
    v1174.__end_ = (std::vector<char>::pointer)v1175.__r_.__value_.__r.__words[0];
    *(std::vector<char>::pointer *)((char *)&v1174.__end_ + 7) = *(std::vector<char>::pointer *)((char *)v1175.__r_.__value_.__r.__words
                                                                                               + 7);
    HIBYTE(v1174.__end_cap_.__value_) = v1158;
    if (SHIBYTE(v1177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1169.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1176.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1176.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1168.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1168.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1167.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1167.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v1166.__r_.__value_.__r.__words[2]) < 0)
    {
      v1125 = (void *)v1166.__r_.__value_.__r.__words[0];
      goto LABEL_2204;
    }
    goto LABEL_1031;
  }
LABEL_1022:
  if (SCLogScope(void)::once != -1) {
    dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
  }
  if (SCLogScope(void)::scope)
  {
    id v518 = *(id *)SCLogScope(void)::scope;
    if (!v518) {
      goto LABEL_1031;
    }
  }
  else
  {
    id v518 = (id)MEMORY[0x1E4F14500];
    id v519 = MEMORY[0x1E4F14500];
  }
  v520 = v518;
  if (os_log_type_enabled(v520, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v1177.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v1177.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SpatialCapture.mm";
    WORD2(v1177.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v1177.__r_.__value_.__r.__words[1] + 6) = 503;
    _os_log_impl(&dword_1BB0CE000, v520, OS_LOG_TYPE_ERROR, "%25s:%-5d Plist has a bad render mode selectino", (uint8_t *)&v1177, 0x12u);
  }

LABEL_1031:
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v521 = &__x;
  }
  else {
    v521 = (std::string *)__x.__r_.__value_.__r.__words[0];
  }
  if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v522 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v522 = __x.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v521, v522);
  if (SHIBYTE(v1174.__end_cap_.__value_) >= 0) {
    v523 = (const std::string::value_type *)&v1174;
  }
  else {
    v523 = v1174.__begin_;
  }
  if (SHIBYTE(v1174.__end_cap_.__value_) >= 0) {
    std::vector<char>::pointer value_high = (std::vector<char>::pointer)HIBYTE(v1174.__end_cap_.__value_);
  }
  else {
    std::vector<char>::pointer value_high = v1174.__end_;
  }
  std::string::append(a1, v523, (std::string::size_type)value_high);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1174.__end_cap_.__value_) < 0) {
    operator delete(v1174.__begin_);
  }
}

void sub_1BB5F14D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (*(char *)(v70 - 121) < 0) {
    operator delete(*(void **)(v70 - 144));
  }
  if (a70 < 0) {
    operator delete(__p);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (*(char *)(v70 - 153) < 0) {
    operator delete(*(void **)(v70 - 176));
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v70 - 233) < 0) {
    operator delete(*(void **)(v70 - 256));
  }
  if (*(char *)(a14 + 23) < 0) {
    operator delete(*(void **)a14);
  }
  if (*(char *)(v70 - 201) < 0) {
    operator delete(*(void **)(v70 - 224));
  }

  _Unwind_Resume(a1);
}

void ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (!(a3 | a2)) {
    operator new();
  }
  __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke", "SpatialCapture.mm", 524, "numInputs == 0 && numOutputs == 0 && \"Bad number of ins or outs\"");
}

void sub_1BB5F36CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,DSPGraph::Box *a29,void *a30)
{
  int v31 = *a22;
  if (*a22)
  {
    *((void *)a29 + 102) = v31;
    operator delete(v31);
  }
  *(void *)a29 = a11;
  STACK[0x250] = a12;
  std::vector<SCMicSelectionInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  DSPGraph::Box::~Box(a29);
  MEMORY[0x1C185D370](a29, 0x10F3C40FFAE72A1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void DSPGraph::NewBoxRegistry::~NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  *(void *)this = MEMORY[0x1E4F4EAF8] + 16;
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (void **)((char *)this + 88);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v2);
}

void std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    std::vector<std::string>::pointer v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0) {
          operator delete(*(v4 - 6));
        }
        v4 -= 6;
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v2 + 5);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  std::vector<std::string>::pointer v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100]((void *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  std::vector<std::string>::pointer v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14BA110;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C185D370);
}

uint64_t std::__function::__func<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterTransformBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  return a1;
}

void ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke_5(uint64_t a1, int a2, int a3)
{
  if (!(a3 | a2)) {
    operator new();
  }
  __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke_5", "SpatialCapture.mm", 540, "numInputs == 0 && numOutputs == 0 && \"Bad number of ins or outs\"");
}

void sub_1BB5F3D34(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 98);
  *((void *)v1 + 98) = 0;
  if (v3) {
    std::default_delete<std::vector<AUSM::ExclusionZone>>::operator()[abi:ne180100](v3);
  }
  DSPGraph::Box::~Box(v1);
  MEMORY[0x1C185D370](v1, 0x10F3C40132EE293);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14BA0C8;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C185D370);
}

uint64_t std::__function::__func<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ParameterSwitchBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  return a1;
}

void ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke_4(uint64_t a1, int a2, int a3)
{
  if (!(a3 | a2)) {
    operator new();
  }
  __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke_4", "SpatialCapture.mm", 536, "numInputs == 0 && numOutputs == 0 && \"Bad number of ins or outs\"");
}

void sub_1BB5F3F1C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  size_t v5 = *v3;
  if (*v3)
  {
    *((void *)v1 + 98) = v5;
    operator delete(v5);
  }
  DSPGraph::Box::~Box(v1);
  MEMORY[0x1C185D370](v1, 0x10F3C4040D472F1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14BA080;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C185D370);
}

uint64_t std::__function::__func<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCTwoInputMixer *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  return a1;
}

void ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke_3(uint64_t a1, int a2, int a3)
{
  if (a2 == 2 && a3 == 1) {
    operator new();
  }
  __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke_3", "SpatialCapture.mm", 532, "numInputs == 2 && numOutputs == 1 && \"Bad number of ins or outs\"");
}

void sub_1BB5F40F8(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F3C4003047F56);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14BA038;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C185D370);
}

uint64_t std::__function::__func<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<ChannelSelectorBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  return a1;
}

void ___Z28GetSpatialCaptureBoxRegistryPK14__CFDictionaryj_block_invoke_2(uint64_t a1, int a2, int a3)
{
  if (a2 == 1 && a3 == 1) {
    operator new();
  }
  __assert_rtn("GetSpatialCaptureBoxRegistry_block_invoke_2", "SpatialCapture.mm", 528, "numInputs == 1 && numOutputs == 1 && \"Bad number of ins or outs\"");
}

void sub_1BB5F42AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F3C406C69A187);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

void *std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14B9FF0;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  return 0;
}

void std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C185D370);
}

uint64_t std::__function::__func<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int),std::allocator<SCMicSelectionBox *({block_pointer} {__strong})(unsigned int,unsigned int)>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func(uint64_t a1)
{
  return a1;
}

uint64_t ClampOrientation(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v2 = *(id *)SCLogScope(void)::scope;
      if (!v2) {
        return 1;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v3 = MEMORY[0x1E4F14500];
    }
    uint64_t v4 = 1;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315906;
      int v9 = "SpatialCapture.mm";
      __int16 v10 = 1024;
      int v11 = 584;
      __int16 v12 = 1024;
      int v13 = 0;
      __int16 v14 = 1024;
      int v15 = 1;
      size_t v5 = "%25s:%-5d Orientation %u is smaller than the minimum allowed value (%u)";
LABEL_19:
      _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v8, 0x1Eu);
    }
LABEL_20:

    return v4;
  }
  uint64_t v1 = a1;
  if (a1 >= 5)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v2 = *(id *)SCLogScope(void)::scope;
      if (!v2) {
        return 4;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    uint64_t v4 = 4;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315906;
      int v9 = "SpatialCapture.mm";
      __int16 v10 = 1024;
      int v11 = 587;
      __int16 v12 = 1024;
      int v13 = v1;
      __int16 v14 = 1024;
      int v15 = 4;
      size_t v5 = "%25s:%-5d Orientation %u is larger than the maximum allowed value (%u)";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  return v1;
}

uint64_t ClampCameraDirection(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1 >= 2)
  {
    if (SCLogScope(void)::once != -1) {
      dispatch_once(&SCLogScope(void)::once, &__block_literal_global_19000);
    }
    if (SCLogScope(void)::scope)
    {
      uint64_t v2 = *(id *)SCLogScope(void)::scope;
      if (!v2) {
        return 1;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315906;
      id v6 = "SpatialCapture.mm";
      __int16 v7 = 1024;
      int v8 = 596;
      __int16 v9 = 1024;
      int v10 = v1;
      __int16 v11 = 1024;
      int v12 = 1;
      _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d Camera direction %u is larger than the maximum allowed value (%u)", (uint8_t *)&v5, 0x1Eu);
    }

    return 1;
  }
  return v1;
}

void dft_v4::paramInit_v4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v15 = malloc_type_malloc(0xB0uLL, 0x2C8E6D5CuLL);
  if (!v15)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float v27 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v16 = (float *)v15;
  v15[10] = 0u;
  *(_OWORD *)((char *)v15 + 148) = 0u;
  *(_OWORD *)((char *)v15 + ++*((_DWORD *)this + 132) = 0u;
  *(_OWORD *)((char *)v15 + 116) = 0u;
  *(_OWORD *)((char *)v15 + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)v15 + 84) = 0u;
  *(_OWORD *)((char *)v15 + 68) = 0u;
  *(_OWORD *)((char *)v15 + 52) = 0u;
  *(_OWORD *)((char *)v15 + 36) = 0u;
  *(_OWORD *)((char *)v15 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)v15 + 4) = 0u;
  *a1 = v15;
  int v17 = 2 * a3;
  int v18 = a3 + 1;
  *(_DWORD *)int v15 = 2 * a3;
  if (a8) {
    int v19 = a4 + 1;
  }
  else {
    int v19 = a4;
  }
  *((_DWORD *)v15 + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = a4;
  *((_DWORD *)v15 + 12) = v19;
  *((_DWORD *)v15 + 4) = a3;
  *((_DWORD *)v15 + 7) = a3;
  float v20 = (float)a3;
  *((float *)v15 + 8) = 1.0 / (float)a3;
  *((_DWORD *)v15 + 16) = a5;
  if (a6 && (int v21 = (int)(float)((float)a5 / 5000.0), *((_DWORD *)v15 + 17) = v21, v21 > 0))
  {
    if (v21 < 7) {
      goto LABEL_11;
    }
    int v22 = 6;
  }
  else
  {
    int v22 = 1;
  }
  *((_DWORD *)v15 + 17) = v22;
LABEL_11:
  float v23 = 0.0;
  float v24 = v20 / (float)a5;
  if (a5) {
    float v23 = v24 * 1000.0;
  }
  else {
    float v24 = 0.0;
  }
  *((float *)v15 + 5) = v24;
  *((float *)v15 + 6) = v23;
  *((_DWORD *)v15 + 9) = a3 >> 1;
  *((_DWORD *)v15 + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v18;
  *((_DWORD *)v15 + 13) = a4 * a3;
  *((_DWORD *)v15 + 14) = v19 * v18;
  *((_DWORD *)v15 + 15) = v19 * a3;
  *((_DWORD *)v15 + 24) = 0;
  float v25 = powf((float)(1.0 / (float)((float)a2 * -3.0)) + 1.0, v20);
  v16[22] = 1.0 / (float)v17;
  v16[23] = v25;
  *((_DWORD *)v16 + 25) = a7;
  *((_DWORD *)v16 + 26) = a8;
  *((_DWORD *)v16 + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v17;
  v16[21] = 1.0;
  *((_DWORD *)v16 + 18) = a4 * a3 + v17;
  MultiRadixRealFFT_Create();
}

uint64_t AUEchoCancelerV5::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AUEchoCancelerV5::ShouldBypassEffect(AUEchoCancelerV5 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUEchoCancelerV5::ValidFormat(AUEchoCancelerV5 *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result)
  {
    if ((a4->mFormatFlags & 0x20) != 0)
    {
      uint64_t result = 1;
      if (a3) {
        return result;
      }
      goto LABEL_5;
    }
    uint64_t result = a4->mChannelsPerFrame == 1;
  }
  if (a3) {
    return result;
  }
LABEL_5:
  if (a4->mChannelsPerFrame == 1) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t AUEchoCancelerV5::SupportedNumChannels(AUEchoCancelerV5 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUEchoCancelerV5::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUEchoCancelerV5::StreamFormatWritable(AUEchoCancelerV5 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUEchoCancelerV5::SupportsTail(AUEchoCancelerV5 *this)
{
  return 1;
}

double AUEchoCancelerV5::GetTailTime(AUEchoCancelerV5 *this)
{
  return 0.0;
}

double AUEchoCancelerV5::GetLatency(AUEchoCancelerV5 *this)
{
  return 0.0;
}

uint64_t AUEchoCancelerV5::CopyClumpName(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, const __CFString **a5)
{
  if (a2) {
    return 4294956430;
  }
  if ((a3 - 1) > 5) {
    return 4294956418;
  }
  uint64_t result = 0;
  *a5 = kAUEchoCancelerV5ClumpNamesPtr[a3];
  return result;
}

uint64_t AUEchoCancelerV5::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUEchoCancelerV5::GetParameterInfo(AUEchoCancelerV5 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"total modelled filt len";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"total modelled filt len", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x453B80003F800000;
      AudioUnitParameterValue v7 = 79.0;
      goto LABEL_48;
    case 1:
      buffer->cfNameString = @"(I) actual filt sz";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) actual filt sz", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 1;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_SampleFrames;
      uint64_t v9 = 0x4811500000000000;
      goto LABEL_97;
    case 2:
      buffer->cfNameString = @"delta EIR disable";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"delta EIR disable", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      int v10 = -1877999616;
      goto LABEL_98;
    case 3:
      buffer->cfNameString = @"(I) delta EIR";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) delta EIR", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Ratio;
      uint64_t v9 = 0x501502F900000000;
      goto LABEL_97;
    case 4:
      CFStringRef v11 = @"(I) Freeze adaptation option";
      goto LABEL_96;
    case 5:
      buffer->cfNameString = @"(I) EC Ref-Mic Delay MilliSec";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) EC Ref-Mic Delay MilliSec", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      uint64_t v12 = 0x41A0000000000000;
      goto LABEL_93;
    case 6:
      buffer->cfNameString = @"(I) AGC dynamic gain";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) AGC dynamic gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v12 = 0x41A00000C1A00000;
      goto LABEL_93;
    case 7:
      buffer->cfNameString = @"(I) AGC post gain";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) AGC post gain", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v13 = 0x41A00000C1A00000;
      goto LABEL_36;
    case 8:
      buffer->cfNameString = @"(I) EC main lobe delay";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) EC main lobe delay", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      uint64_t v9 = 0x43C8000000000000;
      goto LABEL_97;
    case 9:
      buffer->cfNameString = @"Allow LMS filter scale down for rapid h changes";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Allow LMS filter scale down for rapid h changes", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v14 = 0x4000000000000000;
      goto LABEL_74;
    case 10:
      buffer->cfNameString = @"EC init convergence options";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"EC init convergence options", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 4;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      int v10 = -2079326208;
      goto LABEL_98;
    case 11:
      CFStringRef v15 = @"disable search for IR peak";
      goto LABEL_72;
    case 12:
      buffer->cfNameString = @"DualEC DualEcStatDur";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC DualEcStatDur", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x447A000000000000;
      AudioUnitParameterValue v7 = 220.0;
      goto LABEL_75;
    case 13:
      buffer->cfNameString = @"DualEC MinBackupOverAdapt";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MinBackupOverAdapt", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      uint64_t v16 = 0x447A000000000000;
      goto LABEL_27;
    case 14:
      buffer->cfNameString = @"DualEC MinCopyAdaptToBackup";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MinCopyAdaptToBackup", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x447A000000000000;
      AudioUnitParameterValue v7 = 100.0;
      goto LABEL_75;
    case 15:
      buffer->cfNameString = @"DualEC MaxCopyAdaptToBackup";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MaxCopyAdaptToBackup", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x447A000000000000;
      AudioUnitParameterValue v7 = 200.0;
      goto LABEL_75;
    case 16:
      buffer->cfNameString = @"DualEC ResetTime";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC ResetTime", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x447A000000000000;
      AudioUnitParameterValue v7 = 150.0;
      goto LABEL_75;
    case 17:
      buffer->cfNameString = @"DualEC EPS_EC_ERROR_MIN";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC EPS_EC_ERROR_MIN", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x43960000C3960000;
      AudioUnitParameterValue v7 = -35.0;
      goto LABEL_75;
    case 18:
      buffer->cfNameString = @"DualEC MIN_ADAPT_DOING_OK";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MIN_ADAPT_DOING_OK", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x43960000C3960000;
      AudioUnitParameterValue v7 = 0.4;
      goto LABEL_75;
    case 19:
      buffer->cfNameString = @"DualEC MIN_ADAPT_OVER_BACKUP";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MIN_ADAPT_OVER_BACKUP", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x43960000C3960000;
      AudioUnitParameterValue v7 = -0.5;
      goto LABEL_75;
    case 20:
      buffer->cfNameString = @"DualEC MIN_ADAPT_IN_SINGLETALK";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MIN_ADAPT_IN_SINGLETALK", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v17 = 0x43960000C3960000;
      goto LABEL_79;
    case 21:
      buffer->cfNameString = @"DualEC MIN_ECHO_LEVEL_TO_CHECK";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MIN_ECHO_LEVEL_TO_CHECK", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x43960000C3960000;
      AudioUnitParameterValue v7 = -90.0;
      goto LABEL_75;
    case 22:
      buffer->cfNameString = @"DualEC MIN_HANG_TIME";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"DualEC MIN_HANG_TIME", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 5;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      uint64_t v16 = 0x4396000000000000;
LABEL_27:
      *(void *)&buffer->minCFNumberRef Value = v16;
      AudioUnitParameterValue v7 = 20.0;
      goto LABEL_75;
    case 23:
      buffer->cfNameString = @"FastInitConverge MaxAdaptRate";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"FastInitConverge MaxAdaptRate", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4000000000000000;
      AudioUnitParameterValue v7 = 0.35;
      goto LABEL_75;
    case 24:
      buffer->cfNameString = @"FastInitConverge MinAdaptRate";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"FastInitConverge MinAdaptRate", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4000000000000000;
      AudioUnitParameterValue v7 = 0.15;
      goto LABEL_75;
    case 25:
      buffer->cfNameString = @"FastInitConverge HighXCorr";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"FastInitConverge HighXCorr", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.86;
      goto LABEL_75;
    case 26:
      buffer->cfNameString = @"FastInitConverge LowXCorr";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"FastInitConverge LowXCorr", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.5;
      goto LABEL_75;
    case 27:
      buffer->cfNameString = @"FastInitConverge TimeConstForRunningAv";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"FastInitConverge TimeConstForRunningAv", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x43FA000000000000;
      AudioUnitParameterValue v7 = 30.0;
      goto LABEL_75;
    case 28:
      CFStringRef v15 = @"FastInitConverge EnableSubSampForDelayEst";
      goto LABEL_72;
    case 29:
      buffer->cfNameString = @"FastInitConverge LeakThresh";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"FastInitConverge LeakThresh", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.01;
      goto LABEL_75;
    case 30:
      buffer->cfNameString = @"(I) IR peak delay in msec 1st ref chan";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) IR peak delay in msec 1st ref chan", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v13 = 0x453B800000000000;
LABEL_36:
      *(void *)&buffer->minCFNumberRef Value = v13;
      int v10 = 68190208;
      goto LABEL_98;
    case 31:
      buffer->cfNameString = @"RER floor LeakThresh";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"RER floor LeakThresh", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.04;
      goto LABEL_75;
    case 32:
      buffer->cfNameString = @"RER floor MicEchoEstXcorrThresh";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"RER floor MicEchoEstXcorrThresh", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 0.79;
      goto LABEL_75;
    case 33:
      CFStringRef v11 = @"(I) EC adaptation state";
      goto LABEL_96;
    case 34:
      buffer->cfNameString = @"(I) EC time aligned ref signal energy";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) EC time aligned ref signal energy", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 0x447A000000000000;
      goto LABEL_97;
    case 35:
      buffer->cfNameString = @"Threshold on echo to local voice energy for beam";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Threshold on echo to local voice energy for beam", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x447A0000C47A0000;
      AudioUnitParameterValue v7 = -3.0;
      goto LABEL_75;
    case 36:
      CFStringRef v11 = @"(I) Echo flag to beam2";
      goto LABEL_96;
    case 37:
      CFStringRef v11 = @"(I) Mic Eclee Xcorr";
      goto LABEL_96;
    case 38:
      buffer->cfNameString = @"Fast Adapt: 0=off, 1=init conv, 2=init+re conv 3= init+re conv + init rate cal, 4=2+resettable";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Fast Adapt: 0=off, 1=init conv, 2=init+re conv 3= init+re conv + init rate cal, 4=2+resettable", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 4;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v14 = 0x4040000000000000;
      goto LABEL_74;
    case 39:
      buffer->cfNameString = @"Crop: Enable crop for long total filter lens";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Crop: Enable crop for long total filter lens", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      UInt32 v18 = 1;
      goto LABEL_57;
    case 40:
      buffer->cfNameString = @"Crop: Pre-lobe delay for long total filter lens";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Crop: Pre-lobe delay for long total filter lens", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x453B80003F800000;
      AudioUnitParameterValue v7 = 40.0;
      goto LABEL_48;
    case 41:
      buffer->cfNameString = @"Crop: Copped filter length for long total filter lens";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Crop: Copped filter length for long total filter lens", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFNumberRef Value = 0x453B80003F800000;
      AudioUnitParameterValue v7 = 200.0;
LABEL_48:
      int v19 = -1877999616;
      goto LABEL_76;
    case 42:
      buffer->cfNameString = @"Multi-chan EC mode: 0-LinearEC, 1-PolyEC, 2-MultiChanEC, 3- MultiChan+PolyEC";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Multi-chan EC mode: 0-LinearEC, 1-PolyEC, 2-MultiChanEC, 3- MultiChan+PolyEC", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 2;
      AudioUnitParameterOptions v20 = buffer->flags | 0x100000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4040000000000000;
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v20;
      return result;
    case 43:
      buffer->cfNameString = @"Order to do for Poly EC";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Order to do for Poly EC", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 4;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x404000003F800000;
      AudioUnitParameterValue v7 = 3.0;
      goto LABEL_75;
    case 44:
      buffer->cfNameString = @"Num of ref channels to use for multi-chan EC";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Num of ref channels to use for multi-chan EC", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 2;
      AudioUnitParameterOptions v21 = buffer->flags | 0x100000;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x412000003F800000;
      buffer->defaultCFNumberRef Value = 1.0;
      buffer->AudioUnitParameterOptions flags = v21;
      return result;
    case 45:
      buffer->cfNameString = @"(I) 10*log10(syy/see)";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) 10*log10(syy/see)", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 0x42C80000C2C80000;
      goto LABEL_97;
    case 46:
      buffer->cfNameString = @"(I) Echo leakage";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"(I) Echo leakage", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v22 = 0x42C8000000000000;
      goto LABEL_61;
    case 47:
      CFStringRef v23 = @"Enable Ref Channel 0";
      goto LABEL_56;
    case 48:
      CFStringRef v23 = @"Enable Ref Channel 1";
LABEL_56:
      buffer->cfNameString = v23;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v23, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      UInt32 v18 = 2;
LABEL_57:
      buffer->clumpID = v18;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v7 = 1.0;
      goto LABEL_69;
    case 49:
      CFStringRef v24 = @"Enable Ref Channel 2";
      goto LABEL_60;
    case 50:
      CFStringRef v24 = @"Enable Ref Channel 3";
LABEL_60:
      buffer->cfNameString = v24;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v24, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 2;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v22 = 0x3F80000000000000;
LABEL_61:
      *(void *)&buffer->minCFNumberRef Value = v22;
      AudioUnitParameterValue v7 = 1.0;
      int v19 = 1081344;
      goto LABEL_76;
    case 51:
      CFStringRef v25 = @"Enable Ref Channel 4";
      goto LABEL_67;
    case 52:
      CFStringRef v25 = @"Enable Ref Channel 5";
      goto LABEL_67;
    case 53:
      CFStringRef v25 = @"Enable Ref Channel 6";
      goto LABEL_67;
    case 54:
      CFStringRef v25 = @"Enable Ref Channel 7";
      goto LABEL_67;
    case 55:
      CFStringRef v25 = @"Enable Ref Channel 8";
LABEL_67:
      buffer->cfNameString = v25;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v25, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      UInt32 v26 = 2;
      goto LABEL_73;
    case 56:
      buffer->cfNameString = @"Regularization constant for NLMS Normalization";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Regularization constant for NLMS Normalization", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0xC2480000C3160000;
      AudioUnitParameterValue v7 = -80.458;
LABEL_69:
      int v19 = -2146435072;
      goto LABEL_76;
    case 57:
      CFStringRef v27 = @"Run multiple iteration on Fast EC";
      goto LABEL_85;
    case 58:
      CFStringRef v15 = @"Calculate posterior error";
LABEL_72:
      buffer->cfNameString = v15;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      UInt32 v26 = 6;
LABEL_73:
      buffer->clumpID = v26;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v14 = 0x3F80000000000000;
LABEL_74:
      *(void *)&buffer->minCFNumberRef Value = v14;
      AudioUnitParameterValue v7 = 1.0;
      goto LABEL_75;
    case 59:
      CFStringRef v27 = @"Enable Poly EC speedup option";
      goto LABEL_85;
    case 60:
      buffer->cfNameString = @"Leakage threshold for poly EC speedup";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Leakage threshold for poly EC speedup", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v17 = 3253731328;
LABEL_79:
      *(void *)&buffer->minCFNumberRef Value = v17;
      AudioUnitParameterValue v7 = -6.0;
      goto LABEL_75;
    case 61:
      buffer->cfNameString = @"Delta IR threshold for poly EC speedup";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Delta IR threshold for poly EC speedup", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
      AudioUnitParameterValue v7 = 10.0;
      goto LABEL_75;
    case 62:
      buffer->cfNameString = @"syy2sdd ratio threshold for Poly EC speedup";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"syy2sdd ratio threshold for Poly EC speedup", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
      AudioUnitParameterValue v7 = 6.0;
      goto LABEL_75;
    case 63:
      buffer->cfNameString = @"ir Ratio threshold for poly EC speedup";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"ir Ratio threshold for poly EC speedup", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x447A000000000000;
      AudioUnitParameterValue v7 = 40.0;
      goto LABEL_75;
    case 64:
      CFStringRef v29 = @"split eclee parts for poly EC";
      goto LABEL_88;
    case 65:
      CFStringRef v27 = @"Only use odd order terms in poly EC reference";
LABEL_85:
      buffer->cfNameString = v27;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v27, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      UInt32 v30 = 4;
      goto LABEL_89;
    case 66:
      CFStringRef v31 = @"De-emphasized Echo to local voice threshold";
      goto LABEL_92;
    case 67:
      CFStringRef v29 = @"De-emphasized Echo Flag";
LABEL_88:
      buffer->cfNameString = v29;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v29, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      UInt32 v30 = 6;
LABEL_89:
      buffer->clumpID = v30;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v12 = 0x3F80000000000000;
      goto LABEL_93;
    case 68:
      CFStringRef v31 = @"(I)De-emphasized 10*log10(syy/see)";
      goto LABEL_92;
    case 69:
      CFStringRef v31 = @"(I)Eclee engergy in dB";
LABEL_92:
      buffer->cfNameString = v31;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v31, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v12 = 0x447A0000C47A0000;
LABEL_93:
      *(void *)&buffer->minCFNumberRef Value = v12;
      int v10 = 68157440;
      goto LABEL_98;
    case 70:
      buffer->cfNameString = @"Eclee engergy thresh low in dB";
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(@"Eclee engergy thresh low in dB", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFNumberRef Value = 0x447A0000C47A0000;
      AudioUnitParameterValue v7 = -26.0;
LABEL_75:
      int v19 = 68157440;
LABEL_76:
      AudioUnitParameterOptions v28 = flags | v19;
      buffer->defaultCFNumberRef Value = v7;
      goto LABEL_99;
    case 71:
      CFStringRef v11 = @"eclee active flag based on low thresh";
LABEL_96:
      buffer->cfNameString = v11;
      buffer->AudioUnitParameterOptions flags = 1207959552;
      CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->clumpID = 3;
      AudioUnitParameterOptions v8 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v9 = 0x3F80000000000000;
LABEL_97:
      *(void *)&buffer->minCFNumberRef Value = v9;
      int v10 = 1081344;
LABEL_98:
      AudioUnitParameterOptions v28 = v8 | v10;
      buffer->defaultCFNumberRef Value = 0.0;
LABEL_99:
      buffer->AudioUnitParameterOptions flags = v28;
      break;
    default:
      return 4294956418;
  }
  return result;
}

BOOL AUEchoCancelerV5::BusCountWritable(AUEchoCancelerV5 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUEchoCancelerV5::Render(AUEchoCancelerV5 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterOptions v8 = (AUEchoCancelerV5 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    ausdk::AUBufferList::CopyBufferContentsTo((void *)(Element + 144), BufferList);
    return 0;
  }
  return result;
}

uint64_t AUEchoCancelerV5::ProcessMultipleBufferLists(AUEchoCancelerV5 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v8 = *((_DWORD *)this + 84);
  if (v8 != a3)
  {
    printf("AUEchoCancelerV5::ProcessMultipleBufferLists error - wrong (%d) block size expected (%d)", a3, v8);
    return 4294956422;
  }
  uint64_t v9 = a7;
  float v117 = 0.0;
  if (*((_DWORD *)this + 134) != *((_DWORD *)this + 133)) {
    AUEchoCancelerV5::InitializeEC(this);
  }
  mData = (float *)(*a5)->mBuffers[0].mData;
  long long v115 = (float *)(*a7)->mBuffers[0].mData;
  if (a6 < 2)
  {
    uint64_t v14 = 0;
    __dst = 0;
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = a7[1]->mBuffers[0].mData;
  if (a6 == 2)
  {
    uint64_t v14 = 0;
    __dst = 0;
LABEL_13:
    uint64_t v17 = 0;
    goto LABEL_14;
  }
  __dst = a7[2]->mBuffers[0].mData;
  if (a6 < 4)
  {
    uint64_t v14 = 0;
    goto LABEL_13;
  }
  uint64_t v16 = a7[3];
  if (v16) {
    uint64_t v17 = v16->mBuffers[0].mData;
  }
  else {
    uint64_t v17 = 0;
  }
  if (a6 < 5)
  {
    uint64_t v14 = 0;
  }
  else
  {
    float v82 = a7[4];
    if (v82) {
      uint64_t v14 = v82->mBuffers[0].mData;
    }
    else {
      uint64_t v14 = 0;
    }
    if (a6 >= 6)
    {
      std::string v108 = a7[5];
      if (v108)
      {
        long long v113 = v108->mBuffers[0].mData;
        goto LABEL_15;
      }
    }
  }
LABEL_14:
  long long v113 = 0;
LABEL_15:
  UInt32 v18 = a5[1]->mBuffers[0].mData;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 2u);
  AudioUnitParameterOptions v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  float v22 = ausdk::AUElement::GetParameter(v21, 0xBu);
  if (((*(uint64_t (**)(AUEchoCancelerV5 *))(*(void *)this + 576))(this) & 1) == 0
    && *((void *)this + 72))
  {
    uint64_t v15 = 0xFFFFFFFFLL;
    float v23 = 0.0;
    if (!mData || !v18)
    {
LABEL_90:
      long long v85 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      float v86 = ausdk::AUElement::GetParameter(v85, 0x23u);
      float v87 = *((float *)this + 140);
      if (v23 >= v87) {
        float v88 = v23;
      }
      else {
        float v88 = *((float *)this + 140);
      }
      if (v88 >= *((float *)this + 141)) {
        float v89 = v88;
      }
      else {
        float v89 = *((float *)this + 141);
      }
      *((float *)this + 14freeMatrix(*((_DWORD *)this + 17), this + 1) = v87;
      *((float *)this + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v23;
      long long v90 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      if (v89 <= v86) {
        float v91 = 0.0;
      }
      else {
        float v91 = 1.0;
      }
      ausdk::AUElement::SetParameter(v90, 0x24u, v91, 0);
      uint64_t v92 = *(const float **)(*(void *)(*((void *)this + 72) + 56) + 96);
      long long v93 = (const float *)(*v9)->mBuffers[0].mData;
      *(void *)long long v119 = 0;
      vDSP_svesq(v92, 1, v119, *((unsigned int *)this + 84));
      vDSP_svesq(v93, 1, &v119[1], *((unsigned int *)this + 84));
      float v94 = v119[0] / (v119[1] + 1.0e-20) + 1.0e-20;
      float v95 = log10f(v94) * 10.0;
      uint64_t v96 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      float v97 = ausdk::AUElement::GetParameter(v96, 0x42u);
      uint64_t v98 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v98, 0x44u, *((float *)this + 142), 0);
      if (*((float *)this + 142) <= v97) {
        float v99 = 0.0;
      }
      else {
        float v99 = 1.0;
      }
      uint64_t v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v100, 0x43u, v99, 0);
      *((float *)this + 142) = v95;
      std::string::size_type v101 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      float v102 = ausdk::AUElement::GetParameter(v101, 0x46u);
      long long v103 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v103, 0x45u, *((float *)this + 143), 0);
      if (*((float *)this + 143) <= v102) {
        float v104 = 0.0;
      }
      else {
        float v104 = 1.0;
      }
      long long v105 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v105, 0x47u, v104, 0);
      float v106 = (float)(v119[0] / (float)*((unsigned int *)this + 84)) + 1.0e-20;
      *((float *)this + 143) = log10f(v106) * 10.0;
      return v15;
    }
    uint64_t v110 = v17;
    vDSP_Length v24 = *((int *)this + 84);
    size_t v25 = 4 * (int)v24;
    memcpy(*((void **)this + 82), v18, v25);
    UInt32 v26 = (_DWORD *)*((void *)this + 85);
    int v27 = v26[31];
    std::string::size_type v111 = v14;
    uint64_t v112 = v13;
    if ((v27 | 2) != 3)
    {
      if (v27 == 2 && (int)v26[33] >= 2)
      {
        long long v109 = v9;
        uint64_t v35 = 1;
        uint64_t v36 = 32;
        uint64_t v37 = 4 * v24;
        do
        {
          memcpy((void *)(*((void *)this + 82) + v37), *(const void **)((char *)&a5[1]->mNumberBuffers + v36), v25);
          ++v35;
          UInt32 v26 = (_DWORD *)*((void *)this + 85);
          v37 += 4 * v24;
          v36 += 16;
        }
        while (v35 < (int)v26[33]);
        uint64_t v9 = v109;
      }
      goto LABEL_39;
    }
    int v28 = v26[32];
    if (v28 == 2)
    {
      vDSP_vsq((const float *)v18, 1, (float *)(*((void *)this + 82) + 4 * v24), 1, v24);
      if (*((unsigned char *)this + 672))
      {
        CFStringRef v29 = (const float *)(*((void *)this + 82) + 4 * v24);
        UInt32 v30 = (const float *)v18;
        CFStringRef v31 = (float *)v29;
LABEL_34:
        vDSP_vmul(v30, 1, v29, 1, v31, 1, v24);
      }
    }
    else if (v28 >= 3)
    {
      vDSP_vsq((const float *)v18, 1, (float *)(*((void *)this + 82) + 4 * v24), 1, v24);
      vDSP_vmul((const float *)v18, 1, (const float *)(*((void *)this + 82) + 4 * v24), 1, (float *)(*((void *)this + 82) + 8 * v24), 1, v24);
      if (*((unsigned char *)this + 672))
      {
        vDSP_vsq((const float *)v18, 1, (float *)(*((void *)this + 82) + 4 * v24), 1, v24);
        vDSP_vmul((const float *)v18, 1, (const float *)(*((void *)this + 82) + 4 * v24), 1, (float *)(*((void *)this + 82) + 8 * v24), 1, v24);
        uint64_t v38 = *((void *)this + 82);
        UInt32 v30 = (const float *)(v38 + 4 * v24);
        CFStringRef v29 = (const float *)(v38 + 8 * v24);
        CFStringRef v31 = (float *)v30;
        goto LABEL_34;
      }
    }
    UInt32 v26 = (_DWORD *)*((void *)this + 85);
    if (v26[31] == 3 && (int)v26[33] >= 2)
    {
      uint64_t v39 = 1;
      uint64_t v40 = 32;
      do
      {
        memcpy((void *)(*((void *)this + 82) + 4 * ((int)v39++ + v26[32] - 1) * (int)v24), *(const void **)((char *)&a5[1]->mNumberBuffers + v40), v25);
        UInt32 v26 = (_DWORD *)*((void *)this + 85);
        v40 += 16;
      }
      while (v39 < (int)v26[33]);
    }
LABEL_39:
    if (v26[31] == 2)
    {
      uint64_t v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      **(unsigned char **)(*(void *)(*((void *)this + 72) + 8) + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v41, 0x2Fu) != 0.0;
      if (*(int *)(*((void *)this + 85) + 120) >= 2)
      {
        long long v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
        *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 72) + 8) + 120) + freeMatrix(*((_DWORD *)this + 17), this + 1) = ausdk::AUElement::GetParameter(v42, 0x30u) != 0.0;
        if (*(int *)(*((void *)this + 85) + 120) >= 3)
        {
          uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
          *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 72) + 8) + 120) + 2) = ausdk::AUElement::GetParameter(v43, 0x31u) != 0.0;
          if (*(int *)(*((void *)this + 85) + 120) >= 4)
          {
            long long v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
            *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 72) + 8) + 120) + 3) = ausdk::AUElement::GetParameter(v44, 0x32u) != 0.0;
            if (*(int *)(*((void *)this + 85) + 120) >= 5)
            {
              char v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
              *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 72) + 8) + 120) + 4) = ausdk::AUElement::GetParameter(v45, 0x33u) != 0.0;
              if (*(int *)(*((void *)this + 85) + 120) >= 6)
              {
                std::string::size_type v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
                *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 72) + 8) + 120) + 5) = ausdk::AUElement::GetParameter(v46, 0x34u) != 0.0;
                if (*(int *)(*((void *)this + 85) + 120) >= 7)
                {
                  char v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
                  *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 72) + 8) + 120) + 6) = ausdk::AUElement::GetParameter(v47, 0x35u) != 0.0;
                  if (*(int *)(*((void *)this + 85) + 120) >= 8)
                  {
                    long long v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
                    *(unsigned char *)(*(void *)(*(void *)(*((void *)this + 72) + 8) + 120) + 7) = ausdk::AUElement::GetParameter(v48, 0x36u) != 0.0;
                    if (*(int *)(*((void *)this + 85) + 120) >= 9)
                    {
                      unint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
                      BOOL v50 = ausdk::AUElement::GetParameter(v49, 0x37u) != 0.0;
                      uint64_t v51 = *(void *)(*(void *)(*((void *)this + 72) + 8) + 120);
                      *(unsigned char *)(v51 + 8) = v50;
                      uint64_t v52 = *(unsigned int *)(*((void *)this + 85) + 120);
                      if ((int)v52 >= 10)
                      {
                        uint64_t v53 = v52 - 9;
                        std::string::size_type v54 = (unsigned char *)(v51 + 9);
                        do
                        {
                          *v54++ = *(unsigned char *)(v51 + 8);
                          --v53;
                        }
                        while (v53);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v55 = (const float *)*((void *)this + 82);
    std::string::size_type v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    int v57 = (int)ausdk::AUElement::GetParameter(v56, 4u);
    float __C = 0.0;
    vDSP_svesq(mData, 1, &__C, v24);
    BOOL v59 = __C == 0.0 || v57 > 0;
    aec_v5::run_aec(*((float ***)this + 72), (_DWORD *)this + 136, (float *)this + 137, (_DWORD *)this + 138, (_DWORD *)this + 139, v55, mData, v115, &v117, v59, (_DWORD *)this + 162, (_DWORD *)this + 167);
    uint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v60, 8u, *((float *)this + 137), 0);
    long long v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v61, 0x21u, (float)*((int *)this + 138), 0);
    int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v62, 0x22u, *((float *)this + 139), 0);
    long long v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v63, 0x25u, *((float *)this + 162), 0);
    uint64_t v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v64, 0x2Du, v117, 0);
    std::string::size_type v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v65, 0x2Eu, *((float *)this + 167), 0);
    if (__dst) {
      memcpy(__dst, *(const void **)(*(void *)(*((void *)this + 72) + 56) + 168), 4 * *((unsigned int *)this + 84));
    }
    if (v112) {
      memcpy(v112, *(const void **)(*(void *)(*((void *)this + 72) + 56) + 96), 4 * *((unsigned int *)this + 84));
    }
    if (v110) {
      memcpy(v110, *(const void **)(*(void *)(*((void *)this + 72) + 56) + 104), 4 * *((unsigned int *)this + 84));
    }
    if (v111) {
      memcpy(v111, *(const void **)(*(void *)(*((void *)this + 72) + 56) + 112), 4 * *((unsigned int *)this + 84));
    }
    if (v113) {
      memcpy(v113, *(const void **)(*(void *)(*((void *)this + 72) + 56) + 120), 4 * *((unsigned int *)this + 84));
    }
    if (Parameter == 0.0)
    {
      *(void *)long long v119 = 0;
      float v118 = 0.0;
      uint64_t v66 = *((void *)this + 74);
      uint64_t v67 = *((void *)this + 73);
      uint64_t v68 = *((void *)this + 72);
      uint64_t v69 = 16;
      if (*(int *)(*(void *)(v68 + 48) + 592) > 0) {
        uint64_t v69 = 40;
      }
      memcpy(*((void **)this + 73), *(const void **)(*(void *)(v68 + v69) + 48), 4 * *(int *)(*(void *)(v68 + v69) + 88));
      *(float *)&int v70 = 0.0;
      if (*(_DWORD *)(*(void *)(*((void *)this + 72) + 48) + 232)) {
        goto LABEL_72;
      }
      vDSP_Length v71 = ((unint64_t)(v66 - v67) >> 2);
      vDSP_vsub(*((const float **)this + 73), 1, *((const float **)this + 75), 1, *((float **)this + 77), 1, v71);
      vDSP_vsq(*((const float **)this + 77), 1, *((float **)this + 77), 1, v71);
      vDSP_sve(*((const float **)this + 77), 1, &v119[1], v71);
      vDSP_vsq(*((const float **)this + 75), 1, *((float **)this + 79), 1, v71);
      vDSP_sve(*((const float **)this + 79), 1, v119, v71);
      vDSP_vsq(*((const float **)this + 73), 1, *((float **)this + 79), 1, v71);
      vDSP_sve(*((const float **)this + 79), 1, &v118, v71);
      float v72 = v119[0] + 0.00000001;
      v119[0] = (float)(v118 * 0.2) + (float)(v72 * 0.8);
      float v73 = v119[1] * 100.0 / v119[0];
      *(float *)&int v70 = 800.0;
      if (v73 > 800.0) {
LABEL_72:
      }
        float v73 = *(float *)&v70;
      std::valarray<float>::__assign_range((uint64_t)this + 600, *((unsigned char **)this + 73), *((unsigned char **)this + 74));
    }
    else
    {
      float v73 = 0.0;
    }
    float v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v74, 3u, v73, 0);
    if (v22 != 1.0)
    {
      uint64_t v75 = *(void *)(*((void *)this + 72) + 16);
      vDSP_Length v76 = *(unsigned int *)(v75 + 36);
      vDSP_vabs(*(const float **)(v75 + 48), 1, *((float **)this + 77), 1, v76);
      if (v76)
      {
        uint64_t v77 = 0;
        unsigned int v78 = 0;
        float v80 = -1.0;
        do
        {
          uint64_t v79 = *((void *)this + 77);
          if (*(float *)(v79 + 4 * v77) > v80)
          {
            unsigned int v78 = v77;
            float v80 = *(float *)(v79 + 4 * v77);
          }
          ++v77;
        }
        while (v76 != v77);
        float v81 = (float)v78 * 1000.0;
      }
      else
      {
        float v81 = 0.0;
      }
      float v83 = v81 / (float)*((unsigned int *)this + 135);
      uint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
      ausdk::AUElement::SetParameter(v84, 0x1Eu, v83, 0);
    }
    uint64_t v15 = 0;
    float v23 = v117;
    goto LABEL_90;
  }
  if (mData != v115)
  {
    uint64_t v32 = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 128), 0);
    memcpy(v115, mData, (*(_DWORD *)(v32 + 104) * a3));
    int v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v33, 3u, 0.0, 0);
    std::string::size_type v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v34, 0x24u, 0.0, 0);
  }
  return 0;
}

void AUEchoCancelerV5::InitializeEC(AUEchoCancelerV5 *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUEchoCancelerV5 *)((char *)this + 80), 0);
  (*(void (**)(AUEchoCancelerV5 *))(*(void *)this + 64))(this);
  *((_DWORD *)this + 135) = *(double *)(Element + 80);
  id v3 = malloc_type_malloc(0xB0uLL, 0x2C8E6D5CuLL);
  if (!v3) {
    goto LABEL_37;
  }
  v3[9] = 0u;
  v3[10] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  void v3[5] = 0u;
  v3[6] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  *id v3 = 0u;
  *((void *)this + 85) = v3;
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(v4, 0);
  uint64_t v6 = *((void *)this + 85);
  if (!Parameter)
  {
LABEL_31:
    size_t v69 = 4 * *((unsigned int *)this + 84) * (uint64_t)*(int *)(v6 + 120);
    int v70 = malloc_type_malloc(v69, 0x2C8E6D5CuLL);
    if (v70) {
      BOOL v71 = 1;
    }
    else {
      BOOL v71 = v69 == 0;
    }
    if (v71)
    {
      float v72 = v70;
      bzero(v70, v69);
      *((void *)this + 82) = v72;
      aec_v5::aec_init((void **)this + 72, *((_DWORD *)this + 135), *((int **)this + 85));
    }
LABEL_37:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float v74 = std::bad_alloc::bad_alloc(exception);
  }
  unsigned int v7 = *((_DWORD *)this + 84);
  float v8 = (float)v7;
  float v9 = (float)*((unsigned int *)this + 135) / (float)((float)v7 * 1000.0);
  *(_DWORD *)uint64_t v6 = (float)(ceilf(v9 * (float)Parameter) * (float)v7);
  *(_DWORD *)(v6 + 4) = v7;
  uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(_DWORD *)(*((void *)this + 85) + 8) = ausdk::AUElement::GetParameter(v10, 9u);
  uint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  float v12 = ausdk::AUElement::GetParameter(v11, 0xAu);
  uint64_t v13 = *((void *)this + 85);
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(v13 + 16) = 1;
  uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v14, 0xCu);
  uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 24) = ausdk::AUElement::GetParameter(v15, 0xDu);
  uint64_t v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 28) = ausdk::AUElement::GetParameter(v16, 0xEu);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 32) = ausdk::AUElement::GetParameter(v17, 0xFu);
  UInt32 v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 36) = ausdk::AUElement::GetParameter(v18, 0x10u);
  int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v19, 0x11u);
  AudioUnitParameterOptions v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 44) = ausdk::AUElement::GetParameter(v20, 0x12u);
  AudioUnitParameterOptions v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 48) = ausdk::AUElement::GetParameter(v21, 0x13u);
  float v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 52) = ausdk::AUElement::GetParameter(v22, 0x14u);
  float v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 56) = ausdk::AUElement::GetParameter(v23, 0x15u);
  vDSP_Length v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 6std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v24, 0x16u);
  size_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 64) = ausdk::AUElement::GetParameter(v25, 0x19u);
  UInt32 v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 68) = ausdk::AUElement::GetParameter(v26, 0x1Au);
  int v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 72) = ausdk::AUElement::GetParameter(v27, 0x17u);
  int v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 76) = ausdk::AUElement::GetParameter(v28, 0x18u);
  CFStringRef v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v29, 0x1Bu);
  UInt32 v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(unsigned char *)(*((void *)this + 85) + 84) = ausdk::AUElement::GetParameter(v30, 0x1Cu) != 0.0;
  CFStringRef v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  float v32 = ausdk::AUElement::GetParameter(v31, 0x1Du);
  uint64_t v33 = *((void *)this + 85);
  *(float *)(v33 + 88) = v32;
  *(_DWORD *)(v33 + 92) = 1;
  std::string::size_type v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 96) = ausdk::AUElement::GetParameter(v34, 0x1Fu);
  uint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 10std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v35, 0x20u);
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(_DWORD *)(*((void *)this + 85) + 104) = ausdk::AUElement::GetParameter(v36, 0x27u);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(_DWORD *)(*((void *)this + 85) + 108) = ausdk::AUElement::GetParameter(v37, 0x26u);
  uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  unsigned int v39 = ausdk::AUElement::GetParameter(v38, 0x28u);
  uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  float v41 = ausdk::AUElement::GetParameter(v40, 0x29u);
  if (v39 <= 5) {
    unsigned int v42 = 5;
  }
  else {
    unsigned int v42 = v39;
  }
  unsigned int v43 = (float)(ceilf(v9 * (float)v42) * v8);
  long long v44 = (unsigned int *)*((void *)this + 85);
  unsigned int v45 = (float)(ceilf(v9 * (float)v41) * v8);
  if (v43 >= v45) {
    unsigned int v45 = v7 + v43;
  }
  v44[28] = v43;
  v44[29] = v45;
  unsigned int v46 = *v44;
  if (v45 >= *v44)
  {
    v44[28] = 0;
    v44[29] = v46;
    v44[26] = 0;
  }
  char v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(_DWORD *)(*((void *)this + 85) + 124) = (int)ausdk::AUElement::GetParameter(v47, 0x2Au);
  long long v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  int v49 = (int)ausdk::AUElement::GetParameter(v48, 0x2Bu);
  if (v49 >= 3) {
    int v49 = 3;
  }
  *(_DWORD *)(*((void *)this + 85) + 128) = v49;
  BOOL v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  int v51 = (int)ausdk::AUElement::GetParameter(v50, 0x2Cu);
  uint64_t v52 = *((void *)this + 85);
  if (*((_DWORD *)this + 166) < v51) {
    int v51 = *((_DWORD *)this + 166);
  }
  *(_DWORD *)(v52 + ++*((_DWORD *)this + 132) = v51;
  int v53 = *(_DWORD *)(v52 + 124);
  if (v53 == 3)
  {
    *(_DWORD *)(v52 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v51 + *(_DWORD *)(v52 + 128) - 1;
  }
  else
  {
    if (v53 == 2)
    {
      *(_DWORD *)(v52 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v51;
      *(_DWORD *)(v52 + 128) = 1;
    }
    else
    {
      if (v53 == 1)
      {
        *(_DWORD *)(v52 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v52 + 128);
        *(_DWORD *)(v52 + ++*((_DWORD *)this + 132) = 1;
        goto LABEL_22;
      }
      *(_DWORD *)(v52 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
      *(void *)(v52 + 128) = 0x100000001;
    }
    *(unsigned char *)(v52 + 168) = 0;
    *(unsigned char *)(v52 + 142) = 0;
  }
LABEL_22:
  std::string::size_type v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 136) = ausdk::AUElement::GetParameter(v54, 0x38u);
  uint64_t v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(unsigned char *)(*((void *)this + 85) + 14std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = ausdk::AUElement::GetParameter(v55, 0x39u) != 0.0;
  std::string::size_type v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(unsigned char *)(*((void *)this + 85) + 14freeMatrix(*((_DWORD *)this + 17), this + 1) = ausdk::AUElement::GetParameter(v56, 0x3Au) != 0.0;
  int v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(unsigned char *)(*((void *)this + 85) + 142) = ausdk::AUElement::GetParameter(v57, 0x3Bu) != 0.0;
  std::string::size_type v58 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 144) = ausdk::AUElement::GetParameter(v58, 0x3Cu);
  BOOL v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 148) = ausdk::AUElement::GetParameter(v59, 0x3Du);
  uint64_t v60 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 152) = ausdk::AUElement::GetParameter(v60, 0x3Eu);
  long long v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  *(float *)(*((void *)this + 85) + 156) = ausdk::AUElement::GetParameter(v61, 0x3Fu);
  int v62 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
  BOOL v63 = ausdk::AUElement::GetParameter(v62, 0x40u) != 0.0;
  uint64_t v64 = *((void *)this + 85);
  *(unsigned char *)(v64 + 168) = v63;
  uint64_t v65 = *(int *)(v64 + 120);
  uint64_t v66 = malloc_type_malloc(4 * v65, 0x2C8E6D5CuLL);
  uint64_t v67 = v66;
  if (v65 && !v66) {
    goto LABEL_37;
  }
  bzero(v66, 4 * v65);
  uint64_t v6 = *((void *)this + 85);
  *(void *)(v6 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v67;
  if ((*(_DWORD *)(v6 + 124) | 2) == 3)
  {
    if (*(int *)(v6 + 128) >= 2)
    {
      uint64_t v68 = 1;
      do
        v67[v68++] = 1;
      while (v68 < *(int *)(v6 + 128));
    }
  }
  else if (*(unsigned char *)(v6 + 168))
  {
    *(unsigned char *)(v6 + 168) = 0;
  }
  goto LABEL_31;
}

uint64_t AUEchoCancelerV5::CanScheduleParameters(AUEchoCancelerV5 *this)
{
  return 0;
}

uint64_t AUEchoCancelerV5::SetParameter(AUEchoCancelerV5 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
LABEL_3:
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    goto LABEL_9;
  }
  if (a2 > 0x29 || ((1 << a2) & 0x30000000001) == 0)
  {
    Scope = (AUEchoCancelerV5 *)((char *)this + 32);
    goto LABEL_3;
  }
  if (*((unsigned char *)this + 17)) {
    ++*((_DWORD *)this + 133);
  }
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEchoCancelerV5 *)((char *)this + 32), 0);
LABEL_9:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUEchoCancelerV5::SetProperty(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3801)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 688) = *a5 != 0;
      return result;
    }
    return 4294956445;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  if (a6 < 4) {
    return 4294956445;
  }
  int v8 = *a5;
  int v9 = *a5 != 0;
  if (v9 != (*(unsigned int (**)(AUEchoCancelerV5 *))(*(void *)this + 576))(this)) {
    (*(void (**)(AUEchoCancelerV5 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
  }
  return 0;
}

uint64_t AUEchoCancelerV5::GetProperty(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, CFArrayRef *a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 3799)
  {
    if (a2 != 3800)
    {
      if (a2 == 3900)
      {
        uint64_t v12 = *((void *)this + 72);
        uint64_t v13 = 16;
        if (*(int *)(*(void *)(v12 + 48) + 592) > 0) {
          uint64_t v13 = 40;
        }
        memcpy(*((void **)this + 73), *(const void **)(*(void *)(v12 + v13) + 48), 4 * *(int *)(*(void *)(v12 + v13) + 88));
        uint64_t v14 = (const void *)*((void *)this + 73);
        uint64_t v15 = *((unsigned int *)this + 84);
        goto LABEL_26;
      }
      if (a2 != 103800) {
        return result;
      }
    }
    uint64_t v9 = *((void *)this + 72);
    if (*((unsigned char *)this + 688))
    {
      uint64_t v10 = v9 + 16;
    }
    else
    {
      int v16 = *(_DWORD *)(*(void *)(v9 + 48) + 592);
      uint64_t v17 = v9 + 16;
      uint64_t v10 = v9 + 40;
      if (v16 <= 0) {
        uint64_t v10 = v17;
      }
    }
    memcpy(*((void **)this + 73), *(const void **)(*(void *)v10 + 48), 4 * *(int *)(*(void *)v10 + 88));
    if (a2 == 103800)
    {
      std::string __p = 0;
      float v22 = 0;
      uint64_t v23 = 0;
      UInt32 v18 = (_DWORD *)*((void *)this + 73);
      uint64_t v19 = (*(_DWORD *)(*((void *)this + 85) + 120) * **((_DWORD **)this + 85));
      p_p = &__p;
      if (v19)
      {
        uint64_t v20 = 4 * v19;
        do
        {
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, v18++);
          v20 -= 4;
        }
        while (v20);
      }
      *a5 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
      if (__p)
      {
        float v22 = __p;
        operator delete(__p);
      }
      return 0;
    }
    uint64_t v14 = (const void *)*((void *)this + 73);
    uint64_t v15 = **((unsigned int **)this + 85) * (uint64_t)*(int *)(*((void *)this + 85) + 120);
LABEL_26:
    memcpy(a5, v14, 4 * v15);
    return 0;
  }
  if (a2 == 21)
  {
    int v11 = (*(uint64_t (**)(AUEchoCancelerV5 *))(*(void *)this + 576))(this);
    uint64_t result = 0;
  }
  else
  {
    if (a2 != 3700) {
      return result;
    }
    uint64_t result = 0;
    int v11 = *((unsigned __int8 *)this + 376);
  }
  *(_DWORD *)a5 = v11;
  return result;
}

void sub_1BB5F79A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUEchoCancelerV5::GetPropertyInfo(AUEchoCancelerV5 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 3800)
  {
    if (a2 != 21)
    {
      if (a2 != 3700)
      {
        if (a2 != 3800) {
          return result;
        }
        *a6 = 0;
        int v8 = **((_DWORD **)this + 85) * *(_DWORD *)(*((void *)this + 85) + 120);
        goto LABEL_16;
      }
      *a6 = 0;
      goto LABEL_14;
    }
LABEL_12:
    *a6 = 1;
LABEL_14:
    int v9 = 4;
    goto LABEL_17;
  }
  if (a2 == 3801) {
    goto LABEL_12;
  }
  if (a2 == 3900)
  {
    *a6 = 0;
    int v8 = *((_DWORD *)this + 84);
LABEL_16:
    int v9 = 4 * v8;
    goto LABEL_17;
  }
  if (a2 != 103800) {
    return result;
  }
  *a6 = 0;
  int v9 = 8;
LABEL_17:
  uint64_t result = 0;
  *a5 = v9;
  return result;
}

uint64_t AUEchoCancelerV5::Reset(float **this)
{
  if (*((unsigned char *)this + 17))
  {
    vDSP_vclr(this[82], 1, (*((_DWORD *)this[85] + 30) * *((_DWORD *)this + 84)));
    uint64_t v2 = this[73];
    uint64_t v3 = (char *)this[74] - (char *)v2;
    if (v3 >= 1) {
      bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
    }
    uint64_t v4 = this[75];
    uint64_t v5 = (char *)this[76] - (char *)v4;
    if (v5 >= 1) {
      bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    }
    uint64_t v6 = this[77];
    uint64_t v7 = (char *)this[78] - (char *)v6;
    if (v7 >= 1) {
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    }
    int v8 = this[79];
    uint64_t v9 = (char *)this[80] - (char *)v8;
    if (v9 >= 1) {
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    }
    uint64_t v10 = (int **)this[72];
    if (v10)
    {
      int v11 = *v10;
      uint64_t v12 = v10[1];
      float v142 = *v10;
      uint64_t v14 = v10[6];
      uint64_t v13 = v10[7];
      lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[11]);
      lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[12]);
      if ((*v10)[26] >= 1)
      {
        lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[13]);
        lmsfilt_v5::resetLmsFilter((uint64_t *)&v142, (uint64_t)v10[14]);
      }
      vDSP_Length v15 = v11[32];
      vDSP_Length v16 = v11[10];
      vDSP_Length v17 = v11[36];
      int64_t v18 = v11[39];
      *(unsigned char *)uint64_t v14 = 1;
      v14[1] = 813694978;
      uint64_t v19 = (float *)*((void *)v14 + 1);
      if (v19) {
        vDSP_vclr(v19, 1, v15);
      }
      *((_OWORD *)v14 + freeMatrix(*((_DWORD *)this + 17), this + 1) = xmmword_1BB87A910;
      *((int32x2_t *)v14 + 4) = vdup_n_s32(0x30800002u);
      v14[10] = 813694978;
      uint64_t v20 = (float *)*((void *)v14 + 6);
      if (v20) {
        vDSP_vclr(v20, 1, v16);
      }
      AudioUnitParameterOptions v21 = (float *)*((void *)v14 + 7);
      if (v21) {
        vDSP_vclr(v21, 1, v17);
      }
      float v22 = (float *)*((void *)v14 + 8);
      if (v22) {
        vDSP_vclr(v22, 1, v16);
      }
      uint64_t v23 = (float *)*((void *)v14 + 9);
      if (v23) {
        vDSP_vclr(v23, 1, v16);
      }
      vDSP_Length v24 = (float *)*((void *)v14 + 10);
      if (v24) {
        vDSP_vclr(v24, 1, v16);
      }
      *((int32x2_t *)v14 + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = vdup_n_s32(0x30800002u);
      *(void *)(v14 + 37) = 0;
      *(void *)(v14 + 35) = 0;
      size_t v25 = (float *)*((void *)v14 + 15);
      if (v25) {
        vDSP_vclr(v25, 1, v18);
      }
      uint64_t v26 = v11[11];
      float v27 = expf(-2.4 / (float)(int)v26);
      int v28 = (float *)*((void *)v14 + 13);
      if ((int)v18 >= 1)
      {
        for (int64_t i = 0; i < v18; i += v26)
          v28[i] = 0.7;
      }
      if ((int)v15 < 1)
      {
        float v33 = 0.0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = 4 * v26;
        float v32 = v28 + 1;
        float v33 = 0.0;
        do
        {
          float v33 = v33 + v28[v30 * v26];
          if ((int)v26 >= 2)
          {
            float v34 = *(float *)((char *)v28 + v31 * v30);
            uint64_t v35 = v32;
            uint64_t v36 = v26 - 1;
            do
            {
              float v34 = v27 * v34;
              *v35++ = v34;
              float v33 = v33 + v34;
              --v36;
            }
            while (v36);
          }
          ++v30;
          float v32 = (float *)((char *)v32 + v31);
        }
        while (v30 != v15);
      }
      float __B = 1.0 / v33;
      vDSP_vsmul(v28, 1, &__B, v28, 1, v18);
      *((int32x2_t *)v14 + 27) = vdup_n_s32(0x30800002u);
      v14[56] = 0;
      *(_OWORD *)(v14 + 57) = xmmword_1BB87A920;
      *(void *)&long long v37 = 0x100000001;
      *((void *)&v37 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x100000001;
      *(_OWORD *)(v14 + 6freeMatrix(*((_DWORD *)this + 17), this + 1) = v37;
      *(void *)(v14 + 67) = 0;
      *(void *)(v14 + 69) = 0;
      *(void *)(v14 + 65) = 0;
      *(void *)(v14 + 7freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x3080000230800002;
      uint64_t v38 = (float *)*((void *)v14 + 37);
      if (v38) {
        vDSP_vclr(v38, 1, v16);
      }
      unsigned int v39 = (float *)*((void *)v14 + 38);
      if (v39) {
        vDSP_vclr(v39, 1, v16);
      }
      vDSP_Length v40 = v14[59];
      float v41 = (float *)*((void *)v14 + 20);
      if (v41) {
        vDSP_vclr(v41, 1, v14[59]);
      }
      unsigned int v42 = (float *)*((void *)v14 + 21);
      if (v42) {
        vDSP_vclr(v42, 1, v40);
      }
      unsigned int v43 = (float *)*((void *)v14 + 22);
      if (v43) {
        vDSP_vclr(v43, 1, v40);
      }
      if ((int)v40 >= 1)
      {
        long long v44 = (_DWORD *)*((void *)v14 + 24);
        unsigned int v45 = (_DWORD *)*((void *)v14 + 25);
        uint64_t v46 = v40;
        char v47 = (_DWORD *)*((void *)v14 + 26);
        do
        {
          *v44++ = 1;
          *v45++ = 1;
          *v47++ = 1;
          --v46;
        }
        while (v46);
      }
      int v48 = v14[59];
      if (v48 <= v14[63]) {
        int v48 = v14[63];
      }
      if (v48 >= 1) {
        memset_pattern16(*((void **)v14 + 23), &unk_1BB87C2B0, 4 * v48);
      }
      *((void *)v14 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      *((void *)v14 + 42) = 0;
      v14[94] = 0;
      bzero(*((void **)v14 + 41), 4 * v11[32]);
      *(void *)(v14 + 95) = 0;
      v14[97] = 1022739087;
      if (!v11[25])
      {
        int v49 = (float *)*((void *)v14 + 39);
        if (v49) {
          vDSP_vclr(v49, 1, v11[32]);
        }
        v14[80] = 0;
        v14[96] = v11[11];
      }
      __asm { FMOV            V0.2S, #1.0 }
      *((void *)v14 + 5std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = _D0;
      v14[102] = 1065353216;
      vDSP_Length v55 = v14[111];
      std::string::size_type v56 = (float *)*((void *)v14 + 62);
      if (v56) {
        vDSP_vclr(v56, 1, v14[111]);
      }
      int v57 = (float *)*((void *)v14 + 63);
      if (v57) {
        vDSP_vclr(v57, 1, v55);
      }
      std::string::size_type v58 = (float *)*((void *)v14 + 60);
      if (v58) {
        vDSP_vclr(v58, 1, v55);
      }
      BOOL v59 = (float *)*((void *)v14 + 61);
      if (v59) {
        vDSP_vclr(v59, 1, v55);
      }
      vDSP_Length v60 = v14[110];
      long long v61 = (float *)*((void *)v14 + 56);
      if (v61) {
        vDSP_vclr(v61, 1, v14[110]);
      }
      int v62 = (float *)*((void *)v14 + 57);
      if (v62) {
        vDSP_vclr(v62, 1, v60);
      }
      BOOL v63 = (float *)*((void *)v14 + 58);
      if (v63) {
        vDSP_vclr(v63, 1, v60);
      }
      uint64_t v64 = (float *)*((void *)v14 + 59);
      if (v64) {
        vDSP_vclr(v64, 1, v60);
      }
      v14[128] = 813694978;
      v14[137] = 0;
      *(_OWORD *)(v14 + 129) = 0u;
      *(_OWORD *)(v14 + 133) = 0u;
      *(_OWORD *)(v14 + 139) = xmmword_1BB87B8D0;
      *((_OWORD *)v14 + 36) = xmmword_1BB87A920;
      *((void *)v14 + 74) = 0;
      *((void *)v14 + 75) = 0xC1A0000000000000;
      *((_OWORD *)v14 + 38) = 0u;
      v14[156] = 0;
      *((void *)v14 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 3184315597;
      size_t v65 = v11[32];
      int v66 = v11[9];
      vDSP_Length v67 = v66 * (uint64_t)(int)v65;
      uint64_t v68 = v11[34];
      uint64_t v69 = v11[11];
      vDSP_Length v71 = v11[37];
      vDSP_Length v70 = v11[38];
      if (*(void *)v12) {
        vDSP_vclr(*(float **)v12, 1, v66 * (uint64_t)(int)v65);
      }
      float v72 = (float *)*((void *)v12 + 1);
      if (v72) {
        vDSP_vclr(v72, 1, v67);
      }
      float v73 = (float *)*((void *)v12 + 4);
      if (v73) {
        vDSP_vclr(v73, 1, 2 * v68);
      }
      if (!v11[25])
      {
        vDSP_Length v74 = v11[33];
        uint64_t v75 = (float *)**((void **)v12 + 7);
        if (v75) {
          vDSP_vclr(v75, 1, v11[33]);
        }
        vDSP_Length v76 = (float *)**((void **)v12 + 8);
        if (v76) {
          vDSP_vclr(v76, 1, v74);
        }
      }
      *((void *)v12 + 9) = 0;
      v12[20] = 0;
      bzero(*((void **)v12 + 11), 4 * v69);
      uint64_t v77 = (float *)*((void *)v12 + 2);
      if (v77) {
        vDSP_vclr(v77, 1, v71);
      }
      unsigned int v78 = (float *)*((void *)v12 + 3);
      if (v78) {
        vDSP_vclr(v78, 1, v71);
      }
      float __B = 9.0e-10;
      uint64_t v79 = (float *)*((void *)v12 + 12);
      if (v79) {
        vDSP_vfill(&__B, v79, 1, v70);
      }
      float v80 = (float *)*((void *)v12 + 13);
      if (v80) {
        vDSP_vclr(v80, 1, (int)v69 * (uint64_t)(int)v65);
      }
      memset(*((void **)v12 + 15), 1, v65);
      memset(*((void **)v12 + 16), 1, v65);
      bzero(*((void **)v12 + 17), v65);
      bzero(*((void **)v12 + 18), 4 * v65);
      float v81 = (float *)*((void *)v12 + 6);
      if (v81) {
        vDSP_vclr(v81, 1, v11[34]);
      }
      vDSP_Length v82 = v11[4];
      if (*(void *)v13) {
        vDSP_vclr(*(float **)v13, 1, v11[4]);
      }
      float v83 = (float *)*((void *)v13 + 1);
      if (v83) {
        vDSP_vclr(v83, 1, v82);
      }
      uint64_t v84 = (float *)*((void *)v13 + 2);
      if (v84) {
        vDSP_vclr(v84, 1, 2 * v11[34]);
      }
      long long v85 = (float *)*((void *)v13 + 4);
      vDSP_Length v86 = 2 * (int)v82;
      if (v85) {
        vDSP_vclr(v85, 1, 2 * (int)v82);
      }
      float v87 = (float *)*((void *)v13 + 6);
      if (v87) {
        vDSP_vclr(v87, 1, v86);
      }
      float v88 = (float *)*((void *)v13 + 8);
      if (v88)
      {
        vDSP_vclr(v88, 1, v82);
        float v89 = (float *)*((void *)v13 + 8);
        if (v89)
        {
          vDSP_vclr(v89, 1, v82);
          long long v90 = (float *)*((void *)v13 + 8);
          if (v90) {
            vDSP_vclr(v90, 1, v82);
          }
        }
      }
      float v91 = (float *)*((void *)v13 + 9);
      if (v91) {
        vDSP_vclr(v91, 1, v82);
      }
      uint64_t v92 = (float *)*((void *)v13 + 10);
      if (v92) {
        vDSP_vclr(v92, 1, v82);
      }
      long long v93 = (float *)*((void *)v13 + 11);
      if (v93) {
        vDSP_vclr(v93, 1, v82);
      }
      float v94 = (float *)*((void *)v13 + 12);
      if (v94) {
        vDSP_vclr(v94, 1, v82);
      }
      float v95 = (float *)*((void *)v13 + 13);
      if (v95) {
        vDSP_vclr(v95, 1, v82);
      }
      uint64_t v96 = (float *)*((void *)v13 + 14);
      if (v96) {
        vDSP_vclr(v96, 1, v82);
      }
      float v97 = (float *)*((void *)v13 + 15);
      if (v97) {
        vDSP_vclr(v97, 1, v82);
      }
      uint64_t v98 = (float *)*((void *)v13 + 16);
      if (v98) {
        vDSP_vclr(v98, 1, v82);
      }
      float v99 = (float *)*((void *)v13 + 17);
      if (v99) {
        vDSP_vclr(v99, 1, v82);
      }
      uint64_t v100 = (float *)*((void *)v13 + 21);
      if (v100) {
        vDSP_vclr(v100, 1, v82);
      }
      std::string::size_type v101 = (float *)*((void *)v13 + 18);
      if (v101) {
        vDSP_vclr(v101, 1, v86);
      }
      uint64_t v102 = (*v10)[34];
      long long v103 = (float *)*((void *)v13 + 37);
      if (v103) {
        vDSP_vclr(v103, 1, v82);
      }
      float v104 = (float *)*((void *)v13 + 38);
      if (v104) {
        vDSP_vclr(v104, 1, v82);
      }
      long long v105 = (float *)*((void *)v13 + 39);
      if (v105) {
        vDSP_vclr(v105, 1, v82);
      }
      float v106 = (float *)*((void *)v13 + 40);
      if (v106) {
        vDSP_vclr(v106, 1, v82);
      }
      long long v107 = (float *)*((void *)v13 + 41);
      if (v107) {
        vDSP_vclr(v107, 1, 2 * v102);
      }
      std::string v108 = (float *)*((void *)v13 + 43);
      if (v108) {
        vDSP_vclr(v108, 1, v86);
      }
      long long v109 = (float *)*((void *)v13 + 45);
      if (v109) {
        vDSP_vclr(v109, 1, v86);
      }
      uint64_t v110 = *v10;
      if (!(*v10)[25])
      {
        vDSP_Length v111 = v110[20];
        int v112 = v110[33];
        long long v113 = (float *)*((void *)v13 + 22);
        if (v113) {
          vDSP_vclr(v113, 1, v110[20]);
        }
        float v114 = (float *)*((void *)v13 + 23);
        if (v114) {
          vDSP_vclr(v114, 1, v111);
        }
        long long v115 = (float *)*((void *)v13 + 24);
        if (v115) {
          vDSP_vclr(v115, 1, v111);
        }
        uint64_t v116 = (float *)*((void *)v13 + 29);
        if (v116) {
          vDSP_vclr(v116, 1, v111);
        }
        float v117 = (float *)*((void *)v13 + 30);
        if (v117) {
          vDSP_vclr(v117, 1, v111);
        }
        float v118 = (float *)*((void *)v13 + 31);
        if (v118) {
          vDSP_vclr(v118, 1, v111);
        }
        long long v119 = (float *)*((void *)v13 + 32);
        if (v119) {
          vDSP_vclr(v119, 1, v111);
        }
        uint64_t v120 = (float *)*((void *)v13 + 34);
        if (v120) {
          vDSP_vclr(v120, 1, v111);
        }
        vDSP_Length v121 = v112 * (uint64_t)(int)v111;
        float v122 = (float *)**((void **)v13 + 33);
        if (v122) {
          vDSP_vclr(v122, 1, v121);
        }
        vDSP_Length v123 = 2 * v111;
        float v124 = (float *)**((void **)v13 + 35);
        if (v124) {
          vDSP_vclr(v124, 1, 2 * v121);
        }
        long long v125 = (float *)*((void *)v13 + 25);
        if (v125) {
          vDSP_vclr(v125, 1, v123);
        }
        uint64_t v126 = (float *)*((void *)v13 + 27);
        if (v126) {
          vDSP_vclr(v126, 1, v123);
        }
      }
      long long v127 = v10[6];
      vDSP_Length v128 = v127[107];
      vDSP_Length v129 = v127[106];
      float v130 = (float *)*((void *)v13 + 51);
      if (v130) {
        vDSP_vclr(v130, 1, v127[107]);
      }
      long long v131 = (float *)*((void *)v13 + 53);
      if (v131) {
        vDSP_vclr(v131, 1, v128);
      }
      uint64_t v132 = (float *)*((void *)v13 + 55);
      if (v132) {
        vDSP_vclr(v132, 1, v128);
      }
      long long v133 = (float *)*((void *)v13 + 57);
      if (v133) {
        vDSP_vclr(v133, 1, v129);
      }
      uint64_t v134 = (float *)*((void *)v13 + 58);
      if (v134) {
        vDSP_vclr(v134, 1, v129);
      }
      std::string::size_type v135 = (float *)*((void *)v13 + 59);
      if (v135) {
        vDSP_vclr(v135, 1, v129);
      }
      if ((*v10)[26] >= 1)
      {
        long long v136 = (float *)*((void *)v13 + 47);
        if (v136) {
          vDSP_vclr(v136, 1, v82);
        }
        long long v137 = (float *)*((void *)v13 + 48);
        if (v137) {
          vDSP_vclr(v137, 1, v82);
        }
        float v138 = (float *)*((void *)v13 + 49);
        if (v138) {
          vDSP_vclr(v138, 1, v82);
        }
        long long v139 = (float *)*((void *)v13 + 50);
        if (v139) {
          vDSP_vclr(v139, 1, v82);
        }
      }
    }
  }
  return 0;
}

void AUEchoCancelerV5::Cleanup(AUEchoCancelerV5 *this)
{
  uint64_t v2 = *((void *)this + 72);
  if (v2)
  {
    uint64_t v3 = *(void ***)(v2 + 64);
    if (v3)
    {
      if (!*v3 || (free(*v3), *v3 = 0, uint64_t v2 = *((void *)this + 72), (v3 = *(void ***)(v2 + 64)) != 0))
      {
        free(v3);
        *(void *)(v2 + 64) = 0;
        uint64_t v2 = *((void *)this + 72);
      }
    }
    uint64_t v4 = *(void *)(v2 + 56);
    if (v4 && *(void *)v4)
    {
      free(*(void **)v4);
      *(void *)uint64_t v4 = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v5 = *(void **)(v4 + 8);
    if (v5)
    {
      free(v5);
      *(void *)(v4 + 8) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v6 = *(void **)(v4 + 16);
    if (v6)
    {
      free(v6);
      *(void *)(v4 + 16) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v7 = *(void **)(v4 + 32);
    if (v7)
    {
      free(v7);
      *(void *)(v4 + 32) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    int v8 = *(void **)(v4 + 48);
    if (v8)
    {
      free(v8);
      *(void *)(v4 + 48) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v9 = *(void **)(v4 + 64);
    if (v9)
    {
      free(v9);
      *(void *)(v4 + 64) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v10 = *(void **)(v4 + 72);
    if (v10)
    {
      free(v10);
      *(void *)(v4 + 72) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    int v11 = *(void **)(v4 + 80);
    if (v11)
    {
      free(v11);
      *(void *)(v4 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v12 = *(void **)(v4 + 88);
    if (v12)
    {
      free(v12);
      *(void *)(v4 + 88) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v13 = *(void **)(v4 + 96);
    if (v13)
    {
      free(v13);
      *(void *)(v4 + 96) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v14 = *(void **)(v4 + 104);
    if (v14)
    {
      free(v14);
      *(void *)(v4 + 104) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    vDSP_Length v15 = *(void **)(v4 + 112);
    if (v15)
    {
      free(v15);
      *(void *)(v4 + 112) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    vDSP_Length v16 = *(void **)(v4 + 120);
    if (v16)
    {
      free(v16);
      *(void *)(v4 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    vDSP_Length v17 = *(void **)(v4 + 128);
    if (v17)
    {
      free(v17);
      *(void *)(v4 + 128) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    int64_t v18 = *(void **)(v4 + 136);
    if (v18)
    {
      free(v18);
      *(void *)(v4 + 136) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v19 = *(void **)(v4 + 168);
    if (v19)
    {
      free(v19);
      *(void *)(v4 + 168) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v20 = *(void **)(v4 + 144);
    if (v20)
    {
      free(v20);
      *(void *)(v4 + 144) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    AudioUnitParameterOptions v21 = *(void **)(v4 + 296);
    if (v21)
    {
      free(v21);
      *(void *)(v4 + 296) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    float v22 = *(void **)(v4 + 304);
    if (v22)
    {
      free(v22);
      *(void *)(v4 + 304) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v23 = *(void **)(v4 + 312);
    if (v23)
    {
      free(v23);
      *(void *)(v4 + 312) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    vDSP_Length v24 = *(void **)(v4 + 320);
    if (v24)
    {
      free(v24);
      *(void *)(v4 + 32std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    size_t v25 = *(void **)(v4 + 328);
    if (v25)
    {
      free(v25);
      *(void *)(v4 + 328) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    uint64_t v26 = *(void **)(v4 + 344);
    if (v26)
    {
      free(v26);
      *(void *)(v4 + 344) = 0;
      uint64_t v2 = *((void *)this + 72);
      uint64_t v4 = *(void *)(v2 + 56);
    }
    float v27 = *(void **)(v4 + 360);
    if (v27)
    {
      free(v27);
      *(void *)(v4 + 36std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      uint64_t v2 = *((void *)this + 72);
    }
    if (!*(_DWORD *)(*(void *)v2 + 100))
    {
      int v28 = *(void **)(v2 + 56);
      CFStringRef v29 = (void *)v28[22];
      if (v29)
      {
        free(v29);
        v28[22] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      uint64_t v30 = (void *)v28[23];
      if (v30)
      {
        free(v30);
        v28[23] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      uint64_t v31 = (void *)v28[24];
      if (v31)
      {
        free(v31);
        v28[24] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      float v32 = (void *)v28[25];
      if (v32)
      {
        free(v32);
        v28[25] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      float v33 = (void *)v28[27];
      if (v33)
      {
        free(v33);
        v28[27] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      float v34 = (void *)v28[29];
      if (v34)
      {
        free(v34);
        v28[29] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      uint64_t v35 = (void *)v28[30];
      if (v35)
      {
        free(v35);
        v28[30] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      uint64_t v36 = (void *)v28[31];
      if (v36)
      {
        free(v36);
        v28[31] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      long long v37 = (void **)v28[33];
      if (v37)
      {
        if (!*v37
          || (free(*v37),
              ausdk::AUElement *v37 = 0,
              uint64_t v2 = *((void *)this + 72),
              int v28 = *(void **)(v2 + 56),
              (long long v37 = (void **)v28[33]) != 0))
        {
          free(v37);
          v28[33] = 0;
          uint64_t v2 = *((void *)this + 72);
          int v28 = *(void **)(v2 + 56);
        }
      }
      uint64_t v38 = (void *)v28[34];
      if (v38)
      {
        free(v38);
        v28[34] = 0;
        uint64_t v2 = *((void *)this + 72);
        int v28 = *(void **)(v2 + 56);
      }
      unsigned int v39 = (void **)v28[35];
      if (v39)
      {
        if (!*v39
          || (free(*v39),
              *unsigned int v39 = 0,
              uint64_t v2 = *((void *)this + 72),
              int v28 = *(void **)(v2 + 56),
              (unsigned int v39 = (void **)v28[35]) != 0))
        {
          free(v39);
          v28[35] = 0;
          uint64_t v2 = *((void *)this + 72);
          int v28 = *(void **)(v2 + 56);
        }
      }
      vDSP_Length v40 = (void *)v28[36];
      if (v40)
      {
        free(v40);
        v28[36] = 0;
        uint64_t v2 = *((void *)this + 72);
      }
      dft_v3::dftRemove((void **)(v2 + 72));
      uint64_t v2 = *((void *)this + 72);
    }
    float v41 = *(void **)(v2 + 56);
    unsigned int v42 = (void *)v41[51];
    if (v42)
    {
      free(v42);
      v41[51] = 0;
      uint64_t v2 = *((void *)this + 72);
      float v41 = *(void **)(v2 + 56);
    }
    unsigned int v43 = (void *)v41[53];
    if (v43)
    {
      free(v43);
      v41[53] = 0;
      uint64_t v2 = *((void *)this + 72);
      float v41 = *(void **)(v2 + 56);
    }
    long long v44 = (void *)v41[55];
    if (v44)
    {
      free(v44);
      v41[55] = 0;
      uint64_t v2 = *((void *)this + 72);
      float v41 = *(void **)(v2 + 56);
    }
    unsigned int v45 = (void *)v41[57];
    if (v45)
    {
      free(v45);
      v41[57] = 0;
      uint64_t v2 = *((void *)this + 72);
      float v41 = *(void **)(v2 + 56);
    }
    uint64_t v46 = (void *)v41[58];
    if (v46)
    {
      free(v46);
      v41[58] = 0;
      uint64_t v2 = *((void *)this + 72);
      float v41 = *(void **)(v2 + 56);
    }
    char v47 = (void *)v41[59];
    if (v47)
    {
      free(v47);
      v41[59] = 0;
      uint64_t v2 = *((void *)this + 72);
    }
    dft_v3::dftRemove((void **)(v2 + 80));
    lmsfilt_v5::removeLmsFilter((uint64_t *)(*((void *)this + 72) + 88));
    lmsfilt_v5::removeLmsFilter((uint64_t *)(*((void *)this + 72) + 96));
    int v48 = (uint64_t *)*((void *)this + 72);
    if (*(int *)(*v48 + 104) >= 1)
    {
      lmsfilt_v5::removeLmsFilter(v48 + 13);
      lmsfilt_v5::removeLmsFilter((uint64_t *)(*((void *)this + 72) + 112));
      int v48 = (uint64_t *)*((void *)this + 72);
      int v49 = (void *)v48[7];
      BOOL v50 = (void *)v49[47];
      if (v50)
      {
        free(v50);
        v49[47] = 0;
        int v48 = (uint64_t *)*((void *)this + 72);
        int v49 = (void *)v48[7];
      }
      int v51 = (void *)v49[49];
      if (v51)
      {
        free(v51);
        v49[49] = 0;
        int v48 = (uint64_t *)*((void *)this + 72);
        int v49 = (void *)v48[7];
      }
      uint64_t v52 = (void *)v49[48];
      if (v52)
      {
        free(v52);
        v49[48] = 0;
        int v48 = (uint64_t *)*((void *)this + 72);
        int v49 = (void *)v48[7];
      }
      int v53 = (void *)v49[50];
      if (v53)
      {
        free(v53);
        v49[50] = 0;
        int v48 = (uint64_t *)*((void *)this + 72);
      }
    }
    std::string::size_type v54 = (void *)v48[6];
    if (v54)
    {
      vDSP_Length v55 = (void *)v54[39];
      if (v55)
      {
        free(v55);
        v54[39] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      std::string::size_type v56 = (void *)v54[41];
      if (v56)
      {
        free(v56);
        v54[41] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      int v57 = (void *)v54[1];
      if (v57)
      {
        free(v57);
        v54[1] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      std::string::size_type v58 = (void *)v54[6];
      if (v58)
      {
        free(v58);
        v54[6] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      BOOL v59 = (void *)v54[7];
      if (v59)
      {
        free(v59);
        v54[7] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      vDSP_Length v60 = (void *)v54[8];
      if (v60)
      {
        free(v60);
        v54[8] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      long long v61 = (void *)v54[9];
      if (v61)
      {
        free(v61);
        v54[9] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      int v62 = (void *)v54[10];
      if (v62)
      {
        free(v62);
        v54[10] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      BOOL v63 = (void *)v54[15];
      if (v63)
      {
        free(v63);
        v54[15] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      uint64_t v64 = (void *)v54[13];
      if (v64)
      {
        free(v64);
        v54[13] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      size_t v65 = (void *)v54[79];
      if (v65)
      {
        free(v65);
        v54[79] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      int v66 = (void *)v54[14];
      if (v66)
      {
        free(v66);
        v54[14] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      vDSP_Length v67 = (void *)v54[12];
      if (v67)
      {
        free(v67);
        v54[12] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      uint64_t v68 = (void *)v54[20];
      if (v68)
      {
        free(v68);
        v54[20] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      uint64_t v69 = (void *)v54[21];
      if (v69)
      {
        free(v69);
        v54[21] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      vDSP_Length v70 = (void *)v54[22];
      if (v70)
      {
        free(v70);
        v54[22] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      vDSP_Length v71 = (void *)v54[23];
      if (v71)
      {
        free(v71);
        v54[23] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      float v72 = (void *)v54[24];
      if (v72)
      {
        free(v72);
        v54[24] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      float v73 = (void *)v54[25];
      if (v73)
      {
        free(v73);
        v54[25] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      vDSP_Length v74 = (void *)v54[26];
      if (v74)
      {
        free(v74);
        v54[26] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      uint64_t v75 = (void *)v54[37];
      if (v75)
      {
        free(v75);
        v54[37] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      vDSP_Length v76 = (void *)v54[38];
      if (v76)
      {
        free(v76);
        v54[38] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      uint64_t v77 = (void *)v54[56];
      if (v77)
      {
        free(v77);
        v54[56] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      unsigned int v78 = (void *)v54[57];
      if (v78)
      {
        free(v78);
        v54[57] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      uint64_t v79 = (void *)v54[58];
      if (v79)
      {
        free(v79);
        v54[58] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      float v80 = (void *)v54[59];
      if (v80)
      {
        free(v80);
        v54[59] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      float v81 = (void *)v54[62];
      if (v81)
      {
        free(v81);
        v54[62] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      vDSP_Length v82 = (void *)v54[63];
      if (v82)
      {
        free(v82);
        v54[63] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      float v83 = (void *)v54[60];
      if (v83)
      {
        free(v83);
        v54[60] = 0;
        std::string::size_type v54 = (void *)v48[6];
      }
      uint64_t v84 = (void *)v54[61];
      if (!v84 || (free(v84), v54[61] = 0, (std::string::size_type v54 = (void *)v48[6]) != 0))
      {
        free(v54);
        v48[6] = 0;
      }
    }
    long long v85 = (uint64_t *)*((void *)this + 72);
    uint64_t v86 = v85[1];
    if (v86)
    {
      uint64_t v87 = *v85;
      if (*(void *)v86)
      {
        free(*(void **)v86);
        *(void *)uint64_t v86 = 0;
        uint64_t v86 = v85[1];
      }
      float v88 = *(void **)(v86 + 8);
      if (v88)
      {
        free(v88);
        *(void *)(v86 + 8) = 0;
        uint64_t v86 = v85[1];
      }
      float v89 = *(void **)(v86 + 32);
      if (v89)
      {
        free(v89);
        *(void *)(v86 + 32) = 0;
        uint64_t v86 = v85[1];
      }
      if (!*(_DWORD *)(v87 + 100))
      {
        long long v90 = *(void ***)(v86 + 56);
        if (v90 && *v90)
        {
          free(*v90);
          *long long v90 = 0;
          uint64_t v86 = v85[1];
        }
        float v91 = *(void ***)(v86 + 64);
        if (v91 && *v91)
        {
          free(*v91);
          float *v91 = 0;
          uint64_t v86 = v85[1];
        }
        uint64_t v92 = *(void **)(v86 + 56);
        if (v92)
        {
          free(v92);
          *(void *)(v86 + 56) = 0;
          uint64_t v86 = v85[1];
        }
        long long v93 = *(void **)(v86 + 64);
        if (v93)
        {
          free(v93);
          *(void *)(v86 + 64) = 0;
          uint64_t v86 = v85[1];
        }
      }
      float v94 = *(void **)(v86 + 88);
      if (v94)
      {
        free(v94);
        *(void *)(v86 + 88) = 0;
        uint64_t v86 = v85[1];
      }
      float v95 = *(void **)(v86 + 16);
      if (v95)
      {
        free(v95);
        *(void *)(v86 + 16) = 0;
        uint64_t v86 = v85[1];
      }
      uint64_t v96 = *(void **)(v86 + 24);
      if (v96)
      {
        free(v96);
        *(void *)(v86 + 24) = 0;
        uint64_t v86 = v85[1];
      }
      float v97 = *(void **)(v86 + 96);
      if (v97)
      {
        free(v97);
        *(void *)(v86 + 96) = 0;
        uint64_t v86 = v85[1];
      }
      uint64_t v98 = *(void **)(v86 + 104);
      if (v98)
      {
        free(v98);
        *(void *)(v86 + 104) = 0;
        uint64_t v86 = v85[1];
      }
      float v99 = *(void **)(v86 + 120);
      if (v99)
      {
        free(v99);
        *(void *)(v86 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
        uint64_t v86 = v85[1];
      }
      uint64_t v100 = *(void **)(v86 + 128);
      if (v100)
      {
        free(v100);
        *(void *)(v86 + 128) = 0;
        uint64_t v86 = v85[1];
      }
      std::string::size_type v101 = *(void **)(v86 + 136);
      if (v101)
      {
        free(v101);
        *(void *)(v86 + 136) = 0;
        uint64_t v86 = v85[1];
      }
      uint64_t v102 = *(void **)(v86 + 144);
      if (v102)
      {
        free(v102);
        *(void *)(v86 + 144) = 0;
        uint64_t v86 = v85[1];
      }
      long long v103 = *(void **)(v86 + 160);
      if (!v103 || (free(v103), *(void *)(v86 + 160) = 0, (uint64_t v86 = v85[1]) != 0))
      {
        free((void *)v86);
        v85[1] = 0;
      }
    }
    dft_v3::dftRemove(*((void ***)this + 72));
    float v104 = (void *)*((void *)this + 72);
    long long v105 = (void *)v104[7];
    if (!v105 || (free(v105), v104[7] = 0, (float v104 = (void *)*((void *)this + 72)) != 0)) {
      free(v104);
    }
    *((void *)this + 72) = 0;
  }
  float v106 = (void *)*((void *)this + 82);
  if (v106)
  {
    free(v106);
    *((void *)this + 82) = 0;
  }
  long long v107 = (void *)*((void *)this + 85);
  if (v107)
  {
    std::string v108 = (void *)v107[20];
    if (!v108 || (free(v108), v107[20] = 0, (long long v107 = (void *)*((void *)this + 85)) != 0))
    {
      free(v107);
      *((void *)this + 85) = 0;
    }
  }
}

uint64_t AUEchoCancelerV5::Initialize(int32x2_t *this)
{
  int32x2_t v2 = this[15];
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(int32x2_t))(**(void **)&v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*(void *)&this[13] - *(void *)&this[12]) >> 3;
  }
  int32x2_t v4 = this[21];
  if (v4) {
    LODWORD(v5) = (*(uint64_t (**)(int32x2_t))(**(void **)&v4 + 24))(v4);
  }
  else {
    uint64_t v5 = (*(void *)&this[19] - *(void *)&this[18]) >> 3;
  }
  if (v3 >= 2)
  {
    unsigned int v6 = 1;
    do
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], v6 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], v6) + 80)) {
        return 4294956428;
      }
    }
    while (v3 != ++v6);
  }
  if (v5 >= 2)
  {
    unsigned int v8 = 1;
    do
    {
      uint64_t v9 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], v8 - 1);
      if (*(double *)(v9 + 80) != *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], v8) + 80)) {
        return 4294956428;
      }
    }
    while (v5 != ++v8);
  }
  double v10 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], 0) + 80);
  if (v10 != *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], 0) + 80)) {
    return 4294956428;
  }
  this[67].i32[0] = this[66].i32[1];
  *(_OWORD *)this[68].i8 = 0u;
  this[70] = vdup_n_s32(0xC2C80000);
  this[71].i32[0] = -1027080192;
  this[83].i32[0] = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], 1u) + 108);
  uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
  *(float *)&this[83].i32[1] = ausdk::AUElement::GetParameter(v12, 0x2Eu);
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)&this[4], 0);
  this[84].i8[0] = ausdk::AUElement::GetParameter(v13, 0x41u) != 0.0;
  if (this[42].i32[0]) {
    AUEchoCancelerV5::InitializeEC((AUEchoCancelerV5 *)this);
  }
  return 4294956421;
}

void AUEchoCancelerV5::~AUEchoCancelerV5(AUEchoCancelerV5 *this)
{
  AUEchoCancelerV5::~AUEchoCancelerV5(this);

  JUMPOUT(0x1C185D370);
}

{
  unsigned char *v2;
  unsigned char *v3;
  unsigned char *v4;
  unsigned char *v5;
  unsigned char *v6;
  unsigned char *v7;
  unsigned char *v8;
  unsigned char *v9;
  uint64_t vars8;

  *(void *)this = &unk_1F14BA158;
  AUEchoCancelerV5::Cleanup(this);
  int32x2_t v2 = (unsigned char *)*((void *)this + 79);
  if (v2)
  {
    uint64_t v3 = (unsigned char *)*((void *)this + 80);
    if (v3 != v2) {
      *((void *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *((void *)this + 79) = 0;
    *((void *)this + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  int32x2_t v4 = (unsigned char *)*((void *)this + 77);
  if (v4)
  {
    uint64_t v5 = (unsigned char *)*((void *)this + 78);
    if (v5 != v4) {
      *((void *)this + 78) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v4);
    *((void *)this + 77) = 0;
    *((void *)this + 78) = 0;
  }
  unsigned int v6 = (unsigned char *)*((void *)this + 75);
  if (v6)
  {
    uint64_t v7 = (unsigned char *)*((void *)this + 76);
    if (v7 != v6) {
      *((void *)this + 76) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v6);
    *((void *)this + 75) = 0;
    *((void *)this + 76) = 0;
  }
  unsigned int v8 = (unsigned char *)*((void *)this + 73);
  if (v8)
  {
    uint64_t v9 = (unsigned char *)*((void *)this + 74);
    if (v9 != v8) {
      *((void *)this + 74) = &v9[(v8 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v8);
    *((void *)this + 73) = 0;
    *((void *)this + 74) = 0;
  }

  ausdk::AUBase::~AUBase(this);
}

unint64_t VoiceProcessorV9::ProcessDownlinkAudio(VoiceProcessorV9 *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  uint64_t v7 = a5;
  uint64_t v556 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (char *)this + 12552;
  atomic_fetch_add((atomic_uint *volatile)this + 621, 1u);
  if (!*((_DWORD *)this + 620))
  {
    v539 = a2;
    v535 = a3;
    long long v536 = a4;
    if (!*((unsigned char *)this + 477))
    {
      VoiceProcessorV2::LogIOError((uint64_t)this, 23.005, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "processdl: not ok to process?!", a3, a4, a5, a6, a7);
      double v10 = (VoiceProcessorV9 *)((char *)this + 2576);
      CADeprecated::CAMutex::Lock((VoiceProcessorV9 *)((char *)this + 2576));
      goto LABEL_3;
    }
    uint64_t v15 = a6;
    double v13 = 0.0;
    if (*((unsigned char *)this + 15961))
    {
      if (*((void *)this + 1579))
      {
        double v13 = (double)mach_absolute_time() * 0.0000000416666667;
        if (*((double *)this + 1994) == 0.0) {
          *((double *)this + 1994) = v13;
        }
      }
    }
    (*(void (**)(AudioTimeStamp *__return_ptr, VoiceProcessorV9 *, const AudioTimeStamp *))(*(void *)this + 688))(&buf, this, a7);
    AudioTimeStamp v548 = buf;
    if (v9[3409])
    {
      if (*v9)
      {
        double v16 = *((double *)this + 1568);
        HIDWORD(v17) = HIDWORD(v548.mSampleTime);
        if (v16 != v548.mSampleTime)
        {
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v16, v548.mSampleTime, 2);
          double v17 = *((double *)this + 1568);
          if (v548.mSampleTime < v17)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            int64_t v18 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                uint64_t v20 = *((void *)this + 1568);
                LODWORD(buf.mSampleTime) = 136316674;
                *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 75;
                WORD1(buf.mRateScalar) = 2048;
                *(void *)((char *)&buf.mRateScalar + 4) = v20;
                WORD2(buf.mWordClockTime) = 2048;
                *(UInt64 *)((char *)&buf.mWordClockTime + 6) = *(void *)&v548.mSampleTime;
                HIWORD(buf.mSMPTETime.mCounter) = 2048;
                *(void *)&buf.mSMPTETime.mType = v548.mHostTime;
                buf.mSMPTETime.mHours = 2048;
                *(Float64 *)&buf.mSMPTETime.mMinutes = v548.mRateScalar;
                HIWORD(buf.mFlags) = 1024;
                buf.mReserved = v548.mFlags;
                _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", (uint8_t *)&buf, 0x40u);
              }
            }
            AudioUnitParameterOptions v21 = (int *)*((void *)this + 1578);
            if (v21 && (v9[3409] || v9[3410]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v21, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 75, "ProcessDownlinkAudio", "sprk sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 1568), v548.mSampleTime, v548.mHostTime, v548.mRateScalar, v548.mFlags);
            }
            VoiceProcessorV2::LogIOError((uint64_t)this, 23.008, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "sprk sample time jumped backwards");
          }
        }
      }
      else
      {
        char *v9 = 1;
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v548.mSampleTime, 2);
        double v17 = *((double *)this + 215);
        double v22 = v548.mSampleTime - v17;
        double v23 = (float)((float)((float)(roundf(*((float *)this + 289) * (float)*((unsigned int *)this + 124))
                                    + (float)*((unsigned int *)this + 124))
                            + (float)*((unsigned int *)this + 293))
                    + (float)*((unsigned int *)this + 294));
        if (v548.mSampleTime - v17 != v23)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          vDSP_Length v24 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            size_t v25 = (*v24 ? *v24 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf.mSampleTime) = 136315906;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 65;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = v23;
              WORD2(buf.mWordClockTime) = 2048;
              *(double *)((char *)&buf.mWordClockTime + 6) = v22;
              _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", (uint8_t *)&buf, 0x26u);
            }
          }
          uint64_t v26 = (int *)*((void *)this + 1578);
          if (v26 && (v9[3409] || v9[3410]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v26, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 65, "ProcessDownlinkAudio", "bad mic-speaker delay: expected sample time diff: %.1lf, actual sample time diff: %.1lf", v23, v22);
          }
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.009, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "bad relative mic-ref TS");
        }
      }
      LODWORD(v17) = *((_DWORD *)this + 121);
      *((double *)this + 1568) = v548.mSampleTime + (double)*(unint64_t *)&v17;
    }
    long long v546 = (char *)this + 2488;
    char v547 = 0;
    char v547 = (*(uint64_t (**)(void))(*((void *)this + 311) + 16))();
    CADeprecated::CAMutex::Lock((VoiceProcessorV9 *)((char *)this + 2576));
    ++*((_DWORD *)this + 3130);
    CADeprecated::CAMutex::Unlock((VoiceProcessorV9 *)((char *)this + 2576));
    UInt32 v27 = *((_DWORD *)this + 121);
    UInt32 NumberOfSourceFrames = v27;
    UInt32 v545 = v27;
    int v28 = v9[3409];
    if (v9[3409])
    {
      v9[385] = 1;
      if (v7->mNumberBuffers == *((_DWORD *)this + 89))
      {
        CFStringRef v29 = (VoiceProcessorV9 *)((char *)this + 328);
LABEL_53:
        if (!v539)
        {
          uint64_t v30 = (AudioBufferList *)*((void *)this + 199);
          UInt32 mNumberBuffers = v30->mNumberBuffers;
          v539 = v30;
          if (mNumberBuffers)
          {
            unint64_t v32 = 0;
            p_mData = &v30->mBuffers[0].mData;
            do
            {
              bzero(*p_mData, *((unsigned int *)p_mData - 1));
              ++v32;
              p_mData += 2;
            }
            while (v32 < v539->mNumberBuffers);
            int v28 = v9[3409];
          }
        }
        if (v28 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 1, v15, v539), v9[3409]) || v9[3410]) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x32u, v15, v539, &v548);
        }
        float v34 = v535;
        if (!v535)
        {
          float v34 = (AudioBufferList *)*((void *)this + 200);
          if (v34->mNumberBuffers)
          {
            unint64_t v35 = 0;
            uint64_t v36 = &v34->mBuffers[0].mData;
            do
            {
              long long v37 = v34;
              bzero(*v36, *((unsigned int *)v36 - 1));
              float v34 = v37;
              ++v35;
              v36 += 2;
            }
            while (v35 < v37->mNumberBuffers);
          }
        }
        v535 = v34;
        if (v9[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 10, v15, v535), v9[3409]) || v9[3410]) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x53u, v15, v535, &v548);
        }
        uint64_t v38 = v536;
        if (!v536)
        {
          uint64_t v38 = (AudioBufferList *)*((void *)this + 201);
          if (v38->mNumberBuffers)
          {
            unint64_t v39 = 0;
            vDSP_Length v40 = &v38->mBuffers[0].mData;
            do
            {
              float v41 = v38;
              bzero(*v40, *((unsigned int *)v40 - 1));
              uint64_t v38 = v41;
              ++v39;
              v40 += 2;
            }
            while (v39 < v41->mNumberBuffers);
          }
        }
        long long v536 = v38;
        if (v9[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 11, v15, v536), v9[3409]) || v9[3410]) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x54u, v15, v536, &v548);
        }
        UInt32 v27 = *((_DWORD *)this + 121);
LABEL_79:
        if (v27 == v15)
        {
          if (v7->mBuffers[0].mDataByteSize == *((_DWORD *)this + 88) * v15)
          {
            if (!v9[3331]) {
              goto LABEL_227;
            }
            v9[3331] = 0;
            double v42 = (double)(mach_absolute_time() - *((void *)this + 1988)) * 0.0000000416666667;
            VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3130), (float)*((unsigned int *)this + 121), (float)v15, "processdownlinkaudio: <block size no longer mismatched>");
            if (v42 <= 1.0)
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              long long v85 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
              if (v85)
              {
                uint64_t v86 = v85;
                if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf.mSampleTime) = 136315650;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 205;
                  WORD1(buf.mRateScalar) = 2048;
                  *(double *)((char *)&buf.mRateScalar + 4) = v42;
                  _os_log_impl(&dword_1BB0CE000, v86, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
                }
              }
              uint64_t v87 = (int *)*((void *)this + 1578);
              if (v87 && (v9[3409] || v9[3410]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v87, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 205, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v42);
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v88 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
              if (v88)
              {
                float v89 = v88;
                if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                {
                  int v90 = *((_DWORD *)this + 121);
                  LODWORD(buf.mSampleTime) = 136315906;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 206;
                  WORD1(buf.mRateScalar) = 1024;
                  HIDWORD(buf.mRateScalar) = v15;
                  LOWORD(buf.mWordClockTime) = 1024;
                  *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v90;
                  _os_log_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", (uint8_t *)&buf, 0x1Eu);
                }
              }
              int v49 = (int *)*((void *)this + 1578);
              if (v49 && (v9[3409] || v9[3410]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v50 = 206;
                int v51 = 2;
                goto LABEL_226;
              }
            }
            else
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              unsigned int v43 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
              if (v43)
              {
                long long v44 = v43;
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf.mSampleTime) = 136315650;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 200;
                  WORD1(buf.mRateScalar) = 2048;
                  *(double *)((char *)&buf.mRateScalar + 4) = v42;
                  _os_log_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
                }
              }
              unsigned int v45 = (int *)*((void *)this + 1578);
              if (v45 && (v9[3409] || v9[3410]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v45, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 200, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v42);
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v46 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
              if (v46)
              {
                char v47 = v46;
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
                  int v48 = *((_DWORD *)this + 121);
                  LODWORD(buf.mSampleTime) = 136315906;
                  *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                  WORD2(buf.mHostTime) = 1024;
                  *(_DWORD *)((char *)&buf.mHostTime + 6) = 201;
                  WORD1(buf.mRateScalar) = 1024;
                  HIDWORD(buf.mRateScalar) = v15;
                  LOWORD(buf.mWordClockTime) = 1024;
                  *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v48;
                  _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", (uint8_t *)&buf, 0x1Eu);
                }
              }
              int v49 = (int *)*((void *)this + 1578);
              if (v49 && (v9[3409] || v9[3410]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v50 = 201;
                int v51 = 1;
LABEL_226:
                CALegacyLog::log(v49, v51, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", v50, "ProcessDownlinkAudio", "processdownlinkaudio: <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", v15, *((_DWORD *)this + 121));
              }
            }
LABEL_227:
            float v91 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 48);
            unsigned int v92 = *((_DWORD *)this + 121);
            if (*((void *)this + 47))
            {
              if (v91)
              {
                UInt32 NumberOfSourceFrames = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v91);
                float v91 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 47);
LABEL_234:
                unsigned int v92 = VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(*v91);
                goto LABEL_235;
              }
              float v91 = (VoiceProcessor::SampleRateConverter **)*((void *)this + 47);
            }
            else if (!v91)
            {
LABEL_235:
              long long v93 = (unsigned int *)*((void *)this + 13);
              uint64_t v94 = *v93;
              if ((int)v94 >= 1)
              {
                int v95 = v92 * *((_DWORD *)this + 58);
                uint64_t v96 = (int *)(v93 + 3);
                do
                {
                  *uint64_t v96 = v95;
                  v96 += 4;
                  --v94;
                }
                while (v94);
              }
              UInt32 v543 = v92;
              uint64_t v97 = (*(uint64_t (**)(void))(*((void *)this + 12) + 16))();
              unint64_t v98 = v543;
              UInt32 v545 = v543;
              float v99 = (const AudioBufferList *)*((void *)this + 13);
              if (v9[3409]
                && (VoiceProcessorV2::InjectionFilesReadSignal(this, 0, v543, *((AudioBufferList **)this + 13)),
                    float v99 = (const AudioBufferList *)*((void *)this + 13),
                    v9[3409])
                || v9[3410])
              {
                uint64_t v97 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x33u, v543, v99, &v548);
                float v99 = (const AudioBufferList *)*((void *)this + 13);
              }
              uint64_t v100 = *((void *)this + 2003);
              if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
                dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_19642);
              }
              if (AudioIssueDetectorLibraryLoader(void)::libSym) {
                uint64_t v97 = AudioIssueDetectorLibraryLoader(void)::libSym(v100, 51, 0, v99, v543, &v548);
              }
              if (*((unsigned char *)this + 2082) || *((_DWORD *)this + 19) == 7 && *((float *)this + 3132) == 0.0)
              {
                vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&buf, *((const AudioBufferList **)this + 13));
                v551.Float64 mSampleTime = buf.mSampleTime;
                *(void *)&buf.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v551);
                buf.mHostTime = v101;
                *(void *)&v554.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v551);
                v554.mHostTime = v102;
                while (1)
                {
                  uint64_t v97 = vp::Audio_Buffer_Iterator::operator!=(&buf, &v554);
                  if ((v97 & 1) == 0) {
                    break;
                  }
                  Float64 mSampleTime = buf.mSampleTime;
                  unsigned int frame_count = vp::Audio_Buffer_Ref::get_frame_count((vp::Audio_Buffer_Ref *)&buf);
                  vp::fill(*(float ***)&mSampleTime, frame_count, 0.0);
                  vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
                }
              }
              int v105 = *((_DWORD *)this + 55);
              if ((v105 & 0x20) != 0)
              {
                int v108 = *((_DWORD *)this + 59);
                if ((v108 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf.mSampleTime) = 136315394;
                    *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(buf.mHostTime) = 1024;
                    *(_DWORD *)((char *)&buf.mHostTime + 6) = 276;
                    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                  }
                  exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
                  *(void *)exceptiounint64_t n = &unk_1F14C8B68;
                  exception[2] = -50;
                }
                MEMORY[0x1F4188790](v97);
                long long v107 = (int *)((char *)&v517 - v109);
                bzero((char *)&v517 - v109, v110);
              }
              else
              {
                MEMORY[0x1F4188790](v97);
                long long v107 = (int *)&v515;
                uint64_t v515 = 0;
                long long v516 = 0uLL;
                int v108 = 1;
              }
              unint64_t v111 = 0;
              id v518 = (char *)this + 17168;
              *long long v107 = v108;
              uint64_t v112 = 2;
              if ((v105 & 0x20) != 0) {
                goto LABEL_258;
              }
LABEL_257:
              for (unint64_t i = 1; v111 < i; unint64_t i = *((unsigned int *)this + 59))
              {
                *(_OWORD *)&v107[v112] = *(_OWORD *)(*((void *)this + 13) + v112 * 4);
                ++v111;
                v112 += 4;
                if ((v105 & 0x20) == 0) {
                  goto LABEL_257;
                }
LABEL_258:
                ;
              }
              id v519 = a7;
              int v114 = *((_DWORD *)this + 65);
              if ((v114 & 0x20) != 0)
              {
                int v116 = *((_DWORD *)this + 69);
                if ((v116 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf.mSampleTime) = 136315394;
                    *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(buf.mHostTime) = 1024;
                    *(_DWORD *)((char *)&buf.mHostTime + 6) = 282;
                    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&buf, 0x12u);
                  }
                  v504 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v504 = &unk_1F14C8B68;
                  v504[2] = -50;
                }
                MEMORY[0x1F4188790](v106);
                long long v115 = (AudioBufferList *)((char *)&v517 - v117);
                bzero((char *)&v517 - v117, v118);
              }
              else
              {
                MEMORY[0x1F4188790](v106);
                long long v115 = (AudioBufferList *)&v515;
                uint64_t v515 = 0;
                long long v516 = 0uLL;
                int v116 = 1;
              }
              uint64_t v119 = 0;
              unint64_t v120 = 0;
              v115->UInt32 mNumberBuffers = v116;
              if ((v114 & 0x20) != 0) {
                goto LABEL_268;
              }
LABEL_267:
              for (unint64_t j = 1; v120 < j; unint64_t j = *((unsigned int *)this + 69))
              {
                float v122 = (char *)v115 + v119;
                *((void *)v122 + 2) = *(void *)(*((void *)this + 22) + v119 + 16);
                *((_DWORD *)v122 + 2) = 1;
                *((_DWORD *)v122 + 3) = 4 * v98;
                ++v120;
                v119 += 16;
                if ((v114 & 0x20) == 0) {
                  goto LABEL_267;
                }
LABEL_268:
                ;
              }
              if ((*((unsigned char *)this + 8896) & 1) != 0 && (*((unsigned char *)this + 8904) & 1) != 0 && *((void *)this + 438))
              {
                unint64_t v123 = atomic_load((unint64_t *)this + 2056);
                if (v123)
                {
                  *(void *)&v551.Float64 mSampleTime = this;
                  *(void *)&buf.Float64 mSampleTime = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV9::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>;
                  buf.mHostTime = (UInt64)&v551;
                  *(void *)&v554.Float64 mSampleTime = &buf;
                  caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((VoiceProcessorV9 *)((char *)this + 16368), &v554);
                  atomic_fetch_add((atomic_ullong *volatile)this + 2056, -(uint64_t)v123);
                }
                int v124 = *((_DWORD *)this + 576);
                if (v124 != *((_DWORD *)this + 578)) {
                  AudioUnitSetParameter(*((AudioUnit *)this + 438), 0x75696F72u, 0, 0, (float)v124, 0);
                }
                AudioTimeStamp buf = v548;
                LODWORD(v550.mSampleTime) = 512;
                *(void *)&v554.Float64 mSampleTime = v107;
                *(void *)&v551.Float64 mSampleTime = v115;
                LODWORD(v98) = v545;
                AudioUnitProcessMultiple(*((AudioUnit *)this + 438), (AudioUnitRenderActionFlags *)&v550, &buf, v545, 1u, (const AudioBufferList **)&v554, 1u, (AudioBufferList **)&v551);
              }
              else
              {
                *(void *)&v553.UInt32 mNumberBuffers = v115;
                *(void *)&buf.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v553);
                buf.mHostTime = v156;
                *(void *)&v554.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v553);
                v554.mHostTime = v157;
                while (vp::Audio_Buffer_Iterator::operator!=(&buf, &v554))
                {
                  vp::fill(*(float ***)&buf.mSampleTime, v98, 0.0);
                  *(void *)&v552.UInt32 mNumberBuffers = v107;
                  *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v552);
                  v551.mHostTime = v158;
                  *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v552);
                  v550.mHostTime = v159;
                  while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
                  {
                    std::vector<std::string>::pointer data = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                    long long v161 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                    uint64_t v162 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&buf);
                    vDSP_vadd(data, 1, v161, 1, v162, 1, v98);
                    vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
                  }
                  vp::Audio_Buffer_Iterator::operator++((uint64_t)&buf);
                }
              }
              if ((*((unsigned char *)this + 8896) & 2) != 0 && (*((unsigned char *)this + 8904) & 2) != 0)
              {
                uint64_t v125 = *((void *)this + 439);
                if (v125)
                {
                  AudioTimeStamp buf = v548;
                  LODWORD(v551.mSampleTime) = 512;
                  MEMORY[0x1F4188790](v125);
                  long long v516 = 0uLL;
                  uint64_t v515 = 0;
                  long long v516 = *(_OWORD *)(*((void *)this + 22) + 8);
                  LODWORD(v515) = 1;
                  *(void *)&v554.Float64 mSampleTime = &v515;
                  AudioUnitProcessMultiple(v126, (AudioUnitRenderActionFlags *)&v551, &buf, v98, 1u, (const AudioBufferList **)&v554, 0, (AudioBufferList **)&v550);
                }
              }
              long long v127 = (CA::AudioSampleRateConverter **)*((void *)this + 47);
              v527 = v7;
              uint64_t v534 = v9;
              if (v127)
              {
                VoiceProcessor::SampleRateConverter::Convert(v127, &v545, &NumberOfSourceFrames, v115, *((const AudioBufferList **)this + 23));
                LODWORD(v98) = NumberOfSourceFrames;
                UInt32 v545 = NumberOfSourceFrames;
                long long v115 = (AudioBufferList *)*((void *)this + 23);
              }
              uint64_t v521 = v15;
              float v129 = VoiceProcessorV2::DetermineNoiseBasedVolume(this);
              unsigned int v130 = *((_DWORD *)this + 130);
              AudioTimeStamp buf = v548;
              if (v130)
              {
                unsigned int v131 = 0;
                unsigned int v132 = 0;
                v537 = (unsigned int *)((char *)this + 17688);
                unsigned int v133 = 4 * (v98 / v130);
                unsigned int v538 = v98 / v130;
                double v134 = (double)(v98 / v130);
                do
                {
                  if ((*((unsigned char *)this + 300) & 0x20) != 0)
                  {
                    unsigned int v136 = *((_DWORD *)this + 79);
                    if (v136 - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v554.mSampleTime) = 136315394;
                        *(void *)((char *)&v554.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v554.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v554.mHostTime + 6) = 381;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v554, 0x12u);
                      }
                      std::string::size_type v501 = __cxa_allocate_exception(0x10uLL);
                      *(void *)std::string::size_type v501 = &unk_1F14C8B68;
                      v501[2] = -50;
                    }
                    MEMORY[0x1F4188790](v128);
                    std::string::size_type v135 = (AudioBufferList *)((char *)&v517 - v137);
                    bzero((char *)&v517 - v137, v138);
                  }
                  else
                  {
                    MEMORY[0x1F4188790](v128);
                    std::string::size_type v135 = (AudioBufferList *)&v515;
                    uint64_t v515 = 0;
                    long long v516 = 0uLL;
                    unsigned int v136 = 1;
                  }
                  uint64_t v139 = 0;
                  v135->UInt32 mNumberBuffers = v136;
                  uint64_t v140 = v136;
                  do
                  {
                    std::string::size_type v141 = (char *)v135 + v139 * 16;
                    *((_DWORD *)v141 + 2) = 1;
                    *((_DWORD *)v141 + 3) = v133;
                    if (v115) {
                      uint64_t v142 = (uint64_t)v115->mBuffers[v139].mData + 4 * v132;
                    }
                    else {
                      uint64_t v142 = 0;
                    }
                    *((void *)v141 + 2) = v142;
                    ++v139;
                    --v140;
                  }
                  while (v140);
                  uint64_t v143 = *((void *)this + 1112);
                  if ((v143 & 8) != 0 && (*((unsigned char *)this + 8904) & 8) != 0)
                  {
                    uint64_t v144 = (OpaqueAudioComponentInstance *)*((void *)this + 441);
                    if (v144)
                    {
                      AudioTimeStamp v554 = buf;
                      LODWORD(v551.mSampleTime) = 512;
                      AudioUnitProcess(v144, (AudioUnitRenderActionFlags *)&v551, &v554, v538, v135);
                      if (v534[3409] || v534[3410]) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x55u, v538, v135, &buf);
                      }
                      uint64_t v143 = *((void *)this + 1112);
                    }
                  }
                  if ((v143 & 0x10) != 0 && (*((unsigned char *)this + 8904) & 0x10) != 0)
                  {
                    long long v145 = (OpaqueAudioComponentInstance *)*((void *)this + 442);
                    if (v145)
                    {
                      AudioTimeStamp v554 = buf;
                      LODWORD(v551.mSampleTime) = 512;
                      AudioUnitProcess(v145, (AudioUnitRenderActionFlags *)&v551, &v554, v538, v135);
                      if (v534[3409] || v534[3410]) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x74u, v538, v135, &buf);
                      }
                      uint64_t v143 = *((void *)this + 1112);
                    }
                  }
                  if ((v143 & 0x20) != 0 && (*((unsigned char *)this + 8904) & 0x20) != 0)
                  {
                    float v146 = (OpaqueAudioComponentInstance *)*((void *)this + 443);
                    if (v146)
                    {
                      AudioTimeStamp v554 = buf;
                      LODWORD(v551.mSampleTime) = 512;
                      AudioUnitProcess(v146, (AudioUnitRenderActionFlags *)&v551, &v554, v538, v135);
                      if (v534[3409] || v534[3410]) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x56u, v538, v135, &buf);
                      }
                      uint64_t v143 = *((void *)this + 1112);
                    }
                  }
                  long long v147 = *(_OWORD *)&buf.mRateScalar;
                  uint64_t v148 = v537;
                  *(_OWORD *)v537 = *(_OWORD *)&buf.mSampleTime;
                  *((_OWORD *)v148 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v147;
                  long long v149 = *(_OWORD *)&buf.mSMPTETime.mHours;
                  *((_OWORD *)v148 + 2) = *(_OWORD *)&buf.mSMPTETime.mSubframes;
                  *((_OWORD *)v148 + 3) = v149;
                  if ((~(_BYTE)v143 & 0xC0) != 0
                    || ((*((unsigned char *)this + 8904) & 0x40) == 0 || !*((void *)this + 444)
                      ? ((*((unsigned char *)this + 8904) & 0x80) != 0
                       ? (BOOL v150 = *((void *)this + 445) != 0)
                       : (BOOL v150 = 0))
                      : (BOOL v150 = 1),
                        !*((unsigned char *)this + 480)
                      ? (uint64_t v128 = (*(uint64_t (**)(VoiceProcessorV9 *, AudioBufferList *, AudioBufferList *, BOOL, void))(*(void *)this + 776))(this, v135, v135, v150, v538)): (*(void *)&v554.mSampleTime = v135, *(void *)&v551.mSampleTime = v135, uint64_t v128 = BlockProcessor::Process(*((BlockProcessor **)this + 2210), v538, (const AudioBufferList **)&v554, (AudioBufferList **)&v551)), !v150))
                  {
                    uint64_t v128 = (*(uint64_t (**)(VoiceProcessorV9 *, AudioBufferList *, AudioBufferList *, void, void))(*(void *)this + 776))(this, v135, v135, 0, v538);
                  }
                  uint64_t v151 = *((void *)this + 1112);
                  if (v151 & 0x100) != 0 && (*((unsigned char *)this + 8905))
                  {
                    uint64_t v128 = *((void *)this + 446);
                    if (v128)
                    {
                      AudioTimeStamp v554 = buf;
                      AudioUnitSetParameter((AudioUnit)v128, 5u, 0, 0, v129, 0);
                      LODWORD(v551.mSampleTime) = 512;
                      uint64_t v128 = AudioUnitProcess(*((AudioUnit *)this + 446), (AudioUnitRenderActionFlags *)&v551, &v554, v538, v135);
                      if (v534[3409] || v534[3410]) {
                        uint64_t v128 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x36u, v538, v135, &v554);
                      }
                      uint64_t v151 = *((void *)this + 1112);
                    }
                  }
                  if ((v151 & 0x200) != 0 && (*((unsigned char *)this + 8905) & 2) != 0)
                  {
                    uint64_t v128 = *((void *)this + 447);
                    if (v128)
                    {
                      AudioTimeStamp v554 = buf;
                      LODWORD(v551.mSampleTime) = 512;
                      uint64_t v128 = AudioUnitProcess((AudioUnit)v128, (AudioUnitRenderActionFlags *)&v551, &v554, v538, v135);
                      if (v534[3409] || v534[3410]) {
                        uint64_t v128 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x57u, v538, v135, &v554);
                      }
                      uint64_t v151 = *((void *)this + 1112);
                    }
                  }
                  if ((v151 & 0x4000) != 0 && (*((unsigned char *)this + 8905) & 0x40) != 0)
                  {
                    if (*((void *)this + 452))
                    {
                      uint64_t v128 = (*(uint64_t (**)(VoiceProcessorV9 *, AudioBufferList *, void, AudioTimeStamp *))(*(void *)this + 672))(this, v135, v538, &buf);
                      if (v534[3409] || v534[3410]) {
                        uint64_t v128 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Bu, v538, v135, &buf);
                      }
                    }
                  }
                  v132 += v538;
                  buf.Float64 mSampleTime = buf.mSampleTime + v134;
                  ++v131;
                }
                while (v131 < *((_DWORD *)this + 130));
              }
              int v152 = *((_DWORD *)this + 75);
              if ((v152 & 0x20) != 0)
              {
                int v154 = *((_DWORD *)this + 79);
                uint64_t v7 = v527;
                uint64_t v9 = v534;
                long long v155 = (uint64_t *)&v550;
                if ((v154 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v554.mSampleTime) = 136315394;
                    *(void *)((char *)&v554.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(v554.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v554.mHostTime + 6) = 465;
                    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v554, 0x12u);
                  }
                  long long v505 = __cxa_allocate_exception(0x10uLL);
                  *(void *)long long v505 = &unk_1F14C8B68;
                  v505[2] = -50;
                }
                MEMORY[0x1F4188790](v128);
                std::string::size_type v153 = (int *)((char *)&v517 - v163);
                bzero((char *)&v517 - v163, v164);
              }
              else
              {
                MEMORY[0x1F4188790](v128);
                std::string::size_type v153 = (int *)&v515;
                uint64_t v515 = 0;
                long long v516 = 0uLL;
                int v154 = 1;
                uint64_t v7 = v527;
                uint64_t v9 = v534;
                long long v155 = (uint64_t *)&v550;
              }
              int *v153 = v154;
              unint64_t v166 = *((void *)this + 47);
              uint64_t v165 = *((void *)this + 48);
              if (v165)
              {
                if (v166)
                {
                  UInt32 NumberOfSourceFrames = *((_DWORD *)this + 121);
                  uint64_t v165 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v165, &v545, &NumberOfSourceFrames, v115, *((const AudioBufferList **)this + 24));
                  unint64_t v167 = 0;
                  int v168 = *((_DWORD *)this + 75);
                  uint64_t v169 = 2;
                  std::string::size_type v171 = v535;
                  uint64_t v170 = v536;
                  uint64_t v172 = v539;
                  if ((v168 & 0x20) != 0) {
                    goto LABEL_365;
                  }
LABEL_364:
                  for (unint64_t k = 1; v167 < k; unint64_t k = *((unsigned int *)this + 79))
                  {
                    *(_OWORD *)&v153[v169] = *(_OWORD *)(*((void *)this + 24) + v169 * 4);
                    ++v167;
                    v169 += 4;
                    if ((v168 & 0x20) == 0) {
                      goto LABEL_364;
                    }
LABEL_365:
                    ;
                  }
                }
                else
                {
                  uint64_t v165 = VoiceProcessor::SampleRateConverter::Convert((CA::AudioSampleRateConverter **)v165, &v545, &NumberOfSourceFrames, v115, *((const AudioBufferList **)this + 24));
                  unint64_t v179 = 0;
                  int v180 = *((_DWORD *)this + 75);
                  uint64_t v181 = 2;
                  std::string::size_type v171 = v535;
                  uint64_t v170 = v536;
                  uint64_t v172 = v539;
                  if ((v180 & 0x20) != 0) {
                    goto LABEL_378;
                  }
LABEL_377:
                  for (unint64_t m = 1; v179 < m; unint64_t m = *((unsigned int *)this + 79))
                  {
                    *(_OWORD *)&v153[v181] = *(_OWORD *)(*((void *)this + 24) + v181 * 4);
                    ++v179;
                    v181 += 4;
                    if ((v180 & 0x20) == 0) {
                      goto LABEL_377;
                    }
LABEL_378:
                    ;
                  }
                }
                UInt32 v545 = NumberOfSourceFrames;
              }
              else if (v166)
              {
                unint64_t v174 = 0;
                mBuffers = v115->mBuffers;
                uint64_t v176 = v153 + 2;
                std::string::size_type v171 = v535;
                uint64_t v170 = v536;
                uint64_t v172 = v539;
                if ((v152 & 0x20) != 0) {
                  goto LABEL_372;
                }
LABEL_371:
                for (unint64_t n = 1; v174 < n; unint64_t n = *((unsigned int *)this + 79))
                {
                  long long v178 = (__int128)*mBuffers++;
                  *v176++ = v178;
                  ++v174;
                  if ((v152 & 0x20) == 0) {
                    goto LABEL_371;
                  }
LABEL_372:
                  ;
                }
              }
              else
              {
                v388 = v115->mBuffers;
                long long v389 = v153 + 2;
                std::string::size_type v171 = v535;
                uint64_t v170 = v536;
                uint64_t v172 = v539;
                if ((v152 & 0x20) != 0) {
                  goto LABEL_700;
                }
LABEL_699:
                for (iunint64_t i = 1; v166 < ii; iunint64_t i = *((unsigned int *)this + 79))
                {
                  long long v391 = (__int128)*v388++;
                  *v389++ = v391;
                  ++v166;
                  if ((v152 & 0x20) == 0) {
                    goto LABEL_699;
                  }
LABEL_700:
                  ;
                }
              }
              AudioTimeStamp v554 = v548;
              if (*((_DWORD *)this + 130))
              {
                unsigned int v183 = 0;
                unsigned int v538 = 0;
                v520 = (VoiceProcessorV9 *)((char *)this + 2744);
                v525 = &v171->mBuffers[0].mData;
                std::string::size_type v526 = (uint64_t *)(v153 + 4);
                v523 = &v172->mBuffers[0].mData;
                v524 = &v170->mBuffers[0].mData;
                std::string::size_type v522 = &v7->mBuffers[0].mData;
                uint64_t v184 = 1;
                double v185 = -8589940800.0;
                do
                {
                  if ((*((unsigned char *)this + 300) & 0x20) != 0)
                  {
                    int v189 = *((_DWORD *)this + 79);
                    if ((v189 - 65) <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v551.mSampleTime) = 136315394;
                        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v551.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v551.mHostTime + 6) = 513;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                      }
                      v502 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v502 = &unk_1F14C8B68;
                      v502[2] = -50;
                    }
                    MEMORY[0x1F4188790](v165);
                    uint64_t v188 = (int *)((char *)&v517 - v190);
                    bzero((char *)&v517 - v190, v191);
                    long long v187 = v535;
                  }
                  else
                  {
                    MEMORY[0x1F4188790](v165);
                    uint64_t v188 = (int *)&v515;
                    uint64_t v515 = 0;
                    long long v516 = 0uLL;
                    int v189 = 1;
                  }
                  *uint64_t v188 = v189;
                  if (v187)
                  {
                    int v192 = v187->mNumberBuffers;
                    if (v187->mNumberBuffers - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v551.mSampleTime) = 136315394;
                        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v551.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v551.mHostTime + 6) = 515;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                      }
                      v498 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v498 = &unk_1F14C8B68;
                      v498[2] = -50;
                    }
                  }
                  else
                  {
                    int v192 = 1;
                  }
                  MEMORY[0x1F4188790](v186);
                  int v194 = (int *)((char *)&v517 - v193);
                  bzero((char *)&v517 - v193, v195);
                  char v533 = v194;
                  *int v194 = v192;
                  if (v536)
                  {
                    UInt32 v197 = v536->mNumberBuffers;
                    if (v536->mNumberBuffers - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v551.mSampleTime) = 136315394;
                        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v551.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v551.mHostTime + 6) = 517;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                      }
                      v494 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v494 = &unk_1F14C8B68;
                      v494[2] = -50;
                    }
                  }
                  else
                  {
                    UInt32 v197 = 1;
                  }
                  MEMORY[0x1F4188790](v196);
                  long long v199 = (UInt32 *)((char *)&v517 - v198);
                  bzero((char *)&v517 - v198, v200);
                  std::string::size_type v532 = v199;
                  *long long v199 = v197;
                  unsigned int v528 = v183;
                  if (v539)
                  {
                    UInt32 v202 = v539->mNumberBuffers;
                    if (v539->mNumberBuffers - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v551.mSampleTime) = 136315394;
                        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v551.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v551.mHostTime + 6) = 519;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                      }
                      v496 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v496 = &unk_1F14C8B68;
                      v496[2] = -50;
                    }
                  }
                  else
                  {
                    UInt32 v202 = 1;
                  }
                  MEMORY[0x1F4188790](v201);
                  v204 = (UInt32 *)((char *)&v517 - v203);
                  bzero((char *)&v517 - v203, v205);
                  UInt32 *v204 = v202;
                  std::string::size_type v207 = (_DWORD *)*((void *)this + 203);
                  if (*((unsigned char *)this + 2244))
                  {
                    if (!v207) {
                      goto LABEL_410;
                    }
                    if (!*v207) {
                      goto LABEL_408;
                    }
                    unint64_t v208 = 0;
                    long long v209 = (void **)(v207 + 4);
                    do
                    {
                      bzero(*v209, *((unsigned int *)v209 - 1));
                      ++v208;
                      v209 += 2;
                    }
                    while (v208 < *v207);
                    std::string::size_type v207 = (_DWORD *)*((void *)this + 203);
                  }
                  if (v207)
                  {
LABEL_408:
                    unsigned int v210 = *v207;
                    if ((*v207 - 65) <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v551.mSampleTime) = 136315394;
                        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v551.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v551.mHostTime + 6) = 525;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                      }
                      v500 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v500 = &unk_1F14C8B68;
                      v500[2] = -50;
                    }
                    goto LABEL_411;
                  }
LABEL_410:
                  unsigned int v210 = 1;
LABEL_411:
                  v537 = (unsigned int *)v188;
                  MEMORY[0x1F4188790](v206);
                  CFTypeRef v212 = (UInt32 *)((char *)&v517 - v211);
                  bzero((char *)&v517 - v211, v213);
                  v531 = v212;
                  UInt32 *v212 = v210;
                  uint64_t v215 = v7->mNumberBuffers;
                  if ((v215 - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v551.mSampleTime) = 136315394;
                      *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v551.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v551.mHostTime + 6) = 527;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                    }
                    long long v491 = __cxa_allocate_exception(0x10uLL);
                    *(void *)long long v491 = &unk_1F14C8B68;
                    v491[2] = -50;
                  }
                  MEMORY[0x1F4188790](v214);
                  long long v217 = (_DWORD *)((char *)&v517 - v216);
                  bzero((char *)&v517 - v216, v218);
                  _DWORD *v217 = v215;
                  uint64_t v219 = *v537;
                  if (v219)
                  {
                    int v220 = 4 * *((_DWORD *)this + 129);
                    uint64_t v221 = v538;
                    long long v222 = v537 + 4;
                    long long v223 = v526;
                    do
                    {
                      *((_DWORD *)v222 - 2) = 1;
                      *((_DWORD *)v222 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v220;
                      uint64_t v224 = *v223;
                      v223 += 2;
                      *long long v222 = v224 + 4 * v221;
                      v222 += 2;
                      --v219;
                    }
                    while (v219);
                  }
                  uint64_t v225 = *v533;
                  long long v227 = v535;
                  long long v226 = v536;
                  v228 = v539;
                  if (v225)
                  {
                    int v229 = 4 * *((_DWORD *)this + 129);
                    uint64_t v230 = v538;
                    std::string::size_type v231 = (uint64_t *)(v533 + 4);
                    float v232 = v525;
                    do
                    {
                      *((_DWORD *)v231 - 2) = 1;
                      *((_DWORD *)v231 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v229;
                      if (v227) {
                        uint64_t v233 = (uint64_t)*v232 + 4 * v230;
                      }
                      else {
                        uint64_t v233 = 0;
                      }
                      *std::string::size_type v231 = v233;
                      v231 += 2;
                      v232 += 2;
                      --v225;
                    }
                    while (v225);
                  }
                  uint64_t v234 = *v532;
                  if (v234)
                  {
                    int v235 = 4 * *((_DWORD *)this + 129);
                    uint64_t v236 = v538;
                    std::string::size_type v237 = (uint64_t *)(v532 + 4);
                    CFTypeRef v238 = v524;
                    do
                    {
                      *((_DWORD *)v237 - 2) = 1;
                      *((_DWORD *)v237 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v235;
                      if (v226) {
                        uint64_t v239 = (uint64_t)*v238 + 4 * v236;
                      }
                      else {
                        uint64_t v239 = 0;
                      }
                      *std::string::size_type v237 = v239;
                      v237 += 2;
                      v238 += 2;
                      --v234;
                    }
                    while (v234);
                  }
                  uint64_t v240 = *v204;
                  if (v240)
                  {
                    int v241 = 4 * *((_DWORD *)this + 129);
                    uint64_t v242 = v538;
                    std::string::size_type v243 = (uint64_t *)(v204 + 4);
                    CFArrayRef v244 = v523;
                    do
                    {
                      *((_DWORD *)v243 - 2) = 1;
                      *((_DWORD *)v243 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v241;
                      if (v228) {
                        uint64_t v245 = (uint64_t)*v244 + 4 * v242;
                      }
                      else {
                        uint64_t v245 = 0;
                      }
                      *std::string::size_type v243 = v245;
                      v243 += 2;
                      v244 += 2;
                      --v240;
                    }
                    while (v240);
                  }
                  if (v215)
                  {
                    int v246 = 4 * *((_DWORD *)this + 129);
                    uint64_t v247 = v538;
                    v248 = (uint64_t *)(v217 + 4);
                    std::string::size_type v249 = v522;
                    do
                    {
                      *((_DWORD *)v248 - 2) = 1;
                      *((_DWORD *)v248 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v246;
                      if (v7) {
                        uint64_t v250 = (uint64_t)*v249 + 4 * v247;
                      }
                      else {
                        uint64_t v250 = 0;
                      }
                      uint64_t *v248 = v250;
                      v248 += 2;
                      v249 += 2;
                      --v215;
                    }
                    while (v215);
                  }
                  if (v210)
                  {
                    int v251 = 4 * *((_DWORD *)this + 129);
                    uint64_t v252 = v538;
                    uint64_t v253 = v210;
                    v254 = v531 + 4;
                    std::string::size_type v255 = v207 + 4;
                    do
                    {
                      *(v254 - 2) = 1;
                      *(v254 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v251;
                      if (v207) {
                        uint64_t v256 = *v255 + 4 * v252;
                      }
                      else {
                        uint64_t v256 = 0;
                      }
                      *(void *)v254 = v256;
                      v254 += 4;
                      v255 += 2;
                      --v253;
                    }
                    while (v253);
                  }
                  if (v228 && *((unsigned char *)this + 2244))
                  {
                    CopyAllBuffersABL(v531, v539);
                    long long v227 = v535;
                  }
                  if (v227) {
                    long long v257 = (AudioBufferList *)v533;
                  }
                  else {
                    long long v257 = 0;
                  }
                  unint64_t MonoABL = (unint64_t)GetMonoABL(v257, &v553, *((unsigned int *)this + 129));
                  if (v536) {
                    char v258 = (AudioBufferList *)v532;
                  }
                  else {
                    char v258 = 0;
                  }
                  long long v530 = GetMonoABL(v258, &v552, *((unsigned int *)this + 129));
                  if (v539) {
                    long long v259 = (AudioBufferList *)v204;
                  }
                  else {
                    long long v259 = 0;
                  }
                  v260 = GetMonoABL(v259, &v542, *((unsigned int *)this + 129));
                  uint64_t v261 = 0;
                  *(void *)&v551.Float64 mSampleTime = 10;
                  v551.mHostTime = (UInt64)v537;
                  *(void *)&v551.mRateScalar = 11;
                  v529 = v260;
                  v551.mWordClockTime = (UInt64)v260;
                  *(void *)&v551.mSMPTETime.mSubframes = 12;
                  *(void *)&v551.mSMPTETime.mType = MonoABL;
                  *(void *)&v551.mSMPTETime.mHours = 13;
                  *(void *)&v551.mFlags = v530;
                  do
                  {
                    v262 = (unsigned int *)&v551 + 4 * v261;
                    uint64_t v263 = *v262;
                    uint64_t v264 = (AudioBufferList *)*((void *)v262 + 1);
                    if (!v264)
                    {
                      uint64_t v264 = (AudioBufferList *)*((void *)this + 202);
                      if (v264->mNumberBuffers)
                      {
                        unint64_t v265 = 0;
                        v266 = &v264->mBuffers[0].mData;
                        do
                        {
                          bzero(*v266, *((unsigned int *)v266 - 1));
                          ++v265;
                          v266 += 2;
                        }
                        while (v265 < v264->mNumberBuffers);
                        uint64_t v264 = (AudioBufferList *)*((void *)this + 202);
                        long long v155 = (uint64_t *)&v550;
                      }
                    }
                    BOOL v267 = VoiceProcessorV2::VPUseAUInProcess(this, v263, 0);
                    if (v264) {
                      BOOL v268 = v267;
                    }
                    else {
                      BOOL v268 = 0;
                    }
                    if (v268)
                    {
                      AudioTimeStamp v550 = v554;
                      LODWORD(v549[0]) = 512;
                      AudioUnitProcess(*((AudioUnit *)this + v263 + 438), (AudioUnitRenderActionFlags *)v549, &v550, *((_DWORD *)this + 129), v264);
                    }
                    ++v261;
                  }
                  while (v261 != 4);
                  uint64_t v269 = *((void *)this + 1112);
                  if ((v269 & 0x40000000) == 0) {
                    goto LABEL_471;
                  }
                  uint64_t v270 = *((void *)this + 1113);
                  if ((v270 & 0x40000000) == 0) {
                    goto LABEL_471;
                  }
                  long long v271 = 0;
                  if (!*((void *)this + 468) || (v269 & v270 & 0x80000000) == 0) {
                    goto LABEL_472;
                  }
                  if (*((void *)this + 469)
                    && (long long v331 = (uint64_t *)v520, vp::Audio_Buffer::get_audio_buffer_list(v520)))
                  {
                    vp::Audio_Buffer::prepare(v331, *((_DWORD *)this + 129));
                    audio_buffer_list = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v331);
                    if (*audio_buffer_list)
                    {
                      std::string::size_type v333 = audio_buffer_list;
                      unint64_t v334 = 0;
                      long long v335 = (void **)(audio_buffer_list + 4);
                      do
                      {
                        bzero(*v335, *((unsigned int *)v335 - 1));
                        ++v334;
                        v335 += 2;
                      }
                      while (v334 < *v333);
                    }
                    long long v271 = (AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)v331);
                    LODWORD(v550.mSampleTime) = 512;
                    AudioTimeStamp v551 = v554;
                    AudioUnitProcess(*((AudioUnit *)this + 468), (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 129), v271);
                    UInt32 v336 = *((_DWORD *)this + 129);
                    if (v534[3409] || v534[3410])
                    {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Du, *((unsigned int *)this + 129), v271, &v554);
                      UInt32 v336 = *((_DWORD *)this + 129);
                    }
                    AudioTimeStamp v551 = v554;
                    LODWORD(v550.mSampleTime) = 512;
                    AudioUnitProcess(*((AudioUnit *)this + 469), (AudioUnitRenderActionFlags *)&v550, &v551, v336, v271);
                    if (v534[3409] || v534[3410])
                    {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Eu, *((unsigned int *)this + 129), v271, &v551);
                      if (v534[3409] || v534[3410]) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Fu, *((unsigned int *)this + 129), v271, &v551);
                      }
                    }
                  }
                  else
                  {
LABEL_471:
                    long long v271 = 0;
                  }
LABEL_472:
                  if (*((unsigned char *)this + 2244)) {
                    uint64_t v7 = (AudioBufferList *)v217;
                  }
                  else {
                    uint64_t v7 = (AudioBufferList *)v537;
                  }
                  if (*((unsigned char *)this + 2244)) {
                    long long v272 = (AudioBufferList *)v531;
                  }
                  else {
                    long long v272 = v529;
                  }
                  if (v272) {
                    int v11 = v272;
                  }
                  else {
                    int v11 = v271;
                  }
                  uint64_t v273 = *((void *)this + 1112);
                  if ((v273 & 0x8000000) != 0 && ((*((unsigned char *)this + 8907) & 8) != 0 || *((unsigned char *)this + 472)) && v272)
                  {
                    float v274 = VoiceProcessorV2::CalculateDownlinkMixGainDB(this);
                    *((float *)this + 1115) = v274;
                    LODWORD(v54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
                    LODWORD(v54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = __exp10f(v274 / 20.0);
                    v549[0] = v272;
                    *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v549);
                    v551.mHostTime = v275;
                    *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v549);
                    v550.mHostTime = v276;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
                    {
                      long long v277 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                      long long v278 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                      vDSP_vsmul(v277, 1, (const float *)&v540, v278, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
                    }
                    uint64_t v273 = *((void *)this + 1112);
                  }
                  if ((v273 & 0x10000000) != 0 && (*((unsigned char *)this + 8907) & 0x10) != 0)
                  {
                    (*(void (**)(VoiceProcessorV9 *, unsigned int *, UInt32 *))(*(void *)this + 680))(this, v537, v531);
                    uint64_t v273 = *((void *)this + 1112);
                  }
                  if ((v273 & 0x8000) != 0
                    && (uint64_t v279 = *((void *)this + 1113), (v279 & 0x8000) != 0)
                    && (v280 = (OpaqueAudioComponentInstance *)*((void *)this + 453)) != 0)
                  {
                    int v281 = *((unsigned __int8 *)this + 2244);
                    AudioTimeStamp v551 = v554;
                    LODWORD(v54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 512;
                    UInt64 v282 = (UInt64)v533;
                    if (v535 == 0 || v281 == 0) {
                      UInt64 v282 = MonoABL;
                    }
                    *(void *)&v550.Float64 mSampleTime = v537;
                    v550.mHostTime = v282;
                    Float64 v283 = *(double *)&v532;
                    if (v536 == 0 || v281 == 0) {
                      Float64 v283 = *(double *)&v530;
                    }
                    p_UInt32 mNumberBuffers = v531;
                    if (v539 == 0 || v281 == 0) {
                      p_UInt32 mNumberBuffers = &v529->mNumberBuffers;
                    }
                    v550.mRateScalar = v283;
                    v550.mWordClockTime = (UInt64)p_mNumberBuffers;
                    *(void *)&v550.mSMPTETime.mSubframes = v271;
                    if ((v273 & v279 & 2) != 0)
                    {
                      std::string::size_type v285 = (OpaqueAudioComponentInstance *)*((void *)this + 439);
                      if (v285)
                      {
                        if (v281 || v534[4072])
                        {
                          LODWORD(v549[0]) = 0;
                          OSStatus Parameter = AudioUnitGetParameter(v285, 0x73707062u, 0, 0, (AudioUnitParameterValue *)v549);
                          BOOL v288 = *(float *)v549 == 1.0 && Parameter == 0;
                          LODWORD(v54freeMatrix(*((_DWORD *)this + 17), this + 1) = v288;
                          AudioUnitSetProperty(*((AudioUnit *)this + 453), 0x6164756Bu, 0, 0, &v541, 4u);
                          v280 = (OpaqueAudioComponentInstance *)*((void *)this + 453);
                        }
                      }
                    }
                    v549[0] = v7;
                    v549[1] = (AudioBufferList *)v11;
                    AudioUnitProcessMultiple(v280, (AudioUnitRenderActionFlags *)&v540, &v551, *((_DWORD *)this + 129), 5u, (const AudioBufferList **)&v550, 2u, v549);
                    if (v534[3409] || v534[3410])
                    {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x59u, *((unsigned int *)this + 129), v7, &v551);
                      if (v534[3409] || v534[3410]) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x76u, *((unsigned int *)this + 129), v11, &v551);
                      }
                    }
                  }
                  else
                  {
                    if (MonoABL)
                    {
                      float v541 = 0.44668;
                      *(void *)&v551.Float64 mSampleTime = MonoABL;
                      v549[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v551, 0);
                      Float64 v540 = *(double *)&v7;
                      *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v540);
                      v551.mHostTime = v289;
                      *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v540);
                      v550.mHostTime = v290;
                      while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
                      {
                        unint64_t MonoABL = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v549);
                        std::string::size_type v291 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                        v292 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                        vDSP_vsma((const float *)MonoABL, 1, &v541, v291, 1, v292, 1, *((unsigned int *)this + 129));
                        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
                      }
                    }
                    if (v530)
                    {
                      *(void *)&v551.Float64 mSampleTime = v530;
                      v549[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v551, 0);
                      Float64 v540 = *(double *)&v7;
                      *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v540);
                      v551.mHostTime = v293;
                      *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v540);
                      v550.mHostTime = v294;
                      while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
                      {
                        unint64_t MonoABL = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v549);
                        long long v295 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                        v296 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                        vDSP_vadd((const float *)MonoABL, 1, v295, 1, v296, 1, *((unsigned int *)this + 129));
                        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
                      }
                    }
                    if (v271 && v271 != v11)
                    {
                      *(void *)&v551.Float64 mSampleTime = v271;
                      v549[0] = (AudioBufferList *)vp::Audio_Buffer_List_Ref::operator[](&v551, 0);
                      vp::Audio_Buffer_List_Ref::Audio_Buffer_List_Ref(&v551, v11);
                      Float64 v540 = v551.mSampleTime;
                      *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)&v540);
                      v551.mHostTime = v297;
                      *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)&v540);
                      v550.mHostTime = v298;
                      while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
                      {
                        unint64_t MonoABL = vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)v549);
                        long long v271 = (AudioBufferList *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                        long long v299 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                        vDSP_vadd((const float *)MonoABL, 1, (const float *)&v271->mNumberBuffers, 1, v299, 1, *((unsigned int *)this + 129));
                        vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
                      }
                    }
                  }
                  uint64_t v300 = *((void *)this + 1112);
                  if ((v300 & 0x8000) != 0
                    && (*((unsigned char *)this + 8905) & 0x80) != 0
                    && *((void *)this + 453)
                    && *((unsigned char *)this + 2244))
                  {
                    (*(void (**)(VoiceProcessorV9 *, AudioBufferList *, AudioTimeStamp *))(*(void *)this + 656))(this, v7, &v554);
                    uint64_t v300 = *((void *)this + 1112);
                  }
                  if ((v300 & 0x800000) != 0 && (*((unsigned char *)this + 8906) & 0x80) != 0)
                  {
                    long long v301 = (OpaqueAudioComponentInstance *)*((void *)this + 461);
                    if (v301)
                    {
                      AudioTimeStamp v551 = v554;
                      LODWORD(v550.mSampleTime) = 512;
                      AudioUnitProcess(v301, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 129), v7);
                      if (v534[3409] || v534[3410]) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), v7, &v551);
                      }
                      uint64_t v300 = *((void *)this + 1112);
                    }
                  }
                  if (v300 & 0x10000000000) != 0 && (*((unsigned char *)this + 8909))
                  {
                    v302 = (OpaqueAudioComponentInstance *)*((void *)this + 478);
                    if (v302)
                    {
                      int v303 = *((_DWORD *)this + 576);
                      if (v303 != *((_DWORD *)this + 578))
                      {
                        AudioUnitSetParameter(v302, 0, 0, 0, (float)v303, 0);
                        v302 = (OpaqueAudioComponentInstance *)*((void *)this + 478);
                      }
                      *(void *)&v550.Float64 mSampleTime = v7;
                      v549[0] = v7;
                      AudioTimeStamp v551 = v554;
                      LODWORD(v54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 512;
                      AudioUnitProcessMultiple(v302, (AudioUnitRenderActionFlags *)&v540, &v551, *((_DWORD *)this + 129), 1u, (const AudioBufferList **)&v550, 1u, v549);
                      if (v534[3409] || v534[3410]) {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, *((unsigned int *)this + 129), v7, &v551);
                      }
                      uint64_t v300 = *((void *)this + 1112);
                    }
                  }
                  if (v300 & 0x1000000) != 0 && (*((unsigned char *)this + 8907))
                  {
                    v304 = (OpaqueAudioComponentInstance *)*((void *)this + 462);
                    if (v304)
                    {
                      int v305 = *((_DWORD *)this + 576);
                      if (v305 != *((_DWORD *)this + 578))
                      {
                        AudioUnitSetParameter(v304, 1u, 0, 0, (float)v305, 0);
                        v304 = (OpaqueAudioComponentInstance *)*((void *)this + 462);
                      }
                      AudioTimeStamp v551 = v554;
                      LODWORD(v550.mSampleTime) = 512;
                      AudioUnitProcess(v304, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 129), v7);
                      uint64_t v300 = *((void *)this + 1112);
                    }
                  }
                  if ((v300 & 0x2000000) != 0
                    && (*((unsigned char *)this + 8907) & 2) != 0
                    && (v306 = (OpaqueAudioComponentInstance *)*((void *)this + 463)) != 0)
                  {
                    AudioTimeStamp v551 = v554;
                    LODWORD(v550.mSampleTime) = 512;
                    AudioUnitProcess(v306, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 129), v7);
                  }
                  else if ((v300 & 0x4000000) != 0 {
                         && (*((unsigned char *)this + 8907) & 4) != 0
                  }
                         && (long long v307 = (OpaqueAudioComponentInstance *)*((void *)this + 464)) != 0)
                  {
                    v308 = (AudioBufferList *)*((void *)this + 198);
                    if (v308->mNumberBuffers)
                    {
                      unint64_t MonoABL = 0;
                      long long v271 = (AudioBufferList *)(*((_DWORD *)this + 79) - 1);
                      uint64_t v309 = 16;
                      do
                      {
                        if (v271 >= MonoABL) {
                          int v310 = MonoABL;
                        }
                        else {
                          int v310 = (int)v271;
                        }
                        memcpy(*(void **)((char *)&v308->mNumberBuffers + v309), v7->mBuffers[v310].mData, 4 * *((unsigned int *)this + 129));
                        ++MonoABL;
                        v308 = (AudioBufferList *)*((void *)this + 198);
                        v309 += 16;
                      }
                      while (MonoABL < v308->mNumberBuffers);
                      long long v307 = (OpaqueAudioComponentInstance *)*((void *)this + 464);
                    }
                    AudioTimeStamp v551 = v554;
                    LODWORD(v550.mSampleTime) = 512;
                    AudioUnitProcess(v307, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 129), v308);
                    uint64_t v7 = (AudioBufferList *)*((void *)this + 198);
                    if (!v7)
                    {
                      _os_assert_log();
                      _os_crash();
                      __break(1u);
                      goto LABEL_957;
                    }
                  }
                  else
                  {
                    LODWORD(v54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
                    float v311 = 1.0;
                    if (!*((unsigned char *)this + 2244)) {
                      float v311 = *((float *)this + 3135);
                    }
                    LODWORD(v54std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = __exp10f((float)((float)(v311 * 32.0) + -32.0) / 20.0);
                    v549[0] = v7;
                    *(void *)&v551.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::begin((vp::Audio_Buffer_List_Ref *)v549);
                    v551.mHostTime = v312;
                    *(void *)&v550.Float64 mSampleTime = vp::Audio_Buffer_List_Ref::end((vp::Audio_Buffer_List_Ref *)v549);
                    v550.mHostTime = v313;
                    while (vp::Audio_Buffer_Iterator::operator!=(&v551, &v550))
                    {
                      v314 = (const float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                      std::string::size_type v315 = (float *)vp::Audio_Buffer_Ref::get_data((vp::Audio_Buffer_Ref *)&v551);
                      vDSP_vsmul(v314, 1, (const float *)&v540, v315, 1, *((unsigned int *)this + 129));
                      vp::Audio_Buffer_Iterator::operator++((uint64_t)&v551);
                    }
                    if (v534[3409] || v534[3410]) {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x37u, *((unsigned int *)this + 129), v7, &v554);
                    }
                  }
                  if (!v11
                    || (*((unsigned char *)this + 8899) & 0x20) == 0
                    || (*((unsigned char *)this + 8907) & 0x20) == 0 && !*((unsigned char *)this + 472))
                  {
                    if (v7->mNumberBuffers)
                    {
                      unint64_t v316 = 0;
                      uint64_t v317 = 4;
                      do
                      {
                        memcpy(*(void **)&v217[v317], *(const void **)((char *)&v7->mNumberBuffers + v317 * 4), 4 * *((unsigned int *)this + 129));
                        ++v316;
                        v317 += 4;
                      }
                      while (v316 < v7->mNumberBuffers);
                    }
                    goto LABEL_597;
                  }
                  if (*((unsigned char *)this + 2244))
                  {
                    int v318 = *((_DWORD *)this + 89);
                    UInt32 v319 = v7->mNumberBuffers;
LABEL_591:
                    if (v319)
                    {
                      unint64_t v320 = 0;
                      unsigned int v321 = v318 - 1;
                      uint64_t v322 = 4;
                      do
                      {
                        if (v321 >= v320) {
                          int v323 = v320;
                        }
                        else {
                          int v323 = v321;
                        }
                        vDSP_vadd(*(const float **)((char *)&v7->mNumberBuffers + v322 * 4), 1, (const float *)v11->mBuffers[v323].mData, 1, *(float **)&v217[v322], 1, *((unsigned int *)this + 129));
                        ++v320;
                        v322 += 4;
                      }
                      while (v320 < v7->mNumberBuffers);
                    }
                    goto LABEL_597;
                  }
                  UInt32 v319 = v7->mNumberBuffers;
                  int v318 = 1;
                  int v337 = v7->mNumberBuffers - 1;
                  if (v7->mNumberBuffers == 1) {
                    goto LABEL_591;
                  }
                  while ((v337 & 0x80000000) == 0)
                  {
                    mData = (const float *)v7->mBuffers[v337].mData;
                    std::string::size_type v339 = (const float *)v11->mBuffers[v337 & (v337 >> 31)].mData;
                    v340 = *(float **)&v217[4 * v337-- + 4];
                    vDSP_vadd(mData, 1, v339, 1, v340, 1, *((unsigned int *)this + 129));
                  }
LABEL_597:
                  DynamicsDSPChannelunint64_t Count = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
                  if ((DynamicsDSPChannelCount - 65) <= 0xFFFFFFBF)
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v551.mSampleTime) = 136315394;
                      *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v551.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v551.mHostTime + 6) = 824;
                      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                    }
                    v492 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v492 = &unk_1F14C8B68;
                    v492[2] = -50;
                  }
                  UInt32 v325 = DynamicsDSPChannelCount;
                  MEMORY[0x1F4188790](DynamicsDSPChannelCount);
                  std::string::size_type v327 = (AudioBufferList *)((char *)&v517 - v326);
                  bzero((char *)&v517 - v326, v328);
                  v327->UInt32 mNumberBuffers = v325;
                  uint64_t v165 = (uint64_t)memcpy(v327->mBuffers, v217 + 2, 16 * v325);
                  uint64_t v9 = v534;
                  uint64_t v7 = v527;
                  if (v534[3409] || v534[3410]) {
                    uint64_t v165 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x35u, *((unsigned int *)this + 129), v327, &v554);
                  }
                  unsigned int v329 = v528;
                  if (*((unsigned char *)this + 8900) & 1) != 0 && (*((unsigned char *)this + 8908))
                  {
                    uint64_t v165 = *((void *)this + 470);
                    if (v165)
                    {
                      AudioTimeStamp v551 = v554;
                      LODWORD(v550.mSampleTime) = 512;
                      uint64_t v165 = AudioUnitProcess((AudioUnit)v165, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 129), v327);
                    }
                  }
                  unsigned int v330 = *((_DWORD *)this + 129);
                  v554.Float64 mSampleTime = v554.mSampleTime + (double)v330;
                  v538 += v330;
                  unsigned int v183 = v329 + 1;
                }
                while (v183 < *((_DWORD *)this + 130));
              }
              uint64_t v341 = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
              UInt32 v342 = v341;
              uint64_t v343 = *((void *)this + 1112);
              if ((v343 & 0x400000000) != 0)
              {
                uint64_t v344 = v521;
                if ((*((unsigned char *)this + 8908) & 4) != 0)
                {
                  std::string::size_type v345 = (OpaqueAudioComponentInstance *)*((void *)this + 472);
                  if (v345)
                  {
                    if ((v341 - 65) <= 0xFFFFFFBF)
                    {
                      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                        goto LABEL_1002;
                      }
                      LODWORD(v551.mSampleTime) = 136315394;
                      *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                      WORD2(v551.mHostTime) = 1024;
                      *(_DWORD *)((char *)&v551.mHostTime + 6) = 848;
                      v506 = MEMORY[0x1E4F14500];
                      goto LABEL_1001;
                    }
                    MEMORY[0x1F4188790](v341);
                    long long v347 = (AudioBufferList *)((char *)&v517 - v346);
                    bzero((char *)&v517 - v346, v348);
                    v347->UInt32 mNumberBuffers = v342;
                    memcpy(v347->mBuffers, v7->mBuffers, 16 * v342);
                    LODWORD(v551.mSampleTime) = 512;
                    uint64_t v341 = AudioUnitProcess(v345, (AudioUnitRenderActionFlags *)&v551, &v548, *((_DWORD *)this + 121), v347);
                    if (v9[3409] || v9[3410]) {
                      uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x40u, v344, v347, &v548);
                    }
                    uint64_t v343 = *((void *)this + 1112);
                  }
                }
              }
              else
              {
                uint64_t v344 = v521;
              }
              if ((v343 & 0x2000000000) != 0 && (*((unsigned char *)this + 8908) & 0x20) != 0 && *((void *)this + 475)
                || (v343 & 0x800000000) != 0 && (*((unsigned char *)this + 8908) & 8) != 0 && *((void *)this + 473))
              {
                if ((v343 & 0x2000000000) != 0) {
                  unsigned int v349 = 37;
                }
                else {
                  unsigned int v349 = 35;
                }
                v350 = (AudioUnit *)((char *)this + 8 * v349);
                if (v342 == v7->mNumberBuffers)
                {
                  AudioTimeStamp v551 = v548;
                  LODWORD(v550.mSampleTime) = 512;
                  uint64_t v341 = AudioUnitProcess(v350[438], (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                }
                else
                {
                  v384 = (AudioBufferList *)*((void *)this + 25);
                  if (v384->mNumberBuffers)
                  {
                    unint64_t v385 = 0;
                    uint64_t v386 = 16;
                    do
                    {
                      memcpy(*(void **)((char *)&v384->mNumberBuffers + v386), v7->mBuffers[0].mData, v7->mBuffers[0].mDataByteSize);
                      ++v385;
                      v384 = (AudioBufferList *)*((void *)this + 25);
                      v386 += 16;
                    }
                    while (v385 < v384->mNumberBuffers);
                  }
                  AudioTimeStamp v551 = v548;
                  v542.UInt32 mNumberBuffers = 512;
                  uint64_t v341 = AudioUnitProcess(v350[438], &v542.mNumberBuffers, &v551, *((_DWORD *)this + 121), v384);
                  if ((*((unsigned char *)this + 8900) & 0x40) != 0
                    && (*((unsigned char *)this + 8908) & 0x40) != 0
                    && (uint64_t v341 = *((void *)this + 476)) != 0)
                  {
                    int v387 = *((_DWORD *)this + 576);
                    if (v387 != *((_DWORD *)this + 578))
                    {
                      AudioUnitSetParameter((AudioUnit)v341, 0, 0, 0, (float)v387, 0);
                      uint64_t v341 = *((void *)this + 476);
                    }
                    *(void *)&v553.UInt32 mNumberBuffers = *((void *)this + 25);
                    *(void *)&v552.UInt32 mNumberBuffers = v7;
                    AudioTimeStamp v550 = v548;
                    LODWORD(v549[0]) = 512;
                    uint64_t v341 = AudioUnitProcessMultiple((AudioUnit)v341, (AudioUnitRenderActionFlags *)v549, &v550, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v553, 1u, (AudioBufferList **)&v552);
                    if (v9[3409] || v9[3410]) {
                      uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v344, v7, &v548);
                    }
                  }
                  else if (v7->mNumberBuffers)
                  {
                    unint64_t v395 = 0;
                    v396 = &v7->mBuffers[0].mData;
                    do
                    {
                      long long v397 = (unsigned int *)*((void *)this + 25);
                      if (v395 >= *v397) {
                        unint64_t v398 = 0;
                      }
                      else {
                        unint64_t v398 = v395;
                      }
                      uint64_t v341 = (uint64_t)memcpy(*v396, *(const void **)&v397[4 * v398 + 4], *((unsigned int *)v396 - 1));
                      ++v395;
                      v396 += 2;
                    }
                    while (v395 < v7->mNumberBuffers);
                  }
                }
                goto LABEL_723;
              }
              if ((v343 & 0x8000000000) == 0
                || (*((unsigned char *)this + 8908) & 0x80) == 0
                || (uint64_t v341 = *((void *)this + 477)) == 0)
              {
                if ((v343 & 0x20000000000) != 0
                  && (uint64_t v361 = *((void *)this + 1113), (v361 & 0x20000000000) != 0)
                  && *((void *)this + 479))
                {
                  if ((v343 & v361 & 0x40000000000) != 0 && *((void *)this + 480))
                  {
                    if (v342 - 65 <= 0xFFFFFFBF)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v551.mSampleTime) = 136315394;
                        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v551.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v551.mHostTime + 6) = 923;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                      }
                      std::string::size_type v513 = __cxa_allocate_exception(0x10uLL);
                      *(void *)std::string::size_type v513 = &unk_1F14C8B68;
                      v513[2] = -50;
                    }
                    MEMORY[0x1F4188790](v341);
                    std::string::size_type v363 = (UInt32 *)((char *)&v517 - v362);
                    bzero((char *)&v517 - v362, v364);
                    unint64_t v365 = 0;
                    *std::string::size_type v363 = v342;
                    uint64_t v366 = *((void *)this + 25);
                    uint64_t v367 = 16 * v342;
                    do
                    {
                      v368 = memcpy(*(void **)(v366 + v365 + 16), v7->mBuffers[v365 / 0x10].mData, *(unsigned int *)(v366 + v365 + 12));
                      uint64_t v366 = *((void *)this + 25);
                      *(_OWORD *)&v363[v365 / 4 + 2] = *(_OWORD *)(v366 + v365 + 8);
                      v365 += 16;
                    }
                    while (v367 != v365);
                    *(void *)&v550.Float64 mSampleTime = v363;
                    uint64_t v369 = *((unsigned int *)this + 1075);
                    if ((v369 - 65) < 0xFFFFFFC0)
                    {
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v551.mSampleTime) = 136315394;
                        *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                        WORD2(v551.mHostTime) = 1024;
                        *(_DWORD *)((char *)&v551.mHostTime + 6) = 938;
                        _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                      }
                      int v514 = __cxa_allocate_exception(0x10uLL);
                      *(void *)int v514 = &unk_1F14C8B68;
                      v514[2] = -50;
                    }
                    MEMORY[0x1F4188790](v368);
                    long long v371 = (AudioBufferList *)((char *)&v517 - v370);
                    bzero((char *)&v517 - v370, v372);
                    uint64_t v373 = 0;
                    v371->UInt32 mNumberBuffers = v369;
                    v374 = v7 + 1;
                    do
                    {
                      AudioBuffer v375 = *(AudioBuffer *)&v374->mNumberBuffers;
                      v374 = (AudioBufferList *)((char *)v374 + 32);
                      v371->mBuffers[v373++] = v375;
                    }
                    while (v369 != v373);
                    *(void *)&v553.UInt32 mNumberBuffers = v371;
                    if (*((unsigned char *)this + 2245))
                    {
                      int v376 = *((_DWORD *)this + 576);
                      if (v376 != *((_DWORD *)this + 578)) {
                        AudioUnitSetParameter(*((AudioUnit *)this + 480), 0, 0, 0, (float)v376, 0);
                      }
                    }
                    AudioTimeStamp v551 = v548;
                    v552.UInt32 mNumberBuffers = 512;
                    AudioUnitProcessMultiple(*((AudioUnit *)this + 480), &v552.mNumberBuffers, &v551, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
                    if (v9[3409] || v9[3410]) {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Eu, v344, v371, &v551);
                    }
                    long long v377 = &v7->mBuffers[0].mData;
                    do
                    {
                      memcpy(*v377, v377[2], *((unsigned int *)v377 - 1));
                      v377 += 4;
                      --v369;
                    }
                    while (v369);
                  }
                  else if (!*((unsigned char *)this + 2244) && v7->mNumberBuffers >= 2)
                  {
                    std::string::size_type v399 = (void **)v7[1].mBuffers;
                    unint64_t v400 = 1;
                    do
                    {
                      memcpy(*v399, v7->mBuffers[0].mData, *((unsigned int *)v399 - 1));
                      ++v400;
                      v399 += 2;
                    }
                    while (v400 < v7->mNumberBuffers);
                  }
                  AudioTimeStamp v551 = v548;
                  LODWORD(v550.mSampleTime) = 512;
                  uint64_t v341 = AudioUnitProcess(*((AudioUnit *)this + 479), (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                }
                else if ((v343 & 0x2000000000000000) != 0 && (*((unsigned char *)this + 8911) & 0x20) != 0)
                {
                  unsigned int v392 = v7->mNumberBuffers;
                  if (v7->mNumberBuffers >= 2)
                  {
                    if (*((_DWORD *)this + 79) == 1)
                    {
                      uint64_t v341 = (uint64_t)memcpy(*(void **)&v7[1].mBuffers[0].mNumberChannels, v7->mBuffers[0].mData, v7->mBuffers[0].mDataByteSize);
                      unsigned int v392 = v7->mNumberBuffers;
                    }
                    if (v392 >= 3)
                    {
                      std::string::size_type v393 = (void **)&v7[2];
                      unint64_t v394 = 2;
                      do
                      {
                        bzero(*v393, *((unsigned int *)v393 - 1));
                        ++v394;
                        v393 += 2;
                      }
                      while (v394 < v7->mNumberBuffers);
                    }
                  }
                }
                else if (!*((unsigned char *)this + 2244))
                {
                  unsigned int v378 = *((_DWORD *)this + 79);
                  unint64_t v379 = v378 <= 1 ? 1 : v378;
                  if (v379 < v7->mNumberBuffers)
                  {
                    v380 = (char *)v7 + 16 * (v379 - 1);
                    std::string::size_type v381 = (const void **)(v380 + 16);
                    v382 = (unsigned int *)(v380 + 12);
                    uint64_t v383 = 16 * v379 + 16;
                    do
                    {
                      uint64_t v341 = (uint64_t)memcpy(*(void **)((char *)&v7->mNumberBuffers + v383), *v381, *v382);
                      ++v379;
                      v383 += 16;
                    }
                    while (v379 < v7->mNumberBuffers);
                  }
                }
LABEL_723:
                uint64_t v401 = *((void *)this + 1112);
                if ((v401 & 0x80000000000) == 0 || (*((unsigned char *)this + 8909) & 8) == 0 || !*((void *)this + 481)) {
                  goto LABEL_758;
                }
                uint64_t v402 = *((void *)this + 2145);
                long long v403 = *(float **)(v402 + 16);
                v552.UInt32 mNumberBuffers = *((_DWORD *)this + 127);
                v404 = (CA::AudioSampleRateConverter **)*((void *)this + 49);
                if (v404)
                {
                  v552.UInt32 mNumberBuffers = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*v404);
                  uint64_t v402 = *((void *)this + 1996);
                  if (v552.mNumberBuffers <= *(_DWORD *)(v402 + 12) >> 2)
                  {
                    VoiceProcessor::SampleRateConverter::Convert(*((CA::AudioSampleRateConverter ***)this + 49), (unsigned int *)this + 127, &v552.mNumberBuffers, *((const AudioBufferList **)this + 2145), (const AudioBufferList *)v402);
                    uint64_t v402 = *((void *)this + 1996);
                    std::string::size_type v405 = v518;
                  }
                  else
                  {
                    std::string::size_type v405 = v518;
                    *id v518 = 0;
                  }
                  long long v403 = *(float **)(v402 + 16);
                }
                else
                {
                  std::string::size_type v405 = v518;
                }
                vDSP_Length v406 = (unint64_t)*(unsigned int *)(v402 + 12) >> 2;
                if (*v405)
                {
                  AudioUnitParameterValue v407 = 0.0;
                  if (v406 > v552.mNumberBuffers) {
                    vDSP_vclr(&v403[v552.mNumberBuffers], 1, (v406 - v552.mNumberBuffers));
                  }
                }
                else
                {
                  AudioUnitParameterValue v407 = 1.0;
                  vDSP_vclr(v403, 1, v406);
                }
                AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x15u, 0, 0, v407, 0);
                if (*((unsigned char *)this + 4671) & 1) != 0 && (*((unsigned char *)this + 4687))
                {
                  v408 = (OpaqueAudioComponentInstance *)*((void *)this + 403);
                  if (v408)
                  {
                    LODWORD(v551.mSampleTime) = 0;
                    AudioUnitGetParameter(v408, 9u, 0, 0, (AudioUnitParameterValue *)&v551);
                    AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x17u, 0, 0, *(AudioUnitParameterValue *)&v551.mSampleTime, 0);
                  }
                }
                long long v409 = (OpaqueAudioComponentInstance *)*((void *)this + 481);
                unsigned int v410 = atomic_load(VoiceProcessorV4::mIsOnEar);
                AudioUnitSetParameter(v409, 0x16u, 0, 0, (float)v410, 0);
                uint64_t v411 = *((void *)this + 49);
                uint64_t v412 = 17160;
                if (v411) {
                  uint64_t v412 = 15968;
                }
                UInt64 v413 = *(void *)((char *)this + v412);
                *(void *)&v550.Float64 mSampleTime = v7;
                v550.mHostTime = v413;
                AudioTimeStamp v551 = v548;
                v542.UInt32 mNumberBuffers = 512;
                *(void *)&v553.UInt32 mNumberBuffers = v7;
                uint64_t v414 = *((unsigned int *)this + 129);
                if (v9[3409] || v9[3410])
                {
                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x6Fu, v414, v7, &v551);
                  uint64_t v414 = *((unsigned int *)this + 129);
                  uint64_t v415 = 15968;
                  if (!*((void *)this + 49)) {
                    uint64_t v415 = 17160;
                  }
                  v416 = *(const AudioBufferList **)((char *)this + v415);
                  if (v9[3409])
                  {
LABEL_753:
                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x70u, v414, v416, &v551);
LABEL_754:
                    AudioUnitProcessMultiple(*((AudioUnit *)this + 481), &v542.mNumberBuffers, &v551, *((_DWORD *)this + 121), 2u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
                    if (v9[3409] || v9[3410]) {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x71u, *((unsigned int *)this + 129), v7, &v551);
                    }
                    uint64_t v341 = AudioUnitSetParameter(*((AudioUnit *)this + 481), 0x15u, 0, 0, 0.0, 0);
                    uint64_t v401 = *((void *)this + 1112);
LABEL_758:
                    if ((v401 & 0x100000000000) != 0 && (*((unsigned char *)this + 8909) & 0x10) != 0)
                    {
                      uint64_t v341 = *((void *)this + 482);
                      if (v341)
                      {
                        long long v418 = *(_OWORD *)&v519->mRateScalar;
                        *(_OWORD *)&v551.Float64 mSampleTime = *(_OWORD *)&v519->mSampleTime;
                        *(_OWORD *)&v551.mRateScalar = v418;
                        long long v419 = *(_OWORD *)&v519->mSMPTETime.mHours;
                        *(_OWORD *)&v551.mSMPTETime.mSubframes = *(_OWORD *)&v519->mSMPTETime.mSubframes;
                        *(_OWORD *)&v551.mSMPTETime.mHours = v419;
                        LODWORD(v550.mSampleTime) = 512;
                        uint64_t v341 = AudioUnitProcess((AudioUnit)v341, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                        uint64_t v401 = *((void *)this + 1112);
                      }
                    }
                    if ((v401 & 0x200000000000) != 0 && (*((unsigned char *)this + 8909) & 0x20) != 0)
                    {
                      uint64_t v341 = *((void *)this + 483);
                      if (v341)
                      {
                        *(void *)&v550.Float64 mSampleTime = v7;
                        *(void *)&v553.UInt32 mNumberBuffers = v7;
                        long long v420 = *(_OWORD *)&v519->mRateScalar;
                        *(_OWORD *)&v551.Float64 mSampleTime = *(_OWORD *)&v519->mSampleTime;
                        *(_OWORD *)&v551.mRateScalar = v420;
                        long long v421 = *(_OWORD *)&v519->mSMPTETime.mHours;
                        *(_OWORD *)&v551.mSMPTETime.mSubframes = *(_OWORD *)&v519->mSMPTETime.mSubframes;
                        *(_OWORD *)&v551.mSMPTETime.mHours = v421;
                        v552.UInt32 mNumberBuffers = 512;
                        uint64_t v341 = AudioUnitProcessMultiple((AudioUnit)v341, &v552.mNumberBuffers, &v551, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
                        uint64_t v401 = *((void *)this + 1112);
                      }
                    }
                    if ((v401 & 0x100000000000000) == 0
                      || (uint64_t v422 = *((void *)this + 1113), (v422 & 0x100000000000000) == 0)
                      || !*((void *)this + 494))
                    {
                      if ((v401 & 0x200000000000000) == 0
                        || (uint64_t v422 = *((void *)this + 1113), (v422 & 0x200000000000000) == 0)
                        || !*((void *)this + 495))
                      {
                        if ((v401 & 0x400000000000000) == 0
                          || (uint64_t v422 = *((void *)this + 1113), (v422 & 0x400000000000000) == 0)
                          || !*((void *)this + 496))
                        {
                          char v439 = 0;
                          goto LABEL_803;
                        }
                      }
                    }
                    if ((v401 & v422 & 0x800000000000) != 0)
                    {
                      uint64_t v341 = *((void *)this + 485);
                      if (v341)
                      {
                        AudioTimeStamp v551 = v548;
                        LODWORD(v550.mSampleTime) = 512;
                        uint64_t v341 = AudioUnitProcess((AudioUnit)v341, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                        if (v9[3409] || v9[3410]) {
                          uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), v7, &v551);
                        }
                        uint64_t v401 = *((void *)this + 1112);
                      }
                    }
                    if (v401 & 0x1000000000000) != 0 && (*((unsigned char *)this + 8910))
                    {
                      std::string::size_type v423 = (OpaqueAudioComponentInstance *)*((void *)this + 486);
                      if (v423)
                      {
                        uint64_t v424 = *((unsigned int *)this + 1075);
                        if ((v424 - 65) <= 0xFFFFFFBF)
                        {
                          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                            goto LABEL_1011;
                          }
                          LODWORD(v551.mSampleTime) = 136315394;
                          *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                          WORD2(v551.mHostTime) = 1024;
                          *(_DWORD *)((char *)&v551.mHostTime + 6) = 1117;
                          long long v511 = MEMORY[0x1E4F14500];
                          goto LABEL_1010;
                        }
                        MEMORY[0x1F4188790](v341);
                        v426 = (AudioBufferList *)((char *)&v517 - v425);
                        bzero((char *)&v517 - v425, v427);
                        uint64_t v428 = 0;
                        v426->UInt32 mNumberBuffers = v424;
                        std::string::size_type v429 = v7->mBuffers;
                        do
                        {
                          AudioBuffer v430 = *v429;
                          v429 += 2;
                          v426->mBuffers[v428++] = v430;
                        }
                        while (v424 != v428);
                        AudioTimeStamp v551 = v548;
                        LODWORD(v550.mSampleTime) = 512;
                        uint64_t v341 = AudioUnitProcess(v423, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v426);
                        if (v9[3409] || v9[3410]) {
                          uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Au, *((unsigned int *)this + 121), v426, &v551);
                        }
                        uint64_t v401 = *((void *)this + 1112);
                      }
                    }
                    if ((v401 & 0x2000000000000) == 0
                      || (*((unsigned char *)this + 8910) & 2) == 0
                      || (long long v431 = (OpaqueAudioComponentInstance *)*((void *)this + 487)) == 0)
                    {
LABEL_801:
                      char v439 = 1;
LABEL_803:
                      if ((v401 & 0x40000000000000) != 0 && (*((unsigned char *)this + 8910) & 0x40) != 0)
                      {
                        uint64_t v341 = *((void *)this + 492);
                        if (v341)
                        {
                          AudioTimeStamp v551 = v548;
                          LODWORD(v550.mSampleTime) = 512;
                          uint64_t v341 = AudioUnitProcess((AudioUnit)v341, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                          uint64_t v401 = *((void *)this + 1112);
                        }
                      }
                      if ((v401 & 0x800000000000000) == 0
                        || (*((unsigned char *)this + 8911) & 8) == 0 && !*((unsigned char *)this + 472))
                      {
                        goto LABEL_841;
                      }
                      LODWORD(v551.mSampleTime) = 1065353216;
                      LODWORD(v550.mSampleTime) = 1065353216;
                      if (*((unsigned char *)this + 2083) || *((unsigned char *)this + 472))
                      {
                        float v440 = *((float *)this + 1133);
                        if (v440 != 0.0)
                        {
                          float v441 = __exp10f(v440 / 20.0);
                          *(float *)&v550.Float64 mSampleTime = v441;
                          *(float *)&v551.Float64 mSampleTime = v441;
LABEL_828:
                          uint64_t v7 = v527;
                          goto LABEL_829;
                        }
                      }
                      float v442 = *((float *)this + 1131);
                      if (v442 >= -300.0)
                      {
                        if (v442 == 0.0)
                        {
                          float v441 = 1.0;
                        }
                        else
                        {
                          float v443 = v442 / 20.0;
                          BOOL v444 = v442 <= 60.0;
                          float v445 = 3.0;
                          if (v444) {
                            float v445 = v443;
                          }
                          float v441 = __exp10f(v445);
                          *(float *)&v551.Float64 mSampleTime = v441;
                          uint64_t v7 = v527;
                        }
                      }
                      else
                      {
                        LODWORD(v551.mSampleTime) = 0;
                        float v441 = 0.0;
                      }
                      float v446 = *((float *)this + 1132);
                      if (v446 >= -300.0)
                      {
                        if (v446 != 0.0)
                        {
                          float v447 = v446 / 20.0;
                          if (v446 > 60.0) {
                            float v447 = 3.0;
                          }
                          LODWORD(v550.mSampleTime) = __exp10f(v447);
                          float v441 = *(float *)&v551.mSampleTime;
                          goto LABEL_828;
                        }
                      }
                      else
                      {
                        LODWORD(v550.mSampleTime) = 0;
                      }
LABEL_829:
                      if (v441 == 0.0)
                      {
                        bzero(v7->mBuffers[0].mData, 4 * *((unsigned int *)this + 121));
                        uint64_t v9 = v534;
                        uint64_t v344 = v521;
                      }
                      else
                      {
                        uint64_t v9 = v534;
                        uint64_t v344 = v521;
                        if (v441 != 1.0) {
                          vDSP_vsmul((const float *)v7->mBuffers[0].mData, 1, (const float *)&v551, (float *)v7->mBuffers[0].mData, 1, *((unsigned int *)this + 121));
                        }
                      }
                      if (v7->mNumberBuffers >= 2)
                      {
                        unint64_t v448 = 1;
                        uint64_t v449 = 32;
                        do
                        {
                          if (*(float *)&v550.mSampleTime == 0.0)
                          {
                            bzero(*(void **)((char *)&v7->mNumberBuffers + v449), 4 * *((unsigned int *)this + 121));
                          }
                          else if (*(float *)&v550.mSampleTime != 1.0)
                          {
                            vDSP_vsmul(*(const float **)((char *)&v7->mNumberBuffers + v449), 1, (const float *)&v550, *(float **)((char *)&v7->mNumberBuffers + v449), 1, *((unsigned int *)this + 121));
                          }
                          ++v448;
                          v449 += 16;
                        }
                        while (v448 < v7->mNumberBuffers);
                      }
                      uint64_t v401 = *((void *)this + 1112);
LABEL_841:
                      if ((v401 & 0x80000000000000) != 0 && (*((unsigned char *)this + 8910) & 0x80) != 0)
                      {
                        uint64_t v341 = *((void *)this + 493);
                        if (v341)
                        {
                          AudioTimeStamp v551 = v548;
                          LODWORD(v550.mSampleTime) = 512;
                          uint64_t v341 = AudioUnitProcess((AudioUnit)v341, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                          if (v9[3409] || v9[3410]) {
                            uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x77u, *((unsigned int *)this + 121), v7, &v551);
                          }
                          uint64_t v401 = *((void *)this + 1112);
                        }
                      }
                      if (v401 & 0x100000000000000) != 0 && (*((unsigned char *)this + 8911))
                      {
                        uint64_t v341 = *((void *)this + 494);
                        if (v341)
                        {
                          if (*((_DWORD *)this + 1130) == 1 && (v450 = (_DWORD *)*((void *)this + 197)) != 0)
                          {
                            ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v450);
                            uint64_t v341 = *((void *)this + 494);
                            UInt32 v451 = 2;
                          }
                          else
                          {
                            UInt32 v451 = 1;
                          }
                          UInt64 v452 = *((void *)this + 197);
                          *(void *)&v550.Float64 mSampleTime = v7;
                          v550.mHostTime = v452;
                          *(void *)&v553.UInt32 mNumberBuffers = v7;
                          AudioTimeStamp v551 = v548;
                          v552.UInt32 mNumberBuffers = 512;
                          uint64_t v341 = AudioUnitProcessMultiple((AudioUnit)v341, &v552.mNumberBuffers, &v551, *((_DWORD *)this + 121), v451, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
                          if (v9[3409] || v9[3410]) {
                            uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x41u, v344, v7, &v551);
                          }
                          uint64_t v401 = *((void *)this + 1112);
                        }
                      }
                      if ((v401 & 0x200000000000000) != 0 && (*((unsigned char *)this + 8911) & 2) != 0)
                      {
                        std::string::size_type v453 = (OpaqueAudioComponentInstance *)*((void *)this + 495);
                        if (v453)
                        {
                          uint64_t v454 = *((unsigned int *)this + 1075);
                          if ((v454 - 65) <= 0xFFFFFFBF)
                          {
                            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                            {
                              LODWORD(v551.mSampleTime) = 136315394;
                              *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                              WORD2(v551.mHostTime) = 1024;
                              *(_DWORD *)((char *)&v551.mHostTime + 6) = 1227;
                              _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                            }
                            std::string::size_type v507 = __cxa_allocate_exception(0x10uLL);
                            *(void *)std::string::size_type v507 = &unk_1F14C8B68;
                            v507[2] = -50;
                          }
                          MEMORY[0x1F4188790](v341);
                          v456 = (AudioBufferList *)((char *)&v517 - v455);
                          bzero((char *)&v517 - v455, v457);
                          uint64_t v458 = 0;
                          v456->UInt32 mNumberBuffers = v454;
                          std::string::size_type v459 = v7->mBuffers;
                          do
                          {
                            AudioBuffer v460 = *v459;
                            v459 += 2;
                            v456->mBuffers[v458++] = v460;
                          }
                          while (v454 != v458);
                          UInt64 v461 = *((void *)this + 197);
                          *(void *)&v550.Float64 mSampleTime = v456;
                          v550.mHostTime = v461;
                          *(void *)&v553.UInt32 mNumberBuffers = v456;
                          AudioTimeStamp v551 = v548;
                          v552.UInt32 mNumberBuffers = 512;
                          uint64_t v341 = AudioUnitProcessMultiple(v453, &v552.mNumberBuffers, &v551, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
                          if (v9[3409] || v9[3410]) {
                            uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x42u, v344, v456, &v551);
                          }
                          uint64_t v401 = *((void *)this + 1112);
                        }
                      }
                      if ((v401 & 0x400000000000000) != 0
                        && (*((unsigned char *)this + 8911) & 4) != 0
                        && *((void *)this + 496))
                      {
                        if (*((_DWORD *)this + 1130) == 1 && (v462 = (_DWORD *)*((void *)this + 197)) != 0)
                        {
                          uint64_t v341 = (uint64_t)ABLRingBuffer<float>::ReadFrom((_DWORD *)this + 384, *((_DWORD *)this + 121), v462);
                          UInt32 v463 = 2;
                        }
                        else
                        {
                          UInt32 v463 = 1;
                        }
                        uint64_t v464 = *((unsigned int *)this + 1075);
                        if ((v464 - 65) <= 0xFFFFFFBF)
                        {
                          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                          {
                            LODWORD(v551.mSampleTime) = 136315394;
                            *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                            WORD2(v551.mHostTime) = 1024;
                            *(_DWORD *)((char *)&v551.mHostTime + 6) = 1252;
                            _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                          }
                          v508 = __cxa_allocate_exception(0x10uLL);
                          *(void *)v508 = &unk_1F14C8B68;
                          v508[2] = -50;
                        }
                        MEMORY[0x1F4188790](v341);
                        v466 = (AudioBufferList *)((char *)&v517 - v465);
                        bzero((char *)&v517 - v465, v467);
                        uint64_t v468 = 0;
                        v466->UInt32 mNumberBuffers = v464;
                        long long v469 = v7 + 1;
                        do
                        {
                          AudioBuffer v470 = *(AudioBuffer *)&v469->mNumberBuffers;
                          long long v469 = (AudioBufferList *)((char *)v469 + 32);
                          v466->mBuffers[v468++] = v470;
                        }
                        while (v464 != v468);
                        UInt64 v471 = *((void *)this + 197);
                        *(void *)&v550.Float64 mSampleTime = v466;
                        v550.mHostTime = v471;
                        *(void *)&v553.UInt32 mNumberBuffers = v466;
                        AudioTimeStamp v551 = v548;
                        v552.UInt32 mNumberBuffers = 512;
                        AudioUnitProcessMultiple(*((AudioUnit *)this + 496), &v552.mNumberBuffers, &v551, *((_DWORD *)this + 121), v463, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
                        if (v9[3409] || v9[3410]) {
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x43u, v344, v466, &v551);
                        }
                        uint64_t v401 = *((void *)this + 1112);
                      }
                      if ((v401 & 0x400000000000) != 0 && (*((unsigned char *)this + 8909) & 0x40) != 0)
                      {
                        v472 = (OpaqueAudioComponentInstance *)*((void *)this + 484);
                        if (v472)
                        {
                          AudioTimeStamp v551 = v548;
                          LODWORD(v550.mSampleTime) = 512;
                          AudioUnitProcess(v472, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                          uint64_t v401 = *((void *)this + 1112);
                        }
                      }
                      if ((v401 & 0x800000000000) != 0) {
                        char v473 = v439;
                      }
                      else {
                        char v473 = 1;
                      }
                      if (v473)
                      {
                        v474 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
                      }
                      else
                      {
                        v474 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
                        if ((*((unsigned char *)this + 8909) & 0x80) != 0)
                        {
                          long long v475 = (OpaqueAudioComponentInstance *)*((void *)this + 485);
                          if (v475)
                          {
                            AudioTimeStamp v551 = v548;
                            LODWORD(v550.mSampleTime) = 512;
                            AudioUnitProcess(v475, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                            if (v9[3409] || v9[3410]) {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x39u, *((unsigned int *)this + 121), v7, &v551);
                            }
                            uint64_t v401 = *((void *)this + 1112);
                          }
                        }
                      }
                      if ((v401 & 0x4000000000000) != 0 && (*((unsigned char *)this + 8910) & 4) != 0)
                      {
                        v476 = (OpaqueAudioComponentInstance *)*((void *)this + 488);
                        if (v476)
                        {
                          AudioTimeStamp v551 = v548;
                          LODWORD(v550.mSampleTime) = 512;
                          AudioUnitProcess(v476, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                          if (v9[3409] || v9[3410]) {
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x75u, *((unsigned int *)this + 121), v7, &v551);
                          }
                          uint64_t v401 = *((void *)this + 1112);
                        }
                      }
                      if ((v401 & 0x8000000000000) != 0 && (*((unsigned char *)this + 8910) & 8) != 0)
                      {
                        std::string::size_type v477 = (OpaqueAudioComponentInstance *)*((void *)this + 489);
                        if (v477)
                        {
                          unsigned int v478 = *((_DWORD *)this + 18);
                          if (v478 <= 0x34 && ((0x1FFFE33F3FFEF0uLL >> v478) & 1) != 0)
                          {
                            AudioTimeStamp v551 = v548;
                            LODWORD(v550.mSampleTime) = 512;
                            AudioUnitProcess(v477, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v7);
                            if (v9[3409] || v9[3410]) {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x73u, *((unsigned int *)this + 121), v7, &v551);
                            }
                          }
                        }
                      }
                      if (v9[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v344, v7), v9[3409])
                        || v9[3410])
                      {
                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v344, v7, &v548);
                      }
                      uint64_t v479 = *((void *)this + 2003);
                      if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
                        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_19642);
                      }
                      if (v474[26]) {
                        ((void (*)(uint64_t, uint64_t, void, AudioBufferList *, uint64_t, AudioTimeStamp *))v474[26])(v479, 68, 0, v7, v344, &v548);
                      }
                      if (*((_DWORD *)this + 1129) == 1 && !v9[3688]) {
                        VoiceProcessorV2::AppendReferenceSignal(this, v7, &v548, 0);
                      }
                      if (v9[3409]) {
                        VoiceProcessorV2::LoopBackRead(this, v344, v7);
                      }
                      goto LABEL_926;
                    }
                    uint64_t v432 = *((unsigned int *)this + 1075);
                    if ((v432 - 65) > 0xFFFFFFBF)
                    {
                      MEMORY[0x1F4188790](v341);
                      v434 = (AudioBufferList *)((char *)&v517 - v433);
                      bzero((char *)&v517 - v433, v435);
                      uint64_t v436 = 0;
                      v434->UInt32 mNumberBuffers = v432;
                      long long v437 = v7 + 1;
                      do
                      {
                        AudioBuffer v438 = *(AudioBuffer *)&v437->mNumberBuffers;
                        long long v437 = (AudioBufferList *)((char *)v437 + 32);
                        v434->mBuffers[v436++] = v438;
                      }
                      while (v432 != v436);
                      AudioTimeStamp v551 = v548;
                      LODWORD(v550.mSampleTime) = 512;
                      uint64_t v341 = AudioUnitProcess(v431, (AudioUnitRenderActionFlags *)&v550, &v551, *((_DWORD *)this + 121), v434);
                      if (v9[3409] || v9[3410]) {
                        uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x3Bu, *((unsigned int *)this + 121), v434, &v551);
                      }
                      uint64_t v401 = *((void *)this + 1112);
                      goto LABEL_801;
                    }
                    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
LABEL_1011:
                      v512 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v512 = &unk_1F14C8B68;
                      v512[2] = -50;
                    }
                    LODWORD(v551.mSampleTime) = 136315394;
                    *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(v551.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v551.mHostTime + 6) = 1131;
                    long long v511 = MEMORY[0x1E4F14500];
LABEL_1010:
                    _os_log_impl(&dword_1BB0CE000, v511, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                    goto LABEL_1011;
                  }
                }
                else
                {
                  if (v411) {
                    std::string::size_type v417 = (const AudioBufferList **)((char *)this + 15968);
                  }
                  else {
                    std::string::size_type v417 = (const AudioBufferList **)((char *)this + 17160);
                  }
                  v416 = *v417;
                }
                if (!v9[3410]) {
                  goto LABEL_754;
                }
                goto LABEL_753;
              }
              int v351 = *((_DWORD *)this + 576);
              if (v351 != *((_DWORD *)this + 578)) {
                uint64_t v341 = AudioUnitSetParameter((AudioUnit)v341, 0, 0, 0, (float)v351, 0);
              }
              if (v342 - 65 > 0xFFFFFFBF)
              {
                MEMORY[0x1F4188790](v341);
                long long v353 = (UInt32 *)((char *)&v517 - v352);
                bzero((char *)&v517 - v352, v354);
                *long long v353 = v342;
                long long v355 = memcpy(v353 + 2, v7->mBuffers, 16 * v342);
                uint64_t v356 = v7->mNumberBuffers;
                if ((v356 - 65) <= 0xFFFFFFBF)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v551.mSampleTime) = 136315394;
                    *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                    WORD2(v551.mHostTime) = 1024;
                    *(_DWORD *)((char *)&v551.mHostTime + 6) = 910;
                    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
                  }
                  v510 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v510 = &unk_1F14C8B68;
                  v510[2] = -50;
                }
                MEMORY[0x1F4188790](v355);
                v358 = (_DWORD *)((char *)&v517 - v357);
                bzero((char *)&v517 - v357, v359);
                _DWORD *v358 = v356;
                uint64_t v360 = 2;
                do
                {
                  *(AudioBuffer *)&v358[v360] = v7->mBuffers[--v356];
                  v360 += 4;
                }
                while (v356);
                *(void *)&v550.Float64 mSampleTime = v353;
                *(void *)&v553.UInt32 mNumberBuffers = v358;
                AudioTimeStamp v551 = v548;
                v552.UInt32 mNumberBuffers = 512;
                uint64_t v341 = AudioUnitProcessMultiple(*((AudioUnit *)this + 477), &v552.mNumberBuffers, &v551, *((_DWORD *)this + 121), 1u, (const AudioBufferList **)&v550, 1u, (AudioBufferList **)&v553);
                if (v9[3409] || v9[3410]) {
                  uint64_t v341 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x7Du, v344, v7, &v551);
                }
                goto LABEL_723;
              }
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
LABEL_1002:
                long long v509 = __cxa_allocate_exception(0x10uLL);
                *(void *)long long v509 = &unk_1F14C8B68;
                v509[2] = -50;
              }
              LODWORD(v551.mSampleTime) = 136315394;
              *(void *)((char *)&v551.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(v551.mHostTime) = 1024;
              *(_DWORD *)((char *)&v551.mHostTime + 6) = 907;
              v506 = MEMORY[0x1E4F14500];
LABEL_1001:
              _os_log_impl(&dword_1BB0CE000, v506, OS_LOG_TYPE_ERROR, "%25s:%-5d  STACK_ABL: invalid number of buffers", (uint8_t *)&v551, 0x12u);
              goto LABEL_1002;
            }
            UInt32 NumberOfSourceFrames = *((_DWORD *)this + 121);
            goto LABEL_234;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v66 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            vDSP_Length v67 = (*v66 ? *v66 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              UInt32 mDataByteSize = v7->mBuffers[0].mDataByteSize;
              int v69 = *((_DWORD *)this + 88) * v15;
              LODWORD(buf.mSampleTime) = 136315906;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 182;
              WORD1(buf.mRateScalar) = 1024;
              HIDWORD(buf.mRateScalar) = mDataByteSize;
              LOWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v69;
              _os_log_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].UInt32 mDataByteSize = %u, expected = %u", (uint8_t *)&buf, 0x1Eu);
            }
          }
          vDSP_Length v70 = (int *)*((void *)this + 1578);
          int v71 = v9[3409];
          if (v70)
          {
            if (!v9[3409] && !v9[3410]) {
              goto LABEL_156;
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v70, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 182, "ProcessDownlinkAudio", "processdownlinkaudio: SERIOUS ERROR: ioOutputData->mBuffers[0].UInt32 mDataByteSize = %u, expected = %u", v7->mBuffers[0].mDataByteSize, *((_DWORD *)this + 88) * v15);
            int v71 = v9[3409];
          }
          if (v71)
          {
            VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v15, v7);
            if (v9[3409])
            {
LABEL_157:
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v15, v7, &v548);
LABEL_158:
              uint64_t v72 = *((void *)this + 2003);
              if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
                dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_19642);
              }
              if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
                goto LABEL_926;
              }
              goto LABEL_203;
            }
          }
LABEL_156:
          if (!v9[3410]) {
            goto LABEL_158;
          }
          goto LABEL_157;
        }
        if (v9[3331])
        {
          double v52 = (double)(mach_absolute_time() - *((void *)this + 1988)) * 0.0000000416666667;
          double v53 = *((double *)this + 1991);
          if (v52 > v53)
          {
            *((double *)this + 199freeMatrix(*((_DWORD *)this + 17), this + 1) = v53 + 10.0;
            VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3130), (float)*((unsigned int *)this + 121), (float)v15, "processdownlinkaudio: <block size mismatch>");
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            std::string::size_type v54 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              vDSP_Length v55 = (*v54 ? *v54 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf.mSampleTime) = 136315650;
                *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 166;
                WORD1(buf.mRateScalar) = 2048;
                *(double *)((char *)&buf.mRateScalar + 4) = v52;
                _os_log_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", (uint8_t *)&buf, 0x1Cu);
              }
            }
            std::string::size_type v56 = (int *)*((void *)this + 1578);
            if (v56 && (v9[3409] || v9[3410]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v56, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 166, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: PROCESSDLAUDIO BAD BLOCK CONFIG for over %.6f seconds *****\n", v52);
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            int v57 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              std::string::size_type v58 = (*v57 ? *v57 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
              {
                uint64_t v521 = v15;
                UInt32 v59 = v7->mBuffers[0].mDataByteSize;
                int v60 = *((_DWORD *)this + 121);
                CAFormatter::CAFormatter((CAFormatter *)&v554, v29);
                int v61 = *((_DWORD *)this + 3130);
                LODWORD(buf.mSampleTime) = 136316674;
                *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 170;
                WORD1(buf.mRateScalar) = 1024;
                HIDWORD(buf.mRateScalar) = v521;
                LOWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v59;
                HIWORD(buf.mWordClockTime) = 1024;
                *(_DWORD *)&buf.mSMPTETime.mSubframes = v60;
                LOWORD(buf.mSMPTETime.mCounter) = 2080;
                *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v554.mSampleTime;
                HIWORD(buf.mSMPTETime.mFlags) = 1024;
                *(_DWORD *)&buf.mSMPTETime.mHours = v61;
                _os_log_impl(&dword_1BB0CE000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\tdl mix blk std::string::size_type size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
                if (*(void *)&v554.mSampleTime) {
                  free(*(void **)&v554.mSampleTime);
                }
                uint64_t v15 = v521;
              }
            }
            int v62 = (int *)*((void *)this + 1578);
            if (v62)
            {
              if (v9[3409] || v9[3410])
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v63 = VPLogScope(void)::scope;
                UInt32 v64 = v7->mBuffers[0].mDataByteSize;
                int v65 = *((_DWORD *)this + 121);
                CAFormatter::CAFormatter((CAFormatter *)&buf, v29);
                CALegacyLog::log(v62, 1, v63, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 170, "ProcessDownlinkAudio", "processdownlinkaudio: <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\tdl mix blk std::string::size_type size = %u\n\tdl mix asbd = %s\n\t process dl callcount = %u\n", v15, v64, v65, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3130));
LABEL_194:
                if (*(void *)&buf.mSampleTime) {
                  free(*(void **)&buf.mSampleTime);
                }
              }
            }
          }
        }
        else
        {
          v9[3331] = 1;
          *((void *)this + 1988) = mach_absolute_time();
          *((void *)this + 199freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x3FF0000000000000;
          VoiceProcessorV2::LogIOError((uint64_t)this, 23.002, (float)*((unsigned int *)this + 3130), (float)*((unsigned int *)this + 121), (float)v15, "processdl: <block size mismatch>");
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v73 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            vDSP_Length v74 = (*v73 ? *v73 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.mSampleTime) = 136315394;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 146;
              _os_log_impl(&dword_1BB0CE000, v74, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG", (uint8_t *)&buf, 0x12u);
            }
          }
          uint64_t v75 = (int *)*((void *)this + 1578);
          if (v75 && (v9[3409] || v9[3410]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v75, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 146, "ProcessDownlinkAudio", "CoreAudio: ***** VP BLOCK WARNING: PROCESSDLAUDIO TRANSIENT INCORRECT BLOCK CONFIG");
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          vDSP_Length v76 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            uint64_t v77 = (*v76 ? *v76 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v521 = v15;
              UInt32 v78 = v7->mBuffers[0].mDataByteSize;
              int v79 = *((_DWORD *)this + 121);
              CAFormatter::CAFormatter((CAFormatter *)&v554, v29);
              int v80 = *((_DWORD *)this + 3130);
              LODWORD(buf.mSampleTime) = 136316674;
              *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessDownlink_v9.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 150;
              WORD1(buf.mRateScalar) = 1024;
              HIDWORD(buf.mRateScalar) = v521;
              LOWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v78;
              HIWORD(buf.mWordClockTime) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mSubframes = v79;
              LOWORD(buf.mSMPTETime.mCounter) = 2080;
              *(Float64 *)((char *)&buf.mSMPTETime.mCounter + 2) = v554.mSampleTime;
              HIWORD(buf.mSMPTETime.mFlags) = 1024;
              *(_DWORD *)&buf.mSMPTETime.mHours = v80;
              _os_log_impl(&dword_1BB0CE000, v77, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t dl mix buff std::string::size_type size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", (uint8_t *)&buf, 0x34u);
              if (*(void *)&v554.mSampleTime) {
                free(*(void **)&v554.mSampleTime);
              }
              uint64_t v15 = v521;
            }
          }
          float v81 = (int *)*((void *)this + 1578);
          if (v81 && (v9[3409] || v9[3410]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v82 = VPLogScope(void)::scope;
            UInt32 v83 = v7->mBuffers[0].mDataByteSize;
            int v84 = *((_DWORD *)this + 121);
            CAFormatter::CAFormatter((CAFormatter *)&buf, v29);
            CALegacyLog::log(v81, 2, v82, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 150, "ProcessDownlinkAudio", "warning: processdownlinkaudio: <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t dl mix buff std::string::size_type size = %u\n\tdlmix asbd = %s\n\tprocess dl callcount = %u\n", v15, v83, v84, *(const char **)&buf.mSampleTime, *((_DWORD *)this + 3130));
            goto LABEL_194;
          }
        }
        if (v9[3409] && (VoiceProcessorV2::InjectionFilesReadSignal(this, 2, v15, v7), v9[3409]) || v9[3410]) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x44u, v15, v7, &v548);
        }
        uint64_t v72 = *((void *)this + 2003);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_19642);
        }
        if (!AudioIssueDetectorLibraryLoader(void)::libSym) {
          goto LABEL_926;
        }
LABEL_203:
        AudioIssueDetectorLibraryLoader(void)::libSym(v72, 68, 0, v7, v15, &v548);
      }
    }
    else if (v7->mNumberBuffers == *((_DWORD *)this + 89))
    {
      CFStringRef v29 = (VoiceProcessorV9 *)((char *)this + 328);
      if (!v9[3410]) {
        goto LABEL_79;
      }
      goto LABEL_53;
    }
LABEL_926:
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v546);
    unint64_t MonoABL = 0;
    LOBYTE(v1freeMatrix(*((_DWORD *)this + 17), this + 1) = 1;
    goto LABEL_927;
  }
  VoiceProcessorV2::LogIOError((uint64_t)this, 23.006, (float)*((unsigned int *)this + 3130), 0.0, 0.0, "processdl: tryer failed to acquire lock", a3, a4, a5, a6, a7);
  double v10 = (VoiceProcessorV9 *)((char *)this + 2576);
  CADeprecated::CAMutex::Lock((VoiceProcessorV9 *)((char *)this + 2576));
LABEL_3:
  ++*((_DWORD *)this + 3130);
  CADeprecated::CAMutex::Unlock(v10);
  LOBYTE(v1freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  unint64_t MonoABL = 1937006964;
  double v13 = 0.0;
LABEL_927:
  if (v9[3409] && *((void *)this + 1579))
  {
    uint64_t v480 = mach_absolute_time();
    long long v481 = (int *)*((void *)this + 1579);
    long long v155 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
    if (VPTimestampLogScope(void)::once != -1) {
      dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
    }
    uint64_t v184 = (uint64_t)&VPStrategyManager::StateAsString(unsigned long long)::stateNames;
    double v185 = (double)v480 * 0.0000000416666667 - v13;
    CALegacyLog::log(v481, 5, VPTimestampLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 1326, "ProcessDownlinkAudio", "DL %f %f %f", v548.mSampleTime, v13, v185);
    unsigned int v482 = *((_DWORD *)this + 121);
    double v483 = *((double *)this + 41);
    if (v185 >= (double)v482 / v483)
    {
      long long v271 = (AudioBufferList *)*((void *)this + 1579);
      if (VPTimestampLogScope(void)::once != -1) {
LABEL_957:
      }
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
      CALegacyLog::log((int *)v271, 5, *(void *)(v184 + 672), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 1328, "ProcessDownlinkAudio", "DL ERROR, processing slower than RT - %f", v185);
      unsigned int v482 = *((_DWORD *)this + 121);
      double v483 = *((double *)this + 41);
    }
    if (v13 - *((double *)this + 1994) > (double)(*((_DWORD *)this + 294) + v482) / v483)
    {
      v484 = (int *)*((void *)this + 1579);
      if (v155[83] != -1) {
        dispatch_once(&VPTimestampLogScope(void)::once, &__block_literal_global_6_30742);
      }
      CALegacyLog::log(v484, 5, *(void *)(v184 + 672), "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessDownlink_v9.cpp", 1330, "ProcessDownlinkAudio", "DL ERROR, not being called in a timely manner - %f", v13 - *((double *)this + 1994));
    }
    *((double *)this + 1994) = v13;
  }
  if (v11)
  {
    if (*((_DWORD *)this + 19) != 1)
    {
      if (*((unsigned char *)this + 1648) {
        || (v485 = FadeInOverFewFrames(*((AudioBufferList **)this + 204), v7, *((unsigned int *)this + 410), *((_DWORD *)this + 411)), *((unsigned char *)this + 1648) = v485, *((_DWORD *)this + 41std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = HIDWORD(v485), (_BYTE)v485))
      }
      {
        CopyAllBuffersABL(*((UInt32 **)this + 204), v7);
      }
    }
  }
  else
  {
    if (*((_DWORD *)this + 20) == 1)
    {
      if (!v7->mNumberBuffers) {
        goto LABEL_956;
      }
      unint64_t v486 = 0;
      long long v487 = &v7->mBuffers[0].mData;
      do
      {
        bzero(*v487, *((unsigned int *)v487 - 1));
        ++v486;
        v487 += 2;
      }
      while (v486 < v7->mNumberBuffers);
    }
    else
    {
      *((_DWORD *)this + 41std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      *((unsigned char *)this + 1648) = 0;
      FadeOutOverOneFrame(*((AudioBufferList **)this + 204), v7);
    }
    int v488 = *((_DWORD *)this + 20);
    if (v488 == 2 || v488 == 4) {
      unint64_t MonoABL = 0;
    }
  }
LABEL_956:
  atomic_fetch_add((atomic_uint *volatile)this + 621, 0xFFFFFFFF);
  return MonoABL;
}

void sub_1BB5FED1C(_Unwind_Exception *a1)
{
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)(v1 + 240));
  atomic_fetch_add((atomic_uint *volatile)(v2 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV9::ProcessDownlinkAudio(AudioBufferList *,AudioBufferList *,AudioBufferList *,AudioBufferList *,unsigned int,AudioTimeStamp const&)::$_0>(uint64_t a1, void *inData, UInt32 inDataSize)
{
  return AudioUnitSetProperty(*(AudioUnit *)(**(void **)a1 + 3504), 0x73706D64u, 0, 0, inData, inDataSize);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_19710()
{
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

float BeamformerTD::CalculateEnergyInFullBand(uint64_t a1, const float **a2)
{
  float __C = 0.0;
  vDSP_svesq(*a2, 1, &__C, *(unsigned int *)(a1 + 32));
  return log10((float)(__C / (float)*(unsigned int *)(a1 + 32)) + 1.0e-10) * 10.0;
}

char *BeamformerTD::AllocateBlockSizeDependentVectors(BeamformerTD *this)
{
  if (*((_DWORD *)this + 3))
  {
    unint64_t v2 = 0;
    uint64_t v3 = (char **)((char *)this + 5160);
    do
    {
      unint64_t v4 = *((unsigned int *)this + 8);
      int v16 = 0;
      std::vector<float>::assign(v3, v4, &v16);
      ++v2;
      unint64_t v5 = *((unsigned int *)this + 3);
      v3 += 3;
    }
    while (v2 < v5);
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = (char **)((char *)this + 12072);
      do
      {
        unint64_t v8 = *((unsigned int *)this + 8);
        int v16 = 0;
        std::vector<float>::assign(v7, v8, &v16);
        ++v6;
        v7 += 3;
      }
      while (v6 < *((unsigned int *)this + 3));
    }
  }
  unint64_t v9 = *((unsigned int *)this + 8);
  int v16 = 0;
  std::vector<float>::assign((char **)this + 2373, v9, &v16);
  unint64_t v10 = *((unsigned int *)this + 8);
  int v16 = 0;
  std::vector<float>::assign((char **)this + 2376, v10, &v16);
  unint64_t v11 = *((unsigned int *)this + 8);
  int v16 = 0;
  std::vector<float>::assign((char **)this + 2397, v11, &v16);
  unint64_t v12 = *((unsigned int *)this + 8);
  int v16 = 0;
  std::vector<float>::assign((char **)this + 2382, v12, &v16);
  unint64_t v13 = (2 * *((_DWORD *)this + 8));
  int v16 = 0;
  std::vector<float>::assign((char **)this + 63516, v13, &v16);
  unint64_t v14 = *((unsigned int *)this + 8);
  int v16 = 0;
  return std::vector<float>::assign((char **)this + 2385, v14, &v16);
}

void BeamformerTD::SelectBeam(float **this)
{
  float v24 = 0.0;
  uint64_t __B = 0;
  vDSP_Length __I = 0;
  vDSP_vclr(this[2394], 1, 0x120uLL);
  if (*((_DWORD *)this + 3))
  {
    vDSP_Length v2 = 0;
    uint64_t v3 = (char *)(this + 69);
    unint64_t v4 = (const float **)(this + 645);
    do
    {
      float __C = 0.0;
      unsigned int v5 = *((_DWORD *)this + 11);
      uint64_t v6 = *((unsigned int *)this + 8);
      uint64_t v7 = &this[63516][v6];
      v26.realp = this[63516];
      v26.imagp = v7;
      unint64_t v8 = *(VPTimeFreqConverter **)&this[63510][2 * v2];
      if (v8)
      {
        VPTimeFreqConverter::Analyze(v8, *v4, &v26);
        LODWORD(v6) = *((_DWORD *)this + 8);
      }
      if (*((_DWORD *)this + 10) == v6) {
        unsigned int v5 = *((_DWORD *)this + 11) - 1;
      }
      uint64_t v9 = *((unsigned int *)this + 9);
      __A.realp = &v26.realp[v9];
      __A.imagp = &v26.imagp[v9];
      vDSP_zvmags(&__A, 1, this[2385], 1, v5);
      vDSP_sve(this[2385], 1, &__C, v5);
      float v10 = *v26.imagp;
      int v11 = *((_DWORD *)this + 10);
      int v12 = *((_DWORD *)this + 8);
      if (*((_DWORD *)this + 9))
      {
        float v13 = __C + (float)(v10 * v10);
        if (v11 != v12) {
          float v13 = __C;
        }
      }
      else
      {
        float v13 = __C - (float)(v10 * v10);
        if (v11 == v12) {
          float v13 = __C;
        }
      }
      float v14 = log10(v13 + 1.0e-10) * 10.0;
      float v15 = (float)(*((float *)this + 12) * *(float *)&v3[4 * v2]) + (1.0 - *((float *)this + 12)) * v14;
      *(float *)&v3[4 * v2] = v15;
      float v16 = __exp10f(fmaxf(fminf(v15, 100.0), -100.0) / 10.0);
      double v17 = this[2394];
      v17[v2++] = v16;
      vDSP_Length v18 = *((unsigned int *)this + 3);
      v4 += 3;
    }
    while (v2 < v18);
  }
  else
  {
    vDSP_Length v18 = 0;
    double v17 = this[2394];
  }
  vDSP_sve(v17, 1, (float *)&__B, v18);
  vDSP_vsdiv(this[2394], 1, (const float *)&__B, this[2394], 1, *((unsigned int *)this + 3));
  uint64_t v19 = *((unsigned int *)this + 20);
  vDSP_Length v20 = (*((_DWORD *)this + 21) - v19 + 1);
  if (*((unsigned char *)this + 104))
  {
    vDSP_meanv((const float *)this + v19 + 138, 1, (float *)&__B + 1, (*((_DWORD *)this + 21) - v19 + 1));
    *((float *)&__B + freeMatrix(*((_DWORD *)this + 17), this + 1) = -*((float *)&__B + 1);
    vDSP_vsadd((const float *)this + v19 + 138, 1, (const float *)&__B + 1, (float *)this + v19 + 138, 1, v20);
  }
  vDSP_maxvi((const float *)this + v19 + 138, 1, &v24, &__I, v20);
  if (v24 <= *((float *)this + 25)) {
    int v21 = *((_DWORD *)this + 28);
  }
  else {
    int v21 = v19 + __I;
  }
  *((_DWORD *)this + 27) = v21;
}

uint64_t BeamformerTD::ECMixSwitch(BeamformerTD *this)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = MEMORY[0x1F4188790](this);
  unint64_t v4 = (float *)((char *)v23 - ((v3 + 15) & 0x7FFFFFFF0));
  if (v2)
  {
    uint64_t v5 = *(unsigned int *)(result + 108);
    uint64_t v6 = (float *)(result + (v5 << 6) + 372144);
    float v7 = 2.2204e-16;
    uint64_t v8 = v2;
    do
    {
      float v9 = *v6++;
      float v7 = v7 + v9;
      --v8;
    }
    while (v8);
    float v10 = (float *)(result + (v5 << 6) + 372144);
    int v11 = v4;
    uint64_t v12 = v2;
    float v13 = 1.0 / v7;
    do
    {
      float v14 = *v10++;
      *v11++ = v13 * v14;
      --v12;
    }
    while (v12);
    float v15 = *(float **)(result + 24 * v5 + 365232);
    float v16 = (void *)(result + 240);
    float32x2_t v17 = 0;
    float v18 = 1.0;
    float32x2_t v19 = 0;
    do
    {
      if (*v15 == 1.0) {
        float v18 = v18 * *((float *)v16 - 1);
      }
      float v20 = *v4++;
      float v21 = v20;
      float32x2_t v17 = vmla_n_f32(v17, *(float32x2_t *)((char *)v16 - 12), v20);
      float32x2_t v22 = *(float32x2_t *)v16;
      float v16 = (void *)((char *)v16 + 20);
      float32x2_t v19 = vmla_n_f32(v19, v22, v21);
      ++v15;
      --v2;
    }
    while (v2);
  }
  else
  {
    float32x2_t v17 = 0;
    float v18 = 1.0;
    float32x2_t v19 = 0;
  }
  *(float32x2_t *)(result + 228) = v17;
  *(float32x2_t *)(result + 24std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v19;
  *(float *)(result + 236) = v18;
  return result;
}

uint64_t BeamformerTD::MakeLSDDBeam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (AUBeamItTDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
  }
  if (AUBeamItTDLogScope(void)::scope)
  {
    uint64_t v12 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
    if (!*(void *)AUBeamItTDLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315394;
    float v15 = "BeamformerTD.cpp";
    __int16 v16 = 1024;
    int v17 = 574;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamItTD: in BeamformerTD::MakeLSDDBeam. Not sure what to do here. For now just run the same thing as SRP mode.", (uint8_t *)&v14, 0x12u);
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, a3, a5, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a3, a4, a5, a6);
}

void ___ZL18AUBeamItTDLogScopev_block_invoke_19737()
{
}

uint64_t BeamformerTD::MakePHATBeam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (AUBeamItTDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
  }
  if (AUBeamItTDLogScope(void)::scope)
  {
    uint64_t v12 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
    if (!*(void *)AUBeamItTDLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315394;
    float v15 = "BeamformerTD.cpp";
    __int16 v16 = 1024;
    int v17 = 562;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d AUBeamItTD: in BeamformerTD::MakePHATBeam. Not sure what to do here. For now just run the same thing as SRP mode.", (uint8_t *)&v14, 0x12u);
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, a3, a5, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a3, a4, a5, a6);
}

void *BeamformerTD::ApplyEQ(uint64_t a1, const void **a2, float **a3, unsigned int a4, int a5)
{
  if (a5 == 1)
  {
    uint64_t v5 = a1 + 24 * a4;
    uint64_t v6 = *(float **)(v5 + 240816);
    float v7 = *a3;
    vDSP_Length v8 = *(unsigned int *)(a1 + 19616);
    vDSP_Length v9 = *(unsigned int *)(a1 + 32);
    float v10 = (const float *)(*(void *)(v5 + 358320) + 4 * v8 - 4);
    memcpy(&v6[v8 - 1], *a2, 4 * v9);
    vDSP_conv(v6, 1, v10, -1, v7, 1, v9, v8);
    return memmove(v6, &v6[v9], 4 * (v8 - 1));
  }
  else
  {
    uint64_t v12 = *a3;
    float v13 = *a2;
    size_t v14 = 4 * *(unsigned int *)(a1 + 32);
    return memcpy(v12, v13, v14);
  }
}

uint64_t BeamformerTD::MakeABeamWithCrossfade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8 = a4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4, a6);
  if (a5 != v8)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a1 + 19176, a5, a6);
    float v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88);
    return v13(a1, a1 + 19176, a3);
  }
  return result;
}

void BeamformerTD::CrossfadeBeams(uint64_t a1, float **a2, uint64_t a3)
{
  float v7 = *a2;
  uint64_t v6 = a2[1];
  int v8 = *(float **)a3;
  if ((char *)v6 - (char *)*a2 == *(void *)(a3 + 8) - *(void *)a3)
  {
    if (v7 == v6) {
      return;
    }
    for (unint64_t i = *(float **)a3; *v7 == *i; ++i)
    {
      if (++v7 == v6) {
        return;
      }
    }
  }
  float __Start = 0.0;
  vDSP_Length v10 = *(unsigned int *)(a1 + 32);
  float __Step = 1.0 / (float)v10;
  vDSP_vrampmul(v8, 1, &__Start, &__Step, v8, 1, v10);
  vDSP_Length v11 = *(unsigned int *)(a1 + 32);
  float __Start = 1.0;
  float __Step = -1.0 / (float)v11;
  vDSP_vrampmuladd(*a2, 1, &__Start, &__Step, *(float **)a3, 1, v11);
}

void BeamformerTD::MakeABeam(uint64_t a1, unsigned int *a2, char **a3, unsigned int a4, int a5)
{
  unint64_t v7 = *(unsigned int *)(a1 + 32);
  int v24 = 0;
  std::vector<float>::assign(a3, v7, &v24);
  double v23 = a2;
  unint64_t v8 = *a2;
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a1 + 384 * a4;
    vDSP_Length v11 = (float **)(v10 + 130224);
    uint64_t v12 = (void *)(v10 + 247728);
    uint64_t v13 = 4;
    do
    {
      if (*(float *)(*(void *)(a1 + 24 * a4 + 365232) + 4 * v9) == 1.0)
      {
        float __C = *(float **)(a1 + 19056);
        vDSP_Length v14 = *(unsigned int *)(a1 + 32);
        vDSP_Length v15 = *(unsigned int *)(a1 + 19608);
        __int16 v16 = (const float *)(*v12 + 4 * v15 - 4);
        int v17 = v11 - 13824;
        if (a5) {
          int v17 = v11;
        }
        uint64_t v18 = *v17;
        memcpy(&(*v17)[v15 - 1], *(const void **)&v23[v13], 4 * v14);
        vDSP_conv(v18, 1, v16, -1, __C, 1, v14, v15);
        memmove(v18, &v18[v14], 4 * (v15 - 1));
        vDSP_vadd((const float *)*a3, 1, *(const float **)(a1 + 19056), 1, (float *)*a3, 1, *(unsigned int *)(a1 + 32));
        unint64_t v8 = *v23;
      }
      ++v9;
      v11 += 3;
      v13 += 4;
      v12 += 3;
    }
    while (v9 < v8);
  }
}

uint64_t BeamformerBase::BorrowSubbandDOA(BeamformerBase *this)
{
  return 0;
}

uint64_t BeamformerBase::GetSubbandDOACalcuationEnabled(BeamformerBase *this)
{
  return 0;
}

uint64_t BeamformerBase::SetSubbandDOACalcuationEnabled(BeamformerBase *this)
{
  return 4294956446;
}

uint64_t BeamformerTD::SetProfile(BeamformerTD *this, CFDictionaryRef theDict)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SampleRate");
  uint64_t v5 = (char *)&xmmword_1E9F7EFF8 + 8;
  if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
  {
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
      {
        vDSP_Length v67 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(void *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 158;
            _os_log_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve sample rate.\n", buf, 0x12u);
          }
        }
      }
    }
    exceptiounint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Failed to retrieve sample rate from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
  }
  if (AUBeamItTDLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
    {
      uint64_t v6 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(void *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 156;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = valuePtr;
          _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved sample rate (%iHz).\n", buf, 0x18u);
        }
      }
    }
  }
  LODWORD(v4) = valuePtr;
  *((double *)this + 245std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (double)v4;
  int v87 = 0;
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"nMicsUsed");
  if (!CFNumberGetValue(v7, kCFNumberIntType, &v87))
  {
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
      {
        int v69 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(void *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 173;
            _os_log_impl(&dword_1BB0CE000, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve number of mics used.\n", buf, 0x12u);
          }
        }
      }
    }
    vDSP_Length v70 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v70, "Failed to retrieve number of mics used from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
  }
  if (AUBeamItTDLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
    {
      unint64_t v8 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(void *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 171;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v87;
          _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of mics used (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 2) = v87;
  int v86 = 0;
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"nBeams");
  if (!CFNumberGetValue(v9, kCFNumberIntType, &v86))
  {
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
      {
        int v71 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(void *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 188;
            _os_log_impl(&dword_1BB0CE000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve number of beams.\n", buf, 0x12u);
          }
        }
      }
    }
    uint64_t v72 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v72, "Failed to retrieve number of beams from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
  }
  if (AUBeamItTDLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
    {
      uint64_t v10 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(void *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 186;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v86;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of beams (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 3) = v86;
  int v85 = 0;
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BFFilterLength");
  if (!CFNumberGetValue(v11, kCFNumberIntType, &v85))
  {
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
      {
        float v73 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(void *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 203;
            _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beamforming filter length.\n", buf, 0x12u);
          }
        }
      }
    }
    vDSP_Length v74 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v74, "Failed to retrieve beamforming filter length from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
  }
  if (AUBeamItTDLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
    {
      uint64_t v12 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(void *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 201;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v85;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beamforming filter length (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 4903) = v85;
  int v84 = 0;
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"EQFilterLength");
  if (!CFNumberGetValue(v13, kCFNumberIntType, &v84))
  {
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
      {
        uint64_t v75 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(void *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 218;
            _os_log_impl(&dword_1BB0CE000, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve EQ filter length.\n", buf, 0x12u);
          }
        }
      }
    }
    vDSP_Length v76 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v76, "Failed to retrieve EQ filter length from input dictionary.", -1);
  }
  if (AUBeamItTDLogScope(void)::once != -1) {
    dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
  }
  if (AUBeamItTDLogScope(void)::scope)
  {
    if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
    {
      vDSP_Length v14 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (*(void *)AUBeamItTDLogScope(void)::scope)
      {
        if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 216;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v84;
          _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved EQ filter length (%i).\n", buf, 0x18u);
        }
      }
    }
  }
  *((_DWORD *)this + 4905) = v84;
  if (!*((_DWORD *)this + 3))
  {
LABEL_144:
    uint64_t result = 0;
    *((unsigned char *)this + 17) = 1;
    return result;
  }
  unint64_t v15 = 0;
  __int16 v16 = (char *)this + 390576;
  while (1)
  {
    std::to_string((std::string *)buf, v15);
    int v17 = std::string::insert((std::string *)buf, 0, "Beam", 4uLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t v83 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v82 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v83 >= 0) {
      float32x2_t v19 = v82;
    }
    else {
      float32x2_t v19 = (void **)v82[0];
    }
    CFStringRef v20 = CFStringCreateWithCString(0, (const char *)v19, 0x8000100u);
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v20);
    if (!v21)
    {
      if (AUBeamItTDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
      }
      uint64_t v53 = *((void *)v5 + 400);
      if (v53)
      {
        if (*(unsigned char *)(v53 + 8))
        {
          std::string::size_type v54 = *(NSObject **)v53;
          if (*(void *)v53)
          {
            if (os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_DEBUG))
            {
              vDSP_Length v55 = v82;
              if (v83 < 0) {
                vDSP_Length v55 = (void **)v82[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 236;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v55;
              _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
            }
          }
        }
      }
      CFRelease(v20);
      goto LABEL_128;
    }
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    uint64_t v22 = *((void *)v5 + 400);
    if (v22)
    {
      if (*(unsigned char *)(v22 + 8))
      {
        double v23 = *(NSObject **)v22;
        if (*(void *)v22)
        {
          if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
          {
            int v24 = v82;
            if (v83 < 0) {
              int v24 = (void **)v82[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 242;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v24;
            _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
          }
        }
      }
    }
    CFRelease(v20);
    CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(v21, @"Description");
    if (!v25)
    {
      if (AUBeamItTDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
      }
      if (AUBeamItTDLogScope(void)::scope)
      {
        if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
        {
          uint64_t v63 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(void *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 251;
              _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve the beam description.\n", buf, 0x12u);
            }
          }
        }
      }
      UInt32 v64 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v64, "Failed to retrieve the beam description from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    uint64_t v26 = *((void *)v5 + 400);
    if (v26)
    {
      if (*(unsigned char *)(v26 + 8))
      {
        UInt32 v27 = *(NSObject **)v26;
        if (*(void *)v26)
        {
          if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
          {
            CStringPtr = CFStringGetCStringPtr(v25, 0x8000100u);
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 249;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = CStringPtr;
            __int16 v90 = 1024;
            int v91 = v15;
            _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved the description (%s) for Beam %d.\n", buf, 0x22u);
          }
        }
      }
    }
    float v81 = 0.0;
    CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v21, @"Distance");
    if (!CFNumberGetValue(v29, kCFNumberFloat32Type, &v81))
    {
      if (AUBeamItTDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
      }
      if (AUBeamItTDLogScope(void)::scope)
      {
        if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
        {
          int v61 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(void *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 264;
              _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beam distance.\n", buf, 0x12u);
            }
          }
        }
      }
      int v62 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v62, "Failed to retrieve beam distance from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    uint64_t v30 = *((void *)v5 + 400);
    if (v30)
    {
      if (*(unsigned char *)(v30 + 8))
      {
        uint64_t v31 = *(NSObject **)v30;
        if (*(void *)v30)
        {
          if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 262;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(double *)&buf[20] = v81;
            _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beam distance (%0.2f).\n", buf, 0x1Cu);
          }
        }
      }
    }
    *((float *)this + v15 + 426) = v81;
    float v80 = 0.0;
    CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v21, @"Azimuth");
    if (!CFNumberGetValue(v32, kCFNumberFloat32Type, &v80))
    {
      if (AUBeamItTDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
      }
      if (AUBeamItTDLogScope(void)::scope)
      {
        if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
        {
          UInt32 v59 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(void *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 278;
              _os_log_impl(&dword_1BB0CE000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beam azimuth.\n", buf, 0x12u);
            }
          }
        }
      }
      int v60 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v60, "Failed to retrieve beam azimuth from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    uint64_t v33 = *((void *)v5 + 400);
    if (v33)
    {
      if (*(unsigned char *)(v33 + 8))
      {
        float v34 = *(NSObject **)v33;
        if (*(void *)v33)
        {
          if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 276;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(double *)&buf[20] = v80;
            _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beam azimuth (%0.2f).\n", buf, 0x1Cu);
          }
        }
      }
    }
    *((float *)this + v15 + 714) = v80;
    float v79 = 0.0;
    CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v21, @"Elevation");
    if (!CFNumberGetValue(v35, kCFNumberFloat32Type, &v79))
    {
      if (AUBeamItTDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
      }
      if (AUBeamItTDLogScope(void)::scope)
      {
        if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
        {
          int v65 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(void *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 292;
              _os_log_impl(&dword_1BB0CE000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve beam elevation.\n", buf, 0x12u);
            }
          }
        }
      }
      int v66 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v66, "Failed to retrieve beam elevation from input dictionary.", -1);
    }
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    uint64_t v36 = *((void *)v5 + 400);
    if (v36)
    {
      if (*(unsigned char *)(v36 + 8))
      {
        long long v37 = *(NSObject **)v36;
        if (*(void *)v36)
        {
          if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 290;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(double *)&buf[20] = v79;
            _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved beam elevation (%0.2f).\n", buf, 0x1Cu);
          }
        }
      }
    }
    *((float *)this + v15 + 1002) = v79;
    BeamformerBase::ReadVectorFromDictionary((BeamformerBase *)buf, v21, @"NonZeroMics");
    uint64_t v38 = (void **)((char *)this + 24 * v15 + 365232);
    unint64_t v39 = *v38;
    if (*v38)
    {
      *((void *)this + 3 * v15 + 45655) = v39;
      operator delete(v39);
      *uint64_t v38 = 0;
      *((void *)this + 3 * v15 + 45655) = 0;
      *((void *)this + 3 * v15 + 45656) = 0;
    }
    *(_OWORD *)uint64_t v38 = *(_OWORD *)buf;
    *((void *)this + 3 * v15 + 45656) = *(void *)&buf[16];
    BeamformerBase::ReadVectorFromDictionary((BeamformerBase *)buf, v21, @"EQSelectionFilter");
    vDSP_Length v40 = (void **)((char *)this + 24 * v15 + 501168);
    float v41 = *v40;
    if (*v40)
    {
      *((void *)this + 3 * v15 + 62647) = v41;
      operator delete(v41);
      *vDSP_Length v40 = 0;
      *((void *)this + 3 * v15 + 62647) = 0;
      *((void *)this + 3 * v15 + 62648) = 0;
    }
    *(_OWORD *)vDSP_Length v40 = *(_OWORD *)buf;
    *((void *)this + 3 * v15 + 62648) = *(void *)&buf[16];
    CFDictionaryRef v42 = (const __CFDictionary *)CFDictionaryGetValue(v21, @"BFFilter");
    if (!v42)
    {
      if (AUBeamItTDLogScope(void)::once != -1) {
        dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
      }
      if (AUBeamItTDLogScope(void)::scope)
      {
        if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
        {
          std::string::size_type v56 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
          if (*(void *)AUBeamItTDLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "Missing dictionary BFFilter");
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 312;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = p_p;
              _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s\n", buf, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
        }
      }
LABEL_128:
      int v52 = 1;
      goto LABEL_129;
    }
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      if (*(unsigned char *)(AUBeamItTDLogScope(void)::scope + 8))
      {
        unsigned int v43 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
        if (*(void *)AUBeamItTDLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AUBeamItTDLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "Found the dictionary BFFilter.");
            long long v44 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "BeamformerTD.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 317;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v44;
            _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s\n", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    if (*((_DWORD *)this + 2))
    {
      unint64_t v45 = 0;
      uint64_t v46 = v16;
      do
      {
        std::to_string(&__p, v45);
        char v47 = std::string::insert(&__p, 0, "Mic", 3uLL);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        *(void *)&buf[16] = *((void *)&v47->__r_.__value_.__l + 2);
        *(_OWORD *)AudioTimeStamp buf = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (buf[23] >= 0) {
          int v49 = buf;
        }
        else {
          int v49 = *(const char **)buf;
        }
        CFStringRef v50 = CFStringCreateWithCString(0, v49, 0x8000100u);
        BeamformerBase::ReadVectorFromDictionary((BeamformerBase *)&__p, v42, v50);
        int v51 = *(void **)v46;
        if (*(void *)v46)
        {
          *((void *)v46 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v51;
          operator delete(v51);
          *(void *)uint64_t v46 = 0;
          *((void *)v46 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
          *((void *)v46 + 2) = 0;
        }
        *(std::string *)uint64_t v46 = __p;
        CFRelease(v50);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        ++v45;
        v46 += 24;
      }
      while (v45 < *((unsigned int *)this + 2));
    }
    int v52 = 0;
LABEL_129:
    if (SHIBYTE(v83) < 0) {
      operator delete(v82[0]);
    }
    if (v52) {
      return 4294956446;
    }
    ++v15;
    v16 += 384;
    uint64_t v5 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    if (v15 >= *((unsigned int *)this + 3)) {
      goto LABEL_144;
    }
  }
}

void sub_1BB601430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BeamformerTD::Cleanup(BeamformerTD *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 508080);
  uint64_t v4 = *((void *)this + 63510);
  uint64_t v3 = *((void *)this + 63511);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      CFNumberRef v7 = *(VPTimeFreqConverter **)(v4 + 8 * v5);
      if (v7)
      {
        VPTimeFreqConverter::~VPTimeFreqConverter(v7);
        MEMORY[0x1C185D370]();
        *(void *)(*v2 + 8 * v5) = 0;
        uint64_t v4 = *v2;
        uint64_t v3 = v2[1];
      }
      unint64_t v5 = v6++;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  *((unsigned char *)this + 16) = 0;
  return 0;
}

uint64_t BeamformerTD::Reset(BeamformerTD *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 508080);
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  vDSP_vclr(*((float **)this + 2394), 1, 0x120uLL);
  memset_pattern16((char *)this + 552, &unk_1BB875EE0, 0x480uLL);
  if (*((_DWORD *)this + 3))
  {
    unint64_t v3 = 0;
    uint64_t v4 = (unsigned int *)((char *)this + 19624);
    unsigned int v5 = *((_DWORD *)this + 17) - 1;
    unsigned int v6 = (char **)((char *)this + 130224);
    do
    {
      if (*((_DWORD *)this + 2))
      {
        unint64_t v7 = 0;
        unint64_t v8 = v6;
        do
        {
          unint64_t v9 = *v4;
          int v20 = 0;
          std::vector<float>::assign(v8 - 13824, v9, &v20);
          if (v5 <= 1)
          {
            unint64_t v10 = *v4;
            int v19 = 0;
            std::vector<float>::assign(v8, v10, &v19);
          }
          ++v7;
          v8 += 3;
        }
        while (v7 < *((unsigned int *)this + 2));
      }
      unint64_t v11 = *((unsigned int *)this + 4907);
      int v18 = 0;
      std::vector<float>::assign((char **)this + 3 * v3++ + 30102, v11, &v18);
      v6 += 48;
    }
    while (v3 < *((unsigned int *)this + 3));
  }
  uint64_t v13 = *v2;
  uint64_t v12 = v2[1];
  if (v12 != *v2)
  {
    unint64_t v14 = 0;
    unsigned int v15 = 1;
    do
    {
      __int16 v16 = *(VPTimeFreqConverter **)(v13 + 8 * v14);
      if (v16)
      {
        VPTimeFreqConverter::~VPTimeFreqConverter(v16);
        MEMORY[0x1C185D370]();
        VPTimeFreqConverter_Create();
      }
      unint64_t v14 = v15++;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  return 0;
}

uint64_t BeamformerTD::Initialize(BeamformerTD *this, double a2, unsigned int a3)
{
  v84[1] = *(float **)MEMORY[0x1E4F143B8];
  *((double *)this + 3) = a2;
  *((_DWORD *)this + 8) = a3;
  double v4 = (float)a3;
  int32x2_t v5 = (int32x2_t)vcvt_u32_f32(vrnda_f32(vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 88)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2 * 0.5), 0)), v4))));
  *(int32x2_t *)((char *)this + 36) = v5;
  *(float *)&double v4 = *((float *)this + 39) / (a2 * 0.5) * v4;
  *((float *)this + 13) = roundf(*(float *)&v4);
  *((_DWORD *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = vsub_s32(vdup_lane_s32(v5, 1), v5).u32[0] + 1;
  float v6 = a2 / (double)a3;
  *((float *)this + 12) = expf(-1.0 / (float)(*((float *)this + 24) * v6));
  if (!*((unsigned char *)this + 17))
  {
    if (AUBeamItTDLogScope(void)::once != -1) {
      dispatch_once(&AUBeamItTDLogScope(void)::once, &__block_literal_global_19729);
    }
    if (AUBeamItTDLogScope(void)::scope)
    {
      int v20 = *(NSObject **)AUBeamItTDLogScope(void)::scope;
      if (!*(void *)AUBeamItTDLogScope(void)::scope) {
        return 4294956421;
      }
    }
    else
    {
      int v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)valuePtr.__r_.__value_.__r.__words + 4) = (std::string::size_type)"BeamformerTD.cpp";
      WORD2(valuePtr.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&valuePtr.__r_.__value_.__r.__words[1] + 6) = 97;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Initialization failed, top level plist is not set.", (uint8_t *)&valuePtr, 0x12u);
    }
    return 4294956421;
  }
  unint64_t v7 = *((unsigned int *)this + 3);
  valuePtr.__r_.__value_.__r.__words[0] = 0;
  std::vector<void *>::assign((uint64_t)this + 508080, v7, &valuePtr);
  unint64_t v8 = (_DWORD *)((char *)this + 19608);
  if (*((void *)this + 63511) != *((void *)this + 63510)) {
    VPTimeFreqConverter_Create();
  }
  (*(void (**)(BeamformerTD *))(*(void *)this + 144))(this);
  if (*((double *)this + 3) == *((double *)this + 2450))
  {
    *((_DWORD *)this + 4902) = *((_DWORD *)this + 4903);
    unint64_t v9 = *((unsigned int *)this + 3);
    if (v9)
    {
      unint64_t v10 = 0;
      unint64_t v11 = (uint64_t *)((char *)this + 501176);
      uint64_t v12 = (uint64_t *)((char *)this + 390584);
      LODWORD(v13) = *((_DWORD *)this + 2);
      unint64_t v14 = (char *)this + 247728;
      do
      {
        if (v13)
        {
          unint64_t v15 = 0;
          __int16 v16 = v14;
          int v17 = v12;
          do
          {
            std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v16, (char *)*(v17 - 1), *v17, (*v17 - *(v17 - 1)) >> 2);
            ++v15;
            unint64_t v13 = *((unsigned int *)this + 2);
            v17 += 3;
            v16 += 24;
          }
          while (v15 < v13);
          unint64_t v9 = *((unsigned int *)this + 3);
        }
        ++v10;
        v12 += 48;
        v14 += 384;
      }
      while (v10 < v9);
      *((_DWORD *)this + 4904) = *((_DWORD *)this + 4905);
      if (v9)
      {
        unint64_t v18 = 0;
        int v19 = (char *)this + 358320;
        do
        {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v19, (char *)*(v11 - 1), *v11, (*v11 - *(v11 - 1)) >> 2);
          ++v18;
          unint64_t v9 = *((unsigned int *)this + 3);
          v11 += 3;
          v19 += 24;
        }
        while (v18 < v9);
      }
    }
    else
    {
      *((_DWORD *)this + 4904) = *((_DWORD *)this + 4905);
    }
  }
  else
  {
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)&v80, 0);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v81, (const void *)*MEMORY[0x1E4F4EBD0], *((double *)this + 2450));
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v81, (const void *)*MEMORY[0x1E4F4EBE0], *((double *)this + 3));
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v81, (const void *)*MEMORY[0x1E4F4EBC0], 1852797549);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v81, (const void *)*MEMORY[0x1E4F4EBF0], 96);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v81, (const void *)*MEMORY[0x1E4F4EBE8], 1);
    CFDictionaryRef v21 = v81;
    valuePtr.__r_.__value_.__s.__data_[0] = 0;
    CFNumberRef v22 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
    if (!v22)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E4F4EBC8], v22);
    CFRelease(v22);
    CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)&valuePtr);
    caulk::expected<long long,int>::value((uint64_t)&valuePtr);
    double v23 = (CA::AudioSampleRateConverter *)valuePtr.__r_.__value_.__r.__words[0];
    valuePtr.__r_.__value_.__r.__words[0] = 0;
    caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)&valuePtr);
    double v24 = *((double *)this + 2450);
    double v25 = *((double *)this + 3);
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (!AudioSampleRateConverterGetKernelSize()) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    unint64_t v26 = (*((_DWORD *)this + 4903) + LODWORD(valuePtr.__r_.__value_.__l.__data_) - 1);
    int __C = LODWORD(valuePtr.__r_.__value_.__l.__data_) - 1;
    *unint64_t v8 = AudioSampleRateConverterGetExpectedNumberOfOutputFrames();
    UInt32 v27 = (void **)((char *)this + 508104);
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    std::vector<float>::assign((char **)this + 63513, v26, &valuePtr);
    unint64_t v28 = *((unsigned int *)this + 3);
    double v29 = v24 / v25;
    if (v28)
    {
      unint64_t v30 = 0;
      LODWORD(v3freeMatrix(*((_DWORD *)this + 17), this + 1) = *((_DWORD *)this + 2);
      do
      {
        if (v31)
        {
          unint64_t v32 = 0;
          do
          {
            uint64_t v33 = (char *)this + 384 * v30 + 24 * v32;
            memcpy(*v27, *((const void **)v33 + 48822), 4 * *((unsigned int *)this + 4903));
            float v34 = (char **)(v33 + 247728);
            unint64_t v35 = *v8;
            LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
            std::vector<float>::assign(v34, v35, &valuePtr);
            uint64_t v36 = (float *)*v27;
            int64_t v83 = *v34;
            v84[0] = v36;
            uint64_t v37 = CA::AudioSampleRateConverter::Process(v23, (const float *const *)v84, v26, &v83, (float *const *)*v8);
            if (v37)
            {
              float v73 = (caulk *)v37;
              vDSP_Length v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              caulk::string_from_4cc(v73, 1, &v79);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("failed to run SRC with status ", &v79, &valuePtr);
              std::runtime_error::runtime_error(v74, &valuePtr);
            }
            AudioSampleRateConverterReset();
            uint64_t v38 = *v8;
            if (v38)
            {
              unint64_t v39 = *v34;
              do
              {
                float v40 = v29 * *(float *)v39;
                *(float *)unint64_t v39 = v40;
                v39 += 4;
                --v38;
              }
              while (v38);
            }
            ++v32;
            unint64_t v31 = *((unsigned int *)this + 2);
          }
          while (v32 < v31);
          unint64_t v28 = *((unsigned int *)this + 3);
        }
        ++v30;
      }
      while (v30 < v28);
    }
    unint64_t v41 = (*((_DWORD *)this + 4905) + __C);
    *((_DWORD *)this + 4904) = AudioSampleRateConverterGetExpectedNumberOfOutputFrames();
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    std::vector<float>::assign((char **)v27, v41, &valuePtr);
    if (*((_DWORD *)this + 3))
    {
      unint64_t v42 = 0;
      do
      {
        unsigned int v43 = (char *)this + 24 * v42;
        memcpy(*v27, *((const void **)v43 + 62646), 4 * *((unsigned int *)this + 4905));
        long long v44 = (char **)(v43 + 358320);
        unint64_t v45 = *((unsigned int *)this + 4904);
        LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
        std::vector<float>::assign(v44, v45, &valuePtr);
        uint64_t v46 = (float *)*v27;
        int64_t v83 = *v44;
        v84[0] = v46;
        uint64_t v47 = CA::AudioSampleRateConverter::Process(v23, (const float *const *)v84, v41, &v83, (float *const *)*((unsigned int *)this + 4904));
        if (v47)
        {
          uint64_t v75 = (caulk *)v47;
          vDSP_Length v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          caulk::string_from_4cc(v75, 1, &v79);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("failed to run SRC with status ", &v79, &valuePtr);
          std::runtime_error::runtime_error(v76, &valuePtr);
        }
        AudioSampleRateConverterReset();
        uint64_t v48 = *((unsigned int *)this + 4904);
        if (v48)
        {
          int v49 = *v44;
          do
          {
            float v50 = v29 * *(float *)v49;
            *(float *)int v49 = v50;
            v49 += 4;
            --v48;
          }
          while (v48);
        }
        ++v42;
      }
      while (v42 < *((unsigned int *)this + 3));
    }
    AudioSampleRateConverterDispose();
    CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)&v80);
    LODWORD(v9) = *((_DWORD *)this + 3);
  }
  int v51 = *((_DWORD *)this + 17);
  int v52 = *((_DWORD *)this + 8) - 1;
  int v53 = v52 + *v8;
  int v54 = v52 + *((_DWORD *)this + 4904);
  *((_DWORD *)this + 4906) = v53;
  *((_DWORD *)this + 4907) = v54;
  if (v9)
  {
    unint64_t v55 = 0;
    std::string::size_type v56 = (const float **)((char *)this + 247728);
    unsigned int v57 = v51 - 1;
    std::string::size_type v58 = (char **)((char *)this + 130224);
    do
    {
      if (*((_DWORD *)this + 2))
      {
        unint64_t v59 = 0;
        int v60 = v58;
        do
        {
          unint64_t v61 = *((unsigned int *)this + 4906);
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          std::vector<float>::assign(v60 - 13824, v61, &valuePtr);
          if (v57 < 2)
          {
            unint64_t v62 = *((unsigned int *)this + 4906);
            LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
            std::vector<float>::assign(v60, v62, &valuePtr);
          }
          ++v59;
          v60 += 3;
        }
        while (v59 < *((unsigned int *)this + 2));
      }
      unint64_t v63 = *((unsigned int *)this + 4907);
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
      std::vector<float>::assign((char **)this + 3 * v55++ + 30102, v63, &valuePtr);
      unint64_t v64 = *((unsigned int *)this + 3);
      v58 += 48;
    }
    while (v55 < v64);
    int v65 = (float *)((char *)this + 372144);
    if (*((_DWORD *)this + 3))
    {
      unint64_t v66 = 0;
      unint64_t v67 = *((unsigned int *)this + 2);
      unint64_t v68 = v67;
      do
      {
        if (v68)
        {
          unint64_t v69 = 0;
          vDSP_Length v70 = v65;
          int v71 = v56;
          do
          {
            *int v65 = 0.0;
            if (*(float *)(*((void *)this + 3 * v66 + 45654) + 4 * v69) == 1.0)
            {
              vDSP_svesq(*v71, 1, v65, *v8);
              unint64_t v67 = *((unsigned int *)this + 2);
            }
            ++v69;
            v71 += 3;
            ++v65;
          }
          while (v69 < v67);
          unint64_t v64 = *((unsigned int *)this + 3);
          unint64_t v68 = v67;
          int v65 = v70;
        }
        ++v66;
        v56 += 48;
        v65 += 16;
      }
      while (v66 < v64);
    }
  }
  uint64_t result = 0;
  *((unsigned char *)this + 16) = 1;
  return result;
}

void sub_1BB602024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BeamformerTD::~BeamformerTD(BeamformerTD *this)
{
  BeamformerTD::~BeamformerTD(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t vars8;

  uint64_t v2 = (void *)((char *)this + 508064);
  *(void *)this = &unk_1F14BA3D8;
  BeamformerTD::Cleanup(this);
  unint64_t v3 = (void *)v2[8];
  if (v3)
  {
    v2[9] = v3;
    operator delete(v3);
  }
  double v4 = (void *)v2[5];
  if (v4)
  {
    v2[6] = v4;
    operator delete(v4);
  }
  int32x2_t v5 = (void *)((char *)this + 501152);
  float v6 = (void *)((char *)this + 372128);
  unint64_t v7 = (void *)((char *)this + 365216);
  unint64_t v8 = (void *)((char *)this + 358304);
  unint64_t v9 = (void *)((char *)this + 247712);
  unint64_t v10 = (void *)v2[2];
  unint64_t v11 = (void *)((char *)this + 240800);
  if (v10)
  {
    v2[3] = v10;
    operator delete(v10);
  }
  uint64_t v12 = -6912;
  do
  {
    unint64_t v13 = (void *)*(v2 - 1);
    if (v13)
    {
      *uint64_t v2 = v13;
      operator delete(v13);
    }
    v2 -= 3;
    v12 += 24;
  }
  while (v12);
  unint64_t v14 = -110592;
  do
  {
    unint64_t v15 = (void *)*(v5 - 1);
    if (v15)
    {
      char *v5 = v15;
      operator delete(v15);
    }
    v5 -= 3;
    v14 += 24;
  }
  while (v14);
  __int16 v16 = -6912;
  do
  {
    int v17 = (void *)*(v6 - 1);
    if (v17)
    {
      NSObject *v6 = v17;
      operator delete(v17);
    }
    v6 -= 3;
    v16 += 24;
  }
  while (v16);
  unint64_t v18 = -6912;
  do
  {
    int v19 = (void *)*(v7 - 1);
    if (v19)
    {
      VPTimeFreqConverter *v7 = v19;
      operator delete(v19);
    }
    v7 -= 3;
    v18 += 24;
  }
  while (v18);
  int v20 = -110592;
  do
  {
    CFDictionaryRef v21 = (void *)*(v8 - 1);
    if (v21)
    {
      *unint64_t v8 = v21;
      operator delete(v21);
    }
    v8 -= 3;
    v20 += 24;
  }
  while (v20);
  CFNumberRef v22 = -6912;
  do
  {
    double v23 = (void *)*(v9 - 1);
    if (v23)
    {
      char *v9 = v23;
      operator delete(v23);
    }
    v9 -= 3;
    v22 += 24;
  }
  while (v22);
  double v24 = -110592;
  do
  {
    double v25 = (void *)*(v11 - 1);
    if (v25)
    {
      *unint64_t v11 = v25;
      operator delete(v25);
    }
    v11 -= 3;
    v24 += 24;
  }
  while (v24);
  unint64_t v26 = 110592;
  do
  {
    UInt32 v27 = *(void **)((char *)this + v26 + 19608);
    if (v27)
    {
      *(void *)((char *)this + v26 + 19616) = v27;
      operator delete(v27);
    }
    v26 -= 24;
  }
  while (v26);

  BeamformerBase::~BeamformerBase(this);
}

void BeamformerBase::~BeamformerBase(BeamformerBase *this)
{
  *(void *)this = &unk_1F14C7998;
  LimitWindBoost::~LimitWindBoost((BeamformerBase *)((char *)this + 19200));
  uint64_t v2 = (void *)*((void *)this + 2397);
  if (v2)
  {
    *((void *)this + 2398) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 2394);
  if (v3)
  {
    *((void *)this + 2395) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 2391);
  if (v4)
  {
    *((void *)this + 2392) = v4;
    operator delete(v4);
  }
  int32x2_t v5 = (void *)*((void *)this + 2388);
  if (v5)
  {
    *((void *)this + 2389) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 2385);
  if (v6)
  {
    *((void *)this + 2386) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 2382);
  if (v7)
  {
    *((void *)this + 2383) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 2379);
  if (v8)
  {
    *((void *)this + 238std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 2376);
  if (v9)
  {
    *((void *)this + 2377) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 2373);
  if (v10)
  {
    *((void *)this + 2374) = v10;
    operator delete(v10);
  }
  for (uint64_t i = 0; i != -6912; i -= 24)
  {
    uint64_t v12 = *(void **)((char *)this + i + 18960);
    if (v12)
    {
      *(void *)((char *)this + i + 18968) = v12;
      operator delete(v12);
    }
  }
  uint64_t v13 = 6912;
  do
  {
    unint64_t v14 = *(void **)((char *)this + v13 + 5136);
    if (v14)
    {
      *(void *)((char *)this + v13 + 5144) = v14;
      operator delete(v14);
    }
    v13 -= 24;
  }
  while (v13);
}

void BeamformerBase::BeamformerBase(BeamformerBase *this)
{
  *(void *)this = &unk_1F14C7998;
  *((void *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0x12000000010;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 3) = 0x40CF400000000000;
  *((_OWORD *)this + 2) = xmmword_1BB87B8E0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  bzero((char *)this + 5160, 0x36D8uLL);
  LimitWindBoost::LimitWindBoost((BeamformerBase *)((char *)this + 19200));
}

void sub_1BB6024EC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (void *)v1[2397];
  if (v3)
  {
    v1[2398] = v3;
    operator delete(v3);
  }
  double v4 = (void *)v1[2394];
  if (v4)
  {
    v1[2395] = v4;
    operator delete(v4);
  }
  int32x2_t v5 = (void *)v1[2391];
  if (v5)
  {
    v1[2392] = v5;
    operator delete(v5);
  }
  float v6 = (void *)v1[2388];
  if (v6)
  {
    v1[2389] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)v1[2385];
  if (v7)
  {
    v1[2386] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)v1[2382];
  if (v8)
  {
    v1[2383] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)v1[2379];
  if (v9)
  {
    v1[2380] = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)v1[2376];
  if (v10)
  {
    v1[2377] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)v1[2373];
  if (v11)
  {
    v1[2374] = v11;
    operator delete(v11);
  }
  uint64_t v12 = v1 + 2371;
  uint64_t v13 = -6912;
  while (1)
  {
    unint64_t v14 = (void *)*(v12 - 1);
    if (v14)
    {
      *uint64_t v12 = v14;
      operator delete(v14);
    }
    v12 -= 3;
    v13 += 24;
    if (!v13)
    {
      uint64_t v15 = 864;
      while (1)
      {
        __int16 v16 = (void *)v1[v15 + 642];
        if (v16)
        {
          v1[v15 + 643] = v16;
          operator delete(v16);
        }
        v15 -= 3;
        if (!(v15 * 8)) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *std::vector<AUSMChannelParameters>::__init_with_size[abi:ne180100]<AUSMChannelParameters*,AUSMChannelParameters*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = std::vector<AUSMChannelParameters>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB602630(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::OBHDConfig::setDirectSoundAttributes(uint64_t this, const IR::IRDataAttributes *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(this + 400));
  if (v2)
  {
    uint64_t v4 = this;
    float v6 = (void *)(this + 88);
    uint64_t v5 = *(void *)(this + 88);
    if (!v5 || (this = IR::IRDataAttributes::operator==((uint64_t)a2, v5 + 8), (this & 1) == 0))
    {
      uint64_t v22 = v4 + 408;
      char v23 = 1;
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v4 + 408);
      IR::IRDataAttributes::IRDataAttributes((uint64_t)v17, (uint64_t)a2);
      char v21 = 1;
      AUSM::OBHDConfig::createCache(buf, v4, (uint64_t)v17, *(_DWORD *)(v4 + 272));
      long long v7 = *(_OWORD *)buf;
      *(void *)AudioTimeStamp buf = 0;
      *(void *)&buf[8] = 0;
      size_t v8 = *(std::__shared_weak_count **)(v4 + 96);
      *(_OWORD *)(v4 + 88) = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v21)
      {
        if (cf) {
          CFRelease(cf);
        }
        if (v19) {
          CFRelease(v19);
        }
        if (v18) {
          CFRelease(v18);
        }
        if (v17[0]) {
          CFRelease(v17[0]);
        }
      }
      if (*v6)
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v9 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_29;
        }
        unint64_t v10 = (void *)(v4 + 376);
        if (*(char *)(v4 + 399) < 0) {
          unint64_t v10 = (void *)*v10;
        }
        int v11 = *(_DWORD *)(v4 + 272);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "setDirectSoundAttributes";
        *(_WORD *)&unsigned char buf[22] = 1024;
        int v26 = v11;
        uint64_t v12 = "[%s|%s] Created cache with %u entries";
        uint64_t v13 = v9;
        uint32_t v14 = 28;
      }
      else
      {
        if (getAUSMV2Log(void)::onceToken != -1) {
          dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
        }
        uint64_t v15 = getAUSMV2Log(void)::gLog;
        if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_29;
        }
        __int16 v16 = (void *)(v4 + 376);
        if (*(char *)(v4 + 399) < 0) {
          __int16 v16 = (void *)*v16;
        }
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "setDirectSoundAttributes";
        uint64_t v12 = "[%s|%s] No direct sound";
        uint64_t v13 = v15;
        uint32_t v14 = 22;
      }
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
LABEL_29:
      AUSM::OBHDConfig::createSourceVector((char *)buf, v4, v6, *(_DWORD *)(v4 + 256), 0);
      std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::__vdeallocate((uint64_t *)(v4 + 152));
      *(_OWORD *)(v4 + 152) = *(_OWORD *)buf;
      *(void *)(v4 + 168) = *(void *)&buf[16];
      double v24 = buf;
      memset(buf, 0, sizeof(buf));
      std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      AUSM::OBHDConfig::updateInternal((AUSM::OBHDConfig *)v4, 1);
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v22);
    }
  }
  return this;
}

void sub_1BB6028FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB602930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a29) {
    IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a10);
  }
  JUMPOUT(0x1BB602920);
}

void AUSM::OBHDConfig::setEarlyReverbAttributes(AUSM::OBHDConfig *this, const IR::IRDataAttributes *a2, const IR::IRDataAttributes *a3, const IR::IRDataAttributes *a4)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 400);
  if ((v4 & 1) == 0) {
    return;
  }
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 85));
  if ((v8 & 1) != 0 && *(void *)a2)
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&cf, (uint64_t)a2);
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    LOBYTE(cf) = 0;
  }
  unsigned __int8 v148 = v9;
  unsigned int v10 = atomic_load((unsigned int *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 88));
  if (v10 == 1
    && (unsigned __int8 v11 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 86)),
        (v11 & 1) != 0))
  {
    if (*(void *)a3)
    {
      IR::IRDataAttributes::IRDataAttributes((uint64_t)&v123, (uint64_t)a3);
      char v13 = 1;
      int v12 = 1;
      goto LABEL_10;
    }
    int v12 = 1;
  }
  else
  {
    int v12 = 0;
  }
  char v13 = 0;
  LOBYTE(v123) = 0;
LABEL_10:
  unsigned __int8 v135 = v13;
  if ((v8 & 1) != 0 && v12)
  {
    IR::IRDataAttributes::IRDataAttributes((uint64_t)&v110, (uint64_t)a4);
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
    LOBYTE(v11std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  unsigned __int8 v122 = v14;
  if (*((unsigned char *)this + 248)) {
    int v15 = *((_DWORD *)this + 64);
  }
  else {
    int v15 = 0;
  }
  uint64_t v16 = *((void *)this + 13);
  if (v148)
  {
    if (v16 && (IR::IRDataAttributes::operator==((uint64_t)&cf, v16 + 8) & 1) != 0) {
      goto LABEL_50;
    }
  }
  else if (!v16)
  {
    goto LABEL_50;
  }
  int v108 = (char *)this + 408;
  char v109 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 408);
  LOBYTE(v95) = 0;
  char v107 = 0;
  int v17 = v148;
  if (v148)
  {
    CFTypeRef v18 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v95 = v18;
    long long v96 = v137;
    long long v97 = v138;
    long long v98 = v139;
    char v99 = v140;
    CFTypeRef v19 = v141;
    if (v141) {
      CFRetain(v141);
    }
    CFTypeRef v100 = v19;
    long long v101 = v142;
    CFTypeRef v20 = v143;
    if (v143) {
      CFRetain(v143);
    }
    CFTypeRef v102 = v20;
    v103[0] = v144[0];
    *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)((char *)v144 + 9);
    CFTypeRef v21 = v145;
    if (v145) {
      CFRetain(v145);
    }
    CFTypeRef v104 = v21;
    uint64_t v105 = v146;
    int v106 = v147;
    char v107 = 1;
  }
  AUSM::OBHDConfig::createCache(buf, (uint64_t)this, (uint64_t)&v95, *((_DWORD *)this + 69));
  long long v22 = *(_OWORD *)buf;
  *(void *)AudioTimeStamp buf = 0;
  *(void *)&buf[8] = 0;
  char v23 = (std::__shared_weak_count *)*((void *)this + 14);
  *(_OWORD *)((char *)this + 104) = v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v17)
  {
    if (v104) {
      CFRelease(v104);
    }
    if (v102) {
      CFRelease(v102);
    }
    if (v100) {
      CFRelease(v100);
    }
    if (v95) {
      CFRelease(v95);
    }
  }
  AUSM::OBHDConfig::createSourceVector((char *)buf, (uint64_t)this, (void *)this + 13, *((_DWORD *)this + 65), v15);
  std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::__vdeallocate((uint64_t *)this + 22);
  *((_OWORD *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = *(_OWORD *)buf;
  *((void *)this + 24) = *(void *)&buf[16];
  long long v149 = buf;
  memset(buf, 0, sizeof(buf));
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
  unsigned __int8 v24 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 84));
  if ((v24 & 1) == 0)
  {
    uint64_t v25 = *((void *)this + 22);
    unint64_t v26 = *((void *)this + 23) - v25;
    if ((v26 >> 4) >= 5)
    {
      unsigned int v27 = 0;
      uint64_t v28 = (v26 >> 4) - 4;
      double v29 = (uint64_t *)(v25 + 64);
      do
      {
        uint64_t v30 = *v29;
        if (*v29)
        {
          *(_DWORD *)(v30 + 224) = 3;
          *(_DWORD *)(v30 + 228) = v27;
          unsigned int v27 = (v27 + 1) % 3;
        }
        v29 += 2;
        --v28;
      }
      while (v28);
    }
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v108);
LABEL_50:
  uint64_t v31 = *((void *)this + 15);
  if (v135)
  {
    if (v31 && (IR::IRDataAttributes::operator==((uint64_t)&v123, v31 + 8) & 1) != 0) {
      goto LABEL_83;
    }
  }
  else if (!v31)
  {
    goto LABEL_83;
  }
  int v108 = (char *)this + 408;
  char v109 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 408);
  LOBYTE(v82) = 0;
  char v94 = 0;
  int v32 = v135;
  if (v135)
  {
    CFTypeRef v33 = v123;
    if (v123) {
      CFRetain(v123);
    }
    CFTypeRef v82 = v33;
    long long v83 = v124;
    long long v84 = v125;
    long long v85 = v126;
    char v86 = v127;
    CFTypeRef v34 = v128;
    if (v128) {
      CFRetain(v128);
    }
    CFTypeRef v87 = v34;
    long long v88 = v129;
    CFTypeRef v35 = v130;
    if (v130) {
      CFRetain(v130);
    }
    CFTypeRef v89 = v35;
    v90[0] = v131[0];
    *(_OWORD *)((char *)v90 + 9) = *(_OWORD *)((char *)v131 + 9);
    CFTypeRef v36 = v132;
    if (v132) {
      CFRetain(v132);
    }
    CFTypeRef v91 = v36;
    uint64_t v92 = v133;
    int v93 = v134;
    char v94 = 1;
  }
  AUSM::OBHDConfig::createCache(buf, (uint64_t)this, (uint64_t)&v82, *((_DWORD *)this + 69));
  long long v37 = *(_OWORD *)buf;
  *(void *)AudioTimeStamp buf = 0;
  *(void *)&buf[8] = 0;
  uint64_t v38 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v37;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v32)
  {
    if (v91) {
      CFRelease(v91);
    }
    if (v89) {
      CFRelease(v89);
    }
    if (v87) {
      CFRelease(v87);
    }
    if (v82) {
      CFRelease(v82);
    }
  }
  AUSM::OBHDConfig::createSourceVector((char *)buf, (uint64_t)this, (void *)this + 15, *((_DWORD *)this + 65), v15);
  std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::__vdeallocate((uint64_t *)this + 25);
  *(_OWORD *)((char *)this + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)buf;
  *((void *)this + 27) = *(void *)&buf[16];
  long long v149 = buf;
  memset(buf, 0, sizeof(buf));
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
  unsigned __int8 v39 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 84));
  if ((v39 & 1) == 0)
  {
    uint64_t v40 = *((void *)this + 25);
    unint64_t v41 = *((void *)this + 26) - v40;
    if ((v41 >> 4) >= 5)
    {
      unsigned int v42 = 0;
      uint64_t v43 = (v41 >> 4) - 4;
      long long v44 = (uint64_t *)(v40 + 64);
      do
      {
        uint64_t v45 = *v44;
        if (*v44)
        {
          *(_DWORD *)(v45 + 224) = 3;
          *(_DWORD *)(v45 + 228) = v42;
          unsigned int v42 = (v42 + 1) % 3;
        }
        v44 += 2;
        --v43;
      }
      while (v43);
    }
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v108);
LABEL_83:
  uint64_t v46 = *((void *)this + 17);
  if (v122)
  {
    if (v46 && (IR::IRDataAttributes::operator==((uint64_t)&v110, v46 + 8) & 1) != 0) {
      goto LABEL_116;
    }
LABEL_88:
    int v108 = (char *)this + 408;
    char v109 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 408);
    LOBYTE(v69) = 0;
    char v81 = 0;
    int v47 = v122;
    if (v122)
    {
      CFTypeRef v48 = v110;
      if (v110) {
        CFRetain(v110);
      }
      CFTypeRef v69 = v48;
      long long v70 = v111;
      long long v71 = v112;
      long long v72 = v113;
      char v73 = v114;
      CFTypeRef v49 = v115;
      if (v115) {
        CFRetain(v115);
      }
      CFTypeRef v74 = v49;
      long long v75 = v116;
      CFTypeRef v50 = v117;
      if (v117) {
        CFRetain(v117);
      }
      CFTypeRef v76 = v50;
      v77[0] = v118[0];
      *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)((char *)v118 + 9);
      CFTypeRef v51 = v119;
      if (v119) {
        CFRetain(v119);
      }
      CFTypeRef v78 = v51;
      uint64_t v79 = v120;
      int v80 = v121;
      char v81 = 1;
    }
    AUSM::OBHDConfig::createCache(buf, (uint64_t)this, (uint64_t)&v69, *((_DWORD *)this + 69));
    long long v52 = *(_OWORD *)buf;
    *(void *)AudioTimeStamp buf = 0;
    *(void *)&buf[8] = 0;
    int v53 = (std::__shared_weak_count *)*((void *)this + 18);
    *(_OWORD *)((char *)this + 136) = v52;
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (v47)
    {
      if (v78) {
        CFRelease(v78);
      }
      if (v76) {
        CFRelease(v76);
      }
      if (v74) {
        CFRelease(v74);
      }
      if (v69) {
        CFRelease(v69);
      }
    }
    AUSM::OBHDConfig::createSourceVector((char *)buf, (uint64_t)this, (void *)this + 17, *((_DWORD *)this + 65), v15);
    std::vector<std::shared_ptr<vp::vx::io::Node_Command>>::__vdeallocate((uint64_t *)this + 28);
    *((_OWORD *)this + 14) = *(_OWORD *)buf;
    *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)&buf[16];
    long long v149 = buf;
    memset(buf, 0, sizeof(buf));
    std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
    unsigned __int8 v54 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 84));
    if ((v54 & 1) == 0)
    {
      uint64_t v55 = *((void *)this + 28);
      unint64_t v56 = *((void *)this + 29) - v55;
      if ((v56 >> 4) >= 5)
      {
        unsigned int v57 = 0;
        uint64_t v58 = (v56 >> 4) - 4;
        unint64_t v59 = (uint64_t *)(v55 + 64);
        do
        {
          uint64_t v60 = *v59;
          if (*v59)
          {
            *(_DWORD *)(v60 + 224) = 6;
            *(_DWORD *)(v60 + 228) = v57;
            unsigned int v57 = (v57 + 1) % 6;
          }
          v59 += 2;
          --v58;
        }
        while (v58);
      }
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v108);
    goto LABEL_116;
  }
  if (v46) {
    goto LABEL_88;
  }
LABEL_116:
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  unint64_t v61 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v62 = (void *)((char *)this + 376);
    if (*((char *)this + 399) < 0) {
      unint64_t v62 = (void *)*v62;
    }
    int v63 = *((_DWORD *)this + 69);
    unint64_t v64 = " Scene";
    if (!*((void *)this + 13)) {
      unint64_t v64 = " -";
    }
    int v65 = " PostProc";
    uint64_t v66 = *((void *)this + 17);
    BOOL v67 = *((void *)this + 15) == 0;
    *(_DWORD *)AudioTimeStamp buf = 136316418;
    unint64_t v68 = " Combined";
    if (v67) {
      int v65 = " -";
    }
    *(void *)&uint8_t buf[4] = v62;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "setEarlyReverbAttributes";
    if (!v66) {
      unint64_t v68 = " -";
    }
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v151 = v63;
    __int16 v152 = 2080;
    std::string::size_type v153 = v64;
    __int16 v154 = 2080;
    long long v155 = v65;
    __int16 v156 = 2080;
    UInt64 v157 = v68;
    _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_DEFAULT, "[%s|%s] Created caches with %u entries:%s%s%s", buf, 0x3Au);
  }
  AUSM::OBHDConfig::updateInternal(this, 1);
  if (v122)
  {
    if (v119) {
      CFRelease(v119);
    }
    if (v117) {
      CFRelease(v117);
    }
    if (v115) {
      CFRelease(v115);
    }
    if (v110) {
      CFRelease(v110);
    }
  }
  if (v135)
  {
    if (v132) {
      CFRelease(v132);
    }
    if (v130) {
      CFRelease(v130);
    }
    if (v128) {
      CFRelease(v128);
    }
    if (v123) {
      CFRelease(v123);
    }
  }
  if (v148)
  {
    if (v145) {
      CFRelease(v145);
    }
    if (v143) {
      CFRelease(v143);
    }
    if (v141) {
      CFRelease(v141);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1BB6032B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataAttributes::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)a2;
  if (!(*(void *)a1 | v4)) {
    return 1;
  }
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
  {
    return 0;
  }
  uint64_t result = 0;
  if (v3)
  {
    if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
    {
      if (v4)
      {
        uint64_t result = applesauce::CF::operator==(v3, v4);
        if (result)
        {
          unint64_t v7 = *(void *)(a1 + 64);
          unint64_t v8 = *(void *)(a2 + 64);
          if (v7)
          {
            if (!v8) {
              return 0;
            }
            uint64_t result = applesauce::CF::operator==(v7, v8);
            if (!result) {
              return result;
            }
          }
          else if (v8)
          {
            return 0;
          }
          if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
            && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
            && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
            && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84))
          {
            unint64_t v9 = *(void *)(a1 + 88);
            unint64_t v10 = *(void *)(a2 + 88);
            if (v9)
            {
              if (v10)
              {
                uint64_t result = applesauce::CF::operator==(v9, v10);
                if (!result) {
                  return result;
                }
                goto LABEL_28;
              }
            }
            else if (!v10)
            {
LABEL_28:
              if (*(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
                && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104)
                && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
                && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
                && *(float *)(a1 + 116) == *(float *)(a2 + 116)
                && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
                && *(float *)(a1 + 136) == *(float *)(a2 + 136)
                && *(float *)(a1 + 140) == *(float *)(a2 + 140)
                && *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144)
                && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
              {
                return *(unsigned __int8 *)(a1 + 120) == *(unsigned __int8 *)(a2 + 120);
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

void AUSM::OBHDConfig::createCache(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  if (!*(unsigned char *)(a3 + 152) || !*(void *)a3) {
    return;
  }
  IR::IRDataAttributes::IRDataAttributes((uint64_t)v82, a3);
  char v83 = 1;
  unint64_t v7 = (char *)operator new(0x120uLL);
  *((void *)v7 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)unint64_t v7 = &unk_1F14BA4A8;
  *((void *)v7 + 3) = &unk_1F14BA4E0;
  unint64_t v8 = (IR::IRDataLoader *)IR::IRDataAttributes::IRDataAttributes((uint64_t)(v7 + 32), (uint64_t)v82);
  *((void *)v7 + 23) = 0;
  unint64_t v9 = (IR::IRData **)(v7 + 184);
  *((void *)v7 + 24) = 0;
  *((_DWORD *)v7 + 5std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = a4;
  *(_OWORD *)(v7 + 204) = 0u;
  *(_OWORD *)(v7 + 22std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v7 + 236) = 0u;
  *(_OWORD *)(v7 + 252) = 0u;
  *(_OWORD *)(v7 + 268) = 0u;
  *a1 = v7 + 24;
  a1[1] = v7;
  *((_DWORD *)v7 + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 484);
  IR::IRDataLoader::instance(v8);
  std::string::basic_string[abi:ne180100]<0>(&v92, "IRCache|");
  uint64_t v89 = 0;
  CFTypeRef v90 = 0;
  CFTypeRef v87 = 0;
  long long v88 = 0;
  IR::IRDataLoader::load();
  long long v10 = v91;
  long long v91 = 0uLL;
  unsigned __int8 v11 = (std::__shared_weak_count *)*((void *)v7 + 24);
  *(_OWORD *)(v7 + 184) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v91 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
    }
  }
  if (v87)
  {
    long long v88 = v87;
    operator delete(v87);
  }
  if (v90) {
    CFRelease(v90);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(v92);
  }
  if (*v9)
  {
    *((_DWORD *)v7 + 5freeMatrix(*((_DWORD *)this + 17), this + 1) = IR::IRData::getNumFiltersPerSpatialPoint(*v9);
    if (*((void *)v7 + 23))
    {
      uint64_t v12 = *((void *)v7 + 26);
      uint64_t v13 = *((void *)v7 + 27);
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3);
      unint64_t v81 = *((unsigned int *)v7 + 50);
      unint64_t v15 = v81 - v14;
      if (v81 <= v14)
      {
        if (v81 < v14)
        {
          uint64_t v27 = v12 + 24 * v81;
          while (v13 != v27)
          {
            v13 -= 24;
            uint64_t v92 = (void **)v13;
            std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&v92);
          }
          *((void *)v7 + 27) = v27;
        }
      }
      else
      {
        uint64_t v16 = *((void *)v7 + 28);
        if (0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3) >= v15)
        {
          bzero((void *)v13, 24 * ((24 * v15 - 24) / 0x18) + 24);
          *((void *)v7 + 27) = v13 + 24 * ((24 * v15 - 24) / 0x18) + 24;
        }
        else
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3);
          unint64_t v18 = 0x5555555555555556 * ((v16 - v12) >> 3);
          if (v18 <= v81) {
            unint64_t v18 = *((unsigned int *)v7 + 50);
          }
          if (v17 >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_95;
          }
          CFTypeRef v20 = (char *)operator new(24 * v19);
          CFTypeRef v21 = &v20[8 * ((v13 - v12) >> 3)];
          long long v22 = &v20[24 * v19];
          size_t v23 = 24 * ((24 * v15 - 24) / 0x18) + 24;
          bzero(v21, v23);
          unsigned __int8 v24 = &v21[v23];
          if (v13 == v12)
          {
            *((void *)v7 + 26) = v21;
            *((void *)v7 + 27) = v24;
            *((void *)v7 + 28) = v22;
          }
          else
          {
            do
            {
              *((void *)v21 - 3) = 0;
              *((void *)v21 - 2) = 0;
              v21 -= 24;
              *((void *)v21 + 2) = 0;
              long long v25 = *(_OWORD *)(v13 - 24);
              v13 -= 24;
              *(_OWORD *)CFTypeRef v21 = v25;
              *((void *)v21 + 2) = *(void *)(v13 + 16);
              *(void *)uint64_t v13 = 0;
              *(void *)(v13 + 8) = 0;
              *(void *)(v13 + 16) = 0;
            }
            while (v13 != v12);
            uint64_t v26 = *((void *)v7 + 26);
            uint64_t v13 = *((void *)v7 + 27);
            *((void *)v7 + 26) = v21;
            *((void *)v7 + 27) = v24;
            *((void *)v7 + 28) = v22;
            if (v13 != v26)
            {
              do
              {
                v13 -= 24;
                uint64_t v92 = (void **)v13;
                std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&v92);
              }
              while (v13 != v26);
              uint64_t v13 = v26;
            }
          }
          if (v13) {
            operator delete((void *)v13);
          }
        }
      }
      uint64_t v28 = *((void *)v7 + 32);
      double v29 = (IR::IRCoordinates *)*((void *)v7 + 33);
      unint64_t v30 = 0x8E38E38E38E38E39 * (((uint64_t)v29 - v28) >> 2);
      unint64_t v31 = v81 - v30;
      if (v81 <= v30)
      {
        if (v81 < v30) {
          *((void *)v7 + 33) = v28 + 36 * v81;
        }
        goto LABEL_58;
      }
      uint64_t v32 = *((void *)v7 + 34);
      if (0x8E38E38E38E38E39 * ((v32 - (uint64_t)v29) >> 2) >= v31)
      {
        uint64_t v43 = (char *)v29 + 36 * v31;
        uint64_t v44 = 36 * v81 - 4 * (((uint64_t)v29 - v28) >> 2);
        do
        {
          IR::IRCoordinates::IRCoordinates(v29);
          double v29 = (IR::IRCoordinates *)((char *)v29 + 36);
          v44 -= 36;
        }
        while (v44);
        *((void *)v7 + 33) = v43;
LABEL_58:
        std::vector<std::vector<float>>::resize((uint64_t *)v7 + 29, v81);
        IR::IRData::getFilterLength(*v9);
        if (v81 > v14)
        {
          unint64_t v14 = v14;
          while (1)
          {
            uint64_t v45 = *((void *)v7 + 26);
            uint64_t v46 = (void *)(v45 + 24 * v14);
            CFTypeRef v48 = (IR::FFTFilterKernel **)(v46 + 1);
            int v47 = (IR::FFTFilterKernel *)v46[1];
            unint64_t v49 = *((unsigned int *)v7 + 51);
            CFTypeRef v50 = (void **)*v46;
            unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v47 - *v46) >> 3);
            unint64_t v52 = v49 - v51;
            if (v49 <= v51) {
              break;
            }
            uint64_t v53 = v45 + 24 * v14;
            uint64_t v56 = *(void *)(v53 + 16);
            uint64_t v55 = (void ***)(v53 + 16);
            uint64_t v54 = v56;
            if (0xCCCCCCCCCCCCCCCDLL * ((v56 - (uint64_t)v47) >> 3) >= v52)
            {
              long long v71 = (IR::FFTFilterKernel *)((char *)v47 + 40 * v52);
              uint64_t v72 = 40 * v49 - 8 * (((uint64_t)v47 - *v46) >> 3);
              do
              {
                IR::FFTFilterKernel::FFTFilterKernel(v47);
                int v47 = (IR::FFTFilterKernel *)((char *)v47 + 40);
                v72 -= 40;
              }
              while (v72);
LABEL_79:
              *CFTypeRef v48 = v71;
              goto LABEL_81;
            }
            unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((v54 - (uint64_t)v50) >> 3);
            uint64_t v58 = 2 * v57;
            if (2 * v57 <= v49) {
              uint64_t v58 = *((unsigned int *)v7 + 51);
            }
            if (v57 >= 0x333333333333333) {
              unint64_t v59 = 0x666666666666666;
            }
            else {
              unint64_t v59 = v58;
            }
            long long v96 = v55;
            if (v59 > 0x666666666666666) {
              goto LABEL_95;
            }
            uint64_t v60 = (void **)operator new(40 * v59);
            uint64_t v61 = 5 * v51;
            unint64_t v62 = (IR::FFTFilterKernel *)&v60[5 * v51];
            uint64_t v92 = v60;
            int v93 = (void **)v62;
            char v94 = v62;
            CFTypeRef v95 = &v60[5 * v59];
            int v63 = &v60[5 * v49];
            uint64_t v64 = 40 * v49 - 8 * v61;
            do
            {
              IR::FFTFilterKernel::FFTFilterKernel(v62);
              unint64_t v62 = (IR::FFTFilterKernel *)((char *)v62 + 40);
              v64 -= 40;
            }
            while (v64);
            char v94 = (IR::FFTFilterKernel *)v63;
            int v65 = *v48;
            uint64_t v66 = (void **)*v46;
            BOOL v67 = v93;
            for (uint64_t i = 5; ; i -= 5)
            {
              CFTypeRef v69 = &v67[i];
              if ((void **)((char *)v65 + i * 8 - 40) == v66) {
                break;
              }
              uint64_t v70 = (uint64_t)v65 + i * 8 - 80;
              MEMORY[0x1C185BEB0](v69 - 10, v70);
            }
            int v93 = v69 - 5;
            char v73 = (void **)*v46;
            *uint64_t v46 = v69 - 5;
            int v93 = v73;
            CFTypeRef v74 = *v48;
            *CFTypeRef v48 = v94;
            char v94 = v74;
            long long v75 = *v55;
            *uint64_t v55 = v95;
            CFTypeRef v95 = v75;
            uint64_t v92 = v93;
            std::__split_buffer<IR::FFTFilterKernel>::~__split_buffer((uint64_t)&v92);
LABEL_81:
            uint64_t v76 = *((void *)v7 + 26) + 24 * v14;
            CFTypeRef v78 = *(IR::FFTFilterKernel **)v76;
            uint64_t v77 = *(IR::FFTFilterKernel **)(v76 + 8);
            while (v78 != v77)
            {
              IR::FFTFilterKernel::initialize(v78);
              IR::FFTFilterKernel::reset(v78);
              CFTypeRef v78 = (IR::FFTFilterKernel *)((char *)v78 + 40);
            }
            IR::IRCoordinates::reset((IR::IRCoordinates *)(*((void *)v7 + 32) + 36 * v14));
            uint64_t v79 = (char **)(*((void *)v7 + 29) + 24 * v14);
            unint64_t v80 = *((unsigned int *)v7 + 51);
            LODWORD(v92) = 0;
            std::vector<float>::assign(v79, v80, &v92);
            if (++v14 == v81) {
              goto LABEL_85;
            }
          }
          if (v49 >= v51) {
            goto LABEL_81;
          }
          long long v71 = (IR::FFTFilterKernel *)&v50[5 * v49];
          while (v47 != v71)
          {
            int v47 = (IR::FFTFilterKernel *)((char *)v47 - 40);
            MEMORY[0x1C185BED0](v47);
          }
          goto LABEL_79;
        }
LABEL_85:
        *((_DWORD *)v7 + 5std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v81;
        goto LABEL_86;
      }
      unint64_t v33 = 0x8E38E38E38E38E39 * ((v32 - v28) >> 2);
      uint64_t v34 = 2 * v33;
      if (2 * v33 <= v81) {
        uint64_t v34 = v81;
      }
      if (v33 >= 0x38E38E38E38E38ELL) {
        unint64_t v35 = 0x71C71C71C71C71CLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35 <= 0x71C71C71C71C71CLL)
      {
        CFTypeRef v36 = (char *)operator new(36 * v35);
        long long v37 = &v36[36 * v30];
        uint64_t v38 = 36 * v30;
        do
        {
          IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v36[v38]);
          v38 += 36;
        }
        while (36 * v81 != v38);
        uint64_t v40 = (char *)*((void *)v7 + 32);
        unsigned __int8 v39 = (char *)*((void *)v7 + 33);
        if (v39 != v40)
        {
          do
          {
            long long v41 = *(_OWORD *)(v39 - 36);
            long long v42 = *(_OWORD *)(v39 - 20);
            *((_DWORD *)v37 - freeMatrix(*((_DWORD *)this + 17), this + 1) = *((_DWORD *)v39 - 1);
            *(_OWORD *)(v37 - 2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v42;
            *(_OWORD *)(v37 - 36) = v41;
            v37 -= 36;
            v39 -= 36;
          }
          while (v39 != v40);
          unsigned __int8 v39 = (char *)*((void *)v7 + 32);
        }
        *((void *)v7 + 32) = v37;
        *((void *)v7 + 33) = &v36[36 * v81];
        *((void *)v7 + 34) = &v36[36 * v35];
        if (v39) {
          operator delete(v39);
        }
        goto LABEL_58;
      }
LABEL_95:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    *((_DWORD *)v7 + 5std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  else
  {
    *((_DWORD *)v7 + 5std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    *a1 = 0;
    a1[1] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
  }
LABEL_86:
  if (cf) {
    CFRelease(cf);
  }
  if (v85) {
    CFRelease(v85);
  }
  if (v84) {
    CFRelease(v84);
  }
  if (v82[0]) {
    CFRelease(v82[0]);
  }
}

void sub_1BB603DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  unint64_t v9 = *(void **)(v7 - 176);
  if (v9)
  {
    *(void *)(v7 - 168) = v9;
    operator delete(v9);
  }
  applesauce::CF::DataRef::~DataRef((const void **)(v7 - 152));
  if (*(char *)(v7 - 105) < 0) {
    operator delete(*(void **)(v7 - 128));
  }
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

char *AUSM::OBHDConfig::createSourceVector(char *result, uint64_t a2, void *a3, unsigned int a4, int a5)
{
  *(void *)uint64_t result = 0;
  *((void *)result + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  long long v22 = result;
  *((void *)result + 2) = 0;
  if (*a3)
  {
    unint64_t v5 = *(unsigned int *)(*a3 + 176);
    if (v5)
    {
      if (a4)
      {
        uint64_t v19 = *(void *)(a2 + 280);
        uint64_t v7 = a4;
        size_t v8 = 16 * a4;
        unint64_t v9 = (char *)operator new(v8);
        bzero(v9, v8);
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        *(void *)long long v22 = v9;
        *((void *)v22 + freeMatrix(*((_DWORD *)this + 17), this + 1) = &v9[v8];
        *((void *)v22 + 2) = &v9[16 * v7];
        do
        {
          uint64_t v12 = *a3;
          uint64_t v13 = (std::__shared_weak_count *)a3[1];
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v14 = (char *)operator new(0x110uLL);
          *(_OWORD *)(v14 + 8) = 0u;
          *(void *)unint64_t v14 = &unk_1F14BA500;
          *((void *)v14 + 3) = &unk_1F14BEDB0;
          IR::IRDataAttributes::IRDataAttributes((uint64_t)(v14 + 32), v12 + 8);
          v14[200] = 0;
          *(_OWORD *)(v14 + 184) = 0u;
          *((_DWORD *)v14 + 5freeMatrix(*((_DWORD *)this + 17), this + 1) = -65536;
          *((void *)v14 + 3) = &unk_1F14BA538;
          *((void *)v14 + 26) = v12;
          *((void *)v14 + 27) = v13;
          if (v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            *((void *)v14 + 28) = 0;
            *((void *)v14 + 29) = 0;
            *((void *)v14 + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
            *((void *)v14 + 3freeMatrix(*((_DWORD *)this + 17), this + 1) = 1;
            v14[256] = 0;
            *(void *)(v14 + 26std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0xFFFFFFFFLL;
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          else
          {
            *((void *)v14 + 28) = 0;
            *((void *)v14 + 29) = 0;
            *((void *)v14 + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
            *((void *)v14 + 3freeMatrix(*((_DWORD *)this + 17), this + 1) = 1;
            v14[256] = 0;
            *(void *)(v14 + 26std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0xFFFFFFFFLL;
          }
          *(void *)&long long v15 = v14 + 24;
          *((void *)&v15 + freeMatrix(*((_DWORD *)this + 17), this + 1) = v14;
          uint64_t v16 = *(std::__shared_weak_count **)&v9[v10 + 8];
          *(_OWORD *)&v9[v10] = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          unint64_t v9 = *(char **)v22;
          uint64_t result = (char *)(*(uint64_t (**)(void, float))(**(void **)(*(void *)v22 + v10) + 40))(*(void *)(*(void *)v22 + v10), *(float *)(*(void *)(*(void *)a2 + 16) + 484));
          unsigned int v17 = a5 + *(_DWORD *)(a2 + 268) * v11;
          if (v17 + v5 > ((*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 2)) {
            __assert_rtn("createSourceVector", "AUSMOBHDConfig.cpp", 125, "i*mNumVirtualGridPoints+inSubMatrixOffset + cacheSize <= static_cast<uint32_t>(mDecodingMatrix.size())");
          }
          uint64_t v18 = *(void *)&v9[v10];
          if (*(unsigned char *)(v18 + 176))
          {
            if (v5 != (uint64_t)(*(void *)(v18 + 208) - *(void *)(v18 + 200)) >> 2) {
              __assert_rtn("setWeights", "IRSource.cpp", 312, "inWeights.size() == mWeights.size()");
            }
            uint64_t result = std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)(v18 + 200), (char *)(v19 + 4 * v17), v19 + 4 * v17 + 4 * v5, v5);
            *(unsigned char *)(v18 + 232) = 1;
          }
          ++v11;
          v10 += 16;
        }
        while (v7 != v11);
      }
    }
  }
  return result;
}

void sub_1BB604130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14)
{
  a14 = a13;
  std::vector<std::shared_ptr<vp::vx::io::Node_Terminal>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t AUSM::OBHDConfig::updateInternal(AUSM::OBHDConfig *this, int a2)
{
  v133[2] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v127 = a2;
  long long v125 = (char *)this + 408;
  char v126 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 408);
  if (v126)
  {
    unsigned int v124 = 0;
    uint64_t v4 = *((void *)this + 1);
    if (438261969 * ((unint64_t)(*((void *)this + 2) - v4) >> 4))
    {
      int v114 = 0;
      int v111 = 0;
      char v5 = 0;
      unsigned int v6 = 0;
      uint64_t v112 = 0;
      long long v113 = (uint64_t **)((char *)this + 152);
      CFTypeRef v110 = (uint64_t **)((char *)this + 176);
      CFTypeRef v115 = (uint64_t *)((char *)this + 120);
      CFTypeRef v117 = (uint64_t *)((char *)this + 104);
      uint64_t v7 = (char *)this + 136;
      int v108 = (uint64_t **)((char *)this + 224);
      char v109 = (uint64_t **)((char *)this + 200);
      CFTypeRef v119 = (char **)((char *)this + 376);
      __asm { FMOV            V13.2S, #1.0 }
      do
      {
        if ((AUSM::ChannelGeometry::update((float32x4_t **)(v4 + 784 * v6), v127) & 1) != 0 || v127)
        {
          unsigned int v13 = v6;
          if ((v5 & 1) == 0)
          {
            uint64_t v14 = v4 + 784 * v6;
            long long v15 = *(_OWORD *)(v14 + 704);
            long long v16 = *(_OWORD *)(v14 + 720);
            long long v17 = *(_OWORD *)(v14 + 736);
            *((void *)this + 1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(v14 + 752);
            *((_OWORD *)this + 3) = v16;
            *((_OWORD *)this + 4) = v17;
            *((_OWORD *)this + 2) = v15;
            *((_DWORD *)this + 1freeMatrix(*((_DWORD *)this + 17), this + 1) = 1065353216;
            *((void *)this + 9) = _D13;
            *((_DWORD *)this + 8) = *((_DWORD *)this + 9);
          }
          uint64_t v18 = (float32x4_t *)(v4 + 784 * v6);
          float v19 = v18[36].f32[1];
          float v20 = v18[36].f32[0];
          float v21 = -v18[36].f32[2];
          float v22 = hypotf(v20, v19);
          atan2f(v21, v22);
          IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)v122);
          atan2f(v19, v20);
          IR::IRCoordinates::set();
          IR::IRCoordinates::set();
          IR::IRCoordinates::set();
          f32 = v18[44].f32;
          v121[0] = &v127;
          v121[1] = v122;
          v121[2] = &v124;
          v121[3] = this;
          uint64_t v24 = *((void *)this + 11);
          unsigned int v25 = v124;
          if (v24 && v124 < *(_DWORD *)(v24 + 176))
          {
            uint64_t v26 = (float *)(v4 + 784 * v13);
            v114 |= AUSM::OBHDConfig::updateInternal(BOOL)::$_0::operator()((uint64_t)v121, (uint64_t *)this + 11, v113, v124, (float)(v26[179] * v26[186]) * v26[172], (float)(v26[179] * *f32)* (float)((float)((float)((float)(v26[180] * v26[182]) * v26[184]) * v26[186]) + 0.0));
            unsigned int v25 = v124;
          }
          unsigned int v27 = *((_DWORD *)this + 66);
          unsigned int v28 = v25 - v27;
          if (v25 >= v27)
          {
            if (*v117 && v28 < *(_DWORD *)(*v117 + 176))
            {
              double v29 = (float *)(v4 + 784 * v13);
              HIDWORD(v112) |= AUSM::OBHDConfig::updateInternal(BOOL)::$_0::operator()((uint64_t)v121, v117, v110, v28, v29[179] * v29[183], (float)((float)(v29[177] * v29[179]) * v29[188])* (float)((float)((float)(v29[181] * v29[183]) * v29[184]) * v29[186]));
            }
            if (*v115 && v28 < *(_DWORD *)(*v115 + 176))
            {
              unint64_t v30 = (float *)(v4 + 784 * v13);
              LODWORD(v112) = v112 | AUSM::OBHDConfig::updateInternal(BOOL)::$_0::operator()((uint64_t)v121, v115, v109, v28, v30[179] * v30[187], (float)((float)(v30[178] * v30[179]) * v30[189])* (float)((float)((float)(v30[185] * v30[187]) * v30[180]) * v30[182]));
            }
            if (*(void *)v7 && v28 < *(_DWORD *)(*(void *)v7 + 176))
            {
              unint64_t v31 = (float *)(v4 + 784 * v13);
              v111 |= AUSM::OBHDConfig::updateInternal(BOOL)::$_0::operator()((uint64_t)v121, (uint64_t *)this + 17, v108, v28, (float)(v31[179] * v31[183]) * v31[187], (float)((float)((float)(v31[177] * v31[179]) * v31[188]) * v31[189])* (float)((float)((float)(v31[181] * v31[183]) * v31[185]) * v31[187]));
            }
          }
          if ((*(unsigned char *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 2576) & 2) != 0)
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            uint64_t v32 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v33 = (char *)this + 376;
              if (*((char *)this + 399) < 0) {
                unint64_t v33 = *v119;
              }
              uint64_t v34 = v18 + 36;
              unsigned int v35 = v124;
              AUSM::ObjectParameters::print(&__p, v34);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              long long v129 = v33;
              __int16 v130 = 2080;
              unsigned int v131 = "updateInternal";
              __int16 v132 = 1024;
              LODWORD(v133[0]) = v35;
              WORD2(v133[0]) = 2080;
              *(void *)((char *)v133 + 6) = p_p;
              _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|TGrid #%u: %s", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (getAUSMV2Log(void)::onceToken != -1) {
                dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
              }
            }
            long long v37 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v38 = (char *)this + 376;
              if (*((char *)this + 399) < 0) {
                uint64_t v38 = *v119;
              }
              unsigned int v39 = v124;
              AUSM::GainParameters::print((AUSM::GainParameters *)&__p, f32);
              uint64_t v40 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              long long v129 = v38;
              __int16 v130 = 2080;
              unsigned int v131 = "updateInternal";
              __int16 v132 = 1024;
              LODWORD(v133[0]) = v39;
              WORD2(v133[0]) = 2080;
              *(void *)((char *)v133 + 6) = v40;
              _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|TGrid #%u: %s", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          char v5 = 1;
        }
        unsigned int v6 = v124 + 1;
        unsigned int v124 = v6;
        uint64_t v4 = *((void *)this + 1);
      }
      while (v6 < 438261969 * ((unint64_t)(*((void *)this + 2) - v4) >> 4));
      if ((v112 & 0x100000000) != 0)
      {
        uint64_t v43 = *((unsigned int *)this + 66);
        uint64_t v44 = *((void *)this + 38);
        if (v43) {
          bzero(*((void **)this + 38), 4 * v43);
        }
        else {
          uint64_t v43 = 0;
        }
        unint64_t v45 = ((*((void *)this + 39) - v44) >> 2) - v43;
        uint64_t v46 = *((void *)this + 22);
        if ((*((void *)this + 23) - v46) >> 4 < v45) {
          unint64_t v45 = (*((void *)this + 23) - v46) >> 4;
        }
        if (v45)
        {
          uint64_t v47 = 0;
          unint64_t v48 = 0;
          do
          {
            double v49 = IR::WeightedSumOfCache::calculateSumOfWeights(*(IR::WeightedSumOfCache **)(v46 + v47));
            uint64_t v50 = *((unsigned int *)this + 66);
            uint64_t v51 = *((void *)this + 38);
            *(_DWORD *)(v51 + 4 * (v48++ + v50)) = LODWORD(v49);
            unint64_t v52 = ((*((void *)this + 39) - v51) >> 2) - v50;
            uint64_t v46 = *((void *)this + 22);
            if ((*((void *)this + 23) - v46) >> 4 < v52) {
              unint64_t v52 = (*((void *)this + 23) - v46) >> 4;
            }
            v47 += 16;
          }
          while (v48 < v52);
        }
        if ((*(unsigned char *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 2576) & 0x10) != 0)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          uint64_t v53 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v54 = (char *)this + 376;
            if (*((char *)this + 399) < 0) {
              uint64_t v54 = *v119;
            }
            AUSM::printFloatVector((uint64_t)v122, (char **)this + 38);
            if (v123 >= 0) {
              uint64_t v55 = v122;
            }
            else {
              uint64_t v55 = (void **)v122[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            long long v129 = v54;
            __int16 v130 = 2080;
            unsigned int v131 = "updateInternal";
            __int16 v132 = 2080;
            v133[0] = v55;
            _os_log_impl(&dword_1BB0CE000, v53, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|ReverbSendGains=%s", buf, 0x20u);
            if (v123 < 0) {
              operator delete(v122[0]);
            }
            BYTE4(v112) = 1;
          }
        }
      }
      if (v112)
      {
        uint64_t v56 = *((unsigned int *)this + 66);
        uint64_t v57 = *((void *)this + 41);
        if (v56) {
          bzero(*((void **)this + 41), 4 * v56);
        }
        else {
          uint64_t v56 = 0;
        }
        unint64_t v59 = ((*((void *)this + 42) - v57) >> 2) - v56;
        uint64_t v60 = *((void *)this + 25);
        if ((*((void *)this + 26) - v60) >> 4 < v59) {
          unint64_t v59 = (*((void *)this + 26) - v60) >> 4;
        }
        if (v59)
        {
          uint64_t v61 = 0;
          unint64_t v62 = 0;
          do
          {
            double v63 = IR::WeightedSumOfCache::calculateSumOfWeights(*(IR::WeightedSumOfCache **)(v60 + v61));
            uint64_t v64 = *((unsigned int *)this + 66);
            uint64_t v65 = *((void *)this + 41);
            *(_DWORD *)(v65 + 4 * (v62++ + v64)) = LODWORD(v63);
            unint64_t v66 = ((*((void *)this + 42) - v65) >> 2) - v64;
            uint64_t v60 = *((void *)this + 25);
            if ((*((void *)this + 26) - v60) >> 4 < v66) {
              unint64_t v66 = (*((void *)this + 26) - v60) >> 4;
            }
            v61 += 16;
          }
          while (v62 < v66);
        }
        if ((*(unsigned char *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 2576) & 0x10) != 0)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          BOOL v67 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v68 = (char *)this + 376;
            if (*((char *)this + 399) < 0) {
              unint64_t v68 = *v119;
            }
            AUSM::printFloatVector((uint64_t)v122, (char **)this + 41);
            if (v123 >= 0) {
              CFTypeRef v69 = v122;
            }
            else {
              CFTypeRef v69 = (void **)v122[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            long long v129 = v68;
            __int16 v130 = 2080;
            unsigned int v131 = "updateInternal";
            __int16 v132 = 2080;
            v133[0] = v69;
            _os_log_impl(&dword_1BB0CE000, v67, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|PostProcReverbSendGains=%s", buf, 0x20u);
            if (v123 < 0) {
              operator delete(v122[0]);
            }
          }
        }
        int v58 = 1;
      }
      else
      {
        int v58 = 0;
      }
      if (v111)
      {
        uint64_t v70 = *((unsigned int *)this + 66);
        uint64_t v71 = *((void *)this + 44);
        if (v70) {
          bzero(*((void **)this + 44), 4 * v70);
        }
        else {
          uint64_t v70 = 0;
        }
        unint64_t v73 = ((*((void *)this + 45) - v71) >> 2) - v70;
        uint64_t v74 = *((void *)this + 28);
        if ((*((void *)this + 29) - v74) >> 4 < v73) {
          unint64_t v73 = (*((void *)this + 29) - v74) >> 4;
        }
        if (v73)
        {
          uint64_t v75 = 0;
          unint64_t v76 = 0;
          do
          {
            double v77 = IR::WeightedSumOfCache::calculateSumOfWeights(*(IR::WeightedSumOfCache **)(v74 + v75));
            uint64_t v78 = *((unsigned int *)this + 66);
            uint64_t v79 = *((void *)this + 44);
            *(_DWORD *)(v79 + 4 * (v76++ + v78)) = LODWORD(v77);
            unint64_t v80 = ((*((void *)this + 45) - v79) >> 2) - v78;
            uint64_t v74 = *((void *)this + 28);
            if ((*((void *)this + 29) - v74) >> 4 < v80) {
              unint64_t v80 = (*((void *)this + 29) - v74) >> 4;
            }
            v75 += 16;
          }
          while (v76 < v80);
        }
        if ((*(unsigned char *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 2576) & 0x10) != 0)
        {
          if (getAUSMV2Log(void)::onceToken != -1) {
            dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
          }
          unint64_t v81 = getAUSMV2Log(void)::gLog;
          if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
          {
            CFTypeRef v82 = (char *)this + 376;
            if (*((char *)this + 399) < 0) {
              CFTypeRef v82 = *v119;
            }
            AUSM::printFloatVector((uint64_t)v122, (char **)this + 44);
            if (v123 >= 0) {
              char v83 = v122;
            }
            else {
              char v83 = (void **)v122[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            long long v129 = v82;
            __int16 v130 = 2080;
            unsigned int v131 = "updateInternal";
            __int16 v132 = 2080;
            v133[0] = v83;
            _os_log_impl(&dword_1BB0CE000, v81, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|CombinedReverbSendGains=%s", buf, 0x20u);
            if (v123 < 0) {
              operator delete(v122[0]);
            }
          }
        }
        int v72 = 1;
      }
      else
      {
        int v72 = 0;
      }
      if ((*(unsigned char *)(*(void *)(*(void *)(*(void *)this + 8) + 232) + 2576) & 0x10) != 0)
      {
        int v116 = v72;
        int v118 = v58;
        if ((v114 & 1) != 0 && ((*((void *)this + 20) - *((void *)this + 19)) & 0xFFFFFFFF0) != 0)
        {
          uint64_t v84 = 0;
          unint64_t v85 = 0;
          do
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            char v86 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              CFTypeRef v87 = (char *)this + 376;
              if (*((char *)this + 399) < 0) {
                CFTypeRef v87 = *v119;
              }
              AUSM::printFloatVector((uint64_t)v122, (char **)((*v113)[v84] + 200));
              if (v123 >= 0) {
                long long v88 = v122;
              }
              else {
                long long v88 = (void **)v122[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              long long v129 = v87;
              __int16 v130 = 2080;
              unsigned int v131 = "updateInternal";
              __int16 v132 = 1024;
              LODWORD(v133[0]) = v85;
              WORD2(v133[0]) = 2080;
              *(void *)((char *)v133 + 6) = v88;
              _os_log_impl(&dword_1BB0CE000, v86, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|DirectIRWeights[%u]={%s}", buf, 0x26u);
              if (v123 < 0) {
                operator delete(v122[0]);
              }
            }
            ++v85;
            v84 += 2;
          }
          while (v85 < ((*((void *)this + 20) - *((void *)this + 19)) >> 4));
        }
        if ((v112 & 0x100000000) != 0 && ((*((void *)this + 23) - *((void *)this + 22)) & 0xFFFFFFFF0) != 0)
        {
          uint64_t v89 = 0;
          unint64_t v90 = 0;
          do
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v91 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v92 = (char *)this + 376;
              if (*((char *)this + 399) < 0) {
                uint64_t v92 = *v119;
              }
              AUSM::printFloatVector((uint64_t)v122, (char **)((*v110)[v89] + 200));
              if (v123 >= 0) {
                int v93 = v122;
              }
              else {
                int v93 = (void **)v122[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              long long v129 = v92;
              __int16 v130 = 2080;
              unsigned int v131 = "updateInternal";
              __int16 v132 = 1024;
              LODWORD(v133[0]) = v90;
              WORD2(v133[0]) = 2080;
              *(void *)((char *)v133 + 6) = v93;
              _os_log_impl(&dword_1BB0CE000, v91, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|ReverbIRWeights[%u]={%s}", buf, 0x26u);
              if (v123 < 0) {
                operator delete(v122[0]);
              }
            }
            ++v90;
            v89 += 2;
          }
          while (v90 < ((*((void *)this + 23) - *((void *)this + 22)) >> 4));
        }
        if (v118 && ((*((void *)this + 26) - *((void *)this + 25)) & 0xFFFFFFFF0) != 0)
        {
          uint64_t v94 = 0;
          unint64_t v95 = 0;
          do
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v96 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              long long v97 = (char *)this + 376;
              if (*((char *)this + 399) < 0) {
                long long v97 = *v119;
              }
              AUSM::printFloatVector((uint64_t)v122, (char **)((*v109)[v94] + 200));
              if (v123 >= 0) {
                long long v98 = v122;
              }
              else {
                long long v98 = (void **)v122[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              long long v129 = v97;
              __int16 v130 = 2080;
              unsigned int v131 = "updateInternal";
              __int16 v132 = 1024;
              LODWORD(v133[0]) = v95;
              WORD2(v133[0]) = 2080;
              *(void *)((char *)v133 + 6) = v98;
              _os_log_impl(&dword_1BB0CE000, v96, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|PostProcReverbIRWeights[%u]={%s}", buf, 0x26u);
              if (v123 < 0) {
                operator delete(v122[0]);
              }
            }
            ++v95;
            v94 += 2;
          }
          while (v95 < ((*((void *)this + 26) - *((void *)this + 25)) >> 4));
        }
        if (v116 && ((*((void *)this + 29) - *((void *)this + 28)) & 0xFFFFFFFF0) != 0)
        {
          uint64_t v99 = 0;
          unint64_t v100 = 0;
          do
          {
            if (getAUSMV2Log(void)::onceToken != -1) {
              dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
            }
            long long v101 = getAUSMV2Log(void)::gLog;
            if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
            {
              CFTypeRef v102 = (char *)this + 376;
              if (*((char *)this + 399) < 0) {
                CFTypeRef v102 = *v119;
              }
              AUSM::printFloatVector((uint64_t)v122, (char **)((*v108)[v99] + 200));
              if (v123 >= 0) {
                long long v103 = v122;
              }
              else {
                long long v103 = (void **)v122[0];
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              long long v129 = v102;
              __int16 v130 = 2080;
              unsigned int v131 = "updateInternal";
              __int16 v132 = 1024;
              LODWORD(v133[0]) = v100;
              WORD2(v133[0]) = 2080;
              *(void *)((char *)v133 + 6) = v103;
              _os_log_impl(&dword_1BB0CE000, v101, OS_LOG_TYPE_DEFAULT, "[%s|%s] AUSM_VERBOSE|CombinedReverbIRWeights[%u]={%s}", buf, 0x26u);
              if (v123 < 0) {
                operator delete(v122[0]);
              }
            }
            ++v100;
            v99 += 2;
          }
          while (v100 < ((*((void *)this + 29) - *((void *)this + 28)) >> 4));
        }
      }
    }
    if (v127)
    {
      uint64_t v104 = *((void *)this + 13);
      if (v104) {
        ++*(_DWORD *)(v104 + 256);
      }
      uint64_t v105 = *((void *)this + 15);
      if (v105) {
        ++*(_DWORD *)(v105 + 256);
      }
      uint64_t v106 = *((void *)this + 17);
      if (v106) {
        ++*(_DWORD *)(v106 + 256);
      }
    }
  }
  else if (a2)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    long long v41 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      long long v42 = (char *)this + 376;
      if (*((char *)this + 399) < 0) {
        long long v42 = *(char **)v42;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      long long v129 = v42;
      __int16 v130 = 2080;
      unsigned int v131 = "updateInternal";
      _os_log_error_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_ERROR, "[%s|%s] Forced update failed because of a mutex. This should not happen.", buf, 0x16u);
    }
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v125);
}

void sub_1BB605240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t AUSM::OBHDConfig::updateInternal(BOOL)::$_0::operator()(uint64_t a1, uint64_t *a2, uint64_t **a3, unsigned int a4, float a5, float a6)
{
  uint64_t v11 = *(void *)(a1 + 24);
  if (a6 > 0.0001 || **(unsigned char **)a1)
  {
    if (**(_DWORD **)(a1 + 16) >= 954437177 * ((*(void *)(*a2 + 240) - *(void *)(*a2 + 232)) >> 2)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (!IR::IRCoordinates::equalWithAccuracy() || **(unsigned char **)a1)
    {
      uint64_t v12 = *a2;
      if (*(void *)(*a2 + 160))
      {
        if (954437177 * ((*(void *)(v12 + 240) - *(void *)(v12 + 232)) >> 2) > a4)
        {
          unsigned int v13 = *(long long **)(a1 + 8);
          if (IR::IRCoordinates::operator!=())
          {
            IR::IRData::getInterpolatedCoeffs();
            uint64_t v14 = *(void *)(v12 + 232) + 36 * a4;
            long long v15 = *v13;
            long long v16 = v13[1];
            *(_DWORD *)(v14 + 32) = *((_DWORD *)v13 + 8);
            *(_OWORD *)uint64_t v14 = v15;
            *(_OWORD *)(v14 + 16) = v16;
            ++*(_DWORD *)(v12 + 256);
          }
        }
      }
    }
  }
  uint64_t v17 = *(void *)(v11 + 280);
  uint64_t v18 = *a3;
  uint64_t v19 = **a3;
  float v20 = 0.0;
  if (*(unsigned char *)(v19 + 176))
  {
    uint64_t v22 = v19 + 200;
    uint64_t v21 = *(void *)(v19 + 200);
    if (((unint64_t)(*(void *)(v22 + 8) - v21) >> 2) > a4) {
      float v20 = *(float *)(v21 + 4 * a4);
    }
  }
  if (fabsf(-(float)(v20 - (float)(a5 * *(float *)(v17 + 4 * a4)))) <= 0.0001 && !**(unsigned char **)a1) {
    return 0;
  }
  unint64_t v23 = (char *)a3[1] - (char *)v18;
  uint64_t result = 1;
  if ((v23 & 0xFFFFFFFF0) != 0)
  {
    int v25 = *(_DWORD *)(v11 + 268);
    if (((v23 >> 4) & 0xFFFFFFFE) != 0) {
      uint64_t v26 = (v23 >> 4);
    }
    else {
      uint64_t v26 = 1;
    }
    unsigned int v27 = a4;
    do
    {
      uint64_t v28 = *v18;
      if (*(unsigned char *)(*v18 + 176))
      {
        uint64_t v29 = *(void *)(v28 + 200);
        if (((unint64_t)(*(void *)(v28 + 208) - v29) >> 2) > a4)
        {
          float v30 = *(float *)(v17 + 4 * v27) * a5;
          if (*(float *)(v29 + 4 * a4) != v30)
          {
            *(float *)(v29 + 4 * a4) = v30;
            *(unsigned char *)(v28 + 232) = 1;
          }
        }
      }
      v27 += v25;
      v18 += 2;
      --v26;
    }
    while (v26);
    return 1;
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<IR::WeightedSumOfCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<IR::WeightedSumOfCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BA500;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<IR::WeightedSumOfCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BA500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void IR::Cache::~Cache(IR::Cache *this)
{
  IR::Cache::~Cache(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void **v3;
  void **v4;
  void *v5;
  std::__shared_weak_count *v6;
  void **v7;

  *(void *)this = &unk_1F14BA4E0;
  unsigned __int8 v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v2;
    operator delete(v2);
  }
  uint64_t v7 = (void **)((char *)this + 208);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v3 = (void **)*((void *)this + 23);
  if (v3)
  {
    uint64_t v4 = (void **)*((void *)this + 24);
    char v5 = (void *)*((void *)this + 23);
    if (v4 != v3)
    {
      do
      {
        v4 -= 3;
        uint64_t v7 = v4;
        std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&v7);
      }
      while (v4 != v3);
      char v5 = (void *)*((void *)this + 23);
    }
    *((void *)this + 24) = v3;
    operator delete(v5);
  }
  unsigned int v6 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  IR::IRDataAttributes::~IRDataAttributes((IR::Cache *)((char *)this + 8));
}

uint64_t std::__shared_ptr_emplace<IR::Cache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<IR::Cache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BA4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<IR::Cache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BA4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL applesauce::CF::operator==(unint64_t cf1, unint64_t a2)
{
  BOOL result = (cf1 | a2) == 0;
  if (cf1)
  {
    if (a2) {
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2) != 0;
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AUSM::ChannelGeometry>>(unint64_t a1)
{
  if (a1 >= 0x5397829CBC14E6) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(784 * a1);
}

void *AUSM::OBHDConfig::getDirectSoundSource(void *this, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = this;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a2 + 400));
  if ((v4 & 1) != 0 && ((*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 4) > a3)
  {
    uint64_t v8 = a2 + 408;
    char v9 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 408);
    long long v7 = *(_OWORD *)(*(void *)(a2 + 152) + 16 * a3);
    *unint64_t v3 = v7;
    if (*((void *)&v7 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    return (void *)std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v8);
  }
  else
  {
    *this = 0;
    this[1] = 0;
  }
  return this;
}

void *AUSM::OBHDConfig::getEarlyRoomSource(void *result, uint64_t a2, int a3, unsigned int a4)
{
  unsigned __int8 v4 = result;
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a2 + 400));
  if ((v5 & 1) == 0)
  {
    *BOOL result = 0;
    result[1] = 0;
    return result;
  }
  uint64_t v15 = a2 + 408;
  char v16 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2 + 408);
  unsigned int v9 = a4;
  if (*(unsigned char *)(a2 + 248))
  {
    unsigned int v10 = *(_DWORD *)(a2 + 256);
    BOOL v11 = a4 >= v10;
    unsigned int v9 = a4 - v10;
    if (!v11)
    {
LABEL_15:
      *unsigned __int8 v4 = 0;
      v4[1] = 0;
      return (void *)std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v15);
    }
  }
  switch(a3)
  {
    case 0:
      uint64_t v12 = *(void *)(a2 + 200);
      uint64_t v13 = *(void *)(a2 + 208);
      goto LABEL_12;
    case 2:
      uint64_t v12 = *(void *)(a2 + 224);
      uint64_t v13 = *(void *)(a2 + 232);
LABEL_12:
      if (((unint64_t)(v13 - v12) >> 4) > a4)
      {
        long long v14 = *(_OWORD *)(v12 + 16 * v9);
        *(_OWORD *)unsigned __int8 v4 = v14;
        if (*((void *)&v14 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        return (void *)std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v15);
      }
      goto LABEL_15;
    case 1:
      uint64_t v12 = *(void *)(a2 + 176);
      uint64_t v13 = *(void *)(a2 + 184);
      goto LABEL_12;
  }
  return (void *)std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v15);
}

void VoiceProcessorV2::MitigateFrontCameraNoise(VoiceProcessorV2 *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v1 = *((_DWORD *)this + 19);
  if (v1 == 3 || v1 == 0)
  {
    unsigned __int8 v4 = (_DWORD *)*((void *)this + 292);
    if (v4 != *((_DWORD **)this + 293)
      && *v4 == 1886613611
      && FigCaptureSpeakerInterferenceMitigationIsSupported())
    {
      *((void *)this + 1112) |= 0x80000000000000uLL;
      if (FigCaptureSpeakerInterferenceMitigationIsRequired()) {
        float v5 = 1.0;
      }
      else {
        float v5 = 0.0;
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 10232, 5, v5);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unsigned int v6 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        long long v7 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          BOOL v11 = "VoiceProcessor_v2.cpp";
          __int16 v12 = 1024;
          int v13 = 2835;
          __int16 v14 = 2048;
          double v15 = v5;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> mitigate front camera noise; uint64_t value = %f",
            buf,
            0x1Cu);
        }
      }
      uint64_t v8 = (int *)*((void *)this + 1578);
      if (v8 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1)
        {
          unsigned int v9 = (int *)*((void *)this + 1578);
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          uint64_t v8 = v9;
        }
        CALegacyLog::log(v8, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2835, "MitigateFrontCameraNoise", "mitigate front camera noise; uint64_t value = %f",
          v5);
      }
    }
  }
}

void VoiceProcessorV2::ScaleHardwareOutputPresentationLatency(VoiceProcessorV2 *this, AudioObjectID inObjectID)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 2244))
  {
    unint64_t v3 = (char *)this + 15961;
    double outData = 0.0;
    *(void *)&inAddress.mSelector = 0x6F7574706E737274;
    inAddress.muint64_t Element = 0;
    UInt32 ioDataSize = 8;
    OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unsigned int v6 = (void *)VPLogScope(void)::scope;
    if (PropertyData)
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        long long v7 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          inAddress.mSelector = 136315650;
          *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          __int16 v29 = 1024;
          int v30 = 1899;
          __int16 v31 = 1024;
          LODWORD(v32) = PropertyData;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
        }
      }
      uint64_t v8 = (int *)*((void *)this + 1578);
      if (v8 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1899, "ScaleHardwareOutputPresentationLatency", "error %d getting ref physical device nominal sample rate", PropertyData);
      }
    }
    else
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        unsigned int v9 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *((void *)this + 88);
          int v11 = *((_DWORD *)this + 292);
          inAddress.mSelector = 136316162;
          *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          __int16 v29 = 1024;
          int v30 = 1901;
          __int16 v31 = 2048;
          double v32 = outData;
          __int16 v33 = 2048;
          uint64_t v34 = v10;
          __int16 v35 = 1024;
          int v36 = v11;
          _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
            (uint8_t *)&inAddress,
            0x2Cu);
        }
      }
      __int16 v12 = (int *)*((void *)this + 1578);
      if (v12 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1901, "ScaleHardwareOutputPresentationLatency", "ref nominal sample rate = %lf; ref sample rate = %lf; output latency before scaling = %u",
          outData,
          *((double *)this + 88),
          *((_DWORD *)this + 292));
      }
      if (outData > 0.0)
      {
        LODWORD(v5) = *((_DWORD *)this + 292);
        double v13 = *((double *)this + 73) * (double)v5 / outData;
        *((_DWORD *)this + 292) = v13;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        __int16 v14 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          double v15 = (*v14 ? *v14 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            int v16 = *((_DWORD *)this + 292);
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            __int16 v29 = 1024;
            int v30 = 1904;
            __int16 v31 = 1024;
            LODWORD(v32) = v16;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        uint64_t v17 = (int *)*((void *)this + 1578);
        if (v17 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1904, "ScaleHardwareOutputPresentationLatency", "output latency after scaling = %u", *((_DWORD *)this + 292));
        }
        if (!*((_DWORD *)this + 1129))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v18 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              int v20 = *((_DWORD *)this + 287);
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v29 = 1024;
              int v30 = 1906;
              __int16 v31 = 1024;
              LODWORD(v32) = v20;
              _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency before scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          uint64_t v21 = (int *)*((void *)this + 1578);
          if (v21 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1906, "ScaleHardwareOutputPresentationLatency", "tap stream input latency before scaling = %u", *((_DWORD *)this + 287));
          }
          LODWORD(v13) = *((_DWORD *)this + 287);
          *((_DWORD *)this + 287) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v22 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            unint64_t v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              int v24 = *((_DWORD *)this + 287);
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v29 = 1024;
              int v30 = 1908;
              __int16 v31 = 1024;
              LODWORD(v32) = v24;
              _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input latency after scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          int v25 = (int *)*((void *)this + 1578);
          if (v25 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1908, "ScaleHardwareOutputPresentationLatency", "tap stream input latency after scaling = %u", *((_DWORD *)this + 287));
          }
        }
        VoiceProcessorV2::PListWriteRefPhysicalDevSR(this, &outData);
      }
    }
  }
}

void VoiceProcessorV2::ScaleHardwareOutputSafetyOffsets(VoiceProcessorV2 *this, AudioObjectID inObjectID)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 2244))
  {
    unint64_t v3 = (char *)this + 15961;
    double outData = 0.0;
    *(void *)&inAddress.mSelector = 0x6F7574706E737274;
    inAddress.muint64_t Element = 0;
    UInt32 ioDataSize = 8;
    OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unsigned int v6 = (void *)VPLogScope(void)::scope;
    if (PropertyData)
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        long long v7 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          inAddress.mSelector = 136315650;
          *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          __int16 v29 = 1024;
          int v30 = 1874;
          __int16 v31 = 1024;
          LODWORD(v32) = PropertyData;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting ref physical device nominal sample rate", (uint8_t *)&inAddress, 0x18u);
        }
      }
      uint64_t v8 = (int *)*((void *)this + 1578);
      if (v8 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v8, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1874, "ScaleHardwareOutputSafetyOffsets", "error %d getting ref physical device nominal sample rate");
      }
    }
    else
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        unsigned int v9 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = *((void *)this + 88);
          int v11 = *((_DWORD *)this + 294);
          inAddress.mSelector = 136316162;
          *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          __int16 v29 = 1024;
          int v30 = 1876;
          __int16 v31 = 2048;
          double v32 = outData;
          __int16 v33 = 2048;
          uint64_t v34 = v10;
          __int16 v35 = 1024;
          int v36 = v11;
          _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
            (uint8_t *)&inAddress,
            0x2Cu);
        }
      }
      __int16 v12 = (int *)*((void *)this + 1578);
      if (v12 && (*v3 || v3[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v12, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1876, "ScaleHardwareOutputSafetyOffsets", "ref nominal sample rate = %lf; ref sample rate = %lf; output safety offset before scaling = %u",
          outData,
          *((double *)this + 88),
          *((_DWORD *)this + 294));
      }
      if (outData > 0.0)
      {
        LODWORD(v5) = *((_DWORD *)this + 294);
        double v13 = *((double *)this + 73) * (double)v5 / outData;
        *((_DWORD *)this + 294) = v13;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        __int16 v14 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          double v15 = (*v14 ? *v14 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            int v16 = *((_DWORD *)this + 294);
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            __int16 v29 = 1024;
            int v30 = 1879;
            __int16 v31 = 1024;
            LODWORD(v32) = v16;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> output safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        uint64_t v17 = (int *)*((void *)this + 1578);
        if (v17 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1879, "ScaleHardwareOutputSafetyOffsets", "output safety offset after scaling = %u", *((_DWORD *)this + 294));
        }
        if (!*((_DWORD *)this + 1129))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v18 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              int v20 = *((_DWORD *)this + 288);
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v29 = 1024;
              int v30 = 1881;
              __int16 v31 = 1024;
              LODWORD(v32) = v20;
              _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset before scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          uint64_t v21 = (int *)*((void *)this + 1578);
          if (v21 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v21, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1881, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset before scaling = %u", *((_DWORD *)this + 288));
          }
          LODWORD(v13) = *((_DWORD *)this + 288);
          *((_DWORD *)this + 288) = (*((double *)this + 73) * (double)*(unint64_t *)&v13 / outData);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v22 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            unint64_t v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              int v24 = *((_DWORD *)this + 288);
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v29 = 1024;
              int v30 = 1883;
              __int16 v31 = 1024;
              LODWORD(v32) = v24;
              _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> tap stream input safety offset after scaling = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          int v25 = (int *)*((void *)this + 1578);
          if (v25 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1883, "ScaleHardwareOutputSafetyOffsets", "tap stream input safety offset after scaling = %u");
          }
        }
      }
    }
  }
}

void VoiceProcessorV2::UpdateHardwareOutputPresentationLatency(VoiceProcessorV2 *this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  unsigned int v45 = 1869968496;
  int v1 = (_DWORD *)*((void *)this + 292);
  if (v1 != *((_DWORD **)this + 293))
  {
    unint64_t v3 = (char *)this + 15961;
    unsigned __int8 v4 = (AudioObjectID *)((char *)this + 1136);
    if (*v1 == 1885433971)
    {
      CFArrayRef outData = 0;
      AudioObjectID v5 = *v4;
      *(void *)&inAddress.mSelector = 0x6F75747064616373;
      inAddress.muint64_t Element = 0;
      UInt32 valuePtr = 0;
      UInt32 ioDataSize = 8;
      OSStatus PropertyData = AudioObjectGetPropertyData(v5, &inAddress, 4u, v1, &ioDataSize, &outData);
      if (PropertyData)
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        long long v7 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v8 = (*v7 ? *v7 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            AudioObjectID v9 = *v4;
            inAddress.mSelector = 136315906;
            *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            __int16 v50 = 1024;
            int v51 = 1850;
            __int16 v52 = 1024;
            UInt32 v53 = PropertyData;
            __int16 v54 = 1024;
            AudioObjectID v55 = v9;
            _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting streams from ref %u", (uint8_t *)&inAddress, 0x1Eu);
          }
        }
        uint64_t v10 = (int *)*((void *)this + 1578);
        if (v10 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1)
          {
            uint64_t v44 = (int *)*((void *)this + 1578);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            uint64_t v10 = v44;
          }
          CALegacyLog::log(v10, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1850, "getStreamID", "error %d getting streams from ref %u", PropertyData, *v4);
        }
      }
      AudioObjectID v11 = outData;
      if (outData)
      {
        if (CFArrayGetCount(outData) >= 1)
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(outData, 0);
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          double v13 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            __int16 v14 = (*v13 ? *v13 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v50 = 1024;
              int v51 = 1857;
              __int16 v52 = 1024;
              UInt32 v53 = valuePtr;
              _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> stream ID = %u", (uint8_t *)&inAddress, 0x18u);
            }
          }
          double v15 = (int *)*((void *)this + 1578);
          if (v15 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v15, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1857, "getStreamID", "stream ID = %u", valuePtr);
          }
        }
        CFRelease(outData);
        AudioObjectID v11 = valuePtr;
      }
      if (!PropertyData)
      {
        *(void *)&inAddress.mSelector = 0x6F757470736C6174;
        inAddress.muint64_t Element = 0;
        LODWORD(outData) = 4;
        OSStatus v16 = AudioObjectGetPropertyData(v11, &inAddress, 0, 0, (UInt32 *)&outData, (char *)this + 1168);
        if (v16)
        {
          UInt32 v17 = v16;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v18 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            uint64_t v19 = (*v18 ? *v18 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v50 = 1024;
              int v51 = 1771;
              __int16 v52 = 1024;
              UInt32 v53 = v17;
              _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting stream output latency", (uint8_t *)&inAddress, 0x18u);
            }
          }
          int v20 = (int *)*((void *)this + 1578);
          if (v20 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v20, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1771, "UpdateHardwareOutputPresentationLatency", "error %d getting stream output latency", v17);
          }
        }
      }
    }
    else
    {
      unint64_t PortID = VoiceProcessorV2::getPortID(this, (AudioObjectID *)this + 284, &v45);
      if (!PortID)
      {
        UInt32 ioDataSize = 0;
        *(void *)&inAddress.mSelector = 0x676C6F62706F776ELL;
        inAddress.muint64_t Element = 0;
        LODWORD(outData) = 4;
        OSStatus v22 = AudioObjectGetPropertyData(HIDWORD(PortID), &inAddress, 0, 0, (UInt32 *)&outData, &ioDataSize);
        if (v22)
        {
          UInt32 v23 = v22;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v24 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            int v25 = (*v24 ? *v24 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v50 = 1024;
              int v51 = 1783;
              __int16 v52 = 1024;
              UInt32 v53 = v23;
              _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting owning device ID for the ref port", (uint8_t *)&inAddress, 0x18u);
            }
          }
          uint64_t v26 = (int *)*((void *)this + 1578);
          if (v26 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v26, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1783, "UpdateHardwareOutputPresentationLatency", "error %d getting owning device ID for the ref port", v23);
          }
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unsigned int v27 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          uint64_t v28 = (*v27 ? *v27 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            __int16 v50 = 1024;
            int v51 = 1784;
            __int16 v52 = 1024;
            UInt32 v53 = ioDataSize;
            _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref physical dev ID = %u", (uint8_t *)&inAddress, 0x18u);
          }
        }
        __int16 v29 = (int *)*((void *)this + 1578);
        if (v29 && (*v3 || v3[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v29, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1784, "UpdateHardwareOutputPresentationLatency", "ref physical dev ID = %u", ioDataSize);
        }
        *(void *)&inAddress.mSelector = 0x6F7574706C746E63;
        inAddress.muint64_t Element = 0;
        LODWORD(outData) = 4;
        OSStatus v30 = AudioObjectGetPropertyData(ioDataSize, &inAddress, 0, 0, (UInt32 *)&outData, (char *)this + 1168);
        if (v30)
        {
          UInt32 v31 = v30;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          double v32 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            __int16 v33 = (*v32 ? *v32 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v50 = 1024;
              int v51 = 1787;
              __int16 v52 = 1024;
              UInt32 v53 = v31;
              _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting physical device output latency", (uint8_t *)&inAddress, 0x18u);
            }
          }
          uint64_t v34 = (int *)*((void *)this + 1578);
          if (v34 && (*v3 || v3[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v34, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1787, "UpdateHardwareOutputPresentationLatency", "error %d getting physical device output latency", v31);
          }
        }
        if (!*((_DWORD *)this + 1129))
        {
          *(void *)&inAddress.mSelector = 0x696E70746C746E63;
          inAddress.muint64_t Element = 0;
          LODWORD(outData) = 4;
          OSStatus v39 = AudioObjectGetPropertyData(ioDataSize, &inAddress, 0, 0, (UInt32 *)&outData, (char *)this + 1148);
          if (v39)
          {
            UInt32 v40 = v39;
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            long long v41 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              long long v42 = (*v41 ? *v41 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                inAddress.mSelector = 136315650;
                *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
                __int16 v50 = 1024;
                int v51 = 1791;
                __int16 v52 = 1024;
                UInt32 v53 = v40;
                _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting tap stream input latency", (uint8_t *)&inAddress, 0x18u);
              }
            }
            uint64_t v43 = (int *)*((void *)this + 1578);
            if (v43 && (*v3 || v3[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v43, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1791, "UpdateHardwareOutputPresentationLatency", "error %d getting tap stream input latency", v40);
            }
          }
        }
        (*(void (**)(VoiceProcessorV2 *, void))(*(void *)this + 304))(this, ioDataSize);
      }
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    __int16 v35 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      int v36 = (*v35 ? *v35 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        UInt32 v37 = *((_DWORD *)this + 292);
        inAddress.mSelector = 136315650;
        *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
        __int16 v50 = 1024;
        int v51 = 1799;
        __int16 v52 = 1024;
        UInt32 v53 = v37;
        _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Override aggregate device output latency with stream/physical device output latency= %u", (uint8_t *)&inAddress, 0x18u);
      }
    }
    uint64_t v38 = (int *)*((void *)this + 1578);
    if (v38 && (*v3 || v3[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v38, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1799, "UpdateHardwareOutputPresentationLatency", "Override aggregate device output latency with stream/physical device output latency= %u", *((_DWORD *)this + 292));
    }
  }
}

unint64_t VoiceProcessorV2::getPortID(VoiceProcessorV2 *this, AudioObjectID *a2, const unsigned int *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unsigned int v6 = (char *)this + 15961;
  long long v7 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    uint64_t v8 = (*v7 ? *v7 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v9 = *a2;
      buf.mSelector = 136315650;
      *(void *)&buf.mScope = "VoiceProcessor_v2.cpp";
      __int16 v35 = 1024;
      int v36 = 1810;
      __int16 v37 = 1024;
      unsigned int v38 = v9;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> device ID = %u", (uint8_t *)&buf, 0x18u);
    }
  }
  uint64_t v10 = (int *)*((void *)this + 1578);
  if (v10 && (*v6 || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v10, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1810, "getPortID", "device ID = %u", *a2);
  }
  CFArrayRef outData = 0;
  if (*a3 == 1768845428)
  {
    AudioObjectID v11 = *a2;
    strcpy((char *)&buf, "spcdtpni");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    __int16 v12 = (const void *)*((void *)this + 295);
  }
  else
  {
    if (*a3 != 1869968496)
    {
      unsigned int PropertyData = 0;
      goto LABEL_54;
    }
    AudioObjectID v11 = *a2;
    strcpy((char *)&buf, "spcdptuo");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    __int16 v12 = (const void *)*((void *)this + 292);
  }
  UInt32 ioDataSize = 8;
  unsigned int PropertyData = AudioObjectGetPropertyData(v11, &buf, 4u, v12, &ioDataSize, &outData);
  if (PropertyData)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    __int16 v14 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      double v15 = (*v14 ? *v14 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *((_DWORD *)this + 284);
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "VoiceProcessor_v2.cpp";
        __int16 v35 = 1024;
        int v36 = 1817;
        __int16 v37 = 1024;
        unsigned int v38 = PropertyData;
        __int16 v39 = 1024;
        int v40 = v16;
        _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting connected ports %u", (uint8_t *)&buf, 0x1Eu);
      }
    }
    UInt32 v17 = (int *)*((void *)this + 1578);
    if (v17 && (*v6 || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v17, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1817, "getPortID", "error %d getting connected ports %u", PropertyData, *((_DWORD *)this + 284));
    }
  }
  if (outData)
  {
    int Count = CFArrayGetCount(outData);
    if (Count < 1)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unsigned int v27 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v28 = (*v27 ? *v27 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          buf.mSelector = 136315650;
          *(void *)&buf.mScope = "VoiceProcessor_v2.cpp";
          __int16 v35 = 1024;
          int v36 = 1827;
          __int16 v37 = 1024;
          unsigned int v38 = Count;
          _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Size of portsArray = %d", (uint8_t *)&buf, 0x18u);
        }
      }
      __int16 v29 = (int *)*((void *)this + 1578);
      if (v29 && (*v6 || v6[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v29, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1827, "getPortID", "Size of portsArray = %d");
      }
    }
    else
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(outData, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v20 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v21 = (*v20 ? *v20 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          buf.mSelector = 136315650;
          *(void *)&buf.mScope = "VoiceProcessor_v2.cpp";
          __int16 v35 = 1024;
          int v36 = 1825;
          __int16 v37 = 1024;
          unsigned int v38 = valuePtr;
          _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> port ID = %u", (uint8_t *)&buf, 0x18u);
        }
      }
      OSStatus v22 = (int *)*((void *)this + 1578);
      if (v22 && (*v6 || v6[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v22, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1825, "getPortID", "port ID = %u");
      }
    }
    CFRelease(outData);
    unint64_t v26 = (unint64_t)valuePtr << 32;
    return v26 | PropertyData;
  }
LABEL_54:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  UInt32 v23 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    int v24 = (*v23 ? *v23 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      buf.mSelector = 136315394;
      *(void *)&buf.mScope = "VoiceProcessor_v2.cpp";
      __int16 v35 = 1024;
      int v36 = 1831;
      _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Array of ports is empty", (uint8_t *)&buf, 0x12u);
    }
  }
  int v25 = (int *)*((void *)this + 1578);
  if (v25 && (*v6 || v6[1]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v25, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1831, "getPortID", "Array of ports is empty");
  }
  unint64_t v26 = 0;
  return v26 | PropertyData;
}

unsigned char *VoiceProcessorV2::CorrectHardwareOutputPresentationLatency(unsigned char *this)
{
  if (this[2244]) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)this + 288))();
  }
  return this;
}

void VoiceProcessorV2::UpdateHardwareOutputSafetyOffsets(VoiceProcessorV2 *this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 292) != *((void *)this + 293))
  {
    int v2 = *((_DWORD *)this + 294);
    unsigned int v35 = 1869968496;
    unint64_t PortID = VoiceProcessorV2::getPortID(this, (AudioObjectID *)this + 284, &v35);
    if (!PortID)
    {
      unsigned __int8 v4 = (char *)this + 15961;
      AudioObjectID outData = 0;
      *(void *)&inAddress.mSelector = 0x676C6F62706F776ELL;
      inAddress.muint64_t Element = 0;
      UInt32 ioDataSize = 4;
      OSStatus PropertyData = AudioObjectGetPropertyData(HIDWORD(PortID), &inAddress, 0, 0, &ioDataSize, &outData);
      if (PropertyData)
      {
        OSStatus v6 = PropertyData;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        long long v7 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v8 = (*v7 ? *v7 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            __int16 v38 = 1024;
            int v39 = 1715;
            __int16 v40 = 1024;
            AudioObjectID v41 = v6;
            _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting owning device ID for the ref port", (uint8_t *)&inAddress, 0x18u);
          }
        }
        AudioObjectID v9 = (int *)*((void *)this + 1578);
        if (v9 && (*v4 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v9, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1715, "UpdateHardwareOutputSafetyOffsets", "error %d getting owning device ID for the ref port", v6);
        }
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v10 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        AudioObjectID v11 = (*v10 ? *v10 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          inAddress.mSelector = 136315650;
          *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          __int16 v38 = 1024;
          int v39 = 1717;
          __int16 v40 = 1024;
          AudioObjectID v41 = outData;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref physical dev ID = %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      __int16 v12 = (AudioObjectID *)((char *)this + 1176);
      double v13 = (int *)*((void *)this + 1578);
      if (v13 && (*v4 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v13, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1717, "UpdateHardwareOutputSafetyOffsets", "ref physical dev ID = %u", outData);
      }
      *(void *)&inAddress.mSelector = 0x6F75747073616674;
      inAddress.muint64_t Element = 0;
      UInt32 ioDataSize = 4;
      OSStatus v14 = AudioObjectGetPropertyData(outData, &inAddress, 0, 0, &ioDataSize, (char *)this + 1176);
      if (v14)
      {
        OSStatus v15 = v14;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v16 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          UInt32 v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            inAddress.mSelector = 136315650;
            *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
            __int16 v38 = 1024;
            int v39 = 1720;
            __int16 v40 = 1024;
            AudioObjectID v41 = v15;
            _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting physical output device safety offset", (uint8_t *)&inAddress, 0x18u);
          }
        }
        uint64_t v18 = (int *)*((void *)this + 1578);
        if (v18 && (*v4 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1)
          {
            double v32 = (int *)*((void *)this + 1578);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            uint64_t v18 = v32;
          }
          CALegacyLog::log(v18, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1720, "UpdateHardwareOutputSafetyOffsets", "error %d getting physical output device safety offset", v15);
        }
      }
      if (!*((_DWORD *)this + 1129))
      {
        *(void *)&inAddress.mSelector = 0x696E707473616674;
        inAddress.muint64_t Element = 0;
        UInt32 ioDataSize = 4;
        OSStatus v27 = AudioObjectGetPropertyData(outData, &inAddress, 0, 0, &ioDataSize, (char *)this + 1152);
        if (v27)
        {
          OSStatus v28 = v27;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          __int16 v29 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            OSStatus v30 = (*v29 ? *v29 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              inAddress.mSelector = 136315650;
              *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
              __int16 v38 = 1024;
              int v39 = 1724;
              __int16 v40 = 1024;
              AudioObjectID v41 = v28;
              _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting tap stream input safety offset", (uint8_t *)&inAddress, 0x18u);
            }
          }
          UInt32 v31 = (int *)*((void *)this + 1578);
          if (v31 && (*v4 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1)
            {
              __int16 v33 = (int *)*((void *)this + 1578);
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              UInt32 v31 = v33;
            }
            CALegacyLog::log(v31, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1724, "UpdateHardwareOutputSafetyOffsets", "error %d getting tap stream input safety offset", v28);
          }
        }
      }
      (*(void (**)(VoiceProcessorV2 *, void))(*(void *)this + 296))(this, outData);
      *((_DWORD *)this + 295) = *((_DWORD *)this + 294) - v2;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v19 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        int v20 = (*v19 ? *v19 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          AudioObjectID v21 = *v12;
          inAddress.mSelector = 136315650;
          *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          __int16 v38 = 1024;
          int v39 = 1731;
          __int16 v40 = 1024;
          AudioObjectID v41 = v21;
          _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Override aggregate device output safety offset with physical device output safety offset= %u", (uint8_t *)&inAddress, 0x18u);
        }
      }
      OSStatus v22 = (int *)*((void *)this + 1578);
      if (v22 && (*v4 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v22, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1731, "UpdateHardwareOutputSafetyOffsets", "Override aggregate device output safety offset with physical device output safety offset= %u", *v12);
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      UInt32 v23 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        int v24 = (*v23 ? *v23 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectID v25 = *((_DWORD *)this + 295);
          inAddress.mSelector = 136315650;
          *(void *)&inAddress.mScope = "VoiceProcessor_v2.cpp";
          __int16 v38 = 1024;
          int v39 = 1732;
          __int16 v40 = 1024;
          AudioObjectID v41 = v25;
          _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Output safety offset correction= %d", (uint8_t *)&inAddress, 0x18u);
        }
      }
      unint64_t v26 = (int *)*((void *)this + 1578);
      if (v26 && (*v4 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v26, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1732, "UpdateHardwareOutputSafetyOffsets", "Output safety offset correction= %d", *((_DWORD *)this + 295));
      }
    }
  }
}

unsigned char *VoiceProcessorV2::CorrectHardwareOutputSafetyOffsets(unsigned char *this)
{
  if (this[2244]) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)this + 272))();
  }
  return this;
}

uint64_t VoiceProcessorV2::RemovePropertyListenerBlock(int8x8_t *this, unsigned int a2, uint64_t a3)
{
  unsigned int v32 = a2;
  OSStatus v6 = (std::mutex *)&this[333];
  std::mutex::lock((std::mutex *)&this[333]);
  long long v7 = this + 539;
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(&this[539], a2))
  {
    uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&this[539], a2, &v32);
    AudioObjectID v9 = v8;
    uint64_t v10 = v8[3];
    uint64_t v11 = v8[4];
    if (v11 != v10)
    {
      uint64_t v12 = 0;
      unint64_t v13 = (v11 - v10) >> 4;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      OSStatus v14 = (uint64_t *)v8[3];
      while (1)
      {
        uint64_t v15 = *v14;
        v14 += 2;
        if (v15 == a3) {
          break;
        }
        if (v13 == ++v12) {
          goto LABEL_48;
        }
      }
      if ((v12 & 0x80000000) == 0)
      {
        UInt32 v17 = (void *)(v10 + 16 * v12);
        uint64_t v18 = v17 + 2;
        if (v17 + 2 != (void *)v11)
        {
          do
          {
            UInt32 v17 = v18;
            *(v18 - 2) = *v18;
            uint64_t v19 = (const void *)*(v18 - 1);
            if (v19) {
              _Block_release(v19);
            }
            *(v17 - freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
            uint64_t v20 = v17[1];
            if (v20)
            {
              *(v17 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v20;
              v17[1] = 0;
            }
            uint64_t v18 = v17 + 2;
          }
          while (v17 + 2 != (void *)v11);
          uint64_t v11 = v9[4];
        }
        while ((void *)v11 != v17)
        {
          v11 -= 16;
          std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>(v11);
        }
        v9[4] = v17;
        if ((void *)v9[3] == v17)
        {
          AudioObjectID v21 = std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>(&this[539], v32);
          int8x8_t v22 = this[540];
          unint64_t v23 = v21[1];
          uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22);
          v24.i16[0] = vaddlv_u8(v24);
          if (v24.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&v22) {
              v23 %= *(void *)&v22;
            }
          }
          else
          {
            v23 &= *(void *)&v22 - 1;
          }
          AudioObjectID v25 = *(uint64_t **)(*(void *)v7 + 8 * v23);
          do
          {
            unint64_t v26 = v25;
            AudioObjectID v25 = (uint64_t *)*v25;
          }
          while (v25 != v21);
          if (v26 == (uint64_t *)&this[541]) {
            goto LABEL_38;
          }
          unint64_t v27 = v26[1];
          if (v24.u32[0] > 1uLL)
          {
            if (v27 >= *(void *)&v22) {
              v27 %= *(void *)&v22;
            }
          }
          else
          {
            v27 &= *(void *)&v22 - 1;
          }
          if (v27 != v23)
          {
LABEL_38:
            if (!*v21) {
              goto LABEL_39;
            }
            unint64_t v28 = *(void *)(*v21 + 8);
            if (v24.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&v22) {
                v28 %= *(void *)&v22;
              }
            }
            else
            {
              v28 &= *(void *)&v22 - 1;
            }
            if (v28 != v23) {
LABEL_39:
            }
              *(void *)(*(void *)v7 + 8 * v23) = 0;
          }
          uint64_t v29 = *v21;
          if (*v21)
          {
            unint64_t v30 = *(void *)(v29 + 8);
            if (v24.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&v22) {
                v30 %= *(void *)&v22;
              }
            }
            else
            {
              v30 &= *(void *)&v22 - 1;
            }
            if (v30 != v23)
            {
              *(void *)(*(void *)v7 + 8 * v3std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v26;
              uint64_t v29 = *v21;
            }
          }
          uint64_t *v26 = v29;
          *AudioObjectID v21 = 0;
          --*(void *)&this[542];
          std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,void *>>>::operator()[abi:ne180100](1, (void **)v21);
        }
      }
    }
LABEL_48:
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 4294956417;
  }
  std::mutex::unlock(v6);
  return v16;
}

void sub_1BB6087D8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    AudioObjectID v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1BB6089F8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    unint64_t v3 = __p + 3;
    std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    AudioObjectID v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      AudioObjectID v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t VoiceProcessorV2::AddPropertyListenerBlock(uint64_t a1, unsigned int a2, const void *a3, uint64_t *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unsigned int v59 = a2;
  AudioObjectID v9 = (std::mutex *)(a1 + 2664);
  std::mutex::lock((std::mutex *)(a1 + 2664));
  if (a2 != 1885957987)
  {
    uint64_t v13 = 4294956417;
    goto LABEL_87;
  }
  uint64_t v10 = (uint64_t *)(a1 + 4312);
  if (!std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::find<unsigned int>((void *)(a1 + 4312), 0x70696F63u))
  {
    uint64_t v56 = 0;
    aBlocunint64_t k = 0;
    uint64_t v58 = 0;
    *(_DWORD *)AudioObjectPropertyAddress buf = 1885957987;
    *(void *)&buf[16] = 0;
    uint64_t v62 = 0;
    *(void *)&buf[8] = 0;
    unint64_t v11 = *(void *)(a1 + 4320);
    if (v11)
    {
      uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        uint64_t v4 = 1885957987;
        if (v11 <= 0x70696F63) {
          uint64_t v4 = 0x70696F63 % v11;
        }
      }
      else
      {
        uint64_t v4 = (v11 - 1) & 0x70696F63;
      }
      BOOL v14 = *(uint64_t ***)(*v10 + 8 * v4);
      if (v14)
      {
        for (uint64_t i = *v14; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v16 = i[1];
          if (v16 == 1885957987)
          {
            if (*((_DWORD *)i + 4) == 1885957987) {
              goto LABEL_43;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
        }
      }
    }
    size_t v17 = operator new(0x30uLL);
    *size_t v17 = 0;
    v17[1] = 1885957987;
    *((_DWORD *)v17 + 4) = 1885957987;
    v17[4] = 0;
    v17[5] = 0;
    v17[3] = 0;
    *(void *)&buf[16] = 0;
    uint64_t v62 = 0;
    *(void *)&buf[8] = 0;
    float v18 = (float)(unint64_t)(*(void *)(a1 + 4336) + 1);
    float v19 = *(float *)(a1 + 4344);
    if (!v11 || (float)(v19 * (float)v11) < v18)
    {
      BOOL v20 = 1;
      if (v11 >= 3) {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v11);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v21;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>(a1 + 4312, v23);
      unint64_t v11 = *(void *)(a1 + 4320);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v11 <= 0x70696F63) {
          uint64_t v4 = 0x70696F63 % v11;
        }
        else {
          uint64_t v4 = 1885957987;
        }
      }
      else
      {
        uint64_t v4 = (v11 - 1) & 0x70696F63;
      }
    }
    uint64_t v24 = *v10;
    AudioObjectID v25 = *(void **)(*v10 + 8 * v4);
    if (v25)
    {
      *size_t v17 = *v25;
    }
    else
    {
      *size_t v17 = *(void *)(a1 + 4328);
      *(void *)(a1 + 4328) = v17;
      *(void *)(v24 + 8 * v4) = a1 + 4328;
      if (!*v17) {
        goto LABEL_42;
      }
      unint64_t v26 = *(void *)(*v17 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      AudioObjectID v25 = (void *)(*v10 + 8 * v26);
    }
    void *v25 = v17;
LABEL_42:
    ++*(void *)(a1 + 4336);
LABEL_43:
    uint64_t v60 = (void **)&buf[8];
    std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](&v60);
    *(void *)AudioObjectPropertyAddress buf = &v56;
    std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  uint64_t v27 = *(void *)(a1 + 4352) + 1;
  *(void *)(a1 + 4352) = v27;
  uint64_t v56 = v27;
  aBlocunint64_t k = 0;
  if (a3) {
    aBlocunint64_t k = _Block_copy(a3);
  }
  unint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 4312, 0x70696F63u, &v59);
  uint64_t v29 = (void *)v28[4];
  unint64_t v30 = v28[5];
  if ((unint64_t)v29 >= v30)
  {
    uint64_t v32 = v28[3];
    uint64_t v33 = ((uint64_t)v29 - v32) >> 4;
    if ((unint64_t)(v33 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v34 = v30 - v32;
    uint64_t v35 = v34 >> 3;
    if (v34 >> 3 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36)
    {
      if (v36 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      __int16 v37 = operator new(16 * v36);
    }
    else
    {
      __int16 v37 = 0;
    }
    __int16 v38 = (char *)&v37[2 * v36];
    int v39 = std::construct_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo&,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo*>(&v37[2 * v33], &v56);
    UInt32 v31 = v39 + 2;
    __int16 v40 = (char *)v28[3];
    AudioObjectID v41 = (char *)v28[4];
    if (v41 == v40)
    {
      v28[3] = v39;
      v28[4] = v31;
      v28[5] = v38;
      if (!v41) {
        goto LABEL_68;
      }
    }
    else
    {
      unint64_t v42 = 0;
      do
      {
        uint64_t v43 = &v39[v42 / 8];
        *(v43 - 2) = *(void *)&v41[v42 - 16];
        *(v43 - freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
        uint64_t v44 = *(void *)&v41[v42 - 8];
        if (v44)
        {
          *(v43 - freeMatrix(*((_DWORD *)this + 17), this + 1) = v44;
          *(void *)&v41[v42 - 8] = 0;
        }
        v42 -= 16;
      }
      while (&v41[v42] != v40);
      unsigned int v45 = (char *)v28[3];
      v28[3] = &v39[v42 / 8];
      v28[4] = v31;
      v28[5] = v38;
      if (v41 != v45)
      {
        do
        {
          v41 -= 16;
          std::__destroy_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,0>((uint64_t)v41);
        }
        while (v41 != v45);
        AudioObjectID v41 = v45;
      }
      if (!v41) {
        goto LABEL_68;
      }
    }
    operator delete(v41);
LABEL_68:
    uint64_t v27 = v56;
    goto LABEL_69;
  }
  UInt32 v31 = std::construct_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo&,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo*>(v29, &v56)+ 2;
  v28[4] = v31;
LABEL_69:
  v28[4] = v31;
  *a4 = v27;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v46 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    uint64_t v47 = (*v46 ? *v46 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v48 = v59;
      double v49 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 4312, v59, &v59);
      uint64_t v50 = (v49[4] - v49[3]) >> 4;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1098;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v48;
      LOWORD(v62) = 1024;
      *(_DWORD *)((char *)&v62 + 2) = v50;
      _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Successfully added property listener for property ID %d! listener list size: %d", buf, 0x1Eu);
    }
  }
  int v51 = *(int **)(a1 + 12624);
  if (v51 && (*(unsigned char *)(a1 + 15961) || *(unsigned char *)(a1 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v52 = VPLogScope(void)::scope;
    unsigned int v53 = v59;
    __int16 v54 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v10, v59, &v59);
    CALegacyLog::log(v51, 5, v52, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1098, "AddPropertyListenerBlock", "Successfully added property listener for property ID %d! listener list size: %d", v53, (v54[4] - v54[3]) >> 4);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t v13 = 0;
LABEL_87:
  std::mutex::unlock(v9);
  return v13;
}

void sub_1BB609120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo::~VoiceProcessorPropertyListenerBlockInfo((VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo *)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo::~VoiceProcessorPropertyListenerBlockInfo(VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo *this)
{
  int v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    _Block_release(v2);
    *((void *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  }
}

void *std::construct_at[abi:ne180100]<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo&,VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo*>(void *a1, void *a2)
{
  a1[1] = 0;
  unint64_t v3 = (const void *)a2[1];
  *a1 = *a2;
  if (v3) {
    a1[1] = _Block_copy(v3);
  }
  return a1;
}

uint64_t VoiceProcessorV2::AppendReferenceSignal(VoiceProcessorV2 *this, AudioBufferList *a2, AudioTimeStamp *a3)
{
  return VoiceProcessorV2::AppendReferenceSignal(this, a2, a3, 1);
}

uint64_t VoiceProcessorV2::AppendReferenceSignal(VoiceProcessorV2 *this, AudioBufferList *a2, AudioTimeStamp *a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add((atomic_uint *volatile)this + 621, 1u);
  if (!*((_DWORD *)this + 620))
  {
    uint8x8_t v8 = (char *)this + 15961;
    if (a4 == 1)
    {
      if (*((_DWORD *)this + 1129) && !*((unsigned char *)this + 16240)) {
        goto LABEL_41;
      }
    }
    else
    {
      if (a4) {
        goto LABEL_41;
      }
      if (*((_DWORD *)this + 1129) != 1 || *((unsigned char *)this + 16240))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        AudioObjectID v9 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1041;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "internal";
            _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> %s reference signal was not expected!", buf, 0x1Cu);
          }
        }
        unint64_t v11 = (int *)*((void *)this + 1578);
        if (v11 && (*v8 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v11, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1041, "AppendReferenceSignal", "%s reference signal was not expected!", "internal");
        }
        goto LABEL_41;
      }
    }
    unsigned int v12 = *((_DWORD *)this + 3129) + 1;
    *((_DWORD *)this + 3129) = v12;
    if (!*((unsigned char *)this + 476))
    {
      VoiceProcessorV2::LogIOError((uint64_t)this, 11.005, (float)*((unsigned int *)this + 3128), (float)v12, 0.0, "appendreferencesignal: not OK to process");
      goto LABEL_3;
    }
    if (!*v8)
    {
      unsigned int v28 = 0;
      UInt32 v22 = a2->mBuffers[0].mDataByteSize / *((_DWORD *)this + 152);
      uint64_t v5 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 1, v22, *((_DWORD *)this + 123), a2, &v28);
      if (v5) {
        goto LABEL_42;
      }
      if (v28)
      {
        if (*v8 || *((unsigned char *)this + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, v28, a2, a3);
        }
        size_t v23 = (_DWORD *)*((void *)this + 128);
        if (*v23)
        {
          unint64_t v24 = 0;
          AudioObjectID v25 = (void **)(v23 + 4);
          do
          {
            bzero(*v25, *((unsigned int *)v25 - 1));
            ++v24;
            v25 += 2;
          }
          while (v24 < *v23);
        }
      }
      else
      {
        if (*v8 || *((unsigned char *)this + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, *((unsigned int *)this + 123), a2, a3);
        }
        long long v27 = *(_OWORD *)((char *)this + 600);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 584);
        *(_OWORD *)&buf[16] = v27;
        uint64_t v30 = *((void *)this + 77);
        VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 100), a2, v22, *((AudioBufferList **)this + 128), 0);
      }
      goto LABEL_57;
    }
    uint64_t v13 = (VoiceProcessorV2 *)*((void *)this + 1900);
    if (v13)
    {
      VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(v13, a2, (const AudioBufferList *)a3);
      uint64_t v14 = *((void *)this + 1900);
      unsigned int v28 = 0;
      unsigned int v15 = *(_DWORD *)(v14 + 12) / *((_DWORD *)this + 152);
      uint64_t v5 = VoiceProcessorV2::FrontEndBlockSizeCheck(this, 1, v15, *((_DWORD *)this + 123), (const AudioBufferList *)v14, &v28);
      if (v5) {
        goto LABEL_42;
      }
      uint64_t v16 = v28;
      if (*v8)
      {
        unsigned int v17 = v28;
        if (!v28) {
          unsigned int v17 = *((_DWORD *)this + 123);
        }
        VoiceProcessorV2::InjectionFilesReadSignal(this, 3, v17, (AudioBufferList *)v14);
      }
      if (v16)
      {
        if (*v8 || *((unsigned char *)this + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, v16, (const AudioBufferList *)v14, a3);
        }
        float v18 = (_DWORD *)*((void *)this + 128);
        if (*v18)
        {
          unint64_t v19 = 0;
          BOOL v20 = (void **)(v18 + 4);
          do
          {
            bzero(*v20, *((unsigned int *)v20 - 1));
            ++v19;
            v20 += 2;
          }
          while (v19 < *v18);
        }
      }
      else
      {
        if (*v8 || *((unsigned char *)this + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0, *((unsigned int *)this + 123), (const AudioBufferList *)v14, a3);
        }
        long long v26 = *(_OWORD *)((char *)this + 600);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 584);
        *(_OWORD *)&buf[16] = v26;
        uint64_t v30 = *((void *)this + 77);
        VoiceProcessorV2::FrontEndFormatConverter(this, (const CAStreamBasicDescription *)buf, *((_DWORD *)this + 100), (const AudioBufferList *)v14, v15, *((AudioBufferList **)this + 128), 0);
      }
LABEL_57:
      VoiceProcessorV2::FrontEndRefTimeStampHandler(this, &a3->mSampleTime, (const AudioTimeStamp *)*((unsigned int *)this + 123));
      goto LABEL_42;
    }
LABEL_41:
    uint64_t v5 = 0;
    goto LABEL_42;
  }
  VoiceProcessorV2::LogIOError((uint64_t)this, 11.006, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "appendreferencesignal: failed to acquire uplink reader lock");
LABEL_3:
  uint64_t v5 = 4294956433;
LABEL_42:
  atomic_fetch_add((atomic_uint *volatile)this + 621, 0xFFFFFFFF);
  return v5;
}

void sub_1BB6096E0(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::FrontEndBlockSizeCheck(VoiceProcessorV2 *this, int a2, unsigned int a3, unsigned int a4, const AudioBufferList *a5, unsigned int *a6)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (char *)this + 15881;
  if (a2) {
    uint8x8_t v8 = "ref";
  }
  else {
    uint8x8_t v8 = "mic";
  }
  if (a2) {
    float v9 = 12.0;
  }
  else {
    float v9 = 22.0;
  }
  uint64_t v10 = (const AudioStreamBasicDescription *)((char *)this + 584);
  unint64_t v11 = (const AudioStreamBasicDescription *)((char *)this + 624);
  if (a2) {
    unsigned int v12 = (char *)this + 584;
  }
  else {
    unsigned int v12 = (char *)this + 624;
  }
  if (a3)
  {
    uint64_t v13 = a5;
    unint64_t v85 = v8;
    if (a3 == a4 && *((_DWORD *)v12 + 6) * a3 <= a5->mBuffers[0].mDataByteSize)
    {
      if (*v7 && (a2 & 1) != 0 || (uint64_t v24 = 0, *((unsigned char *)this + 15882)) && (a2 & 1) == 0)
      {
        if (a2)
        {
          char *v7 = 0;
          uint64_t v38 = mach_absolute_time();
          uint64_t v39 = 15888;
        }
        else
        {
          *((unsigned char *)this + 15882) = 0;
          uint64_t v38 = mach_absolute_time();
          uint64_t v39 = 15896;
        }
        uint64_t v46 = v8;
        double v47 = (double)(v38 - *(void *)((char *)this + v39)) * 0.0000000416666667;
        VoiceProcessorV2::LogIOError((uint64_t)this, v9 + 0.002, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), (float)a3, "append signal (%s): <block size no longer mismatched>", v8);
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unsigned int v48 = (void *)VPLogScope(void)::scope;
        if (v47 <= 1.0)
        {
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            __int16 v54 = (*v48 ? *v48 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
              __int16 v89 = 1024;
              int v90 = 1334;
              __int16 v91 = 2048;
              double v92 = v47;
              _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", buf, 0x1Cu);
            }
          }
          AudioObjectID v55 = (int *)*((void *)this + 1578);
          if (v55 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v55, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1334, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK WARNING: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v47);
            uint64_t v46 = v85;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v56 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
          {
            uint64_t v57 = (*v56 ? *v56 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
              __int16 v89 = 1024;
              int v90 = 1335;
              __int16 v91 = 2080;
              double v92 = *(double *)&v46;
              __int16 v93 = 1024;
              unsigned int v94 = a3;
              __int16 v95 = 1024;
              unsigned int v96 = a3;
              _os_log_impl(&dword_1BB0CE000, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", buf, 0x28u);
            }
          }
          uint64_t v58 = (int *)*((void *)this + 1578);
          if (v58 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v58, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1335, "FrontEndBlockSizeCheck", "append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", v46, a3, a3);
          }
        }
        else
        {
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            double v49 = (*v48 ? *v48 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
              __int16 v89 = 1024;
              int v90 = 1329;
              __int16 v91 = 2048;
              double v92 = v47;
              _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", buf, 0x1Cu);
            }
          }
          uint64_t v50 = (int *)*((void *)this + 1578);
          if (v50 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v50, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1329, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG CORRECTED after %.6f seconds *****\n", v47);
            uint64_t v46 = v85;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v51 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            uint64_t v52 = (*v51 ? *v51 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
              __int16 v89 = 1024;
              int v90 = 1330;
              __int16 v91 = 2080;
              double v92 = *(double *)&v46;
              __int16 v93 = 1024;
              unsigned int v94 = a3;
              __int16 v95 = 1024;
              unsigned int v96 = a3;
              _os_log_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", buf, 0x28u);
            }
          }
          unsigned int v53 = (int *)*((void *)this + 1578);
          if (v53 && (v7[80] || v7[81]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v53, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1330, "FrontEndBlockSizeCheck", "append signal (%s): <block size no longer mismatched between expected and actual> num frames received = %u. hwio buff std::string::size_type size = %u\n", v46, a3, a3);
          }
        }
        return 0;
      }
    }
    else if (*v7 || (a2 & 1) == 0) && (*((unsigned char *)this + 15882) || (a2))
    {
      if (*((unsigned char *)this + 15882)) {
        char v40 = a2;
      }
      else {
        char v40 = 1;
      }
      uint64_t v24 = 1718772077;
      char v41 = a2;
      if (!*v7) {
        char v41 = 0;
      }
      if ((v41 & 1) != 0 || (v40 & 1) == 0)
      {
        unsigned int v84 = a4;
        uint64_t v42 = mach_absolute_time();
        if (a2)
        {
          double v43 = (double)(v42 - *((void *)this + 1986)) * 0.0000000416666667;
          double v44 = *((double *)this + 1989);
          if (v43 <= v44) {
            return v24;
          }
          uint64_t v45 = 15912;
        }
        else
        {
          double v43 = (double)(v42 - *((void *)this + 1987)) * 0.0000000416666667;
          double v44 = *((double *)this + 1990);
          if (v43 <= v44) {
            return v24;
          }
          uint64_t v45 = 15920;
        }
        *(double *)((char *)this + v45) = v44 + 10.0;
        VoiceProcessorV2::LogIOError((uint64_t)this, v9 + 0.002, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), (float)a3, "append signal (%s): <block size mismatch>", v8);
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v60 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v61 = (*v60 ? *v60 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
            __int16 v89 = 1024;
            int v90 = 1298;
            __int16 v91 = 2048;
            double v92 = v43;
            _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG for over %.6f seconds *****\n", buf, 0x1Cu);
          }
        }
        uint64_t v62 = (int *)*((void *)this + 1578);
        if (v62 && (v7[80] || v7[81]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v62, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1298, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK SERIOUS ERROR: BAD BLOCK CONFIG for over %.6f seconds *****\n", v43);
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v63 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          uint64_t v64 = (*v63 ? *v63 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            *(void *)unint64_t v81 = v13;
            UInt32 mDataByteSize = v13->mBuffers[0].mDataByteSize;
            int v77 = *((_DWORD *)this + 123);
            int v79 = *((_DWORD *)this + 124);
            CAFormatter::CAFormatter((CAFormatter *)&v87, v11);
            unint64_t v66 = v87;
            CAFormatter::CAFormatter((CAFormatter *)&v86, v10);
            int v67 = *((_DWORD *)this + 3128);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136317698;
            *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
            __int16 v89 = 1024;
            int v90 = 1303;
            __int16 v91 = 2080;
            double v92 = *(double *)&v85;
            __int16 v93 = 1024;
            unsigned int v94 = a3;
            __int16 v95 = 1024;
            unsigned int v96 = mDataByteSize;
            __int16 v97 = 1024;
            *(_DWORD *)long long v98 = v84;
            *(_WORD *)&v98[4] = 1024;
            *(_DWORD *)&v98[6] = v77;
            __int16 v99 = 1024;
            int v100 = v79;
            __int16 v101 = 2080;
            CFTypeRef v102 = v66;
            __int16 v103 = 2080;
            uint64_t v104 = v86;
            __int16 v105 = 1024;
            int v106 = v67;
            _os_log_impl(&dword_1BB0CE000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> append signal (%s): <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t hwio buff std::string::size_type size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff std::string::size_type size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", buf, 0x54u);
            if (v86) {
              free(v86);
            }
            uint64_t v13 = *(const AudioBufferList **)v81;
            if (v87) {
              free(v87);
            }
          }
        }
        unint64_t v68 = (int *)*((void *)this + 1578);
        if (v68)
        {
          if (v7[80] || v7[81])
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v82 = VPLogScope(void)::scope;
            UInt32 v69 = v13->mBuffers[0].mDataByteSize;
            int v70 = *((_DWORD *)this + 123);
            int v71 = *((_DWORD *)this + 124);
            CAFormatter::CAFormatter((CAFormatter *)buf, v11);
            int v72 = *(const char **)buf;
            CAFormatter::CAFormatter((CAFormatter *)&v87, v10);
            CALegacyLog::log(v68, 1, v82, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1303, "FrontEndBlockSizeCheck", "append signal (%s): <block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t hwio buff std::string::size_type size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff std::string::size_type size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", v85, a3, v69, v84, v70, v71, v72,
              (const char *)v87,
              *((_DWORD *)this + 3128));
            goto LABEL_69;
          }
        }
      }
    }
    else
    {
      unsigned int v83 = a4;
      if (a2)
      {
        char *v7 = 1;
        *((void *)this + 1986) = mach_absolute_time();
        uint64_t v16 = 15912;
      }
      else
      {
        *((unsigned char *)this + 15882) = 1;
        *((void *)this + 1987) = mach_absolute_time();
        uint64_t v16 = 15920;
      }
      *(void *)((char *)this + v16) = 0x3FF0000000000000;
      VoiceProcessorV2::LogIOError((uint64_t)this, v9 + 0.002, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), (float)a3, "append signal (%s): <block size mismatch>", v8);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      AudioObjectID v25 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        long long v26 = (*v25 ? *v25 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
          __int16 v89 = 1024;
          int v90 = 1264;
          _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> CoreAudio: ***** VP BLOCK WARNING: TRANSIENT INCORRECT BLOCK CONFIG", buf, 0x12u);
        }
      }
      long long v27 = (int *)*((void *)this + 1578);
      if (v27 && (v7[80] || v7[81]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v27, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1264, "FrontEndBlockSizeCheck", "CoreAudio: ***** VP BLOCK WARNING: TRANSIENT INCORRECT BLOCK CONFIG");
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unsigned int v28 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
      {
        uint64_t v29 = (*v28 ? *v28 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          UInt32 v76 = v13->mBuffers[0].mDataByteSize;
          int v78 = *((_DWORD *)this + 123);
          int v80 = *((_DWORD *)this + 124);
          CAFormatter::CAFormatter((CAFormatter *)&v87, v11);
          uint64_t v30 = v87;
          CAFormatter::CAFormatter((CAFormatter *)&v86, v10);
          int v31 = *((_DWORD *)this + 3128);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136317698;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
          __int16 v89 = 1024;
          int v90 = 1269;
          __int16 v91 = 2080;
          double v92 = *(double *)&v8;
          __int16 v93 = 1024;
          unsigned int v94 = a3;
          __int16 v95 = 1024;
          unsigned int v96 = v76;
          __int16 v97 = 1024;
          *(_DWORD *)long long v98 = v83;
          *(_WORD *)&v98[4] = 1024;
          *(_DWORD *)&v98[6] = v78;
          __int16 v99 = 1024;
          int v100 = v80;
          __int16 v101 = 2080;
          CFTypeRef v102 = v30;
          __int16 v103 = 2080;
          uint64_t v104 = v86;
          __int16 v105 = 1024;
          int v106 = v31;
          _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> warning: append signal (%s): <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t hwio buff std::string::size_type size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff std::string::size_type size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", buf, 0x54u);
          if (v86) {
            free(v86);
          }
          if (v87) {
            free(v87);
          }
        }
      }
      uint64_t v24 = 1718772077;
      uint64_t v32 = (int *)*((void *)this + 1578);
      if (v32 && (v7[80] || v7[81]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v33 = VPLogScope(void)::scope;
        UInt32 v34 = v13->mBuffers[0].mDataByteSize;
        int v35 = *((_DWORD *)this + 123);
        int v36 = *((_DWORD *)this + 124);
        CAFormatter::CAFormatter((CAFormatter *)buf, v11);
        __int16 v37 = *(const char **)buf;
        CAFormatter::CAFormatter((CAFormatter *)&v87, v10);
        CALegacyLog::log(v32, 2, v33, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1269, "FrontEndBlockSizeCheck", "warning: append signal (%s): <transient block size mismatch btwn expected and actual> num frames received  = %u (data byte std::string::size_type size = %u).\t hwio buff std::string::size_type size = %u\n\t\thwio ref buff size  = %u.\t hwio mic buff std::string::size_type size = %u\n\tmic asbd = %s, ref asbd = %s\n\t\t process callcount = %u\n", v85, a3, v34, v83, v35, v36, v37,
          (const char *)v87,
          *((_DWORD *)this + 3128));
LABEL_69:
        if (v87) {
          free(v87);
        }
        if (*(void *)buf) {
          free(*(void **)buf);
        }
      }
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1)
    {
      unsigned int v73 = a4;
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      a4 = v73;
    }
    if (VPLogScope(void)::scope && *(int *)(VPLogScope(void)::scope + 8) >= 6)
    {
      float v18 = *(void *)VPLogScope(void)::scope ? *(NSObject **)VPLogScope(void)::scope : MEMORY[0x1E4F14500];
      unsigned int v19 = a4;
      BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
      a4 = v19;
      if (v20)
      {
        uint64_t v21 = *((unsigned int *)this + 3128);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
        __int16 v89 = 1024;
        int v90 = 1243;
        __int16 v91 = 2080;
        double v92 = *(double *)&v8;
        __int16 v93 = 1024;
        unsigned int v94 = 0;
        __int16 v95 = 1024;
        unsigned int v96 = v19;
        __int16 v97 = 2048;
        *(void *)long long v98 = v21;
        _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> append signal (%s): <silence optimization, generating zeroes> num frames received = %u.\t hwio buff std::string::size_type size = %u\t process callcount = %lu", buf, 0x32u);
        a4 = v19;
      }
    }
    UInt32 v22 = (int *)*((void *)this + 1578);
    if (v22 && (v7[80] || v7[81]))
    {
      if (VPLogScope(void)::once != -1)
      {
        unsigned int v74 = a4;
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        a4 = v74;
      }
      uint64_t v75 = *((unsigned int *)this + 3128);
      unsigned int v23 = a4;
      CALegacyLog::log(v22, 6, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1243, "FrontEndBlockSizeCheck", "append signal (%s): <silence optimization, generating zeroes> num frames received = %u.\t hwio buff std::string::size_type size = %u\t process callcount = %lu", v8, 0, a4, v75);
      a4 = v23;
    }
    uint64_t v24 = 0;
    *a6 = a4;
  }
  return v24;
}

void sub_1BB60A6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (a24) {
    free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV2::FrontEndFormatConverter(VoiceProcessorV2 *this, const CAStreamBasicDescription *a2, unsigned int a3, const AudioBufferList *a4, unsigned int a5, AudioBufferList *a6, int a7)
{
  unint64_t v7 = a6;
  unsigned int v8 = a5;
  long long v88 = a2;
  __int16 v89 = this;
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  int v90 = a7;
  if (a7) {
    UInt32 v11 = 5;
  }
  else {
    UInt32 v11 = 8;
  }
  if (a4->mNumberBuffers != 1)
  {
    unsigned int v84 = &v81;
    vDSP_Length v86 = a5;
    size_t v16 = 4 * a5;
    MEMORY[0x1F4188790](this);
    unsigned int v17 = (char *)&v81 - ((v16 + 15) & 0x7FFFFFFF0);
    MEMORY[0x1F4188790](v18);
    BOOL v20 = (float *)((char *)&v81 - v19);
    bzero(v17, v16);
    unint64_t v85 = v20;
    bzero(v20, v16);
    uint64_t v13 = v89;
    unint64_t mNumberBuffers = a4->mNumberBuffers;
    if (!mNumberBuffers)
    {
LABEL_25:
      if (!a3)
      {
        *(float *)uint64_t __B = 1.0 / (float)a4->mNumberBuffers;
        vDSP_vsmul(v85, 1, (const float *)__B, (float *)a6->mBuffers[0].mData, 1, v86);
        uint64_t v13 = v89;
      }
      unint64_t v7 = a6;
      unsigned int v8 = a5;
      goto LABEL_54;
    }
    uint64_t v22 = 0;
    UInt32 v23 = 0;
    LODWORD(p_mData) = ((2 * a3) | (a3 >> 1)) & 3;
    while (1)
    {
      if (v90 && **((_DWORD **)v13 + 295) == 1886216809 && (*((_DWORD *)v13 + 18) - 30) <= 7)
      {
        if (p_mData && ((1 << v22) & p_mData) == 0) {
          goto LABEL_24;
        }
      }
      else if (a3 && ((1 << v22) & a3) == 0)
      {
        goto LABEL_24;
      }
      if (v23 >= a6->mNumberBuffers)
      {
        if (VPLogScope(void)::once != -1)
        {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          uint64_t v13 = v89;
        }
        uint64_t v60 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope)
        {
          int v61 = CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0);
          uint64_t v13 = v89;
          if (v61)
          {
            uint64_t v62 = (*v60 ? *v60 : MEMORY[0x1E4F14500]);
            BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
            uint64_t v13 = v89;
            if (v63)
            {
              UInt32 v64 = a6->mNumberBuffers;
              *(_DWORD *)uint64_t __B = 136315906;
              *(void *)&__B[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&__B[12] = 1024;
              *(_DWORD *)&__B[14] = 1469;
              *(_WORD *)&__B[18] = 1024;
              *(_DWORD *)&__B[20] = v23;
              __int16 v93 = 1024;
              UInt32 v94 = v64;
              _os_log_impl(&dword_1BB0CE000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d frontendformatconverter : error dst channel index (%d) goes beyond number of channels in out ABL (%d)", __B, 0x1Eu);
              uint64_t v13 = v89;
            }
          }
        }
        goto LABEL_25;
      }
      ConvertBufferToFloat32(v88, &a4->mBuffers[v22], 0, (float *)v17, a5);
      if (a3)
      {
        memcpy(a6->mBuffers[v23].mData, v17, v16);
      }
      else if (a5)
      {
        uint64_t v24 = v85;
        vDSP_Length v25 = v86;
        long long v26 = (float *)((char *)&v81 - ((v16 + 15) & 0x7FFFFFFF0));
        do
        {
          float v27 = *v26++;
          *uint64_t v24 = *v24 + v27;
          ++v24;
          --v25;
        }
        while (v25);
      }
      v23 += a3 != 0;
      unint64_t mNumberBuffers = a4->mNumberBuffers;
      uint64_t v13 = v89;
LABEL_24:
      if (++v22 >= mNumberBuffers) {
        goto LABEL_25;
      }
    }
  }
  mBuffers = a4->mBuffers;
  if (a4->mBuffers[0].mNumberChannels == 1)
  {
    ConvertBufferToFloat32(v88, mBuffers, 0, (float *)a6->mBuffers[0].mData, a5);
    uint64_t v13 = v89;
    goto LABEL_54;
  }
  if (a4->mBuffers[0].mNumberChannels > v11)
  {
    uint64_t v28 = 593717363;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t __B = 136315394;
      *(void *)&__B[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&__B[12] = 1024;
      *(_DWORD *)&__B[14] = 1442;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  appendsignal: ERROR too many interleaved channels?! data disagrees with ASBD set during InitializeHWInput", __B, 0x12u);
    }
    return v28;
  }
  uint64_t v81 = (uint64_t)&v81;
  vDSP_Length v83 = a5;
  uint64_t v30 = (const float *)(4 * a5);
  MEMORY[0x1F4188790](this);
  int v31 = (char *)&v81 - (((unint64_t)v30 + 15) & 0x7FFFFFFF0);
  MEMORY[0x1F4188790](v32);
  UInt32 v34 = (float *)((char *)&v81 - v33);
  bzero(v31, (size_t)v30);
  uint64_t v82 = v34;
  unint64_t v85 = (float *)v30;
  bzero(v34, (size_t)v30);
  UInt32 mNumberChannels = mBuffers->mNumberChannels;
  if (!mBuffers->mNumberChannels) {
    goto LABEL_51;
  }
  UInt32 v36 = 0;
  unsigned int v37 = 0;
  LODWORD(v86) = a3 != 0;
  LODWORD(v84) = ((2 * a3) | (a3 >> 1)) & 3;
  p_mData = &v7->mBuffers[0].mData;
  while (1)
  {
    int v38 = 1 << v37;
    if (!v90 || **((_DWORD **)v89 + 295) != 1886216809 || (*((_DWORD *)v89 + 18) - 30) > 7) {
      break;
    }
    if (!v84 || (v38 & v84) != 0) {
      goto LABEL_41;
    }
LABEL_50:
    if (++v37 >= mNumberChannels) {
      goto LABEL_51;
    }
  }
  if (a3 && (v38 & a3) == 0) {
    goto LABEL_50;
  }
LABEL_41:
  if (v36 < v7->mNumberBuffers)
  {
    uint64_t v39 = v7;
    char v40 = &v7->mBuffers[v36].mData;
    if (!a3) {
      char v40 = p_mData;
    }
    char v41 = *v40;
    ConvertBufferToFloat32(v88, mBuffers, v37, (float *)v31, a5);
    if (a3)
    {
      memcpy(v41, v31, (size_t)v85);
      unint64_t v7 = v39;
    }
    else
    {
      unint64_t v7 = v39;
      if (a5)
      {
        uint64_t v42 = v82;
        vDSP_Length v43 = v83;
        double v44 = (float *)v31;
        do
        {
          float v45 = *v44++;
          *uint64_t v42 = *v42 + v45;
          ++v42;
          --v43;
        }
        while (v43);
      }
    }
    v36 += v86;
    UInt32 mNumberChannels = mBuffers->mNumberChannels;
    goto LABEL_50;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int v78 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    int v79 = (*v78 ? *v78 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      UInt32 v80 = v7->mNumberBuffers;
      *(_DWORD *)uint64_t __B = 136315906;
      *(void *)&__B[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&__B[12] = 1024;
      *(_DWORD *)&__B[14] = 1411;
      *(_WORD *)&__B[18] = 1024;
      *(_DWORD *)&__B[20] = v36;
      __int16 v93 = 1024;
      UInt32 v94 = v80;
      _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d frontendformatconverter : error dst channel index (%d) goes beyond number of channels in out ABL (%d)", __B, 0x1Eu);
    }
  }
LABEL_51:
  uint64_t v13 = v89;
  if (!a3)
  {
    *(float *)uint64_t __B = 1.0 / (float)mBuffers->mNumberChannels;
    vDSP_vsmul(v82, 1, (const float *)__B, (float *)v7->mBuffers[0].mData, 1, v83);
    uint64_t v13 = v89;
  }
  unsigned int v8 = a5;
LABEL_54:
  if (v90)
  {
    if (**((_DWORD **)v13 + 295) == 1886216809)
    {
      uint64_t v28 = 0;
      if ((*((_DWORD *)v13 + 18) - 30) <= 7 && v7->mNumberBuffers == 2)
      {
        uint64_t v28 = 0;
        AudioBuffer v46 = v7->mBuffers[0];
        v7->mBuffers[0] = *(AudioBuffer *)&v7[1].mNumberBuffers;
        *(AudioBuffer *)&v7[1].unint64_t mNumberBuffers = v46;
      }
      return v28;
    }
    return 0;
  }
  if (!*((unsigned char *)v13 + 2064)) {
    return 0;
  }
  double v47 = (VoiceProcessorV2 *)((char *)v13 + 2000);
  if (*((_DWORD *)v13 + 576) != *((_DWORD *)v13 + 578))
  {
    (*(void (**)(VoiceProcessorV2 *, uint64_t, uint64_t))(*(void *)v13 + 472))(v13, (uint64_t)v13 + 2000, (uint64_t)v13 + 2072);
    uint64_t v13 = v89;
  }
  if (*((unsigned char *)v13 + 2244) && *((_DWORD *)v13 + 18) == 22)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    long long v91 = xmmword_1BB87B8F0;
    *(_OWORD *)&__B[8] = 0uLL;
    *(void *)uint64_t __B = &__B[8];
    uint64_t v50 = &__B[8];
    while (1)
    {
      int v51 = &__B[8];
      if (v50 == &__B[8]) {
        goto LABEL_71;
      }
      uint64_t v52 = v48;
      unsigned int v53 = &__B[8];
      if (v48)
      {
        do
        {
          int v51 = (unsigned char *)v52;
          uint64_t v52 = *(void *)(v52 + 8);
        }
        while (v52);
      }
      else
      {
        do
        {
          int v51 = (unsigned char *)*((void *)v53 + 2);
          BOOL v54 = *(void *)v51 == (void)v53;
          unsigned int v53 = v51;
        }
        while (v54);
      }
      unsigned int v55 = *(_DWORD *)&__B[4 * v49 - 16];
      if (*((_DWORD *)v51 + 7) < v55)
      {
LABEL_71:
        uint64_t v56 = v48 ? v51 : &__B[8];
        uint64_t v57 = v48 ? v51 + 8 : &__B[8];
      }
      else
      {
        uint64_t v56 = &__B[8];
        uint64_t v57 = &__B[8];
        if (v48)
        {
          uint64_t v57 = &__B[8];
          while (1)
          {
            while (1)
            {
              uint64_t v56 = (unsigned char *)v48;
              unsigned int v59 = *(_DWORD *)(v48 + 28);
              if (v55 >= v59) {
                break;
              }
              uint64_t v48 = *(void *)v56;
              uint64_t v57 = v56;
              if (!*(void *)v56) {
                goto LABEL_78;
              }
            }
            if (v59 >= v55) {
              break;
            }
            uint64_t v57 = v56 + 8;
            uint64_t v48 = *((void *)v56 + 1);
            if (!v48) {
              goto LABEL_78;
            }
          }
        }
      }
      if (!*(void *)v57)
      {
LABEL_78:
        uint64_t v58 = operator new(0x20uLL);
        v58[7] = *(_DWORD *)&__B[4 * v49 - 16];
        *(void *)uint64_t v58 = 0;
        *((void *)v58 + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
        *((void *)v58 + 2) = v56;
        *(void *)uint64_t v57 = v58;
        if (**(void **)__B)
        {
          *(void *)uint64_t __B = **(void **)__B;
          uint64_t v58 = *(_DWORD **)v57;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&__B[8], (uint64_t *)v58);
        ++*(void *)&__B[16];
      }
      if (++v49 == 4) {
        break;
      }
      uint64_t v50 = *(unsigned char **)__B;
      uint64_t v48 = *(void *)&__B[8];
    }
    unint64_t v65 = v7->mNumberBuffers;
    if (v65)
    {
      unint64_t v66 = 0;
      int v67 = v89;
      do
      {
        unint64_t v68 = *(uint64_t **)&__B[8];
        if (*(void *)&__B[8])
        {
          UInt32 v69 = &__B[8];
          do
          {
            int v70 = v68;
            int v71 = v69;
            unint64_t v72 = *((unsigned int *)v68 + 7);
            if (v66 <= v72) {
              UInt32 v69 = v68;
            }
            else {
              ++v68;
            }
            unint64_t v68 = (uint64_t *)*v68;
          }
          while (v68);
          if (v69 != &__B[8])
          {
            if (v66 > v72) {
              int v70 = v71;
            }
            if (v66 >= *((unsigned int *)v70 + 7))
            {
              unsigned int v73 = *(void **)(*((void *)v67 + 207) + 16 * v66 + 16);
              mData = (char *)v7->mBuffers[v66].mData;
              memcpy(*((void **)v67 + 208), &mData[4 * (v8 - *((_DWORD *)v67 + 418))], 4 * *((unsigned int *)v67 + 418));
              memmove(&mData[4 * *((unsigned int *)v67 + 418)], mData, 4 * (v8 - *((_DWORD *)v67 + 418)));
              memcpy(mData, v73, 4 * *((unsigned int *)v67 + 418));
              memcpy(v73, *((const void **)v67 + 208), 4 * *((unsigned int *)v67 + 418));
              unint64_t v65 = v7->mNumberBuffers;
            }
          }
        }
        ++v66;
      }
      while (v66 < v65);
    }
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)&__B[8]);
  }
  if (vp::utility::Audio_Buffer_Mixer::mix(v47, v7, v7, v8)) {
    return 0;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v28 = VPLogScope(void)::scope;
  if (VPLogScope(void)::scope)
  {
    if (CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v75 = *(void *)v28 ? *(NSObject **)v28 : MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        UInt32 v76 = v7->mNumberBuffers;
        *(_DWORD *)uint64_t __B = 136315650;
        *(void *)&__B[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&__B[12] = 1024;
        *(_DWORD *)&__B[14] = 1545;
        *(_WORD *)&__B[18] = 1024;
        *(_DWORD *)&__B[20] = v76;
        _os_log_impl(&dword_1BB0CE000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to downmix %u reference signals", __B, 0x18u);
      }
    }
    return 0;
  }
  return v28;
}

void sub_1BB60B1B4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

double VoiceProcessorV2::FrontEndRefTimeStampHandler(VoiceProcessorV2 *this, double *a2, const AudioTimeStamp *a3)
{
  unsigned int v3 = a3;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (char *)this + 15961;
  double v7 = *a2;
  if (!*((unsigned char *)this + 1688))
  {
    *((unsigned char *)this + 1688) = 1;
    *((double *)this + 212) = v7;
    if (*v6 || *((unsigned char *)this + 15962))
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, 0.0, v7, 0);
      double v7 = *a2;
    }
  }
  double v8 = *((double *)this + 212);
  if (v8 != v7)
  {
    if (*v6 || v6[1])
    {
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v8, v7, 0);
      double v7 = *a2;
      double v8 = *((double *)this + 212);
    }
    if (v7 < v8)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      float v9 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *((void *)this + 212);
          double v12 = *a2;
          uint64_t v13 = *((void *)a2 + 1);
          uint64_t v14 = *((void *)a2 + 2);
          int v15 = *((_DWORD *)a2 + 14);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
          BOOL v20 = "VoiceProcessor_v2.cpp";
          __int16 v21 = 1024;
          int v22 = 1575;
          __int16 v23 = 2048;
          uint64_t v24 = v11;
          __int16 v25 = 2048;
          double v26 = v12;
          __int16 v27 = 2048;
          uint64_t v28 = v13;
          __int16 v29 = 2048;
          uint64_t v30 = v14;
          __int16 v31 = 1024;
          int v32 = v15;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ref sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", buf, 0x40u);
        }
      }
      size_t v16 = (int *)*((void *)this + 1578);
      if (v16 && (*v6 || v6[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v16, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1575, "FrontEndRefTimeStampHandler", "ref sample time jumped backwards, expected sample time: %.2lf, input sample time: %.2lf, input host time: %lld, input rate scalar: %.2lf, input flag: %d", *((double *)this + 212), *a2, *((void *)a2 + 1), a2[2], *((_DWORD *)a2 + 14));
      }
      VoiceProcessorV2::LogIOError((uint64_t)this, 12.008, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), 0.0, "ref sample time jumped backwards");
      double v7 = *a2;
    }
  }
  int v17 = CADeprecated::AudioRingBuffer::Store(*((CADeprecated::AudioRingBuffer **)this + 150), *((const AudioBufferList **)this + 128), v3, (uint64_t)v7);
  if (v17) {
    VoiceProcessorV2::LogIOError((uint64_t)this, 12.001, (float)*((unsigned int *)this + 3128), (float)*((unsigned int *)this + 3129), (float)v17, "frontendreftshandler: ERROR: Ring Buffer error! %d", v17);
  }
  double result = *a2 + (double)v3;
  *((double *)this + 212) = result;
  return result;
}

void ConvertBufferToFloat32(const CAStreamBasicDescription *a1, const AudioBuffer *a2, unsigned int a3, float *a4, unsigned int a5)
{
  unint64_t v6 = a4;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  mData = (char *)a2->mData;
  if (mData) {
    BOOL v8 = a2->mDataByteSize == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    bzero(a4, 4 * a5);
  }
  else
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    uint64_t v12 = CAStreamBasicDescription::IdentifyCommonPCMFormat(a1, (int *)buf, 0);
    if (v12 && *(_DWORD *)buf == 2)
    {
      MEMORY[0x1F4188790](v12);
      uint64_t v14 = &buf[-v13];
      if (a5)
      {
        uint64_t v15 = a5;
        size_t v16 = (char *)a2->mData + 2 * a3;
        uint64_t v17 = 2 * a2->mNumberChannels;
        uint64_t v18 = v14;
        do
        {
          *(_WORD *)uint64_t v18 = *v16;
          v18 += 2;
          size_t v16 = (_WORD *)((char *)v16 + v17);
          --v15;
        }
        while (v15);
      }
      NativeInt16ToFloat32Scaled_ARM();
    }
    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t v19 = CAStreamBasicDescription::IdentifyCommonPCMFormat(a1, (int *)buf, 0);
      if (v19 && *(_DWORD *)buf == 3)
      {
        MEMORY[0x1F4188790](v19);
        __int16 v21 = &buf[-v20];
        if (a5)
        {
          uint64_t v22 = a5;
          __int16 v23 = (char *)a2->mData + 4 * a3;
          uint64_t v24 = 4 * a2->mNumberChannels;
          __int16 v25 = v21;
          do
          {
            *(_DWORD *)__int16 v25 = *v23;
            v25 += 4;
            __int16 v23 = (_DWORD *)((char *)v23 + v24);
            --v22;
          }
          while (v22);
        }
        NativeInt32ToFloat32Scaled_ARM();
      }
      else
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 0;
        if (CAStreamBasicDescription::IdentifyCommonPCMFormat(a1, (int *)buf, 0) && *(_DWORD *)buf == 1)
        {
          double v26 = (float *)&mData[4 * a3];
          uint64_t mNumberChannels = a2->mNumberChannels;
          if (mNumberChannels == 1)
          {
            memcpy(v6, v26, 4 * a5);
          }
          else if (a5)
          {
            uint64_t v30 = 4 * mNumberChannels;
            uint64_t v31 = a5;
            do
            {
              *v6++ = *v26;
              double v26 = (float *)((char *)v26 + v30);
              --v31;
            }
            while (v31);
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v28 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            __int16 v29 = (*v28 ? *v28 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v33 = "VoiceProcessor_v2.cpp";
              __int16 v34 = 1024;
              int v35 = 1370;
              _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d invalid format", buf, 0x12u);
            }
          }
        }
      }
    }
  }
}

void VoiceProcessorV2::DumpState(VoiceProcessorV2 *this, __sFILE *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
    fprintf(a2, "VoiceProcessor versiounint64_t n = %u \n", v4);
    if (*((unsigned char *)this + 2083)) {
      uint64_t v5 = "TRUE";
    }
    else {
      uint64_t v5 = "FALSE";
    }
    fprintf(a2, "VP Disabled = %s.  \n", v5);
    if (*((unsigned char *)this + 2085)) {
      unint64_t v6 = "TRUE";
    }
    else {
      unint64_t v6 = "FALSE";
    }
    fprintf(a2, "HW has vp = %s.  \n", v6);
    double v7 = (char *)this + 32;
    if (*((char *)this + 55) < 0) {
      double v7 = *(const char **)v7;
    }
    fprintf(a2, "Product: %s\n", v7);
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, *((_DWORD *)this + 549));
    fprintf(a2, "Primary audio vocoder type = %s(%d) \n", buf, *((_DWORD *)this + 549));
    fprintf(a2, "Driver-prescribed postprocessing input gain  = %f dB.  \n", *((float *)this + 1093));
    fprintf(a2, "Beam directiounint64_t n = %d \n", *((_DWORD *)this + 684));
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 584));
    fprintf(a2, "HW Format REF: %s \n", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 624));
    fprintf(a2, "HW Format MIC: %s \n", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    fprintf(a2, "HW Block Size REF: %d \n", *((_DWORD *)this + 123));
    fprintf(a2, "HW Block Size MIC: %d \n", *((_DWORD *)this + 124));
    uint64_t v8 = *((void *)this + 262);
    if (*((void *)this + 263) != v8)
    {
      unint64_t v9 = 0;
      do
      {
        fprintf(a2, "    HW Trim Gain MIC(ch-%lu): %f dB \n", v9, *(float *)(v8 + 4 * v9));
        ++v9;
        uint64_t v8 = *((void *)this + 262);
      }
      while (v9 < (*((void *)this + 263) - v8) >> 2);
    }
    uint64_t v10 = *((void *)this + 266);
    if (*((void *)this + 267) != v10)
    {
      unint64_t v11 = 0;
      do
      {
        fprintf(a2, "    HW Trim Gain REF(ch-%lu): %f dB \n", v11, *(float *)(v10 + 4 * v11));
        ++v11;
        uint64_t v10 = *((void *)this + 266);
      }
      while (v11 < (*((void *)this + 267) - v10) >> 2);
    }
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 984));
    fprintf(a2, "VP Output Format: %s \n", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    fprintf(a2, "REF Channel BitMap: %x, OUT Channel BitMap: %x \n", *((_DWORD *)this + 100), *((_DWORD *)this + 101));
    fprintf(a2, "HW MIC Channels: %s, BitMap: %x \n", *((const char **)this + 54), *((_DWORD *)this + 106));
    fprintf(a2, "EP MIC Channels: %s, BitMap: %x \n", *((const char **)this + 57), *((_DWORD *)this + 112));
    int v12 = 0;
    while (((*((_DWORD *)this + 116) >> v12) & 1) == 0)
    {
      if (++v12 == 32)
      {
        int v12 = 33;
        break;
      }
    }
    fprintf(a2, "Primary epmic index: %d \n", v12);
    fprintf(a2, "SRC Quality: 0x%x (0:min, 0x20:low, 0x40:med, 0x60:hig, 0x7f:max) \n", *((_DWORD *)this + 1114));
    fprintf(a2, "Hw real-world correction: %f samples \n", *((float *)this + 1113));
    fprintf(a2, "Ref-Mic Delay: %f msec \n", *((float *)this + 1094));
    fprintf(a2, "    Pre-echo-processing Digital Input Gain: %f dB \n", *((float *)this + 1092));
    fprintf(a2, "Post-echo-processing Digital Input Gain: %f dB \n", *((float *)this + 1093));
    fprintf(a2, "Downlink Mix Gain: %f dB \n", *((float *)this + 1115));
    fprintf(a2, "Downlink Final Gain Chn 0: %f dB \n", *((float *)this + 1131));
    fprintf(a2, "Downlink Final Gain Chn 1: %f dB \n", *((float *)this + 1132));
    CAFormatter::CAFormatter((CAFormatter *)buf, (VoiceProcessorV2 *)((char *)this + 208));
    fprintf(a2, "DL Format FEV: %s \n", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    CAFormatter::CAFormatter((CAFormatter *)buf, (VoiceProcessorV2 *)((char *)this + 288));
    fprintf(a2, "DL Format FEV Process: %s \n", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    CAFormatter::CAFormatter((CAFormatter *)buf, (VoiceProcessorV2 *)((char *)this + 328));
    fprintf(a2, "DL Format MIX: %s \n", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    fprintf(a2, "DL Block Size MIX: %d \n", *((_DWORD *)this + 121));
    fprintf(a2, "calcblkzsizes: mHwRefBlkSz = %lu, mHwMicBlkSz = %lu \n", *((unsigned int *)this + 123), *((unsigned int *)this + 124));
    fprintf(a2, "calcblkzsizes: mDsRefBlkSz = %lu, mDsMicBlkSz = %lu \n", *((unsigned int *)this + 125), *((unsigned int *)this + 126));
    fprintf(a2, "calcblkzsizes: mEpIoBlkSz  = %lu, mUsOutBlkSz = %lu \n", *((unsigned int *)this + 127), *((unsigned int *)this + 131));
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 824));
    fprintf(a2, "calcasbds: mEpMicASBD (ignore the # of channels) format: %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 904));
    fprintf(a2, "calcasbds: mEpOutASBD format: %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 944));
    fprintf(a2, "calcasbds: mUsOutASBD format: %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
    fprintf(a2, "HW preslatency & ref to mic delay: input {deviceID=%d, latency=%u, safety offset=%u}, output {deviceID=%d, latency=%u, safety offset=%u} \n", *((_DWORD *)this + 285), *((_DWORD *)this + 291), *((_DWORD *)this + 293), *((_DWORD *)this + 284), *((_DWORD *)this + 292), *((_DWORD *)this + 294));
    fprintf(a2, "Num Ref Ports = %u, Num Mic Ports = %u \n", (*((void *)this + 293) - *((void *)this + 292)) >> 2, (*((void *)this + 296) - *((void *)this + 295)) >> 2);
    uint64_t v13 = *((void *)this + 292);
    if (*((void *)this + 293) != v13)
    {
      unint64_t v14 = 0;
      do
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)buf, *(_DWORD *)(v13 + 4 * v14));
        fprintf(a2, "      : Ref Port #%lu=%s \n", v14++, buf);
        uint64_t v13 = *((void *)this + 292);
      }
      while (v14 < (*((void *)this + 293) - v13) >> 2);
    }
    uint64_t v15 = *((void *)this + 295);
    if (*((void *)this + 296) != v15)
    {
      unint64_t v16 = 0;
      do
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)buf, *(_DWORD *)(v15 + 4 * v16));
        fprintf(a2, "      : Mic Port #%lu=%s \n", v16++, buf);
        uint64_t v15 = *((void *)this + 295);
      }
      while (v16 < (*((void *)this + 296) - v15) >> 2);
    }
  }
  else
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v17 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(2, VPLogScope(void)::scope, 0))
    {
      uint64_t v18 = (*v17 ? *v17 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
        __int16 v21 = 1024;
        int v22 = 6080;
        _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> VoiceProcessorV2::DumpToFile() - Dump file is not available", buf, 0x12u);
      }
    }
    uint64_t v19 = (int *)*((void *)this + 1578);
    if (v19 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v19, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6080, "DumpState", "VoiceProcessorV2::DumpToFile() - Dump file is not available");
    }
  }
}

uint64_t VoiceProcessorV2::GetVersion(VoiceProcessorV2 *this)
{
  return 2;
}

uint64_t VoiceProcessorV2::SetMode(VoiceProcessorV2 *this, int a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v32 = (char *)this + 2392;
  char v33 = (*(uint64_t (**)(void))(*((void *)this + 299) + 16))();
  atomic_fetch_add((atomic_uint *volatile)this + 620, 1u);
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  int v4 = (char *)this + 15961;
  if (*((_DWORD *)this + 19) != a2)
  {
    uint64_t v5 = (int *)((char *)this + 16600);
    *((_DWORD *)this + 19) = a2;
    if (a2 == 6 || a2 == 1)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      unint64_t v6 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        double v7 = (*v6 ? *v6 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v35 = "VoiceProcessor_v2.cpp";
          __int16 v36 = 1024;
          int v37 = 725;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Setting up emergency call status handler", buf, 0x12u);
        }
      }
      uint64_t v8 = (int *)*((void *)this + 1578);
      if (v8 && (*v4 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v8, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 725, "SetMode", "Setting up emergency call status handler");
      }
      uint64_t v9 = *((void *)this + 2087);
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2089);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 1174405120;
      v30[2] = ___ZN16VoiceProcessorV27SetModeEi_block_invoke;
      v30[3] = &__block_descriptor_tmp_48_20111;
      v30[4] = this;
      v30[5] = v9;
      uint64_t v31 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((unsigned char *)this + 16648))
      {
        vp::objc::ID::~ID((VoiceProcessorV2 *)((char *)this + 16640));
        *((unsigned char *)this + 16648) = 0;
      }
      unint64_t v11 = v30;
      *((void *)this + 208std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      int v12 = [[VPEmergencyCallStateObserver alloc] initWithEmergencyCallStateHandler:v11];
      vp::objc::ID::ID((vp::objc::ID *)buf, (objc_object *)v12);
      vp::objc::ID::operator=((id *)this + 2080, (id *)buf);
      vp::objc::ID::~ID((vp::objc::ID *)buf);

      *((unsigned char *)this + 16648) = 1;
      if (v31) {
        std::__shared_weak_count::__release_weak(v31);
      }
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (*v4 || *((unsigned char *)this + 15962)) {
      VoiceProcessorV2::PListWriteSetModeParameters(this);
    }
    if (VoiceProcessorV2::ShouldInteractWithControlCenter(this))
    {
      int v15 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 576))(this);
      int *v5 = v15;
      if (*v4)
      {
        VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1718384242);
        int v15 = *v5;
      }
      if (v15)
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unint64_t v16 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          uint64_t v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            int v35 = "VoiceProcessor_v2.cpp";
            __int16 v36 = 1024;
            int v37 = 747;
            _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Forcing bypass to false due to chat flavor", buf, 0x12u);
          }
        }
        uint64_t v18 = (int *)*((void *)this + 1578);
        if (v18 && (*v4 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v18, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 747, "SetMode", "Forcing bypass to false due to chat flavor");
        }
        *((unsigned char *)this + 472) = 0;
      }
    }
    if (!*((unsigned char *)this + 16241))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v19 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        uint64_t v20 = (*v19 ? *v19 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v35 = "VoiceProcessor_v2.cpp";
          __int16 v36 = 1024;
          int v37 = 760;
          _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (SetMode)", buf, 0x12u);
        }
      }
      __int16 v21 = (int *)*((void *)this + 1578);
      if (v21 && (*v4 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v21, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 760, "SetMode", "Begin self-reinit (SetMode)");
      }
      VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 1, v13, v14);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v22 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        uint64_t v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v35 = "VoiceProcessor_v2.cpp";
          __int16 v36 = 1024;
          int v37 = 762;
          _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (SetMode)", buf, 0x12u);
        }
      }
      uint64_t v24 = (int *)*((void *)this + 1578);
      if (v24 && (*v4 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v24, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 762, "SetMode", "End self-reinit (SetMode)");
      }
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  __int16 v25 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    double v26 = (*v25 ? *v25 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = *((_DWORD *)this + 19);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v35 = "VoiceProcessor_v2.cpp";
      __int16 v36 = 1024;
      int v37 = 765;
      __int16 v38 = 1024;
      int v39 = v27;
      _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> operation mode = %i", buf, 0x18u);
    }
  }
  uint64_t v28 = (int *)*((void *)this + 1578);
  if (v28 && (*v4 || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v28, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 765, "SetMode", "operation mode = %i", *((_DWORD *)this + 19));
  }
  atomic_fetch_add((atomic_uint *volatile)this + 620, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v32);
  return 0;
}

void sub_1BB60C89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  __int16 v21 = v20;
  vp::objc::ID::~ID(v19);

  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  atomic_fetch_add((atomic_uint *volatile)(v17 + 2480), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a17);
  _Unwind_Resume(a1);
}

void ___ZN16VoiceProcessorV27SetModeEi_block_invoke(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      double v7 = v6;
      uint64_t v8 = (VoiceProcessorV2 *)a1[5];
      if (v8)
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v9 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          uint64_t v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            double v14 = "VoiceProcessor_v2.cpp";
            __int16 v15 = 1024;
            int v16 = 730;
            __int16 v17 = 1024;
            int v18 = a2;
            _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Emergency call status handler triggered, isEmergencyCall: %d\n", buf, 0x18u);
          }
        }
        unint64_t v11 = *(int **)(v5 + 12624);
        if (v11 && (*(unsigned char *)(v5 + 15961) || *(unsigned char *)(v5 + 15962)))
        {
          if (VPLogScope(void)::once != -1)
          {
            int v12 = *(int **)(v5 + 12624);
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            unint64_t v11 = v12;
          }
          CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 730, "SetMode_block_invoke", "Emergency call status handler triggered, isEmergencyCall: %d\n", a2);
        }
        VoiceProcessorV2::SetEmergencyCallStatus(v8, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1BB60CAE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

VoiceProcessorV2 *VoiceProcessorV2::ShouldInteractWithControlCenter(VoiceProcessorV2 *this)
{
  double result = (VoiceProcessorV2 *)_os_feature_enabled_impl();
  if (result)
  {
    double result = (VoiceProcessorV2 *)VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(result);
    if (result) {
      return (VoiceProcessorV2 *)(*((unsigned char *)this + 16241) == 0);
    }
  }
  return result;
}

void VoiceProcessorV2::ResetTimestampsAndInitializeVP(VoiceProcessorV2 *this, int a2, double a3, double a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (char *)this + 12552;
  if (*((unsigned char *)this + 476))
  {
    if (a2)
    {
      if (*((unsigned char *)this + 15961))
      {
        if (*((unsigned char *)this + 1688))
        {
          LODWORD(a4) = *((_DWORD *)this + 123);
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 212) - (double)*(unint64_t *)&a4, *((double *)this + 212) - (double)*(unint64_t *)&a4, 0);
        }
        if (*((unsigned char *)this + 1689) && (v6[3409] || v6[3410]))
        {
          LODWORD(a4) = *((_DWORD *)this + 124);
          VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 213) - (double)*(unint64_t *)&a4, *((double *)this + 213) - (double)*(unint64_t *)&a4, 1);
        }
      }
      *((_WORD *)this + 844) = 0;
      if (*((unsigned char *)this + 1856)) {
        *((unsigned char *)this + 1856) = 0;
      }
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
    }
    *((unsigned char *)this + 2247) = v7;
    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v8 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      uint64_t v9 = (*v8 ? *v8 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 136315394;
        __int16 v15 = "VoiceProcessor_v2.cpp";
        __int16 v16 = 1024;
        int v17 = 3044;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> called initialize", (uint8_t *)&v14, 0x12u);
      }
    }
    uint64_t v10 = (int *)*((void *)this + 1578);
    if (v10 && (v6[3409] || v6[3410]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v10, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3044, "ResetTimestampsAndInitializeVP", "called initialize");
    }
    if (v6[3409] || v6[3410]) {
      VoiceProcessorV2::PListWriteInitializeHwInputParameters(this);
    }
  }
  if (*((unsigned char *)this + 477))
  {
    if (a2 && v6[3409])
    {
      if (*v6)
      {
        LODWORD(a4) = *((_DWORD *)this + 121);
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1568) - (double)*(unint64_t *)&a4, *((double *)this + 1568) - (double)*(unint64_t *)&a4, 2);
      }
      char *v6 = 0;
    }
    VoiceProcessorV2::InitializeDLP(this);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unint64_t v11 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      int v12 = (*v11 ? *v11 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 136315394;
        __int16 v15 = "VoiceProcessor_v2.cpp";
        __int16 v16 = 1024;
        int v17 = 3062;
        _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> called initializedlp", (uint8_t *)&v14, 0x12u);
      }
    }
    double v13 = (int *)*((void *)this + 1578);
    if (v13 && (v6[3409] || v6[3410]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v13, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3062, "ResetTimestampsAndInitializeVP", "called initializedlp");
    }
    if (v6[3409] || v6[3410]) {
      VoiceProcessorV2::PListWriteInitializeDLPParameters(this);
    }
  }
  *((_DWORD *)this + 563) = 0;
  *((_DWORD *)this + 568) = 0;
  *((_DWORD *)this + 566) = 0;
}

uint64_t VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(VoiceProcessorV2 *this)
{
  {
    VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(void)const::isDeviceSupported = MGGetBoolAnswer();
  }
  return VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(void)const::isDeviceSupported;
}

void __destroy_helper_block_e8_40c58_ZTSN5caulk14lifetime_guardI16VoiceProcessorV2vE8weak_refE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_e8_40c58_ZTSN5caulk14lifetime_guardI16VoiceProcessorV2vE8weak_refE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void VoiceProcessorV2::SetEmergencyCallStatus(VoiceProcessorV2 *this, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 15961;
  if (*((unsigned __int8 *)this + 16632) != a2)
  {
    char v3 = a2;
    uint64_t v18 = (char *)this + 2392;
    char v19 = (*(uint64_t (**)(void))(*((void *)this + 299) + 16))();
    atomic_fetch_add((atomic_uint *volatile)this + 620, 1u);
    while (*((_DWORD *)this + 621))
      usleep(0x1F4u);
    int v7 = v2[671];
    v2[671] = v3;
    if (*v2) {
      VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1768514915);
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v8 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      uint64_t v9 = (*v8 ? *v8 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = v2[671];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __int16 v21 = "VoiceProcessor_v2.cpp";
        __int16 v22 = 1024;
        int v23 = 6503;
        __int16 v24 = 1024;
        int v25 = v10;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> VP mIsInEmergencyCall set to %u", buf, 0x18u);
      }
    }
    unint64_t v11 = (int *)*((void *)this + 1578);
    if (v11 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6503, "SetEmergencyCallStatus", "VP mIsInEmergencyCall set to %u", v2[671]);
    }
    if (v2[671] != v7)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v12 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        double v13 = (*v12 ? *v12 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          __int16 v21 = "VoiceProcessor_v2.cpp";
          __int16 v22 = 1024;
          int v23 = 6508;
          _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (SetEmergencyCallStatus)", buf, 0x12u);
        }
      }
      int v14 = (int *)*((void *)this + 1578);
      if (v14 && (*v2 || v2[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v14, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6508, "SetEmergencyCallStatus", "Begin self-reinit (SetEmergencyCallStatus)");
      }
      VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 1, v5, v6);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      __int16 v15 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        __int16 v16 = (*v15 ? *v15 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          __int16 v21 = "VoiceProcessor_v2.cpp";
          __int16 v22 = 1024;
          int v23 = 6510;
          _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (SetEmergencyCallStatus)", buf, 0x12u);
        }
      }
      int v17 = (int *)*((void *)this + 1578);
      if (v17 && (*v2 || v2[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v17, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6510, "SetEmergencyCallStatus", "End self-reinit (SetEmergencyCallStatus)");
      }
    }
    atomic_fetch_add((atomic_uint *volatile)this + 620, 0xFFFFFFFF);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v18);
  }
}

void sub_1BB60D43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  atomic_fetch_add((atomic_uint *volatile)(v3 + 2480), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::SetDownLinkVolume(VoiceProcessorV2 *this, float a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)&v26, (uint64_t)this + 2480, 400000);
  int v4 = (char *)this + 15961;
  if (*v26)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    double v5 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      double v6 = (*v5 ? *v5 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
        __int16 v30 = 1024;
        int v31 = 777;
        __int16 v32 = 1024;
        LODWORD(v33) = 400000;
        _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> setdownlinkvolume failed because mSignaler can't be acquired within %u microseconds", buf, 0x18u);
      }
    }
    int v7 = (int *)*((void *)this + 1578);
    if (v7 && (*v4 || v4[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v7, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 777, "SetDownLinkVolume", "setdownlinkvolume failed because mSignaler can't be acquired within %u microseconds", 400000);
    }
    uint64_t result = 4294956433;
  }
  else
  {
    __int16 v24 = (char *)this + 2488;
    char v25 = 0;
    char v25 = (*(uint64_t (**)(void))(*((void *)this + 311) + 16))();
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v9 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      int v10 = (*v9 ? *v9 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
        __int16 v30 = 1024;
        int v31 = 785;
        __int16 v32 = 2048;
        double v33 = a2;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setdownlinkvolume called with: user volume = %f", buf, 0x1Cu);
      }
    }
    unint64_t v11 = (int *)*((void *)this + 1578);
    if (v11 && (*v4 || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 785, "SetDownLinkVolume", "setdownlinkvolume called with: user volume = %f", a2);
    }
    if (*v4)
    {
      float valuePtr = a2;
      if (*((void *)this + 1892))
      {
        *(void *)AudioObjectPropertyAddress buf = 0;
        VoiceProcessorV2::PListCopyDictionaryForWrite(this, (__CFDictionary **)buf);
        int v12 = *(const void **)buf;
        if (*(void *)buf)
        {
          VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&v27, 21);
          WriteItemToDictionary((__CFDictionary **)buf, &v27, 2, 4uLL, (const char *)&valuePtr);
          if (v27) {
            CFRelease(v27);
          }
          CFRelease(v12);
        }
      }
    }
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20144);
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym) {
      AudioIssueDetectorLibraryLoader(void)::libSym(a2);
    }
    *((float *)this + 3++*((_DWORD *)this + 132) = a2;
    if (*((float *)this + 3135) == a2)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      double v13 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        int v14 = (*v13 ? *v13 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          double v15 = *((float *)this + 3132);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
          __int16 v30 = 1024;
          int v31 = 796;
          __int16 v32 = 2048;
          double v33 = v15;
          _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> setdownlinkvolume: no need to change volume = %f", buf, 0x1Cu);
        }
      }
      __int16 v16 = (int *)*((void *)this + 1578);
      if (v16 && (*v4 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v16, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 796, "SetDownLinkVolume", "setdownlinkvolume: no need to change volume = %f", *((float *)this + 3132));
      }
    }
    else
    {
      *((float *)this + 3135) = a2;
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9104, 5, a2);
      if (*((unsigned char *)this + 8897))
      {
        int v17 = (OpaqueAudioComponentInstance *)*((void *)this + 446);
        if (v17) {
          AudioUnitSetParameter(v17, 5u, 0, 0, *((AudioUnitParameterValue *)this + 3135), 0);
        }
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9416, 0, *((float *)this + 3135));
      if ((*((unsigned char *)this + 8898) & 0x20) != 0)
      {
        uint64_t v18 = (OpaqueAudioComponentInstance *)*((void *)this + 459);
        if (v18) {
          AudioUnitSetParameter(v18, 0, 0, 0, *((AudioUnitParameterValue *)this + 3135), 0);
        }
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9440, 0, *((float *)this + 3135));
      if ((*((unsigned char *)this + 8898) & 0x40) != 0)
      {
        char v19 = (OpaqueAudioComponentInstance *)*((void *)this + 460);
        if (v19) {
          AudioUnitSetParameter(v19, 0, 0, 0, *((AudioUnitParameterValue *)this + 3135), 0);
        }
      }
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9008, 1937141612, *((float *)this + 3135));
      if ((*((unsigned char *)this + 8896) & 0x10) != 0)
      {
        uint64_t v20 = (OpaqueAudioComponentInstance *)*((void *)this + 442);
        if (v20) {
          AudioUnitSetParameter(v20, 0x73766F6Cu, 0, 0, *((AudioUnitParameterValue *)this + 3135), 0);
        }
      }
      float v21 = VoiceProcessorV2::DetermineRouteBasedPreGain(this);
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9464, 7, v21);
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9464, 5, *((float *)this + 3135));
      AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9080, 26, v21);
      uint64_t v23 = *((void *)this + 1112);
      if ((v23 & 0x800000) != 0)
      {
        __int16 v22 = (OpaqueAudioComponentInstance *)*((void *)this + 461);
        if (v22)
        {
          AudioUnitSetParameter(v22, 7u, 0, 0, v21, 0);
          __int16 v22 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)this + 461), 5u, 0, 0, *((AudioUnitParameterValue *)this + 3135), 0);
          uint64_t v23 = *((void *)this + 1112);
        }
      }
      if ((v23 & 0x80) != 0)
      {
        __int16 v22 = (OpaqueAudioComponentInstance *)*((void *)this + 445);
        if (v22) {
          __int16 v22 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(v22, 0x1Au, 0, 0, v21, 0);
        }
      }
      if (*v4)
      {
        MEMORY[0x1F4188790](v22);
        AUProcessingBlockBase::UnitsChanged();
      }
    }
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v24);
    uint64_t result = 0;
  }
  atomic_fetch_add(v26 + 1, 0xFFFFFFFF);
  return result;
}

void sub_1BB60DBD8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(uint64_t *a1, uint64_t a2, int a3)
{
  *a1 = a2;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 4), 1u);
  uint64_t v4 = *a1;
  if (*(_DWORD *)*a1)
  {
    unsigned int v5 = a3 - 1;
    unsigned int v6 = 500;
    do
    {
      atomic_fetch_add((atomic_uint *volatile)(v4 + 4), 0xFFFFFFFF);
      usleep(0x1F4u);
      atomic_fetch_add((atomic_uint *volatile)(*a1 + 4), 1u);
      uint64_t v4 = *a1;
      if (*(_DWORD *)*a1) {
        BOOL v7 = v5 >= v6;
      }
      else {
        BOOL v7 = 0;
      }
      v6 += 500;
    }
    while (v7);
  }
  return a1;
}

float VoiceProcessorV2::DetermineRouteBasedPreGain(VoiceProcessorV2 *this)
{
  uint64_t v1 = (int *)*((void *)this + 292);
  if (v1 == *((int **)this + 293))
  {
    float v3 = 38.0;
  }
  else
  {
    int v2 = *v1;
    float v3 = 38.0;
    if (v2 <= 1886152046)
    {
      if (v2 == 1885892706) {
        float v3 = 32.0;
      }
      if (v2 == 1885888867) {
        float v3 = 24.0;
      }
    }
    else
    {
      if (v2 == 1886545251) {
        float v3 = 24.0;
      }
      if (v2 == 1886613611) {
        float v3 = 30.0;
      }
      if (v2 == 1886152047) {
        float v3 = 32.0;
      }
    }
  }
  float result = fminf(0.0 - (float)((float)(1.0 - *((float *)this + 3135)) * v3), 0.0);
  unsigned int v5 = (float *)*((void *)this + 266);
  unsigned int v6 = (float *)*((void *)this + 267);
  if (v5 != v6)
  {
    BOOL v7 = v5 + 1;
    if (v5 + 1 != v6)
    {
      float v8 = *v5;
      uint64_t v9 = v5 + 1;
      do
      {
        float v10 = *v9++;
        float v11 = v10;
        if (v10 < v8)
        {
          float v8 = v11;
          unsigned int v5 = v7;
        }
        BOOL v7 = v9;
      }
      while (v9 != v6);
    }
    return result + *v5;
  }
  return result;
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_20150()
{
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  float result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    float result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t VoiceProcessorV2::AppendSpeakerTelemetryData(atomic_uint *this, const AudioBufferList *a2, uint64_t a3, AudioTimeStamp *a4)
{
  atomic_fetch_add(this + 621, 1u);
  if (this[620])
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 24.006, 0.0, 0.0, 0.0, "appspkrtel: tryer failed to acquire lock", a3, a4);
    goto LABEL_10;
  }
  if (this[382] != a3)
  {
    VoiceProcessorV2::LogIOError((uint64_t)this, 24.002, 0.0, 0.0, 0.0, "appspkrtel: received %d samples, expected = %d", a3, a4);
    goto LABEL_10;
  }
  if (this[1130] == 1)
  {
    float v8 = this + 3142;
    if (*((unsigned char *)this + 15961))
    {
      *((unsigned char *)this + 12938) = 1;
      if (*v8)
      {
        double v9 = *((double *)this + 1570);
        double mSampleTime = a4->mSampleTime;
        if (v9 == a4->mSampleTime)
        {
          *((double *)this + 157std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = mSampleTime + (double)a3;
LABEL_18:
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, 0x45u, a3, a2, a4);
          goto LABEL_19;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (!*((unsigned char *)this + 15962)) {
        goto LABEL_19;
      }
      *((unsigned char *)this + 12938) = 1;
      if (*v8)
      {
        double v9 = *((double *)this + 1570);
        double mSampleTime = a4->mSampleTime;
        if (v9 == a4->mSampleTime)
        {
          *((double *)this + 157std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = mSampleTime + (double)a3;
LABEL_17:
          if (*((unsigned char *)this + 15962)) {
            goto LABEL_18;
          }
LABEL_19:
          if (a2->mNumberBuffers == this[385])
          {
            unsigned __int32 v14 = 0;
            if (a3)
            {
              atomic_uint v15 = this[384];
              unsigned int v16 = v15 - this[386];
              if (v16)
              {
                if (v16 >= a3) {
                  unsigned __int32 v14 = a3;
                }
                else {
                  unsigned __int32 v14 = v15 - this[386];
                }
                unsigned __int32 v17 = v15 - this[388];
                if (v17 >= v14) {
                  uint64_t v18 = v14;
                }
                else {
                  uint64_t v18 = v17;
                }
                if (a2->mNumberBuffers)
                {
                  unint64_t v19 = 0;
                  p_mData = &a2->mBuffers[0].mData;
                  do
                  {
                    float v21 = *p_mData;
                    p_mData += 2;
                    memcpy((void *)(*((void *)this + 195) + 4 * (this[388] + this[384] * v19++)), v21, 4 * v18);
                    unint64_t v22 = this[385];
                  }
                  while (v19 < v22);
                  if (v14 > v17 && v22)
                  {
                    unint64_t v23 = 0;
                    __int16 v24 = &a2->mBuffers[0].mData;
                    do
                    {
                      char v25 = (char *)*v24;
                      v24 += 2;
                      memcpy((void *)(*((void *)this + 195) + 4 * (this[384] * v23++)), &v25[4 * v18], 4 * (v14 - v18));
                    }
                    while (v23 < this[385]);
                  }
                }
                this[386] += v14;
                unsigned __int32 v26 = this[388] + v14;
                this[388] = v26;
                unsigned __int32 v27 = this[384];
                BOOL v28 = v26 >= v27;
                atomic_uint v29 = v26 - v27;
                if (v28) {
                  this[388] = v29;
                }
              }
            }
          }
          else
          {
            unsigned __int32 v14 = 0;
          }
          if (v14 != a3) {
            VoiceProcessorV2::LogIOError((uint64_t)this, 24.001, 0.0, 0.0, 0.0, "appspkrtel: ring buffer write error %d", a3, a4);
          }
          goto LABEL_10;
        }
LABEL_16:
        VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, v9, mSampleTime, 3);
        int v12 = *((unsigned __int8 *)this + 15961);
        LODWORD(v13) = this[382];
        *((double *)this + 157std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = a4->mSampleTime + (double)v13;
        if (v12) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    *float v8 = 1;
    double mSampleTime = a4->mSampleTime;
    double v9 = 0.0;
    goto LABEL_16;
  }
LABEL_10:
  atomic_fetch_add(this + 621, 0xFFFFFFFF);
  return 0;
}

void sub_1BB60E248(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 2484), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

PListLogger ***std::unique_ptr<TuningPListMgr>::reset[abi:ne180100](PListLogger ***result, PListLogger **a2)
{
  int v2 = *result;
  *float result = a2;
  if (v2)
  {
    uint64_t v3 = 2;
    while (1)
    {
      uint64_t v4 = v2[v3];
      if (v4)
      {
        CFRelease(v4);
        v2[v3] = 0;
      }
      if (++v3 == 6)
      {
        unsigned int v5 = (int *)v2[6];
        if (v5)
        {
          if (*v5 != -1)
          {
            PListLogger::log(v2[6], "*** done.\n");
            close(*v5);
            int *v5 = -1;
          }
          MEMORY[0x1C185D370](v5, 0x1000C4005A209FELL);
        }
        CACFString::~CACFString((CACFString *)v2);
        JUMPOUT(0x1C185D370);
      }
    }
  }
  return result;
}

void ___ZN16VoiceProcessorV2C2ERKN2vp7ContextE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  BOOL v34 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(@"EnableVPTelephonyMonitor", 0, &v34, 0, a5);
  BOOL v33 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(@"EnableTelephonyMonitor", 0, &v33, 0, v6);
  BOOL v9 = v34 && v33;
  BOOL v32 = 0;
  VoiceProcessorV2::ReadDefaultsOverride(@"vp_enable_debug_features", 0, &v32, 0, v7);
  BOOL v10 = v32 || v9;
  BOOL v35 = v10;
  if (queryBuildType(void)::once != -1) {
    dispatch_once(&queryBuildType(void)::once, &__block_literal_global_99);
  }
  float v11 = (unsigned char *)(v5 + 15961);
  if (gIsInternal)
  {
    BOOL v12 = 1;
  }
  else
  {
    BOOL v10 = v35;
    BOOL v12 = gIsCarrier != 0;
  }
  if (!v10) {
    BOOL v12 = 0;
  }
  BOOL v35 = v12;
  if (!v12) {
    goto LABEL_110;
  }
  if (!*(unsigned char *)(v5 + 15962))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unint64_t v13 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      unsigned __int32 v14 = (*v13 ? *v13 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "vpDebug_FileSaving.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1006;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> File-Saving switch turned on", buf, 0x12u);
      }
    }
    atomic_uint v15 = *(int **)(v5 + 12624);
    if (v15 && (*v11 || *(unsigned char *)(v5 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v15, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1006, "RereadSaveFilesDefaults", "File-Saving switch turned on");
    }
    *(void *)AudioObjectPropertyAddress buf = v5;
    *(void *)&buf[8] = &v35;
    if (atomic_load_explicit((atomic_ullong *volatile)(v5 + 15992), memory_order_acquire) != -1)
    {
      int v37 = buf;
      __int16 v36 = &v37;
      std::__call_once((std::once_flag::_State_type *)(v5 + 15992), &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::RereadSaveFilesDefaults(void)::$_0 &&>>);
    }
    if (!v35)
    {
LABEL_110:
      if (*(unsigned char *)(v5 + 15962))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unsigned int v16 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          unsigned __int32 v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "vpDebug_FileSaving.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1025;
            _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> File-Saving switch turned off", buf, 0x12u);
          }
        }
        uint64_t v18 = *(int **)(v5 + 12624);
        if (v18 && (*v11 || *(unsigned char *)(v5 + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v18, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1025, "RereadSaveFilesDefaults", "File-Saving switch turned off");
        }
        *(void *)AudioObjectPropertyAddress buf = v5;
        *(void *)&buf[8] = &v35;
        if (atomic_load_explicit((atomic_ullong *volatile)(v5 + 16000), memory_order_acquire) != -1)
        {
          int v37 = buf;
          __int16 v36 = &v37;
          std::__call_once((std::once_flag::_State_type *)(v5 + 16000), &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::RereadSaveFilesDefaults(void)::$_1 &&>>);
        }
      }
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v19 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    uint64_t v20 = (*v19 ? *v19 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      float v21 = "enabled";
      int v22 = *(unsigned __int8 *)(v5 + 15962);
      *(void *)&uint8_t buf[4] = "vpDebug_FileSaving.cpp";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (!v22) {
        float v21 = "disabled";
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1040;
      __int16 v39 = 2080;
      uint64_t v40 = v21;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> vp debug features (HUP) are %s", buf, 0x1Cu);
    }
  }
  unint64_t v23 = *(int **)(v5 + 12624);
  if (v23 && (*v11 || *(unsigned char *)(v5 + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (*(unsigned char *)(v5 + 15962)) {
      __int16 v24 = "enabled";
    }
    else {
      __int16 v24 = "disabled";
    }
    CALegacyLog::log(v23, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1040, "RereadSaveFilesDefaults", "vp debug features (HUP) are %s", v24);
  }
  if (queryBuildType(void)::once != -1) {
    dispatch_once(&queryBuildType(void)::once, &__block_literal_global_99);
  }
  if ((gIsInternal || gIsCarrier) && *(_DWORD *)(v5 + 12640) <= 1u)
  {
    if (PlatformUtilities_iOS::IsTelephonyCaptureAllowed())
    {
      *(_DWORD *)(v5 + 1264std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 1;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      char v25 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        unsigned __int32 v26 = (*v25 ? *v25 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = *(_DWORD *)(v5 + 12640);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "vpDebug_FileSaving.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1050;
          __int16 v39 = 1024;
          LODWORD(v4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v27;
          _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> master default exists, enabling file saving level %d", buf, 0x18u);
        }
      }
      BOOL v28 = *(int **)(v5 + 12624);
      if (v28 && (*v11 || *(unsigned char *)(v5 + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v28, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1050, "RereadSaveFilesDefaults", "master default exists, enabling file saving level %d");
      }
    }
    else
    {
      *(_DWORD *)(v5 + 1264std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      atomic_uint v29 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        __int16 v30 = (*v29 ? *v29 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpDebug_FileSaving.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1055;
          _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> master default does not exist, disabling file saving level", buf, 0x12u);
        }
      }
      int v31 = *(int **)(v5 + 12624);
      if (v31 && (*v11 || *(unsigned char *)(v5 + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v31, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileSaving.cpp", 1055, "RereadSaveFilesDefaults", "master default does not exist, disabling file saving level");
      }
    }
  }
}

uint64_t caulk::details::lifetime_guard_base<VoiceProcessorV2>::~lifetime_guard_base(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      MEMORY[0x1C185C320](a1 + 24);
    }
    int v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    return a1;
  }
  return result;
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::~lf_read_synchronized_write(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      int v2 = *(void **)(a1 + 16);
      if (v2)
      {
        *(void *)(a1 + 24) = v2;
        operator delete(v2);
      }
    }
  }
  if (*(unsigned char *)(a1 + 9))
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v3 = *(void **)(a1 + 48);
      if (v3)
      {
        *(void *)(a1 + 56) = v3;
        operator delete(v3);
      }
    }
  }
  return a1;
}

void VoiceProcessor::ConfigInfo::~ConfigInfo(VoiceProcessor::ConfigInfo *this)
{
  if (*((unsigned char *)this + 72))
  {
    int v2 = (void *)*((void *)this + 6);
    if (v2)
    {
      *((void *)this + 7) = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    if (v3)
    {
      *((void *)this + 3) = v3;
      operator delete(v3);
    }
  }
}

uint64_t ABLRingBuffer<float>::~ABLRingBuffer(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 24);
  int v2 = *(unsigned char **)(a1 + 24);
  if (v2)
  {
    uint64_t v4 = (unsigned char *)v3[1];
    if (v4 != v2) {
      *(void *)(a1 + 32) = &v4[(v2 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return a1;
}

void std::vector<std::vector<std::unique_ptr<VPTimeFreqConverter>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unsigned int v6 = v4;
        std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void VoiceProcessorV2::VPEchoProcessingParams::~VPEchoProcessingParams(VoiceProcessorV2::VPEchoProcessingParams *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 8072;
  do
  {
    BOOL v12 = (void **)&v3[v2];
    std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
    v2 -= 24;
  }
  while (v2 != -1488);
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 6592));
  uint64_t v4 = (void *)*((void *)this + 820);
  if (v4)
  {
    *((void *)this + 82freeMatrix(*((_DWORD *)this + 17), this + 1) = v4;
    operator delete(v4);
  }
  BOOL v12 = (void **)((char *)this + 6536);
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
  for (uint64_t i = 0; i != -1488; i -= 24)
  {
    unsigned int v6 = *(void **)((char *)this + i + 6016);
    if (v6)
    {
      *(void *)((char *)this + i + 6024) = v6;
      operator delete(v6);
    }
  }
  for (uint64_t j = 0; j != -96; j -= 24)
    CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + j + 4512));
  for (uint64_t k = 4416; k != 2688; k -= 24)
  {
    BOOL v12 = (void **)((char *)this + k);
    std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
  }
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 2696));
  BOOL v9 = (void *)*((void *)this + 333);
  if (v9)
  {
    *((void *)this + 334) = v9;
    operator delete(v9);
  }
  BOOL v12 = (void **)((char *)this + 2640);
  std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v10 = 1728;
  do
  {
    float v11 = *(void **)((char *)this + v10 + 312);
    if (v11)
    {
      *(void *)((char *)this + v10 + 32std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v11;
      operator delete(v11);
    }
    v10 -= 24;
  }
  while (v10);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 264);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 224);
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 200));
  CACFString::~CACFString((VoiceProcessorV2::VPEchoProcessingParams *)((char *)this + 184));
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      unsigned int v6 = (void **)(v2 + 24);
      std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<vp::utility::Audio_Buffer_Mixer,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = (void **)(a1 + 40);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    uint64_t v3 = (void **)(a1 + 16);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = *--v4;
        *uint64_t v4 = 0;
        if (v6) {
          std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1 != a2)
  {
    if (v2)
    {
      uint64_t v5 = v2[1];
      if (v5) {
        MEMORY[0x1C185D340](v5, 0x1000C8077774924);
      }
      operator delete(v2);
    }
    *a1 = a2;
  }
}

void std::vector<AUPropertyItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<AUPropertyItem>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::__function::__func<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0,std::allocator<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    unsigned __int8 v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6) {
        atomic_store(v4, (unsigned __int8 *)(v6 + 16660));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void std::__function::__func<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0,std::allocator<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0>,void ()(BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0,std::allocator<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0,std::allocator<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14BAA00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0,std::allocator<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14BAA00;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0,std::allocator<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F14BAA00;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0,std::allocator<VoiceProcessorV2::VoiceProcessorV2(vp::Context const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F14BAA00;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block,std::allocator<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block>>::__on_zero_shared(uint64_t a1)
{
  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(void *)(a1 + 40) + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block,std::allocator<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BA9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block,std::allocator<caulk::details::lifetime_guard_base<VoiceProcessorV2>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BA9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void VoiceProcessorV2::~VoiceProcessorV2(VoiceProcessorV2 *this)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14BA5C0;
  uint64_t v2 = *((void *)this + 2084);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::invalidate((uint64_t)this + 16696);
  uint64_t v3 = (FILE **)MEMORY[0x1E4F143C8];
  if (*((unsigned char *)this + 15880)) {
    fflush((FILE *)*MEMORY[0x1E4F143C8]);
  }
  dispatch_source_cancel(*((dispatch_source_t *)this + 2001));
  dispatch_release(*((dispatch_object_t *)this + 2001));
  *((void *)this + 200freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  uint64_t v4 = (PowerLogManager *)*((void *)this + 1997);
  if (v4)
  {
    PowerLogManager::EndPowerTracking(v4);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v5 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      uint64_t v6 = (*v5 ? *v5 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 278;
        _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Waiting for power log tasks to complete (thread join)", buf, 0x12u);
      }
    }
    BOOL v7 = (int *)*((void *)this + 1578);
    if (v7 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v7, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 278, "~VoiceProcessorV2", "Waiting for power log tasks to complete (thread join)");
    }
    PowerLogManager::SetPowerVendor(*((PowerLogManager **)this + 1997), 0, 0);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v8 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      BOOL v9 = (*v8 ? *v8 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 280;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Power log tasks complete", buf, 0x12u);
      }
    }
    uint64_t v10 = (int *)*((void *)this + 1578);
    if (v10 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v10, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 280, "~VoiceProcessorV2", "Power log tasks complete");
    }
  }
  float v11 = (caulk::concurrent::messenger *)*((void *)this + 2035);
  if (v11) {
    caulk::concurrent::messenger::drain(v11);
  }
  myFreeABLDynamic((AudioBufferList **)this + 13);
  myFreeABLDynamic((AudioBufferList **)this + 22);
  myFreeABLDynamic((AudioBufferList **)this + 23);
  myFreeABLDynamic((AudioBufferList **)this + 24);
  myFreeABLDynamic((AudioBufferList **)this + 25);
  myFreeABLDynamic((AudioBufferList **)this + 1996);
  uint64_t v12 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v12) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v13 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v13) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v14 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v14) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  if (*((unsigned char *)this + 1952))
  {
    *(void *)AudioObjectPropertyAddress buf = (char *)this + 1928;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)this + 1952) = 0;
  }
  if (*((unsigned char *)this + 1984))
  {
    *(void *)AudioObjectPropertyAddress buf = (char *)this + 1960;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)this + 1984) = 0;
  }
  if (*((unsigned char *)this + 1392))
  {
    *(void *)AudioObjectPropertyAddress buf = (char *)this + 1368;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)this + 1392) = 0;
  }
  myFreeABLDynamic((AudioBufferList **)this + 178);
  myFreeABLDynamic((AudioBufferList **)this + 179);
  myFreeABLDynamic((AudioBufferList **)this + 177);
  free(*((void **)this + 176));
  int v15 = *((_DWORD *)this + 370);
  if (v15 || *((_DWORD *)this + 371))
  {
    *(_OWORD *)&buf[8] = 0uLL;
    *(void *)AudioObjectPropertyAddress buf = &buf[8];
    std::to_string(&v133, v15);
    std::string::basic_string[abi:ne180100]<0>(__p, "vp_mic_clip_detection_presrc_frames");
    int v134 = __p;
    unsigned int v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, __p, (_OWORD **)&v134);
    unsigned __int32 v17 = (void **)v16 + 7;
    if (*((char *)v16 + 79) < 0) {
      operator delete(*v17);
    }
    *(std::string *)unsigned __int32 v17 = v133;
    *((unsigned char *)&v133.__r_.__value_.__s + 23) = 0;
    v133.__r_.__value_.__s.__data_[0] = 0;
    if (v132 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
    }
    std::to_string(&v133, *((_DWORD *)this + 371));
    std::string::basic_string[abi:ne180100]<0>(__p, "vp_mic_clip_detection_postsrc_frames");
    int v134 = __p;
    uint64_t v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)buf, __p, (_OWORD **)&v134);
    unint64_t v19 = (void **)v18 + 7;
    if (*((char *)v18 + 79) < 0) {
      operator delete(*v19);
    }
    *(std::string *)unint64_t v19 = v133;
    *((unsigned char *)&v133.__r_.__value_.__s + 23) = 0;
    v133.__r_.__value_.__s.__data_[0] = 0;
    if (v132 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
    }
    AudioStatisticsHelperSendMessage(*((uint64_t **)this + 270), *((_DWORD *)this + 542), (const UInt8 **)buf, 6);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void **)&buf[8]);
  }
  myFreeABLDynamic((AudioBufferList **)this + 128);
  myFreeABLDynamic((AudioBufferList **)this + 129);
  myFreeABLDynamic((AudioBufferList **)this + 130);
  myFreeABLDynamic((AudioBufferList **)this + 131);
  myFreeABLDynamic((AudioBufferList **)this + 132);
  myFreeABLDynamic((AudioBufferList **)this + 133);
  myFreeABLDynamic((AudioBufferList **)this + 134);
  myFreeABLDynamic((AudioBufferList **)this + 135);
  myFreeABLDynamic((AudioBufferList **)this + 136);
  myFreeABLDynamic((AudioBufferList **)this + 137);
  myFreeABLDynamic((AudioBufferList **)this + 151);
  myFreeABLDynamic((AudioBufferList **)this + 157);
  myFreeABLDynamic((AudioBufferList **)this + 158);
  myFreeABLDynamic((AudioBufferList **)this + 2064);
  myFreeABLDynamic((AudioBufferList **)this + 207);
  float v21 = (void *)*((void *)this + 208);
  if (v21) {
    free(v21);
  }
  *((void *)this + 293) = *((void *)this + 292);
  *((void *)this + 296) = *((void *)this + 295);
  int v22 = (const void *)*((void *)this + 276);
  if (v22)
  {
    CFRelease(v22);
    *((void *)this + 276) = 0;
  }
  unint64_t v23 = (const void *)*((void *)this + 277);
  if (v23)
  {
    CFRelease(v23);
    *((void *)this + 277) = 0;
  }
  __int16 v24 = (const void *)*((void *)this + 278);
  if (v24)
  {
    CFRelease(v24);
    *((void *)this + 278) = 0;
  }
  if (*((unsigned char *)this + 15880)) {
    fflush(*v3);
  }
  if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
  {
    if (*((unsigned char *)this + 1688))
    {
      LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 123);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 212) - (double)v20, *((double *)this + 212) - (double)v20, 0);
    }
    if (*((unsigned char *)this + 1689) && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 124);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 213) - (double)v20, *((double *)this + 213) - (double)v20, 1);
    }
    if (*((unsigned char *)this + 12552) && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 121);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1568) - (double)v20, *((double *)this + 1568) - (double)v20, 2);
    }
    if (*((unsigned char *)this + 12568) && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      LODWORD(v2std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 382);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 1570) - (double)v20, *((double *)this + 1570) - (double)v20, 3);
    }
  }
  VoiceProcessorV2::SaveFilesCleanup(this);
  if (*((unsigned char *)this + 15961))
  {
    char v25 = (AudioBufferList **)((char *)this + 15224);
    uint64_t v26 = 12;
    do
    {
      if (*v25)
      {
        myFreeABLDynamic(v25);
        void *v25 = 0;
      }
      v25[1] = 0;
      v25[2] = 0;
      if (v25[37])
      {
        myFreeABLDynamic(v25 + 37);
        v25[37] = 0;
      }
      v25[38] = 0;
      v25[39] = 0;
      v25 += 3;
      --v26;
    }
    while (v26);
    if (*((void *)this + 1900))
    {
      myFreeABLDynamic((AudioBufferList **)this + 1900);
      *((void *)this + 190std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
    }
    if (*((void *)this + 1901))
    {
      myFreeABLDynamic((AudioBufferList **)this + 1901);
      *((void *)this + 190freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
    }
    if (*((unsigned char *)this + 15961))
    {
      uint64_t v27 = *((void *)this + 1977);
      *((void *)this + 1977) = 0;
      if (v27) {
        std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
      }
      myFreeABLDynamic((AudioBufferList **)this + 1979);
    }
  }
  for (uint64_t i = 0; i != 72; ++i)
  {
    uint64_t v29 = 0;
    __int16 v30 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
    while (1)
    {
      int v31 = *v30;
      v30 += 18;
      if (i == v31) {
        break;
      }
      if (++v29 == 72)
      {
        int v32 = 0;
        goto LABEL_110;
      }
    }
    int v32 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v29 + 1];
LABEL_110:
    VoiceProcessorV2::DisposeAU(this, 1635083896, v32, (OpaqueAudioComponentInstance **)this + i + 347, 1);
  }
  VoiceProcessorV2::DisposeAU(this, 1635082616, 1635284597, (OpaqueAudioComponentInstance **)this + 1558, 1);
  myFreeABLDynamic((AudioBufferList **)this + 419);
  myFreeABLDynamic((AudioBufferList **)this + 420);
  myFreeABLDynamic((AudioBufferList **)this + 422);
  myFreeABLDynamic((AudioBufferList **)this + 421);
  myFreeABLDynamic((AudioBufferList **)this + 423);
  myFreeABLDynamic((AudioBufferList **)this + 424);
  myFreeABLDynamic((AudioBufferList **)this + 425);
  myFreeABLDynamic((AudioBufferList **)this + 426);
  myFreeABLDynamic((AudioBufferList **)this + 427);
  myFreeABLDynamic((AudioBufferList **)this + 428);
  myFreeABLDynamic((AudioBufferList **)this + 437);
  myFreeABLDynamic((AudioBufferList **)this + 429);
  myFreeABLDynamic((AudioBufferList **)this + 430);
  myFreeABLDynamic((AudioBufferList **)this + 431);
  myFreeABLDynamic((AudioBufferList **)this + 432);
  myFreeABLDynamic((AudioBufferList **)this + 436);
  myFreeABLDynamic((AudioBufferList **)this + 435);
  myFreeABLDynamic((AudioBufferList **)this + 433);
  myFreeABLDynamic((AudioBufferList **)this + 434);
  myFreeABLDynamic((AudioBufferList **)this + 538);
  myFreeABLDynamic((AudioBufferList **)this + 500);
  myFreeABLDynamic((AudioBufferList **)this + 501);
  myFreeABLDynamic((AudioBufferList **)this + 503);
  myFreeABLDynamic((AudioBufferList **)this + 504);
  myFreeABLDynamic((AudioBufferList **)this + 502);
  myFreeABLDynamic((AudioBufferList **)this + 505);
  myFreeABLDynamic((AudioBufferList **)this + 508);
  myFreeABLDynamic((AudioBufferList **)this + 510);
  myFreeABLDynamic((AudioBufferList **)this + 511);
  myFreeABLDynamic((AudioBufferList **)this + 512);
  myFreeABLDynamic((AudioBufferList **)this + 506);
  myFreeABLDynamic((AudioBufferList **)this + 507);
  BOOL v33 = (VPTimeFreqConverter *)*((void *)this + 513);
  if (v33)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v33);
    MEMORY[0x1C185D370]();
    *((void *)this + 513) = 0;
  }
  BOOL v34 = (VPTimeFreqConverter *)*((void *)this + 514);
  if (v34)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v34);
    MEMORY[0x1C185D370]();
    *((void *)this + 514) = 0;
  }
  BOOL v35 = (VPTimeFreqConverter *)*((void *)this + 515);
  if (v35)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v35);
    MEMORY[0x1C185D370]();
    *((void *)this + 515) = 0;
  }
  __int16 v36 = (VPTimeFreqConverter *)*((void *)this + 516);
  if (v36)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v36);
    MEMORY[0x1C185D370]();
    *((void *)this + 516) = 0;
  }
  int v37 = (VPTimeFreqConverter *)*((void *)this + 517);
  if (v37)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v37);
    MEMORY[0x1C185D370]();
    *((void *)this + 517) = 0;
  }
  __int16 v38 = (VPTimeFreqConverter *)*((void *)this + 518);
  if (v38)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v38);
    MEMORY[0x1C185D370]();
    *((void *)this + 518) = 0;
  }
  __int16 v39 = (VPTimeFreqConverter *)*((void *)this + 519);
  if (v39)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v39);
    MEMORY[0x1C185D370]();
    *((void *)this + 519) = 0;
  }
  uint64_t v40 = (VPTimeFreqConverter *)*((void *)this + 520);
  if (v40)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v40);
    MEMORY[0x1C185D370]();
    *((void *)this + 52std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  for (uint64_t j = 0; j != 62; ++j)
  {
    uint64_t v42 = 0;
    vDSP_Length v43 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
    while (1)
    {
      int v44 = *v43;
      v43 += 18;
      if (j == v44) {
        break;
      }
      if (++v42 == 62)
      {
        int v45 = 0;
        goto LABEL_133;
      }
    }
    int v45 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v42 + 1];
LABEL_133:
    VoiceProcessorV2::DisposeAU(this, 1635083896, v45, (OpaqueAudioComponentInstance **)this + j + 438, 1);
  }
  VoiceProcessorV2::DisposeAU(this, 1635082616, 1635284580, (OpaqueAudioComponentInstance **)this + 1559, 1);
  myFreeABLDynamic((AudioBufferList **)this + 197);
  myFreeABLDynamic((AudioBufferList **)this + 198);
  myFreeABLDynamic((AudioBufferList **)this + 199);
  myFreeABLDynamic((AudioBufferList **)this + 200);
  myFreeABLDynamic((AudioBufferList **)this + 201);
  myFreeABLDynamic((AudioBufferList **)this + 202);
  myFreeABLDynamic((AudioBufferList **)this + 203);
  myFreeABLDynamic((AudioBufferList **)this + 204);
  uint64_t v46 = *((void *)this + 1572);
  if (v46)
  {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    *((void *)this + 1572) = 0;
  }
  uint64_t v47 = *((void *)this + 1573);
  if (v47)
  {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
    *((void *)this + 1573) = 0;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v48 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    uint64_t v49 = (*v48 ? *v48 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 476;
      _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> VoiceProcessorV2 destroyed!", buf, 0x12u);
    }
  }
  uint64_t v50 = (int *)*((void *)this + 1578);
  if (v50 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v50, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 476, "~VoiceProcessorV2", "VoiceProcessorV2 destroyed!");
  }
  if (!*((_DWORD *)this + 3160)) {
    std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)this + 525, 0);
  }
  uint64_t v51 = *((void *)this + 2002);
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20144);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym(v51);
    uint64_t v52 = *((void *)this + 2003);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_20144);
    }
  }
  else
  {
    uint64_t v52 = *((void *)this + 2003);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym) {
    AudioIssueDetectorLibraryLoader(void)::libSym(v52);
  }
  uint64_t v53 = *((void *)this + 2004);
  if (AudioDataAnalysisManagerLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioDataAnalysisManagerLibraryLoader(void)::once, &__block_literal_global_394);
  }
  if (AudioDataAnalysisManagerLibraryLoader(void)::libSym) {
    AudioDataAnalysisManagerLibraryLoader(void)::libSym(v53);
  }
  BOOL v54 = (const void *)*((void *)this + 2102);
  if (v54) {
    CFRelease(v54);
  }
  unsigned int v55 = (const void *)*((void *)this + 2101);
  if (v55) {
    CFRelease(v55);
  }
  uint64_t v56 = (const void *)*((void *)this + 2100);
  if (v56) {
    CFRelease(v56);
  }
  uint64_t v57 = (const void *)*((void *)this + 2099);
  if (v57) {
    CFRelease(v57);
  }
  uint64_t v58 = (const void *)*((void *)this + 2098);
  if (v58) {
    CFRelease(v58);
  }
  unsigned int v59 = (const void *)*((void *)this + 2097);
  if (v59) {
    CFRelease(v59);
  }
  uint64_t v60 = (const void *)*((void *)this + 2096);
  if (v60) {
    CFRelease(v60);
  }
  int v61 = (const void *)*((void *)this + 2095);
  if (v61) {
    CFRelease(v61);
  }
  uint64_t v62 = (const void *)*((void *)this + 2094);
  if (v62) {
    CFRelease(v62);
  }
  BOOL v63 = (const void *)*((void *)this + 2093);
  if (v63) {
    CFRelease(v63);
  }
  caulk::details::lifetime_guard_base<VoiceProcessorV2>::~lifetime_guard_base((uint64_t)this + 16696);
  UInt32 v64 = (std::__shared_weak_count *)*((void *)this + 2085);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  uint64_t v65 = *((void *)this + 2083);
  *((void *)this + 2083) = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  if (*((unsigned char *)this + 16648)) {
    vp::objc::ID::~ID((VoiceProcessorV2 *)((char *)this + 16640));
  }
  unint64_t v66 = (const void *)*((void *)this + 2077);
  if (v66) {
    CFRelease(v66);
  }
  int v67 = (const void *)*((void *)this + 2073);
  if (v67) {
    CFRelease(v67);
  }
  unint64_t v68 = (const void *)*((void *)this + 2072);
  if (v68) {
    CFRelease(v68);
  }
  UInt32 v69 = (const void *)*((void *)this + 2071);
  if (v69) {
    CFRelease(v69);
  }
  int v70 = (const void *)*((void *)this + 2070);
  if (v70) {
    CFRelease(v70);
  }
  int v71 = (const void *)*((void *)this + 2069);
  if (v71) {
    CFRelease(v71);
  }
  unint64_t v72 = (const void *)*((void *)this + 2068);
  if (v72) {
    CFRelease(v72);
  }
  unsigned int v73 = (const void *)*((void *)this + 2067);
  if (v73) {
    CFRelease(v73);
  }
  unsigned int v74 = (const void *)*((void *)this + 2066);
  if (v74) {
    CFRelease(v74);
  }
  uint64_t v75 = (const void *)*((void *)this + 2065);
  if (v75) {
    CFRelease(v75);
  }
  UInt32 v76 = (const void *)*((void *)this + 2062);
  if (v76)
  {
    _Block_release(v76);
    *((void *)this + 2062) = 0;
  }
  int v77 = (const void *)*((void *)this + 2061);
  if (v77) {
    CFRelease(v77);
  }
  int v78 = (const void *)*((void *)this + 2060);
  if (v78) {
    CFRelease(v78);
  }
  int v79 = (const void *)*((void *)this + 2059);
  if (v79) {
    CFRelease(v79);
  }
  UInt32 v80 = (const void *)*((void *)this + 2058);
  if (v80) {
    CFRelease(v80);
  }
  caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::~lf_read_synchronized_write((uint64_t)this + 16368);
  uint64_t v81 = (const void *)*((void *)this + 2044);
  if (v81) {
    CFRelease(v81);
  }
  uint64_t v82 = (const void *)*((void *)this + 2043);
  if (v82) {
    CFRelease(v82);
  }
  vDSP_Length v83 = (const void *)*((void *)this + 2042);
  if (v83) {
    CFRelease(v83);
  }
  unsigned int v84 = (const void *)*((void *)this + 2041);
  if (v84) {
    CFRelease(v84);
  }
  unint64_t v85 = (const void *)*((void *)this + 2040);
  if (v85) {
    CFRelease(v85);
  }
  vDSP_Length v86 = (const void *)*((void *)this + 2039);
  if (v86) {
    CFRelease(v86);
  }
  CFTypeRef v87 = (const void *)*((void *)this + 2038);
  if (v87) {
    CFRelease(v87);
  }
  long long v88 = (const void *)*((void *)this + 2037);
  if (v88) {
    CFRelease(v88);
  }
  __int16 v89 = (std::__shared_weak_count *)*((void *)this + 2036);
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  if (*((char *)this + 16271) < 0) {
    operator delete(*((void **)this + 2031));
  }
  if (*((unsigned char *)this + 16208))
  {
    int v90 = (void *)*((void *)this + 2023);
    if (v90)
    {
      *((void *)this + 2024) = v90;
      operator delete(v90);
    }
  }
  if (*((unsigned char *)this + 16176))
  {
    long long v91 = (void *)*((void *)this + 2019);
    if (v91)
    {
      *((void *)this + 202std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v91;
      operator delete(v91);
    }
  }
  *(void *)AudioObjectPropertyAddress buf = (char *)this + 16112;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = (char *)this + 16088;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = (char *)this + 16064;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = (char *)this + 16040;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  double v92 = (std::__shared_weak_count *)*((void *)this + 1998);
  if (v92) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
  }
  __int16 v93 = (unsigned char *)*((void *)this + 1983);
  if (v93)
  {
    UInt32 v94 = (unsigned char *)*((void *)this + 1984);
    if (v94 != v93) {
      *((void *)this + 1984) = &v94[(v93 - v94 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v93);
    *((void *)this + 1983) = 0;
    *((void *)this + 1984) = 0;
  }
  uint64_t v95 = *((void *)this + 1977);
  *((void *)this + 1977) = 0;
  if (v95) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v96 = 0;
  __int16 v97 = (char *)this + 15784;
  do
  {
    myFreeABLDynamic((AudioBufferList **)&v97[v96]);
    *(void *)&v97[v96] = 0;
    v96 -= 24;
  }
  while (v96 != -288);
  uint64_t v98 = 0;
  __int16 v99 = (char *)this + 15488;
  do
  {
    myFreeABLDynamic((AudioBufferList **)&v99[v98]);
    *(void *)&v99[v98] = 0;
    v98 -= 24;
  }
  while (v98 != -288);
  uint64_t v100 = *((void *)this + 1889);
  *((void *)this + 1889) = 0;
  if (v100) {
    MEMORY[0x1C185D370](v100, 0x1000C4089CA3EB1);
  }
  *(void *)AudioObjectPropertyAddress buf = (char *)this + 14016;
  std::vector<std::vector<std::unique_ptr<VPTimeFreqConverter>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  for (uint64_t k = 0; k != -1072; k -= 8)
    vp::Audio_Capture::~Audio_Capture((VoiceProcessorV2 *)((char *)this + k + 14008));
  CADeprecated::CAAutoDelete<CALegacyLog>::set((void *)this + 1579, 0);
  CADeprecated::CAAutoDelete<CALegacyLog>::set((void *)this + 1578, 0);
  if (*((char *)this + 12623) < 0) {
    operator delete(*((void **)this + 1575));
  }
  VoiceProcessorV2::VPEchoProcessingParams::~VPEchoProcessingParams((VoiceProcessorV2 *)((char *)this + 4360));
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<VoiceProcessorV2::VoiceProcessorPropertyListenerBlockInfo>>>>::~__hash_table((uint64_t)this + 4312);
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2768));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2760));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2752));
  vp::Audio_Buffer::~Audio_Buffer((VoiceProcessorV2 *)((char *)this + 2744));
  std::unique_ptr<TuningPListMgr>::reset[abi:ne180100]((PListLogger ***)this + 341, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 2664));
  CADeprecated::CAMutex::~CAMutex((VoiceProcessorV2 *)((char *)this + 2576));
  CADeprecated::CAMutex::~CAMutex((VoiceProcessorV2 *)((char *)this + 2488));
  CADeprecated::CAMutex::~CAMutex((VoiceProcessorV2 *)((char *)this + 2392));
  CFTypeRef v102 = (void *)*((void *)this + 295);
  if (v102)
  {
    *((void *)this + 296) = v102;
    operator delete(v102);
  }
  __int16 v103 = (void *)*((void *)this + 292);
  if (v103)
  {
    *((void *)this + 293) = v103;
    operator delete(v103);
  }
  CAAudioChannelLayout::~CAAudioChannelLayout((atomic_uint **)this + 287);
  uint64_t v104 = (const void *)*((void *)this + 279);
  if (v104) {
    CFRelease(v104);
  }
  __int16 v105 = (void *)*((void *)this + 273);
  if (v105)
  {
    free(v105);
    *((void *)this + 273) = 0;
  }
  int v106 = (const void *)*((void *)this + 272);
  if (v106) {
    CFRelease(v106);
  }
  uint64_t v107 = (void *)*((void *)this + 270);
  if (v107)
  {
    free(v107);
    *((void *)this + 27std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  int v108 = (const void *)*((void *)this + 269);
  if (v108) {
    CFRelease(v108);
  }
  char v109 = (void *)*((void *)this + 266);
  if (v109)
  {
    *((void *)this + 267) = v109;
    operator delete(v109);
  }
  CFTypeRef v110 = (const void *)*((void *)this + 265);
  if (v110) {
    CFRelease(v110);
  }
  int v111 = (void *)*((void *)this + 262);
  if (v111)
  {
    *((void *)this + 263) = v111;
    operator delete(v111);
  }
  uint64_t v112 = (const void *)*((void *)this + 261);
  if (v112) {
    CFRelease(v112);
  }
  std::__optional_destruct_base<vp::utility::Audio_Buffer_Mixer,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 2000);
  uint64_t v113 = *((void *)this + 249);
  *((void *)this + 249) = 0;
  if (v113) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  if (*((unsigned char *)this + 1984))
  {
    *(void *)AudioObjectPropertyAddress buf = (char *)this + 1960;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  if (*((unsigned char *)this + 1952))
  {
    *(void *)AudioObjectPropertyAddress buf = (char *)this + 1928;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  int v114 = (unsigned char *)*((void *)this + 195);
  if (v114)
  {
    CFTypeRef v115 = (unsigned char *)*((void *)this + 196);
    if (v115 != v114) {
      *((void *)this + 196) = &v115[(v114 - v115 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v114);
    *((void *)this + 195) = 0;
    *((void *)this + 196) = 0;
  }
  int v116 = (unsigned char *)*((void *)this + 183);
  if (v116)
  {
    CFTypeRef v117 = (unsigned char *)*((void *)this + 184);
    if (v117 != v116) {
      *((void *)this + 184) = &v117[(v116 - v117 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v116);
    *((void *)this + 183) = 0;
    *((void *)this + 184) = 0;
  }
  if (*((unsigned char *)this + 1392))
  {
    *(void *)AudioObjectPropertyAddress buf = (char *)this + 1368;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  int v118 = (unsigned char *)*((void *)this + 169);
  if (v118)
  {
    CFTypeRef v119 = (unsigned char *)*((void *)this + 170);
    if (v119 != v118) {
      *((void *)this + 17std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = &v119[(v118 - v119 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v118);
    *((void *)this + 169) = 0;
    *((void *)this + 17std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  uint64_t v120 = (unsigned char *)*((void *)this + 164);
  if (v120)
  {
    int v121 = (unsigned char *)*((void *)this + 165);
    if (v121 != v120) {
      *((void *)this + 165) = &v121[(v120 - v121 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v120);
    *((void *)this + 164) = 0;
    *((void *)this + 165) = 0;
  }
  unsigned __int8 v122 = (unsigned char *)*((void *)this + 155);
  if (v122)
  {
    char v123 = (unsigned char *)*((void *)this + 156);
    if (v123 != v122) {
      *((void *)this + 156) = &v123[(v122 - v123 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v122);
    *((void *)this + 155) = 0;
    *((void *)this + 156) = 0;
  }
  uint64_t v124 = *((void *)this + 150);
  if (v124)
  {
    (*(void (**)(uint64_t))(*(void *)v124 + 8))(v124);
    *((void *)this + 15std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 141, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 140, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 139, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)this + 138, 0);
  long long v125 = (void *)*((void *)this + 57);
  if (v125) {
    free(v125);
  }
  char v126 = (void *)*((void *)this + 54);
  if (v126) {
    free(v126);
  }
  uint64_t v127 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v127) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v128 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v128) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  uint64_t v129 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v129) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  __int16 v130 = (const void *)*((void *)this + 12);
  if (v130)
  {
    _Block_release(v130);
    *((void *)this + 12) = 0;
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_1BB61083C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

OpaqueAudioComponentInstance *VoiceProcessorV2::DisposeAU(VoiceProcessorV2 *this, int a2, int a3, OpaqueAudioComponentInstance **a4, int a5)
{
  uint64_t result = *a4;
  if (*a4)
  {
    if (*((unsigned char *)this + 15961)) {
      BOOL v8 = a5 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      v13[0] = a2;
      v13[1] = a3;
      uint64_t v14 = 1634758764;
      int v15 = result;
      BOOL v9 = VoiceProcessorV2::AUIsInDownLinkProcessingChain(this, (const AUPBUnit *)v13);
      uint64_t v10 = 12576;
      if (v9) {
        uint64_t v10 = 12584;
      }
      float v11 = *(const AUPBUnit ***)((char *)this + v10);
      unint64_t Index = VoiceProcessorV2::VPAUProcessingBlock::FindIndex(v11[3], v11[4], (uint64_t)v13);
      if ((Index & 0x80000000) == 0) {
        (*((void (**)(const AUPBUnit **, unint64_t))*v11 + 11))(v11, Index);
      }
      uint64_t result = *a4;
    }
    uint64_t result = (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
    *a4 = 0;
  }
  return result;
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_20219()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0) {
    goto LABEL_5;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    uint64_t v3 = dlerror();
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v1 = dlerror();
    int v2 = 136315138;
    uint64_t v3 = v1;
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t VoiceProcessorV2::GetChatFlavor(VoiceProcessorV2 *this)
{
  uint64_t v1 = (unsigned __int8 *)this + 16600;
  if (*((unsigned char *)this + 16632)) {
    return 0;
  }
  if (*((unsigned char *)this + 2246)) {
    return 2;
  }
  if (!*((unsigned char *)this + 2268)) {
    return *(unsigned int *)v1;
  }
  if (*((void *)this + 295) == *((void *)this + 296) || *((void *)this + 292) == *((void *)this + 293)) {
    return 0;
  }
  BOOL IsRefPortOwningDeviceBluetoothAppleProduct = VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct((int **)this);
  if (IsRefPortOwningDeviceBluetoothAppleProduct) {
    int v6 = v1[88];
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = 0;
  unsigned int v8 = *((_DWORD *)this + 596) & 0xFFFFFFFE;
  while (1)
  {
    if (*(_DWORD *)&VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7] != **((_DWORD **)this + 295)
      || *(_DWORD *)&VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 4] != **((_DWORD **)this + 292))
    {
      goto LABEL_27;
    }
    char v9 = !IsRefPortOwningDeviceBluetoothAppleProduct;
    if (!VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 9]) {
      char v9 = 1;
    }
    if (v9)
    {
      if ((IsRefPortOwningDeviceBluetoothAppleProduct ^ (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 9] != 0))) {
        goto LABEL_27;
      }
    }
    else if (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 8] != v6)
    {
      goto LABEL_27;
    }
    if (v8 != 1647718502 || !VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 11]) {
      break;
    }
    uint64_t v10 = &VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7];
    if (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 10] == (v8 == 1647718502)) {
      return *((unsigned int *)v10 + 3);
    }
LABEL_27:
    uint64_t v2 = 0;
    v7 += 16;
    if (v7 == 320) {
      return v2;
    }
  }
  if ((v8 == 1647718502) != (VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7 + 11] != 0)) {
    goto LABEL_27;
  }
  uint64_t v10 = &VoiceProcessorV2::GetAutomaticChatFlavor(void)const::sRouteConfigurations[v7];
  return *((unsigned int *)v10 + 3);
}

void VoiceProcessorV2::GetHardwareModelNameForTuning(std::string *this, uint64_t a2)
{
  uint64_t v2 = 0;
  char v3 = 0;
  do
  {
    BOOL v4 = dword_1BB8A9780[v2] == **(_DWORD **)(a2 + 2336) && dword_1BB8A9798[v2] == **(_DWORD **)(a2 + 2360);
    v3 |= v4;
    ++v2;
  }
  while (v2 != 6);
  VoiceProcessorV2::GetHardwareModelNameForTuning(this, a2, v3 & 1);
}

void VoiceProcessorV2::GetHardwareModelNameForTuning(std::string *this, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(this, "Generic");
    return;
  }
  if (*(unsigned char *)(a2 + 60))
  {
    GetHWIdentifierString((uint64_t)&v7, *(void *)(a2 + 56));
    if (!v9)
    {
      std::string::basic_string[abi:ne180100]<0>(this, "");
      return;
    }
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
    std::string::size_type v4 = v8;
LABEL_10:
    this->__r_.__value_.__r.__words[2] = v4;
    return;
  }
  if ((*(char *)(a2 + 55) & 0x80000000) == 0)
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
    std::string::size_type v4 = *(void *)(a2 + 48);
    goto LABEL_10;
  }
  std::string::size_type v5 = *(void *)(a2 + 40);
  int v6 = *(const std::string::value_type **)(a2 + 32);

  std::string::__init_copy_ctor_external(this, v6, v5);
}

void VoiceProcessorV2::GetVersionNameForTuning(std::string *this, uint64_t a2)
{
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  std::to_string(&v5, v3);
  std::string::size_type v4 = std::string::insert(&v5, 0, "VPV", 3uLL);
  *this = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1BB6110B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::GetDeviceCodeNameForTuning(VoiceProcessorV2 *this, uint64_t a2)
{
  uint64_t v2 = 0;
  char v3 = 0;
  do
  {
    BOOL v4 = dword_1BB8A9780[v2] == **(_DWORD **)(a2 + 2336) && dword_1BB8A9798[v2] == **(_DWORD **)(a2 + 2360);
    v3 |= v4;
    ++v2;
  }
  while (v2 != 6);
  VoiceProcessorV2::GetDeviceCodeNameForTuning(this, a2, v3 & 1);
}

void VoiceProcessorV2::GetDeviceCodeNameForTuning(VoiceProcessorV2 *this, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(this, "gen");
  }
  else
  {
    int v4 = *(_DWORD *)(a2 + 68);
    switch(v4)
    {
      case 2:
      case 3:
LABEL_15:
        int v5 = 2;
        break;
      case 4:
      case 5:
      case 9:
      case 17:
      case 18:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 46:
      case 72:
      case 73:
      case 74:
      case 75:
      case 77:
      case 78:
      case 80:
      case 81:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 92:
      case 93:
      case 96:
      case 97:
      case 100:
      case 101:
      case 104:
      case 105:
LABEL_6:
        int v5 = *(_DWORD *)(a2 + 68);
        break;
      case 6:
      case 7:
      case 8:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 29:
      case 30:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 76:
      case 79:
      case 82:
      case 89:
      case 90:
      case 91:
      case 94:
      case 95:
      case 98:
      case 99:
      case 102:
      case 103:
LABEL_25:
        int v5 = 0;
        break;
      case 10:
LABEL_16:
        int v5 = 10;
        break;
      default:
        int v5 = 139;
        switch(v4)
        {
          case 125:
          case 160:
          case 169:
            goto LABEL_6;
          case 134:
          case 138:
            int v5 = 138;
            break;
          case 135:
          case 139:
            goto LABEL_7;
          case 140:
          case 146:
            int v5 = 146;
            break;
          case 141:
          case 147:
            int v5 = 147;
            break;
          case 148:
          case 150:
            int v5 = 150;
            break;
          case 149:
          case 151:
            int v5 = 151;
            break;
          case 152:
          case 154:
            int v5 = 154;
            break;
          case 153:
          case 155:
            int v5 = 155;
            break;
          case 156:
          case 158:
            int v5 = 158;
            break;
          case 157:
          case 159:
            int v5 = 159;
            break;
          case 180:
            goto LABEL_16;
          case 181:
          case 185:
            goto LABEL_15;
          default:
            goto LABEL_25;
        }
        break;
    }
LABEL_7:
    CFStringRef v6 = PlatformUtilities_iOS::CopyProductTypeFilePrefix(v5);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFStringGetTypeID())
      {
        applesauce::CF::convert_to<std::string,0>(v7, (uint64_t)this);
        CFRelease(v7);
        return;
      }
      CFRelease(v7);
    }
    std::string::basic_string[abi:ne180100]<0>(this, "");
  }
}

void sub_1BB6112CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

std::string *VoiceProcessorV2::GetRouteSpecificGenericTuningSubDir(std::string *this, uint64_t a2)
{
  uint64_t v2 = this;
  if (**(_DWORD **)(a2 + 2336) == 1885892727
    && **(_DWORD **)(a2 + 2360) == 1886222185
    && *(_DWORD *)(a2 + 2384) == 1781740087)
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
    this->__r_.__value_.__r.__words[2] = 0;
    this = std::string::append[abi:ne180100]<char const*,0>(this, "Accessory/AID6001", "");
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
    this->__r_.__value_.__s.__data_[0] = 0;
  }
  v2[1].__r_.__value_.__s.__data_[0] = v3;
  return this;
}

void sub_1BB611608(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(const void **)(v2 + 8);
    if (v3)
    {
      _Block_release(v3);
      *(void *)(v2 + 8) = 0;
    }
    MEMORY[0x1C185D370](v2, 0x1080C409070E284);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0>(dispatch_queue_s *,VoiceProcessorV2::NotifyPropertyChanged(unsigned int)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = a1;
  (*(void (**)(void, void))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  return std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged::$_0>>::~unique_ptr[abi:ne180100](&v2);
}

void sub_1BB6116C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<VoiceProcessorV2::NotifyPropertyChanged::$_0,std::default_delete<VoiceProcessorV2::NotifyPropertyChanged::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(VoiceProcessorV2 *this)
{
  if (*((unsigned char *)this + 16241)) {
    return 0;
  }
  if (!*((_DWORD *)this + 286)) {
    return 1;
  }
  int v3 = _os_feature_enabled_simple_impl();
  unsigned int v4 = *((_DWORD *)this + 18);
  if (v3 && v4 == 52)
  {
    int v5 = *((_DWORD *)this + 596);
    if (v5 == 1886613611) {
      return 0;
    }
    int v6 = 0;
    int v7 = *((unsigned __int8 *)this + 2244);
  }
  else
  {
    int v6 = 0;
    int v7 = *((unsigned __int8 *)this + 2244);
    int v5 = *((_DWORD *)this + 596);
    if (v4 <= 0x26 && ((1 << v4) & 0x4030000000) != 0) {
      int v6 = _os_feature_enabled_impl();
    }
  }
  unsigned int v8 = v6 ^ 1;
  if (v5 == 1781740087) {
    unsigned int v8 = 0;
  }
  if (v7) {
    return 0;
  }
  else {
    return v8;
  }
}

void VoiceProcessorV2::SrcAndAppendToRingBuffer(VoiceProcessorV2 *this, int a2, uint64_t a3, AudioBufferList *a4, _DWORD *a5, AudioBufferList *a6, AudioTimeStamp *a7, const AudioTimeStamp *a8)
{
  int v9 = (int)a6;
  uint64_t v10 = a3;
  uint64_t v12 = (char *)this + 15961;
  uint64_t v13 = 1960;
  if (a2) {
    uint64_t v13 = 1928;
  }
  uint64_t v119 = v13;
  if (a2) {
    uint64_t v14 = (char *)this + 1928;
  }
  else {
    uint64_t v14 = (char *)this + 1960;
  }
  uint64_t v15 = 1328;
  if (a2) {
    uint64_t v15 = 1288;
  }
  uint64_t v116 = v15;
  if (a2) {
    unsigned int v16 = (char *)this + 1288;
  }
  else {
    unsigned int v16 = (char *)this + 1328;
  }
  unsigned __int32 v17 = (_DWORD *)*((void *)this + 179);
  uint64_t v18 = 1064;
  if (a2) {
    uint64_t v18 = 1056;
  }
  unint64_t v19 = *(unsigned int **)((char *)this + v18);
  int v20 = a2 ^ 1;
  if ((a2 ^ 1))
  {
    if (*v12 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 6, a3, a4), *v12) || v12[1])
    {
      unsigned int v21 = 3;
      goto LABEL_22;
    }
  }
  else if (*v12 && (VoiceProcessorV2::InjectionFilesReadSignal(this, 5, a3, a4), *v12) || v12[1])
  {
    unsigned int v21 = 2;
LABEL_22:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)this, v21, v10, a4, a7);
  }
  int v22 = v20 & v9;
  if (v14[24])
  {
    unint64_t v23 = v14;
    __int16 v24 = v17;
    CFTypeRef v117 = v23;
    uint64_t v110 = *((void *)v23 + 1);
    char v25 = *(CA::AudioSampleRateConverter ****)((char *)this + v119);
    unint64_t mNumberBuffers = a4->mNumberBuffers;
    uint64_t v27 = v19;
    uint64_t v28 = *v19;
    unsigned int ExpectedNumberOfOutputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(**v25);
    unsigned int v123 = v10;
    unsigned int v124 = ExpectedNumberOfOutputFrames;
    unsigned int v113 = v10;
    int v114 = v27;
    CFTypeRef v115 = v24;
    if (v28)
    {
      unint64_t v30 = 0;
      unint64_t v31 = (v110 - (uint64_t)v25) >> 3;
      int v32 = (AudioBuffer *)(v27 + 2);
      do
      {
        v122.unint64_t mNumberBuffers = 1;
        v122.mBuffers[0] = *v32;
        v121.unint64_t mNumberBuffers = 1;
        if (v30 >= mNumberBuffers) {
          unint64_t v33 = (mNumberBuffers - 1);
        }
        else {
          unint64_t v33 = v30;
        }
        v121.mBuffers[0] = a4->mBuffers[v33];
        if (v31 <= v30) {
          goto LABEL_33;
        }
        uint64_t v34 = *(void *)((char *)this + v119);
        if (v30 >= (*((void *)v117 + 1) - v34) >> 3) {
LABEL_142:
        }
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        BOOL v35 = *(CA::AudioSampleRateConverter ***)(v34 + 8 * v30);
        if (v35) {
          VoiceProcessor::SampleRateConverter::Convert(v35, &v123, &v124, &v121, &v122);
        }
        else {
LABEL_33:
        }
          bzero(v122.mBuffers[0].mData, v122.mBuffers[0].mDataByteSize);
        ++v30;
        ++v32;
      }
      while (v28 != v30);
      unsigned int v36 = v124;
    }
    else
    {
      unsigned int v36 = ExpectedNumberOfOutputFrames;
    }
    int v53 = *v27;
    if (*v27 == *((_DWORD *)v16 + 1))
    {
      unsigned int v37 = 0;
      if (v36)
      {
        int v54 = *(_DWORD *)((char *)this + v116);
        unsigned int v55 = v54 - *((_DWORD *)v16 + 2);
        unsigned int v56 = v113;
        if (v55)
        {
          char v112 = v22;
          if (v55 >= v36) {
            unsigned int v37 = v36;
          }
          else {
            unsigned int v37 = v54 - *((_DWORD *)v16 + 2);
          }
          unsigned int v57 = v54 - *((_DWORD *)v16 + 4);
          if (v57 >= v37) {
            uint64_t v58 = v37;
          }
          else {
            uint64_t v58 = v57;
          }
          if (v53)
          {
            unint64_t v59 = 0;
            uint64_t v60 = (const void **)(v114 + 4);
            do
            {
              int v61 = *v60;
              v60 += 2;
              memcpy((void *)(*((void *)v16 + 3)+ 4 * (*((_DWORD *)v16 + 4) + *(_DWORD *)((char *)this + v116) * v59++)), v61, 4 * v58);
              unint64_t v62 = *((unsigned int *)v16 + 1);
            }
            while (v59 < v62);
            unsigned int v56 = v113;
            if (v37 > v57)
            {
              if (v62)
              {
                unint64_t v63 = 0;
                UInt32 v64 = (uint64_t *)(v114 + 4);
                do
                {
                  uint64_t v65 = *v64;
                  v64 += 2;
                  memcpy((void *)(*((void *)v16 + 3) + 4 * (*(_DWORD *)((char *)this + v116) * v63++)), (const void *)(v65 + 4 * v58), 4 * (v37 - v58));
                }
                while (v63 < *((unsigned int *)v16 + 1));
              }
            }
          }
          *((_DWORD *)v16 + 2) += v37;
          unsigned int v66 = *((_DWORD *)v16 + 4) + v37;
          *((_DWORD *)v16 + 4) = v66;
          unsigned int v67 = *(_DWORD *)((char *)this + v116);
          BOOL v51 = v66 >= v67;
          unsigned int v68 = v66 - v67;
          if (v51) {
            *((_DWORD *)v16 + 4) = v68;
          }
          LOBYTE(v22) = v112;
        }
        if ((v22 & 1) == 0) {
          goto LABEL_135;
        }
        goto LABEL_81;
      }
    }
    else
    {
      unsigned int v37 = 0;
    }
    unsigned int v56 = v113;
    if ((v22 & 1) == 0)
    {
LABEL_135:
      LODWORD(v1std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v36;
      goto LABEL_136;
    }
LABEL_81:
    uint64_t v69 = *((void *)this + 172);
    int v70 = (CA::AudioSampleRateConverter ***)*((void *)this + 171);
    unint64_t v71 = *a5;
    uint64_t v72 = *v24;
    unsigned int v73 = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(**v70);
    unsigned int v123 = v56;
    unsigned int v124 = v73;
    if (v72)
    {
      unint64_t v74 = 0;
      unint64_t v75 = (v69 - (uint64_t)v70) >> 3;
      UInt32 v76 = (AudioBuffer *)(v24 + 2);
      do
      {
        v122.unint64_t mNumberBuffers = 1;
        v122.mBuffers[0] = *v76;
        v121.unint64_t mNumberBuffers = 1;
        if (v74 >= v71) {
          unint64_t v77 = (v71 - 1);
        }
        else {
          unint64_t v77 = v74;
        }
        v121.mBuffers[0] = *(AudioBuffer *)&a5[4 * v77 + 2];
        if (v75 <= v74) {
          goto LABEL_90;
        }
        uint64_t v78 = *((void *)this + 171);
        if (v74 >= (*((void *)this + 172) - v78) >> 3) {
          goto LABEL_142;
        }
        int v79 = *(CA::AudioSampleRateConverter ***)(v78 + 8 * v74);
        if (v79) {
          VoiceProcessor::SampleRateConverter::Convert(v79, &v123, &v124, &v121, &v122);
        }
        else {
LABEL_90:
        }
          bzero(v122.mBuffers[0].mData, v122.mBuffers[0].mDataByteSize);
        ++v74;
        ++v76;
      }
      while (v72 != v74);
      unsigned int v36 = v124;
      __int16 v24 = v115;
    }
    else
    {
      unsigned int v36 = v73;
    }
    if (*v24 == *((_DWORD *)this + 361))
    {
      unsigned int v37 = 0;
      if (v36)
      {
        int v94 = *((_DWORD *)this + 360);
        unsigned int v95 = v94 - *((_DWORD *)this + 362);
        if (v95)
        {
          if (v95 >= v36) {
            unsigned int v37 = v36;
          }
          else {
            unsigned int v37 = v94 - *((_DWORD *)this + 362);
          }
          unsigned int v96 = v94 - *((_DWORD *)this + 364);
          if (v96 >= v37) {
            uint64_t v97 = v37;
          }
          else {
            uint64_t v97 = v96;
          }
          if (*v24)
          {
            unint64_t v98 = 0;
            __int16 v99 = (const void **)(v24 + 4);
            do
            {
              uint64_t v100 = *v99;
              v99 += 2;
              memcpy((void *)(*((void *)this + 183)+ 4 * (*((_DWORD *)this + 364) + *((_DWORD *)this + 360) * v98++)), v100, 4 * v97);
              unint64_t v101 = *((unsigned int *)this + 361);
            }
            while (v98 < v101);
            if (v37 > v96 && v101)
            {
              unint64_t v102 = 0;
              __int16 v103 = (uint64_t *)(v24 + 4);
              do
              {
                uint64_t v104 = *v103;
                v103 += 2;
                memcpy((void *)(*((void *)this + 183) + 4 * (*((_DWORD *)this + 360) * v102++)), (const void *)(v104 + 4 * v97), 4 * (v37 - v97));
              }
              while (v102 < *((unsigned int *)this + 361));
            }
          }
          *((_DWORD *)this + 362) += v37;
          unsigned int v105 = *((_DWORD *)this + 364) + v37;
          *((_DWORD *)this + 364) = v105;
          unsigned int v106 = *((_DWORD *)this + 360);
          BOOL v51 = v105 >= v106;
          unsigned int v107 = v105 - v106;
          if (v51) {
            *((_DWORD *)this + 364) = v107;
          }
        }
      }
    }
    else
    {
      unsigned int v37 = 0;
    }
    goto LABEL_135;
  }
  if (a4->mNumberBuffers == *((_DWORD *)v16 + 1))
  {
    unsigned int v37 = 0;
    if (v10)
    {
      int v38 = *(_DWORD *)((char *)this + v116);
      unsigned int v39 = v38 - *((_DWORD *)v16 + 2);
      if (v39)
      {
        int v111 = v20 & v9;
        if (v39 >= v10) {
          unsigned int v37 = v10;
        }
        else {
          unsigned int v37 = v38 - *((_DWORD *)v16 + 2);
        }
        unsigned int v40 = v38 - *((_DWORD *)v16 + 4);
        if (v40 >= v37) {
          uint64_t v41 = v37;
        }
        else {
          uint64_t v41 = v40;
        }
        if (a4->mNumberBuffers)
        {
          unint64_t v42 = 0;
          p_mData = &a4->mBuffers[0].mData;
          do
          {
            int v44 = *p_mData;
            p_mData += 2;
            memcpy((void *)(*((void *)v16 + 3)+ 4 * (*((_DWORD *)v16 + 4) + *(_DWORD *)((char *)this + v116) * v42++)), v44, 4 * v41);
            unint64_t v45 = *((unsigned int *)v16 + 1);
          }
          while (v42 < v45);
          if (v37 > v40 && v45)
          {
            unint64_t v46 = 0;
            uint64_t v47 = &a4->mBuffers[0].mData;
            do
            {
              uint64_t v48 = (char *)*v47;
              v47 += 2;
              memcpy((void *)(*((void *)v16 + 3) + 4 * (*(_DWORD *)((char *)this + v116) * v46++)), &v48[4 * v41], 4 * (v37 - v41));
            }
            while (v46 < *((unsigned int *)v16 + 1));
          }
        }
        *((_DWORD *)v16 + 2) += v37;
        unsigned int v49 = *((_DWORD *)v16 + 4) + v37;
        *((_DWORD *)v16 + 4) = v49;
        unsigned int v50 = *(_DWORD *)((char *)this + v116);
        BOOL v51 = v49 >= v50;
        unsigned int v52 = v49 - v50;
        if (v51) {
          *((_DWORD *)v16 + 4) = v52;
        }
        int v22 = v111;
      }
    }
  }
  else
  {
    unsigned int v37 = 0;
  }
  if (v22)
  {
    if (*a5 == *((_DWORD *)this + 361))
    {
      unsigned int v37 = 0;
      if (v10)
      {
        int v80 = *((_DWORD *)this + 360);
        unsigned int v81 = v80 - *((_DWORD *)this + 362);
        if (v81)
        {
          if (v81 >= v10) {
            unsigned int v37 = v10;
          }
          else {
            unsigned int v37 = v80 - *((_DWORD *)this + 362);
          }
          unsigned int v82 = v80 - *((_DWORD *)this + 364);
          if (v82 >= v37) {
            uint64_t v83 = v37;
          }
          else {
            uint64_t v83 = v82;
          }
          if (*a5)
          {
            unint64_t v84 = 0;
            unint64_t v85 = (const void **)(a5 + 4);
            do
            {
              vDSP_Length v86 = *v85;
              v85 += 2;
              memcpy((void *)(*((void *)this + 183)+ 4 * (*((_DWORD *)this + 364) + *((_DWORD *)this + 360) * v84++)), v86, 4 * v83);
              unint64_t v87 = *((unsigned int *)this + 361);
            }
            while (v84 < v87);
            if (v37 > v82 && v87)
            {
              unint64_t v88 = 0;
              __int16 v89 = (uint64_t *)(a5 + 4);
              do
              {
                uint64_t v90 = *v89;
                v89 += 2;
                memcpy((void *)(*((void *)this + 183) + 4 * (*((_DWORD *)this + 360) * v88++)), (const void *)(v90 + 4 * v83), 4 * (v37 - v83));
              }
              while (v88 < *((unsigned int *)this + 361));
            }
          }
          *((_DWORD *)this + 362) += v37;
          unsigned int v91 = *((_DWORD *)this + 364) + v37;
          *((_DWORD *)this + 364) = v91;
          unsigned int v92 = *((_DWORD *)this + 360);
          BOOL v51 = v91 >= v92;
          unsigned int v93 = v91 - v92;
          if (v51) {
            *((_DWORD *)this + 364) = v93;
          }
        }
      }
    }
    else
    {
      unsigned int v37 = 0;
    }
  }
LABEL_136:
  if (v37 < v10)
  {
    float v108 = (float)*((unsigned int *)this + 3128);
    float v109 = (float)*((unsigned int *)this + 3129);
    VoiceProcessorV2::LogIOError((uint64_t)this, 25.001, v108, v109, 0.0, "srcandappendtoringbuff: overflow?!", a3, a4, a5, a6, a7, a8);
  }
}

uint64_t VoiceProcessorV2::InstantiateAU(VoiceProcessorV2 *this, OSType a2, OSType a3, OpaqueAudioComponentInstance **a4, int a5)
{
  *(void *)&v59[5] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (char *)this + 15961;
  if (*a4) {
    VoiceProcessorV2::DisposeAU(this, a2, a3, a4, a5);
  }
  inDesc.componentType = a2;
  inDesc.componentSubType = a3;
  *(void *)&inDesc.componentManufacturer = 1634758764;
  inDesc.componentFlagsMasuint64_t k = 0;
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unsigned int v16 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      unsigned __int32 v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v51, a3);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unsigned int v55 = "VoiceProcessor_v2.cpp";
        __int16 v56 = 1024;
        int v57 = 2306;
        __int16 v58 = 2080;
        *(void *)unint64_t v59 = v51;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> InstantiateAU: couldn't find component 'aufx'|%s AU", buf, 0x1Cu);
      }
    }
    uint64_t v18 = (int *)*((void *)this + 1578);
    if (v18 && (*v10 || v10[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v19 = VPLogScope(void)::scope;
      CAX4CCString::CAX4CCString((CAX4CCString *)buf, a3);
      CALegacyLog::log(v18, 1, v19, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2306, "InstantiateAU", "InstantiateAU: couldn't find component 'aufx'|%s AU");
    }
    return 4294957891;
  }
  if (AudioComponentInstanceNew(Next, a4))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v12 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v13 = (*v12 ? *v12 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v51, a3);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unsigned int v55 = "VoiceProcessor_v2.cpp";
        __int16 v56 = 1024;
        int v57 = 2293;
        __int16 v58 = 2080;
        *(void *)unint64_t v59 = v51;
        _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> InstantiateAU: couldn't instantiate 'aufx'|%s AU", buf, 0x1Cu);
      }
    }
    uint64_t v14 = (int *)*((void *)this + 1578);
    if (v14 && (*v10 || v10[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v15 = VPLogScope(void)::scope;
      CAX4CCString::CAX4CCString((CAX4CCString *)buf, a3);
      CALegacyLog::log(v14, 1, v15, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 2293, "InstantiateAU", "InstantiateAU: couldn't instantiate 'aufx'|%s AU");
    }
    return 4294957891;
  }
  if (*v10) {
    BOOL v21 = a5 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    v51[0] = a2;
    v51[1] = a3;
    int v22 = *a4;
    uint64_t v52 = 1634758764;
    int v53 = v22;
    BOOL v23 = VoiceProcessorV2::AUIsInDownLinkProcessingChain(this, (const AUPBUnit *)v51);
    uint64_t v24 = 12576;
    if (v23) {
      uint64_t v24 = 12584;
    }
    char v25 = *(AUProcessingBlockBase **)((char *)this + v24);
    if (a3 == 1635284580)
    {
      if (v22 == *((OpaqueAudioComponentInstance **)this + 1559))
      {
        uint64_t v36 = 0;
        unsigned int v28 = 0;
        do
        {
          if (*(void *)((char *)this + v36 + 3504)) {
            ++v28;
          }
          v36 += 8;
        }
        while (v36 != 496);
        goto LABEL_91;
      }
    }
    else if (a3 == 1635284597 && v22 == *((OpaqueAudioComponentInstance **)this + 1558))
    {
      uint64_t v26 = 0;
      int32x4_t v27 = 0uLL;
      do
      {
        int32x4_t v27 = vsubq_s32(v27, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)((char *)this + v26 + 2776)), (int32x4_t)vceqzq_s64(*(int64x2_t *)((char *)this + v26 + 2792)))));
        v26 += 32;
      }
      while (v26 != 576);
      unsigned int v28 = vaddvq_s32(v27);
LABEL_91:
      vDSP_Length v43 = (const AUPBUnit *)*((void *)v25 + 3);
      int v44 = (const AUPBUnit *)*((void *)v25 + 4);
      unsigned int Index = VoiceProcessorV2::VPAUProcessingBlock::FindIndex(v43, v44, (uint64_t)v51);
      if ((v28 & 0x80000000) == 0)
      {
        unsigned int v46 = Index;
        if (Index != v28)
        {
          if ((Index & 0x80000000) != 0)
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3) >= v28) {
              uint64_t v49 = v28;
            }
            else {
              uint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3);
            }
            AUProcessingBlockBase::InsertAUAtIndex(v25, v49, (const AUPBUnit *)v51);
            AUPBRegisterAU();
            *(_DWORD *)AudioObjectPropertyAddress buf = 1635087726;
            AUPBPropertiesChanged();
          }
          else if (Index > v28)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v47 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              uint64_t v48 = (*v47 ? *v47 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                unsigned int v55 = "vpDebug_TuningSupport.cpp";
                __int16 v56 = 1024;
                int v57 = 133;
                __int16 v58 = 1024;
                v59[0] = v28;
                LOWORD(v59[1]) = 1024;
                *(_DWORD *)((char *)&v59[1] + 2) = v46;
                _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d VoiceProcessorV2::VPAUProcessingBlock::InsertAUIntoProcessingBlock index proposed=%d, current=%d !?", buf, 0x1Eu);
              }
            }
          }
        }
      }
      return 0;
    }
    unint64_t v29 = 0;
    BOOL v30 = 0;
    while (1)
    {
      uint64_t v31 = 0;
      int v32 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray;
      while (1)
      {
        int v33 = *v32;
        v32 += 18;
        if (v33 == v29) {
          break;
        }
        if (++v31 == 72)
        {
          int v34 = 0;
          goto LABEL_57;
        }
      }
      int v34 = VoiceProcessorV2::VPUplinkIndexToSubTypeArray[18 * v31 + 1];
LABEL_57:
      if (v34 == a3 && v22 == *((OpaqueAudioComponentInstance **)this + v29 + 347)) {
        break;
      }
      BOOL v30 = v29++ > 0x46;
      if (v29 == 72) {
        goto LABEL_74;
      }
    }
    if (v29)
    {
      uint64_t v35 = 0;
      unsigned int v28 = 0;
      do
      {
        if (*((void *)this + v35 + 347)) {
          ++v28;
        }
        ++v35;
      }
      while (v29 != v35);
    }
    else
    {
      unsigned int v28 = 0;
    }
    if (!v30) {
      goto LABEL_91;
    }
LABEL_74:
    uint64_t v37 = 0;
    while (1)
    {
      uint64_t v38 = 0;
      unsigned int v39 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray;
      while (1)
      {
        int v40 = *v39;
        v39 += 18;
        if (v40 == v37) {
          break;
        }
        if (++v38 == 62)
        {
          int v41 = 0;
          goto LABEL_80;
        }
      }
      int v41 = VoiceProcessorV2::VPDownlinkIndexToSubTypeArray[18 * v38 + 1];
LABEL_80:
      if (v41 == a3 && v22 == *((OpaqueAudioComponentInstance **)this + v37 + 438)) {
        break;
      }
      if (++v37 == 62)
      {
        unsigned int v28 = -1;
        goto LABEL_91;
      }
    }
    if (v37)
    {
      uint64_t v42 = 0;
      unsigned int v28 = 0;
      do
      {
        if (*((void *)this + v42 + 438)) {
          ++v28;
        }
        ++v42;
      }
      while (v37 != v42);
    }
    else
    {
      unsigned int v28 = 0;
    }
    goto LABEL_91;
  }
  return 0;
}

void VoiceProcessorV2::SignalParamSwitchMix(AudioUnit *this, int a2, int a3, unsigned char *a4, BOOL *a5)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  outCFNumberRef Value = 2.0;
  if (a3)
  {
    AudioUnitGetParameter(this[377], 0x1Cu, 0, 0, &outValue);
    unsigned int v8 = outValue;
    if (outValue == 2) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = outValue;
    }
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v9 = 0;
  }
  if (!a2) {
    unsigned int v8 = v9;
  }
  AudioUnit v10 = this[583];
  if ((v10 & 0x40000000) != 0 && (*((unsigned char *)this + 4683) & 0x40) != 0 && this[377]
    || (v10 & 0x80000000) != 0 && (*((unsigned char *)this + 4683) & 0x80) != 0 && this[378])
  {
    if (v8 == 2)
    {
      memcpy(*((void **)this[429] + 2), *((const void **)this[430] + 2), *((unsigned int *)this + 1073));
      vDSP_Length v12 = *((unsigned int *)this + 127);
      memcpy(*((void **)this[435] + 2 * *((unsigned int *)this + 1042) + 2), *((const void **)this[505] + 2), 4 * (2 * v12));
      memcpy(*((void **)this[435] + 2 * *((unsigned int *)this + 1043) + 2), *((const void **)this[505] + 4), 4 * (2 * *((_DWORD *)this + 127)));
      AudioUnit v13 = this[435];
      uint64_t v14 = (const float *)*((void *)v13 + 2);
      uint64_t v15 = (const float *)*((void *)v13 + 4);
      AudioUnit v16 = this[538];
      unsigned __int32 v17 = (const float *)*((void *)v16 + 2);
      uint64_t v18 = (const float *)*((void *)v16 + 4);
      uint64_t v19 = (float *)*((void *)this[505] + 2);
      int v20 = &v19[v12];
      BOOL v21 = (float *)*((void *)this[436] + 2);
      vDSP_vmul(v14, 1, v17, 1, v19, 1, (2 * v12));
      vDSP_vmul(v15, 1, v18, 1, v21, 1, (2 * v12));
      vDSP_vadd(v21, 1, v19, 1, v19, 1, (2 * v12));
      vDSP_vsub(v20, 1, v19, 1, v19, 1, v12);
      vDSP_vmul(v14, 1, &v17[v12], 1, v21, 1, v12);
      vDSP_vmul(&v14[v12], 1, v17, 1, &v21[v12], 1, v12);
      vDSP_vadd(v21, 1, &v21[v12], 1, v20, 1, v12);
      vDSP_vmul(v15, 1, &v18[v12], 1, v21, 1, v12);
      vDSP_vmul(&v15[v12], 1, v18, 1, &v21[v12], 1, v12);
      vDSP_vadd(v21, 1, &v21[v12], 1, v21, 1, v12);
      vDSP_vadd(v21, 1, v20, 1, v20, 1, v12);
      uint64_t v37 = 0;
      v38[0] = 0;
      uint64_t v22 = *((unsigned int *)this + 1044);
      *((_DWORD *)v38 + v22) = *((_DWORD *)this + 1048);
      *((_DWORD *)&v38[-1] + v22) = *((_DWORD *)this + 1052);
      uint64_t v23 = *((unsigned int *)this + 1045);
      *((_DWORD *)v38 + v23) = *((_DWORD *)this + 1049);
      *((_DWORD *)&v38[-1] + v23) = *((_DWORD *)this + 1053);
      uint64_t v24 = *((unsigned int *)this + 1074);
      int v25 = v24 + v12;
      float v26 = (float)(v17[v24] * v17[v24]) + (float)(v17[v25] * v17[v25]);
      float v27 = (float)(v18[v24] * v18[v24]) + (float)(v18[v25] * v18[v25]);
      if ((float)(v26 + v27) <= 0.0)
      {
        float v29 = 0.0;
        float v30 = 1.0;
      }
      else
      {
        float v28 = 1.0 / (float)(v26 + v27);
        float v29 = v27 * v28;
        float v30 = v26 * v28;
      }
      *((float *)this + 1048) = (float)(v29 * *((float *)v38 + 1)) + (float)(v30 * *(float *)v38);
      *((float *)this + 1052) = (float)(v29 * *((float *)&v37 + 1)) + (float)(v30 * *(float *)&v37);
      *((float *)this + 1056) = *((float *)this + 1056) * *((float *)this + 1057);
      *((float *)this + 106std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = (float)(v29 * *((float *)this + 1061)) + (float)(v30 * *((float *)this + 1060));
      *((float *)this + 1064) = (float)(v29 * *((float *)this + 1065)) + (float)(v30 * *((float *)this + 1064));
      if ((*((unsigned char *)this + 4667) & 8) != 0 && (*((unsigned char *)this + 4683) & 8) != 0 && this[374])
      {
        memcpy(*((void **)this[435] + 2 * *((unsigned int *)this + 1042) + 2), *((const void **)this[508] + 2), 4 * (2 * *((_DWORD *)this + 127)));
        memcpy(*((void **)this[435] + 2 * *((unsigned int *)this + 1043) + 2), *((const void **)this[509] + 2), 4 * (2 * *((_DWORD *)this + 127)));
        AudioUnit v31 = this[435];
        int v32 = (const float *)*((void *)v31 + 2);
        int v33 = (const float *)*((void *)v31 + 4);
        int v34 = (float *)*((void *)this[508] + 2);
        uint64_t v35 = (float *)*((void *)this[436] + 2);
        vDSP_vmul(v32, 1, v17, 1, v34, 1, (2 * v12));
        vDSP_vmul(v33, 1, v18, 1, v35, 1, (2 * v12));
        vDSP_vadd(v35, 1, v34, 1, v34, 1, (2 * v12));
        vDSP_vsub(&v34[v12], 1, v34, 1, v34, 1, v12);
        vDSP_vmul(v32, 1, &v17[v12], 1, v35, 1, v12);
        vDSP_vmul(&v32[v12], 1, v17, 1, &v35[v12], 1, v12);
        vDSP_vadd(v35, 1, &v35[v12], 1, &v34[v12], 1, v12);
        vDSP_vmul(v33, 1, &v18[v12], 1, v35, 1, v12);
        vDSP_vmul(&v33[v12], 1, v18, 1, &v35[v12], 1, v12);
        vDSP_vadd(v35, 1, &v35[v12], 1, v35, 1, v12);
        vDSP_vadd(v35, 1, &v34[v12], 1, &v34[v12], 1, v12);
      }
    }
    else
    {
      if (v8 == 1)
      {
        int v11 = *((_DWORD *)this + 1047);
      }
      else
      {
        if (v8) {
          return;
        }
        int v11 = *((_DWORD *)this + 1046);
      }
      if (v11 == 1)
      {
        memcpy(*((void **)this[429] + 2), *((const void **)this[506] + 2), *((unsigned int *)this + 1073));
        memcpy(*((void **)this[505] + 2), *((const void **)this[505] + 4), *((unsigned int *)this + 1073));
        if ((*((unsigned char *)this + 4667) & 8) != 0 && (*((unsigned char *)this + 4683) & 8) != 0)
        {
          if (this[374]) {
            memcpy(*((void **)this[508] + 2), *((const void **)this[509] + 2), *((unsigned int *)this + 1073));
          }
        }
        *((_DWORD *)this + 1048) = *((_DWORD *)this + 1049);
        *((_DWORD *)this + 1052) = *((_DWORD *)this + 1053);
        *((_DWORD *)this + 1056) = *((_DWORD *)this + 1057);
        *((_DWORD *)this + 106std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 1061);
        *((_DWORD *)this + 1064) = *((_DWORD *)this + 1065);
        *a4 = 1;
      }
    }
  }
}

BOOL VoiceProcessorV2::VPUseAUInProcess(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  if (!a3)
  {
    if (a2 < 0x3E)
    {
      if ((*((void *)this + 1112) & (1 << a2)) == 0
        || a2 - 27 < 0x23 && ((0x500000007uLL >> (a2 - 27)) & 1) != 0)
      {
        return 0;
      }
      if ((*((void *)this + 1113) & (1 << a2)) != 0
        || (uint64_t v3 = *((unsigned __int8 *)this + 472), *((unsigned char *)this + 472))
        && (uint64_t v3 = 0, a2 <= 0x3B)
        && ((1 << a2) & 0x800000028000000) != 0)
      {
        int v5 = (char *)this + 8 * a2 + 3504;
        return *(void *)v5 != 0;
      }
      return v3;
    }
LABEL_19:
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  }
  if (a2 >= 0x48) {
    goto LABEL_19;
  }
  uint64_t v3 = 0;
  if (a2 != 63)
  {
    unint64_t v4 = (unint64_t)a2 >> 6;
    if ((*((void *)this + v4 + 583) & (1 << a2)) != 0)
    {
      if ((*((void *)this + v4 + 585) & (1 << a2)) != 0)
      {
        int v5 = (char *)this + 8 * a2 + 2776;
        return *(void *)v5 != 0;
      }
      return 0;
    }
  }
  return v3;
}

float VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(VoiceProcessorV2 *this, int a2, int a3, int a4, char a5)
{
  char v6 = a2;
  float result = *((float *)this + 1056);
  if (result != 0.0) {
    goto LABEL_11;
  }
  if (!a3 || !a4 || !a2)
  {
    if (!a3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (a5) {
LABEL_8:
  }
    memcpy(*(void **)(*((void *)this + 424) + 16), *(const void **)(*((void *)this + 425) + 16), 4 * *((unsigned int *)this + 127));
LABEL_9:
  unsigned int v9 = (float *)(*(void *)(*((void *)this + 512) + 16) + 4 * *((unsigned int *)this + 127));
  v11.realp = *(float **)(*((void *)this + 512) + 16);
  v11.imagp = v9;
  AudioUnit v10 = (VPTimeFreqConverter *)*((void *)this + 520);
  if (v10) {
    VPTimeFreqConverter::Analyze(v10, *(const float **)(*((void *)this + 424) + 16), &v11);
  }
LABEL_11:
  if (a3)
  {
    if ((v6 & 1) == 0)
    {
      float result = *((float *)this + 1057);
      *((float *)this + 1056) = result;
    }
  }
  return result;
}

uint64_t VoiceProcessorV2::ApplyBeamDirection(VoiceProcessorV2 *this)
{
  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5440, 0, (float)*((unsigned int *)this + 684));
  if ((*((unsigned char *)this + 4667) & 0x80) == 0) {
    return 0;
  }
  uint64_t v2 = (OpaqueAudioComponentInstance *)*((void *)this + 378);
  if (!v2) {
    return 0;
  }
  uint64_t result = AudioUnitSetParameter(v2, 0, 0, 0, (float)*((unsigned int *)this + 684), 0);
  if (!result) {
    return 0;
  }
  return result;
}

void VoiceProcessorV2::ApplyCustomTelephonyDSPOverrides(VoiceProcessorV2 *this, CFDictionaryRef theDict, int a3)
{
  if (CFDictionaryGetCount(theDict))
  {
    if (a3)
    {
      if (CFDictionaryContainsKey(theDict, @"noise suppression")
        && CFDictionaryGetValue(theDict, @"noise suppression"))
      {
        *((void *)this + 584) |= 0x20uLL;
      }
      if (CFDictionaryContainsKey(theDict, @"agc"))
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"agc");
        if (Value)
        {
          CFNumberRef v7 = Value;
          CFRetain(Value);
          float valuePtr = 0.0;
          CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
          CFRelease(v7);
          uint64_t v8 = *((void *)this + 584);
          unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v10 = v8 | 0x24;
          if (LODWORD(valuePtr) == 1) {
            unint64_t v11 = v10;
          }
          else {
            unint64_t v11 = v9;
          }
          *((void *)this + 584) = v11;
        }
      }
    }
    if (CFDictionaryContainsKey(theDict, @"gain"))
    {
      CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"gain");
      if (v12)
      {
        CFNumberRef v13 = v12;
        CFRetain(v12);
        float valuePtr = 0.0;
        CFNumberGetValue(v13, kCFNumberFloat32Type, &valuePtr);
        CFRelease(v13);
        if (a3)
        {
          *(int8x16_t *)((char *)this + 4664) = vorrq_s8(*(int8x16_t *)((char *)this + 4664), (int8x16_t)xmmword_1BB879C80);
          uint64_t v14 = (char *)this + 7024;
          float v15 = valuePtr;
          int v16 = 1;
        }
        else
        {
          *((void *)this + 1112) |= 0x1800000000000000uLL;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 10920, 0, valuePtr);
          float v15 = valuePtr;
          uint64_t v14 = (char *)this + 10920;
          int v16 = 8;
        }
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v14, v16, v15);
      }
    }
    if (CFDictionaryContainsKey(theDict, @"eq"))
    {
      CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(theDict, @"eq");
      if (v17)
      {
        CFArrayRef v18 = v17;
        CFRetain(v17);
        unsigned int Count = CFArrayGetCount(v18);
        BOOL v20 = a3 == 0;
        if (a3) {
          BOOL v21 = (char *)this + 6232;
        }
        else {
          BOOL v21 = (char *)this + 9704;
        }
        uint64_t v22 = 8896;
        if (!v20) {
          uint64_t v22 = 4672;
        }
        uint64_t v23 = 33;
        if (v20) {
          uint64_t v23 = 0x1000000200000000;
        }
        unsigned int v39 = this;
        *(void *)((char *)this + v22) |= v23;
        if (Count >= 0xA) {
          uint64_t v24 = 10;
        }
        else {
          uint64_t v24 = Count;
        }
        if (v24)
        {
          for (CFIndex i = 0; i != v24; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, i);
            if (ValueAtIndex)
            {
              CFDictionaryRef v27 = ValueAtIndex;
              CFRetain(ValueAtIndex);
              if (CFDictionaryContainsKey(v27, @"AUNBandEQ_FilterType")
                && CFDictionaryContainsKey(v27, @"AUNBandEQ_FilterFrequency"))
              {
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v21, i + 1000, 0.0);
                CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v27, @"AUNBandEQ_FilterType");
                if (v28)
                {
                  CFNumberRef v29 = v28;
                  CFRetain(v28);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
                  CFRelease(v29);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v21, i + 2000, (float)LODWORD(valuePtr));
                }
                CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v27, @"AUNBandEQ_FilterFrequency");
                if (v30)
                {
                  CFNumberRef v31 = v30;
                  CFRetain(v30);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v31, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v31);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v21, i + 3000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v27, @"AUNBandEQ_FilterGain"))
              {
                CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v27, @"AUNBandEQ_FilterGain");
                if (v32)
                {
                  CFNumberRef v33 = v32;
                  CFRetain(v32);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v33, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v33);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v21, i + 4000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v27, @"AUNBandEQ_FilterBandwidth"))
              {
                int v34 = CFDictionaryGetValue(v27, @"AUNBandEQ_FilterBandwidth");
                CFRetain(v34);
                float valuePtr = 0.0;
                CFNumberGetValue((CFNumberRef)v34, kCFNumberFloat32Type, &valuePtr);
                CFRelease(v34);
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v21, i + 5000, valuePtr);
              }
              CFRelease(v27);
            }
          }
        }
        CFRelease(v18);
        this = v39;
      }
    }
    if (CFDictionaryContainsKey(theDict, @"speaker calibration") && *((_DWORD *)this + 1130) == 1)
    {
      CFDataRef v35 = (const __CFData *)CFDictionaryGetValue(theDict, @"speaker calibration");
      if (v35)
      {
        CFDataRef v36 = v35;
        CFRetain(v35);
        CFIndex Length = CFDataGetLength(v36);
        BytePtr = (UInt8 *)CFDataGetBytePtr(v36);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1539, 0xFA01u, 0, 0, Length, BytePtr, 1);
        CFRelease(v36);
      }
    }
  }
}

void VoiceProcessorV2::CreateSRC(VoiceProcessorV2 *this, double a2, double a3, VoiceProcessorV2 *a4, int a5, uint64_t a6, unsigned __int8 *a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  LOBYTE(v15[0]) = (*((_DWORD *)a4 + 18) - 18) < 4;
  VoiceProcessorV2::ReadAndApplyDefaultsOverride(a4, @"vp_enable_ramstad_src", 0, v15, a7);
  if (LOBYTE(v15[0]))
  {
    if ((a5 - 3) > 0xFFFFFFFD)
    {
      CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)v15 + 1, 1);
      CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v16, (const void *)*MEMORY[0x1E4F4EBA0], a2);
      CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v16, (const void *)*MEMORY[0x1E4F4EBB0], a3);
      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v16, (const void *)*MEMORY[0x1E4F4EBA8], a5);
      CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v16, (const void *)*MEMORY[0x1E4F4EBB8], 33);
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CFNumberRef v12 = *(NSObject **)VPLogScope(void)::scope;
      if (os_log_type_enabled(*(os_log_t *)VPLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = 33;
        __int16 v18 = 1024;
        int v19 = a5;
        __int16 v20 = 2048;
        double v21 = a2;
        __int16 v22 = 2048;
        double v23 = a3;
        _os_log_debug_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "creating 'Ramstad' sample rate converter Q%u, %u ch, %.2fHz to %.2fHz", buf, 0x22u);
      }
      CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)buf);
      caulk::expected<long long,int>::value((uint64_t)buf);
      operator new();
    }
  }
  else if ((a5 - 3) >= 0xFFFFFFFE)
  {
    int v13 = *((_DWORD *)a4 + 1114);
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)v15 + 1, 0);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v16, (const void *)*MEMORY[0x1E4F4EBD0], a2);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>(v16, (const void *)*MEMORY[0x1E4F4EBE0], a3);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v16, (const void *)*MEMORY[0x1E4F4EBD8], a5);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v16, (const void *)*MEMORY[0x1E4F4EBC0], 1852797549);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v16, (const void *)*MEMORY[0x1E4F4EBE8], 2);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(v16, (const void *)*MEMORY[0x1E4F4EBF0], v13);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v14 = *(NSObject **)VPLogScope(void)::scope;
    if (os_log_type_enabled(*(os_log_t *)VPLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v13;
      __int16 v18 = 1024;
      int v19 = a5;
      __int16 v20 = 2048;
      double v21 = a2;
      __int16 v22 = 2048;
      double v23 = a3;
      _os_log_debug_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "creating 'Resampler2' sample rate converter Q%u, %u ch, %.2fHz to %.2fHz", buf, 0x22u);
    }
    CA::AudioSampleRateConverterBuilder::Build((CA::AudioSampleRateConverterBuilder *)buf);
    caulk::expected<long long,int>::value((uint64_t)buf);
    operator new();
  }
  *(void *)this = 0;
}

void sub_1BB6137B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v7 = 0;
  (*(void (**)(uint64_t, char *))(a1 + 8))(v3, &v7);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](a1 + 2);

  operator delete(a1);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1F14BA938;
  a2[1] = v2;
  return std::__function::__value_func<void ()(double)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_1F14BA938;
  v2[1] = v3;
  std::__function::__value_func<void ()(double)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1BB613A84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_1F14BA938;
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](a1 + 2);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<double>(__CFString const*,__CFString const*,double (*)(void const*,BOOL &),std::function<void ()(double)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_1F14BA938;
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

float std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::operator()(uint64_t a1, double *a2)
{
  float result = *a2;
  **(float **)(a1 + 8) = result;
  return result;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14BA980;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1F14BA980;
  result[1] = v3;
  return result;
}

void std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,float &)::{lambda(double)#1}>,void ()(double)>::~__func()
{
}

void VPAUBusFormats::AllocateForFormats(VPAUBusFormats *this, unsigned int a2, unsigned int a3)
{
  char v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    free(v6);
    *((void *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = 0;
  }
  *(_DWORD *)this = 0;
  if (a2)
  {
    char v7 = malloc_type_malloc(40 * a2, 0x2C8E6D5CuLL);
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = v7;
    bzero(v7, 40 * a2);
    *((void *)this + freeMatrix(*((_DWORD *)this + 17), this + 1) = v8;
    *(_DWORD *)this = a2;
  }
  unint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    free(v9);
    *((void *)this + 3) = 0;
  }
  *((_DWORD *)this + 4) = 0;
  uint64_t v10 = malloc_type_malloc(40 * a3, 0x2C8E6D5CuLL);
  unint64_t v11 = v10;
  if (a3 && !v10)
  {
LABEL_14:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v10, 40 * a3);
  *((void *)this + 3) = v11;
  if (a3)
  {
    if (v11) {
      *((_DWORD *)this + 4) = a3;
    }
  }
}

__n128 VPAUBusFormats::SetFormats(VPAUBusFormats *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  VPAUBusFormats::AllocateForFormats(a1, a3, a5);
  if (a3)
  {
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = 40 * a3;
    do
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      *(void *)(v11 + 32) = *(void *)(a2 + 32);
      *(__n128 *)uint64_t v11 = result;
      *(_OWORD *)(v11 + 16) = v13;
      a2 += 40;
      v11 += 40;
      v12 -= 40;
    }
    while (v12);
  }
  if (a5)
  {
    uint64_t v14 = *((void *)a1 + 3);
    uint64_t v15 = 40 * a5;
    do
    {
      __n128 result = *(__n128 *)a4;
      long long v16 = *(_OWORD *)(a4 + 16);
      *(void *)(v14 + 32) = *(void *)(a4 + 32);
      *(__n128 *)uint64_t v14 = result;
      *(_OWORD *)(v14 + 16) = v16;
      a4 += 40;
      v14 += 40;
      v15 -= 40;
    }
    while (v15);
  }
  return result;
}

uint64_t VoiceProcessorV2::GetFarEndVoiceMixChannelCount(VoiceProcessorV2 *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 2245)) {
    return 1;
  }
  uint64_t v2 = (char *)this + 15961;
  int v3 = *((_DWORD *)this + 19);
  if (v3 != 2 && v3 != 4)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v8 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      unint64_t v9 = (*v8 ? *v8 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *((_DWORD *)this + 19);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        double v23 = "VoiceProcessor_v2.cpp";
        __int16 v24 = 1024;
        int v25 = 6437;
        __int16 v26 = 1024;
        int v27 = v10;
        _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> force 32-to-1 mono downmix due to operation mode: %u", buf, 0x18u);
      }
    }
    uint64_t v11 = (int *)*((void *)this + 1578);
    if (v11 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1)
      {
        __int16 v20 = (int *)*((void *)this + 1578);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        uint64_t v11 = v20;
      }
      CALegacyLog::log(v11, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6437, "GetFarEndVoiceMixChannelCount", "force 32-to-1 mono downmix due to operation mode: %u");
    }
    return 1;
  }
  if (*((unsigned char *)this + 16360))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v5 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      char v6 = (*v5 ? *v5 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        double v23 = "VoiceProcessor_v2.cpp";
        __int16 v24 = 1024;
        int v25 = 6443;
        _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> force 32-to-1 mono downmix", buf, 0x12u);
      }
    }
    char v7 = (int *)*((void *)this + 1578);
    if (v7 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v7, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6443, "GetFarEndVoiceMixChannelCount", "force 32-to-1 mono downmix");
    }
    return 1;
  }
  int v12 = **((_DWORD **)this + 292);
  uint64_t result = 1;
  if (v12 > 1885892726)
  {
    if (v12 != 1886613611)
    {
      if (v12 == 1885892727)
      {
        if (*((_DWORD *)this + 596) == 1781740087)
        {
          return 2;
        }
        else if (VoiceProcessorV2::isDeviceSpatializationDisabledInHeadsetRoutes(this))
        {
          return 1;
        }
        else
        {
          return 2;
        }
      }
      return result;
    }
    unsigned int v16 = *((_DWORD *)this + 18);
    uint64_t result = 2;
    if (v16 > 0x24 || ((1 << v16) & 0x1CC0000100) == 0) {
      return result;
    }
    return 1;
  }
  if (v12 != 1885892674 && v12 != 1885892706) {
    return result;
  }
  if (VoiceProcessorV2::isDeviceSpatializationDisabledInHeadsetRoutes(this)
    || !VoiceProcessorV2::IsRefPortOwningDeviceBluetoothAppleProduct((int **)this))
  {
    return 1;
  }
  if (!*((_DWORD *)this + 4114))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CFArrayRef v17 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
    if (v17)
    {
      __int16 v18 = v17;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        double v23 = "VoiceProcessor_v2.cpp";
        __int16 v24 = 1024;
        int v25 = 6475;
        __int16 v26 = 1024;
        int v27 = 0;
        _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> force 32-to-1 mono downmix due to spatial mode off (mSpatialMode = %d)", buf, 0x18u);
      }
    }
    int v19 = (int *)*((void *)this + 1578);
    if (v19 && (*v2 || v2[1]))
    {
      if (VPLogScope(void)::once != -1)
      {
        double v21 = (int *)*((void *)this + 1578);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        int v19 = v21;
      }
      CALegacyLog::log(v19, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6475, "GetFarEndVoiceMixChannelCount", "force 32-to-1 mono downmix due to spatial mode off (mSpatialMode = %d)");
    }
    return 1;
  }
  unsigned int v15 = *((_DWORD *)this + 89);
  if (v15 >= 2) {
    return 2;
  }
  else {
    return v15;
  }
}

void sub_1BB614274(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t VoiceProcessorV2::GetDynamicsDSPChannelCount(VoiceProcessorV2 *this)
{
  if (*((_DWORD *)this + 89) == 2
    && ((uint64_t v1 = *((void *)this + 1112), (v1 & 0x400000) != 0)
     && (*((unsigned char *)this + 8906) & 0x40) != 0
     && *((void *)this + 460)
     || (v1 & 0x4000000) != 0 && (*((unsigned char *)this + 8907) & 4) != 0 && *((void *)this + 464)))
  {
    return 2;
  }
  else
  {
    return *((unsigned int *)this + 69);
  }
}

BOOL VoiceProcessorV2::isDeviceSpatializationDisabledInHeadsetRoutes(VoiceProcessorV2 *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *((_DWORD *)this + 89);
  if (v1 <= 1)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (VPLogScope(void)::scope && *(int *)(VPLogScope(void)::scope + 8) >= 6)
    {
      int v3 = *(void *)VPLogScope(void)::scope ? *(NSObject **)VPLogScope(void)::scope : MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315394;
        uint64_t v8 = "VoiceProcessor_v2.cpp";
        __int16 v9 = 1024;
        int v10 = 6373;
        _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> disable spatialization when mix format is less than 2", (uint8_t *)&v7, 0x12u);
      }
    }
    uint64_t v4 = (int *)*((void *)this + 1578);
    if (v4 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1)
      {
        char v6 = (int *)*((void *)this + 1578);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        uint64_t v4 = v6;
      }
      CALegacyLog::log(v4, 6, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 6373, "isDeviceSpatializationDisabledInHeadsetRoutes", "disable spatialization when mix format is less than 2");
    }
  }
  return v1 < 2;
}

void sub_1BB614470(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t VoiceProcessorV2::PopulateAUPropsAndParamsLists(VoiceProcessorV2 *this, unsigned int a2, int a3)
{
  uint64_t v350 = *MEMORY[0x1E4F143B8];
  unsigned int v341 = 0;
  uint64_t v342 = 0;
  uint64_t v5 = (char *)this + 15961;
  unsigned int v343 = 0;
  uint64_t v344 = 0;
  if (a3)
  {
    switch(a2)
    {
      case 0u:
      case 5u:
      case 6u:
        *(void *)&unsigned char buf[32] = *((void *)this + 107);
        long long v168 = *(_OWORD *)((char *)this + 840);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 824);
        *(_OWORD *)&buf[16] = v168;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        goto LABEL_14;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
        uint64_t v7 = *((void *)this + 103);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v8 = v342;
        *(void *)uint64_t v342 = v7;
        v9.n128_u32[1] = 41;
        *(_OWORD *)(v8 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v8 + 24) = xmmword_1BB8727C0;
        uint64_t v10 = v344;
        *(void *)uint64_t v344 = v7;
        *(_OWORD *)(v10 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v10 + 24) = xmmword_1BB8727C0;
        break;
      case 0xBu:
      case 0xCu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 4u);
        uint64_t v81 = *((void *)this + 103);
        uint64_t v82 = v342;
        *(void *)uint64_t v342 = v81;
        long long v83 = xmmword_1BB8727B0;
        *(_OWORD *)(v82 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v82 + 24) = xmmword_1BB879EA0;
        uint64_t v84 = v342;
        uint64_t v85 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v81;
        *(_OWORD *)(v84 + 48) = xmmword_1BB8727B0;
        *(_OWORD *)(v84 + 64) = xmmword_1BB879EA0;
        uint64_t v86 = *((void *)this + 103);
        *(void *)uint64_t v85 = v86;
        *(_OWORD *)(v85 + 8) = xmmword_1BB8727B0;
        long long v87 = xmmword_1BB8727C0;
        goto LABEL_108;
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        uint64_t v29 = *((void *)this + 103);
        uint64_t v36 = *((void *)this + 98);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 3u);
        uint64_t v37 = v342;
        *(void *)uint64_t v342 = v29;
        __n128 v9 = (__n128)xmmword_1BB8727B0;
        *(_OWORD *)(v37 + 8) = xmmword_1BB8727B0;
        long long v33 = xmmword_1BB8727C0;
        *(_OWORD *)(v37 + 24) = xmmword_1BB8727C0;
        uint64_t v38 = v342;
        uint64_t v35 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v36;
        *(_OWORD *)(v38 + 48) = xmmword_1BB8727B0;
        *(_OWORD *)(v38 + 64) = xmmword_1BB8727C0;
        goto LABEL_12;
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
        uint64_t v29 = *((void *)this + 103);
        uint64_t v30 = *((void *)this + 98);
        int v31 = *((_DWORD *)this + 203);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 3u);
        uint64_t v32 = v342;
        *(void *)uint64_t v342 = v29;
        __n128 v9 = (__n128)xmmword_1BB8727B0;
        *(_OWORD *)(v32 + 8) = xmmword_1BB8727B0;
        long long v33 = xmmword_1BB8727C0;
        *(_OWORD *)(v32 + 24) = xmmword_1BB8727C0;
        uint64_t v34 = v342;
        uint64_t v35 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v30;
        *(_OWORD *)(v34 + 48) = xmmword_1BB8727B0;
        *(_DWORD *)(v34 + 64) = 4;
        *(_DWORD *)(v34 + 68) = v31;
        *(void *)(v34 + 72) = 32;
LABEL_12:
        *(void *)uint64_t v35 = v29;
        *(__n128 *)(v35 + 8) = v9;
        *(_OWORD *)(v35 + 24) = v33;
        uint64_t v39 = v344;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v29;
        *(__n128 *)(v39 + 48) = v9;
        *(_OWORD *)(v39 + 64) = v33;
        *(void *)(v39 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v29;
        *(__n128 *)(v39 + 88) = v9;
        *(_OWORD *)(v39 + 104) = v33;
        break;
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
        uint64_t v22 = *((void *)this + 103);
        uint64_t v23 = *((void *)this + 98);
        int v24 = *((_DWORD *)this + 203);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 6u);
        uint64_t v25 = v342;
        *(void *)uint64_t v342 = v22;
        v9.n128_u32[1] = 41;
        *(_OWORD *)(v25 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v25 + 24) = xmmword_1BB8727C0;
        uint64_t v26 = v342;
        uint64_t v27 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v23;
        *(_OWORD *)(v26 + 48) = xmmword_1BB8727B0;
        *(_DWORD *)(v26 + 64) = 4;
        *(_DWORD *)(v26 + 68) = v24;
        *(void *)(v26 + 72) = 32;
        *(void *)uint64_t v27 = v22;
        *(_OWORD *)(v27 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v27 + 24) = xmmword_1BB8727C0;
        uint64_t v28 = v344;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v22;
        *(_OWORD *)(v28 + 48) = xmmword_1BB8727B0;
        *(_OWORD *)(v28 + 64) = xmmword_1BB8727C0;
        *(void *)(v28 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v22;
        *(_OWORD *)(v28 + 88) = xmmword_1BB8727B0;
        *(_OWORD *)(v28 + 104) = xmmword_1BB8727C0;
        *(void *)(v28 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v22;
        *(_OWORD *)(v28 + 128) = xmmword_1BB8727B0;
        *(_OWORD *)(v28 + 144) = xmmword_1BB8727C0;
        *(void *)(v28 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v22;
        *(_OWORD *)(v28 + 168) = xmmword_1BB8727B0;
        *(_OWORD *)(v28 + 184) = xmmword_1BB8727C0;
        *(void *)(v28 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v22;
        *(_OWORD *)(v28 + 208) = xmmword_1BB8727B0;
        *(_OWORD *)(v28 + 224) = xmmword_1BB8727C0;
        break;
      case 0x1Cu:
        uint64_t v179 = *((void *)this + 107);
        long long v180 = *(_OWORD *)((char *)this + 840);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 824);
        *(_OWORD *)&buf[16] = v180;
        long long v181 = *((_OWORD *)this + 50);
        long long v347 = *((_OWORD *)this + 49);
        long long v348 = v181;
        uint64_t v182 = *((void *)this + 102);
        *(void *)&unsigned char buf[32] = v179;
        uint64_t v349 = v182;
        long long v183 = *(_OWORD *)((char *)this + 920);
        *(_OWORD *)std::string::size_type v345 = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&v345[16] = v183;
        *(void *)&v345[32] = *((void *)this + 117);
        __n128 v9 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 2, (uint64_t)v345, 1);
        break;
      case 0x1Du:
      case 0x39u:
      case 0x3Au:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v165 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        long long v166 = xmmword_1BB87A250;
        *(_OWORD *)(v165 + 8) = xmmword_1BB87A250;
        long long v167 = xmmword_1BB87A260;
        goto LABEL_119;
      case 0x1Eu:
        *(void *)&unsigned char buf[32] = *((void *)this + 117);
        long long v202 = *(_OWORD *)((char *)this + 920);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&buf[16] = v202;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 6u, 1u);
        uint64_t v203 = v342;
        long long v204 = *(_OWORD *)buf;
        *(_OWORD *)uint64_t v342 = *(_OWORD *)buf;
        long long v205 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v203 + 16) = *(_OWORD *)&buf[16];
        uint64_t v206 = *(void *)&buf[32];
        *(void *)(v203 + 32) = *(void *)&buf[32];
        *(_OWORD *)(v203 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v204;
        *(_OWORD *)(v203 + 56) = v205;
        *(void *)(v203 + 72) = v206;
        *(_OWORD *)(v203 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v204;
        *(_OWORD *)(v203 + 96) = v205;
        *(void *)(v203 + 112) = v206;
        *(void *)(v203 + 152) = v206;
        *(_OWORD *)(v203 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v204;
        *(_OWORD *)(v203 + 136) = v205;
        *(_OWORD *)(v203 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v204;
        *(_OWORD *)(v203 + 176) = v205;
        *(void *)(v203 + 192) = v206;
        unint64_t v43 = *(void *)&buf[32];
        *(void *)(v203 + 232) = *(void *)&buf[32];
        long long v42 = *(_OWORD *)buf;
        __n128 v9 = *(__n128 *)&buf[16];
        *(_OWORD *)(v203 + 216) = *(_OWORD *)&buf[16];
        *(_OWORD *)(v203 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v42;
        goto LABEL_15;
      case 0x1Fu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v169 = *((void *)this + 103);
        goto LABEL_106;
      case 0x20u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 2u);
        uint64_t v198 = v342;
        *(void *)uint64_t v342 = *((void *)this + 103);
        v9.n128_u32[1] = 41;
        *(_OWORD *)(v198 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v198 + 24) = xmmword_1BB87A240;
        uint64_t v199 = *((void *)this + 113);
        uint64_t v200 = v344;
        *(void *)uint64_t v344 = v199;
        *(_OWORD *)(v200 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v200 + 24) = xmmword_1BB87A260;
        uint64_t v201 = v344;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v199;
        *(_OWORD *)(v201 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v201 + 64) = xmmword_1BB87A260;
        break;
      case 0x21u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 5u, 2u);
        uint64_t v150 = 0;
        v9.n128_u64[0] = *((void *)this + 103);
        long long v148 = xmmword_1BB87A250;
        long long v149 = xmmword_1BB87A260;
        do
        {
          uint64_t v151 = v342 + v150;
          *(void *)uint64_t v151 = v9.n128_u64[0];
          *(_OWORD *)(v151 + 8) = xmmword_1BB87A250;
          *(_OWORD *)(v151 + 24) = xmmword_1BB87A260;
          v150 += 40;
        }
        while (v150 != 200);
        uint64_t v152 = v344;
        *(void *)uint64_t v344 = v9.n128_u64[0];
        *(_OWORD *)(v152 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v152 + 24) = xmmword_1BB87A260;
        goto LABEL_123;
      case 0x22u:
      case 0x23u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 2u);
        v9.n128_u64[0] = *((void *)this + 103);
        uint64_t v184 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        *(_OWORD *)(v184 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v184 + 24) = xmmword_1BB87A450;
        uint64_t v185 = v344;
        *(void *)uint64_t v344 = v9.n128_u64[0];
        *(_OWORD *)(v185 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v185 + 24) = xmmword_1BB87A450;
        uint64_t v186 = v342;
        uint64_t v187 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v186 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v186 + 64) = xmmword_1BB87A450;
        *(void *)(v187 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v187 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v187 + 64) = xmmword_1BB87A450;
        break;
      case 0x24u:
        int v140 = *((_DWORD *)this + 213) + 1;
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 103);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_DWORD *)&unsigned char buf[24] = 4;
        *(_DWORD *)&unsigned char buf[28] = v140;
        *(void *)&unsigned char buf[32] = 32;
        *(void *)std::string::size_type v345 = *(void *)buf;
        *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
        *(_OWORD *)&v345[24] = xmmword_1BB8727C0;
        __n128 v9 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        break;
      case 0x25u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 4u);
        uint64_t v191 = *((void *)this + 103);
        uint64_t v192 = v342;
        *(void *)uint64_t v342 = v191;
        long long v83 = xmmword_1BB87A250;
        *(_OWORD *)(v192 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v192 + 24) = xmmword_1BB87A450;
        uint64_t v193 = v342;
        uint64_t v85 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v191;
        *(_OWORD *)(v193 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v193 + 64) = xmmword_1BB87A450;
        uint64_t v86 = *((void *)this + 103);
        *(void *)uint64_t v85 = v86;
        *(_OWORD *)(v85 + 8) = xmmword_1BB87A250;
        long long v87 = xmmword_1BB87A260;
LABEL_108:
        *(_OWORD *)(v85 + 24) = v87;
        uint64_t v194 = v344;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v86;
        *(_OWORD *)(v194 + 48) = v83;
        *(_OWORD *)(v194 + 64) = v87;
        v9.n128_u64[0] = *((void *)this + 103);
        *(void *)(v194 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v194 + 88) = v83;
        *(_OWORD *)(v194 + 104) = v87;
        *(void *)(v194 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v194 + 128) = v83;
        *(_OWORD *)(v194 + 144) = v87;
        break;
      case 0x26u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 3u, 2u);
        v9.n128_u64[0] = *((void *)this + 103);
        uint64_t v195 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        long long v148 = xmmword_1BB8727B0;
        *(_OWORD *)(v195 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v195 + 24) = xmmword_1BB879EA0;
        uint64_t v196 = v342;
        uint64_t v197 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v196 + 48) = xmmword_1BB8727B0;
        *(_OWORD *)(v196 + 64) = xmmword_1BB879EA0;
        *(void *)(v196 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v196 + 88) = xmmword_1BB8727B0;
        *(_OWORD *)(v196 + 104) = xmmword_1BB879EA0;
        v9.n128_u64[0] = *((void *)this + 103);
        *(void *)uint64_t v197 = v9.n128_u64[0];
        *(_OWORD *)(v197 + 8) = xmmword_1BB8727B0;
        long long v149 = xmmword_1BB8727C0;
        goto LABEL_122;
      case 0x27u:
      case 0x28u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 4u, 2u);
        v9.n128_u64[0] = *((void *)this + 103);
        uint64_t v88 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        *(_OWORD *)(v88 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v88 + 24) = xmmword_1BB87A260;
        uint64_t v89 = v342;
        uint64_t v90 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v89 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v89 + 64) = xmmword_1BB87A260;
        *(void *)(v89 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v89 + 88) = xmmword_1BB87A250;
        *(_OWORD *)(v89 + 104) = xmmword_1BB87A260;
        *(void *)uint64_t v90 = *((void *)this + 113);
        *(_OWORD *)(v90 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v90 + 24) = xmmword_1BB87A260;
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v91 = v344;
        uint64_t v92 = v342;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v91 + 48) = xmmword_1BB87A470;
        *(_OWORD *)(v91 + 64) = xmmword_1BB8727C0;
        *(void *)(v92 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v92 + 128) = xmmword_1BB87A470;
        *(_OWORD *)(v92 + 144) = xmmword_1BB8727C0;
        break;
      case 0x29u:
      case 0x2Au:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 5u, 2u);
        v9.n128_u64[0] = *((void *)this + 103);
        uint64_t v76 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        *(_OWORD *)(v76 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v76 + 24) = xmmword_1BB87A260;
        uint64_t v77 = v342;
        uint64_t v78 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v77 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v77 + 64) = xmmword_1BB87A260;
        *(void *)(v77 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v77 + 88) = xmmword_1BB87A250;
        *(_OWORD *)(v77 + 104) = xmmword_1BB87A260;
        *(void *)uint64_t v78 = *((void *)this + 113);
        *(_OWORD *)(v78 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v78 + 24) = xmmword_1BB87A260;
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v79 = v344;
        uint64_t v80 = v342;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v79 + 48) = xmmword_1BB87A470;
        *(_OWORD *)(v79 + 64) = xmmword_1BB8727C0;
        *(void *)(v80 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v80 + 128) = xmmword_1BB87A470;
        *(_OWORD *)(v80 + 144) = xmmword_1BB8727C0;
        *(void *)(v80 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v80 + 168) = xmmword_1BB87A470;
        *(_OWORD *)(v80 + 184) = xmmword_1BB8727C0;
        break;
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 6u, 3u);
        v9.n128_u64[0] = *((void *)this + 103);
        uint64_t v51 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        *(_OWORD *)(v51 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v51 + 24) = xmmword_1BB87A260;
        uint64_t v52 = v342;
        uint64_t v53 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v52 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v52 + 64) = xmmword_1BB87A260;
        *(void *)(v52 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v52 + 88) = xmmword_1BB87A250;
        *(_OWORD *)(v52 + 104) = xmmword_1BB87A260;
        *(void *)(v52 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v52 + 208) = xmmword_1BB87A250;
        *(_OWORD *)(v52 + 224) = xmmword_1BB87A260;
        v9.n128_u64[0] = *((void *)this + 113);
        *(void *)uint64_t v53 = v9.n128_u64[0];
        *(_OWORD *)(v53 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v53 + 24) = xmmword_1BB87A260;
        uint64_t v54 = v344;
        uint64_t v55 = v342;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        v9.n128_u32[1] = 9;
        *(_OWORD *)(v54 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v54 + 64) = xmmword_1BB87A260;
        uint64_t v56 = *((void *)this + 113);
        *(void *)(v54 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v56;
        *(_OWORD *)(v54 + 88) = xmmword_1BB87A470;
        *(_OWORD *)(v54 + 104) = xmmword_1BB8727C0;
        *(void *)(v55 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v56;
        *(_OWORD *)(v55 + 128) = xmmword_1BB87A470;
        *(_OWORD *)(v55 + 144) = xmmword_1BB8727C0;
        *(void *)(v55 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v56;
        *(_OWORD *)(v55 + 168) = xmmword_1BB87A470;
        *(_OWORD *)(v55 + 184) = xmmword_1BB8727C0;
        break;
      case 0x2Eu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 2u);
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v174 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        *(_OWORD *)(v174 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v174 + 24) = xmmword_1BB87A240;
        uint64_t v175 = v342;
        uint64_t v176 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v175 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v175 + 64) = xmmword_1BB87A240;
        *(void *)uint64_t v176 = v9.n128_u64[0];
        *(_OWORD *)(v176 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v176 + 24) = xmmword_1BB87A240;
        uint64_t v177 = v344;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        v9.n128_u32[1] = 1;
        *(_OWORD *)(v177 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v177 + 64) = xmmword_1BB87A260;
        break;
      case 0x2Fu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 2u);
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v147 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        long long v148 = xmmword_1BB87A250;
        *(_OWORD *)(v147 + 8) = xmmword_1BB87A250;
        long long v149 = xmmword_1BB87A240;
        goto LABEL_121;
      case 0x30u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 2u);
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v147 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        long long v148 = xmmword_1BB87A250;
        *(_OWORD *)(v147 + 8) = xmmword_1BB87A250;
        long long v149 = xmmword_1BB87A360;
LABEL_121:
        *(_OWORD *)(v147 + 24) = v149;
        uint64_t v219 = v342;
        uint64_t v197 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v219 + 48) = v148;
        *(_OWORD *)(v219 + 64) = v149;
        *(void *)uint64_t v197 = v9.n128_u64[0];
        *(_OWORD *)(v197 + 8) = v148;
        goto LABEL_122;
      case 0x31u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 2u);
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v216 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        long long v148 = xmmword_1BB87A250;
        *(_OWORD *)(v216 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v216 + 24) = xmmword_1BB87A450;
        uint64_t v217 = v342;
        uint64_t v197 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v217 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v217 + 64) = xmmword_1BB87A450;
        v9.n128_u64[0] = *((void *)this + 113);
        *(void *)uint64_t v197 = v9.n128_u64[0];
        *(_OWORD *)(v197 + 8) = xmmword_1BB87A250;
        long long v149 = xmmword_1BB87A260;
LABEL_122:
        *(_OWORD *)(v197 + 24) = v149;
LABEL_123:
        uint64_t v215 = v344;
        goto LABEL_124;
      case 0x32u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v169 = *((void *)this + 113);
LABEL_106:
        uint64_t v189 = v342;
        *(void *)uint64_t v342 = v169;
        *(_OWORD *)(v189 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v189 + 24) = xmmword_1BB87A240;
        uint64_t v190 = v344;
        *(void *)uint64_t v344 = *((void *)this + 113);
        *(_OWORD *)(v190 + 8) = xmmword_1BB87A250;
        v9.n128_u32[1] = 1;
        *(_OWORD *)(v190 + 24) = xmmword_1BB87A260;
        break;
      case 0x33u:
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 113);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB87A250;
        *(_OWORD *)&unsigned char buf[24] = xmmword_1BB87A260;
        *(void *)std::string::size_type v345 = *(void *)buf;
        *(_OWORD *)&v345[8] = xmmword_1BB87A250;
        *(_OWORD *)&v345[24] = xmmword_1BB87A260;
        __n128 v9 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        break;
      case 0x34u:
        goto LABEL_146;
      case 0x35u:
        if (*((unsigned char *)this + 2083) || *((unsigned char *)this + 2085))
        {
          std::string::size_type v153 = (unint64_t *)((char *)this + 904);
          *(void *)&unsigned char buf[32] = *((void *)this + 117);
          long long v154 = *(_OWORD *)((char *)this + 920);
          *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 904);
          *(_OWORD *)&buf[16] = v154;
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 2u);
          uint64_t v155 = v342;
          __n128 v9 = *(__n128 *)&buf[16];
          *(_OWORD *)(v342 + 16) = *(_OWORD *)&buf[16];
          long long v156 = *(_OWORD *)buf;
          *(_OWORD *)uint64_t v155 = *(_OWORD *)buf;
          uint64_t v157 = *(void *)&buf[32];
          *(void *)(v155 + 32) = *(void *)&buf[32];
          uint64_t v158 = v344;
          *(_OWORD *)uint64_t v344 = v156;
          *(__n128 *)(v158 + 16) = v9;
          *(void *)(v158 + 32) = v157;
          v9.n128_u64[0] = *v153;
          *(void *)(v155 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *v153;
          *(_OWORD *)(v155 + 48) = xmmword_1BB87A470;
          *(_OWORD *)(v155 + 64) = xmmword_1BB8727C0;
          *(void *)(v158 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v158 + 48) = xmmword_1BB87A470;
          *(_OWORD *)(v158 + 64) = xmmword_1BB8727C0;
        }
        else
        {
LABEL_146:
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 2u);
          v9.n128_u64[0] = *((void *)this + 113);
          uint64_t v237 = v342;
          *(void *)uint64_t v342 = v9.n128_u64[0];
          *(_OWORD *)(v237 + 8) = xmmword_1BB87A250;
          *(_OWORD *)(v237 + 24) = xmmword_1BB87A260;
          uint64_t v238 = v342;
          uint64_t v239 = v344;
          *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v238 + 48) = xmmword_1BB87A470;
          *(_OWORD *)(v238 + 64) = xmmword_1BB8727C0;
          *(void *)uint64_t v239 = v9.n128_u64[0];
          *(_OWORD *)(v239 + 8) = xmmword_1BB87A250;
          *(_OWORD *)(v239 + 24) = xmmword_1BB87A260;
          uint64_t v240 = v344;
          *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v240 + 48) = xmmword_1BB87A470;
          *(_OWORD *)(v240 + 64) = xmmword_1BB8727C0;
        }
        break;
      case 0x36u:
        if (*((unsigned char *)this + 2083) || *((unsigned char *)this + 2085))
        {
          *(void *)&unsigned char buf[32] = *((void *)this + 117);
          long long v159 = *(_OWORD *)((char *)this + 920);
          *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 904);
          *(_OWORD *)&buf[16] = v159;
          uint64_t v160 = *((void *)this + 113);
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 3u, 3u);
          uint64_t v161 = v342;
          __n128 v9 = *(__n128 *)&buf[16];
          *(_OWORD *)(v342 + 16) = *(_OWORD *)&buf[16];
          long long v162 = *(_OWORD *)buf;
          *(_OWORD *)uint64_t v161 = *(_OWORD *)buf;
          uint64_t v163 = *(void *)&buf[32];
          *(void *)(v161 + 32) = *(void *)&buf[32];
          *(void *)(v161 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v160;
          *(_OWORD *)(v161 + 48) = xmmword_1BB87A470;
          *(_OWORD *)(v161 + 64) = xmmword_1BB8727C0;
          *(void *)(v161 + 112) = v163;
          *(_OWORD *)(v161 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v162;
          *(__n128 *)(v161 + 96) = v9;
          uint64_t v164 = v344;
          *(_OWORD *)uint64_t v344 = v162;
          *(__n128 *)(v164 + 16) = v9;
          *(void *)(v164 + 32) = v163;
          *(void *)(v164 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v160;
          *(_OWORD *)(v164 + 48) = xmmword_1BB87A470;
          *(_OWORD *)(v164 + 64) = xmmword_1BB8727C0;
          *(void *)(v164 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v160;
          *(_OWORD *)(v164 + 88) = xmmword_1BB87A470;
          *(_OWORD *)(v164 + 104) = xmmword_1BB8727C0;
        }
        else
        {
          VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 3u, 3u);
          v9.n128_u64[0] = *((void *)this + 113);
          uint64_t v332 = v342;
          *(void *)uint64_t v342 = v9.n128_u64[0];
          long long v133 = xmmword_1BB87A250;
          *(_OWORD *)(v332 + 8) = xmmword_1BB87A250;
          long long v134 = xmmword_1BB87A260;
          *(_OWORD *)(v332 + 24) = xmmword_1BB87A260;
          long long v135 = xmmword_1BB87A470;
          long long v136 = xmmword_1BB8727C0;
          uint64_t v137 = v342;
          uint64_t v138 = v344;
          *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v137 + 48) = xmmword_1BB87A470;
          *(_OWORD *)(v137 + 64) = xmmword_1BB8727C0;
LABEL_80:
          *(void *)(v137 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v137 + 88) = v135;
          *(_OWORD *)(v137 + 104) = v136;
          *(void *)uint64_t v138 = v9.n128_u64[0];
          *(_OWORD *)(v138 + 8) = v133;
          *(_OWORD *)(v138 + 24) = v134;
          uint64_t v139 = v344;
          *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v139 + 48) = v135;
          *(_OWORD *)(v139 + 64) = v136;
          *(void *)(v139 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v139 + 88) = v135;
          *(_OWORD *)(v139 + 104) = v136;
        }
        break;
      case 0x37u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 3u, 3u);
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v132 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        long long v133 = xmmword_1BB87A250;
        *(_OWORD *)(v132 + 8) = xmmword_1BB87A250;
        long long v134 = xmmword_1BB87A260;
        *(_OWORD *)(v132 + 24) = xmmword_1BB87A260;
        long long v135 = xmmword_1BB87A470;
        long long v136 = xmmword_1BB8727C0;
        uint64_t v137 = v342;
        uint64_t v138 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v137 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v137 + 64) = xmmword_1BB87A260;
        goto LABEL_80;
      case 0x38u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 4u, 4u);
        v9.n128_u64[0] = *((void *)this + 113);
        uint64_t v170 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        *(_OWORD *)(v170 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v170 + 24) = xmmword_1BB87A260;
        uint64_t v171 = v342;
        uint64_t v172 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v171 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v171 + 64) = xmmword_1BB87A260;
        *(void *)(v171 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v171 + 88) = xmmword_1BB87A470;
        *(_OWORD *)(v171 + 104) = xmmword_1BB8727C0;
        *(void *)(v171 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v171 + 128) = xmmword_1BB87A470;
        *(_OWORD *)(v171 + 144) = xmmword_1BB8727C0;
        *(void *)uint64_t v172 = v9.n128_u64[0];
        *(_OWORD *)(v172 + 8) = xmmword_1BB87A250;
        *(_OWORD *)(v172 + 24) = xmmword_1BB87A260;
        uint64_t v173 = v344;
        *(void *)(v344 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v173 + 48) = xmmword_1BB87A470;
        *(_OWORD *)(v173 + 64) = xmmword_1BB8727C0;
        *(void *)(v173 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v173 + 88) = xmmword_1BB87A470;
        *(_OWORD *)(v173 + 104) = xmmword_1BB8727C0;
        *(void *)(v173 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v173 + 128) = xmmword_1BB87A470;
        *(_OWORD *)(v173 + 144) = xmmword_1BB8727C0;
        break;
      case 0x3Bu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        v9.n128_u64[0] = *((void *)this + 103);
        uint64_t v165 = v342;
        *(void *)uint64_t v342 = v9.n128_u64[0];
        long long v166 = xmmword_1BB87A250;
        *(_OWORD *)(v165 + 8) = xmmword_1BB87A250;
        long long v167 = xmmword_1BB87A240;
LABEL_119:
        *(_OWORD *)(v165 + 24) = v167;
        uint64_t v218 = v344;
        *(void *)uint64_t v344 = v9.n128_u64[0];
        *(_OWORD *)(v218 + 8) = v166;
        *(_OWORD *)(v218 + 24) = v167;
        break;
      case 0x3Cu:
      case 0x47u:
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 103);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_OWORD *)&unsigned char buf[24] = xmmword_1BB8727C0;
        *(void *)std::string::size_type v345 = *(void *)buf;
        *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
        *(_OWORD *)&v345[24] = xmmword_1BB8727C0;
        __n128 v9 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        break;
      case 0x3Du:
        std::string::size_type v207 = (unint64_t *)((char *)this + 904);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&unsigned char buf[12] = *(_OWORD *)((char *)this + 916);
        unint64_t v208 = *((void *)this + 117);
        unsigned int v209 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
        if (v209 <= 8) {
          unsigned int v210 = 6;
        }
        else {
          unsigned int v210 = 8;
        }
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, v210, 1u);
        uint64_t v211 = v342;
        __n128 v9 = *(__n128 *)buf;
        *(_OWORD *)uint64_t v342 = *(_OWORD *)buf;
        long long v212 = *(_OWORD *)&buf[12];
        *(_OWORD *)(v211 + 12) = *(_OWORD *)&buf[12];
        *(_DWORD *)(v211 + 28) = 1;
        *(void *)(v211 + 32) = v208;
        size_t v213 = (__n128 *)v344;
        *(_OWORD *)(v344 + 12) = v212;
        __n128 *v213 = v9;
        v213[1].n128_u32[3] = 1;
        v213[2].n128_u64[0] = v208;
        v9.n128_u64[0] = *v207;
        uint64_t v214 = v342;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *v207;
        *(_OWORD *)(v214 + 48) = xmmword_1BB87A250;
        *(_OWORD *)(v214 + 64) = xmmword_1BB87A260;
        *(void *)(v214 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v214 + 88) = xmmword_1BB87A250;
        *(_OWORD *)(v214 + 104) = xmmword_1BB87A260;
        *(void *)(v214 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v214 + 128) = xmmword_1BB87A250;
        *(_OWORD *)(v214 + 144) = xmmword_1BB87A260;
        v9.n128_u64[0] = *v207;
        *(void *)(v214 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *v207;
        long long v148 = xmmword_1BB87A470;
        *(_OWORD *)(v214 + 168) = xmmword_1BB87A470;
        long long v149 = xmmword_1BB8727C0;
        *(_OWORD *)(v214 + 184) = xmmword_1BB8727C0;
        *(void *)(v214 + 20std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
        *(_OWORD *)(v214 + 208) = xmmword_1BB87A470;
        *(_OWORD *)(v214 + 224) = xmmword_1BB8727C0;
        if (v209 >= 9)
        {
          *(void *)(v214 + 24std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          uint64_t v215 = v214 + 240;
          *(_OWORD *)(v215 + 8) = xmmword_1BB87A470;
          *(_OWORD *)(v215 + 24) = xmmword_1BB8727C0;
LABEL_124:
          *(void *)(v215 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v9.n128_u64[0];
          *(_OWORD *)(v215 + 48) = v148;
          *(_OWORD *)(v215 + 64) = v149;
        }
        break;
      case 0x3Eu:
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 113);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_OWORD *)&unsigned char buf[24] = xmmword_1BB8727C0;
        *(void *)std::string::size_type v345 = *(void *)buf;
        *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
        *(_OWORD *)&v345[24] = xmmword_1BB8727C0;
        __n128 v9 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        break;
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x44u:
        *(void *)&unsigned char buf[32] = *((void *)this + 117);
        long long v40 = *(_OWORD *)((char *)this + 920);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 904);
        *(_OWORD *)&buf[16] = v40;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        goto LABEL_14;
      case 0x43u:
        int v178 = *((_DWORD *)this + 233);
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 113);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB87A250;
        *(_DWORD *)&unsigned char buf[24] = 8;
        *(_DWORD *)&unsigned char buf[28] = v178;
        *(void *)&unsigned char buf[32] = 64;
        *(void *)std::string::size_type v345 = *(void *)buf;
        *(_OWORD *)&v345[8] = xmmword_1BB87A250;
        *(_DWORD *)&v345[24] = 8;
        *(_DWORD *)&v345[28] = v178;
        *(void *)&v345[32] = 64;
        __n128 v9 = VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        break;
      case 0x45u:
        long long v188 = *((_OWORD *)this + 60);
        *(_OWORD *)AudioObjectPropertyAddress buf = *((_OWORD *)this + 59);
        *(_OWORD *)&buf[16] = v188;
        *(void *)&unsigned char buf[32] = *((void *)this + 122);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
LABEL_14:
        uint64_t v41 = v342;
        __n128 v9 = *(__n128 *)&buf[16];
        *(_OWORD *)(v342 + 16) = *(_OWORD *)&buf[16];
        long long v42 = *(_OWORD *)buf;
        *(_OWORD *)uint64_t v41 = *(_OWORD *)buf;
        unint64_t v43 = *(void *)&buf[32];
        *(void *)(v41 + 32) = *(void *)&buf[32];
LABEL_15:
        int v44 = (__n128 *)v344;
        *(_OWORD *)uint64_t v344 = v42;
        v44[1] = v9;
        v44[2].n128_u64[0] = v43;
        break;
      case 0x46u:
        uint64_t v141 = *((void *)this + 103);
        uint64_t v142 = *((void *)this + 98);
        uint64_t v143 = *((void *)this + 113);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 1u);
        uint64_t v144 = v342;
        *(void *)uint64_t v342 = v141;
        v9.n128_u32[1] = 41;
        *(_OWORD *)(v144 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v144 + 24) = xmmword_1BB8727C0;
        uint64_t v145 = v342;
        uint64_t v146 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v142;
        *(_OWORD *)(v145 + 48) = xmmword_1BB8727B0;
        *(_OWORD *)(v145 + 64) = xmmword_1BB8727C0;
        *(void *)uint64_t v146 = v143;
        *(_OWORD *)(v146 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v146 + 24) = xmmword_1BB8727C0;
        break;
      default:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 0, 0);
        break;
    }
    if (v341)
    {
      uint64_t v220 = 0;
      unint64_t v221 = 0;
      do
      {
        uint64_t v222 = *(void *)(v342 + v220 + 32);
        long long v223 = *(_OWORD *)(v342 + v220 + 16);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v342 + v220);
        *(_OWORD *)&buf[16] = v223;
        *(void *)&unsigned char buf[32] = v222;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 884, 8u, 1u, v221++, 0x28uLL, buf, 1);
        v220 += 40;
      }
      while (v221 < v341);
    }
    if (v343)
    {
      uint64_t v224 = 0;
      unint64_t v225 = 0;
      do
      {
        uint64_t v226 = *(void *)(v344 + v224 + 32);
        long long v227 = *(_OWORD *)(v344 + v224 + 16);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v344 + v224);
        *(_OWORD *)&buf[16] = v227;
        *(void *)&unsigned char buf[32] = v226;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 884, 8u, 2u, v225++, 0x28uLL, buf, 1);
        v224 += 40;
      }
      while (v225 < v343);
    }
    uint64_t v74 = 0;
    switch(a2)
    {
      case 0u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0x40u:
        *(_DWORD *)AudioObjectPropertyAddress buf = 10;
        std::string::size_type v231 = (AUPropertyItem **)((char *)this + 24 * a2 + 7072);
        AUPropAndParamHelper::AddItemToAUPropsList(v231, 0x898u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList(v231, 0xEu, 0, 0, 4uLL, v345, 1);
        goto LABEL_356;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Du:
      case 0x2Eu:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x42u:
      case 0x44u:
      case 0x46u:
        *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 884, 0xEu, 0, 0, 4uLL, buf, 1);
        goto LABEL_356;
      case 5u:
        *(_DWORD *)AudioObjectPropertyAddress buf = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 899, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 899, 0xEu, 0, 0, 4uLL, v345, 1);
        goto LABEL_356;
      case 6u:
        *(_DWORD *)std::string::size_type v345 = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 902, 0xE74u, 0, 0, 4uLL, v345, 1);
        LODWORD(v338) = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 902, 0xEu, 0, 0, 4uLL, &v338, 1);
        if (*((void *)this + 2098))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2098);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 902, 0x67727478u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2099))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2099);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 902, 0x676E616Du, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2100))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2100);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 902, 0x61757370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2101))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2101);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 902, 0x70727370u, 0, 0, 8uLL, buf, 1);
        }
        goto LABEL_356;
      case 0xBu:
      case 0xCu:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x25u:
      case 0x26u:
      case 0x3Au:
      case 0x3Bu:
        v228 = (AUPropertyItem **)((char *)this + 24 * a2 + 7072);
        int v229 = (char *)this + 508;
        goto LABEL_134;
      case 0x1Cu:
        int v340 = 1;
        uint64_t v253 = (AUPropertyItem **)((char *)this + 7744);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 968, 0xE74u, 0, 0, 4uLL, &v340, 1);
        int v339 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 968, 0xEu, 0, 0, 4uLL, &v339, 1);
        if (*((void *)this + 2069))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2069);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 968, 0x67727478u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2070))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2070);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 968, 0x676E616Du, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2071))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2071);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 968, 0x61757370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2072))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2072);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 968, 0x70727370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2073))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2073);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 968, 0x67727072u, 0, 0, 8uLL, buf, 1);
          v254 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->((void *)this + 2073);
          applesauce::CF::StringRef::StringRef((CFStringRef *)&v337, (const UInt8 *)"/", 1);
          applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[9]>(&v338, *v254, &v337);
          std::string::size_type v255 = v338;
          applesauce::CF::StringRef::~StringRef(&v338);
          applesauce::CF::StringRef::~StringRef((const void **)&v337);
          *(void *)std::string::size_type v345 = v255;
          AUPropAndParamHelper::AddItemToAUPropsList(v253, 0x70727270u, 0, 0, 8uLL, v345, 1);
        }
        goto LABEL_356;
      case 0x1Eu:
        *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 974, 0xEu, 0, 0, 4uLL, buf, 1);
        goto LABEL_356;
      case 0x1Fu:
        *(_DWORD *)AudioObjectPropertyAddress buf = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 977, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)std::string::size_type v345 = 2 * *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 977, 0xE75u, 0, 0, 4uLL, v345, 1);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 977, 0xEu, 0, 0, 4uLL, (char *)this + 508, 1);
        LODWORD(v338) = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 977, 0xE78u, 0, 0, 4uLL, &v338, 1);
        goto LABEL_356;
      case 0x20u:
        *(_DWORD *)AudioObjectPropertyAddress buf = 1;
        uint64_t v256 = (AUPropertyItem **)((char *)this + 7840);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 980, 0xE74u, 0, 0, 4uLL, buf, 1);
        long long v257 = (_DWORD *)((char *)this + 508);
        AUPropAndParamHelper::AddItemToAUPropsList(v256, 0xEu, 0, 0, 4uLL, v257, 1);
        *(_DWORD *)std::string::size_type v345 = 2 * *v257;
        AUPropAndParamHelper::AddItemToAUPropsList(v256, 0xE75u, 0, 0, 4uLL, v345, 1);
        LODWORD(v338) = 1;
        AUPropAndParamHelper::AddItemToAUPropsList(v256, 0xE78u, 0, 0, 4uLL, &v338, 1);
        goto LABEL_356;
      case 0x24u:
      case 0x3Cu:
        int v235 = (AUPropertyItem **)((char *)this + 24 * a2 + 7072);
        AUPropAndParamHelper::AddItemToAUPropsList(v235, 0xEu, 0, 0, 4uLL, (char *)this + 508, 1);
        int v236 = *((_DWORD *)this + 19);
        if (v236 == 6 || v236 == 1)
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 2;
          AUPropAndParamHelper::AddItemToAUPropsList(v235, 0xE72u, 0, 0, 4uLL, buf, 1);
        }
        goto LABEL_356;
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
        *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)this + 127);
        uint64_t v230 = (AUPropertyItem **)((char *)this + 24 * a2 + 7072);
        AUPropAndParamHelper::AddItemToAUPropsList(v230, 0xEu, 0, 0, 4uLL, buf, 1);
        if (a2 - 43 <= 2)
        {
          *(_DWORD *)std::string::size_type v345 = 3;
          AUPropAndParamHelper::AddItemToAUPropsList(v230, 0xBu, 2u, 0, 4uLL, v345, 1);
        }
        goto LABEL_356;
      case 0x2Fu:
      case 0x30u:
        *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 127);
        uint64_t v233 = (AUPropertyItem **)((char *)this + 24 * a2 + 7072);
        AUPropAndParamHelper::AddItemToAUPropsList(v233, 0xEu, 0, 0, 4uLL, v345, 1);
        uint64_t v234 = (_DWORD *)*((void *)this + 292);
        if (v234 != *((_DWORD **)this + 293) && *v234 == 1886545251)
        {
          {
            applesauce::CF::NumberRef::NumberRef<AUBSS2Algorithm,void>((CFNumberRef *)buf);
            uint64_t v333 = *(void *)buf;
            *(void *)AudioObjectPropertyAddress buf = 0;
            applesauce::CF::NumberRef::~NumberRef((const void **)buf);
            VoiceProcessorV2::PopulateAUPropsAndParamsLists(unsigned int,BOOL)::gBSS2Algorithunint64_t m = v333;
          }
          AUPropAndParamHelper::AddItemToAUPropsList(v233, 0x1195u, 0, 0, 8uLL, &VoiceProcessorV2::PopulateAUPropsAndParamsLists(unsigned int,BOOL)::gBSS2Algorithm, 1);
        }
        goto LABEL_356;
      case 0x34u:
      case 0x35u:
      case 0x36u:
        *(_DWORD *)AudioObjectPropertyAddress buf = 1;
        float v232 = (AUPropertyItem **)((char *)this + 24 * a2 + 7072);
        AUPropAndParamHelper::AddItemToAUPropsList(v232, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList(v232, 0xEu, 0, 0, 4uLL, v345, 1);
        goto LABEL_356;
      case 0x3Du:
        *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1067, 0xEu, 0, 0, 4uLL, v345, 1);
        if (*v5)
        {
          *(void *)&buf[16] = VoiceProcessorV2::VPLogGatingFFTCallback_V2;
          *(void *)AudioObjectPropertyAddress buf = this;
          *(void *)&uint8_t buf[8] = VoiceProcessorV2::EchoGateV3ReadWriteControlDataCallback;
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1067, 0x845u, 0, 0, 0x18uLL, buf, 1);
        }
        goto LABEL_356;
      case 0x3Eu:
        *(_DWORD *)std::string::size_type v345 = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1070, 0xE74u, 0, 0, 4uLL, v345, 1);
        LODWORD(v338) = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1070, 0xEu, 0, 0, 4uLL, &v338, 1);
        if (*((void *)this + 2065))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2065);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1070, 0x67727478u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2066))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2066);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1070, 0x676E616Du, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2067))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2067);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1070, 0x61757370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2068))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2068);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1070, 0x70727370u, 0, 0, 8uLL, buf, 1);
        }
        goto LABEL_356;
      case 0x41u:
        *(_DWORD *)AudioObjectPropertyAddress buf = 1;
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1079, 0xE74u, 0, 0, 4uLL, buf, 1);
        *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1079, 0xEu, 0, 0, 4uLL, v345, 1);
        goto LABEL_356;
      case 0x43u:
        *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1085, 0xEu, 0, 0, 4uLL, buf, 1);
        goto LABEL_356;
      case 0x45u:
        double v241 = *((double *)this + 113);
        double v242 = *((double *)this + 123);
        v9.n128_u32[0] = *((_DWORD *)this + 127);
        v9.n128_f64[0] = (double)v9.n128_u64[0];
        if (v241 != v242) {
          v9.n128_f64[0] = ceil(v242 * v9.n128_f64[0] / v241);
        }
        int v229 = (char *)this + 540;
        *((_DWORD *)this + 135) = v9.n128_f64[0];
        v228 = (AUPropertyItem **)((char *)this + 8728);
LABEL_134:
        AUPropAndParamHelper::AddItemToAUPropsList(v228, 0xEu, 0, 0, 4uLL, v229, 1);
        uint64_t v74 = 0;
        break;
      case 0x47u:
        int v340 = 1;
        std::string::size_type v243 = (AUPropertyItem **)((char *)this + 8776);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1097, 0xE74u, 0, 0, 4uLL, &v340, 1);
        int v339 = *((_DWORD *)this + 127);
        AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1097, 0xEu, 0, 0, 4uLL, &v339, 1);
        if (*((void *)this + 2093))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2093);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1097, 0x67727478u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2094))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2094);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1097, 0x676E616Du, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2095))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2095);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1097, 0x61757370u, 0, 0, 8uLL, buf, 1);
        }
        if (*((void *)this + 2096))
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2096);
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1097, 0x70727370u, 0, 0, 8uLL, buf, 1);
        }
        int v336 = 1953850480;
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[3],int>((applesauce::CF::TypeRef *)buf, "ID", &v336);
        CFArrayRef v244 = (char *)this + 8;
        if (*((char *)this + 31) < 0) {
          CFArrayRef v244 = *(char **)v244;
        }
        int v337 = v244;
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],char const*>((applesauce::CF::TypeRef *)&buf[16], "cfobject", &v337);
        *(void *)std::string::size_type v345 = buf;
        *(void *)&v345[8] = 2;
        CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v345);
        int v246 = (const void *)*((void *)this + 2097);
        uint64_t v247 = (void *)((char *)this + 16776);
        *((void *)this + 2097) = CFDictionaryRef;
        v338 = v246;
        applesauce::CF::DictionaryRef::~DictionaryRef(&v338);
        for (uint64_t i = 0; i != -32; i -= 16)
        {
          std::string::size_type v249 = *(const void **)&buf[i + 24];
          if (v249) {
            CFRelease(v249);
          }
          uint64_t v250 = *(const void **)&buf[i + 16];
          if (v250) {
            CFRelease(v250);
          }
        }
        if (*v247)
        {
          *(void *)AudioObjectPropertyAddress buf = *v247;
          AUPropAndParamHelper::AddItemToAUPropsList(v243, 0x67727072u, 0, 0, 8uLL, buf, 1);
          int v251 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(v247);
          applesauce::CF::StringRef::StringRef((CFStringRef *)&v337, (const UInt8 *)"/", 1);
          applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[9]>(&v338, *v251, &v337);
          uint64_t v252 = v338;
          applesauce::CF::StringRef::~StringRef(&v338);
          applesauce::CF::StringRef::~StringRef((const void **)&v337);
          *(void *)std::string::size_type v345 = v252;
          AUPropAndParamHelper::AddItemToAUPropsList(v243, 0x70727270u, 0, 0, 8uLL, v345, 1);
        }
        goto LABEL_356;
      default:
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 0u:
        long long v104 = *((_OWORD *)this + 14);
        *(_OWORD *)AudioObjectPropertyAddress buf = *((_OWORD *)this + 13);
        *(_OWORD *)&buf[16] = v104;
        *(void *)&unsigned char buf[32] = *((void *)this + 30);
        long long v105 = *(_OWORD *)((char *)this + 264);
        *(_OWORD *)std::string::size_type v345 = *(_OWORD *)((char *)this + 248);
        *(_OWORD *)&v345[16] = v105;
        *(void *)&v345[32] = *((void *)this + 35);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 1u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 0);
        uint64_t v106 = v342;
        *(void *)uint64_t v342 = *((void *)this + 31);
        *(_OWORD *)(v106 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v106 + 24) = xmmword_1BB8727C0;
        goto LABEL_209;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 8u:
      case 9u:
        long long v20 = *((_OWORD *)this + 19);
        *(_OWORD *)AudioObjectPropertyAddress buf = *((_OWORD *)this + 18);
        *(_OWORD *)&buf[16] = v20;
        *(void *)&unsigned char buf[32] = *((void *)this + 40);
        long long v21 = *((_OWORD *)this + 19);
        *(_OWORD *)std::string::size_type v345 = *((_OWORD *)this + 18);
        *(_OWORD *)&v345[16] = v21;
        *(void *)&v345[32] = *((void *)this + 40);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 6u:
      case 7u:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v58 = v342;
        uint64_t v59 = *((void *)this + 40);
        long long v60 = *((_OWORD *)this + 19);
        *(_OWORD *)uint64_t v342 = *((_OWORD *)this + 18);
        *(_OWORD *)(v58 + 16) = v60;
        *(void *)(v58 + 32) = v59;
        int v61 = (_OWORD *)v344;
        long long v62 = *((_OWORD *)this + 18);
        long long v63 = *((_OWORD *)this + 19);
        *(void *)(v344 + 32) = *((void *)this + 40);
        *int v61 = v62;
        v61[1] = v63;
        if ((*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this) >= 8
          && (~*((_DWORD *)this + 2224) & 0xC0) == 0)
        {
          uint64_t v64 = *((void *)this + 36);
          int v65 = *((_DWORD *)this + 79);
          uint64_t v66 = v342;
          *(void *)uint64_t v342 = v64;
          *(_OWORD *)(v66 + 8) = xmmword_1BB87A250;
          *(_DWORD *)(v66 + 24) = 8;
          *(_DWORD *)(v66 + 28) = v65;
          *(void *)(v66 + 32) = 64;
          uint64_t v67 = v344;
          *(void *)uint64_t v344 = v64;
          *(_OWORD *)(v67 + 8) = xmmword_1BB87A250;
          *(_DWORD *)(v67 + 24) = 8;
          *(_DWORD *)(v67 + 28) = v65;
          *(void *)(v67 + 32) = 64;
        }
        if ((!*((_DWORD *)this + 19)
           || (*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this) <= 7)
          && (*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this) > 7)
        {
          goto LABEL_209;
        }
        double v68 = *((double *)this + 36);
        double v69 = *((double *)this + 41);
        unint64_t v70 = *((unsigned int *)this + 129);
        if (v68 != v69) {
          LODWORD(v7std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = vcvtpd_u64_f64(v68 * (double)v70 / v69);
        }
        int NextFFTFriendlyBlkSz = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v70);
        if (NextFFTFriendlyBlkSz == v70) {
          goto LABEL_209;
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v72 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
        if (v72)
        {
          unsigned int v73 = v72;
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3992;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v70;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = NextFFTFriendlyBlkSz;
            _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> _vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", buf, 0x1Eu);
          }
        }
        uint64_t v74 = 1718772077;
        unint64_t v75 = (int *)*((void *)this + 1578);
        if (v75 && (*v5 || v5[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v75, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 3992, "GetAUStreamFormats", "_vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", v70, NextFFTFriendlyBlkSz);
        }
        break;
      case 0xAu:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x28u:
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 41);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_DWORD *)&unsigned char buf[24] = 4;
        *(_DWORD *)&unsigned char buf[28] = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
        *(void *)&unsigned char buf[32] = 32;
        *(void *)std::string::size_type v345 = *(void *)buf;
        *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
        *(void *)&v345[24] = __PAIR64__(*(unsigned int *)&buf[28], 4);
        *(void *)&v345[32] = 32;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        unint64_t v45 = (void *)((char *)this + 328);
        int v46 = *((_DWORD *)this + 85);
        int v47 = *((_DWORD *)this + 90);
        int v48 = *((_DWORD *)this + 91);
        if ((v46 & 0x20) != 0)
        {
          unsigned int v49 = 1;
        }
        else
        {
          unsigned int v49 = *((_DWORD *)this + 89);
          if (!v49)
          {
            unsigned int v50 = (v47 + 7) >> 3;
            goto LABEL_52;
          }
        }
        unsigned int v50 = *((_DWORD *)this + 88) / v49;
LABEL_52:
        *(void *)AudioObjectPropertyAddress buf = *v45;
        *(_DWORD *)&uint8_t buf[8] = *((_DWORD *)this + 84);
        *(_DWORD *)&unsigned char buf[12] = v46 & 0xFFFFFFDF;
        *(_DWORD *)&buf[16] = v50;
        *(_DWORD *)&buf[20] = 1;
        *(_DWORD *)&unsigned char buf[24] = v50;
        *(_DWORD *)&unsigned char buf[28] = 1;
        *(_DWORD *)&unsigned char buf[32] = v47;
        *(_DWORD *)&buf[36] = v48;
        *(void *)std::string::size_type v345 = *v45;
        *(_DWORD *)&v345[8] = *((_DWORD *)this + 84);
        *(_DWORD *)&v345[12] = v46 & 0xFFFFFFDF;
        *(_DWORD *)&v345[16] = v50;
        *(_DWORD *)&v345[20] = 1;
        *(_DWORD *)&v345[24] = v50;
        *(_DWORD *)&v345[28] = 1;
        *(_DWORD *)&v345[32] = v47;
        *(_DWORD *)&v345[36] = v48;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
LABEL_209:
        if (v341)
        {
          uint64_t v272 = 0;
          unint64_t v273 = 0;
          do
          {
            uint64_t v274 = *(void *)(v342 + v272 + 32);
            long long v275 = *(_OWORD *)(v342 + v272 + 16);
            *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v342 + v272);
            *(_OWORD *)&buf[16] = v275;
            *(void *)&unsigned char buf[32] = v274;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1371, 8u, 1u, v273++, 0x28uLL, buf, 1);
            v272 += 40;
          }
          while (v273 < v341);
        }
        if (v343)
        {
          uint64_t v276 = 0;
          unint64_t v277 = 0;
          do
          {
            uint64_t v278 = *(void *)(v344 + v276 + 32);
            long long v279 = *(_OWORD *)(v344 + v276 + 16);
            *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v344 + v276);
            *(_OWORD *)&buf[16] = v279;
            *(void *)&unsigned char buf[32] = v278;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1371, 8u, 2u, v277++, 0x28uLL, buf, 1);
            v276 += 40;
          }
          while (v277 < v343);
        }
        double v280 = *((double *)this + 36);
        double v281 = *((double *)this + 41);
        unsigned int v282 = *((_DWORD *)this + 129);
        double v283 = (double)v282;
        if (v280 != v281) {
          double v283 = ceil(v280 * v283 / v281);
        }
        uint64_t v74 = 0;
        unsigned int v284 = v283;
        *((_DWORD *)this + 134) = v283;
        switch(a2)
        {
          case 0u:
            if (*((void *)this + 2037))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2037);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x67727478u, 0, 0, 8uLL, buf, 1);
            }
            if (*((void *)this + 2038))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2038);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x676E616Du, 0, 0, 8uLL, buf, 1);
            }
            if (*((void *)this + 2039))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2039);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x61757370u, 0, 0, 8uLL, buf, 1);
            }
            if (*((void *)this + 2040))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2040);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x70727370u, 0, 0, 8uLL, buf, 1);
            }
            if (*((void *)this + 2041))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2041);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x67727072u, 0, 0, 8uLL, buf, 1);
            }
            if (*((void *)this + 2042))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2042);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x67727072u, 0, 0, 8uLL, buf, 0);
            }
            if (*((void *)this + 2043))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2043);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x67727072u, 0, 0, 8uLL, buf, 0);
            }
            if (*((void *)this + 2044))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2044);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1371, 0x67727072u, 0, 0, 8uLL, buf, 0);
            }
            if (*((_DWORD *)this + 596) != 1781740087)
            {
              unsigned int v302 = atomic_load((unsigned int *)this + 577);
              AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 8912, 1969844082, (float)v302);
            }
            if (VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this) >= 2)
            {
              float v303 = 0.0;
              if (*((_DWORD *)this + 19) != 2) {
                float v303 = 1.0;
              }
              AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 8912, 1966175095, v303);
            }
            goto LABEL_356;
          case 1u:
            if (*((void *)this + 2058))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2058);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1374, 0x67727478u, 0, 0, 8uLL, buf, 1);
              *(_DWORD *)std::string::size_type v345 = 0;
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1374, 0xBu, 2u, 0, 4uLL, v345, 1);
            }
            if (*((void *)this + 2059))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2059);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1374, 0x676E616Du, 0, 0, 8uLL, buf, 1);
            }
            if (*((void *)this + 2060))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2060);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1374, 0x61757370u, 0, 0, 8uLL, buf, 1);
            }
            if (*((void *)this + 2061))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 2061);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1374, 0x70727370u, 0, 0, 8uLL, buf, 1);
            }
            goto LABEL_356;
          case 2u:
            *(_DWORD *)AudioObjectPropertyAddress buf = 10;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1377, 0x898u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 134);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1377, 0xEu, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 3u:
            *(_DWORD *)AudioObjectPropertyAddress buf = v283;
            v308 = (AUPropertyItem **)((char *)this + 11040);
            AUPropAndParamHelper::AddItemToAUPropsList(v308, 0xEu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = 0;
            AUPropAndParamHelper::AddItemToAUPropsList(v308, 0x19CAu, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 4u:
          case 5u:
          case 0xEu:
            *(_DWORD *)AudioObjectPropertyAddress buf = v283;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1371, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_356;
          case 6u:
            *(_DWORD *)std::string::size_type v345 = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1389, 0xE74u, 0, 0, 4uLL, v345, 1);
            double v294 = *((double *)this + 36);
            double v295 = *((double *)this + 41);
            unint64_t v296 = *((unsigned int *)this + 129);
            if (v294 != v295) {
              LODWORD(v296) = vcvtpd_u64_f64(v294 * (double)v296 / v295);
            }
            LODWORD(v338) = v296;
            int v297 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v296);
            if (BlockSizeHelper::GetNextFFTFriendlyBlkSz(v296) == v296)
            {
              UInt64 v298 = (char *)this + 480;
              *((unsigned char *)this + 48std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
            }
            else
            {
              int v321 = *((_DWORD *)this + 19);
              UInt64 v298 = (char *)this + 480;
              *((unsigned char *)this + 48std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v321 == 0;
              if (!v321)
              {
                double v322 = *((double *)this + 36);
                if ((double)v296 / v322 >= 0.012) {
                  unint64_t v323 = v296;
                }
                else {
                  unint64_t v323 = (v322 * 0.012);
                }
                int v324 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v323);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                UInt32 v325 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v325)
                {
                  uint64_t v326 = v325;
                  if (os_log_type_enabled(v325, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                    *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4964;
                    *(_WORD *)&unsigned char buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v296;
                    *(_WORD *)&unsigned char buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v324;
                    _os_log_impl(&dword_1BB0CE000, v326, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> _vp<INFO>: The OCNS isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", buf, 0x1Eu);
                  }
                }
                std::string::size_type v327 = (int *)*((void *)this + 1578);
                if (v327 && (*v5 || v5[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v327, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 4964, "PopulateAUPropsAndParamsLists", "_vp<INFO>: The OCNS isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", v296, v324);
                }
                LODWORD(v338) = v324;
              }
            }
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1389, 0xEu, 0, 0, 4uLL, &v338, 1);
            if (v297 == v338 || *v298) {
              goto LABEL_356;
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            size_t v328 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
            if (v328)
            {
              unsigned int v329 = v328;
              if (os_log_type_enabled(v328, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4973;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v338;
                *(_WORD *)&unsigned char buf[24] = 1024;
                *(_DWORD *)&buf[26] = v297;
                _os_log_impl(&dword_1BB0CE000, v329, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> _vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", buf, 0x1Eu);
              }
            }
            uint64_t v74 = 1718772077;
            unsigned int v330 = (int *)*((void *)this + 1578);
            if (v330 && (*v5 || v5[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v330, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 4973, "PopulateAUPropsAndParamsLists", "_vp<WARNING>: The DLNS isn't configured at an fft-friendly blocksize (%d vs %d), disabling it for now", v338, v297);
            }
            goto LABEL_357;
          case 7u:
            *(_DWORD *)std::string::size_type v345 = v283;
            if (BlockSizeHelper::GetNextFFTFriendlyBlkSz(v283) == v284)
            {
              *((unsigned char *)this + 48std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
            }
            else
            {
              int v314 = *((_DWORD *)this + 19);
              *((unsigned char *)this + 48std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v314 == 0;
              if (!v314)
              {
                double v315 = *((double *)this + 36);
                if ((double)v284 / v315 >= 0.012) {
                  unint64_t v316 = v284;
                }
                else {
                  unint64_t v316 = (v315 * 0.012);
                }
                int v317 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v316);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                int v318 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v318)
                {
                  UInt32 v319 = v318;
                  if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                    *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4934;
                    *(_WORD *)&unsigned char buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v284;
                    *(_WORD *)&unsigned char buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v317;
                    _os_log_impl(&dword_1BB0CE000, v319, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> _vp<INFO>: The SpeechEnhance isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", buf, 0x1Eu);
                  }
                }
                unint64_t v320 = (int *)*((void *)this + 1578);
                if (v320 && (*v5 || v5[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v320, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 4934, "PopulateAUPropsAndParamsLists", "_vp<INFO>: The SpeechEnhance isn't configured at an fft-friendly blocksize (%d vs %d), reconfiguring it", v284, v317);
                }
                *(_DWORD *)std::string::size_type v345 = v317;
              }
            }
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1392, 0xEu, 0, 0, 4uLL, v345, 1);
            *(void *)AudioObjectPropertyAddress buf = *((void *)this + 113);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1392, 0x3EBu, 0, 0, 8uLL, buf, 1);
            LODWORD(v338) = *((_DWORD *)this + 127);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1392, 0x3ECu, 0, 0, 4uLL, &v338, 1);
            goto LABEL_356;
          case 8u:
            *(_DWORD *)AudioObjectPropertyAddress buf = v283;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1395, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_356;
          case 9u:
            *(_DWORD *)AudioObjectPropertyAddress buf = v283;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1398, 0xEu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = 1;
            double v300 = *((double *)this + 36);
            double v301 = *((double *)this + 41);
            if (v300 != v301)
            {
              LODWORD(v299) = *((_DWORD *)this + 129);
              *(_DWORD *)std::string::size_type v345 = ceil(v300 * (double)v299 / v301) == floor(v300 * (double)v299 / v301);
            }
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1398, 0xE74u, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 0xFu:
            *(_DWORD *)AudioObjectPropertyAddress buf = v282;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1416, 0xEu, 0, 0, 4uLL, buf, 1);
            if (*((unsigned char *)this + 2244) || v5[663])
            {
              *(_DWORD *)std::string::size_type v345 = 0;
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1416, 0x15u, 0, 0, 4uLL, v345, 1);
              if (v5[663])
              {
                LODWORD(v338) = 1;
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1416, 0x6E657065u, 0, 0, 4uLL, &v338, 1);
              }
              LODWORD(v338) = *((_DWORD *)this + 4157);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1416, 0x6E65706Cu, 0, 0, 4uLL, &v338, 1);
            }
            goto LABEL_356;
          case 0x10u:
          case 0x11u:
          case 0x13u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Eu:
            *(_DWORD *)AudioObjectPropertyAddress buf = v282;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1371, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_356;
          case 0x12u:
          case 0x14u:
          case 0x1Fu:
            *(_DWORD *)AudioObjectPropertyAddress buf = 10;
            std::string::size_type v285 = (AUPropertyItem **)((char *)this + 24 * a2 + 10968);
            AUPropAndParamHelper::AddItemToAUPropsList(v285, 0x898u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList(v285, 0xEu, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 0x15u:
          case 0x16u:
            *(_DWORD *)AudioObjectPropertyAddress buf = 1;
            v286 = (AUPropertyItem **)((char *)this + 24 * a2 + 10968);
            AUPropAndParamHelper::AddItemToAUPropsList(v286, 0xE74u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList(v286, 0xEu, 0, 0, 4uLL, v345, 1);
            if (!*((unsigned char *)this + 4576))
            {
              long long v287 = (float *)*((void *)this + 266);
              BOOL v288 = (float *)*((void *)this + 267);
              if (v287 != v288)
              {
                UInt64 v289 = v287 + 1;
                if (v287 + 1 != v288)
                {
                  float v290 = *v287;
                  std::string::size_type v291 = v287 + 1;
                  do
                  {
                    float v292 = *v291++;
                    float v293 = v292;
                    if (v292 < v290)
                    {
                      float v290 = v293;
                      long long v287 = v289;
                    }
                    UInt64 v289 = v291;
                  }
                  while (v291 != v288);
                }
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 24 * a2 + 8912, 1, fmaxf(*v287, 0.0));
              }
            }
            goto LABEL_356;
          case 0x1Au:
            *(_DWORD *)AudioObjectPropertyAddress buf = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1449, 0x19CAu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1449, 0xEu, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 0x20u:
            *(_DWORD *)AudioObjectPropertyAddress buf = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1467, 0xE74u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 129);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1467, 0xEu, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 0x21u:
            *(_DWORD *)AudioObjectPropertyAddress buf = 10;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1470, 0x898u, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1470, 0xEu, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Cu:
          case 0x2Eu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x39u:
          case 0x3Au:
          case 0x3Cu:
            *(_DWORD *)AudioObjectPropertyAddress buf = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * a2 + 1371, 0xEu, 0, 0, 4uLL, buf, 1);
            goto LABEL_356;
          case 0x2Bu:
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1500, 0xEu, 0, 0, 4uLL, v345, 1);
            if (*((unsigned char *)this + 481))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 103);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1500, 0xF3Du, 0, 0, 8uLL, buf, 1);
              LODWORD(v338) = *((_DWORD *)this + 127);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1500, 0xF3Eu, 0, 0, 4uLL, &v338, 1);
            }
            goto LABEL_356;
          case 0x2Du:
            LODWORD(v337) = 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1506, 0xE74u, 0, 0, 4uLL, &v337, 1);
            VoiceProcessorV2::GetRefPortUIDForPME((VoiceProcessorV2 *)buf, this);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v335, *(CFTypeRef *)buf);
            char isPersonalMediaEnabled = va::PersonalAudioInterface::isPersonalMediaEnabled((NSString **)&v335);
            applesauce::CF::StringRef::~StringRef(&v335);
            if (isPersonalMediaEnabled)
            {
              int v313 = (VoiceProcessorV2::GetRefPortHLC2chStateForPME(this) & 1) == 0;
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v334, *(CFTypeRef *)buf);
              va::PersonalAudioInterface::getPreset((applesauce::CF::DictionaryRef *)v345, &v334);
              applesauce::CF::StringRef::~StringRef((const void **)&v334);
              if (*(void *)v345)
              {
                v338 = *(const void **)v345;
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1506, 0, 0, 0, 8uLL, &v338, 1);
                goto LABEL_352;
              }
            }
            else
            {
              int v313 = va::PersonalAudioInterface::isPersonalMediaEnabled(v312);
              va::PersonalAudioInterface::getPreset((va::PersonalAudioInterface *)v345);
              if (*(void *)v345)
              {
                v338 = *(const void **)v345;
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1506, 0, 0, 0, 8uLL, &v338, 1);
                goto LABEL_352;
              }
            }
            int v313 = 0;
LABEL_352:
            applesauce::CF::DictionaryRef::~DictionaryRef((const void **)v345);
            *(_DWORD *)std::string::size_type v345 = v313 ^ 1;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1506, 0x15u, 0, 0, 4uLL, v345, 1);
            LODWORD(v338) = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1506, 0xEu, 0, 0, 4uLL, &v338, 1);
            applesauce::CF::StringRef::~StringRef((const void **)buf);
LABEL_356:
            uint64_t v74 = 0;
            break;
          case 0x2Fu:
            uint64_t v309 = *((void *)this + 1112);
            if ((v309 & 0x400000) != 0 && (*((unsigned char *)this + 8906) & 0x40) != 0 && *((void *)this + 460)) {
              goto LABEL_354;
            }
            if ((v309 & 0x4000000) != 0 && (*((unsigned char *)this + 8907) & 4) != 0)
            {
              uint64_t v310 = *((void *)this + 464);
              if (v310) {
LABEL_354:
              }
                LODWORD(v31std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 89) > 1u;
            }
            else
            {
              LODWORD(v31std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = 0;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = v310;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1512, 0x19CAu, 0, 0, 4uLL, buf, 1);
            *(_DWORD *)std::string::size_type v345 = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1512, 0xEu, 0, 0, 4uLL, v345, 1);
            goto LABEL_356;
          case 0x38u:
            *(_DWORD *)std::string::size_type v345 = 0;
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1539, 0x15u, 0, 0, 4uLL, v345, 1);
            int v304 = *((_DWORD *)this + 548);
            if (v304) {
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1539, 0xFA05u, 0, 0, (4 * v304), *((void **)this + 273), 1);
            }
            LODWORD(v338) = *((_DWORD *)this + 121);
            AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1539, 0xEu, 0, 0, 4uLL, &v338, 1);
            if (*((_DWORD *)this + 1130) && *((void *)this + 269))
            {
              *(void *)AudioObjectPropertyAddress buf = *((void *)this + 269);
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1539, 0xFA09u, 0, 0, 8uLL, buf, 1);
            }
            int v305 = *((_DWORD *)this + 542);
            if (v305)
            {
              v306 = (void *)*((void *)this + 270);
              if (v306) {
                AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1539, 0xFA0Au, 0, 0, (8 * v305), v306, 1);
              }
            }
            unsigned int v307 = *((_DWORD *)this + 18);
            if (v307 <= 0x34 && ((1 << v307) & 0x1FFFE33F3FFEF0) != 0 && *((void *)this + 278)) {
              AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1539, 0xFA08u, 0, 0, 8uLL, (char *)this + 2224, 1);
            }
            goto LABEL_356;
          default:
            goto LABEL_357;
        }
        break;
      case 0xEu:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v110 = *((void *)this + 36);
        uint64_t v111 = v342;
        *(void *)uint64_t v342 = v110;
        *(_OWORD *)(v111 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v111 + 24) = xmmword_1BB8727C0;
        uint64_t v112 = v344;
        *(void *)uint64_t v344 = v110;
        *(_OWORD *)(v112 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v112 + 24) = xmmword_1BB8727C0;
        goto LABEL_209;
      case 0xFu:
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 41);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_DWORD *)&unsigned char buf[24] = 4;
        *(_DWORD *)&unsigned char buf[28] = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(this);
        *(void *)&unsigned char buf[32] = 32;
        if (*((unsigned char *)this + 2244)) {
          int v117 = 2;
        }
        else {
          int v117 = 1;
        }
        *(void *)std::string::size_type v345 = *((void *)this + 41);
        *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
        *(_DWORD *)&v345[24] = 4;
        *(_DWORD *)&v345[28] = v117;
        *(void *)&v345[32] = 32;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 5u, 2u);
        uint64_t v118 = v342;
        *(_OWORD *)uint64_t v342 = *(_OWORD *)buf;
        *(_OWORD *)(v118 + 16) = *(_OWORD *)&buf[16];
        *(void *)(v118 + 32) = *(void *)&buf[32];
        long long v119 = *(_OWORD *)v345;
        long long v120 = *(_OWORD *)&v345[16];
        long long v121 = *(_OWORD *)v345;
        long long v122 = *(_OWORD *)&v345[16];
        *(_OWORD *)(v118 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)v345;
        *(_OWORD *)(v118 + 56) = v120;
        uint64_t v123 = *(void *)&v345[32];
        uint64_t v124 = *(void *)&v345[32];
        *(void *)(v118 + 72) = *(void *)&v345[32];
        *(_OWORD *)(v118 + 12std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v119;
        *(_OWORD *)(v118 + 8std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v119;
        *(_OWORD *)(v118 + 96) = v120;
        *(void *)(v118 + 112) = v123;
        *(void *)(v118 + 152) = v123;
        *(_OWORD *)(v118 + 136) = v120;
        *(_OWORD *)(v118 + 16std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v121;
        *(_OWORD *)(v118 + 176) = v122;
        *(void *)(v118 + 192) = v124;
        long long v125 = v345;
        if (!*((unsigned char *)this + 2244)) {
          long long v125 = buf;
        }
        uint64_t v126 = v344;
        *(_OWORD *)uint64_t v344 = *(_OWORD *)v125;
        *(_OWORD *)(v126 + 16) = *((_OWORD *)v125 + 1);
        *(void *)(v126 + 32) = *((void *)v125 + 4);
        *(void *)(v126 + 72) = v124;
        *(_OWORD *)(v126 + 56) = v122;
        *(_OWORD *)(v126 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v121;
        goto LABEL_209;
      case 0x10u:
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 41);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_OWORD *)&unsigned char buf[24] = xmmword_1BB879EA0;
        *(void *)std::string::size_type v345 = *(void *)buf;
        *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
        *(_OWORD *)&v345[24] = xmmword_1BB879EA0;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x1Eu:
      case 0x1Fu:
      case 0x24u:
        uint64_t v17 = *((void *)this + 41);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v18 = v342;
        *(void *)uint64_t v342 = v17;
        *(_OWORD *)(v18 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v18 + 24) = xmmword_1BB8727C0;
        uint64_t v19 = v344;
        *(void *)uint64_t v344 = v17;
        *(_OWORD *)(v19 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v19 + 24) = xmmword_1BB8727C0;
        goto LABEL_209;
      case 0x15u:
      case 0x16u:
      case 0x2Bu:
        uint64_t v93 = *((void *)this + 41);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 2u, 1u);
        uint64_t v94 = v342;
        *(void *)uint64_t v342 = v93;
        *(_OWORD *)(v94 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v94 + 24) = xmmword_1BB8727C0;
        uint64_t v95 = v342;
        uint64_t v96 = v344;
        *(void *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v93;
        *(_OWORD *)(v95 + 48) = xmmword_1BB8727B0;
        *(_OWORD *)(v95 + 64) = xmmword_1BB8727C0;
        *(void *)uint64_t v96 = v93;
        *(_OWORD *)(v96 + 8) = xmmword_1BB8727B0;
        *(_OWORD *)(v96 + 24) = xmmword_1BB8727C0;
        goto LABEL_209;
      case 0x1Au:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x32u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x3Cu:
        *(void *)&unsigned char buf[32] = *((void *)this + 45);
        long long v11 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&buf[16] = v11;
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v12 = v342;
        long long v13 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v342 + 16) = *(_OWORD *)&buf[16];
        long long v14 = *(_OWORD *)buf;
        *(_OWORD *)uint64_t v12 = *(_OWORD *)buf;
        uint64_t v15 = *(void *)&buf[32];
        *(void *)(v12 + 32) = *(void *)&buf[32];
        uint64_t v16 = v344;
        *(_OWORD *)uint64_t v344 = v14;
        *(_OWORD *)(v16 + 16) = v13;
        *(void *)(v16 + 32) = v15;
        goto LABEL_209;
      case 0x20u:
      case 0x21u:
      case 0x22u:
        goto LABEL_26;
      case 0x23u:
      case 0x25u:
        uint64_t v57 = *((void *)this + 1112);
        if ((v57 & 0x400000) != 0 && (*((unsigned char *)this + 8906) & 0x40) != 0 && *((void *)this + 460)
          || (v57 & 0x4000000) != 0 && (*((unsigned char *)this + 8907) & 4) != 0 && *((void *)this + 464))
        {
LABEL_26:
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 41);
          *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
          *(_DWORD *)&unsigned char buf[24] = 4;
          *(_DWORD *)&unsigned char buf[28] = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
          *(void *)&unsigned char buf[32] = 32;
          *(void *)std::string::size_type v345 = *(void *)buf;
          *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
          *(void *)&v345[24] = __PAIR64__(*(unsigned int *)&buf[28], 4);
          *(void *)&v345[32] = 32;
          VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        }
        else
        {
          *(void *)AudioObjectPropertyAddress buf = *((void *)this + 41);
          *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
          *(_OWORD *)&unsigned char buf[24] = xmmword_1BB879E90;
          *(void *)std::string::size_type v345 = *(void *)buf;
          *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
          *(_OWORD *)&v345[24] = xmmword_1BB879E90;
          VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        }
        goto LABEL_209;
      case 0x26u:
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 41);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_OWORD *)&unsigned char buf[24] = xmmword_1BB879E90;
        long long v109 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)std::string::size_type v345 = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&v345[16] = v109;
        *(void *)&v345[32] = *((void *)this + 45);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 0x27u:
        __int16 v130 = (_OWORD *)((char *)this + 328);
        *(void *)AudioObjectPropertyAddress buf = *((void *)this + 41);
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_DWORD *)&unsigned char buf[24] = 4;
        *(_DWORD *)&unsigned char buf[28] = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
        *(void *)&unsigned char buf[32] = 32;
        long long v131 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)std::string::size_type v345 = *v130;
        *(_OWORD *)&v345[16] = v131;
        *(void *)&v345[32] = *((void *)this + 45);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 0x29u:
        *(void *)&unsigned char buf[32] = *((void *)this + 45);
        long long v107 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&buf[16] = v107;
        long long v108 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)std::string::size_type v345 = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&v345[16] = v108;
        *(void *)&v345[32] = *((void *)this + 45);
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 0x2Au:
        uint64_t v101 = *((void *)this + 41);
        DynamicsDSPChannelunsigned int Count = VoiceProcessorV2::GetDynamicsDSPChannelCount(this);
        int v103 = *((_DWORD *)this + 1075);
        *(void *)AudioObjectPropertyAddress buf = v101;
        *(_OWORD *)&uint8_t buf[8] = xmmword_1BB8727B0;
        *(_DWORD *)&unsigned char buf[24] = 4;
        *(_DWORD *)&unsigned char buf[28] = DynamicsDSPChannelCount;
        *(void *)&unsigned char buf[32] = 32;
        *(void *)std::string::size_type v345 = v101;
        *(_OWORD *)&v345[8] = xmmword_1BB8727B0;
        *(_DWORD *)&v345[24] = 4;
        *(_DWORD *)&v345[28] = v103;
        *(void *)&v345[32] = 32;
        VPAUBusFormats::SetFormats((VPAUBusFormats *)&v341, (uint64_t)buf, 1, (uint64_t)v345, 1);
        goto LABEL_209;
      case 0x30u:
      case 0x31u:
      case 0x39u:
        uint64_t v113 = *((void *)this + 41);
        int v114 = *((_DWORD *)this + 1075);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 1u, 1u);
        uint64_t v115 = v342;
        *(void *)uint64_t v342 = v113;
        *(_OWORD *)(v115 + 8) = xmmword_1BB8727B0;
        *(_DWORD *)(v115 + 24) = 4;
        *(_DWORD *)(v115 + 28) = v114;
        *(void *)(v115 + 32) = 32;
        uint64_t v116 = v344;
        *(void *)uint64_t v344 = v113;
        *(_OWORD *)(v116 + 8) = xmmword_1BB8727B0;
        *(_DWORD *)(v116 + 24) = 4;
        *(_DWORD *)(v116 + 28) = v114;
        *(void *)(v116 + 32) = 32;
        goto LABEL_209;
      case 0x38u:
        *(void *)&unsigned char buf[32] = *((void *)this + 45);
        long long v97 = *(_OWORD *)((char *)this + 344);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)((char *)this + 328);
        *(_OWORD *)&buf[16] = v97;
        unsigned int v98 = 1;
        if (*((_DWORD *)this + 1130) == 1)
        {
          int v99 = *((_DWORD *)this + 379);
          BOOL v100 = v99 != 0;
          if (v99) {
            unsigned int v98 = 2;
          }
          else {
            unsigned int v98 = 1;
          }
        }
        else
        {
          BOOL v100 = 0;
        }
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, v98, 1u);
        uint64_t v258 = v342;
        long long v259 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v342 + 16) = *(_OWORD *)&buf[16];
        long long v260 = *(_OWORD *)buf;
        *(_OWORD *)uint64_t v258 = *(_OWORD *)buf;
        uint64_t v261 = *(void *)&buf[32];
        *(void *)(v258 + 32) = *(void *)&buf[32];
        uint64_t v262 = v344;
        *(_OWORD *)uint64_t v344 = v260;
        *(_OWORD *)(v262 + 16) = v259;
        *(void *)(v262 + 32) = v261;
        if (v100)
        {
          long long v263 = *((_OWORD *)this + 93);
          long long v264 = *((_OWORD *)this + 94);
          *(void *)(v258 + 72) = *((void *)this + 190);
          *(_OWORD *)(v258 + 56) = v264;
          *(_OWORD *)(v258 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = v263;
        }
        goto LABEL_209;
      case 0x3Au:
        unsigned int v127 = 1;
        if (*((_DWORD *)this + 1130) == 1)
        {
          int v128 = *((_DWORD *)this + 379);
          BOOL v129 = v128 != 0;
          if (v128) {
            unsigned int v127 = 2;
          }
          else {
            unsigned int v127 = 1;
          }
        }
        else
        {
          BOOL v129 = 0;
        }
        uint64_t v265 = *((void *)this + 41);
        int v266 = *((_DWORD *)this + 1075);
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, v127, 1u);
        uint64_t v267 = v342;
        *(void *)uint64_t v342 = v265;
        *(_OWORD *)(v267 + 8) = xmmword_1BB8727B0;
        *(_DWORD *)(v267 + 24) = 4;
        *(_DWORD *)(v267 + 28) = v266;
        *(void *)(v267 + 32) = 32;
        uint64_t v268 = v344;
        *(void *)uint64_t v344 = v265;
        *(_OWORD *)(v268 + 8) = xmmword_1BB8727B0;
        *(_DWORD *)(v268 + 24) = 4;
        *(_DWORD *)(v268 + 28) = v266;
        *(void *)(v268 + 32) = 32;
        if (v129)
        {
          uint64_t v269 = v342;
          uint64_t v270 = *((void *)this + 190);
          long long v271 = *((_OWORD *)this + 94);
          *(_OWORD *)(v342 + 4std::unique_ptr<AULoudnessWarriorKernel>::reset[abi:ne180100](&a9, 0) = *((_OWORD *)this + 93);
          *(_OWORD *)(v269 + 56) = v271;
          *(void *)(v269 + 72) = v270;
        }
        goto LABEL_209;
      default:
        VPAUBusFormats::AllocateForFormats((VPAUBusFormats *)&v341, 0, 0);
        goto LABEL_209;
    }
  }
LABEL_357:
  VPAUBusFormats::~VPAUBusFormats((VPAUBusFormats *)&v341);
  return v74;
}