void sub_1BB6A13E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUMNBandEQ::GetPropertyInfo(AUMNBandEQ *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 3007)
  {
    char v8 = 1;
    unsigned int v9 = 4;
LABEL_13:
    uint64_t result = 0;
    *a5 = v9;
LABEL_14:
    *a6 = v8;
    return result;
  }
  if (a2 == 3099)
  {
    if (a3 > 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = (uint64_t)(*((void *)this + 81) - *((void *)this + 80)) >> 7;
    }
    if ((a3 & 0xFFFFFFFD) == 0) {
      v7 += (uint64_t)(*((void *)this + 84) - *((void *)this + 83)) >> 7;
    }
    char v8 = 0;
    unsigned int v9 = 16 * v7;
    goto LABEL_13;
  }
  if (a2 == 21 && !a3)
  {
    uint64_t result = 0;
    *a6 = 1;
    *a5 = 4;
    return result;
  }
  if (a3 != 4) {
    return 4294956417;
  }
  if (a2 != 2205)
  {
    if (a2 == 2201)
    {
      uint64_t result = 0;
      *a5 = 4;
      char v8 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_14;
    }
    if (a2 == 2200)
    {
      uint64_t result = 0;
      *a5 = 4;
      char v8 = 1;
      goto LABEL_14;
    }
    return 4294956417;
  }
  uint64_t result = 0;
  *a5 = 8;
  *a6 = 0;
  return result;
}

uint64_t AUMNBandEQ::Reset(AUMNBandEQ *this)
{
  v2 = (uint64_t *)*((void *)this + 70);
  v3 = (uint64_t *)*((void *)this + 71);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  AUMNBandEQ::UpdateFilterCoefficients(this);
  *((_DWORD *)this + 133) = *((_DWORD *)this + 132);
  SimpleMeters::Reset((uint64_t)this + 640);
  return 0;
}

void *AUMNBandEQ::Cleanup(void *this)
{
  v1 = this;
  v2 = (char *)this[71];
  for (i = (char *)this[70]; v2 != i; i = (char *)v1[70])
  {
    uint64_t v4 = *(void *)i;
    int64_t v5 = v2 - (i + 8);
    if (v2 != i + 8) {
      this = memmove(i, i + 8, v2 - (i + 8));
    }
    v2 = &i[v5];
    v1[71] = &i[v5];
    if (v4)
    {
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
      v2 = (char *)v1[71];
    }
  }
  v1[81] = v1[80];
  v1[84] = v1[83];
  return this;
}

uint64_t AUMNBandEQ::Initialize(AUMNBandEQ *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 80), 0);
  long long v3 = *(_OWORD *)(Element + 96);
  long long v27 = *(_OWORD *)(Element + 80);
  long long v28 = v3;
  uint64_t v29 = *(void *)(Element + 112);
  uint64_t v4 = ausdk::AUScope::SafeGetElement((AUMNBandEQ *)((char *)this + 128), 0);
  long long v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v26.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v26.mBytesPerPacket = v5;
  *(void *)&v26.mBitsPerChannel = *(void *)(v4 + 112);
  BOOL IsEquivalent = CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v27, &v26, v6);
  uint64_t result = 4294956428;
  if (IsEquivalent && HIDWORD(v28) <= 8)
  {
    int v9 = 0;
    while (1)
    {
      *(void *)&v25.mSampleRate = v27;
      *(_OWORD *)&v25.mFormatID = xmmword_1BB8727B0;
      *(_OWORD *)&v25.mBytesPerFrame = xmmword_1BB8727C0;
      uint64_t v10 = NewIIRFilter(&v25, &v25, (const CAStreamBasicDescription *)0x10);
      if (!v10) {
        break;
      }
      uint64_t v11 = v10;
      v12 = (uint64_t *)*((void *)this + 71);
      unint64_t v13 = *((void *)this + 72);
      if ((unint64_t)v12 >= v13)
      {
        uint64_t v15 = *((void *)this + 70);
        uint64_t v16 = ((uint64_t)v12 - v15) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - v15;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v19);
        }
        else {
          uint64_t v20 = 0;
        }
        v21 = (uint64_t *)(v19 + 8 * v16);
        uint64_t *v21 = v11;
        v14 = v21 + 1;
        v22 = (char *)*((void *)this + 71);
        v23 = (char *)*((void *)this + 70);
        if (v22 != v23)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = (char *)*((void *)this + 70);
        }
        *((void *)this + 70) = v21;
        *((void *)this + 71) = v14;
        *((void *)this + 72) = v19 + 8 * v20;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        uint64_t *v12 = v10;
        v14 = v12 + 1;
      }
      *((void *)this + 71) = v14;
      if (++v9 == 8)
      {
        (*(void (**)(AUMNBandEQ *, void, void))(*(void *)this + 72))(this, 0, 0);
        SimpleMeters::Initialize((AUMNBandEQ *)((char *)this + 640), (const CAStreamBasicDescription *)&v27, (const CAStreamBasicDescription *)&v26);
        return 0;
      }
    }
    return 4294956428;
  }
  return result;
}

void AUMNBandEQ::CreateExtendedElements(AUMNBandEQ *this)
{
  v1 = (AUMNBandEQ *)((char *)this + 584);
  ausdk::AUScope::Initialize((AUMNBandEQ *)((char *)this + 584), this, 4, 8);
  unsigned int v2 = 0;
  do
  {
    uint64_t Element = ausdk::AUScope::GetElement(v1, v2++);
    std::to_string(&v9, v2);
    uint64_t v4 = std::string::insert(&v9, 0, "EQ", 2uLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    int64_t v11 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (v11 >= 0) {
      CFStringRef v6 = (CFStringRef)__p;
    }
    else {
      CFStringRef v6 = (CFStringRef)__p[0];
    }
    if (v6)
    {
      uint64_t v7 = v11 >= 0 ? (void *)HIBYTE(v11) : __p[1];
      CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)v6, (CFIndex)v7, 0x8000100u, 0);
      if (!v6)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  while (v2 != 8);
}

void sub_1BB6A195C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void AUMNBandEQ::~AUMNBandEQ(AUMNBandEQ *this)
{
  AUMNBandEQ::~AUMNBandEQ(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;
  uint64_t vars8;

  *(void *)this = &unk_1F14BD6B8;
  AUMNBandEQ::Cleanup(this);
  unsigned int v2 = (void *)*((void *)this + 83);
  if (v2)
  {
    *((void *)this + 84) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 80);
  if (v3)
  {
    *((void *)this + 81) = v3;
    operator delete(v3);
  }
  CFStringRef v6 = (void **)((char *)this + 600);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = (void *)*((void *)this + 70);
  if (v4)
  {
    *((void *)this + 71) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 67);
  if (v5)
  {
    *((void *)this + 68) = v5;
    operator delete(v5);
  }

  ausdk::AUBase::~AUBase(this);
}

void AUSM::loadAUPreset(void *a1, const char *a2)
{
  unsigned int v2 = a2;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  applesauce::CF::make_DataRef(a2, &data);
  CFPropertyListRef v4 = CFPropertyListCreateWithData(0, data, 0, 0, 0);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v4);
  uint64_t v5 = *(void *)buf;
  *a1 = *(void *)buf;
  if (v5)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    CFStringRef v6 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      if (v2[23] < 0) {
        unsigned int v2 = *(const char **)v2;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "loadAUPreset";
      __int16 v10 = 2080;
      int64_t v11 = v2;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s: loaded preset %s", buf, 0x16u);
    }
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v7 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (v2[23] < 0) {
        unsigned int v2 = *(const char **)v2;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "loadAUPreset";
      __int16 v10 = 2080;
      int64_t v11 = v2;
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s: could not load preset %s", buf, 0x16u);
    }
  }
  if (data) {
    CFRelease(data);
  }
}

void sub_1BB6A1C60(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BB6A1C78(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    unint64_t v13 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)v11 + 23) < 0) {
        int64_t v11 = (uint64_t **)*v11;
      }
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "loadAUPreset";
      WORD6(buf) = 2080;
      *(void *)((char *)&buf + 14) = v11;
      _os_log_error_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%s: could not load preset %s", (uint8_t *)&buf, 0x16u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BB6A1BA8);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(v12);
  JUMPOUT(0x1BB6A1C68);
}

void AUSM::FactoryPreset::load(AUSM::FactoryPreset *this, int *a2, unsigned int a3, int a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  memset(&v54, 0, sizeof(v54));
  if (a3 - 1 >= 2)
  {
    if (a3)
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v13 = getAUSMV2Log(void)::gLog;
      if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
        goto LABEL_103;
      }
      __p.st_dev = 136315394;
      *(void *)&__p.st_mode = "load";
      WORD2(__p.st_ino) = 1024;
      *(_DWORD *)((char *)&__p.st_ino + 6) = a3;
      v14 = "%s: factory preset #%d not defined";
      uint64_t v15 = v13;
      uint32_t v16 = 18;
      goto LABEL_119;
    }
    uint64_t AcousticID = GetAcousticID();
    uint64_t v10 = AcousticID & 0xFF00000000;
    if ((AcousticID & 0xFF00000000) != 0)
    {
      std::to_string(&v60, AcousticID);
      int64_t v11 = std::string::insert(&v60, 0, "AID", 3uLL);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      *(void *)&__p.st_uid = *((void *)&v11->__r_.__value_.__l + 2);
      *(_OWORD *)&__p.st_dev = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      int64_t v11 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    CFMutableStringRef v24 = PlatformUtilities::CopyHardwareModelShortName((PlatformUtilities *)v11);
    AudioStreamBasicDescription v25 = applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v59, v24);
    int ProductType = PlatformUtilities_iOS::GetProductType(v25);
    CFStringRef v27 = PlatformUtilities_iOS::CopyProductTypeFilePrefix(ProductType);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v27);
    if (v59 && cf)
    {
      if (v10)
      {
        std::operator+<char>();
        long long v28 = std::string::append(&v57, "/AU", 3uLL);
        std::string v60 = *v28;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v57, "");
        std::string::basic_string[abi:ne180100]<0>(&v62, "");
      }
      else
      {
        applesauce::CF::convert_to<std::string,0>((const __CFString *)v59, (uint64_t)&v62);
        v30 = std::string::insert(&v62, 0, "/System/Library/Audio/Tunings/", 0x1EuLL);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v57, "/AU", 3uLL);
        std::string v60 = *v32;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (!cf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&v57);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v57.__r_.__value_.__l.__size_;
        }
        v34 = &v62;
        std::string::basic_string[abi:ne180100]((uint64_t)&v62, size + 1);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v34 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v35 = &v57;
          }
          else {
            v35 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          memmove(v34, v35, size);
        }
        *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + size) = 45;
      }
      int v36 = SHIBYTE(v60.__r_.__value_.__r.__words[2]);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v37 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v37 = v60.__r_.__value_.__l.__size_;
      }
      v38 = &v55;
      std::string::basic_string[abi:ne180100]((uint64_t)&v55, v37 + 1);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if (v37)
      {
        if (v36 >= 0) {
          v39 = &v60;
        }
        else {
          v39 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        memmove(v38, v39, v37);
      }
      *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 47;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v40 = &v62;
      }
      else {
        v40 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v41 = v62.__r_.__value_.__l.__size_;
      }
      v42 = std::string::append(&v55, (const std::string::value_type *)v40, v41);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v44 = std::string::append(&v56, "aumx-3dem-appl.aupreset", 0x17uLL);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (v36 < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v29 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v60.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, "Could not load built-in speaker preset file: invalid model/product name!", (uint8_t *)&v60, 2u);
      }
      std::string::basic_string[abi:ne180100]<0>(&v53, "");
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v59) {
      CFRelease(v59);
    }
    if (SHIBYTE(__p.st_gid) < 0) {
      operator delete(*(void **)&__p.st_dev);
    }
    int v7 = 0;
    std::string v54 = v53;
    std::string::size_type v23 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    std::string::size_type v22 = v53.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (a4) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    if (a4) {
      char v8 = "personalized-multichannel.aupreset";
    }
    else {
      char v8 = "multichannel.aupreset";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v8);
    if (a3 == 2 || a3 == 1) {
      std::operator+<char>();
    }
    else {
      memset(&v60, 0, sizeof(v60));
    }
    if (SHIBYTE(__p.st_gid) < 0) {
      operator delete(*(void **)&__p.st_dev);
    }
    std::string::basic_string[abi:ne180100]<0>(&v57, "/System/Library/Audio/Tunings/Generic/AU");
    uint64_t v17 = std::string::append(&v57, "/", 1uLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(void *)&__p.st_uid = *((void *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)&__p.st_dev = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v19 = &v60;
    }
    else {
      unint64_t v19 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v60.__r_.__value_.__l.__size_;
    }
    v21 = std::string::append((std::string *)&__p, (const std::string::value_type *)v19, v20);
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
    v62.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v23) = *((unsigned char *)&v21->__r_.__value_.__s + 23);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
    v54.__r_.__value_.__r.__words[0] = v22;
    v54.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
    *((unsigned char *)&v54.__r_.__value_.__s + 23) = v23;
    if (SHIBYTE(__p.st_gid) < 0) {
      operator delete(*(void **)&__p.st_dev);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  if ((v23 & 0x80u) == 0) {
    v46 = &v54;
  }
  else {
    v46 = (std::string *)v22;
  }
  if (stat((const char *)v46, &__p))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v47 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      goto LABEL_103;
    }
    v50 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v50 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    __p.st_dev = 136315650;
    *(void *)&__p.st_mode = "load";
    WORD2(__p.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = (__darwin_ino64_t)v50;
    HIWORD(__p.st_gid) = 1024;
    __p.st_rdev = a3;
    v14 = "%s: %s for factory preset #%d not found";
    uint64_t v15 = v47;
    uint32_t v16 = 28;
LABEL_119:
    _os_log_error_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&__p, v16);
LABEL_103:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
LABEL_104:
    *((void *)this + 2) = 0;
    goto LABEL_105;
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = v54;
  }
  AUSM::loadAUPreset(&__p, (const char *)&v52);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  *a2 = v7;
  *(_OWORD *)this = AUSM::kFactoryPresets[a3];
  uint64_t v48 = *(void *)&__p.st_dev;
  if (!*(void *)&__p.st_dev) {
    goto LABEL_104;
  }
  CFRetain(*(CFTypeRef *)&__p.st_dev);
  v49 = *(const void **)&__p.st_dev;
  *((void *)this + 2) = v48;
  if (v49) {
    CFRelease(v49);
  }
LABEL_105:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
}

void sub_1BB6A2520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,const void *a46,const void *a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  __cxa_free_exception(v60);
  if (a53 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a46);
  applesauce::CF::StringRef::~StringRef(&a47);
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t IR::DynamicIRProcessor::DynamicIRProcessor(uint64_t a1, void *a2, char *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a5;
  if (a5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a2[1];
  *(void *)(a1 + 16) = *a2;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  char v7 = *a3;
  __int16 v8 = *((_WORD *)a3 + 4);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 80) = 1161527296;
  *(unsigned char *)(a1 + 84) = v7;
  *(_WORD *)(a1 + 85) = v8;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1BB87BB70;
  *(void *)(a1 + 132) = 0x8000000000;
  *(_DWORD *)(a1 + 140) = *((_DWORD *)a3 + 1);
  *(_WORD *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 146) = 1;
  *(_OWORD *)(a1 + 148) = xmmword_1BB87BB80;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 164));
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 168));
  return a1;
}

void sub_1BB6A27C4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(v1 + 96));
  uint64_t v6 = *(void **)(v1 + 56);
  if (v6)
  {
    *(void *)(v1 + 64) = v6;
    operator delete(v6);
  }
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v3, 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v4, 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v2, 0);
  char v7 = *(std::__shared_weak_count **)(v1 + 24);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  __int16 v8 = *(std::__shared_weak_count **)(v1 + 8);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

uint64_t IR::DynamicIRProcessor::DynamicIRProcessor(uint64_t a1, const IR::IRDataAttributes *a2, char *a3, uint64_t *a4)
{
  std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes const&,void>(&v11, a2);
  char v7 = v12;
  v13[0] = v11;
  v13[1] = v12;
  uint64_t v8 = *a4;
  std::string v9 = (std::__shared_weak_count *)a4[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IR::DynamicIRProcessor::DynamicIRProcessor(a1, v13, a3, v8, (uint64_t)v9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void sub_1BB6A28B0(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

caulk::pooled_semaphore_mutex **IR::DynamicIRProcessor::initialize(IR::DynamicIRProcessor *this, float a2, unsigned int a3)
{
  v7[0] = (IR::DynamicIRProcessor *)((char *)this + 164);
  v7[1] = (IR::DynamicIRProcessor *)((char *)this + 168);
  std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((IR::DynamicIRProcessor *)((char *)this + 164), (IR::DynamicIRProcessor *)((char *)this + 168));
  *((unsigned char *)this + 145) = 0;
  atomic_store(0, (unsigned int *)this + 37);
  atomic_store(0, (unsigned int *)this + 38);
  atomic_store(0, (unsigned int *)this + 39);
  std::vector<float>::resize((uint64_t)this + 56, a3);
  if (*((void *)this + 2)) {
    operator new();
  }
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 4, 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 5, 0);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)this + 6, 0);
  atomic_store(0, (unsigned __int8 *)this + 144);
  *((float *)this + 29) = a2;
  *((_DWORD *)this + 33) = a3;
  *((_DWORD *)this + 34) = 128;
  *((_DWORD *)this + 30) = 989855744;
  *(_WORD *)((char *)this + 145) = 257;
  return std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100](v7);
}

void sub_1BB6A2B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  MEMORY[0x1C185D370](v9, 0x10A1C40AF302FDBLL);
  std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t IR::IRProcessor::IRProcessor(uint64_t a1, void *a2, int a3)
{
  *(void *)a1 = &unk_1F14C3260;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 20));
  uint64_t v6 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0x3F800000453B8000;
  *(unsigned char *)(a1 + 168) = 1;
  *(_DWORD *)(a1 + 172) = a3;
  *(unsigned char *)(a1 + 176) = 0;
  return a1;
}

uint64_t IR::DynamicIRProcessor::processInternal(uint64_t this, IR::IRProcessor *a2, float **a3, unsigned int a4, vDSP_Length a5, float a6, float *const *a7, int a8, IR::ComplexDataCircBuffer *a9)
{
  if (!a5) {
    return this;
  }
  uint64_t v9 = this;
  if (!*(unsigned char *)(this + 145)) {
    return this;
  }
  long long v12 = a7;
  uint32_t v16 = a3;
  if (a8) {
    long long v18 = a7;
  }
  else {
    long long v18 = a3;
  }
  unsigned __int8 v19 = atomic_load((unsigned __int8 *)(this + 144));
  if (v19)
  {
    unsigned int v20 = atomic_load((unsigned int *)(this + 160));
    if (v20 == -1)
    {
      uint64_t v83 = this + 168;
      int v52 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(this + 168));
      char v84 = v52;
      if (v52)
      {
        v80 = v18;
        uint64_t v53 = *(void *)(v9 + 40);
        if (v53)
        {
          uint64_t v54 = *(void *)(v9 + 32);
          *(void *)(v9 + 40) = *(void *)(v9 + 48);
          *(void *)(v9 + 48) = v54;
          *(void *)(v9 + 32) = v53;
          atomic_store(0, (unsigned int *)(v9 + 160));
          if (!*(unsigned char *)(v9 + 146)) {
            *(void *)(v9 + 124) = 0x3F80000000000000;
          }
          unsigned int v55 = (*(uint64_t (**)(void))(**(void **)(v53 + 24) + 80))(*(void *)(v53 + 24));
          if (*(_DWORD *)(v53 + 172)) {
            unsigned int v56 = v55 + 5;
          }
          else {
            unsigned int v56 = v55;
          }
          atomic_store(v56, (unsigned int *)(v9 + 148));
          atomic_store((*(uint64_t (**)(void))(**(void **)(*(void *)(v9 + 32) + 24) + 72))(*(void *)(*(void *)(v9 + 32) + 24)), (unsigned int *)(v9 + 152));
          atomic_store(IR::IRProcessor::getTailLength(*(IR::IRProcessor **)(v9 + 32)), (unsigned int *)(v9 + 156));
          atomic_store(0, (unsigned __int8 *)(v9 + 144));
          std::string v57 = *(caulk::concurrent::messenger **)v9;
          if (*(void *)v9)
          {
            v58 = *(IR::IRProcessor **)(v9 + 40);
            *(void *)(v9 + 40) = 0;
            __Start = v58;
            caulk::concurrent::messenger::enqueue_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_0>(v57, (uint64_t *)&__Start);
            long long v18 = v80;
            std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](&__Start, 0);
            char v21 = 1;
LABEL_88:
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v83);
            goto LABEL_9;
          }
          char v21 = 1;
        }
        else
        {
          char v21 = 0;
        }
        long long v18 = v80;
        goto LABEL_88;
      }
      char v21 = 0;
      goto LABEL_88;
    }
  }
  char v21 = 0;
LABEL_9:
  uint64_t v83 = v9 + 164;
  int v22 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v9 + 164));
  char v84 = v22;
  if (v22)
  {
    unsigned int v82 = a4;
    v81 = a9;
    uint64_t v78 = *(void *)(v9 + 32);
    if (v78)
    {
      v79 = v18;
      float v23 = *(float *)(v9 + 124);
      CFMutableStringRef v24 = a2;
      if (v23 < 1.0)
      {
        if (v23 < 0.0)
        {
          *(_DWORD *)(v9 + 124) = 0;
          float v23 = 0.0;
        }
        unsigned int v25 = (float)((float)(1.0 - v23) / *(float *)(v9 + 120));
        if (v25 >= a5) {
          vDSP_Length v26 = a5;
        }
        else {
          vDSP_Length v26 = v25;
        }
        CFStringRef v27 = *(float **)(v9 + 56);
        unint64_t v28 = (uint64_t)(*(void *)(v9 + 64) - (void)v27) >> 2;
        float __Step = *(float *)(v9 + 120);
        *(float *)&__Start = v23;
        if (v28 >= v26) {
          vDSP_Length v29 = v26;
        }
        else {
          vDSP_Length v29 = v28;
        }
        vDSP_vrampmul((const float *)a2, 1, (float *)&__Start, &__Step, v27, 1, v29);
        *(_DWORD *)(v9 + 124) = __Start;
        if (v25 < a5) {
          memcpy((void *)(*(void *)(v9 + 56) + 4 * v26), (char *)a2 + 4 * v26, 4 * (a5 - v26));
        }
        CFMutableStringRef v24 = *(IR::IRProcessor **)(v9 + 56);
      }
      if (v21 & 1) != 0 || (unsigned __int8 v30 = atomic_load((unsigned __int8 *)(v9 + 112)), (v30))
      {
        atomic_store(0, (unsigned __int8 *)(v9 + 112));
        long long v31 = *(unsigned int **)(v9 + 88);
        if (v31 != (unsigned int *)(v9 + 96))
        {
          do
          {
            uint64_t v32 = *(void *)(v9 + 32);
            uint64_t v33 = v31[7];
            float v34 = COERCE_FLOAT(atomic_load(v31 + 8));
            (*(void (**)(void, uint64_t, float))(**(void **)(v32 + 24) + 48))(*(void *)(v32 + 24), v33, v34);
            v35 = (unsigned int *)*((void *)v31 + 1);
            if (v35)
            {
              do
              {
                int v36 = v35;
                v35 = *(unsigned int **)v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                int v36 = (unsigned int *)*((void *)v31 + 2);
                BOOL v37 = *(void *)v36 == (void)v31;
                long long v31 = v36;
              }
              while (!v37);
            }
            long long v31 = v36;
          }
          while (v36 != (unsigned int *)(v9 + 96));
        }
      }
      v38 = *(IR::IRProcessor **)(v9 + 32);
      *((_DWORD *)v38 + 40) = *(_DWORD *)(v9 + 80);
      __Start = v24;
      IR::IRProcessor::processMultipleInputs(v38, (const float **)&__Start, v79, 1u, v82, a5, a6, v81);
      if (v82 && a8)
      {
        v39 = (const float **)v12;
        v40 = (const float **)v16;
        uint64_t v41 = v82;
        do
        {
          vDSP_vadd(*v39, 1, *v40, 1, (float *)*v40, 1, a5);
          ++v40;
          ++v39;
          --v41;
        }
        while (v41);
      }
    }
    if (!*(void *)(v9 + 48) || (unsigned int v42 = atomic_load((unsigned int *)(v9 + 160)), (v42 & 0x80000000) != 0))
    {
      atomic_store(0xFFFFFFFF, (unsigned int *)(v9 + 160));
      if (v82 && (a8 & 1) == 0 && !v78)
      {
        uint64_t v51 = v82;
        do
        {
          vDSP_vclr(*v16++, 1, a5);
          --v51;
        }
        while (v51);
      }
    }
    else
    {
      float v43 = *(float *)(v9 + 128);
      if (v43 <= 0.0)
      {
        bzero(*(void **)(v9 + 56), 4 * a5);
        v44 = v81;
      }
      else
      {
        v44 = v81;
        if (v43 > 1.0)
        {
          *(_DWORD *)(v9 + 128) = 1065353216;
          float v43 = 1.0;
        }
        float v45 = *(float *)(v9 + 120);
        unsigned int v46 = (float)(v43 / v45);
        if (v46 >= a5) {
          vDSP_Length v47 = a5;
        }
        else {
          vDSP_Length v47 = v46;
        }
        uint64_t v48 = *(float **)(v9 + 56);
        unint64_t v49 = (uint64_t)(*(void *)(v9 + 64) - (void)v48) >> 2;
        float __Step = -v45;
        *(float *)&__Start = v43;
        if (v49 >= v47) {
          vDSP_Length v50 = v47;
        }
        else {
          vDSP_Length v50 = v49;
        }
        vDSP_vrampmul((const float *)a2, 1, (float *)&__Start, &__Step, v48, 1, v50);
        *(_DWORD *)(v9 + 128) = __Start;
        if (v46 < a5) {
          bzero((void *)(*(void *)(v9 + 56) + 4 * v47), 4 * (a5 - v47));
        }
      }
      CFTypeRef v59 = *(IR::IRProcessor **)(v9 + 56);
      unsigned __int8 v60 = atomic_load((unsigned __int8 *)(v9 + 112));
      if (v60)
      {
        atomic_store(0, (unsigned __int8 *)(v9 + 112));
        v61 = *(unsigned int **)(v9 + 88);
        if (v61 != (unsigned int *)(v9 + 96))
        {
          do
          {
            uint64_t v62 = *(void *)(v9 + 48);
            uint64_t v63 = v61[7];
            float v64 = COERCE_FLOAT(atomic_load(v61 + 8));
            (*(void (**)(void, uint64_t, float))(**(void **)(v62 + 24) + 48))(*(void *)(v62 + 24), v63, v64);
            v65 = (unsigned int *)*((void *)v61 + 1);
            if (v65)
            {
              do
              {
                v66 = v65;
                v65 = *(unsigned int **)v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                v66 = (unsigned int *)*((void *)v61 + 2);
                BOOL v37 = *(void *)v66 == (void)v61;
                v61 = v66;
              }
              while (!v37);
            }
            v61 = v66;
          }
          while (v66 != (unsigned int *)(v9 + 96));
        }
      }
      v67 = *(IR::IRProcessor **)(v9 + 48);
      *((_DWORD *)v67 + 40) = *(_DWORD *)(v9 + 80);
      __Start = v59;
      IR::IRProcessor::processMultipleInputs(v67, (const float **)&__Start, v12, 1u, v82, a5, a6, v44);
      if (v82)
      {
        uint64_t v68 = v82;
        do
        {
          vDSP_vadd(*(const float **)v12, 1, *v16, 1, *v16, 1, a5);
          ++v16;
          ++v12;
          --v68;
        }
        while (v68);
      }
      v69 = (unsigned int *)(v9 + 160);
      unsigned int v70 = atomic_load((unsigned int *)(v9 + 160));
      BOOL v71 = __OFADD__(v70, a5);
      unsigned int v72 = v70 + a5;
      unsigned int v73 = ((int)(v70 | a5) >> 31) ^ 0x7FFFFFFF;
      if (!v71) {
        unsigned int v73 = v72;
      }
      atomic_store(v73, v69);
      unsigned int v74 = atomic_load(v69);
      if (v74 >= *(_DWORD *)(v9 + 132) + IR::IRProcessor::getTailLength(*(IR::IRProcessor **)(v9 + 48)))
      {
        atomic_store(0xFFFFFFFF, (unsigned int *)(v9 + 160));
        v75 = *(caulk::concurrent::messenger **)v9;
        if (*(void *)v9)
        {
          v76 = *(IR::IRProcessor **)(v9 + 48);
          *(void *)(v9 + 48) = 0;
          __Start = v76;
          uint64_t v77 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
          *(_DWORD *)(v77 + 16) = 0;
          __Start = 0;
          *(void *)(v77 + 24) = v76;
          *(void *)uint64_t v77 = &unk_1F14BDA18;
          *(void *)(v77 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v75, (caulk::concurrent::message *)v77);
        }
      }
    }
    *(unsigned char *)(v9 + 146) = 0;
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v83);
}

void sub_1BB6A32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)va1, 0);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_0>(caulk::concurrent::messenger *a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
  *(void *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(v4 + 24) = v5;
  *(void *)uint64_t v4 = &unk_1F14BD9C8;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v4);
}

uint64_t caulk::concurrent::details::rt_message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_1>::perform(IR::IRProcessor **a1)
{
  unsigned int v2 = a1 + 3;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);
  *a1 = (IR::IRProcessor *)&unk_1F14BDA40;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v2, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, IR::IRProcessor **, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

IR::IRProcessor *caulk::concurrent::details::message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_1>::perform(uint64_t a1)
{
  return std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 24), 0);
}

void caulk::concurrent::details::message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_1>::~message_call(IR::IRProcessor **a1)
{
  *a1 = (IR::IRProcessor *)&unk_1F14BDA40;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (IR::IRProcessor *)&unk_1F14BDA40;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void caulk::concurrent::details::rt_message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_1>::~rt_message_call(IR::IRProcessor **a1)
{
  *a1 = (IR::IRProcessor *)&unk_1F14BDA40;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (IR::IRProcessor *)&unk_1F14BDA40;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

uint64_t caulk::concurrent::details::rt_message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_0>::perform(IR::IRProcessor **a1)
{
  unsigned int v2 = a1 + 3;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);
  *a1 = (IR::IRProcessor *)&unk_1F14BD9F0;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](v2, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, IR::IRProcessor **, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 40, 8);
}

IR::IRProcessor *caulk::concurrent::details::message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_0>::perform(uint64_t a1)
{
  return std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 24), 0);
}

void caulk::concurrent::details::message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_0>::~message_call(IR::IRProcessor **a1)
{
  *a1 = (IR::IRProcessor *)&unk_1F14BD9F0;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (IR::IRProcessor *)&unk_1F14BD9F0;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void caulk::concurrent::details::rt_message_call<IR::DynamicIRProcessor::processInternal(float const*,float * const*,unsigned int,unsigned int,float,float * const*,BOOL,IR::ComplexDataCircBuffer *)::$_0>::~rt_message_call(IR::IRProcessor **a1)
{
  *a1 = (IR::IRProcessor *)&unk_1F14BD9F0;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *a1 = (IR::IRProcessor *)&unk_1F14BD9F0;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](a1 + 3, 0);

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

caulk::pooled_semaphore_mutex **IR::DynamicIRProcessor::reset(IR::DynamicIRProcessor *this)
{
  v4[0] = (IR::DynamicIRProcessor *)((char *)this + 164);
  v4[1] = (IR::DynamicIRProcessor *)((char *)this + 168);
  std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((IR::DynamicIRProcessor *)((char *)this + 164), (IR::DynamicIRProcessor *)((char *)this + 168));
  unsigned int v2 = (IR::FFTFilter **)*((void *)this + 4);
  if (v2) {
    IR::IRProcessor::reset(v2);
  }
  *((unsigned char *)this + 146) = 1;
  return std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100](v4);
}

void sub_1BB6A3898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
}

void IR::DynamicIRProcessor::setIRDataAttributes(IR::DynamicIRProcessor *this, const IR::IRDataAttributes *a2)
{
  std::allocate_shared[abi:ne180100]<IR::DataLoaderSource,std::allocator<IR::DataLoaderSource>,IR::IRDataAttributes const&,void>(&v4, a2);
  long long v3 = v5;
  v6[0] = v4;
  v6[1] = v5;
  IR::DynamicIRProcessor::setIRSource((uint64_t)this, v6);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BB6A3918(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IR::DynamicIRProcessor::setIRSource(uint64_t a1, void *a2)
{
  uint64_t v9 = a1 + 168;
  char v10 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 168));
  if (!*a2
    || ((*(unsigned int (**)(void))(*(void *)*a2 + 16))(*a2) == 2
     || (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v4) == 3)
    && !*(void *)(*a2 + 8))
  {
    if (*(void *)(a1 + 40) && *(unsigned char *)(a1 + 145))
    {
      std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(a1 + 40), 0);
      atomic_store(1u, (unsigned __int8 *)(a1 + 144));
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "DynamicIRProcessor: Reconfiguring IRProcssors", buf, 2u);
    }
    if (*(unsigned char *)(a1 + 145)) {
      operator new();
    }
  }
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
}

void sub_1BB6A3B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  MEMORY[0x1C185D370](v9, 0x10A1C40AF302FDBLL);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

caulk::pooled_semaphore_mutex **IR::DynamicIRProcessor::getFFTFilterConfigParams(IR::DynamicIRProcessor *this, uint64_t a2)
{
  v7[0] = (caulk::pooled_semaphore_mutex *)(a2 + 164);
  v7[1] = (caulk::pooled_semaphore_mutex *)(a2 + 168);
  std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((caulk::pooled_semaphore_mutex *)(a2 + 164), (caulk::pooled_semaphore_mutex *)(a2 + 168));
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a2 + 144));
  if ((v4 & 1) != 0 && (uint64_t v5 = *(void *)(a2 + 40)) != 0 || (uint64_t v5 = *(void *)(a2 + 32)) != 0)
  {
    (*(void (**)(void))(**(void **)(v5 + 48) + 16))(*(void *)(v5 + 48));
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 6) = 0;
    *((void *)this + 2) = 0;
  }
  return std::scoped_lock<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>::~scoped_lock[abi:ne180100](v7);
}

void sub_1BB6A3C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::pooled_semaphore_mutex *a9)
{
}

BOOL matchiString(CFStringRef *a1, const UInt8 *a2)
{
  if ((char)a2[23] < 0)
  {
    if (!*(void *)a2)
    {
      CFStringRef v4 = 0;
      goto LABEL_6;
    }
    CFIndex v3 = *((void *)a2 + 1);
    a2 = *(const UInt8 **)a2;
  }
  else
  {
    CFIndex v3 = a2[23];
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, a2, v3, 0x8000100u, 0);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
LABEL_6:
  v8.length = CFStringGetLength(*a1);
  v8.location = 0;
  CFComparisonResult v5 = CFStringCompareWithOptions(*a1, v4, v8, 1uLL);
  if (v4) {
    CFRelease(v4);
  }
  return v5 == kCFCompareEqualTo;
}

void sub_1BB6A3D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t matchiEither(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v6 = (const __CFString *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFStringRef v14 = v6;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  BOOL v7 = matchiString(&v14, (const UInt8 *)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
LABEL_11:
  CFStringRef v8 = (const __CFString *)*a1;
  if (v8) {
    CFRetain(v8);
  }
  CFStringRef v12 = v8;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  BOOL v9 = matchiString(&v12, (const UInt8 *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v8) {
      return v7 | v9;
    }
    goto LABEL_20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v8) {
LABEL_20:
  }
    CFRelease(v8);
  return v7 | v9;
}

void sub_1BB6A3E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t AUMatrixPatcher::SupportedNumChannels(AUMatrixPatcher *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUMatrixPatcher::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 1;
}

BOOL AUMatrixPatcher::StreamFormatWritable(AUMatrixPatcher *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUMatrixPatcher::SupportsTail(AUMatrixPatcher *this)
{
  return 1;
}

double AUMatrixPatcher::GetLatency(AUMatrixPatcher *this)
{
  return 0.0;
}

uint64_t AUMatrixPatcher::NewFactoryPresetSet(AUMatrixPatcher *this, const AUPreset *a2)
{
  uint64_t v3 = 0;
  SInt32 presetNumber = a2->presetNumber;
  for (char i = 1; ; char i = 0)
  {
    CFStringRef v6 = (const AUPreset *)&kMatrixPatcherPresets[4 * v3];
    if (presetNumber == v6->presetNumber) {
      break;
    }
    char v7 = i;
    uint64_t v3 = 1;
    if ((v7 & 1) == 0) {
      return 4294956445;
    }
  }
  if (presetNumber)
  {
    if (presetNumber == 1)
    {
      unsigned int v9 = *((_DWORD *)this + 146);
      unsigned int v10 = *((_DWORD *)this + 147);
      if (v10 * v9)
      {
        uint64_t v11 = 0;
        do
        {
          (*(void (**)(AUMatrixPatcher *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, v11, 0, 0, 0, 0.0);
          uint64_t v11 = (v11 + 1);
          unsigned int v9 = *((_DWORD *)this + 146);
          unsigned int v10 = *((_DWORD *)this + 147);
        }
        while (v11 < v10 * v9);
      }
      if (v9 < v10) {
        unsigned int v10 = v9;
      }
      if (v10)
      {
        unsigned int v12 = 0;
        do
        {
          (*(void (**)(AUMatrixPatcher *, void, void, void, void, float))(*(void *)this + 152))(this, v12 + v12 * v9, 0, 0, 0, 1.0);
          ++v12;
          unsigned int v9 = *((_DWORD *)this + 146);
          unsigned int v13 = *((_DWORD *)this + 147);
          if (v9 < v13) {
            unsigned int v13 = *((_DWORD *)this + 146);
          }
        }
        while (v12 < v13);
      }
    }
  }
  else if (*((_DWORD *)this + 147) * *((_DWORD *)this + 146))
  {
    uint64_t v14 = 0;
    do
    {
      (*(void (**)(AUMatrixPatcher *, uint64_t, void, void, void, double))(*(void *)this + 152))(this, v14, 0, 0, 0, 0.0);
      uint64_t v14 = (v14 + 1);
    }
    while (v14 < *((_DWORD *)this + 147) * *((_DWORD *)this + 146));
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v6);
  return 0;
}

uint64_t AUMatrixPatcher::GetPresets(AUMatrixPatcher *this, const __CFArray **a2)
{
  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 2, 0);
    CFArrayAppendValue(Mutable, kMatrixPatcherPresets);
    CFArrayAppendValue(Mutable, &dword_1E9F7D700);
    *a2 = Mutable;
  }
  return 0;
}

double AUMatrixPatcher::GetParameterInfo(AUMatrixPatcher *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *((_DWORD *)this + 146);
  unsigned int v8 = a3 / v7;
  CFArrayRef v9 = (const __CFArray *)*((void *)this + 67);
  if (v9) {
    int Count = CFArrayGetCount(v9);
  }
  else {
    int Count = 0;
  }
  unsigned int v11 = a3 - v8 * v7;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 80), 0);
  BOOL v14 = 0;
  if (Count == *(_DWORD *)(Element + 108))
  {
    CFArrayRef v15 = (const __CFArray *)*((void *)this + 69);
    if (v15) {
      int v16 = CFArrayGetCount(v15);
    }
    else {
      int v16 = 0;
    }
    BOOL v14 = v16 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 128), 0) + 108);
  }
  if (v11 < *((_DWORD *)this + 146) && v8 < *((_DWORD *)this + 147))
  {
    a4->flags = -1073741824;
    if (v14)
    {
      CFStringRef v27 = 0;
      char v28 = 1;
      CFStringRef v25 = 0;
      char v26 = 1;
      CACFArray::GetCACFString((CFArrayRef *)this + 67, v11, (CFTypeRef *)&v27);
      uint64_t CACFString = CACFArray::GetCACFString((CFArrayRef *)this + 69, v8, (CFTypeRef *)&v25);
      *(_DWORD *)CFMutableStringRef v24 = 64;
      MEMORY[0x1F4188790](CACFString);
      MEMORY[0x1F4188790](v18);
      CACFString::GetCString(v27, &v23, v24, v19);
      *(_DWORD *)CFMutableStringRef v24 = 64;
      CACFString::GetCString(v25, v22, v24, v20);
      sprintf(cStr, "%s -> %s", (const char *)&v23, (const char *)v22);
      CACFString::~CACFString((CACFString *)&v25);
      CACFString::~CACFString((CACFString *)&v27);
    }
    else
    {
      sprintf(cStr, "In %d -> Out %d", v11 + 1, v8 + 1);
    }
    CFStringRef v21 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    a4->cfNameString = v21;
    a4->flags |= 0x8000010u;
    CFStringGetCString(v21, a4->name, 52, 0x8000100u);
    a4->unit = kAudioUnitParameterUnit_Boolean;
    double result = 0.0078125;
    *(void *)&a4->minValue = 0x3F80000000000000;
    a4->defaultValue = 0.0;
  }
  return result;
}

void sub_1BB6A4368(_Unwind_Exception *a1)
{
  CACFString::~CACFString((CACFString *)(v1 - 152));
  CACFString::~CACFString((CACFString *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t AUMatrixPatcher::Render(AUMatrixPatcher *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (AUMatrixPatcher *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 80), 0);
  ausdk::AUInputElement::PullInput(Element, a2, a3, 0, a4);
  uint64_t v10 = ausdk::AUScope::SafeGetElement(v8, 0);
  v14[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
  uint64_t v11 = ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 128), 0);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
  return (*(uint64_t (**)(AUMatrixPatcher *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v14, 1, &BufferList);
}

uint64_t AUMatrixPatcher::ProcessMultipleBufferLists(AUMatrixPatcher *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v8 = *((void *)this + 66);
  if (!v8) {
    return 4294956429;
  }
  v115 = (unsigned int *)*a5;
  uint64_t v11 = (unsigned int *)*a7;
  unsigned int v12 = *((_DWORD *)this + 147);
  if (v12)
  {
    unsigned int v13 = 0;
    unsigned int v14 = *((_DWORD *)this + 146);
    do
    {
      if (v14)
      {
        for (unsigned int i = 0; i < v14; ++i)
        {
          int v118 = 0;
          (*(void (**)(AUMatrixPatcher *, void, void, void, int *))(*(void *)this + 144))(this, i + v13 * v14, 0, 0, &v118);
          uint64_t v8 = *((void *)this + 66);
          if (*(_DWORD *)(v8 + 8) > (unsigned __int16)i
            && *(_DWORD *)(v8 + 12) > (unsigned __int16)v13)
          {
            *(_DWORD *)(*(void *)(*(void *)(v8 + 16) + 160 * (unsigned __int16)i + 144)
                      + 16 * (unsigned __int16)v13) = v118;
          }
          unsigned int v14 = *((_DWORD *)this + 146);
        }
        unsigned int v12 = *((_DWORD *)this + 147);
      }
      ++v13;
    }
    while (v13 < v12);
  }
  uint64_t v16 = *v11;
  uint64_t v17 = *(void *)(v8 + 48);
  *(_WORD *)(v17 + 4) = 0;
  *(_WORD *)(v17 + 6) = v16;
  if (v16)
  {
    uint64_t v18 = 0;
    unsigned __int8 v19 = v11 + 4;
    do
    {
      uint64_t v20 = *((void *)this + 66);
      if (*(_DWORD *)(v20 + 12) > (unsigned __int16)v18)
      {
        uint64_t v21 = *(void *)(v20 + 24) + 160 * (unsigned __int16)v18;
        *(_WORD *)(v21 + 12) = 0;
        *(_WORD *)(v21 + 14) = v18;
        *(void *)uint64_t v21 = *v19;
      }
      ++v18;
      v19 += 2;
    }
    while (v16 != v18);
    uint64_t v8 = *((void *)this + 66);
  }
  uint64_t v22 = *(unsigned int *)(v8 + 12);
  if (v22)
  {
    uint64_t v23 = *(void *)(v8 + 24);
    if (v22 == 1)
    {
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = v22 & 0xFFFFFFFE;
      char v26 = (unsigned char *)(v23 + 304);
      uint64_t v27 = v24;
      do
      {
        *(v26 - 160) = 0;
        *char v26 = 0;
        v26 += 320;
        v27 -= 2;
      }
      while (v27);
      if (v24 == v22) {
        goto LABEL_27;
      }
    }
    uint64_t v28 = v22 - v24;
    vDSP_Length v29 = (unsigned char *)(v23 + 160 * v24 + 144);
    do
    {
      *vDSP_Length v29 = 0;
      v29 += 160;
      --v28;
    }
    while (v28);
  }
LABEL_27:
  int v30 = *a2;
  int v31 = *v115;
  uint64_t v32 = *(void *)(v8 + 40);
  uint64_t v33 = *(void *)(v8 + 48);
  *(_WORD *)(v32 + 4) = 0;
  *(_WORD *)(v32 + 6) = v31;
  unsigned int v34 = *(unsigned __int16 *)(v33 + 6);
  if (*(_WORD *)(v33 + 6))
  {
    unsigned int v35 = 0;
    uint64_t v36 = 160 * *(unsigned __int16 *)(v33 + 4);
    do
    {
      uint64_t v37 = *(void *)(v8 + 24);
      if (!*(unsigned char *)(v37 + v36 + 144))
      {
        bzero(*(void **)(v37 + v36), 4 * a3);
        unsigned int v34 = *(unsigned __int16 *)(v33 + 6);
      }
      ++v35;
      v36 += 160;
    }
    while (v35 < v34);
    int v31 = *v115;
  }
  if (v31)
  {
    uint64_t v38 = 0;
    int v39 = a3 & 3;
    uint64_t v114 = 16 * ((a3 >> 2) - 1) + 16;
    uint64_t v113 = (((a3 >> 2) - 1) + 1) & 0x1FFFFFFFCLL;
    uint64_t v112 = 4 * v113;
    while (1)
    {
      uint64_t v40 = *((void *)this + 66);
      unsigned int v41 = *(_DWORD *)(v40 + 8);
      if (v41 > (unsigned __int16)v38)
      {
        *(void *)(*(void *)(v40 + 16) + 160 * (unsigned __int16)v38) = *(void *)&v115[4 * v38 + 4];
        uint64_t v40 = *((void *)this + 66);
        unsigned int v41 = *(_DWORD *)(v40 + 8);
      }
      uint64_t v42 = *(void *)(v40 + 16);
      if (v41 > (unsigned __int16)v38)
      {
        uint64_t v43 = v42 + 160 * (unsigned __int16)v38;
        *(_WORD *)(v43 + 12) = 0;
        *(_WORD *)(v43 + 14) = v38;
      }
      unint64_t v44 = *(unsigned int *)(v40 + 12);
      if (v44)
      {
        float v45 = (float)(*(float *)(v40 + 56) * *(float *)(v42 + 160 * v38 + 8))
            * *(float *)(*(void *)(v40 + 40) + 8 * *(unsigned __int16 *)(v42 + 160 * v38 + 12));
        uint64_t v46 = v42 + 160 * v38;
        uint64_t v49 = *(void *)(v46 + 144);
        uint64_t v48 = (uint64_t *)(v46 + 144);
        uint64_t v47 = v49;
        int v50 = 0;
        if (v45 == 0.0)
        {
          uint64_t v51 = (BOOL *)(v47 + 12);
          do
          {
            float v52 = *((float *)v51 - 2);
            if (v52 != 0.0) {
              ++v50;
            }
            *uint64_t v51 = v52 != 0.0;
            v51 += 16;
            --v44;
          }
          while (v44);
          unint64_t v44 = *(unsigned int *)(v40 + 12);
        }
        else
        {
          uint64_t v53 = *(void *)(v40 + 48);
          uint64_t v54 = (float *)(*(void *)(v40 + 24) + 12);
          uint64_t v55 = *(unsigned int *)(v40 + 12);
          do
          {
            if (*(float *)(v47 + 4) != 0.0
              || (char v56 = 0, *(float *)v47 != 0.0)
              && *(v54 - 1) != 0.0
              && *(float *)(v53 + 8 * *(unsigned __int16 *)v54) != 0.0)
            {
              ++v50;
              char v56 = 1;
            }
            *(unsigned char *)(v47 + 12) = v56;
            v47 += 16;
            v54 += 40;
            --v55;
          }
          while (v55);
        }
        if (v44 && v50 != 0) {
          break;
        }
      }
LABEL_58:
      if (++v38 >= (unint64_t)*v115) {
        goto LABEL_123;
      }
    }
    uint64_t v58 = 0;
    while (1)
    {
      uint64_t v59 = *v48;
      uint64_t v60 = *v48 + 16 * v58;
      if (!*(unsigned char *)(v60 + 12)) {
        goto LABEL_99;
      }
      uint64_t v61 = *(void *)(v40 + 24);
      uint64_t v62 = v61 + 160 * v58;
      *(float *)v7.i32 = *(float *)(*(void *)(v40 + 48) + 8 * *(unsigned __int16 *)(v62 + 12))
                       * (float)((float)(v45 * *(float *)(v62 + 8)) * *(float *)(v59 + 16 * v58));
      float v64 = *(float *)(v60 + 4);
      uint64_t v63 = (float *)(v60 + 4);
      float v65 = v64;
      float v66 = v64;
      if (!*(unsigned char *)(v62 + 144)) {
        break;
      }
      if (!*(unsigned char *)(v40 + 80))
      {
        *uint64_t v63 = *(float *)v7.i32;
        float v66 = *(float *)v7.i32;
      }
      if (vabds_f32(v66, *(float *)v7.i32) >= 0.0000001)
      {
        float v72 = v66 - *(float *)v7.i32;
        if ((v30 & 0x10) == 0)
        {
          uint64_t v73 = v59 + 16 * v58;
          unsigned int v74 = *(float **)(*(void *)(v40 + 16) + 160 * *(unsigned __int16 *)(v73 + 8));
          v75 = *(float **)(v61 + 160 * *(unsigned __int16 *)(v73 + 10));
          float v76 = *(float *)(v40 + 60);
          if (a3 >= 4)
          {
            float v77 = *(float *)(v40 + 64);
            float v78 = v76 * v72;
            float v79 = v78 * v76;
            float v80 = (float)(v78 * v76) * v76;
            int v81 = a3 >> 2;
            do
            {
              float v82 = v75[1];
              float *v75 = *v75 + (float)(*v74 * v66);
              float v66 = *(float *)v7.i32 + (float)((float)(v66 - *(float *)v7.i32) * v77);
              v75[1] = v82 + (float)(v74[1] * (float)(v78 + *(float *)v7.i32));
              float v78 = v78 * v77;
              float v83 = v75[3];
              v75[2] = v75[2] + (float)(v74[2] * (float)(v79 + *(float *)v7.i32));
              float v79 = v79 * v77;
              v75[3] = v83 + (float)(v74[3] * (float)(v80 + *(float *)v7.i32));
              float v80 = v80 * v77;
              v75 += 4;
              v74 += 4;
              --v81;
            }
            while (v81);
          }
          if ((a3 & 3) != 0)
          {
            float *v75 = *v75 + (float)(*v74 * v66);
            float v84 = (float)(v66 - *(float *)v7.i32) * v76;
            float v66 = v84 + *(float *)v7.i32;
            if (v39 != 1)
            {
              v75[1] = v75[1] + (float)(v74[1] * v66);
              float v85 = v84 * v76;
              float v66 = v85 + *(float *)v7.i32;
              if (v39 != 2)
              {
                float v86 = v75[2] + (float)(v74[2] * v66);
                goto LABEL_91;
              }
            }
          }
          goto LABEL_92;
        }
LABEL_95:
        double v96 = *(float *)v7.i32;
        double v97 = v72;
        float v116 = *(float *)v7.i32;
        __powidf2();
        float v66 = v96 + v98 * v97;
        if (v65 == v66) {
          float v66 = v116;
        }
        goto LABEL_97;
      }
      *uint64_t v63 = *(float *)v7.i32;
      if ((v30 & 0x10) == 0)
      {
        if (*(float *)v7.i32 == 1.0)
        {
          uint64_t v67 = v59 + 16 * v58;
          uint64_t v68 = *(float **)(v61 + 160 * *(unsigned __int16 *)(v67 + 10));
          vDSP_vadd(v68, 1, *(const float **)(*(void *)(v40 + 16) + 160 * *(unsigned __int16 *)(v67 + 8)), 1, v68, 1, a3);
        }
        else if (*(float *)v7.i32 != 0.0)
        {
          uint64_t v99 = v59 + 16 * v58;
          v100 = *(float **)(*(void *)(v40 + 16) + 160 * *(unsigned __int16 *)(v99 + 8));
          v101 = *(float **)(v61 + 160 * *(unsigned __int16 *)(v99 + 10));
          if (a3 < 4)
          {
            v102 = v101;
            goto LABEL_119;
          }
          if (((a3 >> 2) - 1) < 3
            || (v101 < (float *)((char *)v100 + v114) ? (BOOL v105 = v100 >= (float *)((char *)v101 + v114)) : (BOOL v105 = 1),
                !v105))
          {
            int v109 = a3 >> 2;
            v102 = v101;
            goto LABEL_118;
          }
          uint64_t v106 = (((a3 >> 2) - 1) + 1) & 0x1FFFFFFFCLL;
          v102 = &v101[v112];
          float32x4_t v107 = (float32x4_t)vdupq_lane_s32(v7, 0);
          v108 = v100;
          do
          {
            float32x4x4_t v120 = vld4q_f32(v108);
            v108 += 16;
            float32x4x4_t v121 = vld4q_f32(v101);
            v121.val[0] = vmlaq_f32(v121.val[0], v107, v120.val[0]);
            v121.val[1] = vmlaq_f32(v121.val[1], v107, v120.val[1]);
            v121.val[2] = vmlaq_f32(v121.val[2], v107, v120.val[2]);
            v121.val[3] = vmlaq_f32(v121.val[3], v107, v120.val[3]);
            vst4q_f32(v101, v121);
            v101 += 16;
            v106 -= 4;
          }
          while (v106);
          v100 = (float *)((char *)v100 + v112 * 4);
          int v109 = (a3 >> 2) - ((a3 >> 2) & 0xFFFFFFFC);
          if (((a3 >> 2) - 1) + 1 != v113)
          {
            do
            {
LABEL_118:
              float v110 = v102[1];
              float *v102 = *v102 + (float)(*v100 * *(float *)v7.i32);
              v102[1] = v110 + (float)(v100[1] * *(float *)v7.i32);
              float v111 = v102[3];
              v102[2] = v102[2] + (float)(v100[2] * *(float *)v7.i32);
              v102[3] = v111 + (float)(v100[3] * *(float *)v7.i32);
              v102 += 4;
              v100 += 4;
              --v109;
            }
            while (v109);
          }
LABEL_119:
          if ((a3 & 3) != 0)
          {
            float *v102 = *v102 + (float)(*v100 * *(float *)v7.i32);
            if (v39 != 1)
            {
              v102[1] = v102[1] + (float)(v100[1] * *(float *)v7.i32);
              if (v39 != 2) {
                v102[2] = v102[2] + (float)(v100[2] * *(float *)v7.i32);
              }
            }
          }
        }
      }
LABEL_98:
      --v50;
      unint64_t v44 = *(unsigned int *)(v40 + 12);
LABEL_99:
      if (++v58 >= v44 || !v50) {
        goto LABEL_58;
      }
    }
    if (!*(unsigned char *)(v40 + 80))
    {
      *uint64_t v63 = *(float *)v7.i32;
      float v66 = *(float *)v7.i32;
    }
    if (vabds_f32(v66, *(float *)v7.i32) < 0.0000001)
    {
      *uint64_t v63 = *(float *)v7.i32;
      if ((v30 & 0x10) == 0)
      {
        if (*(float *)v7.i32 == 1.0)
        {
          uint64_t v69 = v59 + 16 * v58;
          uint64_t v70 = v61 + 160 * *(unsigned __int16 *)(v69 + 10);
          *(unsigned char *)(v70 + 144) = 1;
          BOOL v71 = *(const void **)(*(void *)(v40 + 16) + 160 * *(unsigned __int16 *)(v69 + 8));
          if (v71 != *(const void **)v70) {
            memcpy(*(void **)v70, v71, 4 * a3);
          }
        }
        else if (*(float *)v7.i32 != 0.0)
        {
          __B[0] = *(float *)v7.i32;
          uint64_t v103 = v59 + 16 * v58;
          uint64_t v104 = v61 + 160 * *(unsigned __int16 *)(v103 + 10);
          *(unsigned char *)(v104 + 144) = 1;
          vDSP_vsmul(*(const float **)(*(void *)(v40 + 16) + 160 * *(unsigned __int16 *)(v103 + 8)), 1, __B, *(float **)v104, 1, a3);
        }
      }
      goto LABEL_98;
    }
    float v72 = v66 - *(float *)v7.i32;
    if ((v30 & 0x10) != 0) {
      goto LABEL_95;
    }
    uint64_t v87 = v59 + 16 * v58;
    uint64_t v88 = v61 + 160 * *(unsigned __int16 *)(v87 + 10);
    *(unsigned char *)(v88 + 144) = 1;
    v89 = *(float **)(*(void *)(v40 + 16) + 160 * *(unsigned __int16 *)(v87 + 8));
    v75 = *(float **)v88;
    float v76 = *(float *)(v40 + 60);
    if (a3 >= 4)
    {
      float v90 = *(float *)(v40 + 64);
      float v91 = v76 * v72;
      float v92 = v91 * v76;
      float v93 = (float)(v91 * v76) * v76;
      int v94 = a3 >> 2;
      do
      {
        float *v75 = *v89 * v66;
        float v66 = *(float *)v7.i32 + (float)((float)(v66 - *(float *)v7.i32) * v90);
        v75[1] = v89[1] * (float)(v91 + *(float *)v7.i32);
        float v91 = v91 * v90;
        v75[2] = v89[2] * (float)(v92 + *(float *)v7.i32);
        float v92 = v92 * v90;
        v75[3] = v89[3] * (float)(v93 + *(float *)v7.i32);
        float v93 = v93 * v90;
        v75 += 4;
        v89 += 4;
        --v94;
      }
      while (v94);
    }
    if ((a3 & 3) != 0)
    {
      float *v75 = *v89 * v66;
      float v95 = (float)(v66 - *(float *)v7.i32) * v76;
      float v66 = v95 + *(float *)v7.i32;
      if (v39 != 1)
      {
        v75[1] = v89[1] * v66;
        float v85 = v95 * v76;
        float v66 = v85 + *(float *)v7.i32;
        if (v39 != 2)
        {
          float v86 = v89[2] * v66;
LABEL_91:
          v75[2] = v86;
          float v66 = *(float *)v7.i32 + (float)(v85 * v76);
        }
      }
    }
LABEL_92:
    if (v66 == v65) {
      float v66 = *(float *)v7.i32;
    }
LABEL_97:
    *uint64_t v63 = v66;
    goto LABEL_98;
  }
LABEL_123:
  uint64_t result = 0;
  *(unsigned char *)(*((void *)this + 66) + 80) = 1;
  return result;
}

uint64_t AUMatrixPatcher::CanScheduleParameters(AUMatrixPatcher *this)
{
  return 0;
}

uint64_t AUMatrixPatcher::SetParameter(AUMatrixPatcher *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a2 / *((_DWORD *)this + 146) >= *((_DWORD *)this + 147)) {
    return 4294956418;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUMatrixPatcher::SetProperty(const __CFDictionary **this, int a2, int a3, unsigned int a4, const void **a5, int a6)
{
  if (a2 != 1667788397 || a3 != 0) {
    return 4294956417;
  }
  uint64_t result = 4294956445;
  if (a5 && a6 == 8)
  {
    if (*((unsigned char *)this + 17))
    {
      return 4294956447;
    }
    else
    {
      CFArrayRef v9 = (const __CFDictionary **)CACFDictionary::operator=((uint64_t)(this + 71), *a5);
      CACFDictionary::GetCACFArray(v9, @"Inputs", (CACFArray *)(this + 67));
      CACFDictionary::GetCACFArray(this + 71, @"Outputs", (CACFArray *)(this + 69));
      return 0;
    }
  }
  return result;
}

uint64_t AUMatrixPatcher::GetProperty(CFTypeRef *this, int a2, int a3, int a4, void *a5)
{
  if (a2 != 1667788397 || (a4 | a3) != 0) {
    return 4294956417;
  }
  CFTypeRef v8 = CFRetain(this[71]);
  uint64_t result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUMatrixPatcher::GetPropertyInfo(AUMatrixPatcher *this, int a2, int a3, int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 1667788397 || (a4 | a3) != 0) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 8;
  return result;
}

uint64_t AUMatrixPatcher::Reset(AUMatrixPatcher *this)
{
  uint64_t v1 = (unsigned int *)*((void *)this + 66);
  if (v1)
  {
    unsigned int v2 = *v1;
    if (*v1)
    {
      unsigned int v3 = 0;
      do
      {
        uint64_t v4 = *((void *)v1 + 5);
        if (*(_WORD *)(v4 + 8 * (unsigned __int16)v3 + 6))
        {
          unint64_t v5 = *(unsigned __int16 *)(v4 + 8 * (unsigned __int16)v3 + 4);
          unint64_t v6 = v5 + *(unsigned __int16 *)(v4 + 8 * (unsigned __int16)v3 + 6);
          uint64_t v7 = 160 * v5 + 64;
          do
          {
            uint64_t v8 = *((void *)v1 + 2) + v7;
            *(void *)(v8 + 16) = 0;
            *(_WORD *)(v8 + 8) = 0;
            *(void *)(v8 + 32) = 0;
            *(void *)(v8 + 40) = 0;
            *(void *)(v8 + 48) = 0;
            *(void *)(v8 + 56) = 0;
            *(void *)(v8 + 64) = 0;
            *(void *)(v8 + 72) = 0;
            *(void *)uint64_t v8 = 0xFFFFFFFFLL;
            ++v5;
            v7 += 160;
          }
          while (v5 < v6);
          unsigned int v2 = *v1;
        }
        ++v3;
      }
      while (v3 < v2);
    }
    unsigned int v9 = v1[1];
    if (v9)
    {
      for (unsigned int i = 0; i < v9; ++i)
      {
        uint64_t v11 = *((void *)v1 + 6);
        if (*(_WORD *)(v11 + 8 * (unsigned __int16)i + 6))
        {
          unint64_t v12 = *(unsigned __int16 *)(v11 + 8 * (unsigned __int16)i + 4);
          unint64_t v13 = v12 + *(unsigned __int16 *)(v11 + 8 * (unsigned __int16)i + 6);
          uint64_t v14 = 160 * v12 + 64;
          do
          {
            uint64_t v15 = *((void *)v1 + 3) + v14;
            *(void *)(v15 + 16) = 0;
            *(_WORD *)(v15 + 8) = 0;
            *(void *)(v15 + 32) = 0;
            *(void *)(v15 + 40) = 0;
            *(void *)(v15 + 48) = 0;
            *(void *)(v15 + 56) = 0;
            *(void *)(v15 + 64) = 0;
            *(void *)(v15 + 72) = 0;
            *(void *)uint64_t v15 = 0xFFFFFFFFLL;
            ++v12;
            v14 += 160;
          }
          while (v12 < v13);
          unsigned int v9 = v1[1];
        }
      }
    }
    *((unsigned char *)v1 + 80) = 0;
  }
  return 0;
}

void AUMatrixPatcher::Initialize(AUMatrixPatcher *this)
{
  *((_DWORD *)this + 146) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 80), 0) + 108);
  *((_DWORD *)this + 147) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixPatcher *)((char *)this + 128), 0) + 108);
  operator new();
}

void sub_1BB6A58A8(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1020C406CC7114CLL);
  _Unwind_Resume(a1);
}

void *std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100](void *result, uint64_t a2)
{
  unsigned int v2 = (void *)*result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2[2];
    if (v3) {
      MEMORY[0x1C185D340](v3, 0x10A0C809A3667E9);
    }
    uint64_t v4 = v2[3];
    if (v4) {
      MEMORY[0x1C185D340](v4, 0x1080C8024820D23);
    }
    uint64_t v5 = v2[4];
    if (v5) {
      MEMORY[0x1C185D340](v5, 0x1000C808B6DE1C6);
    }
    uint64_t v6 = v2[5];
    if (v6) {
      MEMORY[0x1C185D340](v6, 0x1000C8000313F17);
    }
    uint64_t v7 = v2[6];
    if (v7) {
      MEMORY[0x1C185D340](v7, 0x1000C8000313F17);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void AUMatrixPatcher::~AUMatrixPatcher(AUMatrixPatcher *this)
{
  *(void *)this = &unk_1F14BDA68;
  CACFDictionary::~CACFDictionary((AUMatrixPatcher *)((char *)this + 568));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 552));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 536));
  std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100]((void *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F14BDA68;
  CACFDictionary::~CACFDictionary((AUMatrixPatcher *)((char *)this + 568));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 552));
  CACFArray::~CACFArray((AUMatrixPatcher *)((char *)this + 536));
  std::unique_ptr<MatrixMixerCore>::reset[abi:ne180100]((void *)this + 66, 0);

  ausdk::AUBase::~AUBase(this);
}

uint64_t VoiceProcessorV6::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  uint64_t v3 = (VoiceProcessorV6 *)this;
  uint64_t v387 = *MEMORY[0x1E4F143B8];
  size_t v4 = **(unsigned int **)(this + 1080);
  if (v4) {
    bzero(*(void **)(this + 1408), v4);
  }
  if (*((unsigned char *)v3 + 1404)) {
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  }
  if (!*((unsigned char *)v3 + 2083)) {
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  }
  int v5 = *((unsigned __int8 *)v3 + 15961);
  if (*((unsigned char *)v3 + 15961)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && *((unsigned char *)v3 + 15960)
    || *((unsigned char *)v3 + 15963))
  {
    uint64_t v6 = (const AudioBufferList *)*((void *)v3 + 134);
    if (v6->mNumberBuffers)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        bzero(v6->mBuffers[v7].mData, v6->mBuffers[v7].mDataByteSize);
        ++v8;
        uint64_t v6 = (const AudioBufferList *)*((void *)v3 + 134);
        ++v7;
      }
      while (v8 < v6->mNumberBuffers);
      int v5 = *((unsigned __int8 *)v3 + 15961);
    }
  }
  else
  {
    uint64_t v6 = (const AudioBufferList *)*((void *)v3 + 134);
  }
  uint64_t v9 = *((unsigned int *)v3 + 127);
  if (v5 || *((unsigned char *)v3 + 15962))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v9, v6, a2);
    uint64_t v9 = *((unsigned int *)v3 + 127);
    uint64_t v10 = (const AudioBufferList *)*((void *)v3 + 135);
    if (*((unsigned char *)v3 + 15961)) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v10 = (const AudioBufferList *)*((void *)v3 + 135);
  }
  if (!*((unsigned char *)v3 + 15962))
  {
    uint64_t v11 = (const AudioBufferList *)*((void *)v3 + 177);
    goto LABEL_26;
  }
LABEL_23:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v9, v10, a2);
  uint64_t v9 = *((unsigned int *)v3 + 127);
  uint64_t v11 = (const AudioBufferList *)*((void *)v3 + 177);
  if (*((unsigned char *)v3 + 15961))
  {
LABEL_27:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v9, v11, a2);
    goto LABEL_28;
  }
LABEL_26:
  if (*((unsigned char *)v3 + 15962)) {
    goto LABEL_27;
  }
LABEL_28:
  AudioUnitParameterValue v367 = 0.0;
  if (!*((unsigned char *)v3 + 2083) && !*((unsigned char *)v3 + 2085) && !*((unsigned char *)v3 + 472))
  {
    uint64_t v25 = *((void *)v3 + 583);
    if (v25 || *((unsigned char *)v3 + 4672))
    {
      AudioUnitRenderActionFlags v366 = 0;
      *((void *)v3 + 2143) = 0;
      *((void *)v3 + 2144) = 0;
      *((void *)v3 + 2142) = 0;
      UInt64 v356 = (UInt64)v3 + 17136;
      *((_DWORD *)v3 + 4284) = 1;
      *(_OWORD *)((char *)v3 + 17144) = *(_OWORD *)(*((void *)v3 + 134) + 8);
      if (v25 & 1) != 0 && (*((unsigned char *)v3 + 4680))
      {
        this = *((void *)v3 + 347);
        if (this)
        {
          long long v26 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v26;
          long long v27 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v27;
          AudioUnitRenderActionFlags v366 = 512;
          this = AudioUnitProcess((AudioUnit)this, &v366, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
        }
      }
      MEMORY[0x1F4188790](this);
      vDSP_Length v29 = (AudioBufferList *)((char *)&v345 - ((v28 + 15) & 0x3FFFFFFFF0));
      int v30 = (_DWORD *)*((void *)v3 + 135);
      if (*v30)
      {
        unint64_t v31 = 0;
        uint64_t v32 = 2;
        uint64_t v33 = v29;
        do
        {
          *(void *)&v33->mNumberBuffers = 0;
          *(void *)&v33->mBuffers[0].mNumberChannels = 0;
          v33->mBuffers[0].mData = 0;
          v33->mNumberBuffers = 1;
          v33->mBuffers[0] = *(AudioBuffer *)&v30[v32];
          ++v31;
          v32 += 4;
          ++v33;
        }
        while (v31 < *v30);
      }
      uint64_t v34 = *((void *)v3 + 583);
      if ((v34 & 2) != 0 && (*((unsigned char *)v3 + 4680) & 2) != 0)
      {
        unsigned int v35 = (OpaqueAudioComponentInstance *)*((void *)v3 + 348);
        if (v35)
        {
          long long v36 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v36;
          long long v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v37;
          AudioUnitRenderActionFlags v366 = 512;
          AudioUnitProcess(v35, &v366, &buf, *((_DWORD *)v3 + 127), v29);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v29, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v29);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 4) != 0 && (*((unsigned char *)v3 + 4680) & 4) != 0)
      {
        uint64_t v38 = (OpaqueAudioComponentInstance *)*((void *)v3 + 349);
        if (v38)
        {
          long long v39 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v39;
          long long v40 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v40;
          AudioUnitRenderActionFlags v366 = 512;
          AudioUnitProcess(v38, &v366, &buf, *((_DWORD *)v3 + 127), v29 + 1);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v29 + 1, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v29 + 1);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 8) != 0 && (*((unsigned char *)v3 + 4680) & 8) != 0)
      {
        unsigned int v41 = (OpaqueAudioComponentInstance *)*((void *)v3 + 350);
        if (v41)
        {
          long long v42 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v42;
          long long v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v43;
          AudioUnitRenderActionFlags v366 = 512;
          AudioUnitProcess(v41, &v366, &buf, *((_DWORD *)v3 + 127), v29 + 2);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v29 + 2, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v29 + 2);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 0x10) != 0 && (*((unsigned char *)v3 + 4680) & 0x10) != 0)
      {
        unint64_t v44 = (OpaqueAudioComponentInstance *)*((void *)v3 + 351);
        if (v44)
        {
          long long v45 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v45;
          long long v46 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v46;
          AudioUnitRenderActionFlags v366 = 512;
          uint64_t v47 = v29 + 3;
          AudioUnitProcess(v44, &v366, &buf, *((_DWORD *)v3 + 127), v47);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v47, &buf);
          }
          CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v47);
          uint64_t v34 = *((void *)v3 + 583);
        }
      }
      if ((v34 & 0x40) != 0 && (*((unsigned char *)v3 + 4680) & 0x40) != 0 && *((void *)v3 + 353))
      {
        long long v48 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v48;
        long long v49 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v49;
        VoiceProcessorV6::ApplyGMCoexNoiseMitigation(v3, *((const AudioBufferList **)v3 + 135), *((AudioBufferList **)v3 + 135), &buf, *((_DWORD *)v3 + 127));
      }
      uint64_t v50 = *((void *)v3 + 135);
      unsigned int v51 = *(_DWORD *)v50;
      v355 = &v345;
      if (v51 < 3)
      {
        *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v50 + 8);
        unsigned int v56 = 0;
        unsigned int v55 = 0;
        if (*(_DWORD *)v50 < 2u)
        {
          unsigned int v54 = 0;
          unsigned int v53 = 0;
        }
        else
        {
          unsigned int v53 = 0;
          *((_OWORD *)v3 + 1061) = *(_OWORD *)(v50 + 24);
          unsigned int v54 = 1;
        }
LABEL_122:
        uint64_t v60 = *((void *)v3 + 583);
        if ((v60 & 0x80) != 0 && (*((unsigned char *)v3 + 4680) & 0x80) != 0)
        {
          uint64_t v61 = (OpaqueAudioComponentInstance *)*((void *)v3 + 354);
          if (v61)
          {
            long long v62 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v62;
            long long v63 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v63;
            AudioUnitRenderActionFlags v366 = 512;
            AudioUnitProcess(v61, &v366, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 706);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 706, &buf);
            }
            uint64_t v60 = *((void *)v3 + 583);
          }
        }
        if (v60 & 0x100) != 0 && (*((unsigned char *)v3 + 4681))
        {
          float v64 = (OpaqueAudioComponentInstance *)*((void *)v3 + 355);
          if (v64)
          {
            long long v65 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v65;
            long long v66 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v66;
            AudioUnitRenderActionFlags v366 = 512;
            AudioUnitProcess(v64, &v366, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 707);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 707, &buf);
            }
            uint64_t v60 = *((void *)v3 + 583);
          }
        }
        if ((v60 & 0x400) != 0 && (*((unsigned char *)v3 + 4681) & 4) != 0)
        {
          uint64_t v67 = (OpaqueAudioComponentInstance *)*((void *)v3 + 357);
          if (v67)
          {
            long long v68 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v68;
            long long v69 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v69;
            AudioUnitRenderActionFlags v366 = 512;
            AudioUnitProcess(v67, &v366, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 709);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 709, &buf);
            }
            uint64_t v60 = *((void *)v3 + 583);
          }
        }
        if ((v60 & 0x800) != 0 && (*((unsigned char *)v3 + 4681) & 8) != 0)
        {
          uint64_t v70 = *((void *)v3 + 358);
          if (v70)
          {
            MEMORY[0x1F4188790](v70);
            *(&v345 - 6) = (AudioUnitParameterValue *)2;
            *(_OWORD *)(&v345 - 5) = *(_OWORD *)((char *)v3 + 16952);
            *(_OWORD *)(&v345 - 3) = *((_OWORD *)v3 + 1061);
            *(void *)&v376.mSampleTime = &v345 - 6;
            v376.mHostTime = 0;
            *(void *)&inInputBufferLists.mSampleTime = (char *)v3 + 16944;
            memset(&inInputBufferLists.mHostTime, 0, 24);
            AudioUnitRenderActionFlags v366 = 512;
            long long v71 = *(_OWORD *)&a2->mRateScalar;
            *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
            *(_OWORD *)&buf.mRateScalar = v71;
            long long v72 = *(_OWORD *)&a2->mSMPTETime.mHours;
            *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
            *(_OWORD *)&buf.mSMPTETime.mHours = v72;
            AudioUnitProcessMultiple(v73, &v366, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v376, 4u, (AudioBufferList **)&inInputBufferLists);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x63u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 706, &buf);
            }
            uint64_t v60 = *((void *)v3 + 583);
          }
        }
        __int16 v365 = 0;
        long long v74 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v74;
        long long v75 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v75;
        if ((v60 & 0x4000000) == 0 || (*((unsigned char *)v3 + 4683) & 4) == 0 || !*((void *)v3 + 373))
        {
LABEL_167:
          BOOL v364 = 0;
          if ((v60 & 0x8000000) == 0 || (*((unsigned char *)v3 + 4683) & 8) == 0 || !*((void *)v3 + 374)) {
            goto LABEL_184;
          }
          uint64_t v81 = *((void *)v3 + 2115);
          if ((unint64_t)(*((void *)v3 + 2116) - v81) <= 0x28) {
            goto LABEL_741;
          }
          ECApplicator::apply(*(AudioUnitParameterID **)(v81 + 40), &buf, v54, &v364, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
          uint64_t v82 = *((unsigned int *)v3 + 127);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
          {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x22u, v82, *((const AudioBufferList **)v3 + 136), &buf);
            uint64_t v82 = *((unsigned int *)v3 + 127);
            float v83 = (const AudioBufferList *)*((void *)v3 + 2154);
            if (*((unsigned char *)v3 + 15961)) {
              goto LABEL_177;
            }
          }
          else
          {
            float v83 = (const AudioBufferList *)*((void *)v3 + 2154);
          }
          if (!*((unsigned char *)v3 + 15962))
          {
LABEL_178:
            uint64_t v84 = *((void *)v3 + 509);
            inInputBufferLists.mSampleTime = *(Float64 *)(v84 + 16);
            inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v82;
            float v85 = (VPTimeFreqConverter *)*((void *)v3 + 2162);
            if (v85)
            {
              VPTimeFreqConverter::Analyze(v85, *(const float **)(*((void *)v3 + 2154) + 16), (DSPSplitComplex *)&inInputBufferLists);
              uint64_t v82 = *((unsigned int *)v3 + 127);
              uint64_t v84 = *((void *)v3 + 509);
            }
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x17u, v82, (const AudioBufferList *)v84, &buf);
            }
            uint64_t v60 = *((void *)v3 + 583);
LABEL_184:
            if ((v60 & 0x400000) != 0 && (*((unsigned char *)v3 + 4682) & 0x40) != 0 && *((void *)v3 + 369))
            {
              float v86 = (AudioUnitParameterID **)*((void *)v3 + 2115);
              if (*((AudioUnitParameterID ***)v3 + 2116) == v86) {
                goto LABEL_741;
              }
              uint64_t PropertyInfo = ECApplicator::apply(*v86, &buf, v53, (BOOL *)&v365 + 1, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
              uint64_t v88 = *((unsigned int *)v3 + 127);
              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
              {
                uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v88, (const AudioBufferList *)v3 + 706, &buf);
                uint64_t v88 = *((unsigned int *)v3 + 127);
                v89 = (const AudioBufferList *)*((void *)v3 + 419);
                if (*((unsigned char *)v3 + 15961))
                {
LABEL_224:
                  uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v88, v89, &buf);
                  goto LABEL_210;
                }
              }
              else
              {
                v89 = (const AudioBufferList *)*((void *)v3 + 419);
              }
              if (*((unsigned char *)v3 + 15962)) {
                goto LABEL_224;
              }
            }
            else
            {
              unsigned int v90 = 0;
              while (((*((_DWORD *)v3 + 116) >> v90) & 1) == 0)
              {
                if (++v90 == 32)
                {
                  unsigned int v90 = 33;
                  break;
                }
              }
              if (v90 >= **((_DWORD **)v3 + 135))
              {
                LODWORD(v357) = v54;
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v91 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                if (v91)
                {
                  float v92 = v91;
                  if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
                  {
                    int v93 = **((_DWORD **)v3 + 135);
                    LODWORD(inInputBufferLists.mSampleTime) = 136315906;
                    *(void *)((char *)&inInputBufferLists.mSampleTime + 4) = "vpProcessUplink_v6.cpp";
                    WORD2(inInputBufferLists.mHostTime) = 1024;
                    *(_DWORD *)((char *)&inInputBufferLists.mHostTime + 6) = 352;
                    WORD1(inInputBufferLists.mRateScalar) = 1024;
                    HIDWORD(inInputBufferLists.mRateScalar) = v90;
                    LOWORD(inInputBufferLists.mWordClockTime) = 1024;
                    *(_DWORD *)((char *)&inInputBufferLists.mWordClockTime + 2) = v93;
                    _os_log_impl(&dword_1BB0CE000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&inInputBufferLists, 0x1Eu);
                  }
                }
                int v94 = (int *)*((void *)v3 + 1578);
                if (v94 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v94, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v6/vpProcessUplink_v6.cpp", 352, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v90, **((_DWORD **)v3 + 135));
                }
                unsigned int v90 = 0;
                unsigned int v54 = v357;
              }
              uint64_t v95 = *((void *)v3 + 135) + 16 * v90;
              uint64_t PropertyInfo = (uint64_t)memcpy(*(void **)(*((void *)v3 + 136) + 16), *(const void **)(v95 + 16), *(unsigned int *)(v95 + 12));
            }
LABEL_210:
            if ((*((unsigned char *)v3 + 4672) & 0x40) != 0 && (*((unsigned char *)v3 + 4688) & 0x40) != 0)
            {
              uint64_t PropertyInfo = *((void *)v3 + 417);
              if (PropertyInfo)
              {
                inInputBufferLists.mSampleTime = *((Float64 *)v3 + 135);
                inInputBufferLists.mHostTime = v356;
                v376.mSampleTime = *((Float64 *)v3 + 136);
                AudioUnitRenderActionFlags v366 = 512;
                uint64_t PropertyInfo = AudioUnitProcessMultiple((AudioUnit)PropertyInfo, &v366, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v376);
              }
            }
            BOOL v363 = 0;
            if ((*((unsigned char *)v3 + 4666) & 0x80) != 0 && (*((unsigned char *)v3 + 4682) & 0x80) != 0 && *((void *)v3 + 370))
            {
              uint64_t v96 = *((void *)v3 + 2115);
              if ((unint64_t)(*((void *)v3 + 2116) - v96) <= 8) {
                goto LABEL_741;
              }
              uint64_t PropertyInfo = ECApplicator::apply(*(AudioUnitParameterID **)(v96 + 8), &buf, v54, &v363, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
              uint64_t v97 = *((unsigned int *)v3 + 127);
              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
              {
                uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v97, (const AudioBufferList *)v3 + 707, &buf);
                uint64_t v97 = *((unsigned int *)v3 + 127);
                double v98 = (const AudioBufferList *)*((void *)v3 + 420);
                if (*((unsigned char *)v3 + 15961))
                {
LABEL_227:
                  uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v97, v98, &buf);
                  goto LABEL_228;
                }
              }
              else
              {
                double v98 = (const AudioBufferList *)*((void *)v3 + 420);
              }
              if (*((unsigned char *)v3 + 15962)) {
                goto LABEL_227;
              }
            }
LABEL_228:
            BOOL v362 = 0;
            if ((*((unsigned char *)v3 + 4667) & 1) == 0 || (*((unsigned char *)v3 + 4683) & 1) == 0 || !*((void *)v3 + 371)) {
              goto LABEL_239;
            }
            uint64_t v99 = *((void *)v3 + 2115);
            if ((unint64_t)(*((void *)v3 + 2116) - v99) <= 0x10) {
              goto LABEL_741;
            }
            uint64_t PropertyInfo = ECApplicator::apply(*(AudioUnitParameterID **)(v99 + 16), &buf, v56, &v362, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066, (float *)v3 + 1070);
            uint64_t v100 = *((unsigned int *)v3 + 127);
            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
            {
              uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v100, (const AudioBufferList *)v3 + 708, &buf);
              uint64_t v100 = *((unsigned int *)v3 + 127);
              v101 = (const AudioBufferList *)*((void *)v3 + 422);
              if (*((unsigned char *)v3 + 15961))
              {
LABEL_238:
                uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v100, v101, &buf);
LABEL_239:
                BOOL v361 = 0;
                if ((*((unsigned char *)v3 + 4667) & 2) == 0 || (*((unsigned char *)v3 + 4683) & 2) == 0 || !*((void *)v3 + 372)) {
                  goto LABEL_250;
                }
                uint64_t v102 = *((void *)v3 + 2115);
                if ((unint64_t)(*((void *)v3 + 2116) - v102) > 0x18)
                {
                  uint64_t PropertyInfo = ECApplicator::apply(*(AudioUnitParameterID **)(v102 + 24), &buf, v55, &v361, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067, (float *)v3 + 1071);
                  uint64_t v103 = *((unsigned int *)v3 + 127);
                  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                  {
                    uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v103, (const AudioBufferList *)v3 + 709, &buf);
                    uint64_t v103 = *((unsigned int *)v3 + 127);
                    uint64_t v104 = (const AudioBufferList *)*((void *)v3 + 421);
                    if (*((unsigned char *)v3 + 15961))
                    {
LABEL_249:
                      uint64_t PropertyInfo = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v103, v104, &buf);
                      goto LABEL_250;
                    }
                  }
                  else
                  {
                    uint64_t v104 = (const AudioBufferList *)*((void *)v3 + 421);
                  }
                  if (*((unsigned char *)v3 + 15962)) {
                    goto LABEL_249;
                  }
LABEL_250:
                  if ((*((unsigned char *)v3 + 8901) & 8) != 0 && (*((unsigned char *)v3 + 8909) & 8) != 0)
                  {
                    if (*((void *)v3 + 481))
                    {
                      *(unsigned char *)(v356 + 32) = 0;
                      if (*((unsigned char *)v3 + 4667) & 1) != 0 && (*((unsigned char *)v3 + 4683))
                      {
                        uint64_t PropertyInfo = *((void *)v3 + 371);
                        if (PropertyInfo)
                        {
                          if (*((void *)v3 + 2145))
                          {
                            LODWORD(inInputBufferLists.mSampleTime) = 0;
                            uint64_t PropertyInfo = AudioUnitGetPropertyInfo((AudioUnit)PropertyInfo, 0xF3Cu, 0, 0, (UInt32 *)&inInputBufferLists, 0);
                            if (!PropertyInfo
                              && LODWORD(inInputBufferLists.mSampleTime) == 4 * *((unsigned int *)v3 + 127))
                            {
                              BOOL v105 = *(void **)(*((void *)v3 + 2145) + 16);
                              uint64_t PropertyInfo = AudioUnitGetProperty(*((AudioUnit *)v3 + 371), 0xF3Cu, 0, 0, v105, (UInt32 *)&inInputBufferLists);
                              int v106 = PropertyInfo;
                              if (*((unsigned char *)v3 + 481)) {
                                uint64_t PropertyInfo = AudioUnitSetProperty(*((AudioUnit *)v3 + 481), 0xF3Cu, 0, 0, v105, LODWORD(inInputBufferLists.mSampleTime));
                              }
                              *(unsigned char *)(v356 + 32) = v106 == 0;
                            }
                          }
                        }
                      }
                    }
                  }
                  if ((*((unsigned char *)v3 + 4668) & 0x10) != 0
                    && (*((unsigned char *)v3 + 4684) & 0x10) != 0
                    && *((void *)v3 + 383))
                  {
                    MEMORY[0x1F4188790](PropertyInfo);
                    v354 = (AudioBufferList *)(&v345 - 10);
                    *((_OWORD *)&v345 - 5) = 0u;
                    *((_OWORD *)&v345 - 4) = 0u;
                    *((_OWORD *)&v345 - 3) = 0u;
                    *((_OWORD *)&v345 - 2) = 0u;
                    uint64_t v344 = 0;
                    long long v107 = *(_OWORD *)((char *)v3 + 16952);
                    *((_DWORD *)&v345 - 20) = 4;
                    *(_OWORD *)(&v345 - 9) = v107;
                    *(_OWORD *)(&v345 - 7) = *((_OWORD *)v3 + 1061);
                    *(_OWORD *)(&v345 - 5) = *((_OWORD *)v3 + 1064);
                    v353 = (void *)*((void *)v3 + 2144);
                    v108 = *(const float **)(*((void *)v3 + 419) + 16);
                    int v109 = *(const float **)(*((void *)v3 + 420) + 16);
                    v357 = *(AudioUnitParameterValue ***)(*((void *)v3 + 421) + 16);
                    float v110 = (const float *)v357;
                    float v111 = *(float **)(*((void *)v3 + 2170) + 16);
                    LODWORD(v382) = 1051372203;
                    vDSP_vadd(v108, 1, v109, 1, v111, 1, *((unsigned int *)v3 + 127));
                    vDSP_vadd(v111, 1, v110, 1, v111, 1, *((unsigned int *)v3 + 127));
                    uint64_t v112 = v111;
                    uint64_t v113 = v111;
                    uint64_t v114 = (float *)v108;
                    vDSP_vsmul(v112, 1, (const float *)&v382, v113, 1, *((unsigned int *)v3 + 127));
                    *(_OWORD *)(&v345 - 3) = *(_OWORD *)(*((void *)v3 + 2170) + 8);
                    v115 = (float *)v109;
                    float v116 = v353;
                    *(void *)&v379.mNumberBuffers = v354;
                    ioOutputBufferLists.realp = (float *)*((void *)v3 + 136);
                    AudioUnitRenderActionFlags v366 = 512;
                    long long v117 = *(_OWORD *)&a2->mRateScalar;
                    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                    *(_OWORD *)&inInputBufferLists.mRateScalar = v117;
                    long long v118 = *(_OWORD *)&a2->mSMPTETime.mHours;
                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v118;
                    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 383), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v379, 1u, (AudioBufferList **)&ioOutputBufferLists);
                    UInt64 v119 = v356;
                    memcpy((void *)(*(void *)(*((void *)v3 + 2166) + 16) + 4 * *(unsigned int *)(v356 + 184)), v116, 4 * *((unsigned int *)v3 + 127));
                    memcpy((void *)(*(void *)(*((void *)v3 + 2167) + 16) + 4 * *(unsigned int *)(v119 + 184)), v108, 4 * *((unsigned int *)v3 + 127));
                    memcpy((void *)(*(void *)(*((void *)v3 + 2168) + 16) + 4 * *(unsigned int *)(v119 + 184)), v115, 4 * *((unsigned int *)v3 + 127));
                    float32x4x4_t v120 = v357;
                    memcpy((void *)(*(void *)(*((void *)v3 + 2169) + 16) + 4 * *(unsigned int *)(v119 + 184)), v357, 4 * *((unsigned int *)v3 + 127));
                    LODWORD(v377) = 4 * *((_DWORD *)v3 + 127);
                    AudioUnitGetProperty(*((AudioUnit *)v3 + 383), 0x9087u, 0, 0, *(void **)(*((void *)v3 + 2171) + 16), (UInt32 *)&v377);
                    uint64_t v121 = *((unsigned int *)v3 + 127);
                    v376.mSampleTime = *(Float64 *)(*((void *)v3 + 2172) + 16);
                    v376.mHostTime = *(void *)&v376.mSampleTime + 4 * v121;
                    v122 = (VPTimeFreqConverter *)*((void *)v3 + 2173);
                    if (v122)
                    {
                      VPTimeFreqConverter::Analyze(v122, *(const float **)(*((void *)v3 + 136) + 16), (DSPSplitComplex *)&v376);
                      uint64_t v121 = *((unsigned int *)v3 + 127);
                    }
                    memcpy(v116, *(const void **)(*((void *)v3 + 2166) + 16), 4 * v121);
                    memcpy(v114, *(const void **)(*((void *)v3 + 2167) + 16), 4 * *((unsigned int *)v3 + 127));
                    memcpy(v115, *(const void **)(*((void *)v3 + 2168) + 16), 4 * *((unsigned int *)v3 + 127));
                    memcpy(v120, *(const void **)(*((void *)v3 + 2169) + 16), 4 * *((unsigned int *)v3 + 127));
                    UInt64 v123 = v356;
                    memmove(*(void **)(*((void *)v3 + 2166) + 16), (const void *)(*(void *)(*((void *)v3 + 2166) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v356 + 184));
                    memmove(*(void **)(*((void *)v3 + 2167) + 16), (const void *)(*(void *)(*((void *)v3 + 2167) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v123 + 184));
                    memmove(*(void **)(*((void *)v3 + 2168) + 16), (const void *)(*(void *)(*((void *)v3 + 2168) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v123 + 184));
                    memmove(*(void **)(*((void *)v3 + 2169) + 16), (const void *)(*(void *)(*((void *)v3 + 2169) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v123 + 184));
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &inInputBufferLists);
                    }
                  }
                  v124 = (float *)(*(void *)(*((void *)v3 + 511) + 16) + 4 * *((unsigned int *)v3 + 127));
                  ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 511) + 16);
                  ioOutputBufferLists.imagp = v124;
                  uint64_t Parameter = *((void *)v3 + 519);
                  if (Parameter) {
                    uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *((const float **)v3 + 2144), &ioOutputBufferLists);
                  }
                  if ((*((unsigned char *)v3 + 4666) & 0x40) != 0
                    && (*((unsigned char *)v3 + 4682) & 0x40) != 0
                    && *((void *)v3 + 369))
                  {
                    uint64_t v126 = *((unsigned int *)v3 + 127);
                    ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 429) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v126];
                    v127 = (VPTimeFreqConverter *)*((void *)v3 + 513);
                    if (v127)
                    {
                      VPTimeFreqConverter::Analyze(v127, *((const float **)v3 + 2120), &ioOutputBufferLists);
                      uint64_t v126 = *((unsigned int *)v3 + 127);
                    }
                    ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 505) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v126];
                    uint64_t Parameter = *((void *)v3 + 517);
                    if (Parameter)
                    {
                      uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((void *)v3 + 419) + 16), &ioOutputBufferLists);
                      uint64_t v126 = *((unsigned int *)v3 + 127);
                    }
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v126, *((const AudioBufferList **)v3 + 429), &buf);
                    }
                  }
                  if ((*((unsigned char *)v3 + 4666) & 0x80) != 0
                    && (*((unsigned char *)v3 + 4682) & 0x80) != 0
                    && *((void *)v3 + 370))
                  {
                    uint64_t v128 = *((unsigned int *)v3 + 127);
                    ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 506) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v128];
                    v129 = (VPTimeFreqConverter *)*((void *)v3 + 514);
                    if (v129)
                    {
                      VPTimeFreqConverter::Analyze(v129, *((const float **)v3 + 2123), &ioOutputBufferLists);
                      uint64_t v128 = *((unsigned int *)v3 + 127);
                    }
                    ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 505) + 32);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v128];
                    uint64_t Parameter = *((void *)v3 + 518);
                    if (Parameter)
                    {
                      uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((void *)v3 + 420) + 16), &ioOutputBufferLists);
                      uint64_t v128 = *((unsigned int *)v3 + 127);
                    }
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v128, *((const AudioBufferList **)v3 + 506), &buf);
                    }
                  }
                  if ((*((unsigned char *)v3 + 4667) & 2) != 0 && (*((unsigned char *)v3 + 4683) & 2) != 0 && *((void *)v3 + 372))
                  {
                    uint64_t v130 = *((unsigned int *)v3 + 127);
                    ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 507) + 16);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v130];
                    v131 = (VPTimeFreqConverter *)*((void *)v3 + 516);
                    if (v131)
                    {
                      VPTimeFreqConverter::Analyze(v131, *((const float **)v3 + 2129), &ioOutputBufferLists);
                      uint64_t v130 = *((unsigned int *)v3 + 127);
                    }
                    ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 505) + 64);
                    ioOutputBufferLists.imagp = &ioOutputBufferLists.realp[v130];
                    uint64_t Parameter = *((void *)v3 + 2113);
                    if (Parameter)
                    {
                      uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((void *)v3 + 421) + 16), &ioOutputBufferLists);
                      uint64_t v130 = *((unsigned int *)v3 + 127);
                    }
                    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v130, *((const AudioBufferList **)v3 + 507), &buf);
                    }
                  }
                  AudioUnitParameterValue v360 = 0.0;
                  uint64_t v132 = *((void *)v3 + 583);
                  if ((v132 & 0x80000000000) != 0 && (*((unsigned char *)v3 + 4685) & 8) != 0)
                  {
                    uint64_t Parameter = *((void *)v3 + 390);
                    if (Parameter)
                    {
                      uint64_t Parameter = AudioUnitGetParameter((AudioUnit)Parameter, 0x2Bu, 0, 0, &v360);
                      uint64_t v132 = *((void *)v3 + 583);
                    }
                  }
                  if (v132 & 0x1000000) != 0 && (*((unsigned char *)v3 + 4683))
                  {
                    if (*((void *)v3 + 371))
                    {
                      if (v360 == 1.0)
                      {
                        v133 = (float *)(*(void *)(*((void *)v3 + 505) + 48) + 4 * *((unsigned int *)v3 + 127));
                        ioOutputBufferLists.realp = *(float **)(*((void *)v3 + 505) + 48);
                        ioOutputBufferLists.imagp = v133;
                        uint64_t Parameter = *((void *)v3 + 2149);
                        if (Parameter)
                        {
                          uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, *(const float **)(*((void *)v3 + 422) + 16), &ioOutputBufferLists);
                          uint64_t v132 = *((void *)v3 + 583);
                        }
                      }
                    }
                  }
                  if ((v132 & 0x100000000000) == 0
                    || (*((unsigned char *)v3 + 4685) & 0x10) == 0
                    || (uint64_t Parameter = *((void *)v3 + 391)) == 0)
                  {
LABEL_326:
                    char v359 = 0;
                    if ((v132 & 0x40000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x40) != 0 && *((void *)v3 + 377))
                    {
                      int v141 = 1;
                      BOOL v142 = 1;
                    }
                    else if ((v132 & 0x200000000) != 0 && (*((unsigned char *)v3 + 4684) & 2) != 0)
                    {
                      int v141 = 0;
                      BOOL v142 = *((void *)v3 + 380) != 0;
                    }
                    else
                    {
                      int v141 = 0;
                      BOOL v142 = 0;
                    }
                    uint64_t v143 = v132 & 0x80000000;
                    if ((v132 & 0x80000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x80) != 0 && *((void *)v3 + 378))
                    {
                      BOOL v144 = 1;
                      int v141 = 1;
                      int v145 = 1;
                      if ((v132 & 0x100000000) == 0) {
                        goto LABEL_351;
                      }
                    }
                    else
                    {
                      if ((v132 & 0x100000000) == 0)
                      {
                        BOOL v144 = 0;
                        int v145 = 1;
                        goto LABEL_351;
                      }
                      int v145 = 1;
                      if (*((unsigned char *)v3 + 4684))
                      {
                        uint64_t v146 = *((void *)v3 + 379);
                        BOOL v144 = v146 != 0;
                        if (v146) {
                          int v145 = 2;
                        }
                        else {
                          int v145 = 1;
                        }
                      }
                      else
                      {
                        BOOL v144 = 0;
                      }
                    }
                    uint64_t v147 = *((void *)v3 + 585);
                    if ((v147 & 0x100000000) != 0
                      && *((void *)v3 + 379)
                      && (v132 & v147 & 0x200000000) != 0
                      && *((void *)v3 + 380))
                    {
                      int v145 = 2;
                      int v141 = 2;
                    }
LABEL_351:
                    if ((v132 & 0x40000000) == 0) {
                      goto LABEL_370;
                    }
                    if ((*((unsigned char *)v3 + 4683) & 0x40) == 0) {
                      goto LABEL_370;
                    }
                    uint64_t Parameter = *((void *)v3 + 377);
                    if (!Parameter) {
                      goto LABEL_370;
                    }
                    AudioUnitSetProperty((AudioUnit)Parameter, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
                    if ((*((unsigned char *)v3 + 4667) & 0x80) != 0 && (*((unsigned char *)v3 + 4683) & 0x80) != 0)
                    {
                      v148 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
                      if (*((void *)v3 + 378))
                      {
                        float v149 = (float)*((unsigned int *)v3 + 684);
LABEL_358:
                        AudioUnitSetParameter(v148, 0x1Bu, 0, 0, v149, 0);
                        uint64_t v150 = *((void *)v3 + 583);
                        if ((v150 & 0x400000) != 0)
                        {
                          uint64_t v151 = *((void *)v3 + 585);
                          if ((v151 & 0x400000) != 0
                            && *((void *)v3 + 369)
                            && (v150 & v151 & 0x800000) != 0
                            && *((void *)v3 + 370))
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x3Fu, 0, 0, *((float *)v3 + 1056) * *((float *)v3 + 1057), 0);
                          }
                        }
                        *(void *)&Float64 v152 = *((void *)v3 + 138) + 24;
                        *(void *)&Float64 v153 = *((void *)v3 + 139) + 24;
                        unsigned int v154 = **((_DWORD **)v3 + 135);
                        if (v154 < 3) {
                          Float64 v155 = 0.0;
                        }
                        else {
                          *(void *)&Float64 v155 = *((void *)v3 + 140) + 24;
                        }
                        *(void *)&v376.mSampleTime = *((void *)v3 + 138) + 24;
                        *(Float64 *)&v376.mHostTime = v153;
                        v376.mRateScalar = v155;
                        v376.mWordClockTime = v356;
                        *(_OWORD *)&v376.mSMPTETime.mSubframes = *(_OWORD *)((char *)v3 + 3352);
                        if (v154 >= 3)
                        {
                          v376.mSampleTime = v153;
                          *(Float64 *)&v376.mHostTime = v155;
                          v376.mRateScalar = v152;
                        }
                        *(void *)&v379.mNumberBuffers = 0;
                        AudioUnitRenderActionFlags v366 = 512;
                        AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1092), 0);
                        long long v156 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&inInputBufferLists.mRateScalar = v156;
                        long long v157 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v157;
                        uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v376, 1u, (AudioBufferList **)&v379);
                        uint64_t v132 = *((void *)v3 + 583);
                        uint64_t v143 = v132 & 0x80000000;
LABEL_370:
                        if (v143 && (*((unsigned char *)v3 + 4683) & 0x80) != 0 && *((void *)v3 + 378))
                        {
                          memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1042) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1043) + 16), *(const void **)(*((void *)v3 + 506) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          if (*((float *)v3 + 1068) == 0.0 && *((float *)v3 + 1069) == 0.0) {
                            AudioUnitParameterValue v158 = 0.0;
                          }
                          else {
                            AudioUnitParameterValue v158 = 1.0;
                          }
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 378), 0x20u, 0, 0, v158, 0);
                          v376.mSampleTime = *((Float64 *)v3 + 435);
                          *(void *)&v379.mNumberBuffers = *((void *)v3 + 430);
                          long long v159 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&inInputBufferLists.mRateScalar = v159;
                          long long v160 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v160;
                          AudioUnitRenderActionFlags v366 = 512;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v376, 1u, (AudioBufferList **)&v379);
                          LODWORD(v382) = 8 * *((_DWORD *)v3 + 127);
                          AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE7Au, 0, 0, *(void **)(*((void *)v3 + 538) + 16), (UInt32 *)&v382);
                          LODWORD(v382) = 8 * *((_DWORD *)v3 + 127);
                          uint64_t Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE79u, 0, 0, *(void **)(*((void *)v3 + 538) + 32), (UInt32 *)&v382);
                          uint64_t v161 = *((unsigned int *)v3 + 127);
                          v162 = (const AudioBufferList *)*((void *)v3 + 430);
                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                          {
                            p_AudioTimeStamp inInputBufferLists = &inInputBufferLists;
                            uint64_t v164 = (uint64_t)v3;
                            unsigned int v165 = 10;
LABEL_379:
                            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal(v164, v165, v161, v162, p_inInputBufferLists);
                          }
LABEL_407:
                          MEMORY[0x1F4188790](Parameter);
                          v177 = (AudioBufferList *)(&v345 - 8);
                          *((_OWORD *)&v345 - 3) = 0u;
                          *((_OWORD *)&v345 - 2) = 0u;
                          *((_OWORD *)&v345 - 4) = 0u;
                          *((_DWORD *)&v345 - 16) = 3;
                          __n128 v180 = MEMORY[0x1F4188790](v178);
                          v357 = &v345 - 8;
                          uint64_t v344 = 0;
                          *((__n128 *)&v345 - 3) = v180;
                          *((__n128 *)&v345 - 2) = v180;
                          *((__n128 *)&v345 - 4) = v180;
                          *((_DWORD *)&v345 - 16) = v181;
                          uint64_t v182 = *((void *)v3 + 583);
                          if ((v182 & 0x400000000) != 0 && (*((unsigned char *)v3 + 4684) & 4) != 0 && *((void *)v3 + 381)
                            || (v182 & 0x800000000) != 0 && (*((unsigned char *)v3 + 4684) & 8) != 0 && *((void *)v3 + 382)
                            || (v182 & 0x2000000000) != 0
                            && (*((unsigned char *)v3 + 4684) & 0x20) != 0
                            && *((void *)v3 + 384))
                          {
                            *(_OWORD *)(&v345 - 7) = *(_OWORD *)(*((void *)v3 + 429) + 8);
                            *(_OWORD *)(&v345 - 5) = *(_OWORD *)(*((void *)v3 + 506) + 8);
                            *(_OWORD *)(&v345 - 3) = *(_OWORD *)(*((void *)v3 + 507) + 8);
                            uint64_t v183 = *((void *)v3 + 505);
                            v184 = v357;
                            *(_OWORD *)(v357 + 1) = *(_OWORD *)(v183 + 8);
                            *(_OWORD *)(v184 + 3) = *(_OWORD *)(v183 + 24);
                            __n128 v180 = *(__n128 *)(v183 + 56);
                            *(__n128 *)(v184 + 5) = v180;
                          }
                          if ((v182 & 0x400000000) == 0 || (*((unsigned char *)v3 + 4684) & 4) == 0 || !*((void *)v3 + 381))
                          {
LABEL_430:
                            if ((v182 & 0x800000000) == 0
                              || (*((unsigned char *)v3 + 4684) & 8) == 0
                              || !*((void *)v3 + 382))
                            {
LABEL_443:
                              if ((v182 & 0x2000000000) == 0
                                || (*((unsigned char *)v3 + 4684) & 0x20) == 0
                                || !*((void *)v3 + 384))
                              {
LABEL_456:
                                if (v141 == 2)
                                {
                                  VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v144, v142, (BOOL *)&v359, v180.n128_f32[0]);
                                }
                                else if (v141 == 1)
                                {
                                  VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v144, v142, &v359, v179);
                                }
                                if (v145 == 1) {
                                  VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, HIBYTE(v365) != 0, v363, v144, v359 != 0);
                                }
                                else {
                                  VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, HIBYTE(v365) != 0, v361, v144, v359 != 0);
                                }
                                v199 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((void *)v3 + 433) + 16), *(const void **)(*((void *)v3 + 505) + 16), *((unsigned int *)v3 + 1073));
                                uint64_t v200 = *((void *)v3 + 583);
                                if ((v200 & 0x1000000) != 0
                                  && (*((unsigned char *)v3 + 4683) & 1) != 0
                                  && *((void *)v3 + 371)
                                  && v360 == 1.0)
                                {
                                  v199 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((void *)v3 + 2148) + 16), *(const void **)(*((void *)v3 + 505) + 48), *((unsigned int *)v3 + 1073));
                                  uint64_t v200 = *((void *)v3 + 583);
                                }
                                if ((v200 & 0x400000000000) == 0
                                  || (uint64_t v201 = *((void *)v3 + 585), (v201 & 0x400000000000) == 0)
                                  || !*((void *)v3 + 393))
                                {
LABEL_486:
                                  if ((v200 & 0x40000000000000) != 0
                                    && (*((unsigned char *)v3 + 4686) & 0x40) != 0
                                    && *((void *)v3 + 401))
                                  {
                                    BOOL v217 = 1;
                                  }
                                  else
                                  {
                                    BOOL v217 = (v200 & 0x100000000000000) != 0
                                        && (*((unsigned char *)v3 + 4687) & 1) != 0
                                        && *((void *)v3 + 403) != 0;
                                  }
                                  LODWORD(v377) = 0;
                                  LODWORD(v374) = 0;
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 390), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v377);
                                  BOOL v218 = *(float *)&v377 < 1.0 && v217;
                                  if (v217)
                                  {
                                    LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
                                    if (*(float *)&v377 < 1.0) {
                                      vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((void *)v3 + 502) + 16), 1, *((unsigned int *)v3 + 127));
                                    }
                                    vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
                                  }
                                  else if ((*((unsigned char *)v3 + 4669) & 8) == 0 {
                                         || (*((unsigned char *)v3 + 4685) & 8) == 0
                                  }
                                         || !*((void *)v3 + 390))
                                  {
                                    LODWORD(v219) = 0;
                                    goto LABEL_509;
                                  }
                                  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
                                  }
                                  LODWORD(v219) = 1;
LABEL_509:
                                  uint64_t v220 = *((void *)v3 + 583);
                                  if ((v220 & 0x8000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 8) != 0)
                                  {
                                    v221 = (OpaqueAudioComponentInstance *)*((void *)v3 + 398);
                                    if (v221)
                                    {
                                      BOOL v222 = v218;
                                      int v223 = (int)v219;
                                      AudioUnitRenderActionFlags v366 = 512;
                                      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 429);
                                      v376.mSampleTime = *((Float64 *)v3 + 430);
                                      OSStatus v224 = AudioUnitProcessMultiple(v221, &v366, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v376);
                                      uint64_t v225 = *((void *)v3 + 2161);
                                      unsigned int v228 = *(_DWORD *)(v225 + 12);
                                      uint64_t v226 = v225 + 12;
                                      unsigned int v227 = v228;
                                      v229 = *(void **)(v226 + 4);
                                      if ((v224
                                         || AudioUnitGetProperty(*((AudioUnit *)v3 + 398), 0x3ECu, 0, 0, *(void **)(v226 + 4), (UInt32 *)v226))&& v227 >= 4)
                                      {
                                        memset_pattern16(v229, &unk_1BB873A60, v227 & 0xFFFFFFFC);
                                      }
                                      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x72u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
                                      }
                                      uint64_t v220 = *((void *)v3 + 583);
                                      LODWORD(v219) = v223;
                                      BOOL v218 = v222;
                                    }
                                  }
                                  v230 = (AudioBufferList *)*((void *)v3 + 501);
                                  if ((v220 & 0x40000000000000) != 0
                                    && (*((unsigned char *)v3 + 4686) & 0x40) != 0
                                    && (v231 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401)) != 0)
                                  {
                                    UInt64 v232 = *((void *)v3 + 500);
                                    v376.mSampleTime = *((Float64 *)v3 + 429);
                                    v376.mHostTime = v232;
                                    *(void *)&v376.mRateScalar = (char *)v3 + 16944;
                                    uint64_t v233 = *((void *)v3 + 502);
                                    *(void *)&v379.mNumberBuffers = *((void *)v3 + 430);
                                    *(void *)&v379.mBuffers[0].mNumberChannels = v233;
                                    v379.mBuffers[0].mData = v230;
                                    AudioUnitRenderActionFlags v366 = 512;
                                    long long v234 = *(_OWORD *)&a2->mRateScalar;
                                    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                    *(_OWORD *)&inInputBufferLists.mRateScalar = v234;
                                    long long v235 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v235;
                                    AudioUnitProcessMultiple(v231, &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v376, 3u, (AudioBufferList **)&v379);
                                    AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v367);
                                    if ((*((unsigned char *)v3 + 4672) & 4) == 0
                                      || (*((unsigned char *)v3 + 4688) & 4) == 0
                                      || !*((void *)v3 + 413))
                                    {
                                      goto LABEL_535;
                                    }
                                    v236 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
                                    AudioUnitParameterID v237 = 2;
                                  }
                                  else
                                  {
                                    if ((v220 & 0x100000000000000) == 0
                                      || (*((unsigned char *)v3 + 4687) & 1) == 0
                                      || (v238 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403)) == 0)
                                    {
                                      int v243 = 1;
                                      goto LABEL_540;
                                    }
                                    AudioUnitSetParameter(v238, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
                                    UInt64 v239 = *((void *)v3 + 432);
                                    v376.mSampleTime = *((Float64 *)v3 + 429);
                                    v376.mHostTime = v239;
                                    v376.mRateScalar = *((Float64 *)v3 + 500);
                                    v376.mWordClockTime = (UInt64)v3 + 16944;
                                    uint64_t v240 = *((void *)v3 + 437);
                                    *(void *)&v379.mNumberBuffers = *((void *)v3 + 430);
                                    *(void *)&v379.mBuffers[0].mNumberChannels = v240;
                                    v379.mBuffers[0].mData = (void *)*((void *)v3 + 502);
                                    v380 = v230;
                                    long long v241 = *(_OWORD *)&a2->mRateScalar;
                                    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                    *(_OWORD *)&inInputBufferLists.mRateScalar = v241;
                                    long long v242 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v242;
                                    AudioUnitRenderActionFlags v366 = 512;
                                    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 403), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v376, 4u, (AudioBufferList **)&v379);
                                    AudioUnitGetParameter(*((AudioUnit *)v3 + 403), 2u, 0, 0, &v367);
                                    if ((*((unsigned char *)v3 + 4672) & 4) == 0
                                      || (*((unsigned char *)v3 + 4688) & 4) == 0
                                      || !*((void *)v3 + 413))
                                    {
LABEL_535:
                                      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), &inInputBufferLists);
                                      }
                                      int v243 = 0;
LABEL_540:
                                      uint64_t v244 = *((void *)v3 + 583);
                                      if ((v244 & 0x400000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 4) != 0)
                                      {
                                        v245 = (OpaqueAudioComponentInstance *)*((void *)v3 + 405);
                                        if (v245)
                                        {
                                          LODWORD(v357) = v243;
                                          v354 = v230;
                                          BOOL v246 = v218;
                                          int v247 = (int)v219;
                                          v376.mSampleTime = *((Float64 *)v3 + 429);
                                          *(void *)&v379.mNumberBuffers = 0;
                                          long long v248 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v248;
                                          long long v249 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&inInputBufferLists.mRateScalar = v249;
                                          AudioUnitRenderActionFlags v366 = 512;
                                          uint64_t v250 = *((void *)v3 + 503);
                                          v251 = *(void **)(v250 + 16);
                                          unsigned int v252 = *(_DWORD *)(v250 + 12);
                                          if ((AudioUnitProcessMultiple(v245, &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v376, 1u, (AudioBufferList **)&v379)|| AudioUnitGetProperty(*((AudioUnit *)v3 + 405), 0x13EDu, 0, 0, *(void **)(*((void *)v3 + 503) + 16), (UInt32 *)(*((void *)v3 + 503) + 12)))&& v252 >= 4)
                                          {
                                            memset_pattern16(v251, &unk_1BB873A60, v252 & 0xFFFFFFFC);
                                          }
                                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x52u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 503), &inInputBufferLists);
                                          }
                                          uint64_t v244 = *((void *)v3 + 583);
                                          LODWORD(v219) = v247;
                                          BOOL v218 = v246;
                                          v230 = v354;
                                          int v243 = (int)v357;
                                        }
                                      }
                                      if ((v244 & 0x200000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 2) != 0)
                                      {
                                        v253 = (OpaqueAudioComponentInstance *)*((void *)v3 + 404);
                                        if (v253)
                                        {
                                          LODWORD(v357) = v243;
                                          BOOL v254 = v217;
                                          v255 = v230;
                                          BOOL v256 = v218;
                                          int v257 = (int)v219;
                                          v376.mSampleTime = *((Float64 *)v3 + 429);
                                          *(void *)&v379.mNumberBuffers = 0;
                                          AudioUnitRenderActionFlags v366 = 512;
                                          long long v258 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v258;
                                          long long v259 = *(_OWORD *)&a2->mRateScalar;
                                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                          *(_OWORD *)&inInputBufferLists.mRateScalar = v259;
                                          uint64_t v260 = *((void *)v3 + 504);
                                          v354 = *(AudioBufferList **)(v260 + 16);
                                          unsigned int v261 = *(_DWORD *)(v260 + 12);
                                          if ((AudioUnitProcessMultiple(v253, &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v376, 1u, (AudioBufferList **)&v379)|| AudioUnitGetProperty(*((AudioUnit *)v3 + 404), 0x3EAu, 0, 0, *(void **)(*((void *)v3 + 504) + 16), (UInt32 *)(*((void *)v3 + 504) + 12)))&& v261 >= 4)
                                          {
                                            memset_pattern16(v354, &unk_1BB873A60, v261 & 0xFFFFFFFC);
                                          }
                                          uint64_t v244 = *((void *)v3 + 583);
                                          LODWORD(v219) = v257;
                                          BOOL v218 = v256;
                                          v230 = v255;
                                          BOOL v217 = v254;
                                          int v243 = (int)v357;
                                        }
                                      }
                                      if ((v244 & 0x800000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 8) != 0)
                                      {
                                        if (*((void *)v3 + 406))
                                        {
                                          int v262 = *(_DWORD *)(v356 + 280);
                                          if (v262)
                                          {
                                            LODWORD(v357) = v243;
                                            if (v262 == 1)
                                            {
                                              v263 = (uint64_t *)((char *)v3 + 1104);
                                              v264 = (uint64_t *)((char *)v3 + 1128);
                                            }
                                            else
                                            {
                                              v263 = (uint64_t *)((char *)v3 + 1112);
                                              v264 = (uint64_t *)((char *)v3 + 1120);
                                            }
                                            uint64_t v265 = *v264;
                                            uint64_t v266 = *v263;
                                            uint64_t v267 = *((void *)v3 + 2159);
                                            uint64_t v268 = *((unsigned int *)v3 + 127);
                                            v376.mSampleTime = *(Float64 *)(v267 + 16);
                                            v376.mHostTime = *(void *)&v376.mSampleTime + 4 * v268;
                                            v269 = (VPTimeFreqConverter *)*((void *)v3 + 2163);
                                            if (v269)
                                            {
                                              VPTimeFreqConverter::Analyze(v269, *(const float **)(v266 + 40), (DSPSplitComplex *)&v376);
                                              uint64_t v267 = *((void *)v3 + 2159);
                                              uint64_t v268 = *((unsigned int *)v3 + 127);
                                            }
                                            LODWORD(v354) = v219;
                                            v376.mSampleTime = *(Float64 *)(v267 + 32);
                                            v376.mHostTime = *(void *)&v376.mSampleTime + 4 * v268;
                                            v270 = (VPTimeFreqConverter *)*((void *)v3 + 2164);
                                            if (v270)
                                            {
                                              VPTimeFreqConverter::Analyze(v270, *(const float **)(v265 + 40), (DSPSplitComplex *)&v376);
                                              uint64_t v267 = *((void *)v3 + 2159);
                                              LODWORD(v268) = *((_DWORD *)v3 + 127);
                                            }
                                            *(void *)&v379.mNumberBuffers = v267;
                                            v382 = (AudioBufferList *)v267;
                                            AudioUnitRenderActionFlags v366 = 512;
                                            long long v271 = *(_OWORD *)&a2->mRateScalar;
                                            *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                            *(_OWORD *)&inInputBufferLists.mRateScalar = v271;
                                            long long v272 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v272;
                                            OSStatus v273 = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 406), &v366, &inInputBufferLists, v268, 1u, (const AudioBufferList **)&v379, 1u, &v382);
                                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2159), &inInputBufferLists);
                                            }
                                            uint64_t v274 = *((void *)v3 + 2160);
                                            unsigned int v277 = *(_DWORD *)(v274 + 12);
                                            uint64_t v275 = v274 + 12;
                                            unsigned int v276 = v277;
                                            v278 = *(void **)(v275 + 4);
                                            if ((v273
                                               || AudioUnitGetProperty(*((AudioUnit *)v3 + 406), 0x15FEu, 0, 0, *(void **)(v275 + 4), (UInt32 *)v275))&& v276 >= 4)
                                            {
                                              memset_pattern16(v278, &unk_1BB873A60, v276 & 0xFFFFFFFC);
                                            }
                                            LOBYTE(v219) = (_BYTE)v354;
                                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
                                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Eu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2160), &inInputBufferLists);
                                            }
                                            uint64_t v244 = *((void *)v3 + 583);
                                            int v243 = (int)v357;
                                          }
                                        }
                                      }
                                      if ((v244 & 0x80000000000) == 0) {
                                        goto LABEL_633;
                                      }
                                      if ((*((unsigned char *)v3 + 4685) & 8) == 0
                                        || (v279 = (OpaqueAudioComponentInstance *)*((void *)v3 + 390)) == 0)
                                      {
LABEL_612:
                                        if ((*((unsigned char *)v3 + 4685) & 8) != 0 && *((void *)v3 + 390) && v218)
                                        {
                                          v295 = *(float **)(*((void *)v3 + 502) + 16);
                                          vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, v295, 1, v295, 1, *((unsigned int *)v3 + 127));
                                          uint64_t v296 = *((void *)v3 + 583);
                                          if ((v296 & 0x400000000000000) != 0
                                            && (*((unsigned char *)v3 + 4687) & 4) != 0
                                            && *((void *)v3 + 405))
                                          {
                                            vDSP_vmin(*(const float **)(*((void *)v3 + 503) + 16), 1, v295, 1, v295, 1, *((unsigned int *)v3 + 127));
                                            uint64_t v296 = *((void *)v3 + 583);
                                          }
                                          if ((v296 & 0x200000000000000) != 0
                                            && (*((unsigned char *)v3 + 4687) & 2) != 0
                                            && *((void *)v3 + 404))
                                          {
                                            vDSP_vmin(*(const float **)(*((void *)v3 + 504) + 16), 1, v295, 1, v295, 1, *((unsigned int *)v3 + 127));
                                            uint64_t v296 = *((void *)v3 + 583);
                                          }
                                          if ((v296 & 0x800000000000000) != 0
                                            && (*((unsigned char *)v3 + 4687) & 8) != 0
                                            && *((void *)v3 + 406))
                                          {
                                            vDSP_vmin(*(const float **)(*((void *)v3 + 2160) + 16), 1, v295, 1, v295, 1, *((unsigned int *)v3 + 127));
                                            uint64_t v296 = *((void *)v3 + 583);
                                          }
                                          char v297 = (char)v219;
                                          if ((v296 & 0x8000000000000) != 0
                                            && (*((unsigned char *)v3 + 4686) & 8) != 0
                                            && *((void *)v3 + 398))
                                          {
                                            vDSP_vmin(*(const float **)(*((void *)v3 + 2161) + 16), 1, v295, 1, v295, 1, *((unsigned int *)v3 + 127));
                                          }
                                          v219 = *(const float **)(*((void *)v3 + 429) + 16);
                                          v298 = *(float **)(*((void *)v3 + 430) + 16);
                                          vDSP_vmul(v219, 1, v295, 1, v298, 1, *((unsigned int *)v3 + 127));
                                          vDSP_vmul(&v219[*((unsigned int *)v3 + 127) + 1], 1, v295 + 1, 1, &v298[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
                                          v219[*((unsigned int *)v3 + 127)] = v219[*((unsigned int *)v3 + 127)]
                                                                            * v295[*((_DWORD *)v3 + 127) - 1];
                                          LOBYTE(v219) = v297;
LABEL_636:
                                          if (((v219 & 1) != 0
                                             || (*((unsigned char *)v3 + 4669) & 8) != 0
                                             && (*((unsigned char *)v3 + 4685) & 8) != 0
                                             && *((void *)v3 + 390))
                                            && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
                                          {
                                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), &buf);
                                          }
                                          if ((*((unsigned char *)v3 + 4671) & 0x20) != 0
                                            && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
                                          {
                                            v301 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
                                            if (v301)
                                            {
                                              if (*((_DWORD *)v3 + 3114) == 13)
                                              {
                                                v302 = (AudioUnitParameterValue *)*((void *)v3 + 2174);
                                                AudioUnitParameterValue *v302 = v367;
                                                unsigned int v303 = *(_DWORD *)(v356 + 184);
                                                unsigned int v304 = *((_DWORD *)v3 + 127);
                                                unsigned int v305 = v303 % v304;
                                                unsigned int v306 = vcvtms_u32_f32((float)v303 / (float)v304);
                                                if (v305) {
                                                  float v307 = (float)((float)((float)v305 / (float)v304) * v302[v306 + 1])
                                                }
                                                       + (float)((float)(1.0 - (float)((float)v305 / (float)v304))
                                                               * v302[v306]);
                                                else {
                                                  float v307 = v302[v306];
                                                }
                                                AudioUnitParameterValue v367 = v307;
                                                memmove(v302 + 1, v302, *((void *)v3 + 2175) - (void)v302 - 4);
                                                v301 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
                                              }
                                              AudioUnitSetParameter(v301, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3133), 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1048), 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1052), 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 3u, 0, 0, v367, 0);
                                              AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
                                              if (*((_DWORD *)v3 + 3114) == 13)
                                              {
                                                UInt64 v308 = *((void *)v3 + 511);
                                                v376.mSampleTime = *((Float64 *)v3 + 419);
                                                v376.mHostTime = v308;
                                                UInt64 v309 = *((void *)v3 + 433);
                                                v376.mRateScalar = *((Float64 *)v3 + 2172);
                                                v376.mWordClockTime = v309;
                                                *(void *)&v376.mSMPTETime.mSubframes = 0;
                                                *(void *)&v376.mSMPTETime.mType = *((void *)v3 + 2171);
                                                *(void *)&v379.mNumberBuffers = 0;
                                                AudioUnitRenderActionFlags v366 = 512;
                                                long long v310 = *(_OWORD *)&a2->mRateScalar;
                                                *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                *(_OWORD *)&inInputBufferLists.mRateScalar = v310;
                                                long long v311 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v311;
                                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 408), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v376, 1u, (AudioBufferList **)&v379);
                                                LODWORD(v382) = 0;
                                                LODWORD(v372) = 4;
                                                AudioUnitGetProperty(*((AudioUnit *)v3 + 408), 0x15u, 0, 0, &v382, (UInt32 *)&v372);
                                                if (!v382)
                                                {
                                                  LODWORD(v370) = 0;
                                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 0xBu, 0, 0, (AudioUnitParameterValue *)&v370);
                                                  vDSP_vsmul(*(const float **)(*((void *)v3 + 136) + 16), 1, (const float *)&v370, *(float **)(*((void *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
                                                }
                                              }
                                              else
                                              {
                                                UInt64 v312 = *((void *)v3 + 511);
                                                v376.mSampleTime = *((Float64 *)v3 + 419);
                                                v376.mHostTime = v312;
                                                UInt64 v313 = *((void *)v3 + 510);
                                                v376.mRateScalar = *((Float64 *)v3 + 430);
                                                v376.mWordClockTime = v313;
                                                *(void *)&v376.mSMPTETime.mSubframes = *((void *)v3 + 500);
                                                *(void *)&v376.mSMPTETime.mType = *((void *)v3 + 502);
                                                *(void *)&v379.mNumberBuffers = *((void *)v3 + 136);
                                                AudioUnitRenderActionFlags v366 = 512;
                                                long long v314 = *(_OWORD *)&a2->mRateScalar;
                                                *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                                *(_OWORD *)&inInputBufferLists.mRateScalar = v314;
                                                long long v315 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v315;
                                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 408), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v376, 1u, (AudioBufferList **)&v379);
                                              }
                                              LODWORD(inInputBufferLists.mSampleTime) = 0;
                                              AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                              *((_DWORD *)v3 + 3134) = LODWORD(inInputBufferLists.mSampleTime);
                                              if ((*((unsigned char *)v3 + 4672) & 4) != 0
                                                && (*((unsigned char *)v3 + 4688) & 4) != 0
                                                && *((void *)v3 + 413))
                                              {
                                                AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 2u, 0, 0, &v367);
                                                AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v367, 0);
                                              }
                                            }
                                          }
                                          goto LABEL_660;
                                        }
                                        if ((*((unsigned char *)v3 + 4685) & 8) != 0)
                                        {
                                          BOOL v299 = *((void *)v3 + 390) != 0;
LABEL_634:
                                          if (!v299 && !v217)
                                          {
                                            LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
                                            unsigned int v300 = *((_DWORD *)v3 + 127);
                                            vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((void *)v3 + 502) + 16), 1, v300);
                                            memcpy(*(void **)(*((void *)v3 + 430) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * v300);
                                          }
                                          goto LABEL_636;
                                        }
LABEL_633:
                                        BOOL v299 = 0;
                                        goto LABEL_634;
                                      }
                                      AudioUnitSetParameter(v279, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
                                      AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
                                      UInt64 v280 = *((void *)v3 + 433);
                                      v376.mSampleTime = *((Float64 *)v3 + 429);
                                      v376.mHostTime = v280;
                                      UInt64 v281 = *((void *)v3 + 502);
                                      v376.mRateScalar = *((Float64 *)v3 + 512);
                                      v376.mWordClockTime = v281;
                                      *(void *)&v376.mSMPTETime.mSubframes = v230;
                                      *(void *)&v376.mSMPTETime.mType = 0;
                                      if (!v218) {
                                        v376.mWordClockTime = 0;
                                      }
                                      uint64_t v282 = *((void *)v3 + 510);
                                      *(void *)&v379.mNumberBuffers = 0;
                                      *(void *)&v379.mBuffers[0].mNumberChannels = v282;
                                      v379.mBuffers[0].mData = 0;
                                      uint64_t v283 = *((void *)v3 + 583);
                                      if ((v283 & 0x4000000) != 0
                                        && (uint64_t v284 = *((void *)v3 + 585), (v284 & 0x4000000) != 0)
                                        && (v286 = (OpaqueAudioComponentInstance *)*((void *)v3 + 373)) != 0
                                        && (v283 & v284 & 0x400000) != 0
                                        && *((void *)v3 + 369))
                                      {
                                        int v285 = v243;
                                        LODWORD(inInputBufferLists.mSampleTime) = 0;
                                        *(void *)&v376.mSMPTETime.mType = *((void *)v3 + 508);
                                        AudioUnitGetParameter(v286, 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0x2Au, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                        AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0x29u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
                                      }
                                      else
                                      {
                                        int v285 = v243;
                                        if ((v283 & 0x1000000) != 0
                                          && (*((unsigned char *)v3 + 4683) & 1) != 0
                                          && *((void *)v3 + 371)
                                          && v360 == 1.0)
                                        {
                                          *(void *)&v376.mSMPTETime.mType = *((void *)v3 + 2148);
                                        }
                                      }
                                      uint64_t v287 = 4016;
                                      if (v218) {
                                        uint64_t v287 = 4000;
                                      }
                                      v288 = *(void **)((char *)v3 + v287);
                                      if (v218) {
                                        uint64_t v289 = 3456;
                                      }
                                      else {
                                        uint64_t v289 = 3440;
                                      }
                                      *(void *)&v379.mNumberBuffers = *(void *)((char *)v3 + v289);
                                      v379.mBuffers[0].mData = v288;
                                      long long v290 = *(_OWORD *)&a2->mRateScalar;
                                      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                      *(_OWORD *)&inInputBufferLists.mRateScalar = v290;
                                      long long v291 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v291;
                                      AudioUnitRenderActionFlags v366 = 512;
                                      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v376, 3u, (AudioBufferList **)&v379);
                                      if ((v285 | !v218) == 1) {
                                        AudioUnitGetParameter(*((AudioUnit *)v3 + 390), 0x20u, 0, 0, &v367);
                                      }
                                      uint64_t v292 = *((unsigned int *)v3 + 127);
                                      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                      {
                                        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v292, *(const AudioBufferList **)((char *)v3 + v289), &inInputBufferLists);
                                        uint64_t v292 = *((unsigned int *)v3 + 127);
                                        v293 = (const AudioBufferList *)*((void *)v3 + 500);
                                        if (*((unsigned char *)v3 + 15961))
                                        {
LABEL_610:
                                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v292, v293, &inInputBufferLists);
LABEL_611:
                                          if ((*((unsigned char *)v3 + 4669) & 8) == 0) {
                                            goto LABEL_633;
                                          }
                                          goto LABEL_612;
                                        }
                                      }
                                      else
                                      {
                                        v293 = (const AudioBufferList *)*((void *)v3 + 500);
                                      }
                                      if (!*((unsigned char *)v3 + 15962)) {
                                        goto LABEL_611;
                                      }
                                      goto LABEL_610;
                                    }
                                    v236 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                                    AudioUnitParameterID v237 = 9;
                                  }
                                  AudioUnitGetParameter(v236, v237, 0, 0, (AudioUnitParameterValue *)&v374);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v374, 0);
                                  goto LABEL_535;
                                }
                                LODWORD(v382) = 1092616192;
                                if ((v200 & v201 & 0x100000000000000) != 0)
                                {
                                  v199 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                                  if (v199)
                                  {
                                    v199 = (OpaqueAudioComponentInstance *)AudioUnitGetParameter(v199, 9u, 0, 0, (AudioUnitParameterValue *)&v382);
                                    uint64_t v200 = *((void *)v3 + 583);
                                  }
                                }
                                if ((v200 & 0x100000000) != 0
                                  && (*((unsigned char *)v3 + 4684) & 1) != 0
                                  && *((void *)v3 + 379))
                                {
                                  LODWORD(inInputBufferLists.mSampleTime) = 0;
                                  LODWORD(v376.mSampleTime) = 0;
                                  v379.mNumberBuffers = 0;
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 0x18u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 0x19u, 0, 0, (AudioUnitParameterValue *)&v376);
                                  AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 5u, 0, 0, (AudioUnitParameterValue *)&v379.mNumberBuffers);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 3u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 4u, 0, 0, *(AudioUnitParameterValue *)&v376.mSampleTime, 0);
                                  AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 5u, 0, 0, *(AudioUnitParameterValue *)&v379.mNumberBuffers, 0);
                                  v199 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 6u, 0, 0, *(AudioUnitParameterValue *)&v382, 0);
                                }
                                MEMORY[0x1F4188790](v199);
                                uint64_t v344 = 0;
                                *((_OWORD *)&v345 - 3) = 0u;
                                *((_OWORD *)&v345 - 2) = 0u;
                                *((_DWORD *)&v345 - 12) = 2;
                                uint64_t v202 = *((void *)v3 + 429);
                                *(&v345 - 4) = *(AudioUnitParameterValue **)(v202 + 16);
                                *(&v345 - 5) = *(AudioUnitParameterValue **)(v202 + 8);
                                uint64_t v203 = *((void *)v3 + 432);
                                uint64_t v344 = *(void *)(v203 + 16);
                                *(&v345 - 3) = *(AudioUnitParameterValue **)(v203 + 8);
                                __n128 v205 = MEMORY[0x1F4188790](v204);
                                *((__n128 *)&v345 - 3) = v205;
                                *((__n128 *)&v345 - 2) = v205;
                                *((_DWORD *)&v345 - 12) = v206;
                                MEMORY[0x1F4188790](v207);
                                *(&v345 - 3) = 0;
                                uint64_t v344 = 0;
                                *(&v345 - 4) = 0;
                                *((_DWORD *)&v345 - 8) = 1;
                                uint64_t v208 = *((void *)v3 + 433);
                                *(void *)(v209 - 32) = *(void *)(v208 + 16);
                                *(void *)(v209 - 40) = *(void *)(v208 + 8);
                                uint64_t v210 = *((void *)v3 + 505);
                                *(void *)(v209 - 16) = *(void *)(v210 + 32);
                                *(void *)(v209 - 24) = *(void *)(v210 + 24);
                                uint64_t v344 = *(void *)(v208 + 16);
                                *(&v345 - 3) = *(AudioUnitParameterValue **)(v208 + 8);
                                v376.mSampleTime = v211;
                                v376.mHostTime = v212;
                                *(Float64 *)&v379.mNumberBuffers = v211;
                                *(void *)&v379.mBuffers[0].mNumberChannels = &v345 - 4;
                                long long v213 = *(_OWORD *)&a2->mRateScalar;
                                *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                                *(_OWORD *)&inInputBufferLists.mRateScalar = v213;
                                long long v214 = *(_OWORD *)&a2->mSMPTETime.mHours;
                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                                *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v214;
                                AudioUnitRenderActionFlags v366 = 512;
                                AudioUnitProcessMultiple(*((AudioUnit *)v3 + 393), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v376, 2u, (AudioBufferList **)&v379);
                                uint64_t v215 = *((unsigned int *)v3 + 127);
                                if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                                {
                                  VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x81u, v215, *((const AudioBufferList **)v3 + 429), &inInputBufferLists);
                                  uint64_t v215 = *((unsigned int *)v3 + 127);
                                  v216 = (const AudioBufferList *)*((void *)v3 + 432);
                                  if (*((unsigned char *)v3 + 15961)) {
                                    goto LABEL_484;
                                  }
                                }
                                else
                                {
                                  v216 = (const AudioBufferList *)*((void *)v3 + 432);
                                }
                                if (!*((unsigned char *)v3 + 15962))
                                {
LABEL_485:
                                  uint64_t v200 = *((void *)v3 + 583);
                                  goto LABEL_486;
                                }
LABEL_484:
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x82u, v215, v216, &inInputBufferLists);
                                goto LABEL_485;
                              }
                              v354 = v177;
                              int v350 = v145;
                              BOOL v351 = v144;
                              int v352 = v141;
                              LODWORD(v353) = v142;
                              uint64_t v193 = 0;
                              v194 = (AudioBufferList *)*((void *)v3 + 524);
                              v346 = (AudioUnitParameterValue *)((char *)v3 + 4192);
                              v377 = v194;
                              LODWORD(v378) = *((_DWORD *)v3 + 1051);
                              v347 = (AudioUnitParameterValue *)((char *)v3 + 4208);
                              v374 = (const AudioBufferList *)*((void *)v3 + 526);
                              int v375 = *((_DWORD *)v3 + 1055);
                              v348 = (AudioUnitParameterValue *)((char *)v3 + 4224);
                              uint64_t v372 = *((void *)v3 + 528);
                              int v373 = *((_DWORD *)v3 + 1059);
                              v349 = (AudioUnitParameterValue *)((char *)v3 + 4240);
                              uint64_t v370 = *((void *)v3 + 530);
                              int v371 = *((_DWORD *)v3 + 1063);
                              v345 = (AudioUnitParameterValue *)((char *)v3 + 4256);
                              uint64_t v368 = *((void *)v3 + 532);
                              int v369 = *((_DWORD *)v3 + 1067);
                              do
                              {
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x64u, 4u, v193, *((AudioUnitParameterValue *)&v377 + v193), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x65u, 4u, v193, *((AudioUnitParameterValue *)&v374 + v193), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x66u, 4u, v193, *((AudioUnitParameterValue *)&v372 + v193), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x67u, 4u, v193, *((AudioUnitParameterValue *)&v370 + v193), 0);
                                AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x68u, 4u, v193, *((AudioUnitParameterValue *)&v368 + v193), 0);
                                ++v193;
                              }
                              while (v193 != 3);
                              *(void *)&v379.mNumberBuffers = 1;
                              *(void *)&v379.mBuffers[0].mNumberChannels = 0;
                              v379.mBuffers[0].mData = 0;
                              v379.mBuffers[0] = *(AudioBuffer *)(*((void *)v3 + 505) + 8);
                              v382 = v354;
                              v383 = (const AudioBufferList *)v357;
                              v376.mSampleTime = *((Float64 *)v3 + 429);
                              v376.mHostTime = (UInt64)&v379;
                              v376.mRateScalar = 0.0;
                              v376.mWordClockTime = 0;
                              AudioUnitRenderActionFlags v366 = 512;
                              long long v195 = *(_OWORD *)&a2->mRateScalar;
                              *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                              *(_OWORD *)&inInputBufferLists.mRateScalar = v195;
                              long long v196 = *(_OWORD *)&a2->mSMPTETime.mHours;
                              *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                              *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v196;
                              AudioUnitProcessMultiple(*((AudioUnit *)v3 + 384), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v382, 4u, (AudioBufferList **)&v376);
                              AudioUnitParameterValue v358 = 0.0;
                              AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0xAu, 0, 0, &v358);
                              uint64_t v197 = *((unsigned int *)v3 + 127);
                              if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                              {
                                VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x64u, v197, *((const AudioBufferList **)v3 + 429), &inInputBufferLists);
                                uint64_t v197 = *((unsigned int *)v3 + 127);
                                int v141 = v352;
                                BOOL v142 = (int)v353;
                                int v145 = v350;
                                BOOL v144 = v351;
                                v198 = v345;
                                if (*((unsigned char *)v3 + 15961)) {
                                  goto LABEL_454;
                                }
                              }
                              else
                              {
                                int v141 = v352;
                                BOOL v142 = (int)v353;
                                int v145 = v350;
                                BOOL v144 = v351;
                                v198 = v345;
                              }
                              if (!*((unsigned char *)v3 + 15962))
                              {
LABEL_455:
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x64u, 4u, 0, v346);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x65u, 4u, 0, v347);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x66u, 4u, 0, v348);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x67u, 4u, 0, v349);
                                AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x68u, 4u, 0, v198);
                                goto LABEL_456;
                              }
LABEL_454:
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x65u, v197, &v379, &inInputBufferLists);
                              goto LABEL_455;
                            }
                            v354 = v177;
                            int v350 = v145;
                            BOOL v351 = v144;
                            int v352 = v141;
                            LODWORD(v353) = v142;
                            uint64_t v189 = 0;
                            v382 = (AudioBufferList *)*((void *)v3 + 524);
                            LODWORD(v383) = *((_DWORD *)v3 + 1051);
                            v377 = (AudioBufferList *)*((void *)v3 + 526);
                            LODWORD(v378) = *((_DWORD *)v3 + 1055);
                            v374 = (const AudioBufferList *)*((void *)v3 + 528);
                            int v375 = *((_DWORD *)v3 + 1059);
                            uint64_t v372 = *((void *)v3 + 530);
                            int v373 = *((_DWORD *)v3 + 1063);
                            uint64_t v370 = *((void *)v3 + 532);
                            int v371 = *((_DWORD *)v3 + 1067);
                            do
                            {
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x12u, 4u, v189, *((AudioUnitParameterValue *)&v382 + v189), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x13u, 4u, v189, *((AudioUnitParameterValue *)&v377 + v189), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x14u, 4u, v189, *((AudioUnitParameterValue *)&v374 + v189), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x15u, 4u, v189, *((AudioUnitParameterValue *)&v372 + v189), 0);
                              AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x16u, 4u, v189, *((AudioUnitParameterValue *)&v370 + v189), 0);
                              ++v189;
                            }
                            while (v189 != 3);
                            v177 = v354;
                            *(void *)&v376.mSampleTime = v354;
                            v376.mHostTime = (UInt64)v357;
                            *(void *)&v379.mNumberBuffers = v354;
                            *(void *)&v379.mBuffers[0].mNumberChannels = v357;
                            AudioUnitRenderActionFlags v366 = 512;
                            long long v190 = *(_OWORD *)&a2->mRateScalar;
                            *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                            *(_OWORD *)&inInputBufferLists.mRateScalar = v190;
                            long long v191 = *(_OWORD *)&a2->mSMPTETime.mHours;
                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                            *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v191;
                            AudioUnitProcessMultiple(*((AudioUnit *)v3 + 382), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v376, 2u, (AudioBufferList **)&v379);
                            uint64_t v192 = *((unsigned int *)v3 + 127);
                            if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                            {
                              VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Bu, v192, v177, &inInputBufferLists);
                              uint64_t v192 = *((unsigned int *)v3 + 127);
                              int v141 = v352;
                              BOOL v142 = (int)v353;
                              int v145 = v350;
                              BOOL v144 = v351;
                              if (*((unsigned char *)v3 + 15961)) {
                                goto LABEL_441;
                              }
                            }
                            else
                            {
                              int v141 = v352;
                              BOOL v142 = (int)v353;
                              int v145 = v350;
                              BOOL v144 = v351;
                            }
                            if (!*((unsigned char *)v3 + 15962))
                            {
LABEL_442:
                              uint64_t v182 = *((void *)v3 + 583);
                              goto LABEL_443;
                            }
LABEL_441:
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Cu, v192, (const AudioBufferList *)v357, &inInputBufferLists);
                            goto LABEL_442;
                          }
                          v354 = (AudioBufferList *)(&v345 - 8);
                          int v350 = v145;
                          BOOL v351 = v144;
                          int v352 = v141;
                          LODWORD(v353) = v142;
                          uint64_t v185 = 0;
                          v382 = (AudioBufferList *)*((void *)v3 + 524);
                          LODWORD(v383) = *((_DWORD *)v3 + 1051);
                          v377 = (AudioBufferList *)*((void *)v3 + 526);
                          LODWORD(v378) = *((_DWORD *)v3 + 1055);
                          v374 = (const AudioBufferList *)*((void *)v3 + 528);
                          int v375 = *((_DWORD *)v3 + 1059);
                          uint64_t v372 = *((void *)v3 + 530);
                          int v373 = *((_DWORD *)v3 + 1063);
                          uint64_t v370 = *((void *)v3 + 532);
                          int v371 = *((_DWORD *)v3 + 1067);
                          do
                          {
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 9u, 4u, v185, *((AudioUnitParameterValue *)&v382 + v185), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xAu, 4u, v185, *((AudioUnitParameterValue *)&v377 + v185), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xBu, 4u, v185, *((AudioUnitParameterValue *)&v374 + v185), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xCu, 4u, v185, *((AudioUnitParameterValue *)&v372 + v185), 0);
                            AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xDu, 4u, v185, *((AudioUnitParameterValue *)&v370 + v185), 0);
                            ++v185;
                          }
                          while (v185 != 3);
                          v177 = v354;
                          *(void *)&v376.mSampleTime = v354;
                          v376.mHostTime = (UInt64)v357;
                          *(void *)&v379.mNumberBuffers = v354;
                          *(void *)&v379.mBuffers[0].mNumberChannels = v357;
                          AudioUnitRenderActionFlags v366 = 512;
                          long long v186 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&inInputBufferLists.mRateScalar = v186;
                          long long v187 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v187;
                          AudioUnitProcessMultiple(*((AudioUnit *)v3 + 381), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v376, 2u, (AudioBufferList **)&v379);
                          uint64_t v188 = *((unsigned int *)v3 + 127);
                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                          {
                            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x69u, v188, v177, &inInputBufferLists);
                            uint64_t v188 = *((unsigned int *)v3 + 127);
                            int v141 = v352;
                            BOOL v142 = (int)v353;
                            int v145 = v350;
                            BOOL v144 = v351;
                            if (*((unsigned char *)v3 + 15961)) {
                              goto LABEL_428;
                            }
                          }
                          else
                          {
                            int v141 = v352;
                            BOOL v142 = (int)v353;
                            int v145 = v350;
                            BOOL v144 = v351;
                          }
                          if (!*((unsigned char *)v3 + 15962))
                          {
LABEL_429:
                            uint64_t v182 = *((void *)v3 + 583);
                            goto LABEL_430;
                          }
LABEL_428:
                          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Au, v188, (const AudioBufferList *)v357, &inInputBufferLists);
                          goto LABEL_429;
                        }
                        if ((v132 & 0x100000000) == 0 || (*((unsigned char *)v3 + 4684) & 1) == 0 || !*((void *)v3 + 379)) {
                          goto LABEL_407;
                        }
                        memcpy(*(void **)(*((void *)v3 + 435) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * *((unsigned int *)v3 + 127));
                        memcpy(*(void **)(*((void *)v3 + 435) + 32), *(const void **)(*((void *)v3 + 507) + 16), 8 * *((unsigned int *)v3 + 127));
                        v374 = (const AudioBufferList *)*((void *)v3 + 435);
                        v166 = (const AudioBufferList *)*((void *)v3 + 434);
                        v382 = (AudioBufferList *)*((void *)v3 + 430);
                        v383 = v166;
                        long long v167 = *(_OWORD *)&a2->mRateScalar;
                        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                        *(_OWORD *)&inInputBufferLists.mRateScalar = v167;
                        long long v168 = *(_OWORD *)&a2->mSMPTETime.mHours;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v168;
                        uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, &v374, 2u, &v382);
                        uint64_t v169 = *((unsigned int *)v3 + 127);
                        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                        {
                          uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v169, v382, &inInputBufferLists);
                          uint64_t v169 = *((unsigned int *)v3 + 127);
                          v170 = v383;
                          if (*((unsigned char *)v3 + 15961)) {
                            goto LABEL_392;
                          }
                        }
                        else
                        {
                          v170 = v383;
                        }
                        if (!*((unsigned char *)v3 + 15962))
                        {
LABEL_393:
                          if ((*((unsigned char *)v3 + 4668) & 2) == 0
                            || (*((unsigned char *)v3 + 4684) & 2) == 0
                            || !*((void *)v3 + 380))
                          {
                            goto LABEL_407;
                          }
                          memcpy(*(void **)(*((void *)v3 + 436) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          memcpy(*(void **)(*((void *)v3 + 431) + 16), *(const void **)(*((void *)v3 + 432) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
                          LODWORD(v372) = 1092616192;
                          LODWORD(v370) = 1084227584;
                          uint64_t v171 = *((void *)v3 + 434);
                          *(void *)&v379.mNumberBuffers = *((void *)v3 + 430);
                          *(void *)&v379.mBuffers[0].mNumberChannels = v171;
                          v172 = (AudioBufferList *)*((void *)v3 + 507);
                          v379.mBuffers[0].mData = (void *)*((void *)v3 + 436);
                          v380 = v172;
                          uint64_t v381 = *((void *)v3 + 431);
                          v173 = (const AudioBufferList *)*((void *)v3 + 432);
                          v377 = (AudioBufferList *)*((void *)v3 + 429);
                          v378 = v173;
                          if (*((unsigned char *)v3 + 4671) & 1) != 0 && (*((unsigned char *)v3 + 4687))
                          {
                            v174 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
                            if (v174) {
                              AudioUnitGetParameter(v174, 9u, 0, 0, (AudioUnitParameterValue *)&v372);
                            }
                          }
                          AudioUnitGetParameter(*((AudioUnit *)v3 + 379), 0xEu, 4u, 0, (AudioUnitParameterValue *)&v370);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xAu, 0, 0, *(AudioUnitParameterValue *)&v372, 0);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
                          AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0x1Au, 0, 0, *(AudioUnitParameterValue *)&v370, 0);
                          long long v175 = *(_OWORD *)&a2->mRateScalar;
                          *(_OWORD *)&v376.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                          *(_OWORD *)&v376.mRateScalar = v175;
                          long long v176 = *(_OWORD *)&a2->mSMPTETime.mHours;
                          *(_OWORD *)&v376.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                          *(_OWORD *)&v376.mSMPTETime.mHours = v176;
                          uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 380), &v366, &v376, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v379, 2u, &v377);
                          uint64_t v161 = *((unsigned int *)v3 + 127);
                          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                          {
                            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v161, v377, &v376);
                            uint64_t v161 = *((unsigned int *)v3 + 127);
                            v162 = v378;
                            if (*((unsigned char *)v3 + 15961)) {
                              goto LABEL_406;
                            }
                          }
                          else
                          {
                            v162 = v378;
                          }
                          if (!*((unsigned char *)v3 + 15962)) {
                            goto LABEL_407;
                          }
LABEL_406:
                          p_AudioTimeStamp inInputBufferLists = &v376;
                          uint64_t v164 = (uint64_t)v3;
                          unsigned int v165 = 27;
                          goto LABEL_379;
                        }
LABEL_392:
                        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v169, v170, &inInputBufferLists);
                        goto LABEL_393;
                      }
                    }
                    else
                    {
                      v148 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
                    }
                    float v149 = 2.0;
                    goto LABEL_358;
                  }
                  float v134 = *((float *)v3 + 1057);
                  if (v134 == 0.0)
                  {
                    UInt64 v135 = *(void *)(*((void *)v3 + 436) + 16) + 4 * *((unsigned int *)v3 + 127);
                    inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 436) + 16);
                    inInputBufferLists.mHostTime = v135;
                    if (*((void *)v3 + 2114))
                    {
                      VPTimeFreqConverter::Analyze(*((VPTimeFreqConverter **)v3 + 2114), *(const float **)(*((void *)v3 + 425) + 16), (DSPSplitComplex *)&inInputBufferLists);
                      float v134 = *((float *)v3 + 1057);
                      uint64_t Parameter = *((void *)v3 + 391);
                    }
                  }
                  AudioUnitSetParameter((AudioUnit)Parameter, 6u, 0, 0, v134, 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1061), 0);
                  AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1065), 0);
                  memcpy(*(void **)(*((void *)v3 + 434) + 16), *(const void **)(*((void *)v3 + 505) + 32), *((unsigned int *)v3 + 1073));
                  UInt64 v136 = *((void *)v3 + 434);
                  v376.mSampleTime = *((Float64 *)v3 + 506);
                  v376.mHostTime = v136;
                  v376.mRateScalar = *((Float64 *)v3 + 512);
                  memset(&v376.mWordClockTime, 0, 24);
                  *(void *)&v379.mNumberBuffers = *((void *)v3 + 432);
                  *(void *)&v379.mBuffers[0].mNumberChannels = 0;
                  v379.mBuffers[0].mData = (void *)*((void *)v3 + 501);
                  long long v137 = *(_OWORD *)&a2->mRateScalar;
                  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
                  *(_OWORD *)&inInputBufferLists.mRateScalar = v137;
                  long long v138 = *(_OWORD *)&a2->mSMPTETime.mHours;
                  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
                  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v138;
                  AudioUnitRenderActionFlags v366 = 512;
                  uint64_t Parameter = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 391), &v366, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v376, 3u, (AudioBufferList **)&v379);
                  uint64_t v139 = *((unsigned int *)v3 + 127);
                  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
                  {
                    uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v139, *((const AudioBufferList **)v3 + 432), &inInputBufferLists);
                    uint64_t v139 = *((unsigned int *)v3 + 127);
                    v140 = (const AudioBufferList *)*((void *)v3 + 501);
                    if (*((unsigned char *)v3 + 15961)) {
                      goto LABEL_324;
                    }
                  }
                  else
                  {
                    v140 = (const AudioBufferList *)*((void *)v3 + 501);
                  }
                  if (!*((unsigned char *)v3 + 15962))
                  {
LABEL_325:
                    uint64_t v132 = *((void *)v3 + 583);
                    goto LABEL_326;
                  }
LABEL_324:
                  uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v139, v140, &inInputBufferLists);
                  goto LABEL_325;
                }
LABEL_741:
                std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
              }
            }
            else
            {
              v101 = (const AudioBufferList *)*((void *)v3 + 422);
            }
            if (!*((unsigned char *)v3 + 15962)) {
              goto LABEL_239;
            }
            goto LABEL_238;
          }
LABEL_177:
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x11u, v82, v83, &buf);
          uint64_t v82 = *((unsigned int *)v3 + 127);
          goto LABEL_178;
        }
        uint64_t v76 = *((void *)v3 + 2115);
        if ((unint64_t)(*((void *)v3 + 2116) - v76) <= 0x20) {
          goto LABEL_741;
        }
        ECApplicator::apply(*(AudioUnitParameterID **)(v76 + 32), &buf, v53, (BOOL *)&v365, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
        uint64_t v77 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x21u, v77, *((const AudioBufferList **)v3 + 136), &buf);
          uint64_t v77 = *((unsigned int *)v3 + 127);
          float v78 = (const AudioBufferList *)*((void *)v3 + 423);
          if (*((unsigned char *)v3 + 15961)) {
            goto LABEL_160;
          }
        }
        else
        {
          float v78 = (const AudioBufferList *)*((void *)v3 + 423);
        }
        if (!*((unsigned char *)v3 + 15962))
        {
LABEL_161:
          uint64_t v79 = *((void *)v3 + 508);
          inInputBufferLists.mSampleTime = *(Float64 *)(v79 + 16);
          inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v77;
          float v80 = (VPTimeFreqConverter *)*((void *)v3 + 2147);
          if (v80)
          {
            VPTimeFreqConverter::Analyze(v80, *(const float **)(*((void *)v3 + 423) + 16), (DSPSplitComplex *)&inInputBufferLists);
            uint64_t v77 = *((unsigned int *)v3 + 127);
            uint64_t v79 = *((void *)v3 + 508);
          }
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x16u, v77, (const AudioBufferList *)v79, &buf);
          }
          uint64_t v60 = *((void *)v3 + 583);
          goto LABEL_167;
        }
LABEL_160:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x10u, v77, v78, &buf);
        uint64_t v77 = *((unsigned int *)v3 + 127);
        goto LABEL_161;
      }
      unsigned int v52 = *((_DWORD *)v3 + 3114);
      if (v51 != 3)
      {
        if (v52 == 2)
        {
          unsigned int v53 = 0;
          *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v50 + 40);
          *((_OWORD *)v3 + 1064) = *(_OWORD *)(v50 + 56);
          unsigned int v54 = 1;
          unsigned int v55 = 3;
          unsigned int v56 = 2;
          goto LABEL_121;
        }
        unsigned int v52 = *((_DWORD *)v3 + 3114);
        if (v52 <= 0xC && ((0x1028u >> v52) & 1) != 0)
        {
          unsigned int v53 = 0;
          *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v50 + 24);
          *((_OWORD *)v3 + 1064) = *(_OWORD *)(v50 + 40);
          unsigned int v54 = 3;
          unsigned int v55 = 2;
          unsigned int v56 = 1;
          goto LABEL_121;
        }
      }
      if ((v52 | 4) == 0xD)
      {
        std::string v57 = (_OWORD *)((char *)v3 + 17000);
        uint64_t v58 = (_OWORD *)((char *)v3 + 17024);
        if (*((_DWORD *)v3 + 596) != 1781740087)
        {
          unsigned int v53 = 0;
          *std::string v57 = *(_OWORD *)(v50 + 56);
          _OWORD *v58 = *(_OWORD *)(v50 + 40);
          unsigned int v54 = 1;
          unsigned int v55 = 2;
          unsigned int v56 = 3;
          goto LABEL_121;
        }
        *std::string v57 = *(_OWORD *)(v50 + 40);
        _OWORD *v58 = *(_OWORD *)(v50 + 56);
        unsigned int v53 = 1;
        unsigned int v55 = 3;
        unsigned int v56 = 2;
      }
      else
      {
        unsigned int v56 = 0;
        unsigned int v55 = 0;
        unsigned int v53 = 1;
      }
      unsigned int v54 = 2;
LABEL_121:
      uint64_t v59 = v50 + 8;
      *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v59 + 16 * v53);
      *((_OWORD *)v3 + 1061) = *(_OWORD *)(v59 + 16 * v54);
      goto LABEL_122;
    }
  }
  unsigned int v12 = 0;
  while (((*((_DWORD *)v3 + 116) >> v12) & 1) == 0)
  {
    if (++v12 == 32)
    {
      unsigned int v12 = 33;
      break;
    }
  }
  unint64_t v13 = (unsigned int *)*((void *)v3 + 135);
  if (v12 >= *v13)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v16 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
    {
      uint64_t v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v18 = **((_DWORD **)v3 + 135);
        LODWORD(buf.mSampleTime) = 136315906;
        *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v6.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 52;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v12;
        LOWORD(buf.mWordClockTime) = 1024;
        *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v18;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
      }
    }
    unsigned __int8 v19 = (int *)*((void *)v3 + 1578);
    if (v19 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v19, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v6/vpProcessUplink_v6.cpp", 52, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v12, **((_DWORD **)v3 + 135));
    }
    uint64_t v14 = *(void **)(*((void *)v3 + 136) + 16);
    uint64_t v15 = (const void **)*((void *)v3 + 135);
  }
  else
  {
    uint64_t v14 = *(void **)(*((void *)v3 + 136) + 16);
    uint64_t v15 = (const void **)&v13[4 * v12];
  }
  memcpy(v14, v15[2], *((unsigned int *)v15 + 3));
  if (*((unsigned char *)v3 + 2085))
  {
    if ((*((unsigned char *)v3 + 4670) & 0x40) != 0 && (*((unsigned char *)v3 + 4686) & 0x40) != 0)
    {
      uint64_t v20 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
      if (v20)
      {
        UInt64 v21 = *((void *)v3 + 500);
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
        inInputBufferLists.mHostTime = v21;
        UInt64 v22 = *((void *)v3 + 502);
        v376.mSampleTime = inInputBufferLists.mSampleTime;
        v376.mHostTime = v22;
        long long v23 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v23;
        long long v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v24;
        v379.mNumberBuffers = 512;
        AudioUnitProcessMultiple(v20, &v379.mNumberBuffers, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 2u, (AudioBufferList **)&v376);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
        }
        if ((*((unsigned char *)v3 + 4672) & 4) != 0 && (*((unsigned char *)v3 + 4688) & 4) != 0 && *((void *)v3 + 413))
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v367);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v367, 0);
        }
      }
    }
  }
LABEL_660:
  v379.mNumberBuffers = 0;
  unsigned int v316 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  unsigned int v318 = v316;
  if (!*((unsigned char *)v3 + 2080))
  {
    if ((v316 & 1) == 0) {
      goto LABEL_681;
    }
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v317);
LABEL_669:
    uint64_t v320 = *((void *)v3 + 583);
    if ((v320 & 0x4000000000000000) != 0
      && (*((unsigned char *)v3 + 4687) & 0x40) != 0
      && (v321 = (OpaqueAudioComponentInstance *)*((void *)v3 + 409)) != 0)
    {
      AudioUnitParameterID v322 = 1936748646;
    }
    else
    {
      if ((v320 & 0x2000000000000000) == 0
        || (*((unsigned char *)v3 + 4687) & 0x20) == 0
        || (v321 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408)) == 0)
      {
        *(AudioUnitParameterValue *)&v379.mNumberBuffers = v367;
        goto LABEL_679;
      }
      AudioUnitParameterID v322 = 2;
    }
    AudioUnitGetParameter(v321, v322, 0, 0, (AudioUnitParameterValue *)&v379.mNumberBuffers);
    goto LABEL_679;
  }
  if (*((void *)v3 + 2062)) {
    char v319 = 1;
  }
  else {
    char v319 = v316;
  }
  if (v319)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v317);
    if (v318) {
      goto LABEL_669;
    }
  }
LABEL_679:
  if (*((unsigned char *)v3 + 2080))
  {
    bzero(*(void **)(*((void *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    v379.mNumberBuffers = 0;
    goto LABEL_682;
  }
LABEL_681:
  *((_DWORD *)v3 + 4126) = 0;
LABEL_682:
  if ((*((unsigned char *)v3 + 8897) & 0x80) != 0 && (*((unsigned char *)v3 + 8905) & 0x80) != 0)
  {
    v323 = (OpaqueAudioComponentInstance *)*((void *)v3 + 453);
    unsigned int v324 = v323 ? v318 : 0;
    if (v324 == 1) {
      AudioUnitSetParameter(v323, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v379.mNumberBuffers, 0);
    }
  }
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  if ((*((unsigned char *)v3 + 4671) & 0x10) != 0 && (*((unsigned char *)v3 + 4687) & 0x10) != 0)
  {
    v325 = (OpaqueAudioComponentInstance *)*((void *)v3 + 407);
    if (v325)
    {
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
      v376.mSampleTime = inInputBufferLists.mSampleTime;
      LODWORD(ioOutputBufferLists.realp) = 512;
      long long v326 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v326;
      long long v327 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v327;
      AudioUnitProcessMultiple(v325, (AudioUnitRenderActionFlags *)&ioOutputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v376);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
    }
  }
  if (*((unsigned char *)v3 + 2085))
  {
    if ((*((unsigned char *)v3 + 4672) & 0x80) != 0 && (*((unsigned char *)v3 + 4688) & 0x80) != 0)
    {
      v328 = (OpaqueAudioComponentInstance *)*((void *)v3 + 418);
      if (v328)
      {
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
        v376.mSampleTime = inInputBufferLists.mSampleTime;
        LODWORD(ioOutputBufferLists.realp) = 512;
        long long v329 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v329;
        long long v330 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v330;
        AudioUnitProcessMultiple(v328, (AudioUnitRenderActionFlags *)&ioOutputBufferLists, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v376);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
        }
      }
    }
  }
  uint64_t v331 = *((void *)v3 + 584);
  if (v331 & 1) != 0 && (*((unsigned char *)v3 + 4688))
  {
    v332 = (OpaqueAudioComponentInstance *)*((void *)v3 + 411);
    if (v332)
    {
      long long v333 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v333;
      long long v334 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v334;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v332, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
      uint64_t v331 = *((void *)v3 + 584);
    }
  }
  if ((v331 & 2) != 0 && (*((unsigned char *)v3 + 4688) & 2) != 0)
  {
    v335 = (OpaqueAudioComponentInstance *)*((void *)v3 + 412);
    if (v335)
    {
      long long v336 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v336;
      long long v337 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v337;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v335, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      uint64_t v331 = *((void *)v3 + 584);
    }
  }
  if ((v331 & 4) != 0
    && (*((unsigned char *)v3 + 4688) & 4) != 0
    && (v338 = (OpaqueAudioComponentInstance *)*((void *)v3 + 413)) != 0)
  {
    long long v339 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v339;
    long long v340 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v340;
    LODWORD(inInputBufferLists.mSampleTime) = 512;
    AudioUnitProcess(v338, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
    if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0 && *((void *)v3 + 408))
    {
      LODWORD(v376.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 1u, 0, 0, (AudioUnitParameterValue *)&v376);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v376.mSampleTime, 0);
    }
    LODWORD(v376.mSampleTime) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v376);
    int mSampleTime_low = LODWORD(v376.mSampleTime);
    if (*((float *)v3 + 572) != *(float *)&v376.mSampleTime)
    {
      if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
      {
        v342 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
        if (v342)
        {
          AudioUnitSetParameter(v342, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v376.mSampleTime, 0);
          int mSampleTime_low = LODWORD(v376.mSampleTime);
        }
      }
      *((_DWORD *)v3 + 572) = mSampleTime_low;
    }
  }
  else if ((*((void *)v3 + 583) & 0x8000000000000000) != 0 {
         && ((*((void *)v3 + 585) & 0x8000000000000000) != 0 || *((unsigned char *)v3 + 472)))
  }
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1093) / 20.0);
    vDSP_vsmul(*(const float **)(*((void *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((void *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
    }
  }
  VoiceProcessorV6::ProcessLevelDrivenSuppressor((uint64_t)v3, a2);
  return 0;
}

uint64_t VoiceProcessorV6::ApplyGMCoexNoiseMitigation(VoiceProcessorV6 *this, const AudioBufferList *a2, AudioBufferList *a3, const AudioTimeStamp *a4, UInt32 a5)
{
  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)this + 16660);
  uint64_t v11 = (OpaqueAudioComponentInstance *)*((void *)this + 353);
  float v12 = 0.0;
  if (v10) {
    float v12 = 1.0;
  }
  AudioUnitSetParameter(v11, 0x676D636Fu, 0, 0, v12, 0);
  AudioUnitRenderActionFlags ioActionFlags = 512;
  DSPSplitComplex ioOutputBufferLists = a3;
  inInputBufferLists[0] = (AudioBufferList *)a2;
  return AudioUnitProcessMultiple(*((AudioUnit *)this + 353), &ioActionFlags, a4, a5, 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
}

uint64_t VoiceProcessorV6::ProcessLevelDrivenSuppressor(uint64_t this, AudioTimeStamp *inTimeStamp)
{
  inInputBufferLists[1] = *(AudioBufferList **)MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(this + 4672) & 8) != 0)
  {
    uint64_t v2 = this;
    if ((*(unsigned char *)(this + 4688) & 8) != 0)
    {
      this = *(void *)(this + 3312);
      if (this)
      {
        size_t v4 = *(_DWORD **)(v2 + 1088);
        if (*v4)
        {
          unint64_t v5 = 0;
          uint64_t v6 = 4;
          do
          {
            uint64_t v7 = *(VPTimeFreqConverter **)(v2 + 17456);
            unint64_t v8 = *(const float **)&v4[v6];
            uint64_t v9 = (float *)(*(void *)(*(void *)(v2 + 17464) + v6 * 4) + 4 * *(unsigned int *)(v2 + 508));
            v16.realp = *(float **)(*(void *)(v2 + 17464) + v6 * 4);
            v16.imagp = v9;
            if (v7)
            {
              VPTimeFreqConverter::Analyze(v7, v8, &v16);
              size_t v4 = *(_DWORD **)(v2 + 1088);
            }
            ++v5;
            v6 += 4;
          }
          while (v5 < *v4);
          this = *(void *)(v2 + 3312);
        }
        DSPSplitComplex ioOutputBufferLists = *(AudioBufferList **)(v2 + 17464);
        inInputBufferLists[0] = ioOutputBufferLists;
        AudioUnitRenderActionFlags ioActionFlags = 512;
        this = AudioUnitProcessMultiple((AudioUnit)this, &ioActionFlags, inTimeStamp, *(_DWORD *)(v2 + 508), 1u, (const AudioBufferList **)inInputBufferLists, 1u, &ioOutputBufferLists);
        unsigned __int8 v10 = *(const AudioBufferList **)(v2 + 1088);
        if (v10->mNumberBuffers)
        {
          unint64_t v11 = 0;
          uint64_t v12 = 16;
          do
          {
            this = *(void *)(v2 + 17456);
            unint64_t v13 = *(float **)((char *)&v10->mNumberBuffers + v12);
            uint64_t v14 = (float *)(*(void *)(*(void *)(v2 + 17464) + v12) + 4 * *(unsigned int *)(v2 + 508));
            v16.realp = *(float **)(*(void *)(v2 + 17464) + v12);
            v16.imagp = v14;
            if (this)
            {
              this = VPTimeFreqConverter::Synthesize((VPTimeFreqConverter *)this, &v16, v13);
              unsigned __int8 v10 = *(const AudioBufferList **)(v2 + 1088);
            }
            ++v11;
            v12 += 16;
          }
          while (v11 < v10->mNumberBuffers);
        }
        if (*(unsigned char *)(v2 + 15961) || *(unsigned char *)(v2 + 15962)) {
          return VoiceProcessorV2::SaveFilesWriteSignal(v2, 0x2Eu, *(unsigned int *)(v2 + 508), v10, inTimeStamp);
        }
      }
    }
  }
  return this;
}

float *CNoiseSuppressorV4::curve_fn(float *result, int a2, int a3, uint64_t a4)
{
  if (a2 >= 2)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
    uint64_t v6 = (a2 - 1);
    float v7 = (float)a3 / (float)(result[2 * (int)v6] - *result);
    float v8 = *result * v7;
    do
    {
      uint64_t v9 = &result[2 * v4++];
      unsigned __int8 v10 = &result[2 * v4];
      float v11 = v9[1];
      float v13 = *v10;
      float v12 = v10[1];
      float v14 = v7 * (float)((float)(*v9 + *v10) * 0.5);
      float v15 = (float)(v11 + v12) * 0.5;
      if (v8 < v14)
      {
        float v16 = v7 * *v9;
        uint64_t v5 = (int)v5;
        do
        {
          *(float *)(a4 + 4 * v5++) = v11
                                    + (float)((float)((float)((float)(v8 - v16) / (float)(v14 - v16))
                                                    * (float)((float)(v8 - v16) / (float)(v14 - v16)))
                                            * (float)(v15 - v11));
          float v8 = v8 + 1.0;
        }
        while (v8 < v14);
      }
      float v17 = v7 * v13;
      if (v8 < v17 && (int)v5 < a3)
      {
        float v19 = v14 - v17;
        float v20 = v12 - v15;
        uint64_t v5 = (int)v5;
        do
        {
          *(float *)(a4 + 4 * v5++) = v15
                                    + (float)((float)(1.0
                                                    - (float)((float)((float)(v8 - v17) / v19)
                                                            * (float)((float)(v8 - v17) / v19)))
                                            * v20);
          float v8 = v8 + 1.0;
        }
        while (v8 < v17 && v5 < a3);
      }
    }
    while (v4 != v6);
  }
  return result;
}

float CNoiseSuppressorV4::preprocess_analysis_freq(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  vDSP_Length v5 = *(int *)(a1 + 4);
  uint64_t v6 = *(float **)(a1 + 152);
  MEMORY[0x1F4188790](a1);
  float v8 = (char *)&v14 - v7;
  uint64_t v9 = (float *)((char *)&v14 + 4 * v5 - v7);
  __A.realp = (float *)((char *)&v14 - v7);
  __A.imagp = v9;
  memcpy((char *)&v14 - v7, v10, 4 * v5);
  memcpy(v9, a3, 4 * v5);
  __Z.realp = v9 + 1;
  __Z.imagp = (float *)(v8 + 8);
  vDSP_ztoc(&__Z, 1, (DSPComplex *)(*(void *)(a1 + 136) + 8), 2, v5 - 2);
  float v11 = *(_DWORD **)(a1 + 136);
  *float v11 = *(_DWORD *)v8;
  v11[1] = *((_DWORD *)v8 + 1);
  uint64_t v12 = 8 * v5 - 4;
  v11[2 * (int)v5 - 2] = *(_DWORD *)&v8[v12];
  *(float *)((char *)v11 + v12) = *v9;
  vDSP_zvmags(&__A, 1, v6, 1, v5);
  float *v6 = *__A.realp * *__A.realp;
  return CFilterBank::filterbank_compute_bank32(*(void *)(a1 + 16), v6, &v6[v5]);
}

float CNoiseSuppressorV4::preprocess_analysis_sec_freq(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  vDSP_Length v5 = *(int *)(a1 + 4);
  uint64_t v6 = *(float **)(a1 + 160);
  MEMORY[0x1F4188790](a1);
  float v8 = (char *)&v14 - v7;
  uint64_t v9 = (float *)((char *)&v14 + 4 * v5 - v7);
  __A.realp = (float *)((char *)&v14 - v7);
  __A.imagp = v9;
  memcpy((char *)&v14 - v7, v10, 4 * v5);
  memcpy(v9, a3, 4 * v5);
  __Z.realp = v9 + 1;
  __Z.imagp = (float *)(v8 + 8);
  vDSP_ztoc(&__Z, 1, (DSPComplex *)(*(void *)(a1 + 144) + 8), 2, v5 - 2);
  float v11 = *(_DWORD **)(a1 + 144);
  *float v11 = *(_DWORD *)v8;
  v11[1] = *((_DWORD *)v8 + 1);
  uint64_t v12 = 8 * v5 - 4;
  v11[2 * (int)v5 - 2] = *(_DWORD *)&v8[v12];
  *(float *)((char *)v11 + v12) = *v9;
  vDSP_zvmags(&__A, 1, v6, 1, v5);
  float result = *__A.realp * *__A.realp;
  float *v6 = result;
  return result;
}

float CNoiseSuppressorV4::speex_synthesis(int *a1, float *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  vDSP_Length v4 = a1[1];
  int v5 = 2 * v4;
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (float *)((char *)&__Z - v6);
  float v8 = (float *)((char *)&__Z + 4 * v4 - v6);
  __Z.realp = v8 + 1;
  __Z.imagp = (float *)((char *)&__Z.imagp - v6);
  vDSP_ctoz((const DSPComplex *)(*(void *)(v9 + 136) + 8), 2, &__Z, 1, v4 - 2);
  unsigned __int8 v10 = (void *)*((void *)a1 + 17);
  *(void *)uint64_t v7 = *v10;
  v7[2 * (int)v4 - 1] = *(float *)&v10[v4 - 1];
  *float v8 = *((float *)&v10[(int)v4 - 1] + 1);
  __Z.realp = v7;
  __Z.imagp = v8;
  float __B = 0.000030518;
  vDSP_vsmul(v7, 1, &__B, v7, 1, (2 * v4));
  uint64_t v12 = (MultiRadixRealFFT *)*((void *)a1 + 72);
  if (v12)
  {
    MultiRadixRealFFT::RealInPlaceTransform(v12, &__Z, -1, v11);
    goto LABEL_3;
  }
  if (SuppressorClassLogScope(void)::once != -1) {
    dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_8058);
  }
  if (SuppressorClassLogScope(void)::scope)
  {
    UInt64 v21 = *(NSObject **)SuppressorClassLogScope(void)::scope;
    if (!*(void *)SuppressorClassLogScope(void)::scope) {
      goto LABEL_3;
    }
  }
  else
  {
    UInt64 v21 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    float __B = 4.8151e-34;
    long long v24 = "suppressor_classV4.cpp";
    __int16 v25 = 1024;
    int v26 = 538;
    _os_log_impl(&dword_1BB0CE000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d MultiRadixRealFFT_RealInPlaceTransform() returned an error.", (uint8_t *)&__B, 0x12u);
  }
LABEL_3:
  vDSP_ztoc(&__Z, 1, *((DSPComplex **)a1 + 15), 2, v4);
  vDSP_vmul(*((const float **)a1 + 15), 1, *((const float **)a1 + 23), 1, *((float **)a1 + 15), 1, v5);
  uint64_t v13 = (v5 - *a1);
  uint64_t v14 = (*a1 - v13);
  vDSP_vadd(*((const float **)a1 + 69), 1, *((const float **)a1 + 15), 1, a2, 1, (int)v13);
  if ((int)v14 >= 1)
  {
    uint64_t v16 = *((void *)a1 + 15);
    int v17 = v13;
    do
    {
      float result = *(float *)(v16 + 4 * v17);
      a2[v17++] = result;
      --v14;
    }
    while (v14);
  }
  if ((int)v13 >= 1)
  {
    int v18 = (float *)*((void *)a1 + 69);
    float v19 = (float *)(*((void *)a1 + 15) + 4 * *a1);
    do
    {
      float v20 = *v19++;
      float result = v20;
      *v18++ = v20;
      --v13;
    }
    while (v13);
  }
  return result;
}

void CNoiseSuppressorV4::update_noise_prob(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  vDSP_Length v2 = *(int *)(a1 + 4);
  MEMORY[0x1F4188790](a1);
  vDSP_Length v4 = (float *)((char *)&v12 - ((v3 + 15) & 0x7FFFFFFF0));
  uint64_t v6 = (const float *)(v5 + 392);
  float v7 = 1.0 - *(float *)(v5 + 392);
  float v12 = v7 * 0.667;
  float __B = v7 * 0.333;
  *vDSP_Length v4 = 0.0;
  vDSP_vsmul(*(const float **)(v5 + 152), 1, &__B, v4 + 1, 1, v2 - 1);
  vDSP_vsma((const float *)(*(void *)(a1 + 152) + 4), 1, &__B, v4, 1, v4, 1, v2 - 1);
  vDSP_vsma(*(const float **)(a1 + 152), 1, &v12, v4, 1, v4, 1, v2);
  vDSP_vsma(*(const float **)(a1 + 272), 1, v6, v4, 1, *(float **)(a1 + 272), 1, v2);
  vDSP_vmul(*(const float **)(a1 + 160), 1, *(const float **)(a1 + 96), 1, *(float **)(a1 + 160), 1, v2);
  if (*(_DWORD *)(a1 + 428) == 2)
  {
    *vDSP_Length v4 = 0.0;
    vDSP_vsmul(*(const float **)(a1 + 160), 1, &__B, v4 + 1, 1, v2 - 1);
    vDSP_vsma((const float *)(*(void *)(a1 + 160) + 4), 1, &__B, v4, 1, v4, 1, v2 - 1);
    vDSP_vsma(*(const float **)(a1 + 160), 1, &v12, v4, 1, v4, 1, v2);
    vDSP_vsma(*(const float **)(a1 + 280), 1, v6, v4, 1, *(float **)(a1 + 280), 1, v2);
  }
  int v8 = *(_DWORD *)(a1 + 560);
  if (v8 == 1)
  {
    vDSP_vclr(*(float **)(a1 + 288), 1, v2);
    vDSP_vclr(*(float **)(a1 + 296), 1, v2);
    int v8 = *(_DWORD *)(a1 + 560);
  }
  float v9 = (float)*(int *)(a1 + 8);
  float v10 = (float)(v9 * 0.2) / (float)(int)v2;
  if (v10 <= (float)v8 && (float)((float)(v9 * 0.5) / (float)(int)v2) <= (float)v8) {
    float v10 = (float)(v9 + v9) / (float)(int)v2;
  }
  if (*(_DWORD *)(a1 + 568) <= (int)v10)
  {
    vDSP_vmin(*(const float **)(a1 + 288), 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 288), 1, v2);
    vDSP_vmin(*(const float **)(a1 + 296), 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 296), 1, v2);
  }
  else
  {
    *(_DWORD *)(a1 + 568) = 0;
    vDSP_vmin(*(const float **)(a1 + 296), 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 288), 1, v2);
    memcpy(*(void **)(a1 + 296), *(const void **)(a1 + 272), 4 * v2);
  }
  vDSP_vmul(*(const float **)(a1 + 288), 1, *(const float **)(a1 + 80), 1, v4, 1, v2);
  vDSP_vsub(v4, 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 304), 1, v2);
  if (*(_DWORD *)(a1 + 428) == 2)
  {
    vDSP_vmul(*(const float **)(a1 + 280), 1, *(const float **)(a1 + 88), 1, v4, 1, v2);
    vDSP_vsub(v4, 1, *(const float **)(a1 + 272), 1, *(float **)(a1 + 312), 1, v2);
    vDSP_vmul(*(const float **)(a1 + 272), 1, *(const float **)(a1 + 88), 1, v4, 1, v2);
    vDSP_vsub(v4, 1, *(const float **)(a1 + 280), 1, *(float **)(a1 + 320), 1, v2);
  }
}

void *CNoiseSuppressorV4::speex_preprocess_run_freq(uint64_t a1, const float **a2, const float **a3, const float *a4)
{
  v438 = (float *)a4;
  uint64_t v470 = *MEMORY[0x1E4F143B8];
  vDSP_Length v7 = *(unsigned int *)(a1 + 4);
  v445 = *(char **)(a1 + 152);
  float v461 = 0.05;
  float v460 = 1.05;
  float v458 = 0.000001;
  float v459 = 2.0;
  float v457 = 1.0;
  float v456 = 0.0;
  float v455 = 0.0;
  float v454 = 0.0;
  int v8 = *a2;
  uint64_t v448 = a1;
  float v9 = *(float **)(a1 + 656);
  *(_DWORD *)float __B = 1191182336;
  vDSP_Length v442 = v7;
  vDSP_vsmul(v8, 1, (const float *)__B, v9, 1, v7);
  float v10 = a2[1];
  float v11 = *(float **)(v448 + 664);
  *(_DWORD *)float __B = 1191182336;
  vDSP_vsmul(v10, 1, (const float *)__B, v11, 1, v442);
  uint64_t v13 = (int *)v448;
  if (a3 && *(_DWORD *)(v448 + 428) == 2)
  {
    uint64_t v14 = *a3;
    float v15 = *(float **)(v448 + 672);
    *(_DWORD *)float __B = 1191182336;
    vDSP_vsmul(v14, 1, (const float *)__B, v15, 1, v442);
    uint64_t v16 = a3[1];
    int v17 = *(float **)(v448 + 680);
    *(_DWORD *)float __B = 1191182336;
    vDSP_vsmul(v16, 1, (const float *)__B, v17, 1, v442);
    uint64_t v13 = (int *)v448;
  }
  v437 = &v424;
  int v18 = v442;
  int v19 = v13[140];
  float v20 = (float)(int)v442;
  if (v19 + 1 < (int)(float)((float)((float)v13[2] * 30.0) / (float)(int)v442)) {
    int v21 = v19 + 1;
  }
  else {
    int v21 = (int)(float)((float)((float)v13[2] * 30.0) / (float)(int)v442);
  }
  v13[140] = v21;
  ++v13[142];
  vDSP_Length v22 = v13[3];
  vDSP_Length v447 = v18;
  vDSP_Length v443 = v22;
  uint64_t v439 = (v22 + v18);
  MEMORY[0x1F4188790](v12);
  v444 = (float *)((char *)&v424 - ((v23 + 15) & 0x7FFFFFFF0));
  MEMORY[0x1F4188790](v24);
  v446 = (float *)((char *)&v424 - v25);
  MEMORY[0x1F4188790](v26);
  v436 = (float *)((char *)&v424 - ((v27 + 15) & 0x7FFFFFFF0));
  uint64_t v435 = v27;
  MEMORY[0x1F4188790](v28);
  v434 = (float *)((char *)&v424 - v29);
  CNoiseSuppressorV4::preprocess_analysis_freq(v30, *(void *)(v30 + 656), *(const void **)(v30 + 664));
  uint64_t v31 = v448;
  if (*(_DWORD *)(v448 + 428) == 2)
  {
    CNoiseSuppressorV4::preprocess_analysis_sec_freq(v448, *(void *)(v448 + 672), *(const void **)(v448 + 680));
    uint64_t v31 = v448;
  }
  CNoiseSuppressorV4::update_noise_prob(v31);
  (*(void (**)(void, void, void, vDSP_Length))(**(void **)(v448 + 696) + 24))(*(void *)(v448 + 696), *(void *)(v448 + 152), *(void *)(v448 + 200), v447);
  uint64_t v32 = v448;
  vDSP_Length v33 = v447;
  if (!v438 || !*(void *)(v448 + 688)) {
    goto LABEL_45;
  }
  v428 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v448 + 696) + 32))(*(void *)(v448 + 696));
  uint64_t v32 = v448;
  uint64_t v34 = *(void *)(v448 + 688);
  vDSP_Length v33 = v447;
  if (!*(unsigned char *)v34) {
    goto LABEL_37;
  }
  unsigned int v35 = *(const float **)(v448 + 152);
  if (v35)
  {
    long long v36 = *(const float **)(v448 + 200);
    if (v36)
    {
      if (v428[1] < v442)
      {
        if (SuppressorClassLogScope(void)::once != -1) {
          dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_8058);
        }
        if (SuppressorClassLogScope(void)::scope)
        {
          long long v37 = *(NSObject **)SuppressorClassLogScope(void)::scope;
          if (!*(void *)SuppressorClassLogScope(void)::scope) {
            goto LABEL_37;
          }
        }
        else
        {
          long long v37 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)float __B = 136315394;
          *(void *)&__B[4] = "LPCore.cpp";
          *(_WORD *)&__B[12] = 1024;
          *(_DWORD *)&__B[14] = 1310;
          unint64_t v44 = "%25s:%-5d Update index size is too small.";
          goto LABEL_36;
        }
        goto LABEL_37;
      }
      int v38 = *(_DWORD *)(v34 + 212);
      if (!v38) {
        goto LABEL_45;
      }
      uint64_t v39 = *(void *)(v34 + 216) + 1;
      *(void *)(v34 + 216) = v39;
      if (*(float *)(v34 + 16) * 0.5 < (double)(unint64_t)v39) {
        *(unsigned char *)(v34 + 5) = 1;
      }
      int v40 = v38 - 1;
      char v41 = 0;
      char v42 = 1;
      uint64_t v433 = v34;
      v427 = v35;
      switch(v40)
      {
        case 0:
        case 3:
          goto LABEL_149;
        case 1:
          *(_WORD *)(v34 + 1) = 256;
          *(unsigned char *)(v34 + 3) = 0;
          long long v43 = (float *)v442;
          goto LABEL_161;
        case 2:
          char v42 = 0;
          char v41 = 1;
LABEL_149:
          v179 = v36;
          *(unsigned char *)(v34 + 1) = v41;
          *(unsigned char *)(v34 + 3) = 1;
          *(unsigned char *)(v34 + 2) = v42;
          *(float *)float __B = 1.0 - *(float *)(v34 + 156);
          vDSP_vsmul(*(const float **)(v34 + 368), 1, (const float *)(v34 + 156), *(float **)(v34 + 440), 1, v442);
          vDSP_vsmul(v179, 1, (const float *)__B, *(float **)(v433 + 464), 1, v442);
          vDSP_vadd(*(const float **)(v433 + 464), 1, *(const float **)(v34 + 440), 1, *(float **)(v34 + 368), 1, v442);
          uint64_t v34 = v433;
          long long v43 = (float *)v442;
          long long v36 = v179;
          __n128 v180 = v427;
          if (*(float *)(v433 + 124) > *(float *)(v433 + 96)
            && v428[1] == v442
            && *(float *)(v433 + 112) > *(float *)(v433 + 56)
            && v447)
          {
            int v181 = 0;
            uint64_t v182 = *v428;
            do
            {
              if (((*(void *)(v182 + (((unint64_t)v181 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v181) & 1) != 0
                && *(float *)(*(void *)(v34 + 416) + 4 * (void)v181) <= *(float *)(v34 + 48))
              {
                float v183 = v179[(void)v181];
              }
              else
              {
                float v183 = *(float *)(*(void *)(v34 + 368) + 4 * (void)v181);
                v179[(void)v181] = v183;
              }
              float v184 = v180[(void)v181];
              if (v184 < v183)
              {
                float v185 = v184 * 0.95 + v183 * 0.05;
                v179[(void)v181] = v185;
              }
              int v181 = (float *)((char *)v181 + 1);
            }
            while (v43 != v181);
          }
LABEL_161:
          float v187 = *(float *)(v34 + 148);
          uint64_t v186 = v34 + 148;
          uint64_t v188 = *(float **)(v186 + 292);
          *(_DWORD *)float __B = 0;
          v426 = (float *)v36;
          vDSP_sve(v36, 1, (float *)__B, (vDSP_Length)v43);
          float v189 = 1.0 / (((double)v447 + (double)v447) * (double)v447);
          float v190 = log10f((float)(v189 * *(float *)__B) + 2.2204e-16);
          uint64_t v191 = v433;
          *(float *)(v433 + 124) = v187 + (float)(v190 * 10.0);
          vDSP_vsub(v426, 1, v427, 1, v188, 1, v442);
          vDSP_vmax(&NoiseSuppression::EPS, 0, v188, 1, v188, 1, v442);
          float v192 = *(float *)v186;
          *(_DWORD *)float __B = 0;
          vDSP_sve(v188, 1, (float *)__B, v442);
          float v193 = log10f((float)(v189 * *(float *)__B) + 2.2204e-16);
          uint64_t v195 = v433 + 240;
          uint64_t v194 = *(void *)(v433 + 240);
          *(float *)(v433 + 128) = v192 + (float)(v193 * 10.0);
          float v196 = *(float *)(v191 + 124) + -45.0;
          if (v196 < 0.0) {
            float v196 = 0.0;
          }
          float v197 = (float)(v196 / -3.0) + 18.0;
          float v198 = v196 * -0.125 + 5.0;
          *(float *)(v195 - 44) = v197;
          *(float *)(v195 - 40) = v198;
          *(float *)(v195 - 72) = v197;
          (*(void (**)(uint64_t, const float *, void, vDSP_Length))(*(void *)v194 + 24))(v194, v427, 0, v442);
          v199 = (float *)v442;
          uint64_t v200 = v433;
          if (v447)
          {
            uint64_t v201 = 0;
            uint64_t v202 = *(void *)(v433 + 272);
            uint64_t v203 = *(void *)(*(void *)v195 + 184);
            uint64_t v204 = *(void *)(*(void *)v195 + 304);
            do
            {
              if ((*(void *)(v204 + (((unint64_t)v201 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v201)) {
                *(_DWORD *)(v202 + 4 * (void)v201) = *(_DWORD *)(v203 + 4 * (void)v201);
              }
              uint64_t v201 = (float *)((char *)v201 + 1);
            }
            while (v199 != v201);
          }
          (*(void (**)(void, float *, void))(**(void **)(v200 + 224) + 24))(*(void *)(v200 + 224), v438, *(void *)(v200 + 440));
          __n128 v205 = (float **)(v433 + 440);
          NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum(*(NoiseSuppression::Noise::LPCore **)(v433 + 440), *(float **)(v433 + 464), (float *)v447, *(VPTimeFreqConverter **)(v433 + 248), *(VPTimeFreqConverter **)(v433 + 560), *(float **)(v433 + 584), v206);
          v425 = (char **)(v433 + 464);
          uint64_t v207 = *(const float **)(v433 + 464);
          uint64_t v208 = *(float **)(v433 + 392);
          uint64_t v209 = *v205;
          *(_DWORD *)float __B = *(_DWORD *)(v433 + 104);
          *(float *)&vDSP_Length v462 = (float)(1.0 - *(float *)__B) * 0.333;
          *(float *)&__Z.realp = (float)(1.0 - *(float *)__B) * 0.667;
          *uint64_t v209 = 0.0;
          vDSP_Length v210 = (v447 - 1);
          vDSP_vsmul(v207, 1, (const float *)&v462, v209 + 1, 1, v210);
          vDSP_vsma(v207 + 1, 1, (const float *)&v462, v209, 1, v209, 1, v210);
          vDSP_vsma(v207, 1, (const float *)&__Z, v209, 1, v209, 1, v442);
          vDSP_vsma(v208, 1, (const float *)__B, v209, 1, v208, 1, v442);
          uint64_t v211 = *(void *)(v433 + 232);
          UInt64 v212 = *v205;
          *(_DWORD *)float __B = 1;
          *(_DWORD *)&__B[8] = 1;
          *(_DWORD *)&__B[12] = 4 * v442;
          *(void *)&__B[16] = v438;
          LODWORD(v462) = 1;
          int v463 = 1;
          int v464 = 4 * v442;
          v429 = v212;
          v465 = v212;
          (*(void (**)(void, vDSP_Length, unsigned char *, vDSP_Length *))(**(void **)(v211 + 64) + 32))(*(void *)(v211 + 64), v447, __B, &v462);
          memcpy(*(void **)(v211 + 96), (const void *)(*(void *)(v211 + 96) + 4 * *(unsigned int *)(v211 + 8)), 4 * *(unsigned int *)(v211 + 8));
          memcpy((void *)(*(void *)(v211 + 96) + 4 * *(unsigned int *)(v211 + 8)), v429, 4 * *(unsigned int *)(v211 + 8));
          bzero(*(void **)(v211 + 120), *(void *)(v211 + 128) - *(void *)(v211 + 120));
          long long v213 = (float *)(*(void *)(v211 + 120) + ((2 * *(unsigned int *)(v211 + 12)) & 0x1FFFFFFFCLL));
          __Z.realp = *(float **)(v211 + 120);
          __Z.imagp = v213;
          long long v214 = *(const DSPComplex **)(v211 + 96);
          uint64_t v215 = (uint64_t)(*(void *)(v211 + 104) - (void)v214) >> 2;
          vDSP_ctoz(v214, 2, &__Z, 1, v215 >> 1);
          MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)(v211 + 48), &__Z, 1, v216);
          float v217 = *__Z.realp;
          float v218 = *__Z.imagp;
          vDSP_zvcmul(&__Z, 1, &__Z, 1, &__Z, 1, (unint64_t)*(unsigned int *)(v211 + 12) >> 1);
          *__Z.realp = v217 * v217;
          *__Z.imagp = v218 * v218;
          MultiRadixRealFFT::RealInPlaceTransform((MultiRadixRealFFT *)(v211 + 48), &__Z, -1, v218 * v218);
          vDSP_ztoc(&__Z, 1, *(DSPComplex **)(v211 + 144), 2, v215 >> 1);
          float v468 = 1.0 / (float)*(unsigned int *)(v211 + 12);
          vDSP_vsmul(*(const float **)(v211 + 144), 1, &v468, *(float **)(v211 + 144), 1, v215);
          v219 = *(float **)(v211 + 144);
          float v467 = *v219;
          vDSP_vsdiv(v219, 1, &v467, v219, 1, *(unsigned int *)(v211 + 12));
          float v220 = *(float *)(v211 + 4);
          unsigned int v221 = vcvtms_u32_f32(v220 / 56.0);
          unsigned int v222 = vcvtms_u32_f32(v220 / 500.0) - 1;
          if (v222 >= v221)
          {
            int v223 = 0;
            float v225 = 0.0;
          }
          else
          {
            int v223 = 0;
            OSStatus v224 = (float *)(*(void *)(v211 + 144) + 4 * (int)v222);
            float v225 = 0.0;
            do
            {
              if (*v224 >= *(v224 - 1) && *v224 >= v224[1] && v225 < *v224)
              {
                int v223 = v222;
                float v225 = *v224;
              }
              ++v222;
              ++v224;
            }
            while (v222 < v221);
          }
          *(float *)(v211 + 16) = v225;
          *(_DWORD *)(v211 + 20) = v223;
          *(_DWORD *)(v211 + 40) = 0;
          unsigned int v226 = *(_DWORD *)(v211 + 24);
          if (v226)
          {
            float v227 = 0.0;
            double v228 = (double)vcvtad_u64_f64(*(float *)(v211 + 4) * 0.0001875);
            while (1)
            {
              uint64_t v229 = *(unsigned int *)(v211 + 28);
              int v230 = *(_DWORD *)(v211 + 32) - 1;
              int v231 = v229 - 1;
              int v441 = v223;
              if (v223)
              {
                int v232 = *(_DWORD *)(v211 + 36);
                if (v223 - v232 > v230) {
                  int v230 = v223 - v232;
                }
                unsigned int v233 = v232 + v223;
                if (v231 >= v233) {
                  int v231 = v233;
                }
              }
              float v432 = v227;
              long long v234 = (char *)&v429[LODWORD(v227) * (int)v447 / v226];
              float v235 = (float)(v447 / v226);
              memmove(*(void **)(v211 + 72), (const void *)(*(void *)(v211 + 72) + 4 * (int)v235), 4 * v229);
              memcpy((void *)(*(void *)(v211 + 72) + 4 * *(unsigned int *)(v211 + 28)), v234, 4 * (int)v235);
              LODWORD(__Z.realp) = 0;
              v431 = (float *)v234;
              unint64_t v430 = (unint64_t)v235;
              vDSP_svesq((const float *)v234, 1, (float *)&__Z, (unint64_t)v235);
              vDSP_Length v236 = (int)v235;
              uint64_t v237 = *(int *)(v211 + 28);
              float v467 = 0.0;
              v238 = (const float *)(*(void *)(v211 + 72) + 4 * ((int)v237 + ~v230));
              vDSP_dotpr(v238, 1, v238, 1, &v467, v236);
              if (v230 <= v231) {
                break;
              }
              int v223 = v441;
              float v239 = 0.0;
              if (v441 >= 1)
              {
                uint64_t v240 = v431;
                vDSP_Length v241 = v430;
LABEL_199:
                float v468 = -v239;
                vDSP_vsma((const float *)(*(void *)(v211 + 72) + 4 * v223), 1, &v468, (const float *)(*(void *)(v211 + 72) + 4 * v237), 1, v240, 1, v241);
                float v239 = v468;
                int v223 = v441;
              }
LABEL_200:
              float v252 = *(float *)(v211 + 40) - v239;
              unsigned int v253 = *(_DWORD *)(v211 + 20);
              unsigned int v226 = *(_DWORD *)(v211 + 24);
              *(float *)(v211 + 40) = v252;
              if (vabdd_f64((double)v223, (double)v253) > v228) {
                int v223 = v253;
              }
              LODWORD(v227) = LODWORD(v432) + 1;
              if (LODWORD(v432) + 1 >= v226)
              {
                float v254 = v252 / (float)v226;
                goto LABEL_205;
              }
            }
            int v242 = 0;
            int v243 = v231 + 1;
            int v244 = ~v230;
            int v245 = (int)v235 + ~v230;
            float v239 = 0.0;
            LODWORD(v440) = v441;
            float v246 = 9000000000.0;
            do
            {
              int v247 = *(_DWORD *)(v211 + 28);
              int v248 = v244 + v242 + v247;
              float v468 = 0.0;
              vDSP_dotpr((const float *)(*(void *)(v211 + 72) + 4 * v237), 1, (const float *)(*(void *)(v211 + 72) + 4 * v248), 1, &v468, v236);
              if (v242)
              {
                uint64_t v249 = *(void *)(v211 + 72);
                float v467 = v467
                     - (float)(*(float *)(v249 + 4 * (v245 + v242 + v247))
                             * *(float *)(v249 + 4 * (v245 + v242 + v247)));
                float v250 = v467 + (float)(*(float *)(v249 + 4 * v248) * *(float *)(v249 + 4 * v248));
                float v467 = v250;
              }
              else
              {
                float v250 = v467;
              }
              if (v250 != 0.0)
              {
                float v251 = v468 / v250;
                if ((float)(*(float *)&__Z.realp - (float)(v251 * v468)) < v246 && v251 >= 0.0)
                {
                  float v239 = v251;
                  float v246 = *(float *)&__Z.realp - (float)(v251 * v468);
                  LODWORD(v440) = v244 + v242 + v247;
                  int v441 = v230;
                }
              }
              ++v230;
              --v242;
            }
            while (v243 != v230);
            int v223 = v441;
            if (v441 <= 0) {
              goto LABEL_200;
            }
            if (v239 > 1.0) {
              float v239 = 0.985;
            }
            uint64_t v240 = v431;
            vDSP_Length v241 = v430;
            int v223 = v440;
            goto LABEL_199;
          }
          float v254 = NAN;
LABEL_205:
          *(float *)(v211 + 40) = v254;
          uint64_t v255 = (*(uint64_t (**)(void))(**(void **)(v433 + 224) + 32))(*(void *)(v433 + 224));
          int v257 = *(const float **)v255;
          uint64_t v256 = *(void *)(v255 + 8);
          {
            NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN1 = llround(*(float *)(v433 + 8) * 0.003);
          }
          unint64_t v258 = v256 - (void)v257;
          {
            NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN2 = llround(*(float *)(v433 + 8) * 0.003);
          }
          LODWORD(v462) = 0;
          *(void *)float __B = 0;
          vDSP_maxmgvi(v257, 1, (float *)&v462, (vDSP_Length *)__B, (v258 >> 2));
          unint64_t v259 = v258 >> 2;
          if ((v258 >> 2))
          {
            uint64_t v260 = 0;
            float v261 = 0.0;
            float v262 = 0.0;
            float v263 = 0.0;
            int v264 = v447;
            do
            {
              BOOL v266 = v260 < *(int *)__B
                          - (uint64_t)NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN1
                  || v260 > NoiseSuppression::Noise::LPCore::ComputeImpulseFeature(float const*,unsigned int)::LEN2
                          + (uint64_t)*(int *)__B;
              float v267 = v257[v260];
              if (!v266)
              {
                float v263 = v263 + (float)(v267 * v267);
                float v261 = v261 + 1.0;
              }
              float v262 = v262 + (float)(v267 * v267);
              ++v260;
            }
            while ((v258 >> 2) != v260);
            _ZF = v261 == 0.0;
            float v268 = (float)(v263 / v261) + 2.2204e-16;
            if (_ZF) {
              float v268 = 2.2204e-16;
            }
          }
          else
          {
            float v262 = 0.0;
            float v268 = 2.2204e-16;
            int v264 = v447;
          }
          BOOL v269 = v264 == 0;
          uint64_t v271 = *(void *)(v433 + 232);
          uint64_t v270 = v433 + 232;
          *(float *)(*(void *)(v270 + 376) + 16) = (float)((float)(v262 / (float)v259) + 2.2204e-16)
                                                     / v268;
          float v272 = *(float *)(v271 + 16);
          float v273 = (float)(v272 * (float)(1.0 - *(float *)(v270 - 96)))
               + (float)(*(float *)(v270 - 96) * *(float *)(v270 - 88));
          *(float *)(v270 - 92) = v272;
          *(float *)(v270 - 88) = v273;
          unint64_t v274 = (uint64_t)(*(void *)(v270 + 240) - *(void *)(v270 + 232)) >> 2;
          *(_DWORD *)float __B = 0;
          std::vector<float>::assign(v425, v274, __B);
          NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum(*(NoiseSuppression::Noise::LPCore **)(v433 + 440), *(float **)(v270 + 232), (float *)v447, *(VPTimeFreqConverter **)(v433 + 256), *(VPTimeFreqConverter **)(v433 + 560), *(float **)(v433 + 584), v275);
          NoiseSuppression::Noise::LPCore::TimeBuffer2PowerSpectrum((NoiseSuppression::Noise::LPCore *)(*(void *)(*(void *)v270 + 96) + 4 * v442), *(float **)(v433 + 488), (float *)v442, *(VPTimeFreqConverter **)(v433 + 264), *(VPTimeFreqConverter **)(v433 + 560), *(float **)(v433 + 584), v276);
          if (v269)
          {
            uint64_t v278 = v433;
            uint64_t v281 = *(void *)(v433 + 240);
          }
          else
          {
            unsigned int v277 = 0;
            uint64_t v278 = v433;
            uint64_t v279 = *(void *)(v433 + 296);
            uint64_t v280 = *(void *)(v433 + 392);
            uint64_t v281 = *(void *)(v433 + 240);
            uint64_t v282 = *(void *)(v281 + 304);
            uint64_t v283 = (float *)v442;
            do
            {
              if ((*(void *)(v282 + (((unint64_t)v277 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v277)) {
                *(_DWORD *)(v279 + 4 * (void)v277) = *(_DWORD *)(v280 + 4 * (void)v277);
              }
              unsigned int v277 = (float *)((char *)v277 + 1);
            }
            while (v283 != v277);
            uint64_t v284 = 0;
            uint64_t v285 = *(void *)(v278 + 320);
            uint64_t v286 = *(void *)(v278 + 464);
            do
            {
              if ((*(void *)(v282 + (((unint64_t)v284 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v284)) {
                *(_DWORD *)(v285 + 4 * (void)v284) = *(_DWORD *)(v286 + 4 * (void)v284);
              }
              uint64_t v284 = (float *)((char *)v284 + 1);
            }
            while (v283 != v284);
          }
          if (v278 + 512 != v281 + 208)
          {
            std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)(v278 + 512), *(char **)(v281 + 208), *(void *)(v281 + 216), (uint64_t)(*(void *)(v281 + 216) - *(void *)(v281 + 208)) >> 2);
            uint64_t v278 = v433;
          }
          vDSP_vsmul(*(const float **)(v278 + 512), 1, (const float *)(v278 + 88), *(float **)(v278 + 512), 1, (uint64_t)(*(void *)(v278 + 520) - *(void *)(v278 + 512)) >> 2);
          *(_DWORD *)float __B = 0;
          {
            float v415 = (float)(2 * *(_DWORD *)(v433 + 12));
            LODWORD(v416) = vcvtas_u32_f32(1100.0 / (float)(*(float *)(v433 + 8) / v415));
            unsigned int v417 = (v415 >> 1) - 1;
            if (v417 >= v416) {
              uint64_t v416 = v416;
            }
            else {
              uint64_t v416 = v417;
            }
            NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind1 = v416;
          }
          uint64_t v288 = v433;
          if ((explicit & 1) == 0
          {
            float v418 = (float)(2 * *(_DWORD *)(v288 + 12));
            LODWORD(v419) = vcvtas_u32_f32(1250.0 / (float)(*(float *)(v288 + 8) / v418));
            unsigned int v420 = (v418 >> 1) - 1;
            if (v420 >= v419) {
              uint64_t v419 = v419;
            }
            else {
              uint64_t v419 = v420;
            }
            NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind2 = v419;
          }
          vDSP_meanv((const float *)(*(void *)(v288 + 512)+ 4 * NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind1), 1, (float *)__B, NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind2- NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind1+ 1);
          LODWORD(v462) = 0;
          vDSP_maxv(*(const float **)(v433 + 512), 1, (float *)&v462, (uint64_t)(*(void *)(v433 + 520) - *(void *)(v433 + 512)) >> 2);
          uint64_t v289 = v433;
          long long v290 = (char *)(v433 + 560);
          long long v291 = (char *)(v433 + 584);
          uint64_t v292 = *(_DWORD **)(v433 + 512);
          uint64_t v293 = NoiseSuppression::Noise::LPCore::ComputeRegularization(void)::ind2 + 1;
          do
          {
            *v292++ = *(_DWORD *)__B;
            --v293;
          }
          while (v293);
          LODWORD(__Z.realp) = 0;
          float v468 = 0.0;
          uint64_t v294 = *(void *)(v289 + 240);
          if (v290 != (char *)(v294 + 184))
          {
            std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v290, *(char **)(v294 + 184), *(void *)(v294 + 192), (uint64_t)(*(void *)(v294 + 192) - *(void *)(v294 + 184)) >> 2);
            uint64_t v289 = v433;
          }
          vDSP_vsub(*(const float **)(v289 + 272), 1, *(const float **)(v289 + 560), 1, *(float **)(v289 + 560), 1, v442);
          v295 = (const float **)(v433 + 560);
          vDSP_vthr(*(const float **)(v433 + 560), 1, &NoiseSuppression::EPS, *(float **)(v433 + 560), 1, v442);
          vDSP_vadd(*v295, 1, *(const float **)(v433 + 512), 1, (float *)*v295, 1, v442);
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v291, *(char **)(v433 + 392), *(void *)(v433 + 400), (uint64_t)(*(void *)(v433 + 400) - *(void *)(v433 + 392)) >> 2);
          vDSP_vsub(*(const float **)(v433 + 296), 1, *(const float **)(v433 + 392), 1, *(float **)(v433 + 584), 1, v442);
          uint64_t v296 = (const float **)(v433 + 584);
          vDSP_vthr(*(const float **)(v433 + 584), 1, &NoiseSuppression::EPS, *(float **)(v433 + 584), 1, v442);
          char v297 = (const float **)(v433 + 512);
          vDSP_vadd(*v296, 1, *(const float **)(v433 + 512), 1, (float *)*v296, 1, v442);
          vDSP_vdiv(*v296, 1, *v295, 1, *(float **)(v433 + 536), 1, v442);
          BOOL v299 = (int *)(v433 + 64);
          uint64_t v298 = *(int *)(v433 + 64);
          unsigned int v300 = (int *)(v433 + 68);
          vDSP_Length v301 = *(_DWORD *)(v433 + 68) - (int)v298 + 1;
          vDSP_meanv(&(*v295)[v298], 1, (float *)&__Z, v301);
          vDSP_meanv(&(*v296)[v298], 1, &v468, v301);
          float v302 = log10f((float)(*(float *)&__Z.realp / v468) + 2.2204e-16) * 20.0;
          if (v302 >= 0.0) {
            float v303 = v302;
          }
          else {
            float v303 = 0.0;
          }
          unsigned int v304 = (_DWORD *)(v433 + 72);
          uint64_t v305 = *v300;
          vDSP_Length v306 = *(_DWORD *)(v433 + 72) - (int)v305 + 1;
          vDSP_meanv(&(*v295)[v305], 1, (float *)&__Z, v306);
          vDSP_meanv(&(*v296)[v305], 1, &v468, v306);
          float v307 = log10f((float)(*(float *)&__Z.realp / v468) + 2.2204e-16) * 20.0;
          if (v307 < 0.0) {
            float v307 = 0.0;
          }
          int v441 = LODWORD(v307);
          vDSP_vsub(*v297, 1, *v295, 1, (float *)*v295, 1, ((*(void *)(v433 + 520) - (void)*v297) >> 2));
          *(_DWORD *)float __B = 0;
          LODWORD(v462) = 0;
          vDSP_sve(&(*v295)[*v299], 1, (float *)__B, *v300 - *v299 + 1);
          vDSP_sve(&(*v295)[*v300], 1, (float *)&v462, *v304 - *v300 + 1);
          float v432 = *(float *)&v462;
          LODWORD(v431) = *(_DWORD *)__B;
          vDSP_vsub(*(const float **)(v433 + 272), 1, *(const float **)(v433 + 488), 1, (float *)*v295, 1, v442);
          vDSP_vthr(*v295, 1, &NoiseSuppression::EPS, (float *)*v295, 1, v442);
          vDSP_vadd(*v295, 1, *v297, 1, (float *)*v295, 1, v442);
          vDSP_vsub(*(const float **)(v433 + 320), 1, *(const float **)(v433 + 464), 1, (float *)*v296, 1, v442);
          vDSP_vthr(*v296, 1, &NoiseSuppression::EPS, (float *)*v296, 1, v442);
          vDSP_vadd(*v296, 1, *v297, 1, (float *)*v296, 1, v442);
          vDSP_vdiv(*v296, 1, *v295, 1, *(float **)(v433 + 416), 1, v442);
          float v308 = (float)(2 * *(_DWORD *)(v433 + 12));
          *(float *)v309.i32 = *(float *)(v433 + 8) / v308;
          *(uint32x2_t *)&long long v310 = vmin_u32((uint32x2_t)vdup_n_s32((v308 >> 1) - 1), vcvt_u32_f32(vrnda_f32(vdiv_f32((float32x2_t)0x42C80000443B8000, (float32x2_t)vdup_lane_s32(v309, 0)))));
          long long v440 = v310;
          vDSP_Length v311 = (int)v310 - DWORD1(v310) + 1;
          vDSP_meanv(&(*v295)[SDWORD1(v310)], 1, (float *)&__Z, v311);
          vDSP_meanv(&(*v296)[SDWORD1(v440)], 1, &v468, v311);
          uint64_t v312 = v433;
          UInt64 v313 = (char **)(v433 + 416);
          float v314 = log10f((float)(*(float *)&__Z.realp / v468) + 2.2204e-16) * 20.0;
          if (v314 >= 0.0) {
            float v316 = v314;
          }
          else {
            float v316 = 0.0;
          }
          float v317 = *(float *)(v312 + 204);
          if (*(float *)(v312 + 128) < v317 || *(float *)(v312 + 124) < v317)
          {
            {
              float v421 = (float)(2 * *(_DWORD *)(v312 + 12));
              unsigned int v422 = vcvtas_u32_f32(160.0 / (float)(*(float *)(v312 + 8) / v421));
              if ((v421 >> 1) - 1 < v422) {
                unsigned int v422 = (v421 >> 1) - 1;
              }
              NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin = v422;
            }
            uint64_t v318 = *(void *)(v312 + 416);
            unint64_t v319 = *(void *)(v312 + 424) - v318;
            unint64_t v320 = v319 >> 2;
            LODWORD(v462) = 0;
            if (*(float *)(v312 + 144) + 0.08 <= 0.3) {
              double v321 = *(float *)(v312 + 144) + 0.08;
            }
            else {
              double v321 = 0.3;
            }
            float v322 = 0.0;
            if (v320)
            {
              uint64_t v323 = 0;
              unsigned int v324 = v320 - 1;
              uint64_t v325 = (v319 >> 2);
              while (*(float *)(v318 + 4 * v323) <= 2.0)
              {
                if (v325 == ++v323) {
                  goto LABEL_262;
                }
              }
              unsigned int v324 = v323;
LABEL_262:
              unsigned int v326 = v324;
              if (v324 < v320)
              {
                uint64_t v327 = 0;
                unsigned int v328 = 0;
                do
                {
                  if (*(float *)(v318 + 4 * (int)v326 + 4 * v327) > 2.0) {
                    unsigned int v328 = v326 + v327;
                  }
                  ++v327;
                }
                while (v326 + v327 < v320);
                float v322 = (float)v328;
              }
            }
            else
            {
              unsigned int v326 = -1;
            }
            float v329 = *(float *)(*(void *)(v312 + 232) + 40);
            int v330 = *(_DWORD *)(v312 + 20);
            float v331 = *(float *)(v312 + 8);
            *(_DWORD *)float __B = 0;
            vDSP_sve((const float *)(v318+ 4* NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin), 1, (float *)__B, (v320- NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin));
            float v332 = *(float *)__B;
            uint64_t v333 = *(void *)(v433 + 416);
            *(void *)float __B = 0;
            vDSP_maxvi((const float *)(v333+ 4* NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin), 1, (float *)&v462, (vDSP_Length *)__B, (v320- NoiseSuppression::Noise::LPCore::ApplyRules(unsigned int &,unsigned int &,unsigned int &)::v160HzBin));
            float v335 = v331 / (float)(2 * v330);
            float v336 = v335 * (float)v326;
            float v337 = v335 * v322;
            double v315 = v329;
            int v338 = v329 < 0.8;
            uint64_t v312 = v433;
            if (v329 >= 0.8) {
              int v339 = 1;
            }
            else {
              int v339 = 2;
            }
            float v334 = v321;
            if (*(float *)(v433 + 140) < v334) {
              int v338 = v339;
            }
            if (*(float *)(v433 + 128) < *(float *)(v433 + 124)) {
              ++v338;
            }
            if (v336 > 800.0) {
              ++v338;
            }
            if (v337 < 300.0) {
              ++v338;
            }
            if ((float)((float)(*(float *)&v462 + 0.001) / (float)(v332 + 0.001)) <= 0.8) {
              int v340 = 0;
            }
            else {
              int v340 = -1;
            }
            if (v338 != v340)
            {
              unint64_t v341 = (uint64_t)(*(void *)(v433 + 424) - *(void *)(v433 + 416)) >> 2;
              *(_DWORD *)float __B = 953267991;
              std::vector<float>::assign(v313, v341, __B);
              float v316 = 0.0;
              uint64_t v312 = v433;
            }
          }
          float v342 = *(float *)(v312 + 112);
          if (v303 <= v342) {
            float v303 = (float)(v303 * (float)(1.0 - *(float *)(v312 + 120))) + (float)(v342 * *(float *)(v312 + 120));
          }
          int v343 = v447;
          uint64_t v344 = (float *)v442;
          int v345 = v441;
          *(float *)(v312 + 112) = v303;
          *(_DWORD *)(v312 + 116) = v345;
          float v346 = 0.0;
          if (v303 >= 0.5) {
            float v346 = v316;
          }
          float v347 = *(float *)(v312 + 108);
          if (v346 <= v347) {
            float v346 = (float)(v346 * (float)(1.0 - *(float *)(v312 + 120))) + (float)(v347 * *(float *)(v312 + 120));
          }
          *(float *)(v312 + 108) = v346;
          if (*(unsigned char *)(v312 + 4))
          {
            **(_DWORD **)(v312 + 608) = v345;
            {
              *(float *)&int v423 = exp(-1.0 / (float)(*(float *)(v433 + 16) * 0.0738));
              NoiseSuppression::Noise::LPCore::ZeroCrossingRate(float const*,unsigned int)::alpha = v423;
            }
            *(void *)float __B = 0;
            vDSP_Length v462 = 0;
            vDSP_nzcros(v438, 1, (vDSP_Length)v344, &v462, (vDSP_Length *)__B, (vDSP_Length)v344);
            float v348 = (float)v447;
            uint64_t v349 = v433;
            float v350 = (float)((float)((float)*(unint64_t *)__B / (float)v447)
                         * (float)(1.0
                                 - *(float *)&NoiseSuppression::Noise::LPCore::ZeroCrossingRate(float const*,unsigned int)::alpha))
                 + (float)(*(float *)(v433 + 160)
                         * *(float *)&NoiseSuppression::Noise::LPCore::ZeroCrossingRate(float const*,unsigned int)::alpha);
            *(float *)(v433 + 160) = v350;
            *(float *)(*(void *)(v349 + 608) + 4) = v350;
            *(_DWORD *)float __B = 0;
            LODWORD(v462) = 0;
            vDSP_meanv(v438, 1, (float *)__B, v442);
            vDSP_measqv(v438, 1, (float *)&v462, v442);
            float v351 = v432 / (*(float *)&v431 + 0.000001);
            float v352 = 0.0;
            if (v343)
            {
              uint64_t v344 = (float *)v442;
              v353 = (float *)v442;
              uint64_t v312 = v433;
              v354 = v438;
              do
              {
                float v355 = *v354++;
                float v352 = v352
                     + (float)((float)((float)(v355 - *(float *)__B)
                                     * (float)((float)(v355 - *(float *)__B) * (float)(v355 - *(float *)__B)))
                             * (float)(v355 - *(float *)__B));
                v353 = (float *)((char *)v353 - 1);
              }
              while (v353);
            }
            else
            {
              uint64_t v344 = (float *)v442;
              uint64_t v312 = v433;
            }
            uint64_t v356 = *(void *)(v312 + 608);
            *(float *)(v356 + 8) = fabsf((float)((float)(v352 / v348)/ (float)((float)((float)(*(float *)&v462- (float)(*(float *)__B * *(float *)__B))* (float)(*(float *)&v462- (float)(*(float *)__B * *(float *)__B)))+ 2.2204e-16))+ -3.0);
            *(float *)(v356 + 12) = v351;
            float v346 = *(float *)(v312 + 108);
            float v303 = *(float *)(v312 + 112);
          }
          __asm { FMOV            V2.2S, #1.0 }
          float32x2_t v360 = vadd_f32(*(float32x2_t *)(v312 + 180), _D2);
          *(float32x2_t *)(v312 + 180) = v360;
          float v361 = *(float *)(v312 + 196);
          float v362 = *(float *)(v312 + 168);
          if (v303 > v361 || v346 > v362)
          {
            float v364 = v303 - v361;
            v360.i32[0] = 0;
            if (v364 < 0.0) {
              float v364 = 0.0;
            }
            float v365 = *(float *)(v312 + 32);
            float v366 = v364 / v365;
            float v367 = v346 - v362;
            if (v367 < 0.0) {
              float v367 = 0.0;
            }
            float v368 = v366 + (float)(v367 / v365);
            float v363 = *(float *)(v312 + 116);
            float v369 = v363 + v368;
            if (v369 > 1.0) {
              float v369 = 1.0;
            }
            *(_DWORD *)(v312 + 180) = 0;
            if (v369 < *(float *)(v312 + 188)) {
              float v369 = *(float *)(v312 + 188);
            }
            *(float *)(v312 + 188) = v369;
          }
          else
          {
            float v363 = *(float *)(v312 + 116);
          }
          uint64_t v370 = *(float **)(v312 + 608);
          float v371 = v370[4];
          float v372 = *(float *)(v312 + 52);
          float v373 = *(float *)(v312 + 128);
          float v374 = *(float *)(v312 + 100);
          if (v363 <= *(float *)(v312 + 200) || v371 <= v372 || v373 <= v374)
          {
            if (*(unsigned char *)(v312 + 4)
              && *v370 > 1.0
              && v370[1] > 0.125
              && v370[2] < 1.5
              && v371 > 0.7
              && v370[3] > 0.75
              && v373 > v374)
            {
              float v375 = v363 + 0.1;
              if (v375 <= 1.0) {
                float v376 = v375 * 0.5;
              }
              else {
                float v376 = 0.5;
              }
              float v363 = v376 + (float)(*(float *)(v312 + 192) * 0.5);
            }
            else
            {
              float v363 = *(float *)(v312 + 192) * 0.5;
            }
          }
          else
          {
            if (v363 > 1.0) {
              float v363 = 1.0;
            }
            *(_DWORD *)(v312 + 184) = 0;
          }
          *(float *)(v312 + 192) = v363;
          LODWORD(v315) = *(_DWORD *)(v312 + 12);
          if ((double)*(unint64_t *)&v315 / *(float *)(v312 + 8) * v360.f32[0] <= *(float *)(v312 + 36))
          {
            float v377 = *(float *)(v312 + 172);
            float v378 = *(float *)(v312 + 188);
            _NF = v377 < v378;
          }
          else
          {
            float v377 = *(float *)(v312 + 188);
            float v378 = *(float *)(v312 + 172);
            _NF = v377 < v378;
            if (v377 <= v378)
            {
              *(float *)(v312 + 172) = (float)(v377 * (float)(1.0 - *(float *)(v312 + 132)))
                                     + (float)(*(float *)(v312 + 132) * v378);
              *(_DWORD *)(v312 + 188) = 0;
LABEL_335:
              v380 = (char **)(v312 + 536);
              if (v363 > 1.0) {
                float v363 = 1.0;
              }
              *(float *)(v312 + 176) = v363;
              if (v370[4] < v372 && v346 < 1.0) {
                *(void *)(v312 + 172) = 0;
              }
              uint64_t v381 = 0;
              float v382 = *(float *)(v312 + 124);
              char v383 = 1;
              do
              {
                char v384 = v383;
                uint64_t v385 = v312 + 4 * v381;
                if (v382 >= *(float *)(v385 + 204)) {
                  *(_DWORD *)(v385 + 172) = 1065353216;
                }
                char v383 = 0;
                uint64_t v381 = 1;
              }
              while ((v384 & 1) != 0);
              uint64_t v386 = v312 + 172;
              float v387 = *(float *)(v312 + 172);
              if (v387 >= *(float *)(v312 + 44))
              {
                float v389 = *(float *)(v312 + 152);
                uint64_t v388 = v312 + 152;
                *(float *)float __B = 1.0 - v389;
                vDSP_vsmul(v426, 1, (const float *)v388, *(float **)(v388 + 288), 1, (vDSP_Length)v344);
                vDSP_vsmul(*(const float **)(v433 + 344), 1, (const float *)__B, *(float **)(v433 + 464), 1, v442);
                vDSP_vadd(*(const float **)(v433 + 464), 1, *(const float **)(v388 + 288), 1, *(float **)(v433 + 344), 1, (uint64_t)(*(void *)(v433 + 352) - *(void *)(v433 + 344)) >> 2);
              }
              else
              {
                *(float *)float __B = 1.0 - v387;
                vDSP_vsmul(*(const float **)(v312 + 344), 1, (const float *)(v312 + 172), *(float **)(v312 + 440), 1, (uint64_t)(*(void *)(v312 + 352) - *(void *)(v312 + 344)) >> 2);
                vDSP_vsmul(v427, 1, (const float *)__B, *(float **)(v433 + 464), 1, v442);
                vDSP_vadd(*(const float **)(v433 + 464), 1, *(const float **)(v433 + 440), 1, *(float **)(v433 + 344), 1, (uint64_t)(*(void *)(v433 + 352) - *(void *)(v433 + 344)) >> 2);
              }
              uint64_t v390 = v433;
              float v391 = *(float *)(v433 + 44);
              if (*(float *)(v433 + 172) < v391 && *(float *)(v433 + 176) >= v391) {
                memcpy(*(void **)(v433 + 344), v427, 4 * (*(_DWORD *)(v433 + 68) + 1));
              }
              if (*(unsigned char *)(v390 + 2) && *(unsigned char *)(v390 + 5))
              {
                float v392 = *(float *)(v390 + 172);
                float v393 = *(float *)(v390 + 44);
                uint64_t v32 = v448;
                vDSP_Length v33 = v447;
                v394 = v426;
                if (v392 <= v393)
                {
                  float v395 = *(float *)(v390 + 176);
                  if (v395 <= v393)
                  {
                    *(float *)float __B = 1.0 - v392;
                    vDSP_vsmul(*(const float **)(v390 + 344), 1, (const float *)__B, *(float **)(v390 + 440), 1, (uint64_t)(*(void *)(v390 + 352) - *(void *)(v390 + 344)) >> 2);
                    vDSP_vsmul(v426, 1, (const float *)v386, *(float **)(v433 + 464), 1, v442);
                    uint64_t v390 = v433;
                    uint64_t v412 = *(void *)(v433 + 352) - *(void *)(v433 + 344);
                    v394 = v426;
                    if (v412)
                    {
                      uint64_t v413 = 0;
                      unint64_t v414 = v412 >> 2;
                      if (v414 <= 1) {
                        unint64_t v414 = 1;
                      }
                      do
                      {
                        v394[v413] = *(float *)(*(void *)(v390 + 464) + 4 * v413)
                                   + *(float *)(*(void *)(v390 + 440) + 4 * v413);
                        ++v413;
                      }
                      while (v414 != v413);
                    }
                    uint64_t v32 = v448;
                    vDSP_Length v33 = v447;
                  }
                  else if (v395 >= v393)
                  {
                    uint64_t v396 = *(unsigned int *)(v390 + 68);
                    if ((v396 & 0x80000000) == 0)
                    {
                      v397 = *(int **)(v390 + 344);
                      uint64_t v398 = v396 + 1;
                      v399 = v426;
                      do
                      {
                        int v400 = *v397++;
                        *(_DWORD *)v399++ = v400;
                        --v398;
                      }
                      while (v398);
                    }
                  }
                }
              }
              else
              {
                *(void *)(v390 + 112) = 0;
                *(_DWORD *)(v390 + 108) = 0;
                *(void *)(v386 + 8) = 0;
                *(void *)(v386 + 16) = 0;
                *(void *)uint64_t v386 = 0;
                unint64_t v401 = (uint64_t)(*(void *)(v390 + 424) - *(void *)(v390 + 416)) >> 2;
                *(_DWORD *)float __B = 0;
                std::vector<float>::assign(v313, v401, __B);
                unint64_t v402 = (uint64_t)(*(void *)(v433 + 544) - *(void *)(v433 + 536)) >> 2;
                *(_DWORD *)float __B = 0;
                std::vector<float>::assign(v380, v402, __B);
                uint64_t v32 = v448;
                vDSP_Length v33 = v447;
                uint64_t v390 = v433;
                v394 = v426;
              }
              if (*(_DWORD *)(v390 + 212) == 1 && *(unsigned char *)v390 && *(unsigned char *)(v390 + 5))
              {
                float v403 = *(float *)(v390 + 56);
                BOOL v404 = *(float *)(v390 + 172) <= 0.9 || *(float *)(v390 + 108) <= v403;
                BOOL v405 = v404 || *(float *)(v390 + 112) <= v403;
                BOOL v406 = v405 || *(float *)(v390 + 124) <= *(float *)(v390 + 96);
                if (!v406 && v33 != 0)
                {
                  unint64_t v408 = 0;
                  uint64_t v409 = *(void *)(v390 + 416);
                  uint64_t v410 = *v428;
                  do
                  {
                    if (*(float *)(v409 + 4 * v408) > 1.7783
                      || (*(void *)(v410 + ((v408 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v408)) == 0)
                    {
                      v394[v408] = *(float *)(v390 + 92) * v394[v408];
                    }
                    ++v408;
                  }
                  while (v442 != v408);
                }
              }
              goto LABEL_45;
            }
          }
          if (_NF) {
            float v377 = v378;
          }
          *(float *)(v312 + 172) = v377;
          goto LABEL_335;
        default:
          goto LABEL_37;
      }
    }
  }
  if (SuppressorClassLogScope(void)::once != -1) {
    dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_8058);
  }
  if (SuppressorClassLogScope(void)::scope)
  {
    long long v37 = *(NSObject **)SuppressorClassLogScope(void)::scope;
    if (!*(void *)SuppressorClassLogScope(void)::scope) {
      goto LABEL_37;
    }
  }
  else
  {
    long long v37 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)float __B = 136315394;
    *(void *)&__B[4] = "LPCore.cpp";
    *(_WORD *)&__B[12] = 1024;
    *(_DWORD *)&__B[14] = 1305;
    unint64_t v44 = "%25s:%-5d LPCore::UpdateLPC: Arguments cannot be null";
LABEL_36:
    _os_log_impl(&dword_1BB0CE000, v37, OS_LOG_TYPE_DEBUG, v44, __B, 0x12u);
  }
LABEL_37:
  if (SuppressorClassLogScope(void)::once != -1) {
    dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_8058);
  }
  if (SuppressorClassLogScope(void)::scope)
  {
    long long v45 = *(NSObject **)SuppressorClassLogScope(void)::scope;
    if (!*(void *)SuppressorClassLogScope(void)::scope) {
      goto LABEL_45;
    }
  }
  else
  {
    long long v45 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)float __B = 136315394;
    *(void *)&__B[4] = "suppressor_classV4.cpp";
    *(_WORD *)&__B[12] = 1024;
    *(_DWORD *)&__B[14] = 828;
    _os_log_impl(&dword_1BB0CE000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d Error processing lp noise estimate post-processor, possibly bypassed.", __B, 0x12u);
  }
LABEL_45:
  if (*(_DWORD *)(v32 + 428) != 2)
  {
    memcpy(*(void **)(v32 + 192), *(const void **)(v32 + 200), 4 * v33);
    goto LABEL_106;
  }
  LODWORD(__Z.realp) = 0;
  if ((int)v33 < 1)
  {
    float v51 = 0.0;
    float v50 = 0.0;
    float v48 = 0.0;
  }
  else
  {
    long long v46 = *(float **)(v32 + 304);
    uint64_t v47 = *(float **)(v32 + 312);
    float v48 = 0.0;
    long long v49 = (float *)v442;
    float v50 = 0.0;
    float v51 = 0.0;
    unsigned int v52 = *(float **)(v32 + 320);
    do
    {
      float v53 = *v46++;
      if (v53 > 0.0) {
        float v48 = v48 + 1.0;
      }
      float v54 = *v47++;
      if (v54 > 0.0) {
        float v50 = v50 + 1.0;
      }
      float v55 = *v52++;
      if (v55 > 0.0) {
        float v51 = v51 + 1.0;
      }
      long long v49 = (float *)((char *)v49 - 1);
    }
    while (v49);
  }
  BOOL v56 = (int)v33 > 0;
  *(float *)(v32 + 504) = v48 / v20;
  *(float *)(v32 + 508) = v50 / v20;
  float v57 = v51 / v20;
  *(float *)(v32 + 512) = v57;
  *(float *)(v32 + 516) = (float)(v50 / v20) - v57;
  float v467 = 0.0;
  float v468 = (float)(*(float *)(v32 + 336) - *(float *)(v32 + 632)) / (float)(*(float *)(v32 + 636) - *(float *)(v32 + 632));
  vDSP_vsmul(*(const float **)(v32 + 160), 1, &v460, v444, 1, v33);
  vDSP_vsmul(*(const float **)(v448 + 152), 1, &v461, v446, 1, v447);
  vDSP_vsub(v446, 1, v444, 1, v446, 1, v447);
  vDSP_vsmul(*(const float **)(v448 + 288), 1, &v459, v444, 1, v447);
  vDSP_vmax(v446, 1, v444, 1, v446, 1, v447);
  uint64_t v58 = v448;
  vDSP_Length v59 = v447;
  uint64_t v60 = v435;
  if (v56)
  {
    unint64_t v61 = 0;
    uint64_t v62 = *(void *)(v448 + 312);
    uint64_t v63 = *(void *)(v448 + 208);
    do
    {
      float v64 = v446;
      if (*(float *)(v62 + v61) <= 0.0) {
        float v64 = *(float **)(v58 + 152);
      }
      *(float *)(v63 + v61) = v64[v61 / 4];
      v61 += 4;
    }
    while (v60 != v61);
  }
  if (*(float *)(v58 + 516) < -0.2)
  {
    if (v468 <= 0.0)
    {
      memcpy(*(void **)(v58 + 208), *(const void **)(v58 + 152), 4 * v59);
    }
    else if (v468 < 1.0)
    {
      float v467 = 1.0 - v468;
      vDSP_vsmul(*(const float **)(v58 + 152), 1, &v468, v444, 1, v59);
      uint64_t v65 = v448;
      vDSP_vsmul(*(const float **)(v448 + 208), 1, &v467, v446, 1, v447);
      vDSP_vadd(v444, 1, v446, 1, *(float **)(v65 + 208), 1, v447);
      uint64_t v58 = v448;
      vDSP_Length v59 = v447;
    }
  }
  float __C = 0.0;
  vDSP_meanv(*(const float **)(v58 + 600), 1, &__C, v59);
  uint64_t v66 = v448;
  if (__C > 0.99 && *(float *)(v448 + 628) < 0.4)
  {
    vDSP_vsadd(*(const float **)(v448 + 152), 1, &v458, v436, 1, v447);
    vDSP_vsadd(*(const float **)(v448 + 160), 1, &v458, v434, 1, v447);
    vDSP_vdbcon(v436, 1, &v457, v436, 1, v447, 0);
    vDSP_vdbcon(v434, 1, &v457, v434, 1, v447, 0);
    vDSP_vsub(v434, 1, v436, 1, v436, 1, v447);
    vDSP_meanv(v436, 1, &v456, v447);
    vDSP_meanv(v436, 1, &v455, *(int *)(v448 + 620));
    vDSP_meanv(&v436[*(int *)(v448 + 620)], 1, &v454, (int)v447 - (uint64_t)*(int *)(v448 + 620));
    uint64_t v66 = v448;
    float v67 = *(float *)(v448 + 392);
    double v68 = 1.0 - v67;
    float v69 = (float)(v67 * *(float *)(v448 + 608)) + v68 * v456;
    *(float *)(v448 + 608) = v69;
    float v70 = (float)(v67 * *(float *)(v66 + 612)) + v68 * v455;
    *(float *)(v66 + 612) = v70;
    float v71 = (float)(v67 * *(float *)(v66 + 616)) + v68 * v454;
    *(float *)(v66 + 616) = v71;
  }
  float v72 = *(float *)(v66 + 524);
  if ((float)(*(float *)(v66 + 616) - *(float *)(v66 + 612)) <= 10.0)
  {
    *(_DWORD *)(v66 + 484) = 0;
    float v73 = v72 - *(float *)(v66 + 532);
    if (v73 < 0.0)
    {
      LODWORD(__Z.realp) = 0;
      float v73 = 0.0;
    }
  }
  else
  {
    *(_DWORD *)(v66 + 484) = 1;
    float v73 = v72 + *(float *)(v66 + 528);
    if (v73 > 1.0) {
      float v73 = 1.0;
    }
    *(float *)&__Z.realp = v73;
  }
  *(float *)(v66 + 524) = v73;
  *(_DWORD *)float __B = 0;
  LODWORD(v462) = 0;
  uint64_t v74 = *(void *)(v66 + 152);
  uint64_t v75 = *(void *)(v66 + 160);
  int v76 = *(_DWORD *)(v66 + 468);
  uint64_t v77 = *(int *)(v66 + 464);
  vDSP_Length v78 = v76 - (int)v77 + 1;
  vDSP_sve((const float *)(v74 + 4 * v77), 1, (float *)__B, v78);
  vDSP_sve((const float *)(v75 + 4 * *(int *)(v448 + 464)), 1, (float *)&v462, v78);
  float v79 = *(float *)__B / (*(float *)&v462 + 0.00000011921) + 0.00000011921;
  float v80 = log10f(v79);
  uint64_t v81 = v448;
  float v82 = (float)(*(float *)(v448 + 488) * 0.95) + (float)(v80 * 10.0) * 0.0500000119;
  *(float *)(v448 + 488) = v82;
  float v83 = 1.0 / ((float)(expf(v82 * -0.25) * 150.0) + 1.0);
  *(float *)(v81 + 476) = v83;
  int v84 = *(_DWORD *)(v81 + 480);
  _ZF = v83 < 0.3 && v84 == 1;
  if (_ZF)
  {
    *(_DWORD *)(v81 + 480) = 0;
    uint64_t v87 = (float *)v447;
    goto LABEL_88;
  }
  BOOL v86 = v83 > 0.4 && v84 == 0;
  uint64_t v87 = (float *)v447;
  if (v86)
  {
    *(_DWORD *)(v81 + 480) = 1;
    goto LABEL_91;
  }
  if (v84 != 1)
  {
LABEL_88:
    *(_DWORD *)(v81 + 432) = 1;
    float v88 = *(float *)(v81 + 520) - *(float *)(v81 + 448);
    if (v88 < 0.0) {
      float v88 = 0.0;
    }
    goto LABEL_93;
  }
LABEL_91:
  *(_DWORD *)(v81 + 432) = 0;
  float v88 = *(float *)(v81 + 520) + *(float *)(v81 + 448);
  if (v88 > 1.0) {
    float v88 = 1.0;
  }
LABEL_93:
  *(float *)(v81 + 520) = v88;
  *(float *)(v81 + 436) = v88;
  if (v88 <= *(float *)(v81 + 524)) {
    float v88 = *(float *)(v81 + 524);
  }
  *(float *)&__Z.realp = v88;
  float v89 = *(float *)(v81 + 648);
  float v90 = fmaxf((float)(v89 * (float)(*(float *)(v81 + 336) - *(float *)(v81 + 644)))/ (float)(*(float *)(v81 + 640) - *(float *)(v81 + 644)), 0.0);
  if (v90 < v89) {
    float v89 = v90;
  }
  *(float *)(v81 + 652) = v89;
  *(float *)float __B = 1.0 - v88;
  vDSP_vsmul(*(const float **)(v81 + 200), 1, (const float *)&__Z, v444, 1, (vDSP_Length)v87);
  vDSP_vsmul(*(const float **)(v448 + 208), 1, (const float *)__B, v446, 1, v447);
  vDSP_vadd(v444, 1, v446, 1, *(float **)(v448 + 192), 1, v447);
  uint64_t v32 = v448;
  vDSP_Length v33 = v447;
  if (*(_DWORD *)(v448 + 480) != 1 && *(_DWORD *)(v448 + 484) != 1)
  {
    BOOL v91 = (int)v447 > 0;
    LODWORD(v462) = 1115422720;
    float v92 = 1.0e10;
    if (*(float *)(v448 + 508) >= 0.8) {
      float v92 = 0.0;
    }
    float v452 = v92;
    vDSP_vsmul(*(const float **)(v448 + 200), 1, (const float *)&v462, v444, 1, v447);
    vDSP_vthr(v444, 1, &v452, v444, 1, v447);
    vDSP_vsub(*(const float **)(v448 + 208), 1, v444, 1, v446, 1, v447);
    uint64_t v32 = v448;
    vDSP_Length v33 = v447;
    uint64_t v93 = v435;
    if (v91)
    {
      unint64_t v94 = 0;
      do
      {
        if (v446[v94 / 4] <= 0.0) {
          *(_DWORD *)(*(void *)(v32 + 192) + v94) = *(_DWORD *)(*(void *)(v32 + 200) + v94);
        }
        v94 += 4;
      }
      while (v93 != v94);
    }
  }
LABEL_106:
  uint64_t v95 = (const float **)(v32 + 192);
  vDSP_vmax(*(const float **)(v32 + 192), 1, *(const float **)(v32 + 224), 1, *(float **)(v32 + 192), 1, v33);
  vDSP_vmin(*v95, 1, *(const float **)(v448 + 216), 1, (float *)*v95, 1, v447);
  CFilterBank::filterbank_compute_bank32(*(void *)(v448 + 16), *v95, (float *)&(*v95)[v447]);
  uint64_t v96 = v448;
  if (*(float *)(v448 + 332) < 0.5)
  {
    float v97 = *(float *)(v448 + 360);
    float v98 = *(float *)(v448 + 336);
    float v99 = CNoiseSuppressorV4::AweightSPL(v448);
    uint64_t v96 = v448;
    *(float *)(v448 + 336) = (float)(v97 * v99) + (float)((float)(1.0 - v97) * v98);
  }
  float v100 = *(float *)(v96 + 360);
  float v101 = *(float *)(v96 + 340);
  float v102 = CNoiseSuppressorV4::AweightSPL(v96);
  uint64_t v103 = v448;
  *(float *)(v448 + 340) = (float)(v100 * v102) + (float)((float)(1.0 - v100) * v101);
  if (*(_DWORD *)(v103 + 560) == 1) {
    memcpy(*(void **)(v103 + 240), v445, 4 * (int)v439);
  }
  LODWORD(__Z.realp) = -525502228;
  float v467 = 0.2;
  float v468 = 0.0;
  float __C = 0.8;
  float v452 = 1.0;
  float v451 = 3.0;
  (*(void (**)(void, char *, char *, void, vDSP_Length, void, vDSP_Length))(**(void **)(v103 + 704)
                                                                                           + 24))(*(void *)(v103 + 704), v445, &v445[4 * v447], *(void *)(v103 + 240), *(void *)(v103 + 240) + 4 * v447, *(void *)(v103 + 192), *(void *)(v103 + 192) + 4 * v447);
  uint64_t v104 = (void *)(v448 + 256);
  BOOL v105 = &v444[v447];
  vDSP_vsub((const float *)(*(void *)(v448 + 256) + 4 * v447), 1, (const float *)(*(void *)(v448 + 368) + 4 * v447), 1, v105, 1, v443);
  int v106 = &v446[v447];
  vDSP_vthres(v105, 1, &v468, v106, 1, v443);
  vDSP_vsub(v106, 1, v105, 1, v105, 1, v443);
  vDSP_vsma(v105, 1, (const float *)(v448 + 396), (const float *)(*v104 + 4 * v447), 1, v105, 1, v443);
  long long v107 = (void *)(v448 + 368);
  vDSP_vsma(v106, 1, (const float *)(v448 + 400), v105, 1, (float *)(*(void *)(v448 + 368) + 4 * v447), 1, 5uLL);
  vDSP_vsma(v106 + 5, 1, (const float *)(v448 + 404), v105 + 5, 1, (float *)(*v107 + 4 * v447 + 20), 1, v443 - 5);
  if ((int)v443 < 1)
  {
    float v109 = 0.0;
    uint64_t v108 = v448;
    vDSP_Length v110 = v447;
  }
  else
  {
    uint64_t v108 = v448;
    float v109 = 0.0;
    vDSP_Length v110 = v447;
    int64_t v111 = v447;
    do
    {
      float v112 = *(float *)(*(void *)(v448 + 368) + 4 * v111);
      if (v112 <= 3.0) {
        float v112 = -0.0;
      }
      float v109 = v109 + v112;
      ++v111;
    }
    while (v111 < (int)v439);
  }
  vDSP_Length v113 = v443;
  BOOL v114 = (int)v443 > 0;
  float v115 = v109 / (float)*(int *)(v108 + 12);
  *(float *)(v108 + 328) = v115;
  *(float *)(v108 + 332) = (float)((float)(1.0 / (float)((float)(0.5 / v115) + 1.0)) * 0.899) + 0.1;
  float v116 = (float *)(*(void *)(v108 + 176) + 4 * v110);
  *(_DWORD *)float __B = sqrtf(expf((float)*(int *)(v108 + 52) * 0.23026));
  vDSP_vfill((const float *)__B, v116, 1, v113);
  long long v117 = &xmmword_1BB87C000;
  if (v114)
  {
    uint64_t v118 = *(void *)(v448 + 256);
    uint64_t v119 = *(void *)(v448 + 264);
    uint64_t v121 = *(void *)(v448 + 240);
    uint64_t v120 = *(void *)(v448 + 248);
    uint64_t v122 = *(void *)(v448 + 368);
    UInt64 v123 = *(float **)(v448 + 168);
    int64_t v124 = (int)v439;
    LODWORD(v443) = 1040496093;
    int64_t v125 = v447;
    do
    {
      float v126 = *(float *)(v118 + 4 * v125) / (float)(*(float *)(v118 + 4 * v125) + 1.0);
      float v127 = v126 * (float)(*(float *)(v119 + 4 * v125) + 1.0);
      unsigned int v128 = vcvtms_s32_f32(v127 + v127);
      float v129 = 1.0;
      if ((v128 & 0x80000000) == 0)
      {
        if (v128 < 0x14)
        {
          float v130 = -(float)(floorf(v127 + v127) - (float)(v127 * 2.0));
          float v129 = (float)((float)(v130
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v128
                                 + 1))
                       + (float)((float)(1.0 - v130)
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v128)))
               / sqrtf(v127 + 0.0001);
        }
        else
        {
          float v129 = (float)(*(float *)&v443 / v127) + 1.0;
        }
      }
      float v131 = v126 * v129;
      if (v131 > 1.0) {
        float v131 = 1.0;
      }
      *(float *)(v120 + 4 * v125) = v131;
      *(float *)(v121 + 4 * v125) = (float)((float)(v131 * (float)(v131 * 0.8)) * *(float *)&v445[4 * v125])
                                  + (float)(*(float *)(v121 + 4 * v125) * 0.2);
      float v132 = 1.0
           - (float)(*(float *)(v448 + 332)
                   * (float)((float)((float)(1.0 / (float)((float)(0.5 / *(float *)(v122 + 4 * v125)) + 1.0)) * 0.899)
                           + 0.1));
      float v133 = (float)(*(float *)(v118 + 4 * v125) + 1.0) * (float)(v132 / (float)(1.0 - v132));
      v123[v125++] = 1.0 / (float)((float)(v133 * expf(-v127)) + 1.0);
    }
    while (v125 < v124);
    uint64_t v134 = v448;
    long long v117 = &xmmword_1BB87C000;
  }
  else
  {
    uint64_t v134 = v448;
    UInt64 v123 = *(float **)(v448 + 168);
  }
  vDSP_Length v135 = v447;
  CFilterBank::filterbank_compute_psd16(*(int ***)(v134 + 16), (uint64_t)&v123[v447], v123);
  CFilterBank::filterbank_compute_psd16(*(int ***)(v134 + 16), *(void *)(v134 + 248) + 4 * v135, *(float **)(v134 + 248));
  CFilterBank::filterbank_compute_psd16(*(int ***)(v134 + 16), *(void *)(v134 + 176) + 4 * v135, *(float **)(v134 + 176));
  vDSP_vsadd(*(const float **)(v134 + 256), 1, &v452, v446, 1, v135);
  vDSP_vdiv(v446, 1, *(const float **)(v448 + 256), 1, v446, 1, v447);
  vDSP_vsadd(*(const float **)(v448 + 264), 1, &v452, v444, 1, v447);
  vDSP_vmul(v446, 1, v444, 1, v444, 1, v447);
  int v136 = v442;
  long long v137 = (float *)v447;
  if ((int)v442 >= 1)
  {
    float v138 = *((float *)v117 + 237);
    uint64_t v139 = v444;
    v140 = (float *)v442;
    do
    {
      float v141 = *v139;
      unsigned int v142 = vcvtms_s32_f32(v141 + v141);
      float v143 = 1.0;
      if ((v142 & 0x80000000) == 0)
      {
        if (v142 < 0x14)
        {
          float v144 = -(float)(floorf(v141 + v141) - (float)(v141 * 2.0));
          float v143 = (float)((float)(v144
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v142
                                 + 1))
                       + (float)((float)(1.0 - v144)
                               * *((float *)&NoiseSuppression::Gain::Gain<float,(LogTypes)0>::ComputeHypergeometricGain(std::vector<float> &,AutoValue<std::vector<float>,(LogTypes)0> &)::table
                                 + v142)))
               / sqrtf(v141 + 0.0001);
        }
        else
        {
          float v143 = (float)(v138 / v141) + 1.0;
        }
      }
      *v139++ = v143;
      v140 = (float *)((char *)v140 - 1);
    }
    while (v140);
  }
  BOOL v145 = v136 > 0;
  vDSP_vmul(v446, 1, v444, 1, v444, 1, (vDSP_Length)v137);
  vDSP_vclip(v444, 1, (const float *)&__Z, &v452, v444, 1, v447);
  uint64_t v146 = (float **)(v448 + 248);
  vDSP_vsmul(*(const float **)(v448 + 248), 1, &v451, v446, 1, v447);
  vDSP_vmin(v444, 1, v446, 1, *v146, 1, v447);
  vDSP_vsq(*v146, 1, v446, 1, v447);
  vDSP_vmul(v446, 1, (const float *)v445, 1, v446, 1, v447);
  vDSP_vsmul(v446, 1, &__C, v446, 1, v447);
  vDSP_vsma(*(const float **)(v448 + 240), 1, &v467, v446, 1, *(float **)(v448 + 240), 1, v447);
  vDSP_vmax(*v146, 1, *(const float **)(v448 + 176), 1, *v146, 1, v447);
  uint64_t v147 = *(float **)(v448 + 168);
  v148 = (float *)v442;
  if (v145)
  {
    float v149 = *(float **)(v448 + 248);
    uint64_t v150 = *(float **)(v448 + 176);
    uint64_t v151 = *(float **)(v448 + 168);
    Float64 v152 = v446;
    do
    {
      float v153 = *v151++;
      float v154 = v153;
      float v155 = *v149++;
      float v156 = sqrtf(v155);
      float v157 = *v150++;
      *v152++ = (float)((float)(1.0 - v154) * sqrtf(v157)) + (float)(v154 * v156);
      v148 = (float *)((char *)v148 - 1);
    }
    while (v148);
  }
  vDSP_vsq(v446, 1, v147, 1, v447);
  float v450 = 0.25;
  float v449 = 0.5;
  AudioUnitParameterValue v158 = v444;
  float *v444 = 0.0;
  long long v159 = (const float **)(v448 + 168);
  vDSP_Length v160 = v447 - 1;
  vDSP_vsmul(*(const float **)(v448 + 168), 1, &v450, v158 + 1, 1, v447 - 1);
  vDSP_vsma(*v159 + 1, 1, &v450, v444, 1, v444, 1, v160);
  vDSP_vsma(*v159, 1, &v449, v444, 1, (float *)*v159, 1, v447);
  uint64_t v161 = v448;
  v162 = *v159;
  if (!*(_DWORD *)(v448 + 24) && (int)v439 >= 1) {
    memset_pattern16((void *)*v159, &unk_1BB873A60, 4 * (v439 - 1) + 4);
  }
  v163 = (const float **)(v161 + 136);
  vDSP_vmul(v162 + 1, 1, (const float *)(*(void *)(v161 + 136) + 4), 2, (float *)(*(void *)(v161 + 136) + 4), 2, v160);
  uint64_t v164 = (const float **)(v448 + 168);
  vDSP_vmul(*(const float **)(v448 + 168), 1, *v163, 2, (float *)*v163, 2, v447);
  unsigned int v165 = *v164;
  float v166 = (*v164)[v160];
  long long v167 = (float *)v447;
  uint64_t v168 = 2 * (int)v447;
  uint64_t v169 = (int)v168 - 1;
  (*v163)[v169] = v166 * (*v163)[v169];
  vDSP_vmul(v165, 1, *(const float **)(v448 + 200), 1, *(float **)(v448 + 384), 1, (vDSP_Length)v167);
  MEMORY[0x1F4188790](v170);
  v172 = (float *)((char *)&v424 - v171);
  v173 = (_DWORD *)((char *)&v424 + 4 * v447 - v171);
  *(void *)float __B = v173 + 1;
  *(void *)&__B[8] = (char *)&v424 - v171 + 8;
  vDSP_ctoz((const DSPComplex *)*v163 + 1, 2, (const DSPSplitComplex *)__B, 1, v447 - 2);
  v174 = *v163;
  *(void *)v172 = *(void *)*v163;
  v172[v169] = v174[v168 - 2];
  _DWORD *v173 = LODWORD(v174[v169]);
  *(void *)float __B = v172;
  *(void *)&__B[8] = v173;
  LODWORD(v462) = 939524096;
  vDSP_vsmul(v172, 1, (const float *)&v462, v172, 1, v168);
  uint64_t v175 = v448;
  size_t v176 = 4 * v447;
  memcpy(*(void **)(v448 + 584), *(const void **)__B, 4 * v447);
  float result = memcpy(*(void **)(v175 + 592), *(const void **)&__B[8], v176);
  if (*(_DWORD *)(v175 + 28))
  {
    float v178 = *(float *)(v175 + 332);
    *(_DWORD *)(v175 + 564) = v178 > *(float *)(v175 + 44) || *(_DWORD *)(v175 + 564) && v178 > *(float *)(v175 + 48);
  }
  return result;
}

float CNoiseSuppressorV4::AweightSPL(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  vDSP_Length v2 = *(int *)(a1 + 4);
  MEMORY[0x1F4188790](a1);
  vDSP_Length v4 = (float *)((char *)&v9 - ((v3 + 15) & 0x7FFFFFFF0));
  HIDWORD(v9) = 0;
  vDSP_vmul(*(const float **)(v5 + 344), 1, v6, 1, v4, 1, v2);
  vDSP_sve(v4, 1, (float *)&v9 + 1, v2);
  float v7 = *(float *)(a1 + 356) + (float)(log10f(*(float *)(a1 + 352) * *((float *)&v9 + 1)) * 10.0);
  if (v7 < 0.0) {
    float v7 = 0.0;
  }
  return fminf(v7, 100.0);
}

void CNoiseSuppressorV4::speex_preprocess_state_init(int a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7)
{
  uint64_t v12 = (char *)malloc_type_malloc(0x2C8uLL, 0x2C8E6D5CuLL);
  if (v12)
  {
    uint64_t v13 = (uint64_t)v12;
    bzero(v12 + 8, 0x2C0uLL);
    *(_DWORD *)uint64_t v13 = a1;
    *(_DWORD *)(v13 + 4) = a1;
    *(_DWORD *)(v13 + 428) = a3;
    if (a4) {
      operator new();
    }
    std::unique_ptr<NoiseSuppression::Noise::LPCore>::reset[abi:ne180100]((uint64_t *)(v13 + 688), 0);
    if (a7)
    {
      *(_DWORD *)(v13 + 8) = a2;
      *(_DWORD *)(v13 + 12) = 24;
      CNoiseSuppressorV4::SetNoiseEstimator(v13, a5);
    }
    MultiRadixRealFFT_Create();
  }
  exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
  float v15 = std::bad_alloc::bad_alloc(exception);
}

void sub_1BB6B0B40(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<NoiseSuppression::Noise::LPCore>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *float result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 608);
    if (v3)
    {
      *(void *)(v2 + 616) = v3;
      operator delete(v3);
    }
    vDSP_Length v4 = *(void **)(v2 + 584);
    if (v4)
    {
      *(void *)(v2 + 592) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(v2 + 560);
    if (v5)
    {
      *(void *)(v2 + 568) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(v2 + 536);
    if (v6)
    {
      *(void *)(v2 + 544) = v6;
      operator delete(v6);
    }
    float v7 = *(void **)(v2 + 512);
    if (v7)
    {
      *(void *)(v2 + 520) = v7;
      operator delete(v7);
    }
    int v8 = *(void **)(v2 + 488);
    if (v8)
    {
      *(void *)(v2 + 496) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void **)(v2 + 464);
    if (v9)
    {
      *(void *)(v2 + 472) = v9;
      operator delete(v9);
    }
    uint64_t v10 = *(void **)(v2 + 440);
    if (v10)
    {
      *(void *)(v2 + 448) = v10;
      operator delete(v10);
    }
    float v11 = *(void **)(v2 + 416);
    if (v11)
    {
      *(void *)(v2 + 424) = v11;
      operator delete(v11);
    }
    uint64_t v12 = *(void **)(v2 + 392);
    if (v12)
    {
      *(void *)(v2 + 400) = v12;
      operator delete(v12);
    }
    uint64_t v13 = *(void **)(v2 + 368);
    if (v13)
    {
      *(void *)(v2 + 376) = v13;
      operator delete(v13);
    }
    uint64_t v14 = *(void **)(v2 + 344);
    if (v14)
    {
      *(void *)(v2 + 352) = v14;
      operator delete(v14);
    }
    float v15 = *(void **)(v2 + 320);
    if (v15)
    {
      *(void *)(v2 + 328) = v15;
      operator delete(v15);
    }
    uint64_t v16 = *(void **)(v2 + 296);
    if (v16)
    {
      *(void *)(v2 + 304) = v16;
      operator delete(v16);
    }
    int v17 = *(void **)(v2 + 272);
    if (v17)
    {
      *(void *)(v2 + 280) = v17;
      operator delete(v17);
    }
    std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v2 + 264), 0);
    std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v2 + 256), 0);
    std::unique_ptr<VPTimeFreqConverter>::reset[abi:ne180100]((VPTimeFreqConverter **)(v2 + 248), 0);
    uint64_t v18 = *(void *)(v2 + 240);
    *(void *)(v2 + 240) = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    int v19 = *(void **)(v2 + 232);
    *(void *)(v2 + 232) = 0;
    if (v19) {
      std::default_delete<NoiseSuppression::Noise::LPCPitch>::operator()[abi:ne180100](v19);
    }
    uint64_t v20 = *(void *)(v2 + 224);
    *(void *)(v2 + 224) = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void CNoiseSuppressorV4::SetNoiseEstimator(uint64_t a1, int a2)
{
  if (a2) {
    operator new();
  }
  operator new();
}

void sub_1BB6B109C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C185D370](v13, 0x10B1C40E3F849BDLL);
  uint64_t v16 = (unsigned int *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v17 = v16;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      CAXException::FormatError((CAXException *)v17[66], (char *)&buf, 0x100uLL);
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "suppressor_classV4.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1802;
      WORD1(a10) = 2080;
      *(void *)((char *)&a10 + 4) = v17 + 2;
      WORD6(a10) = 2080;
      *(void *)((char *)&a10 + 14) = &buf;
      uint64_t v18 = MEMORY[0x1E4F14500];
      int v19 = "%25s:%-5d Error in SetNoiseEstimator(): %s (%s)\n";
      p_AudioTimeStamp buf = (uint8_t *)&a9;
      uint32_t v21 = 38;
LABEL_7:
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, v19, p_buf, v21);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(void *)((char *)&buf + 4) = "suppressor_classV4.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 1804;
    uint64_t v18 = MEMORY[0x1E4F14500];
    int v19 = "%25s:%-5d Unspecified error in SetNoiseEstimator().\n";
    p_AudioTimeStamp buf = (uint8_t *)&buf;
    uint32_t v21 = 18;
    goto LABEL_7;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BB6B1068);
}

void CNoiseSuppressorV4::speex_preprocess_state_destroy(uint64_t a1)
{
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 160));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));
  free(*(void **)(a1 + 184));
  free(*(void **)(a1 + 192));
  free(*(void **)(a1 + 216));
  free(*(void **)(a1 + 224));
  free(*(void **)(a1 + 200));
  free(*(void **)(a1 + 208));
  free(*(void **)(a1 + 232));
  free(*(void **)(a1 + 240));
  free(*(void **)(a1 + 248));
  free(*(void **)(a1 + 256));
  free(*(void **)(a1 + 264));
  free(*(void **)(a1 + 376));
  free(*(void **)(a1 + 272));
  free(*(void **)(a1 + 280));
  free(*(void **)(a1 + 288));
  free(*(void **)(a1 + 296));
  free(*(void **)(a1 + 304));
  free(*(void **)(a1 + 312));
  free(*(void **)(a1 + 320));
  free(*(void **)(a1 + 368));
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 88));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 536));
  free(*(void **)(a1 + 544));
  free(*(void **)(a1 + 552));
  free(*(void **)(a1 + 384));
  free(*(void **)(a1 + 344));
  free(*(void **)(a1 + 496));
  free(*(void **)(a1 + 656));
  free(*(void **)(a1 + 664));
  free(*(void **)(a1 + 672));
  free(*(void **)(a1 + 680));
  MultiRadixFFT_Dispose(*(void *)(a1 + 576));
  free(*(void **)(a1 + 584));
  free(*(void **)(a1 + 592));
  CFilterBank::filterbank_destroy(*(void ***)(a1 + 16));
  std::unique_ptr<NoiseSuppression::Noise::LPCore>::reset[abi:ne180100]((uint64_t *)(a1 + 688), 0);
  uint64_t v2 = *(void *)(a1 + 696);
  *(void *)(a1 + 696) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 704);
  *(void *)(a1 + 704) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  free((void *)a1);
}

float CNoiseSuppressorV4::speex_preprocess_run(int *a1, char *a2, char *a3, const float *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  vDSP_Length v8 = a1[1];
  MEMORY[0x1F4188790](a1);
  MEMORY[0x1F4188790](v9);
  __Z.realp = v10;
  __Z.imagp = &v10[v8];
  v26.realp = (float *)((char *)&v26 - v11);
  v26.imagp = (float *)((char *)&v26 + 4 * v8 - v11);
  if (v12)
  {
    int v13 = 2 * v8 - *a1;
    int v14 = *a1 - v13;
    memcpy(*((void **)a1 + 15), *((const void **)a1 + 67), 4 * v13);
    memcpy((void *)(*((void *)a1 + 15) + 4 * v13), a2, 4 * *a1);
    memcpy(*((void **)a1 + 67), &a2[4 * v14], 4 * v13);
    vDSP_vmul(*((const float **)a1 + 15), 1, *((const float **)a1 + 23), 1, *((float **)a1 + 15), 1, 2 * v8);
    vDSP_ctoz(*((const DSPComplex **)a1 + 15), 2, &__Z, 1, v8);
    uint64_t v16 = (MultiRadixRealFFT *)*((void *)a1 + 72);
    if (v16)
    {
      MultiRadixRealFFT::RealInPlaceTransform(v16, &__Z, 1, v15);
LABEL_4:
      float __B = (float)(int)v8 + (float)(int)v8;
      vDSP_vsdiv(__Z.realp, 1, &__B, __Z.realp, 1, v8);
      vDSP_vsdiv(__Z.imagp, 1, &__B, __Z.imagp, 1, v8);
      goto LABEL_5;
    }
    if (SuppressorClassLogScope(void)::once != -1) {
      dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_8058);
    }
    if (SuppressorClassLogScope(void)::scope)
    {
      uint64_t v24 = *(NSObject **)SuppressorClassLogScope(void)::scope;
      if (!*(void *)SuppressorClassLogScope(void)::scope) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      float __B = 4.8151e-34;
      uint64_t v29 = "suppressor_classV4.cpp";
      __int16 v30 = 1024;
      int v31 = 480;
      _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d MultiRadixRealFFT_RealInPlaceTransform() returned an error.", (uint8_t *)&__B, 0x12u);
    }
    goto LABEL_4;
  }
LABEL_5:
  if (a3)
  {
    vDSP_Length v17 = a1[1];
    int v18 = 2 * v17 - *a1;
    int v19 = *a1 - v18;
    memcpy(*((void **)a1 + 16), *((const void **)a1 + 68), 4 * v18);
    memcpy((void *)(*((void *)a1 + 16) + 4 * v18), a3, 4 * *a1);
    memcpy(*((void **)a1 + 68), &a3[4 * v19], 4 * v18);
    vDSP_vmul(*((const float **)a1 + 16), 1, *((const float **)a1 + 23), 1, *((float **)a1 + 16), 1, 2 * v17);
    vDSP_ctoz(*((const DSPComplex **)a1 + 16), 2, &v26, 1, v17);
    uint32_t v21 = (MultiRadixRealFFT *)*((void *)a1 + 72);
    if (v21)
    {
      MultiRadixRealFFT::RealInPlaceTransform(v21, &v26, 1, v20);
LABEL_8:
      float __B = (float)(int)v17 + (float)(int)v17;
      vDSP_vsdiv(v26.realp, 1, &__B, v26.realp, 1, v17);
      vDSP_vsdiv(v26.imagp, 1, &__B, v26.imagp, 1, v17);
      vDSP_Length v22 = &v26;
      goto LABEL_10;
    }
    if (SuppressorClassLogScope(void)::once != -1) {
      dispatch_once(&SuppressorClassLogScope(void)::once, &__block_literal_global_8058);
    }
    if (SuppressorClassLogScope(void)::scope)
    {
      uint64_t v25 = *(NSObject **)SuppressorClassLogScope(void)::scope;
      if (!*(void *)SuppressorClassLogScope(void)::scope) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      float __B = 4.8151e-34;
      uint64_t v29 = "suppressor_classV4.cpp";
      __int16 v30 = 1024;
      int v31 = 510;
      _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d MultiRadixRealFFT_RealInPlaceTransform() returned an error.", (uint8_t *)&__B, 0x12u);
    }
    goto LABEL_8;
  }
  vDSP_Length v22 = 0;
LABEL_10:
  CNoiseSuppressorV4::speex_preprocess_run_freq((uint64_t)a1, (const float **)&__Z.realp, (const float **)&v22->realp, a4);
  if (a2) {
    return CNoiseSuppressorV4::speex_synthesis(a1, (float *)a2);
  }
  return result;
}

void **CNoiseSuppressorV4::speex_preprocess_load_known_noise(void **result, uint64_t a2, int a3)
{
  if (result && a2)
  {
    vDSP_Length v4 = result;
    float v5 = (float)*((int *)result + 2);
    int v6 = *(_DWORD *)a2;
    int v7 = *(_DWORD *)(a2 + 4);
    int v8 = *((_DWORD *)result + 1);
    if (v5 == (float)v7 && v8 == v6)
    {
      float result = (void **)memcpy(result[24], *(const void **)(a2 + 8), 4 * v8);
    }
    else if (v8 >= 1)
    {
      float v10 = v5 / ((double)v8 + (double)v8);
      float v11 = ((double)v6 + (double)v6) / (double)v7;
      uint64_t v12 = *((unsigned int *)result + 1);
      int v13 = (float *)result[24];
      float v14 = 0.0;
      do
      {
        uint64_t v15 = (int)(float)(v11 * (float)(int)v14);
        if ((int)v15 + 1 >= v6) {
          float v16 = *(float *)(*(void *)(a2 + 8) + 4 * (v6 - 1));
        }
        else {
          float v16 = (float)((float)((float)(v15 + 1) - (float)(v14 * v11)) * *(float *)(*(void *)(a2 + 8) + 4 * v15))
        }
              + (float)(*(float *)(*(void *)(a2 + 8) + 4 * (v15 + 1)) * (float)((float)(v14 * v11) - (float)(int)v15));
        *v13++ = v16;
        float v14 = v14 + v10;
        --v12;
      }
      while (v12);
    }
    if (a3 == 2)
    {
      vDSP_Length v17 = v4 + 28;
    }
    else
    {
      if (a3 != 1) {
        return result;
      }
      vDSP_Length v17 = v4 + 27;
    }
    int v18 = *v17;
    int v19 = v4[24];
    size_t v20 = 4 * *((int *)v4 + 1);
    return (void **)memcpy(v18, v19, v20);
  }
  return result;
}

void AULoudspeakerManagerV2::newDspLibAlgorithm(AULoudspeakerManagerV2 *this)
{
}

void sub_1BB6B1A04(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F1C407C35469FLL);
  _Unwind_Resume(a1);
}

uint64_t AULoudspeakerManagerV2::Version(AULoudspeakerManagerV2 *this)
{
  return 50331648;
}

uint64_t AULoudspeakerManagerV2::SupportedNumChannels(AULoudspeakerManagerV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AULoudspeakerManagerV2::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 5;
}

uint64_t AULoudspeakerManagerV2::GetParameterInfo(AULoudspeakerManagerV2 *this, unsigned int a2, uint64_t a3, AudioUnitParameterInfo *buffer)
{
  switch((int)a3)
  {
    case 1073741824:
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x447A000000000000;
      *(void *)&buffer->defaultValue = 0x4880A00000000000;
      CFStringRef v5 = @"ModeledAmplifierPower";
      goto LABEL_9;
    case 1073741825:
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x477FFF0000000000;
      *(void *)&buffer->defaultValue = 0x4880A00000000000;
      CFStringRef v5 = @"LoudspeakerHealthBitField";
      goto LABEL_9;
    case 1073741826:
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minValue = 0x447A000000000000;
      *(void *)&buffer->defaultValue = 0x4880A00000000000;
      CFStringRef v5 = @"AmplifierInputPowerPerSpeaker";
      goto LABEL_9;
    case 1073741827:
      buffer->unit = kAudioUnitParameterUnit_Degrees;
      *(void *)&buffer->minValue = 0x447A0000C2C80000;
      *(void *)&buffer->defaultValue = 0x4880A00041A00000;
      CFStringRef v5 = @"TemperaturePerSpeaker";
LABEL_9:
      buffer->cfNameString = v5;
      CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      break;
    default:
      uint64_t result = AUDspLibWithNewParameters::GetParameterInfo(this, a2, a3, buffer);
      break;
  }
  return result;
}

BOOL AULoudspeakerManagerV2::BusCountWritable(AULoudspeakerManagerV2 *this, int a2)
{
  return a2 == 1;
}

uint64_t AULoudspeakerManagerV2::SetParameter(AULoudspeakerManagerV2 *this, uint64_t a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v7 = AUDspLibWithNewParameters::SetParameter(this, a2, a3, a4, a5);
  uint64_t v8 = (*(uint64_t (**)(AULoudspeakerManagerV2 *))(*(void *)this + 640))(this);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 8))(v8, a2);
  if (v9 != 1) {
    return v7;
  }
  if (!HIDWORD(v9))
  {
    if (v10 != 9) {
      return v7;
    }
    goto LABEL_10;
  }
  if ((HIDWORD(v9) - 10) <= 7 && (v10 - 29) < 2)
  {
LABEL_10:
    if (*((unsigned char *)this + 1585)) {
      AULoudspeakerManagerV2::ReadModelData(this);
    }
  }
  return v7;
}

uint64_t AULoudspeakerManagerV2::ReadModelData(AULoudspeakerManagerV2 *this)
{
  if (!*((void *)this + 275)) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "ChannelData", 0x8000100u);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, v3);
  Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 275), key);
  CFStringRef v5 = Value;
  if (Value) {
    CFRetain(Value);
  }
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v5);
  if (!theArray)
  {
    int v8 = 1;
    goto LABEL_62;
  }
  unint64_t Count = CFArrayGetCount(theArray);
  unint64_t v7 = Count;
  if (Count > 8)
  {
LABEL_6:
    int v8 = 1;
    goto LABEL_60;
  }
  if (Count)
  {
    unint64_t v9 = 0;
    long long v43 = (uint64_t *)((char *)this + 528);
    int v10 = (const UInt8 *)"TweeterResponse";
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
      uint64_t v12 = ValueAtIndex;
      if (ValueAtIndex) {
        CFRetain(ValueAtIndex);
      }
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&theDict, v12);
      if (!theDict) {
        goto LABEL_6;
      }
      CFStringRef v13 = CFStringCreateWithCString(v2, "PressureResponse", 0x8000100u);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v46, v13);
      float v14 = CFDictionaryGetValue(theDict, v46);
      uint64_t v15 = v14;
      if (v14) {
        CFRetain(v14);
      }
      applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, v15);
      if (!theData)
      {
        int v28 = 1;
        goto LABEL_47;
      }
      if (CFDataGetLength(theData) != 4096) {
        goto LABEL_44;
      }
      if (applesauce::CF::details::has_key<char const* const&>((BOOL)theDict, v10)) {
        break;
      }
      uint64_t v29 = v10;
      unint64_t v30 = 0;
      for (unsigned int i = v43; ; i += 7)
      {
        if (*((_DWORD *)this + 397))
        {
          uint64_t v32 = (unsigned int *)*((void *)this + 268);
          unint64_t v33 = v32 == *((unsigned int **)this + 269) ? 0 : *v32;
        }
        else
        {
          unint64_t v33 = 1;
        }
        if (v30 >= v33) {
          break;
        }
        uint64_t v34 = *i;
        BytePtr = CFDataGetBytePtr(theData);
        uint64_t v36 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v34, 1);
        DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(*(void *)(v36 + 576) + 4544 * v9 + 1280, (uint64_t)BytePtr, 1024, v37, v38, v39, v40, v41, (uint64_t)v43, v44, (uint64_t)theData, (uint64_t)v46, (uint64_t)theDict, (uint64_t)theArray, (uint64_t)key);
        ++v30;
      }
      int v28 = 0;
      int v10 = v29;
LABEL_45:
      if (theData) {
        CFRelease(theData);
      }
LABEL_47:
      if (v46) {
        CFRelease(v46);
      }
      if (theDict) {
        CFRelease(theDict);
      }
      if (v28) {
        goto LABEL_6;
      }
      if (++v9 == v7) {
        goto LABEL_59;
      }
    }
    CFStringRef v16 = CFStringCreateWithCString(v2, (const char *)v10, 0x8000100u);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v44.imagp, v16);
    vDSP_Length v17 = CFDictionaryGetValue(theDict, v44.imagp);
    int v18 = v17;
    if (v17) {
      CFRetain(v17);
    }
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v44, v18);
    if (v44.realp)
    {
      if (CFDataGetLength((CFDataRef)v44.realp) == 4096)
      {
        int v19 = CFDataGetBytePtr((CFDataRef)v44.realp);
        unint64_t v20 = 0;
        for (j = v43; ; j += 7)
        {
          if (*((_DWORD *)this + 397))
          {
            vDSP_Length v22 = (unsigned int *)*((void *)this + 268);
            unint64_t v23 = v22 == *((unsigned int **)this + 269) ? 0 : *v22;
          }
          else
          {
            unint64_t v23 = 1;
          }
          if (v20 >= v23) {
            break;
          }
          uint64_t v24 = *j;
          uint64_t v25 = CFDataGetBytePtr(theData);
          DspLib::LoudspeakerManagerV2::Algorithm::setPressureResponse(v24, (uint64_t)v25, 1024, v9, (uint64_t)v19, 1024, v26, v27, (uint64_t)v43, v44, (uint64_t)theData, (uint64_t)v46, (uint64_t)theDict, (uint64_t)theArray, (uint64_t)key);
          ++v20;
        }
        if (v44.realp) {
          CFRelease(v44.realp);
        }
        int v10 = (const UInt8 *)"TweeterResponse";
        if (v44.imagp) {
          CFRelease(v44.imagp);
        }
        int v28 = 0;
        goto LABEL_45;
      }
      if (v44.realp) {
        CFRelease(v44.realp);
      }
    }
    if (v44.imagp) {
      CFRelease(v44.imagp);
    }
LABEL_44:
    int v28 = 1;
    goto LABEL_45;
  }
LABEL_59:
  int v8 = 0;
LABEL_60:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_62:
  if (key) {
    CFRelease(key);
  }
  if (v8) {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_1BB6B2010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va6, a2);
  va_start(va5, a2);
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  CFStringRef v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFStringRef v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  unint64_t v7 = va_arg(va3, const void *);
  va_copy(va4, va3);
  unint64_t v9 = va_arg(va4, const void *);
  va_copy(va5, va4);
  float v11 = va_arg(va5, const void *);
  va_copy(va6, va5);
  CFStringRef v13 = va_arg(va6, const void *);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  applesauce::CF::DataRef::~DataRef((const void **)va2);
  applesauce::CF::StringRef::~StringRef((const void **)va3);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va4);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va5);
  applesauce::CF::StringRef::~StringRef((const void **)va6);
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerManagerV2::Algorithm::setPressureResponse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, DSPSplitComplex a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v26 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
  if (a5)
  {
    uint64_t v27 = (void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
    unint64_t v28 = DspLib::LoudspeakerController::Algorithm::channelForDriver(v27, 1, a4);
    DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(*(void *)(v26 + 576) + 4544 * v28 + 1280, a2, a3, v29, v30, v31, v32, v33, v36, v37, v38, v39, v40, v41, v42);
    uint64_t v26 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
    uint64_t v34 = (void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
    a4 = DspLib::LoudspeakerController::Algorithm::channelForDriver(v34, 2, a4);
    a2 = a5;
    a3 = a6;
  }
  uint64_t v35 = *(void *)(v26 + 576) + 4544 * a4 + 1280;

  DspLib::LoudspeakerController::MaskingEstimator::setPressureMapping(v35, a2, a3, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14, a15);
}

unint64_t DspLib::LoudspeakerController::Algorithm::channelForDriver(void *a1, int a2, uint64_t a3)
{
  if (!a1[63]) {
    return a3;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 56))(a1)) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = a1[64];
    if (*(_DWORD *)(v8 + v6) == a2 && *(void *)(v8 + v6 + 8) == a3) {
      break;
    }
    ++v7;
    v6 += 16;
    if (v7 >= (*(unsigned int (**)(void *))(*a1 + 56))(a1)) {
      return 0;
    }
  }
  return v7;
}

uint64_t AULoudspeakerManagerV2::GetParameter(AULoudspeakerManagerV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  uint64_t v7 = *((void *)this + 66);
  switch(a2)
  {
    case 0x40000000u:
      float Parameter = *(float *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(*((void *)this + 66), 1) + 484);
      goto LABEL_4;
    case 0x40000001u:
      float Parameter = (float)DspLib::LoudspeakerHealth::speakerHealthStatus((DspLib::LoudspeakerHealth *)(v7 + 600));
      goto LABEL_4;
    case 0x40000002u:
      uint64_t v13 = a4 >> 30;
      if ((a4 & 0x20000000) != 0)
      {
        float Parameter = *(float *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(*((void *)this + 66), 1)
                             + 4 * v13
                             + 476);
        goto LABEL_4;
      }
      unsigned int v14 = a4 & 0x1FFFFFFF;
      *a5 = 0.0;
      if ((a4 & 0x1FFFFFFF) < (*(unsigned int (**)(uint64_t))(*(void *)v7 + 56))(v7))
      {
        float Parameter = *(float *)(*(void *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(v7, 1) + 576)
                             + 4544 * v14
                             + 4 * v13
                             + 4332);
LABEL_4:
        *a5 = Parameter;
      }
      return 0;
    case 0x40000003u:
      *a5 = 0.0;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 56))(v7) <= a4) {
        return 0;
      }
      float Parameter = *(float *)(*(void *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(v7, 1) + 576)
                           + 4544 * a4
                           + 4276);
      goto LABEL_4;
    default:
      Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
      float Parameter = ausdk::AUElement::GetParameter(Element, a2);
      goto LABEL_4;
  }
}

uint64_t AULoudspeakerManagerV2::SetProperty(AULoudspeakerManagerV2 *this, int a2, int a3, unsigned int a4, CFTypeRef *a5, void *a6, int *a7)
{
  if (a2 <= 64007)
  {
    switch(a2)
    {
      case 6630:
        if (a3) {
          return 4294956430;
        }
        if (!*((unsigned char *)this + 17)) {
          return 0;
        }
        uint64_t v8 = *((void *)this + 66);
        if (!v8) {
          return 0;
        }
        uint64_t v9 = *(void *)(v8 + 360);
        if (*(void *)(v8 + 368) != v9)
        {
          uint64_t v10 = 0;
          unsigned int v11 = 1;
          do
          {
            uint64_t v12 = &a5[25 * v10];
            uint64_t v13 = v9 + 2456 * v10;
            *(_OWORD *)(v13 + 2240) = *(_OWORD *)v12;
            long long v14 = *((_OWORD *)v12 + 1);
            long long v15 = *((_OWORD *)v12 + 2);
            long long v16 = *((_OWORD *)v12 + 3);
            *(_OWORD *)(v13 + 2304) = *((_OWORD *)v12 + 4);
            *(_OWORD *)(v13 + 2288) = v16;
            *(_OWORD *)(v13 + 2272) = v15;
            *(_OWORD *)(v13 + 2256) = v14;
            long long v17 = *((_OWORD *)v12 + 5);
            long long v18 = *((_OWORD *)v12 + 6);
            long long v19 = *((_OWORD *)v12 + 7);
            *(_OWORD *)(v13 + 2368) = *((_OWORD *)v12 + 8);
            *(_OWORD *)(v13 + 2352) = v19;
            *(_OWORD *)(v13 + 2336) = v18;
            *(_OWORD *)(v13 + 2320) = v17;
            long long v20 = *((_OWORD *)v12 + 9);
            long long v21 = *((_OWORD *)v12 + 10);
            long long v22 = *((_OWORD *)v12 + 11);
            *(void *)(v13 + 2432) = v12[24];
            *(_OWORD *)(v13 + 2416) = v22;
            *(_OWORD *)(v13 + 2400) = v21;
            *(_OWORD *)(v13 + 2384) = v20;
            uint64_t v10 = v11;
            uint64_t v9 = *(void *)(v8 + 360);
          }
          while (0xF02806ABC74BE1FBLL * ((*(void *)(v8 + 368) - v9) >> 3) > v11++);
        }
        uint64_t result = 0;
        *(unsigned char *)(v8 + 356) = 1;
        return result;
      case 6631:
        goto LABEL_30;
      case 6632:
        if (a3) {
          return 4294956430;
        }
        if (a6 != 8) {
          return 4294956445;
        }
        applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&v79, *a5);
        std::string::size_type v43 = *((void *)this + 275);
        *((void *)this + 275) = v79.__r_.__value_.__r.__words[0];
        v79.__r_.__value_.__r.__words[0] = v43;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v79.__r_.__value_.__l.__data_);
        if (!*((unsigned char *)this + 17)) {
          return 0;
        }
        uint64_t result = AULoudspeakerManagerV2::ReadModelData(this);
        break;
      case 6633:
        if (a6 < 4) {
          return 4294956445;
        }
        BOOL v37 = *(_DWORD *)a5 != 0;
        *((unsigned char *)this + 2384) = v37;
        if (!*((unsigned char *)this + 17)) {
          return 0;
        }
        uint64_t result = *((void *)this + 66);
        if (result)
        {
          uint64_t v38 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(result, 1);
          uint64_t result = 0;
          *(unsigned char *)(v38 + 501) = v37;
        }
        return result;
      case 6634:
        if (a6 < 4) {
          return 4294956445;
        }
        if (!*((unsigned char *)this + 17)) {
          return 0;
        }
        uint64_t result = *((void *)this + 66);
        if (result)
        {
          uint64_t v36 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm(result, 1);
          DspLib::LoudspeakerController::Algorithm::resetNVM(v36);
          uint64_t result = 0;
          *((unsigned char *)this + 2385) = 1;
        }
        return result;
      default:
        if (a2 != 64004) {
          goto LABEL_30;
        }
        if (a6 < 4) {
          return 4294956445;
        }
        int v32 = *(_DWORD *)a5;
        uint64_t v33 = *(uint64_t (***)(void))(*(uint64_t (**)(AULoudspeakerManagerV2 *))(*(void *)this + 640))(this);
        uint64_t v34 = (*v33)();
        v35.n128_u64[0] = 0;
        if (v32) {
          v35.n128_f32[0] = 1.0;
        }
        (*(void (**)(AULoudspeakerManagerV2 *, uint64_t, void, void, void, __n128))(*(void *)this
                                                                                                  + 152))(this, v34, 0, 0, 0, v35);
        return 0;
    }
    return result;
  }
  if (a2 > 1835889522)
  {
    if (a2 == 1835889523)
    {
      if (*((unsigned char *)this + 17))
      {
        uint64_t v40 = *((void *)this + 66);
        if (v40)
        {
          CFTypeRef v41 = *a5;
          if (*a5)
          {
            CFRetain(*a5);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v79, v41);
            CFDictionaryRef v42 = (const __CFDictionary *)v79.__r_.__value_.__r.__words[0];
          }
          else
          {
            CFDictionaryRef v42 = 0;
            v79.__r_.__value_.__r.__words[0] = 0;
          }
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v42, @"ModelManagerSpeakerForStatus");
          CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v79.__r_.__value_.__l.__data_, @"ModelManagerModelTypeForStatus");
          CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v79.__r_.__value_.__l.__data_, @"ModelManagerMappingMethodForStatus");
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          LODWORD(v77.__r_.__value_.__l.__data_) = 0;
          LODWORD(theArray) = 0;
          if (Value)
          {
            if (v51)
            {
              CFNumberRef v53 = v52;
              if (v52)
              {
                CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
                CFNumberGetValue(v51, kCFNumberIntType, &v77);
                CFNumberGetValue(v53, kCFNumberIntType, &theArray);
                int v54 = (int)theArray;
                *(void *)(v40 + 300) = LODWORD(valuePtr.__r_.__value_.__l.__data_) | ((unint64_t)LODWORD(v77.__r_.__value_.__l.__data_) << 32);
                *(_DWORD *)(v40 + 308) = v54;
              }
            }
          }
          if (v79.__r_.__value_.__r.__words[0]) {
            CFRelease(v79.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    else
    {
      if (a2 != 1886679923) {
        goto LABEL_30;
      }
      if (*((unsigned char *)this + 17))
      {
        uint64_t v29 = *((void *)this + 66);
        if (v29)
        {
          CFTypeRef v30 = *a5;
          if (*a5)
          {
            CFRetain(*a5);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v79, v30);
            CFDictionaryRef v31 = (const __CFDictionary *)v79.__r_.__value_.__r.__words[0];
          }
          else
          {
            CFDictionaryRef v31 = 0;
            v79.__r_.__value_.__r.__words[0] = 0;
          }
          CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v31, @"PilotToneSpeakerForStatus");
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          if (v49)
          {
            CFNumberGetValue(v49, kCFNumberIntType, &valuePtr);
            *(_DWORD *)(v29 + 528) = valuePtr.__r_.__value_.__l.__data_;
          }
          if (v79.__r_.__value_.__r.__words[0]) {
            CFRelease(v79.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    return 0;
  }
  if (a2 != 64008)
  {
    if (a2 == 64009)
    {
      if (a6 < 8) {
        return 4294956445;
      }
      CFTypeRef v25 = *a5;
      if (*a5) {
        CFRetain(*a5);
      }
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v25);
      CFArrayRef v26 = theArray;
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        CFArrayRef v28 = theArray;
        if (theArray) {
          CFIndex v72 = CFArrayGetCount(theArray);
        }
        else {
          CFIndex v72 = 0;
        }
        if (Count && (v26 != v28 || v72))
        {
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v26, 0, (applesauce::CF::DictionaryRef *)&v75);
          CFTypeRef v55 = v75;
          if (v75)
          {
            CFRetain(v75);
            CFTypeRef v74 = v55;
            if (((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>((const __CFDictionary *)v55, (const UInt8 *)"thiele_small_data_source_id") & 0xFF00000000) != 0)
            {
              if (DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_fs"))
              {
                if (DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_qts"))
                {
                  if (DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_re"))
                  {
                    if (DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_t"))
                    {
                      BOOL v56 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_le");
                      BOOL v57 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_kms");
                      BOOL v58 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_mms");
                      BOOL v59 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_bi");
                      if (((v56 && v57 && v58 && v59) & DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_rms")) == 1)
                      {
                        uint64_t v60 = (float *)operator new(0x30uLL);
                        *((void *)v60 + 1) = 0;
                        *((void *)v60 + 2) = 0;
                        *(void *)uint64_t v60 = &unk_1F14BDF58;
                        v60[6] = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_kms");
                        v60[7] = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_le");
                        v60[8] = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_bi");
                        v60[9] = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_mms");
                        v60[10] = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_rms");
                      }
                      BOOL v61 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_crest");
                      BOOL v62 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_coffset");
                      BOOL v63 = DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_cmin");
                      if (((v61 && v62) & v63 & DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>((const __CFDictionary **)&v74, (const UInt8 *)"thiele_small_cmax")) == 1)operator new(); {
                      operator new();
                      }
                    }
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v77, "thiele_small_t");
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v77, &valuePtr);
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v79);
                    std::runtime_error::runtime_error(exception, &v79);
                  }
                  uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v77, "thiele_small_re");
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v77, &valuePtr);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v79);
                  std::runtime_error::runtime_error(v66, &v79);
                }
                float v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::string::basic_string[abi:ne180100]<0>(&v77, "thiele_small_qts");
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v77, &valuePtr);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v79);
                std::runtime_error::runtime_error(v70, &v79);
              }
              float v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v77, "thiele_small_fs");
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v77, &valuePtr);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v79);
              std::runtime_error::runtime_error(v67, &v79);
            }
            float v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v77, "thiele_small_data_source_id");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Speaker calibration data is missing '", &v77, &valuePtr);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("' key", &valuePtr, &v79);
            std::runtime_error::runtime_error(v71, &v79);
          }
          CFTypeRef v74 = 0;
          double v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v68, "Could not construct");
        }
        if (theArray) {
          CFRelease(theArray);
        }
      }
      if (*((unsigned char *)this + 17))
      {
        uint64_t v64 = *((void *)this + 66);
        if (v64) {
          DspLib::LoudspeakerManagerV2::ModelManager::setSpTSCalibration(v64 + 296, (char **)this + 276);
        }
      }
      return 0;
    }
LABEL_30:
    return AUDspLib::SetProperty(this, a2, a3, a4, (int *)a5, a6, a7);
  }
  uint64_t result = 4294956445;
  if (a5 && a6 == 8)
  {
    CFTypeRef v39 = *a5;
    if (*a5)
    {
      CFRetain(*a5);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v39);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    uint64_t v44 = 0;
    long long v45 = (char *)this + 2236;
    do
    {
      if (!cf)
      {
        uint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v65, "Could not construct");
      }
      AULoudspeakerManagerV2::TimeScale<float>::getKey(&v79, *(CFTypeRef *)&v45[8 * v44 + 20]);
      CFDictionaryRef v46 = applesauce::CF::DictionaryRef_proxy::at_as<float,applesauce::CF::StringRef>((const __CFDictionary *)cf, (const void **)&v79.__r_.__value_.__l.__data_);
      if (v79.__r_.__value_.__r.__words[0]) {
        CFRelease(v79.__r_.__value_.__l.__data_);
      }
      if (((unint64_t)v46 & 0xFF00000000) != 0)
      {
        float v47 = *(float *)&v46 / *((float *)this + 558);
        if (*(float *)&v45[v44] != v47)
        {
          *(float *)&v45[v44] = v47;
          *((unsigned char *)this + 2252) = 1;
        }
      }
      v44 += 4;
    }
    while (v44 != 16);
    if (*((unsigned char *)this + 2252) && *((unsigned char *)this + 17))
    {
      uint64_t v48 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(*((void *)this + 66), 1);
      DspLib::LoudspeakerController::Algorithm::setCPMSBudgets(v48, (char *)this + 2236);
      *((unsigned char *)this + 2252) = 0;
    }
    uint64_t result = (uint64_t)cf;
    if (cf)
    {
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

void sub_1BB6B3278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v38 - 104));
  _Unwind_Resume(a1);
}

void *AULoudspeakerManagerV2::TimeScale<float>::getKey(void *result, CFTypeRef cf)
{
  CFStringRef v3 = result;
  if (cf) {
    uint64_t result = CFRetain(cf);
  }
  void *v3 = cf;
  return result;
}

void std::default_delete<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::operator()[abi:ne180100](uint64_t a1)
{
  CFAllocatorRef v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFStringRef v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

void DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::~Speaker(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

float DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::get<float>(const __CFDictionary **a1, const UInt8 *a2)
{
  CFDictionaryRef v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  CFNumberRef v3 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2);
  if (((unint64_t)v3 & 0xFF00000000) == 0) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  return *(float *)&v3;
}

void sub_1BB6B35E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::ConvoyCalibrationProperties  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_pointer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::ConvoyCalibrationProperties  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

BOOL DspLib::LoudspeakerManagerV2::Calibration::SpTS::v2::Speaker::has<float>(const __CFDictionary **a1, const UInt8 *a2)
{
  CFDictionaryRef v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return ((unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<float,char const*&>(v2, a2) & 0xFF00000000) != 0;
}

void sub_1BB6B36C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::LoudspeakerManagerV2::Calibration::SpTS::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BDF58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<DspLib::LoudspeakerManagerV2::Calibration::SpTS::DispCalibrationProperties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14BDF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AULoudspeakerManagerV2::GetProperty(AULoudspeakerManagerV2 *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  if (a2 <= 64003)
  {
    switch(a2)
    {
      case 6630:
        if (a3) {
          return 4294956430;
        }
        uint64_t v9 = *((void *)this + 66);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 360);
          if (*(void *)(v9 + 368) != v10)
          {
            uint64_t v11 = 0;
            unsigned int v12 = 1;
            do
            {
              uint64_t v13 = v10 + 2456 * v11;
              long long v14 = &a5[25 * v11];
              *(_OWORD *)long long v14 = *(_OWORD *)(v13 + 2240);
              long long v15 = *(_OWORD *)(v13 + 2256);
              long long v16 = *(_OWORD *)(v13 + 2272);
              long long v17 = *(_OWORD *)(v13 + 2304);
              *((_OWORD *)v14 + 3) = *(_OWORD *)(v13 + 2288);
              *((_OWORD *)v14 + 4) = v17;
              *((_OWORD *)v14 + 1) = v15;
              *((_OWORD *)v14 + 2) = v16;
              long long v18 = *(_OWORD *)(v13 + 2320);
              long long v19 = *(_OWORD *)(v13 + 2336);
              long long v20 = *(_OWORD *)(v13 + 2368);
              *((_OWORD *)v14 + 7) = *(_OWORD *)(v13 + 2352);
              *((_OWORD *)v14 + 8) = v20;
              *((_OWORD *)v14 + 5) = v18;
              *((_OWORD *)v14 + 6) = v19;
              long long v21 = *(_OWORD *)(v13 + 2384);
              long long v22 = *(_OWORD *)(v13 + 2400);
              long long v23 = *(_OWORD *)(v13 + 2416);
              v14[24] = *(CFDictionaryRef *)(v13 + 2432);
              *((_OWORD *)v14 + 10) = v22;
              *((_OWORD *)v14 + 11) = v23;
              *((_OWORD *)v14 + 9) = v21;
              uint64_t v11 = v12;
              uint64_t v10 = *(void *)(v9 + 360);
            }
            while (0xF02806ABC74BE1FBLL * ((*(void *)(v9 + 368) - v10) >> 3) > v12++);
          }
        }
        uint64_t v25 = 0;
        int32x2_t v26 = vdup_n_s32(0xC2C80000);
        do
        {
          CFDictionaryRef v101 = 0;
          long long v99 = 0uLL;
          long long v100 = 0uLL;
          long long v97 = 0uLL;
          long long v98 = 0uLL;
          long long v95 = 0uLL;
          long long v96 = 0uLL;
          long long v93 = 0uLL;
          long long v94 = 0uLL;
          long long v92 = 0uLL;
          LODWORD(v91[2]) = 0;
          *(_OWORD *)&v91[4] = 0uLL;
          LODWORD(v91[0]) = 1;
          *(CFTypeRef *)((char *)v91 + 4) = 0;
          *(CFTypeRef *)((char *)&v91[1] + 1) = 0;
          *(CFTypeRef *)((char *)&v91[2] + 4) = 0;
          *(CFTypeRef *)((char *)&v91[3] + 1) = 0;
          *(CFTypeRef *)((char *)&v91[4] + 4) = 0;
          uint64_t v27 = 52;
          BYTE4(v91[5]) = 0;
          do
          {
            CFArrayRef v28 = (char *)v91 + v27;
            *(void *)CFArrayRef v28 = 0;
            *((void *)v28 + 1) = 0;
            v28[24] = 0;
            *((void *)v28 + 2) = 0;
            *(void *)(v28 + 28) = 0;
            v28[36] = 0;
            v27 += 44;
            v28[40] = 0;
          }
          while (v28 + 44 != (char *)&v100 + 8);
          *((int32x2_t *)&v100 + 1) = v26;
          uint64_t v29 = &a5[25 * v25];
          long long v30 = v98;
          long long v31 = v100;
          *((_OWORD *)v29 + 10) = v99;
          *((_OWORD *)v29 + 11) = v31;
          long long v32 = v94;
          long long v33 = v96;
          long long v34 = v97;
          *((_OWORD *)v29 + 6) = v95;
          *((_OWORD *)v29 + 7) = v33;
          *((_OWORD *)v29 + 8) = v34;
          *((_OWORD *)v29 + 9) = v30;
          long long v35 = v92;
          long long v36 = v93;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v91[4];
          *((_OWORD *)v29 + 3) = v35;
          LODWORD(v101) = 1065353216;
          BYTE4(v101) = 0;
          v29[24] = v101;
          *((_OWORD *)v29 + 4) = v36;
          *((_OWORD *)v29 + 5) = v32;
          long long v37 = *(_OWORD *)&v91[2];
          ++v25;
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v91;
          *((_OWORD *)v29 + 1) = v37;
        }
        while (v25 != 8);
        return 0;
      case 6632:
        if (a3) {
          return 4294956430;
        }
        CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *((CFDictionaryRef *)this + 275));
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v91, Copy);
        uint64_t result = 0;
        CFDictionaryRef v79 = (const __CFDictionary *)v91[0];
        break;
      case 6633:
        uint64_t result = 0;
        int v72 = *((unsigned __int8 *)this + 2384);
        goto LABEL_113;
      case 6634:
        uint64_t result = 0;
        int v72 = *((unsigned __int8 *)this + 2385);
        goto LABEL_113;
      default:
        goto LABEL_119;
    }
LABEL_123:
    *a5 = v79;
    return result;
  }
  switch(a2)
  {
    case 64004:
      LODWORD(v91[0]) = 0;
      float v73 = *(uint64_t (***)(void))(*(uint64_t (**)(AULoudspeakerManagerV2 *))(*(void *)this + 640))(this);
      uint64_t v74 = (*v73)();
      (*(void (**)(AULoudspeakerManagerV2 *, uint64_t, void, void, CFTypeRef *))(*(void *)this + 144))(this, v74, 0, 0, v91);
      uint64_t result = 0;
      int v72 = *(float *)v91 != 0.0;
LABEL_113:
      *(_DWORD *)a5 = v72;
      break;
    case 64008:
      uint64_t v75 = 0;
      memset(v91, 0, 32);
      LODWORD(v91[4]) = 1065353216;
      int v76 = (char *)this + 2256;
      do
      {
        float v77 = *(float *)&v76[v75 - 20];
        float v78 = *((float *)this + 558);
        AULoudspeakerManagerV2::TimeScale<float>::getKey(v88, *(CFTypeRef *)&v76[8 * v75]);
        *(void *)&long long v85 = v88;
        *((float *)std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::__emplace_unique_key_args<applesauce::CF::StringRef,std::piecewise_construct_t const&,std::tuple<applesauce::CF::StringRef&&>,std::tuple<>>((uint64_t)v91, v88, (void **)&v85)+ 6) = v77 * v78;
        if (v88[0]) {
          CFRelease(v88[0]);
        }
        v75 += 4;
      }
      while (v75 != 16);
      applesauce::CF::make_DictionaryRef<applesauce::CF::StringRef,float>((CFDictionaryRef *)&v85, (uint64_t)v91);
      std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,float>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,float>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,float>>>::~__hash_table((uint64_t)v91);
      uint64_t result = 0;
      CFDictionaryRef v79 = (const __CFDictionary *)v85;
      goto LABEL_123;
    case 64009:
      v88[0] = 0;
      v88[1] = 0;
      CFTypeRef v89 = 0;
      CFTypeRef v39 = (uint64_t *)*((void *)this + 276);
      float v83 = (uint64_t *)*((void *)this + 277);
      if (v39 == v83)
      {
LABEL_107:
        CFArrayRef v71 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)v88);
        v91[0] = v88;
        std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
        uint64_t result = 0;
        *a5 = v71;
        return result;
      }
      while (1)
      {
        long long v85 = 0u;
        long long v86 = 0u;
        float v87 = 1.0;
        CFRetain(@"thiele_small_data_source_id");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"thiele_small_data_source_id");
        uint64_t v40 = (int *)*v39;
        if (cf) {
          CFHashCode v41 = CFHash(cf);
        }
        else {
          CFHashCode v41 = 0xD7C06285B9DE677ALL;
        }
        unint64_t v42 = *((void *)&v85 + 1);
        if (*((void *)&v85 + 1))
        {
          uint8x8_t v43 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v85 + 8));
          v43.i16[0] = vaddlv_u8(v43);
          unint64_t v44 = v43.u32[0];
          if (v43.u32[0] > 1uLL)
          {
            uint64_t v6 = (__CFString *)v41;
            if (v41 >= *((void *)&v85 + 1)) {
              uint64_t v6 = (__CFString *)(v41 % *((void *)&v85 + 1));
            }
          }
          else
          {
            uint64_t v6 = (__CFString *)((*((void *)&v85 + 1) - 1) & v41);
          }
          long long v45 = *(CFTypeRef ***)(v85 + 8 * (void)v6);
          if (v45)
          {
            for (unsigned int i = *v45; i; unsigned int i = (CFTypeRef *)*i)
            {
              unint64_t v47 = (unint64_t)i[1];
              if (v47 == v41)
              {
                if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(i + 2, (const __CFString **)&cf) == kCFCompareEqualTo)goto LABEL_59; {
              }
                }
              else
              {
                if (v44 > 1)
                {
                  if (v47 >= v42) {
                    v47 %= v42;
                  }
                }
                else
                {
                  v47 &= v42 - 1;
                }
                if ((__CFString *)v47 != v6) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v48 = operator new(0x20uLL);
        v91[0] = v48;
        v91[1] = &v86;
        LOBYTE(v91[2]) = 0;
        *uint64_t v48 = 0;
        v48[1] = v41;
        v48[2] = cf;
        CFTypeRef cf = 0;
        int valuePtr = *v40;
        CFNumberRef v49 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        v48[3] = v49;
        if (!v49)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        LOBYTE(v91[2]) = 1;
        float v50 = (float)(unint64_t)(*((void *)&v86 + 1) + 1);
        if (!v42 || (float)(v87 * (float)v42) < v50)
        {
          BOOL v51 = (v42 & (v42 - 1)) != 0;
          if (v42 < 3) {
            BOOL v51 = 1;
          }
          unint64_t v52 = v51 | (2 * v42);
          unint64_t v53 = vcvtps_u32_f32(v50 / v87);
          if (v52 <= v53) {
            size_t v54 = v53;
          }
          else {
            size_t v54 = v52;
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<__CFString const*,float,float,float,AudioUnitParameterUnit,unsigned int>>>>::__rehash<true>((uint64_t)&v85, v54);
          unint64_t v42 = *((void *)&v85 + 1);
          if ((*((void *)&v85 + 1) & (*((void *)&v85 + 1) - 1)) != 0)
          {
            if (v41 >= *((void *)&v85 + 1)) {
              uint64_t v6 = (__CFString *)(v41 % *((void *)&v85 + 1));
            }
            else {
              uint64_t v6 = (__CFString *)v41;
            }
          }
          else
          {
            uint64_t v6 = (__CFString *)((*((void *)&v85 + 1) - 1) & v41);
          }
        }
        uint64_t v55 = v85;
        BOOL v56 = *(void **)(v85 + 8 * (void)v6);
        if (v56)
        {
          *uint64_t v48 = *v56;
        }
        else
        {
          *uint64_t v48 = v86;
          *(void *)&long long v86 = v48;
          *(void *)(v55 + 8 * (void)v6) = &v86;
          if (!*v48) {
            goto LABEL_58;
          }
          unint64_t v57 = *(void *)(*v48 + 8);
          if ((v42 & (v42 - 1)) != 0)
          {
            if (v57 >= v42) {
              v57 %= v42;
            }
          }
          else
          {
            v57 &= v42 - 1;
          }
          BOOL v56 = (void *)(v85 + 8 * v57);
        }
        *BOOL v56 = v48;
LABEL_58:
        v91[0] = 0;
        ++*((void *)&v86 + 1);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v91);
LABEL_59:
        if (cf) {
          CFRelease(cf);
        }
        CFRetain(@"thiele_small_fs");
        uint64_t v6 = @"thiele_small_qts";
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_fs");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 16));
        if (v91[0]) {
          CFRelease(v91[0]);
        }
        CFRetain(@"thiele_small_qts");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_qts");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 12));
        if (v91[0]) {
          CFRelease(v91[0]);
        }
        CFRetain(@"thiele_small_re");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_re");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 4));
        if (v91[0]) {
          CFRelease(v91[0]);
        }
        CFRetain(@"thiele_small_t");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_t");
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*v39 + 8));
        if (v91[0]) {
          CFRelease(v91[0]);
        }
        uint64_t v58 = *v39;
        if (*(void *)(*v39 + 24))
        {
          CFRetain(@"thiele_small_kms");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_kms");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, *(int **)(*v39 + 24));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          CFRetain(@"thiele_small_le");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_le");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(void *)(*v39 + 24) + 4));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          CFRetain(@"thiele_small_bi");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_bi");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(void *)(*v39 + 24) + 8));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          CFRetain(@"thiele_small_mms");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_mms");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(void *)(*v39 + 24) + 12));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          uint64_t v6 = @"thiele_small_rms";
          CFRetain(@"thiele_small_rms");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_rms");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(void *)(*v39 + 24) + 16));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          uint64_t v58 = *v39;
        }
        if (*(void *)(v58 + 40))
        {
          CFRetain(@"thiele_small_crest");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_crest");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, *(int **)(*v39 + 40));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          CFRetain(@"thiele_small_coffset");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_coffset");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(void *)(*v39 + 40) + 4));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          CFRetain(@"thiele_small_cmin");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_cmin");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(void *)(*v39 + 40) + 8));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
          CFRetain(@"thiele_small_cmax");
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v91, @"thiele_small_cmax");
          std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::__emplace_unique_key_args<applesauce::CF::StringRef,applesauce::CF::StringRef,float &>((uint64_t)&v85, v91, v91, (int *)(*(void *)(*v39 + 40) + 12));
          if (v91[0]) {
            CFRelease(v91[0]);
          }
        }
        BOOL v59 = (char *)v88[1];
        if (v88[1] >= v89)
        {
          int64_t v61 = ((char *)v88[1] - (char *)v88[0]) >> 3;
          if ((unint64_t)(v61 + 1) >> 61) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v62 = (int64_t)((uint64_t)v89 - (unint64_t)v88[0]) >> 2;
          if (v62 <= v61 + 1) {
            unint64_t v62 = v61 + 1;
          }
          if ((unint64_t)v89 - (unint64_t)v88[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v62;
          }
          v91[4] = &v89;
          if (v63) {
            unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v63);
          }
          else {
            uint64_t v64 = 0;
          }
          v91[0] = (CFTypeRef)v63;
          v91[1] = (CFTypeRef)(v63 + 8 * v61);
          v91[2] = v91[1];
          v91[3] = (CFTypeRef)(v63 + 8 * v64);
          std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v91[1], (uint64_t)&v85);
          uint64_t v65 = (char *)v91[1];
          uint64_t v60 = (char *)v91[2] + 8;
          v91[2] = (char *)v91[2] + 8;
          float v67 = v88[0];
          uint64_t v66 = v88[1];
          if (v88[1] == v88[0])
          {
            int64x2_t v69 = vdupq_n_s64((unint64_t)v88[1]);
          }
          else
          {
            do
            {
              uint64_t v68 = *--v66;
              *((void *)v65 - 1) = v68;
              v65 -= 8;
              void *v66 = 0;
            }
            while (v66 != v67);
            int64x2_t v69 = *(int64x2_t *)v88;
            uint64_t v60 = (char *)v91[2];
          }
          v88[0] = v65;
          v88[1] = v60;
          *(int64x2_t *)&v91[1] = v69;
          float v70 = v89;
          CFTypeRef v89 = v91[3];
          v91[3] = v70;
          v91[0] = (CFTypeRef)v69.i64[0];
          std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)v91);
        }
        else
        {
          std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,std::unordered_map<applesauce::CF::StringRef,applesauce::CF::NumberRef> &,applesauce::CF::DictionaryRef*>((CFDictionaryRef *)v88[1], (uint64_t)&v85);
          uint64_t v60 = v59 + 8;
        }
        v88[1] = v60;
        std::__hash_table<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::__unordered_map_hasher<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::hash<applesauce::CF::StringRef>,std::equal_to<applesauce::CF::StringRef>,true>,std::__unordered_map_equal<applesauce::CF::StringRef,std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>,std::equal_to<applesauce::CF::StringRef>,std::hash<applesauce::CF::StringRef>,true>,std::allocator<std::__hash_value_type<applesauce::CF::StringRef,applesauce::CF::NumberRef>>>::~__hash_table((uint64_t)&v85);
        if (++v39 == v83) {
          goto LABEL_107;
        }
      }
    default:
LABEL_119:
      return AUDspLib::GetProperty(this, a2, a3, a4, a5, a6);
  }
  return result;
}

void sub_1BB6B4328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a15 = (void **)&a21;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void sub_1BB6B44C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  JUMPOUT(0x1BB6B44D4);
}

uint64_t AULoudspeakerManagerV2::GetPropertyInfo(AULoudspeakerManagerV2 *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 <= 64007)
  {
    switch(a2)
    {
      case 6630:
        if (a3) {
          return 4294956430;
        }
        uint64_t result = 0;
        unsigned int v7 = 1600;
        goto LABEL_19;
      case 6631:
        return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
      case 6632:
        if (a3) {
          return 4294956430;
        }
        uint64_t result = 0;
        unsigned int v7 = 8;
LABEL_19:
        *a5 = v7;
        *a6 = 1;
        return result;
      case 6633:
      case 6634:
        goto LABEL_13;
      default:
        if (a2 != 64004) {
          return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
        }
LABEL_13:
        uint64_t result = 0;
        *a6 = 1;
        unsigned int v9 = 4;
        goto LABEL_14;
    }
  }
  if (a2 > 1835889522)
  {
    if (a2 == 1835889523) {
      goto LABEL_11;
    }
    int v8 = 1886679923;
  }
  else
  {
    if (a2 == 64008) {
      goto LABEL_11;
    }
    int v8 = 64009;
  }
  if (a2 != v8) {
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
LABEL_11:
  uint64_t result = 0;
  *a6 = 1;
  unsigned int v9 = 8;
LABEL_14:
  *a5 = v9;
  return result;
}

uint64_t AULoudspeakerManagerV2::Initialize(char **this)
{
  uint64_t result = AUDspLib::Initialize((AUDspLib *)this);
  if (!result)
  {
    if (AULoudspeakerManagerV2::ReadModelData((AULoudspeakerManagerV2 *)this)) {
      return 0xFFFFFFFFLL;
    }
    CFNumberRef v3 = (DspLib::LoudspeakerManagerV2::Algorithm *)this[66];
    if (!v3)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      DspLib::LoudspeakerManagerV2::ModelManager::setSpTSCalibration((uint64_t)v3 + 296, this + 276);
      if (*((unsigned char *)this + 2252))
      {
        uint64_t v4 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)v3, 1);
        DspLib::LoudspeakerController::Algorithm::setCPMSBudgets(v4, (char *)this + 2236);
        *((unsigned char *)this + 2252) = 0;
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, @"com.apple.coreaudio");
      if (!cf[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)cf[0], (uint64_t)__p);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(cf, "LSMv2EnableLogging");
      unint64_t v5 = GetPreference<long long>((uint64_t *)__p, (uint64_t *)cf);
      char v7 = v6;
      if (v11 < 0) {
        operator delete((void *)cf[0]);
      }
      if (v7) {
        DspLib::LoudspeakerManagerV2::Algorithm::configureLogging(v3, v5);
      }
      char v8 = *((unsigned char *)this + 2384);
      *(unsigned char *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)v3, 1) + 501) = v8;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      return 0;
    }
  }
  return result;
}

void sub_1BB6B4754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  applesauce::CF::StringRef::~StringRef((const void **)&__p);
  _Unwind_Resume(a1);
}

void AULoudspeakerManagerV2::~AULoudspeakerManagerV2(AULoudspeakerManagerV2 *this)
{
  *(void *)this = &unk_1F14BDCB8;
  uint64_t v2 = 2352;
  while (1)
  {
    CFNumberRef v3 = *(const void **)((char *)this + v2);
    if (v3) {
      CFRelease(v3);
    }
    v2 -= 32;
    if (v2 == 2224)
    {
      unint64_t v5 = (void **)((char *)this + 2208);
      std::vector<std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](&v5);
      uint64_t v4 = (const void *)*((void *)this + 275);
      if (v4) {
        CFRelease(v4);
      }
      AUDspLib::~AUDspLib(this);
      JUMPOUT(0x1C185D370);
    }
  }
}

{
  uint64_t i;
  const void *v3;
  const void *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_1F14BDCB8;
  for (unsigned int i = 2352; i != 2224; i -= 32)
  {
    CFNumberRef v3 = *(const void **)((char *)this + i);
    if (v3) {
      CFRelease(v3);
    }
  }
  unint64_t v5 = (void **)((char *)this + 2208);
  std::vector<std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (const void *)*((void *)this + 275);
  if (v4) {
    CFRelease(v4);
  }

  AUDspLib::~AUDspLib(this);
}

void std::vector<std::unique_ptr<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t AULoudspeakerManagerV2::TimeScale<float>::TimeScale(uint64_t a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  if (__s)
  {
    CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
    *(void *)a1 = v5;
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    *(void *)a1 = 0;
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  return a1;
}

void sub_1BB6B4A34(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 AULoudspeakerManagerV2::TimeScale<float>::withPowerSmootherTC(uint64_t a1, uint64_t a2, float a3)
{
  CFTypeRef v6 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v6;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(float *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 28) = 1;
  return result;
}

void afSTFTData::afSTFTData(afSTFTData *this, unint64_t a2, unint64_t a3)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  CFTypeRef v6 = (uint64_t *)((char *)this + 24);
  *(_OWORD *)this = 0u;
  if (a2)
  {
    if (a2 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = 16 * a2;
    char v8 = (char *)operator new(16 * a2);
    bzero(v8, 16 * a2);
    *(void *)this = v8;
    *((void *)this + 1) = &v8[v7];
    *((void *)this + 2) = &v8[16 * a2];
  }
  std::vector<std::vector<float>>::resize(v6, 2 * a2);
  uint64_t v9 = *((void *)this + 3);
  if (*((void *)this + 4) != v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      std::vector<float>::resize(v9 + v10, a3);
      unint64_t v12 = v11 >> 1;
      uint64_t v13 = *(void *)this;
      unint64_t v14 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4;
      if (v11)
      {
        if (v14 <= v11 >> 1) {
LABEL_13:
        }
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        uint64_t v9 = *v6;
        *(void *)(v13 + 16 * v12) = *(void *)(*v6 + v10);
      }
      else
      {
        if (v14 <= v11 >> 1) {
          goto LABEL_13;
        }
        uint64_t v9 = *v6;
        *(void *)(v13 + 16 * v12 + 8) = *(void *)(*v6 + v10);
      }
      ++v11;
      v10 += 24;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 4) - v9) >> 3));
  }
}

void sub_1BB6B4BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  CFIndex v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void afSTFTWrapper::afSTFTWrapper(afSTFTWrapper *this, unsigned int a2, unsigned int a3, int a4, int a5, char a6, int a7)
{
  char v7 = a7;
  *(void *)this = &unk_1F14BE138;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  size_t v54 = (char *)this + 56;
  unint64_t v14 = (afSTFTWrapper *)((char *)this + 88);
  uint64_t v15 = (int)a2;
  if (a7) {
    int v16 = 4;
  }
  else {
    int v16 = 0;
  }
  *((_OWORD *)this + 1) = 0uLL;
  *((_OWORD *)this + 2) = 0uLL;
  unint64_t v17 = a4 + v16 + 1;
  *((_WORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 72) = 0uLL;
  afSTFTData::afSTFTData(v14, (int)a2, v17);
  afSTFTData::afSTFTData((afSTFTWrapper *)((char *)this + 136), (int)a3, v17);
  *(_OWORD *)((char *)this + 184) = 0u;
  unint64_t v53 = (void **)((char *)this + 208);
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 4) = v15;
  *((void *)this + 5) = (int)a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((unsigned char *)this + 48) = a6;
  if (a2 <= a3) {
    unsigned int v18 = a3;
  }
  else {
    unsigned int v18 = a2;
  }
  *((unsigned char *)this + 49) = v7;
  std::vector<void const*>::resize((uint64_t)v54, (int)v18);
  uint64_t v19 = *((void *)this + 3);
  int v20 = *((_DWORD *)this + 4) + 4 * *((unsigned __int8 *)this + 49) + 1;
  *((_DWORD *)this + 2) = v20;
  CLiteMatrix::CLiteMatrix((CLiteMatrix *)&v56, *((void *)this + 4), v19);
  std::vector<CLiteMatrix>::vector(&v59, v20, (uint64_t)&v56);
  std::vector<CLiteMatrix>::__vdeallocate((uint64_t *)this + 23);
  *(_OWORD *)((char *)this + 184) = v59;
  *((void *)this + 25) = v60;
  uint64_t v60 = 0;
  long long v59 = 0uLL;
  int64_t v61 = (void **)&v59;
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100](&v61);
  if (__p)
  {
    uint64_t v58 = __p;
    operator delete(__p);
  }
  std::vector<float>::vector(&v56, *((int *)this + 2));
  long long v21 = *v53;
  if (*v53)
  {
    *((void *)this + 27) = v21;
    operator delete(v21);
    *unint64_t v53 = 0;
    *((void *)this + 27) = 0;
    *((void *)this + 28) = 0;
  }
  *((_OWORD *)this + 13) = v56;
  *((void *)this + 28) = __p;
  uint64_t v22 = *((void *)this + 2);
  int64x2_t v55 = *((int64x2_t *)this + 2);
  __int32 v23 = *((unsigned __int8 *)this + 48);
  int v24 = *((unsigned __int8 *)this + 49);
  uint64_t v25 = (int32x2_t *)malloc_type_malloc(0x78uLL, 0x1080040954E4962uLL);
  int32x2_t v26 = v25;
  *((void *)this + 10) = v25;
  if ((int)v22 > 255)
  {
    switch(v22)
    {
      case 0x100:
        int v27 = 9;
        break;
      case 0x200:
        int v27 = 10;
        break;
      case 0x400:
        int v27 = 11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v22)
    {
      case 0x20:
        int v27 = 6;
        break;
      case 0x40:
        int v27 = 7;
        break;
      case 0x80:
        int v27 = 8;
        break;
      default:
        return;
    }
  }
  v25[11].i32[0] = v27;
  *uint64_t v25 = vmovn_s64(v55);
  uint64_t v28 = 0x400u / (unsigned __int16)v22;
  v25[1].i32[1] = v22;
  v25[2].i32[0] = 0x2800 / v28;
  v25[4].i32[0] = 0;
  v25[4].i32[1] = 10;
  v25[3].i32[0] = v23;
  v25[3].i32[1] = 0;
  v25[5] = (int32x2_t)malloc_type_malloc(4 * (0x2800 / v28), 0x100004052888210uLL);
  v26[6] = (int32x2_t)malloc_type_malloc(4 * v26[2].i32[0], 0x100004052888210uLL);
  v26[7] = (int32x2_t)malloc_type_malloc(8 * v26->i32[0], 0x80040B8603338uLL);
  v26[10] = (int32x2_t)malloc_type_malloc(8 * v26->i32[1], 0x80040B8603338uLL);
  v26[8] = (int32x2_t)malloc_type_calloc(4uLL, 2 * v26[1].i32[1], 0xA82F9C55uLL);
  uint64_t v29 = (char *)malloc_type_calloc(4uLL, 2 * v26[1].i32[1] + 2, 0x3AA40FA7uLL);
  v26[9] = (int32x2_t)v29;
  int32x2_t v30 = v26[8];
  int v31 = v26[11].i32[0];
  long long v32 = malloc_type_malloc(0x30uLL, 0x10A004082EF2C97uLL);
  v26[12] = (int32x2_t)v32;
  void *v32 = v30;
  v32[1] = v29;
  *((_DWORD *)v32 + 4) = (int)ldexpf(1.0, v31);
  *((_DWORD *)v32 + 5) = v31;
  v32[3] = vDSP_create_fftsetup(v31, 0);
  v32[4] = v29;
  v32[5] = &v29[4 * (*((_DWORD *)v32 + 4) / 2)];
  float v33 = (float)v26[1].i32[1];
  uint64_t v34 = v26[2].u32[0];
  if (v26[3].i32[0])
  {
    if ((int)v34 >= 1)
    {
      uint64_t v35 = 0;
      float v36 = 1.0 / sqrtf(v33 * 4.5446);
      int32x2_t v37 = v26[5];
      uint64_t v38 = (float *)v26[6];
      do
      {
        float v39 = v36 * protoFilter1024LD[v35 * v28];
        ++v35;
        *(float *)(*(void *)&v37 + 4 * (int)--v34) = v39;
        *v38++ = v39;
      }
      while (v34);
    }
  }
  else if ((int)v34 >= 1)
  {
    uint64_t v40 = 0;
    float v41 = 1.0 / sqrtf(v33 * 5.4876);
    int32x2_t v42 = v26[5];
    int32x2_t v43 = v26[6];
    do
    {
      float v44 = v41 * protoFilter1024[v40 * v28];
      ++v40;
      *(float *)(*(void *)&v42 + 4 * (int)--v34) = v44;
      *(float *)(*(void *)&v43 + 4 * (int)v34) = v44;
    }
    while (v34);
  }
  if (v26->i32[0] >= 1)
  {
    uint64_t v45 = 0;
    do
      *(void *)(*(void *)&v26[7] + 8 * v45++) = malloc_type_calloc(v26[2].i32[0], 4uLL, 0x100004052888210uLL);
    while (v45 < v26->i32[0]);
  }
  LODWORD(v46) = v26->i32[1];
  if ((int)v46 >= 1)
  {
    uint64_t v47 = 0;
    do
    {
      *(void *)(*(void *)&v26[10] + 8 * v47++) = malloc_type_calloc(v26[2].i32[0], 4uLL, 0x100004052888210uLL);
      uint64_t v46 = v26->i32[1];
    }
    while (v47 < v46);
  }
  v26[14].i32[0] = v24;
  if (v24)
  {
    int v48 = v26[1].i32[1];
    uint64_t v49 = v26->i32[0];
    float v50 = (int *)malloc_type_malloc(0x28uLL, 0x108004064FE8EA7uLL);
    v26[13] = (int32x2_t)v50;
    v50[1] = v46;
    v50[2] = v48;
    int *v50 = v49;
    *((void *)v50 + 3) = malloc_type_malloc(8 * v49, 0x2004093837F09uLL);
    v50[8] = 0;
    if (*v50 >= 1)
    {
      uint64_t v51 = 0;
      do
      {
        uint64_t v52 = 0;
        *(void *)(*((void *)v50 + 3) + 8 * v51) = malloc_type_malloc(0x70uLL, 0x80040803F642BuLL);
        do
        {
          *(void *)(*(void *)(*((void *)v50 + 3) + 8 * v51) + v52) = malloc_type_calloc(4uLL, v50[2] + 1, 0xBBFB0B77uLL);
          *(void *)(*(void *)(*((void *)v50 + 3) + 8 * v51) + v52 + 8) = malloc_type_calloc(4uLL, v50[2] + 1, 0xDE26563CuLL);
          v52 += 16;
        }
        while (v52 != 112);
        ++v51;
      }
      while (v51 < *v50);
    }
  }
}

void sub_1BB6B5220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16)
{
  unsigned int v18 = *a10;
  if (*a10)
  {
    v16[27] = v18;
    operator delete(v18);
  }
  std::vector<CLiteMatrix>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = v16 + 20;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  uint64_t v19 = (void *)v16[17];
  if (v19)
  {
    v16[18] = v19;
    operator delete(v19);
  }
  a13 = v16 + 14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  int v20 = (void *)v16[11];
  if (v20)
  {
    v16[12] = v20;
    operator delete(v20);
  }
  long long v21 = *a11;
  if (*a11)
  {
    v16[8] = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

unint64_t *afSTFTWrapper::fltbAnalysisOneHop(unint64_t *this, int a2)
{
  CFNumberRef v3 = this;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  CFIndex v4 = (int *)this[10];
  unint64_t v5 = this[11];
  if (*v4 >= 1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = this[7];
    do
    {
      int v8 = v4[7];
      memcpy((void *)(*(void *)(*((void *)v4 + 7) + 8 * v6) + 4 * v4[3] * v8), *(const void **)(v7 + 8 * v6), 4 * v4[3]);
      int v9 = v4[9];
      vDSP_vclr(*((float **)v4 + 8), 1, 2 * v4[3]);
      if (v4[9] >= 1)
      {
        int v10 = 0;
        int v11 = 0;
        if (v8 + 1 < v9) {
          int v12 = v8 + 1;
        }
        else {
          int v12 = 0;
        }
        do
        {
          if (v10) {
            int v13 = v4[3];
          }
          else {
            int v13 = 0;
          }
          v10 ^= 1u;
          vDSP_vma((const float *)(*(void *)(*((void *)v4 + 7) + 8 * v6) + 4 * v4[3] * v12), 1, (const float *)(*((void *)v4 + 5) + 4 * v4[3] * v11), 1, (const float *)(*((void *)v4 + 8) + 4 * v13), 1, (float *)(*((void *)v4 + 8) + 4 * v13), 1, v4[3]);
          int v14 = v4[9];
          if (v12 + 1 < v14) {
            ++v12;
          }
          else {
            int v12 = 0;
          }
          ++v11;
        }
        while (v11 < v14);
      }
      vtRunFFT(*((void *)v4 + 12), 1);
      uint64_t v15 = (_DWORD *)*((void *)v4 + 9);
      unint64_t v16 = v5 + 16 * v6;
      unint64_t v17 = *(_DWORD **)v16;
      *unint64_t v17 = *v15;
      unsigned int v18 = *(_DWORD **)(v16 + 8);
      *unsigned int v18 = 0;
      uint64_t v19 = v4[3];
      v17[v19] = v15[v19];
      v18[v19] = 0;
      int v20 = v18 + 1;
      long long v21 = &v15[v19 + 1];
      memcpy(v17 + 1, v15 + 1, 4 * v19 - 4);
      this = (unint64_t *)memcpy(v20, v21, 4 * v4[3] - 4);
      ++v6;
    }
    while (v6 < *v4);
  }
  int v22 = v4[7];
  if (v22 + 1 < v4[9]) {
    int v23 = v22 + 1;
  }
  else {
    int v23 = 0;
  }
  v4[7] = v23;
  if (v4[28])
  {
    int v24 = (int *)*((void *)v4 + 13);
    int v25 = v24[8];
    int v26 = v25 == 6 ? 0 : v25 + 1;
    v24[8] = v26;
    if (*v24 >= 1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = *((void *)v24 + 3);
      do
      {
        unint64_t v29 = v5 + 16 * v27;
        int v31 = *(const void **)(v29 + 8);
        int32x2_t v30 = (void *)(v29 + 8);
        uint64_t v32 = *(void *)(v28 + 8 * v27) + 16 * v26;
        float v33 = *(void **)(v32 + 8);
        memcpy(*(void **)v32, *(const void **)v29, 4 * v24[2] + 4);
        memcpy(v33, v31, 4 * v24[2] + 4);
        int v34 = v24[8];
        if (v34 >= 3) {
          int v35 = -3;
        }
        else {
          int v35 = 4;
        }
        uint64_t v36 = v35 + v34;
        int32x2_t v37 = (uint64_t *)(*(void *)(*((void *)v24 + 3) + 8 * v27) + 16 * v36);
        char v38 = 1;
        float v39 = (uint64_t *)(v5 + 16 * v27);
        do
        {
          char v40 = v38;
          uint64_t v41 = *v37;
          uint64_t v42 = *v39;
          *(_DWORD *)uint64_t v42 = *(_DWORD *)v41;
          float v43 = *(float *)(v41 + 4) * 0.5;
          *(float *)(v42 + 4) = v43;
          *(float *)(v42 + 8) = v43;
          float v44 = *(float *)(v41 + 8) * 0.5;
          *(float *)(v42 + 12) = v44;
          *(float *)(v42 + 16) = v44;
          float v45 = *(float *)(v41 + 12) * 0.5;
          *(float *)(v42 + 20) = v45;
          *(float *)(v42 + 24) = v45;
          float v46 = *(float *)(v41 + 16) * 0.5;
          *(float *)(v42 + 28) = v46;
          *(float *)(v42 + 32) = v46;
          memcpy((void *)(v42 + 36), (const void *)(v41 + 20), 4 * v24[2] - 16);
          char v38 = 0;
          uint64_t v28 = *((void *)v24 + 3);
          uint64_t v47 = *(void *)(v28 + 8 * v27);
          int32x2_t v37 = (uint64_t *)(v47 + 16 * v36 + 8);
          float v39 = (uint64_t *)(v29 + 8);
        }
        while ((v40 & 1) != 0);
        uint64_t v48 = 0;
        int v26 = v24[8];
        do
        {
          if (v26 + (int)v48 + 1 <= 6) {
            int v49 = v26 + v48 + 1;
          }
          else {
            int v49 = v26 - 6 + v48;
          }
          v76[v48++] = v49;
        }
        while (v48 != 7);
        uint64_t v50 = 0;
        uint64_t v52 = *(void *)(v47 + 16 * v79);
        uint64_t v51 = *(void *)(v47 + 16 * v79 + 8);
        uint64_t v54 = *(void *)(v47 + 16 * v78);
        uint64_t v53 = *(void *)(v47 + 16 * v78 + 8);
        uint64_t v56 = *(void *)(v47 + 16 * v77);
        uint64_t v55 = *(void *)(v47 + 16 * v77 + 8);
        this = *(unint64_t **)(v47 + 16 * v76[0]);
        uint64_t v57 = *(void *)(v47 + 16 * v76[0] + 8);
        uint64_t v58 = *(void *)v29 + 4;
        for (uint64_t i = 1; i != 5; ++i)
        {
          float v60 = (float)((float)((float)(*(float *)(v51 + 4 * i) * -0.031273)
                              + (float)(*(float *)(v53 + 4 * i) * -0.28127))
                      + (float)(*(float *)(v55 + 4 * i) * 0.28127))
              + (float)(*(float *)(v57 + 4 * i) * 0.031273);
          float v61 = (float)((float)((float)(*(float *)(v52 + 4 * i) * 0.031273) + (float)(*(float *)(v54 + 4 * i) * 0.28127))
                      + (float)(*(float *)(v56 + 4 * i) * -0.28127))
              + (float)(*((float *)this + i) * -0.031273);
          unint64_t v62 = (float *)(v58 + v50);
          float v63 = *(float *)(v58 + v50);
          if ((i & 0x7FFFFFFD) == 1)
          {
            *unint64_t v62 = v63 - v60;
            uint64_t v64 = *v30 + v50;
            *(float *)(v64 + 4) = *(float *)(v64 + 4) - v61;
            v62[1] = v60 + v62[1];
            float v65 = v61 + *(float *)(v64 + 8);
          }
          else
          {
            *unint64_t v62 = v60 + v63;
            uint64_t v64 = *v30 + v50;
            *(float *)(v64 + 4) = v61 + *(float *)(v64 + 4);
            v62[1] = v62[1] - v60;
            float v65 = *(float *)(v64 + 8) - v61;
          }
          *(float *)(v64 + 8) = v65;
          v50 += 8;
        }
        ++v27;
      }
      while (v27 < *v24);
    }
  }
  int v66 = *((_DWORD *)v3 + 2);
  if (v66)
  {
    unint64_t v67 = 0;
    unint64_t v68 = v3[23];
    do
    {
      this = (unint64_t *)(v68 + 40 * v67);
      if (*this)
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        do
        {
          unint64_t v71 = v3[11];
          if (v70 >= (uint64_t)(v3[12] - v71) >> 4
            || (int v72 = *(_DWORD *)(*(void *)(v71 + v69) + 4 * v67),
                *(_DWORD *)CLiteMatrix::Get((CLiteMatrix *)this, v70, a2) = v72,
                unint64_t v73 = v3[11],
                v70 >= (uint64_t)(v3[12] - v73) >> 4))
          {
            std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
          }
          int v74 = *(_DWORD *)(*(void *)(v73 + v69 + 8) + 4 * v67);
          CLiteMatrix::Get((CLiteMatrix *)(v3[23] + 40 * v67), v70, a2);
          _DWORD *v75 = v74;
          ++v70;
          unint64_t v68 = v3[23];
          this = (unint64_t *)(v68 + 40 * v67);
          v69 += 16;
        }
        while (v70 < *this);
        int v66 = *((_DWORD *)v3 + 2);
      }
      ++v67;
    }
    while (v67 < v66);
  }
  return this;
}

uint64_t afSTFTWrapper::fltbAnalysisMatrix(afSTFTWrapper *this, unint64_t *a2)
{
  if (*a2 != *((void *)this + 4)) {
    __assert_rtn("fltbAnalysisMatrix", "afSTFTWrapper.cpp", 71, "inMatrix.NumRows()==mnInputs");
  }
  uint64_t v4 = *((void *)this + 3);
  if (a2[1] != *((void *)this + 2) * v4) {
    __assert_rtn("fltbAnalysisMatrix", "afSTFTWrapper.cpp", 72, "inMatrix.NumCols()==mnHops*mhopSize");
  }
  if (v4)
  {
    unint64_t v5 = 0;
    do
    {
      if (*((void *)this + 4))
      {
        unint64_t v6 = 0;
        do
        {
          *(void *)(*((void *)this + 7) + 8 * v6) = LiteMatrix<float>::operator()(a2, v6, *((void *)this + 2) * v5);
          ++v6;
        }
        while (*((void *)this + 4) > v6);
      }
      afSTFTWrapper::fltbAnalysisOneHop((unint64_t *)this, v5++);
    }
    while (*((void *)this + 3) > v5);
  }
  return (uint64_t)this + 184;
}

uint64_t afSTFTWrapper::getFilterbandCenterFrequencies(afSTFTWrapper *this, float a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = 0;
    int v4 = *((unsigned __int8 *)this + 49);
    while (v4)
    {
      if (v3)
      {
        uint64_t v6 = *((void *)this + 26);
        if (v3 > 8) {
          float v7 = (float)((int)v3 - 4);
        }
        else {
          float v7 = (float)((float)(int)v3 * 0.5) + 0.25;
        }
        float v8 = (float)((float)(v7 / (float)(v2 - 5)) * a2) * 0.5;
        goto LABEL_11;
      }
      float v5 = a2 * 0.0 * 0.5;
      **((float **)this + 26) = v5;
LABEL_12:
      if (v2 == ++v3) {
        return (uint64_t)this + 208;
      }
    }
    float v8 = (float)((float)((float)(int)v3 / (float)(v2 - 1)) * a2) * 0.5;
    uint64_t v6 = *((void *)this + 26);
LABEL_11:
    *(float *)(v6 + 4 * v3) = v8;
    goto LABEL_12;
  }
  return (uint64_t)this + 208;
}

BOOL AULoudnessInNoise::ValidFormat(AULoudnessInNoise *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if ((a2 == 2 || a2 == 1 && a3 <= 2) && (a4->mBytesPerFrame == 8 ? (BOOL v4 = a4->mFormatID == 1718773105) : (BOOL v4 = 0), v4)) {
    return a4->mChannelsPerFrame == 1;
  }
  else {
    return 0;
  }
}

uint64_t AULoudnessInNoise::SupportedNumChannels(AULoudnessInNoise *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AULoudnessInNoise::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AULoudnessInNoise::StreamFormatWritable(AULoudnessInNoise *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AULoudnessInNoise::SupportsTail(AULoudnessInNoise *this)
{
  return 1;
}

double AULoudnessInNoise::GetTailTime(AULoudnessInNoise *this)
{
  return 0.0;
}

double AULoudnessInNoise::GetLatency(AULoudnessInNoise *this)
{
  return 0.0;
}

uint64_t AULoudnessInNoise::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result)
  {
    ++*((_DWORD *)this + 140);
    ++*((_DWORD *)this + 142);
  }
  return result;
}

uint64_t AULoudnessInNoise::GetParameterInfo(AULoudnessInNoise *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->flags = 0x40000000;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  uint64_t result = 4294956418;
  switch(a3)
  {
    case 0:
      CFStringRef v6 = @"Operating mode: 0-Assess current lev, 1-Estimate all levs";
      goto LABEL_8;
    case 1:
      CFStringRef v6 = @"Matching criterion to find current loudness (0=closest exceeding 1=closest)";
LABEL_8:
      buffer->cfNameString = v6;
      buffer->flags = 1207959552;
      CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      goto LABEL_25;
    case 2:
      buffer->cfNameString = @"Index of the noise spectrum in Q used to normalize loudness";
      buffer->flags = 1207959552;
      CFStringGetCString(@"Index of the noise spectrum in Q used to normalize loudness", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v8 = 0x41A0000000000000;
      goto LABEL_11;
    case 3:
      buffer->cfNameString = @"Loudness Percentile Interval [sec]";
      buffer->flags = 1207959552;
      CFStringGetCString(@"Loudness Percentile Interval [sec]", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v8 = 0x412000003F000000;
LABEL_11:
      *(void *)&buffer->minCFNumberRef Value = v8;
      AudioUnitParameterValue v9 = 1.0;
      goto LABEL_22;
    case 4:
      buffer->cfNameString = @"Percentile to use (0-100%)";
      buffer->flags = 1207959552;
      CFStringGetCString(@"Percentile to use (0-100%)", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x42C8000000000000;
      AudioUnitParameterValue v9 = 90.0;
      goto LABEL_22;
    case 5:
      buffer->cfNameString = @"0-Ignore VAD, 1-Use Extern VAD with Thresh, 2-Threshold CV, 3-Threshold Echo/Play, 4=1or2, 5=1or3, 6=1or2or3";
      buffer->flags = 1207959552;
      CFStringGetCString(@"0-Ignore VAD, 1-Use Extern VAD with Thresh, 2-Threshold CV, 3-Threshold Echo/Play, 4=1or2, 5=1or3, 6=1or2or3", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v10 = 0x40C0000000000000;
      goto LABEL_26;
    case 6:
      buffer->cfNameString = @"(input) Threshold on Soft VAD";
      buffer->flags = 1207959552;
      CFStringGetCString(@"(input) Threshold on Soft VAD", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v9 = 0.5;
      goto LABEL_22;
    case 7:
      CFStringRef v11 = @"(input) Threshold on Clean Voice for a VAD (dBfs)";
      goto LABEL_17;
    case 8:
      CFStringRef v11 = @"(input) Threshold on Echo/Play for a VAD (dBfs)";
LABEL_17:
      buffer->cfNameString = v11;
      buffer->flags = 1207959552;
      CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x41200000C3480000;
      AudioUnitParameterValue v9 = -80.0;
      goto LABEL_22;
    case 9:
      buffer->cfNameString = @"(input) Minimum frequency used for sensing (Hz) ";
      buffer->flags = 1207959552;
      CFStringGetCString(@"(input) Minimum frequency used for sensing (Hz) ", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x45FA000000000000;
      AudioUnitParameterValue v9 = 200.0;
      goto LABEL_22;
    case 10:
      buffer->cfNameString = @"(input) Maximum frequency used for sensing (Hz) ";
      buffer->flags = 1207959552;
      CFStringGetCString(@"(input) Maximum frequency used for sensing (Hz) ", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x45FA000000000000;
      AudioUnitParameterValue v9 = 5005.0;
      goto LABEL_22;
    case 11:
      buffer->cfNameString = @"(input) Power law p used in loudness ";
      buffer->flags = 1207959552;
      CFStringGetCString(@"(input) Power law p used in loudness ", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4080000000000000;
      AudioUnitParameterValue v9 = 2.0;
      goto LABEL_22;
    case 12:
      buffer->cfNameString = @"(input) Power law Q used in loudness ";
      buffer->flags = 1207959552;
      CFStringGetCString(@"(input) Power law Q used in loudness ", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFNumberRef Value = 0x4080000000000000;
      AudioUnitParameterValue v9 = 0.25;
LABEL_22:
      AudioUnitParameterOptions v12 = buffer->flags | 0x80000000;
      buffer->defaultCFNumberRef Value = v9;
      buffer->flags = v12;
      return result;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
      return result;
    case 30:
      buffer->cfNameString = @"(input dyn) Current Level";
      buffer->flags = 1207959552;
      CFStringGetCString(@"(input dyn) Current Level", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v10 = 0x459C400000000000;
      goto LABEL_26;
    case 32:
      buffer->cfNameString = @"(input dyn) External Soft VAD value";
      buffer->flags = 1207959552;
      CFStringGetCString(@"(input dyn) External Soft VAD value", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
LABEL_25:
      uint64_t v10 = 0x3F80000000000000;
LABEL_26:
      *(void *)&buffer->minCFNumberRef Value = v10;
      AudioUnitParameterOptions v13 = buffer->flags | 0x80000000;
      buffer->defaultCFNumberRef Value = 0.0;
      buffer->flags = v13;
      break;
    default:
      switch(a3)
      {
        case '<':
          CFStringRef v7 = @"(output) Raw Loudness for current frame";
          goto LABEL_29;
        case '=':
          CFStringRef v7 = @"(output) Normalized Loudness for current frame";
          goto LABEL_29;
        case '>':
          CFStringRef v7 = @"(output) Percentile loudness ";
LABEL_29:
          buffer->cfNameString = v7;
          buffer->flags = 1207959552;
          CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v14 = 0x4120000000000000;
          goto LABEL_33;
        case '?':
          buffer->cfNameString = @"(output) Audible Level: -1-Not Calculated 0-InAudible, 1-Maybe Audible, 2 Audible";
          buffer->flags = 1207959552;
          CFStringGetCString(@"(output) Audible Level: -1-Not Calculated 0-InAudible, 1-Maybe Audible, 2 Audible", buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Indexed;
          *(void *)&buffer->minCFNumberRef Value = 0x40000000BF800000;
          AudioUnitParameterValue v15 = -1.0;
          goto LABEL_35;
        case '@':
          buffer->cfNameString = @"(output) Used Level from array of available Levels in plist";
          buffer->flags = 1207959552;
          CFStringGetCString(@"(output) Used Level from array of available Levels in plist", buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v14 = 0x459C400000000000;
          goto LABEL_33;
        case 'A':
          buffer->cfNameString = @"(output) Index which increments (wraps at 32,000) when Audibility/Percentiles are updated";
          buffer->flags = 1207959552;
          CFStringGetCString(@"(output) Index which increments (wraps at 32,000) when Audibility/Percentiles are updated", buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          uint64_t v14 = 0x46FA000000000000;
LABEL_33:
          *(void *)&buffer->minCFNumberRef Value = v14;
          buffer->defaultCFNumberRef Value = 0.0;
          break;
        case 'B':
          buffer->cfNameString = @"(output) Mean Power of estimated noise spectrum (dB) ";
          buffer->flags = 1207959552;
          CFStringGetCString(@"(output) Mean Power of estimated noise spectrum (dB) ", buffer->name, 52, 0x8000100u);
          uint64_t result = 0;
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(void *)&buffer->minCFNumberRef Value = 0x42C80000C3480000;
          AudioUnitParameterValue v15 = -200.0;
LABEL_35:
          buffer->defaultCFNumberRef Value = v15;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t AULoudnessInNoise::GetParameterList(AULoudnessInNoise *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB87BCA0;
    *((_OWORD *)a3 + 4) = xmmword_1BB87BCB0;
    *((void *)a3 + 10) = 0x4100000040;
    a3[22] = 66;
  }
  uint64_t result = 0;
  *a4 = 23;
  return result;
}

uint64_t AULoudnessInNoise::Render(AULoudnessInNoise *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 128), 0);
  uint64_t v9 = ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 80), 0);
  if (!v9 || !*(_DWORD *)(v9 + 172)) {
    return 4294956420;
  }
  uint64_t v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (result) {
    return result;
  }
  uint64_t v12 = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 0);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
  uint64_t v14 = ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 80), 1u);
  if (v14 && *(_DWORD *)(v14 + 172))
  {
    unsigned int v15 = 1;
    unint64_t v16 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 1u);
    uint64_t result = ausdk::AUInputElement::PullInput(v16, a2, a3, 1, a4);
    if (result) {
      return result;
    }
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v17 = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), v15);
  uint64_t v18 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
  uint64_t v19 = ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 80), 2u);
  if (!v19 || !*(_DWORD *)(v19 + 172))
  {
    unsigned int v20 = 0;
LABEL_18:
    uint64_t v22 = ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), v20);
    ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v22 + 144));
    v24[0] = BufferList;
    v24[1] = v18;
    v24[2] = v18;
    uint64_t v23 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    return (*(uint64_t (**)(AULoudnessInNoise *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 3, v24, 1, &v23);
  }
  unsigned int v20 = 2;
  long long v21 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AULoudnessInNoise *)((char *)this + 80), 2u);
  uint64_t result = ausdk::AUInputElement::PullInput(v21, a2, a3, 2, a4);
  if (!result) {
    goto LABEL_18;
  }
  return result;
}

uint64_t AULoudnessInNoise::ProcessMultipleBufferLists(AULoudnessInNoise *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  int v9 = *((_DWORD *)this + 140);
  if (*((_DWORD *)this + 141) != v9)
  {
    AULoudnessInNoise::InitializeInternals(this);
    *((_DWORD *)this + 141) = v9;
  }
  int v10 = *((_DWORD *)this + 142);
  if (*((_DWORD *)this + 143) != v10)
  {
    AULoudnessInNoise::UpdateDynParams(this);
    *((_DWORD *)this + 143) = v10;
  }
  if (*((unsigned char *)this + 577)) {
    return 0;
  }
  *((_DWORD *)this + 173) = 0;
  uint64_t v12 = (*((_DWORD *)this + 145) - 1);
  if (!*((_DWORD *)this + 138))
  {
    if (*((_DWORD *)this + 145) == 1) {
      goto LABEL_27;
    }
    uint64_t v17 = 0;
    char v18 = 0;
    float v19 = *((float *)this + 172);
    uint64_t v20 = *((void *)this + 210);
    float v21 = 0.0;
    while (1)
    {
      float v22 = *(float *)(v20 + 4 * v17);
      if (v19 >= v22)
      {
        if ((v18 & 1) == 0)
        {
          *((_DWORD *)this + 173) = v17;
          float v21 = v19 - v22;
LABEL_25:
          char v18 = 1;
          goto LABEL_26;
        }
        float v23 = v19 - v22;
        if (v23 >= v21) {
          goto LABEL_25;
        }
        *((_DWORD *)this + 173) = v17;
        char v18 = 1;
        float v21 = v23;
      }
LABEL_26:
      if (v12 == ++v17) {
        goto LABEL_27;
      }
    }
  }
  if (*((_DWORD *)this + 145) != 1)
  {
    uint64_t v13 = 0;
    char v14 = 0;
    float v15 = 0.0;
    do
    {
      if (v14)
      {
        float v16 = vabds_f32(*((float *)this + 172), *(float *)(*((void *)this + 210) + 4 * v13));
        if (v16 < v15)
        {
          *((_DWORD *)this + 173) = v13;
          float v15 = v16;
        }
      }
      else
      {
        *((_DWORD *)this + 173) = v13;
        float v15 = vabds_f32(*((float *)this + 172), *(float *)(*((void *)this + 210) + 4 * v13));
      }
      ++v13;
      char v14 = 1;
    }
    while (v12 != v13);
  }
LABEL_27:
  mData = (*a5)->mBuffers[0].mData;
  int v25 = a5[1]->mBuffers[0].mData;
  int v26 = a5[2]->mBuffers[0].mData;
  memcpy(*((void **)this + 191), mData, 4 * *((unsigned int *)this + 148));
  memcpy(*((void **)this + 194), v25, 4 * *((unsigned int *)this + 148));
  memcpy(*((void **)this + 197), v26, 4 * *((unsigned int *)this + 148));
  vDSP_vsmul(*((const float **)this + 191), 1, (const float *)this + 156, *((float **)this + 191), 1, *((unsigned int *)this + 148));
  vDSP_vsmul(*((const float **)this + 194), 1, (const float *)this + 156, *((float **)this + 194), 1, *((unsigned int *)this + 148));
  vDSP_vsmul(*((const float **)this + 197), 1, (const float *)this + 156, *((float **)this + 197), 1, *((unsigned int *)this + 148));
  *((unsigned char *)this + 600) = 0;
  unsigned int v27 = *((_DWORD *)this + 152);
  if (v27)
  {
    if (v27 == 1) {
      goto LABEL_38;
    }
    LODWORD(__C.realp) = -1013579776;
    float v102 = -300.0;
    if (v27 <= 6 && ((1 << v27) & 0x54) != 0)
    {
      vDSP_svesq(*((const float **)this + 194), 1, (float *)&__C, *((unsigned int *)this + 148));
      *(float *)&__C.realp = log10f((float)(*(float *)&__C.realp / (float)*((unsigned int *)this + 147)) + 1.0e-20)
                           * 10.0;
      if (*(float *)&__C.realp >= *((float *)this + 154)) {
        *((unsigned char *)this + 600) = 1;
      }
    }
    unsigned int v28 = *((_DWORD *)this + 152);
    if (v28 <= 6 && ((1 << v28) & 0x68) != 0)
    {
      vDSP_svesq(*((const float **)this + 197), 1, &v102, *((unsigned int *)this + 148));
      if ((float)(log10f((float)(v102 / (float)*((unsigned int *)this + 147)) + 1.0e-20) * 10.0) >= *((float *)this + 155)) {
        *((unsigned char *)this + 600) = 1;
      }
    }
    if ((*((_DWORD *)this + 152) - 4) <= 2)
    {
LABEL_38:
      if (*((float *)this + 151) >= *((float *)this + 153)) {
        *((unsigned char *)this + 600) = 1;
      }
    }
  }
  if (*((_DWORD *)this + 136) == 1)
  {
    *((_DWORD *)this + 380) = 0;
    *((_DWORD *)this + 381) = *((_DWORD *)this + 145);
  }
  if (*((unsigned char *)this + 600)) {
    goto LABEL_102;
  }
  float __B = 0.0;
  vDSP_Length v30 = *((unsigned int *)this + 147);
  int v31 = (float *)*((void *)this + 200);
  __C.realp = (float *)*((void *)this + 191);
  realp = __C.realp;
  __C.imagp = &__C.realp[v30];
  vDSP_zvmags(&__C, 1, v31, 1, v30);
  *int v31 = *realp * *realp;
  v31[v30] = realp[v30] * realp[v30];
  memcpy(*((void **)this + 501), *((const void **)this + 200), 4 * *((unsigned int *)this + 149));
  *(float *)&__C.realp = 1.0 - *((float *)this + 408);
  vDSP_vsmul(*((const float **)this + 501), 1, (const float *)&__C, *((float **)this + 501), 1, *((unsigned int *)this + 149));
  vDSP_vsmul(*((const float **)this + 525), 1, (const float *)this + 408, *((float **)this + 525), 1, *((unsigned int *)this + 149));
  vDSP_vadd(*((const float **)this + 501), 1, *((const float **)this + 525), 1, *((float **)this + 501), 1, *((unsigned int *)this + 149));
  memcpy(*((void **)this + 525), *((const void **)this + 501), 4 * *((unsigned int *)this + 149));
  vDSP_vsub(*((const float **)this + 3 * *((unsigned int *)this + 173) + 309), 1, *((const float **)this + 501), 1, *((float **)this + 528), 1, *((unsigned int *)this + 149));
  vDSP_vthr(*((const float **)this + 528), 1, &__B, *((float **)this + 507), 1, *((unsigned int *)this + 149));
  vDSP_vmul(*((const float **)this + 507), 1, *((const float **)this + 213), 1, *((float **)this + 510), 1, *((unsigned int *)this + 149));
  LODWORD(v30) = *((_DWORD *)this + 149);
  vDSP_vsmul(*((const float **)this + 510), 1, (const float *)this + 1068, *((float **)this + 537), 1, v30);
  *((_DWORD *)this + 1184) = fminf((float)(*((_DWORD *)this + 1184) + 1), floorf((float)(*((float *)this + 146) * 30.0) / (float)v30));
  ++*((_DWORD *)this + 1185);
  unsigned int v32 = *((_DWORD *)this + 1071);
  BOOL v33 = 0;
  if (v32 <= 0x63)
  {
    *((_DWORD *)this + 1071) = v32 + 1;
    if (!v32) {
      BOOL v33 = 1;
    }
  }
  *((unsigned char *)this + 4288) = v33;
  vDSP_Length v34 = *((unsigned int *)this + 149);
  float v35 = 1.0 - *((float *)this + 1178);
  *(float *)&__C.realp = v35 * 0.333;
  float v102 = v35 * 0.667;
  uint64_t v36 = *((void *)this + 576);
  *(_DWORD *)uint64_t v36 = 0;
  vDSP_vsmul(*((const float **)this + 537), 1, (const float *)&__C, (float *)(v36 + 4), 1, (v34 - 1));
  vDSP_vsma((const float *)(*((void *)this + 537) + 4), 1, (const float *)&__C, *((const float **)this + 576), 1, *((float **)this + 576), 1, (v34 - 1));
  vDSP_vsma(*((const float **)this + 537), 1, &v102, *((const float **)this + 576), 1, *((float **)this + 576), 1, v34);
  vDSP_vsma(*((const float **)this + 552), 1, (const float *)this + 1178, *((const float **)this + 576), 1, *((float **)this + 552), 1, v34);
  unsigned int v37 = *((_DWORD *)this + 1184);
  if (v37 == 1)
  {
    vDSP_vclr(*((float **)this + 555), 1, v34);
    vDSP_vclr(*((float **)this + 558), 1, v34);
    unsigned int v37 = *((_DWORD *)this + 1184);
  }
  float v38 = *((float *)this + 146) / (float)v34;
  float v39 = v38 * 0.5;
  float v40 = roundf(v38 * 0.2);
  float v41 = roundf(v38 + v38);
  if (v39 > (float)v37) {
    float v41 = v40;
  }
  if (*((_DWORD *)this + 1185) > v41 || *((unsigned char *)this + 4288))
  {
    *((_DWORD *)this + 1185) = 0;
    vDSP_vmin(*((const float **)this + 558), 1, *((const float **)this + 552), 1, *((float **)this + 555), 1, v34);
    memcpy(*((void **)this + 558), *((const void **)this + 552), 4 * v34);
  }
  else
  {
    vDSP_vmin(*((const float **)this + 555), 1, *((const float **)this + 552), 1, *((float **)this + 555), 1, v34);
    vDSP_vmin(*((const float **)this + 558), 1, *((const float **)this + 552), 1, *((float **)this + 558), 1, v34);
  }
  float v101 = 1.0e-20;
  vDSP_vsadd(*((const float **)this + 552), 1, &v101, *((float **)this + 576), 1, v34);
  vDSP_vsadd(*((const float **)this + 555), 1, &v101, *((float **)this + 579), 1, v34);
  vDSP_vdiv(*((const float **)this + 579), 1, *((const float **)this + 576), 1, *((float **)this + 561), 1, v34);
  vDSP_vmul(*((const float **)this + 555), 1, *((const float **)this + 573), 1, *((float **)this + 576), 1, v34);
  vDSP_vsub(*((const float **)this + 576), 1, *((const float **)this + 552), 1, *((float **)this + 564), 1, v34);
  vDSP_Length v42 = *((unsigned int *)this + 149);
  *(float *)&__C.realp = 1.0 - *((float *)this + 1182);
  float v102 = *((float *)this + 1181);
  int v43 = *((_DWORD *)this + 1184);
  unsigned int v44 = vcvtas_u32_f32((float)(*((float *)this + 146) / (float)v42) * 30.0);
  if (v43 + 1 < v44) {
    unsigned int v45 = v43 + 1;
  }
  else {
    unsigned int v45 = v44;
  }
  *((_DWORD *)this + 1184) = v45;
  ++*((_DWORD *)this + 1185);
  vDSP_vclr(*((float **)this + 576), 1, v42);
  vDSP_vclr(*((float **)this + 579), 1, v42);
  vDSP_vclr(*((float **)this + 570), 1, v42);
  vDSP_vsmul(*((const float **)this + 537), 1, (const float *)this + 1182, *((float **)this + 579), 1, v42);
  vDSP_vsma(*((const float **)this + 549), 1, (const float *)&__C, *((const float **)this + 579), 1, *((float **)this + 579), 1, v42);
  vDSP_vsmul(*((const float **)this + 555), 1, &v102, *((float **)this + 576), 1, v42);
  vDSP_vsub(*((const float **)this + 576), 1, *((const float **)this + 537), 1, *((float **)this + 567), 1, v42);
  vDSP_vmax(*((const float **)this + 567), 1, *((const float **)this + 564), 1, *((float **)this + 570), 1, v42);
  size_t v46 = 4 * v42;
  if (v42)
  {
    uint64_t v47 = 0;
    uint64_t v48 = *((void *)this + 570);
    do
    {
      if (*(float *)(v48 + v47) <= 0.0 && (int v49 = (char *)this + 4296, !*((_DWORD *)this + 407))
        || (int v49 = (char *)this + 4632,
            *(float *)(*((void *)this + 552) + v47) < (float)(*((float *)this + 1183)
                                                              * *(float *)(*((void *)this + 555) + v47))))
      {
        *(_DWORD *)(*((void *)this + 549) + v47) = *(_DWORD *)(*(void *)v49 + v47);
      }
      v47 += 4;
    }
    while (v46 != v47);
  }
  memcpy(*((void **)this + 543), *((const void **)this + 537), v46);
  vDSP_vsmul(*((const float **)this + 549), 1, (const float *)this + 1069, *((float **)this + 546), 1, v42);
  vDSP_sve(*((const float **)this + 546), 1, (float *)this + 175, *((unsigned int *)this + 149));
  unsigned int v50 = *((_DWORD *)this + 149);
  float v51 = log10((float)(*((float *)this + 175) / (float)v50) + 1.0e-20) * 10.0;
  *((float *)this + 175) = v51;
  uint64_t v52 = *((void *)this + 546);
  uint64_t v53 = (const float *)*((void *)this + 516);
  LODWORD(__C.realp) = 0;
  if (v50)
  {
    vDSP_Length v54 = 0;
    unsigned int v55 = 0;
    do
    {
      vDSP_Length v56 = *(unsigned int *)(*((void *)this + 405) + 4 * v54);
      vDSP_vmul((const float *)(v52 + 4 * (*(_DWORD *)(*((void *)this + 402) + 4 * v54) - 1)), 1, (const float *)(*((void *)this + 399) + 4 * v55), 1, *((float **)this + 528), 1, v56);
      vDSP_sve(*((const float **)this + 528), 1, (float *)&__C, v56);
      v53[v54] = *(const float *)&__C.realp;
      v55 += v56;
      ++v54;
      vDSP_Length v57 = *((unsigned int *)this + 149);
    }
    while (v54 < v57);
    uint64_t v53 = (const float *)*((void *)this + 516);
  }
  else
  {
    vDSP_Length v57 = 0;
  }
  vDSP_vsmul(v53, 1, (const float *)this + 410, *((float **)this + 519), 1, v57);
  vDSP_vmax(*((const float **)this + 531), 1, *((const float **)this + 519), 1, *((float **)this + 522), 1, *((unsigned int *)this + 149));
  float v58 = AULoudnessInNoise::Loudness(this, *((_DWORD *)this + 173));
  *((float *)this + 161) = v58;
  int v59 = *((_DWORD *)this + 136);
  if (v59 == 1)
  {
    unint64_t v60 = *((unsigned int *)this + 380);
    unint64_t v61 = *((unsigned int *)this + 381);
    if (v60 >= v61)
    {
      unint64_t v62 = (float *)((char *)this + 696);
      *((float *)this + 162) = v58 / (float)(*((float *)this + 174) + 1.0e-20);
      int v59 = 1;
LABEL_78:
      uint64_t v63 = *((unsigned int *)this + 380);
      uint64_t v64 = *((unsigned int *)this + 381);
      if (v63 < v64)
      {
        uint64_t v65 = v64 - v63;
        int v66 = (float *)(*((void *)this + 91) + 4 * v63);
        unint64_t v67 = (float *)(*((void *)this + 88) + 4 * v63);
        do
        {
          float v68 = *v67++;
          *v66++ = v68 / (float)(*v62 + 1.0e-20);
          --v65;
        }
        while (v65);
      }
      goto LABEL_81;
    }
    do
    {
      if (v60 == *((_DWORD *)this + 173))
      {
        *(_DWORD *)(*((void *)this + 88) + 4 * v60) = *((_DWORD *)this + 161);
      }
      else
      {
        *(float *)(*((void *)this + 88) + 4 * v60) = AULoudnessInNoise::Loudness(this, v60);
        unint64_t v61 = *((unsigned int *)this + 381);
      }
      ++v60;
    }
    while (v60 < v61);
    int v59 = *((_DWORD *)this + 136);
    *((float *)this + 162) = *((float *)this + 161) / (float)(*((float *)this + 174) + 1.0e-20);
    if (v59 == 1)
    {
      unint64_t v62 = (float *)((char *)this + 696);
      goto LABEL_78;
    }
  }
  else
  {
    *((float *)this + 162) = v58 / (float)(*((float *)this + 174) + 1.0e-20);
  }
LABEL_81:
  unsigned int v69 = *((_DWORD *)this + 416);
  vDSP_Length v70 = *((unsigned int *)this + 415);
  if (v69 >= v70)
  {
    unsigned int v69 = 0;
    *((_DWORD *)this + 416) = 0;
  }
  unint64_t v71 = (float *)*((void *)this + 82);
  v71[v69] = *((float *)this + 162);
  unsigned int v72 = v69 % v70;
  if (!(v69 % v70))
  {
    vDSP_vsort(v71, v70, 1);
    *((_DWORD *)this + 170) = *(_DWORD *)(*((void *)this + 82) + 4 * *((unsigned int *)this + 418));
    int v73 = *((_DWORD *)this + 419);
    if ((v73 + 1) >> 8 <= 0x7C) {
      int v74 = v73 + 1;
    }
    else {
      int v74 = 0;
    }
    *((_DWORD *)this + 419) = v74;
    int v59 = *((_DWORD *)this + 136);
  }
  if (v59 == 1)
  {
    unint64_t v75 = *((unsigned int *)this + 380);
    unint64_t v76 = *((unsigned int *)this + 381);
    if (v75 < v76)
    {
      uint64_t v77 = *((unsigned int *)this + 416);
      unint64_t v78 = v76 - v75;
      int v79 = (uint64_t *)((char *)this + 24 * v75 + 752);
      uint64_t v80 = (int *)(*((void *)this + 91) + 4 * v75);
      do
      {
        int v81 = *v80++;
        int v82 = v81;
        uint64_t v83 = *v79;
        v79 += 3;
        *(_DWORD *)(v83 + 4 * v77) = v82;
        --v78;
      }
      while (v78);
      if (!v72)
      {
        int v84 = (float **)((char *)this + 24 * v75 + 752);
        do
        {
          if (v75 == *((_DWORD *)this + 173))
          {
            *(_DWORD *)(*((void *)this + 184) + 4 * v75) = *((_DWORD *)this + 170);
          }
          else
          {
            vDSP_vsort(*v84, *((unsigned int *)this + 415), 1);
            *(float *)(*((void *)this + 184) + 4 * v75) = (*v84)[*((unsigned int *)this + 418)];
            unint64_t v76 = *((unsigned int *)this + 381);
          }
          ++v75;
          v84 += 3;
        }
        while (v75 < v76);
      }
    }
  }
  int v85 = *((_DWORD *)this + 416);
  if ((v85 + 1) % *((_DWORD *)this + 415)) {
    int v86 = v85 + 1;
  }
  else {
    int v86 = 0;
  }
  *((_DWORD *)this + 416) = v86;
LABEL_102:
  uint64_t v87 = *((unsigned int *)this + 173);
  *((_DWORD *)this + 171) = 2 * (*((float *)this + 170) >= *(float *)(*((void *)this + 408) + 4 * v87));
  if (*((_DWORD *)this + 136) == 1)
  {
    uint64_t v88 = *((unsigned int *)this + 380);
    uint64_t v89 = *((unsigned int *)this + 381);
    if (v88 < v89)
    {
      float v90 = (char *)this + 24 * v87;
      BOOL v91 = (float *)(*((void *)this + 187) + 4 * v88);
      uint64_t v92 = v89 - v88;
      long long v93 = (float *)(*((void *)v90 + 411) + 4 * v88);
      long long v94 = (float *)(*((void *)this + 184) + 4 * v88);
      do
      {
        float v95 = *v94++;
        float v96 = v95;
        float v97 = *v93++;
        if (v96 >= v97) {
          float v98 = 2.0;
        }
        else {
          float v98 = 0.0;
        }
        *v91++ = v98;
        --v92;
      }
      while (v92);
    }
  }
  AULoudnessInNoise::UpdateOutputParams(this);
  uint64_t result = 0;
  ++*((_DWORD *)this + 1186);
  return result;
}

void AULoudnessInNoise::InitializeInternals(AULoudnessInNoise *this)
{
  *((_DWORD *)this + 137) = *((_DWORD *)this + 136);
  uint64_t v2 = (AULoudnessInNoise *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 32), 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(Element, 0);
  *((_DWORD *)this + 136) = Parameter != 0;
  if (Parameter)
  {
    *((_DWORD *)this + 380) = 0;
    *((_DWORD *)this + 381) = *((_DWORD *)this + 145);
  }
  float v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((_DWORD *)this + 138) = ausdk::AUElement::GetParameter(v5, 1u) != 0;
  CFStringRef v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  unsigned int v7 = ausdk::AUElement::GetParameter(v6, 2u);
  if (v7 >= 0x14) {
    unsigned int v7 = 20;
  }
  *((_DWORD *)this + 139) = v7;
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v9 = ausdk::AUElement::GetParameter(v8, 4u);
  *((float *)this + 417) = v9;
  int v10 = 1120403456;
  if (v9 > 100.0 || (int v10 = 0, v9 < 0.0)) {
    *((_DWORD *)this + 417) = v10;
  }
  CFStringRef v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v12 = ausdk::AUElement::GetParameter(v11, 3u);
  if (*((float *)this + 413) != v12 || !*((unsigned char *)this + 1656) || *((_DWORD *)this + 137) != *((_DWORD *)this + 136))
  {
    *((float *)this + 413) = v12;
    float v13 = 10.0;
    if (v12 > 10.0 || (float v13 = 0.5, v12 < 0.5))
    {
      *((float *)this + 413) = v13;
      float v12 = v13;
    }
    unsigned int v14 = (float)(v12 / (float)((float)*((unsigned int *)this + 147) / *((float *)this + 146))) - 1;
    if (v14 <= 1) {
      unint64_t v15 = 1;
    }
    else {
      unint64_t v15 = v14;
    }
    *((_DWORD *)this + 415) = v15;
    int v45 = 0;
    std::vector<float>::assign((char **)this + 82, v15, &v45);
    if (*((_DWORD *)this + 136) == 1)
    {
      unint64_t v16 = *((unsigned int *)this + 380);
      if (v16 < *((_DWORD *)this + 381))
      {
        uint64_t v17 = (char **)((char *)this + 24 * v16 + 752);
        do
        {
          unint64_t v18 = *((unsigned int *)this + 415);
          int v44 = 0;
          std::vector<float>::assign(v17, v18, &v44);
          ++v16;
          v17 += 3;
        }
        while (v16 < *((unsigned int *)this + 381));
      }
    }
    *((_DWORD *)this + 416) = 0;
    unsigned int v19 = *((_DWORD *)this + 415);
    float v20 = (float)(*((float *)this + 417) * (float)v19) / 100.0;
    if (v20 <= 0.0) {
      float v20 = 0.0;
    }
    if (v19 <= v20) {
      unsigned int v21 = v19 - 1;
    }
    else {
      unsigned int v21 = v20;
    }
    *((_DWORD *)this + 418) = v21;
    *((unsigned char *)this + 1656) = 1;
  }
  float v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  unsigned int v23 = ausdk::AUElement::GetParameter(v22, 5u);
  if (v23 >= 6) {
    unsigned int v23 = 6;
  }
  *((_DWORD *)this + 152) = v23;
  int v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v25 = ausdk::AUElement::GetParameter(v24, 6u);
  *((float *)this + 153) = v25;
  float v26 = 1.0;
  if (v25 > 1.0 || (float v26 = 0.0, v25 < 0.0)) {
    *((float *)this + 153) = v26;
  }
  unsigned int v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v28 = ausdk::AUElement::GetParameter(v27, 7u);
  *((float *)this + 154) = v28;
  float v29 = 10.0;
  if (v28 > 10.0 || (float v29 = -200.0, v28 < -200.0)) {
    *((float *)this + 154) = v29;
  }
  vDSP_Length v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v31 = ausdk::AUElement::GetParameter(v30, 8u);
  *((float *)this + 155) = v31;
  float v32 = 10.0;
  if (v31 > 10.0 || (float v32 = -200.0, v31 < -200.0)) {
    *((float *)this + 155) = v32;
  }
  BOOL v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v34 = ausdk::AUElement::GetParameter(v33, 9u);
  *((float *)this + 157) = v34;
  int v35 = 1174011904;
  if (v34 > 8000.0 || (int v35 = 0, v34 < 0.0)) {
    *((_DWORD *)this + 157) = v35;
  }
  uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v37 = ausdk::AUElement::GetParameter(v36, 0xAu);
  *((float *)this + 158) = v37;
  int v38 = 1174011904;
  if (v37 > 8000.0 || (int v38 = 0, v37 < 0.0)) {
    *((_DWORD *)this + 158) = v38;
  }
  float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v40 = ausdk::AUElement::GetParameter(v39, 0xBu);
  *((float *)this + 159) = v40;
  float v41 = 4.0;
  if (v40 > 4.0 || (float v41 = 0.0, v40 < 0.0)) {
    *((float *)this + 159) = v41;
  }
  vDSP_Length v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v43 = ausdk::AUElement::GetParameter(v42, 0xCu);
  *((float *)this + 160) = v43;
  if (v43 <= 4.0)
  {
    if (v43 < 0.0) {
      *((_DWORD *)this + 160) = 0;
    }
  }
  else
  {
    *((_DWORD *)this + 159) = 1082130432;
  }
}

void AULoudnessInNoise::UpdateDynParams(AULoudnessInNoise *this)
{
  uint64_t v2 = (AULoudnessInNoise *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x1Eu);
  if (Parameter > 5000.0) {
    float Parameter = 5000.0;
  }
  if (Parameter < 0.0) {
    float Parameter = 0.0;
  }
  *((float *)this + 172) = Parameter;
  float v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v6 = ausdk::AUElement::GetParameter(v5, 0x20u);
  if (v6 > 1.0) {
    float v6 = 1.0;
  }
  if (v6 < 0.0) {
    float v6 = 0.0;
  }
  *((float *)this + 151) = v6;
}

void AULoudnessInNoise::UpdateOutputParams(AULoudnessInNoise *this)
{
  uint64_t v2 = (AULoudnessInNoise *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x3Cu, *((float *)this + 161), 0);
  BOOL v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v4, 0x3Du, *((float *)this + 162), 0);
  float v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v5, 0x3Eu, *((float *)this + 170), 0);
  float v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v6, 0x3Fu, (float)*((int *)this + 171), 0);
  float v7 = *(float *)(*((void *)this + 210) + 4 * *((unsigned int *)this + 173));
  uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v8, 0x40u, v7, 0);
  float v9 = (float)*((unsigned int *)this + 419);
  int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v10, 0x41u, v9, 0);
  CFStringRef v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v12 = *((float *)this + 175);

  ausdk::AUElement::SetParameter(v11, 0x42u, v12, 0);
}

float AULoudnessInNoise::Loudness(AULoudnessInNoise *this, unsigned int a2)
{
  float v3 = *((float *)this + 159);
  float v4 = *((float *)this + 160);
  float v5 = (const float **)((char *)this + 24 * a2);
  vDSP_vsub(*((const float **)this + 522), 1, v5[216], 1, *((float **)this + 528), 1, *((unsigned int *)this + 149));
  uint64_t v6 = *((unsigned int *)this + 411);
  uint64_t v7 = *((unsigned int *)this + 412);
  float v8 = 0.0;
  if (v6 < v7)
  {
    uint64_t v9 = *((void *)this + 528);
    uint64_t v10 = *((void *)this + 516);
    CFStringRef v11 = v5[216];
    uint64_t v12 = *((void *)this + 306);
    uint64_t v13 = v7 - v6;
    unsigned int v14 = (float *)(v12 + 4 * v6);
    unint64_t v15 = (float *)&v11[v6];
    unint64_t v16 = (float *)(v10 + 4 * v6);
    uint64_t v17 = (float *)(v9 + 4 * v6);
    do
    {
      float v18 = *v17++;
      float v19 = fmaxf(v18, 0.0);
      float v20 = *v16++;
      float v21 = v20;
      float v22 = *v15++;
      float v23 = powf(v21 / (float)(v22 + 1.0e-30), v3);
      float v24 = powf(v19 / (float)(v23 + 1.0), v4);
      float v25 = *v14++;
      float v8 = v8 + (float)(v25 * v24);
      --v13;
    }
    while (v13);
  }
  return v8;
}

uint64_t AULoudnessInNoise::CanScheduleParameters(AULoudnessInNoise *this)
{
  return 0;
}

uint64_t AULoudnessInNoise::SetParameter(AULoudnessInNoise *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (!a3)
  {
    if (*((unsigned char *)this + 17))
    {
      if (a2 > 0xC)
      {
        if (a2 != 32 && a2 != 30) {
          goto LABEL_10;
        }
        uint64_t v10 = (char *)this + 568;
      }
      else
      {
        uint64_t v10 = (char *)this + 560;
      }
      ++*(_DWORD *)v10;
    }
LABEL_10:
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 32), 0);
    goto LABEL_11;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
LABEL_11:
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AULoudnessInNoise::SetProperty(AULoudnessInNoise *this, int a2, int a3, unsigned int a4, const __CFDictionary **a5, unsigned int a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 == 4000)
  {
    if (AULINNLogScope(void)::once != -1) {
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
    }
    if (AULINNLogScope(void)::scope)
    {
      uint64_t v9 = *(NSObject **)AULINNLogScope(void)::scope;
      if (!*(void *)AULINNLogScope(void)::scope) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&buf[4] = "AULoudnessInNoise.cpp";
      __int16 v43 = 1024;
      int v44 = 1171;
      __int16 v45 = 1024;
      LODWORD(v46) = 4000;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Setting property DATA (prop id: %d).", buf, 0x18u);
    }
LABEL_20:
    if (a5)
    {
      CFDictionaryRef v10 = *a5;
      unsigned int valuePtr = 0;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v10, @"SampleRate");
      if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
      {
        if (AULINNLogScope(void)::once != -1) {
          dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
        }
        if (AULINNLogScope(void)::scope)
        {
          if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
          {
            vDSP_Length v30 = *(NSObject **)AULINNLogScope(void)::scope;
            if (*(void *)AULINNLogScope(void)::scope)
            {
              if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&buf[4] = "AULoudnessInNoise.cpp";
                __int16 v43 = 1024;
                int v44 = 1005;
                _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve sample rate.\n", buf, 0x12u);
              }
            }
          }
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "Failed to retrieve sample rate from input dictionary.", -1);
      }
      if (AULINNLogScope(void)::once != -1) {
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
      }
      if (AULINNLogScope(void)::scope)
      {
        if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
        {
          uint64_t v12 = *(NSObject **)AULINNLogScope(void)::scope;
          if (*(void *)AULINNLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&buf[4] = "AULoudnessInNoise.cpp";
              __int16 v43 = 1024;
              int v44 = 1003;
              __int16 v45 = 1024;
              LODWORD(v46) = valuePtr;
              _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved sample rate (%iHz).\n", buf, 0x18u);
            }
          }
        }
      }
      if (*((float *)this + 146) != (float)valuePtr) {
        return 4294956417;
      }
      int v40 = -1;
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v10, @"HearingThreshold");
      if (!CFNumberGetValue(v13, kCFNumberIntType, &v40))
      {
        if (AULINNLogScope(void)::once != -1) {
          dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
        }
        if (AULINNLogScope(void)::scope)
        {
          if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
          {
            float v32 = *(NSObject **)AULINNLogScope(void)::scope;
            if (*(void *)AULINNLogScope(void)::scope)
            {
              if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&buf[4] = "AULoudnessInNoise.cpp";
                __int16 v43 = 1024;
                int v44 = 1023;
                _os_log_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve Microphone Sensitivity/Hearing Threshold !\n", buf, 0x12u);
              }
            }
          }
        }
        BOOL v33 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v33, "Failed to retrieve Microphone Sensitivity/Hearing Threshold from input dictionary !", -1);
      }
      if (AULINNLogScope(void)::once != -1) {
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
      }
      if (AULINNLogScope(void)::scope)
      {
        if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
        {
          unsigned int v14 = *(NSObject **)AULINNLogScope(void)::scope;
          if (*(void *)AULINNLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&buf[4] = "AULoudnessInNoise.cpp";
              __int16 v43 = 1024;
              int v44 = 1019;
              __int16 v45 = 1024;
              LODWORD(v46) = v40;
              _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved Microphone Sensitivity/Hearing Threshold (%d) dB.\n", buf, 0x18u);
            }
          }
        }
      }
      *((float *)this + 135) = (float)v40;
      *((_DWORD *)this + 174) = 1014887350;
      int v39 = 0;
      CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v10, @"nRefLevs");
      if (!CFNumberGetValue(v15, kCFNumberIntType, &v39))
      {
        if (AULINNLogScope(void)::once != -1) {
          dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
        }
        if (AULINNLogScope(void)::scope)
        {
          if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
          {
            float v34 = *(NSObject **)AULINNLogScope(void)::scope;
            if (*(void *)AULINNLogScope(void)::scope)
            {
              if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&buf[4] = "AULoudnessInNoise.cpp";
                __int16 v43 = 1024;
                int v44 = 1050;
                _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve number of Ref Levels.\n", buf, 0x12u);
              }
            }
          }
        }
        int v35 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v35, "Failed to retrieve number of Levels from input dictionary.", -1);
      }
      if (AULINNLogScope(void)::once != -1) {
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
      }
      if (AULINNLogScope(void)::scope)
      {
        if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
        {
          unint64_t v16 = *(NSObject **)AULINNLogScope(void)::scope;
          if (*(void *)AULINNLogScope(void)::scope)
          {
            if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&buf[4] = "AULoudnessInNoise.cpp";
              __int16 v43 = 1024;
              int v44 = 1048;
              __int16 v45 = 1024;
              LODWORD(v46) = v39;
              _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully retrieved number of Ref Levels (%i).\n", buf, 0x18u);
            }
          }
        }
      }
      if (*((_DWORD *)this + 145) > 0x1Eu)
      {
        uint64_t v36 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v36, "Too many Reference Spectrums.", -1);
      }
      *((_DWORD *)this + 145) = v39;
      AULoudnessInNoise::ReadVectorFromDictionary(v10, @"RefLevels", (char **)this + 210);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, @"DecisionThresholds", (char **)this + 408);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, @"spreadingMatrixSmall", (char **)this + 399);
      AULoudnessInNoise::ReadUInt32VectorFromDictionary(v10, @"spread_left_UInt32", (std::vector<unsigned int> *)this + 134);
      AULoudnessInNoise::ReadUInt32VectorFromDictionary(v10, @"spreadingMatrixSmall_Lengths_UInt32", (std::vector<unsigned int> *)this + 135);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, @"Mic2ErpTx", (char **)this + 213);
      AULoudnessInNoise::ReadVectorFromDictionary(v10, @"FreqWeight", (char **)this + 306);
      if (*((_DWORD *)this + 145))
      {
        unint64_t v17 = 0;
        float v18 = (char **)((char *)this + 1728);
        do
        {
          std::to_string((std::string *)buf, *(float *)(*((void *)this + 210) + 4 * v17));
          float v19 = std::string::insert((std::string *)buf, 0, "lev", 3uLL);
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          int64_t v38 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE3(v46) < 0) {
            operator delete(*(void **)buf);
          }
          float v21 = v38 >= 0 ? (const char *)__p : (const char *)__p[0];
          CFStringRef v22 = CFStringCreateWithCString(0, v21, 0x8000100u);
          CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v10, v22);
          if (v23)
          {
            if (AULINNLogScope(void)::once != -1) {
              dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
            }
            if (AULINNLogScope(void)::scope)
            {
              if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
              {
                float v24 = *(NSObject **)AULINNLogScope(void)::scope;
                if (*(void *)AULINNLogScope(void)::scope)
                {
                  if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
                  {
                    if (v38 >= 0) {
                      float v25 = __p;
                    }
                    else {
                      float v25 = (void **)__p[0];
                    }
                    *(_DWORD *)AudioTimeStamp buf = 136315650;
                    *(void *)&buf[4] = "AULoudnessInNoise.cpp";
                    __int16 v43 = 1024;
                    int v44 = 1106;
                    __int16 v45 = 2080;
                    size_t v46 = v25;
                    _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found the dictionary: %s\n", buf, 0x1Cu);
                  }
                }
              }
            }
            CFRelease(v22);
            AULoudnessInNoise::ReadVectorFromDictionary(v23, @"RefSpecAtRefMic", v18 + 93);
            AULoudnessInNoise::ReadVectorFromDictionary(v23, @"RefSpecSpreadAtErp", v18);
            if (AULoudnessInNoise::ReadVectorFromDictionary(v23, @"DecisionThresholdsMixed", v18 + 195))v18[196] = v18[195]; {
          }
            }
          else
          {
            if (AULINNLogScope(void)::once != -1) {
              dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
            }
            if (AULINNLogScope(void)::scope)
            {
              if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
              {
                float v26 = *(NSObject **)AULINNLogScope(void)::scope;
                if (*(void *)AULINNLogScope(void)::scope)
                {
                  if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
                  {
                    if (v38 >= 0) {
                      unsigned int v27 = __p;
                    }
                    else {
                      unsigned int v27 = (void **)__p[0];
                    }
                    *(_DWORD *)AudioTimeStamp buf = 136315650;
                    *(void *)&buf[4] = "AULoudnessInNoise.cpp";
                    __int16 v43 = 1024;
                    int v44 = 1100;
                    __int16 v45 = 2080;
                    size_t v46 = v27;
                    _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Missing dictionary: %s\n", buf, 0x1Cu);
                  }
                }
              }
            }
            CFRelease(v22);
          }
          if (SHIBYTE(v38) < 0) {
            operator delete(__p[0]);
          }
          if (!v23) {
            return 4294956417;
          }
          ++v17;
          v18 += 3;
        }
        while (v17 < *((unsigned int *)this + 145));
      }
      if (AULoudnessInNoise::Validate_Level_Spreading_PropertyRelatedValues(this)) {
        return 4294956417;
      }
      *((unsigned char *)this + 1624) = 1;
      if (AULINNLogScope(void)::once != -1) {
        dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
      }
      if (AULINNLogScope(void)::scope)
      {
        float v29 = *(NSObject **)AULINNLogScope(void)::scope;
        if (!*(void *)AULINNLogScope(void)::scope) {
          return 0;
        }
      }
      else
      {
        float v29 = MEMORY[0x1E4F14500];
      }
      uint64_t result = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&buf[4] = "AULoudnessInNoise.cpp";
      __int16 v43 = 1024;
      int v44 = 1183;
      _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_INFO, "%25s:%-5d Linn Data successfully set.", buf, 0x12u);
      return 0;
    }
    if (AULINNLogScope(void)::once != -1) {
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
    }
    if (AULINNLogScope(void)::scope)
    {
      float v28 = *(NSObject **)AULINNLogScope(void)::scope;
      if (!*(void *)AULINNLogScope(void)::scope) {
        return 4294956445;
      }
    }
    else
    {
      float v28 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&buf[4] = "AULoudnessInNoise.cpp";
      __int16 v43 = 1024;
      int v44 = 1174;
      _os_log_impl(&dword_1BB0CE000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.", buf, 0x12u);
    }
    return 4294956445;
  }
  if (a2 != 3700)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 577) = *(_DWORD *)a5 != 0;
      return result;
    }
    return 4294956417;
  }
  uint64_t result = 4294956445;
  if (a6 >= 4)
  {
    if (*(unsigned char *)a5) {
      return 0;
    }
    else {
      return 4294956445;
    }
  }
  return result;
}

void sub_1BB6B8338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessInNoise::ReadVectorFromDictionary(const __CFDictionary *a1, const __CFString *a2, char **a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFDataRef v6 = Value;
    unsigned int Length = CFDataGetLength(Value);
    unsigned int v8 = Length >> 2;
    int v16 = 0;
    std::vector<float>::assign(a3, Length >> 2, &v16);
    BytePtr = CFDataGetBytePtr(v6);
    uint64_t v10 = 0;
    if (Length >= 4)
    {
      CFStringRef v11 = *a3;
      if (v8 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v8;
      }
      do
      {
        unsigned int v13 = *(_DWORD *)BytePtr;
        BytePtr += 4;
        *(_DWORD *)CFStringRef v11 = bswap32(v13);
        v11 += 4;
        --v12;
      }
      while (v12);
      return 0;
    }
  }
  else
  {
    if (AULINNLogScope(void)::once != -1) {
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
    }
    uint64_t v10 = 4294900555;
    if (AULINNLogScope(void)::scope)
    {
      if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
      {
        unsigned int v14 = *(NSObject **)AULINNLogScope(void)::scope;
        if (*(void *)AULINNLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            int v16 = 136315650;
            unint64_t v17 = "AULoudnessInNoise.cpp";
            __int16 v18 = 1024;
            int v19 = 1215;
            __int16 v20 = 2080;
            CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
            _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve %s.\n", (uint8_t *)&v16, 0x1Cu);
          }
        }
      }
    }
  }
  return v10;
}

void AULoudnessInNoise::ReadUInt32VectorFromDictionary(const __CFDictionary *a1, const __CFString *a2, std::vector<unsigned int> *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFDataRef v6 = Value;
    unsigned int Length = CFDataGetLength(Value);
    unsigned int v8 = Length >> 2;
    std::vector<unsigned int>::value_type v14 = 0;
    std::vector<unsigned int>::assign(a3, Length >> 2, &v14);
    BytePtr = CFDataGetBytePtr(v6);
    if (Length >= 4)
    {
      std::vector<unsigned int>::pointer begin = a3->__begin_;
      if (v8 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v8;
      }
      do
      {
        unsigned int v12 = *(_DWORD *)BytePtr;
        BytePtr += 4;
        *begin++ = v12;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    if (AULINNLogScope(void)::once != -1) {
      dispatch_once(&AULINNLogScope(void)::once, &__block_literal_global_26104);
    }
    if (AULINNLogScope(void)::scope)
    {
      if (*(unsigned char *)(AULINNLogScope(void)::scope + 8))
      {
        unsigned int v13 = *(NSObject **)AULINNLogScope(void)::scope;
        if (*(void *)AULINNLogScope(void)::scope)
        {
          if (os_log_type_enabled(*(os_log_t *)AULINNLogScope(void)::scope, OS_LOG_TYPE_DEBUG))
          {
            std::vector<unsigned int>::value_type v14 = 136315650;
            CFNumberRef v15 = "AULoudnessInNoise.cpp";
            __int16 v16 = 1024;
            int v17 = 954;
            __int16 v18 = 2080;
            CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
            _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Failed to retrieve %s.\n", (uint8_t *)&v14, 0x1Cu);
          }
        }
      }
    }
  }
}

uint64_t AULoudnessInNoise::Validate_Level_Spreading_PropertyRelatedValues(AULoudnessInNoise *this)
{
  unint64_t v1 = *((unsigned int *)this + 145);
  if (v1 <= 0x1E) {
    LODWORD(v2) = 0;
  }
  else {
    LODWORD(v2) = 1836020332;
  }
  if (v1 <= (uint64_t)(*((void *)this + 211) - *((void *)this + 210)) >> 2) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = 1717925740;
  }
  if (!v2)
  {
    uint64_t v2 = 1936745827;
    float v3 = (int *)*((void *)this + 402);
    uint64_t v4 = (uint64_t)(*((void *)this + 403) - (void)v3) >> 2;
    uint64_t v5 = *((unsigned int *)this + 149);
    if (v4 == v5 && v4 == (uint64_t)(*((void *)this + 307) - *((void *)this + 306)) >> 2)
    {
      CFDataRef v6 = (int *)*((void *)this + 405);
      if (v4 == (uint64_t)(*((void *)this + 406) - (void)v6) >> 2
        && v4 == (uint64_t)(*((void *)this + 214) - *((void *)this + 213)) >> 2)
      {
        if (!v1) {
          goto LABEL_26;
        }
        LODWORD(v7) = 0;
        unsigned int v8 = (void *)((char *)this + 1728);
        uint64_t v9 = *((unsigned int *)this + 145);
        do
        {
          if ((uint64_t)(v8[1] - *v8) >> 2 == v4 && (uint64_t)(v8[94] - v8[93]) >> 2 == v4) {
            uint64_t v7 = v7;
          }
          else {
            uint64_t v7 = 1936745827;
          }
          if (*((_DWORD *)this + 136) == 1)
          {
            if (v1 <= (uint64_t)(v8[196] - v8[195]) >> 2) {
              uint64_t v7 = v7;
            }
            else {
              uint64_t v7 = 1717925740;
            }
          }
          v8 += 3;
          --v9;
        }
        while (v9);
        uint64_t v2 = v7;
        if (!v7)
        {
LABEL_26:
          unsigned int v11 = 0;
          if (v5)
          {
            unsigned int v12 = (int *)*((void *)this + 405);
            uint64_t v13 = (uint64_t)(*((void *)this + 403) - (void)v3) >> 2;
            do
            {
              int v14 = *v12++;
              v11 += v14;
              --v13;
            }
            while (v13);
          }
          if ((uint64_t)(*((void *)this + 400) - *((void *)this + 399)) >> 2 < (unint64_t)v11 || v11 > 0x7023) {
            uint64_t v2 = 1650815602;
          }
          else {
            uint64_t v2 = 0;
          }
          if (v5)
          {
            do
            {
              int v17 = *v6++;
              int v16 = v17;
              int v18 = *v3++;
              if (v16 + v18 - 1 <= v5) {
                uint64_t v2 = v2;
              }
              else {
                uint64_t v2 = 1650815602;
              }
              --v4;
            }
            while (v4);
          }
        }
      }
    }
  }
  return v2;
}

void ___ZL14AULINNLogScopev_block_invoke()
{
}

uint64_t AULoudnessInNoise::GetProperty(AULoudnessInNoise *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 <= 69999)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v28 = *((unsigned __int8 *)this + 577);
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      uint64_t result = 0;
      int v28 = *((unsigned __int8 *)this + 376);
    }
    *__dst = v28;
    return result;
  }
  switch(a2)
  {
    case 70000:
      float v41 = 0;
      unint64_t v42 = 0;
      p_p = (void **)&v41;
      int v8 = *((_DWORD *)this + 161);
      std::string::basic_string[abi:ne180100]<0>(&__p, "RawLoudness");
      v43.i64[0] = (uint64_t)&__p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = v8;
      if (v46.i8[15] < 0) {
        operator delete(__p);
      }
      int v9 = *((_DWORD *)this + 162);
      std::string::basic_string[abi:ne180100]<0>(&__p, "NormLoudness");
      v43.i64[0] = (uint64_t)&__p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = v9;
      if (v46.i8[15] < 0) {
        operator delete(__p);
      }
      int v10 = *((_DWORD *)this + 170);
      std::string::basic_string[abi:ne180100]<0>(&__p, "LoudnessPercentile");
      v43.i64[0] = (uint64_t)&__p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = v10;
      if (v46.i8[15] < 0) {
        operator delete(__p);
      }
      int v11 = *((_DWORD *)this + 171);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Audibility");
      v43.i64[0] = (uint64_t)&__p;
      *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&p_p, &__p, &v43)+ 14) = (float)v11;
      if (v46.i8[15] < 0) {
        operator delete(__p);
      }
      int64x2_t v43 = 0uLL;
      v44[0] = 0;
      std::vector<applesauce::CF::TypeRefPair>::reserve(&v43, v42);
      unsigned int v12 = (uint64_t *)p_p;
      if (p_p != (void **)&v41)
      {
        uint64_t v13 = (CFStringRef *)v43.i64[1];
        do
        {
          if ((unint64_t)v13 >= v44[0])
          {
            uint64_t v14 = ((uint64_t)v13 - v43.i64[0]) >> 4;
            if ((unint64_t)(v14 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v15 = (uint64_t)(v44[0] - v43.i64[0]) >> 3;
            if (v15 <= v14 + 1) {
              unint64_t v15 = v14 + 1;
            }
            if (v44[0] - v43.i64[0] >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            uint64_t v48 = v44;
            if (v16) {
              int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>((uint64_t)v44, v16);
            }
            else {
              int v17 = 0;
            }
            std::string __p = v17;
            v46.i64[0] = (uint64_t)&v17[16 * v14];
            v46.i64[1] = v46.i64[0];
            unint64_t v47 = (unint64_t)&v17[16 * v16];
            applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>((CFStringRef *)v46.i64[0], (const UInt8 *)v12 + 32, (int *)v12 + 14);
            uint64_t v18 = v46.i64[0];
            uint64_t v13 = (CFStringRef *)(v46.i64[1] + 16);
            v46.i64[1] += 16;
            int v19 = (void *)v43.i64[1];
            uint64_t v20 = (void *)v43.i64[0];
            if (v43.i64[1] == v43.i64[0])
            {
              int64x2_t v22 = vdupq_n_s64(v43.u64[1]);
            }
            else
            {
              do
              {
                uint64_t v21 = *(v19 - 2);
                v19 -= 2;
                *(void *)(v18 - 16) = v21;
                v18 -= 16;
                *int v19 = 0;
                *(void *)(v18 + 8) = v19[1];
                v19[1] = 0;
              }
              while (v19 != v20);
              int64x2_t v22 = v43;
              uint64_t v13 = (CFStringRef *)v46.i64[1];
            }
            v43.i64[0] = v18;
            v43.i64[1] = (uint64_t)v13;
            int64x2_t v46 = v22;
            unint64_t v23 = v44[0];
            v44[0] = v47;
            unint64_t v47 = v23;
            std::string __p = (void *)v22.i64[0];
            std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>(v13, (const UInt8 *)v12 + 32, (int *)v12 + 14);
            v13 += 2;
          }
          v43.i64[1] = (uint64_t)v13;
          float v24 = (char *)v12[1];
          if (v24)
          {
            do
            {
              float v25 = (char **)v24;
              float v24 = *(char **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              float v25 = (char **)v12[2];
              BOOL v26 = *v25 == (char *)v12;
              unsigned int v12 = (uint64_t *)v25;
            }
            while (!v26);
          }
          unsigned int v12 = (uint64_t *)v25;
        }
        while (v25 != &v41);
      }
      CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&v43);
      std::string __p = &v43;
      std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      CFRetain(CFDictionaryRef);
      *(void *)__dst = CFDictionaryRef;
      if (CFDictionaryRef) {
        CFRelease(CFDictionaryRef);
      }
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v41);
      goto LABEL_85;
    case 70001:
      uint64_t result = 0;
      float v39 = *((float *)this + 161);
      goto LABEL_89;
    case 70002:
      uint64_t result = 0;
      float v39 = *((float *)this + 162);
      goto LABEL_89;
    case 70003:
      uint64_t result = 0;
      float v39 = *((float *)this + 170);
      goto LABEL_89;
    case 70004:
      uint64_t result = 0;
      float v39 = (float)*((int *)this + 171);
      goto LABEL_89;
    case 70005:
    case 70006:
    case 70007:
    case 70008:
    case 70009:
      return result;
    case 70010:
      int64_t v38 = (const void *)*((void *)this + 210);
      goto LABEL_84;
    case 70011:
      int64_t v38 = (const void *)*((void *)this + 88);
      goto LABEL_84;
    case 70012:
      int64_t v38 = (const void *)*((void *)this + 91);
      goto LABEL_84;
    case 70013:
      int64_t v38 = (const void *)*((void *)this + 184);
      goto LABEL_84;
    case 70014:
      int64_t v38 = (const void *)*((void *)this + 187);
LABEL_84:
      memcpy(__dst, v38, 4 * *((unsigned int *)this + 145));
      goto LABEL_85;
    default:
      if (a2 == 71000)
      {
        uint64_t result = 0;
        float v39 = *((float *)this + 172);
LABEL_89:
        *(float *)__dst = v39;
      }
      else if (a2 == 80000)
      {
        v43.i64[1] = 0;
        v44[0] = 0;
        v43.i64[0] = (uint64_t)&v43.i64[1];
        std::string::basic_string[abi:ne180100]<0>(&__p, "RawLoudness");
        p_p = &__p;
        float v29 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v29 != (char *)this + 704) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v29, *((char **)this + 88), *((void *)this + 89), (uint64_t)(*((void *)this + 89) - *((void *)this + 88)) >> 2);
        }
        if (v46.i8[15] < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "NormLoudness");
        p_p = &__p;
        vDSP_Length v30 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v30 != (char *)this + 728) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v30, *((char **)this + 91), *((void *)this + 92), (uint64_t)(*((void *)this + 92) - *((void *)this + 91)) >> 2);
        }
        if (v46.i8[15] < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "LoudnessPercentile");
        p_p = &__p;
        float v31 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v31 != (char *)this + 1472) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v31, *((char **)this + 184), *((void *)this + 185), (uint64_t)(*((void *)this + 185) - *((void *)this + 184)) >> 2);
        }
        if (v46.i8[15] < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Audibility");
        p_p = &__p;
        float v32 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v32 != (char *)this + 1496) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v32, *((char **)this + 187), *((void *)this + 188), (uint64_t)(*((void *)this + 188) - *((void *)this + 187)) >> 2);
        }
        if (v46.i8[15] < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Levels");
        p_p = &__p;
        BOOL v33 = (char *)(std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v43, &__p, (_OWORD **)&p_p)+ 7);
        if (v33 != (char *)this + 1680) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v33, *((char **)this + 210), *((void *)this + 211), (uint64_t)(*((void *)this + 211) - *((void *)this + 210)) >> 2);
        }
        if (v46.i8[15] < 0) {
          operator delete(__p);
        }
        std::string __p = 0;
        int64x2_t v46 = 0uLL;
        std::vector<applesauce::CF::TypeRefPair>::reserve(&__p, v44[0]);
        float v34 = (const UInt8 *)v43.i64[0];
        if ((unint64_t *)v43.i64[0] != &v43.u64[1])
        {
          do
          {
            std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::vector<float> const&>(&__p, v34 + 32, (void *)v34 + 7);
            int v35 = (unint64_t *)*((void *)v34 + 1);
            if (v35)
            {
              do
              {
                uint64_t v36 = v35;
                int v35 = (unint64_t *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                uint64_t v36 = (unint64_t *)*((void *)v34 + 2);
                BOOL v26 = *v36 == (void)v34;
                float v34 = (const UInt8 *)v36;
              }
              while (!v26);
            }
            float v34 = (const UInt8 *)v36;
          }
          while (v36 != &v43.u64[1]);
        }
        CFDictionaryRef v37 = applesauce::CF::details::make_CFDictionaryRef((void ***)&__p);
        p_p = &__p;
        std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&p_p);
        v44[2] = (unint64_t)v37;
        CFRetain(v37);
        *(void *)__dst = v37;
        if (v37) {
          CFRelease(v37);
        }
        std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((void *)v43.i64[1]);
LABEL_85:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

void sub_1BB6B8F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  CFDataRef v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    int v8 = a1 + 1;
LABEL_9:
    int v10 = (uint64_t *)operator new(0x40uLL);
    int v11 = *a3;
    uint64_t v12 = *((void *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *int v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    *((_DWORD *)v10 + 14) = 0;
    *int v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    int *v6 = v10;
    uint64_t v13 = (uint64_t *)**a1;
    uint64_t v14 = v10;
    if (v13)
    {
      *a1 = v13;
      uint64_t v14 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      int v8 = (uint64_t **)v5;
      int v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      CFDataRef v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0) {
      break;
    }
    CFDataRef v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  int v10 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v10;
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int valuePtr = *a3;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    int v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  return a1;
}

void sub_1BB6B9284(_Unwind_Exception *a1)
{
  float v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t AULoudnessInNoise::GetPropertyInfo(AULoudnessInNoise *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 70009)
  {
    if ((a2 - 70010) < 5)
    {
      *a6 = 0;
      int v9 = 4 * *((_DWORD *)this + 145);
      goto LABEL_17;
    }
    if (a2 == 71000) {
      goto LABEL_6;
    }
    int v8 = 80000;
  }
  else
  {
    int v8 = 70000;
    if (a2 > 70000)
    {
      if ((a2 - 70001) >= 4) {
        return result;
      }
      goto LABEL_6;
    }
    if (a2 == 21)
    {
      *a6 = 1;
      goto LABEL_7;
    }
    if (a2 == 3700)
    {
LABEL_6:
      *a6 = 0;
LABEL_7:
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (a2 != v8) {
    return result;
  }
  *a6 = 0;
  int v9 = 8;
LABEL_17:
  uint64_t result = 0;
  *a5 = v9;
  return result;
}

uint64_t AULoudnessInNoise::Reset(AULoudnessInNoise *this)
{
  *((_OWORD *)this + 35) = xmmword_1BB873AA0;
  *((_DWORD *)this + 419) = 0;
  if (*((unsigned char *)this + 17))
  {
    uint64_t v2 = (void *)*((void *)this + 191);
    uint64_t v3 = *((void *)this + 192) - (void)v2;
    if (v3 >= 1) {
      bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
    }
    uint64_t v4 = (void *)*((void *)this + 194);
    uint64_t v5 = *((void *)this + 195) - (void)v4;
    if (v5 >= 1) {
      bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    }
    CFIndex v6 = (void *)*((void *)this + 197);
    uint64_t v7 = *((void *)this + 198) - (void)v6;
    if (v7 >= 1) {
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    }
    int v8 = (void *)*((void *)this + 200);
    uint64_t v9 = *((void *)this + 201) - (void)v8;
    if (v9 >= 1) {
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    }
    int v10 = (void *)*((void *)this + 501);
    uint64_t v11 = *((void *)this + 502) - (void)v10;
    if (v11 >= 1) {
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    }
    uint64_t v12 = (void *)*((void *)this + 504);
    uint64_t v13 = *((void *)this + 505) - (void)v12;
    if (v13 >= 1) {
      bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
    }
    uint64_t v14 = (void *)*((void *)this + 507);
    uint64_t v15 = *((void *)this + 508) - (void)v14;
    if (v15 >= 1) {
      bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    }
    unint64_t v16 = (void *)*((void *)this + 510);
    uint64_t v17 = *((void *)this + 511) - (void)v16;
    if (v17 >= 1) {
      bzero(v16, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
    }
    uint64_t v18 = (void *)*((void *)this + 513);
    uint64_t v19 = *((void *)this + 514) - (void)v18;
    if (v19 >= 1) {
      bzero(v18, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
    }
    uint64_t v20 = (void *)*((void *)this + 516);
    uint64_t v21 = *((void *)this + 517) - (void)v20;
    if (v21 >= 1) {
      bzero(v20, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
    }
    int64x2_t v22 = (void *)*((void *)this + 519);
    uint64_t v23 = *((void *)this + 520) - (void)v22;
    if (v23 >= 1) {
      bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
    }
    float v24 = (void *)*((void *)this + 522);
    uint64_t v25 = *((void *)this + 523) - (void)v24;
    if (v25 >= 1) {
      bzero(v24, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
    }
    BOOL v26 = (void *)*((void *)this + 525);
    uint64_t v27 = *((void *)this + 526) - (void)v26;
    if (v27 >= 1) {
      bzero(v26, 4 * (((unint64_t)v27 >> 2) - ((unint64_t)v27 > 3)) + 4);
    }
    int v28 = (void *)*((void *)this + 528);
    uint64_t v29 = *((void *)this + 529) - (void)v28;
    if (v29 >= 1) {
      bzero(v28, 4 * (((unint64_t)v29 >> 2) - ((unint64_t)v29 > 3)) + 4);
    }
    vDSP_Length v30 = (void *)*((void *)this + 531);
    uint64_t v31 = *((void *)this + 532) - (void)v30;
    if (v31 >= 1) {
      bzero(v30, 4 * (((unint64_t)v31 >> 2) - ((unint64_t)v31 > 3)) + 4);
    }
    float v32 = (void *)*((void *)this + 82);
    uint64_t v33 = *((void *)this + 83) - (void)v32;
    if (v33 >= 1) {
      bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
    }
    if (*((_DWORD *)this + 136) == 1)
    {
      uint64_t v34 = *((unsigned int *)this + 380);
      uint64_t v35 = *((unsigned int *)this + 381);
      if (v34 < v35)
      {
        uint64_t v36 = v35 - v34;
        CFDictionaryRef v37 = (void *)((char *)this + 24 * v34 + 760);
        do
        {
          int64_t v38 = (void *)*(v37 - 1);
          uint64_t v39 = *v37 - (void)v38;
          if (v39 >= 1) {
            bzero(v38, 4 * (((unint64_t)v39 >> 2) - ((unint64_t)v39 > 3)) + 4);
          }
          v37 += 3;
          --v36;
        }
        while (v36);
      }
      int v40 = (void *)*((void *)this + 88);
      uint64_t v41 = *((void *)this + 89) - (void)v40;
      if (v41 >= 1) {
        bzero(v40, 4 * (((unint64_t)v41 >> 2) - ((unint64_t)v41 > 3)) + 4);
      }
      unint64_t v42 = (void *)*((void *)this + 91);
      uint64_t v43 = *((void *)this + 92) - (void)v42;
      if (v43 >= 1) {
        bzero(v42, 4 * (((unint64_t)v43 >> 2) - ((unint64_t)v43 > 3)) + 4);
      }
      int v44 = (void *)*((void *)this + 184);
      uint64_t v45 = *((void *)this + 185) - (void)v44;
      if (v45 >= 1) {
        bzero(v44, 4 * (((unint64_t)v45 >> 2) - ((unint64_t)v45 > 3)) + 4);
      }
      int64x2_t v46 = (void *)*((void *)this + 187);
      uint64_t v47 = *((void *)this + 188) - (void)v46;
      if (v47 >= 1) {
        bzero(v46, 4 * (((unint64_t)v47 >> 2) - ((unint64_t)v47 > 3)) + 4);
      }
    }
    uint64_t v48 = (void *)*((void *)this + 543);
    uint64_t v49 = *((void *)this + 544) - (void)v48;
    if (v49 >= 1) {
      bzero(v48, 4 * (((unint64_t)v49 >> 2) - ((unint64_t)v49 > 3)) + 4);
    }
    unsigned int v50 = (void *)*((void *)this + 546);
    uint64_t v51 = *((void *)this + 547) - (void)v50;
    if (v51 >= 1) {
      bzero(v50, 4 * (((unint64_t)v51 >> 2) - ((unint64_t)v51 > 3)) + 4);
    }
    uint64_t v52 = (void *)*((void *)this + 549);
    uint64_t v53 = *((void *)this + 550) - (void)v52;
    if (v53 >= 1) {
      bzero(v52, 4 * (((unint64_t)v53 >> 2) - ((unint64_t)v53 > 3)) + 4);
    }
    vDSP_Length v54 = (void *)*((void *)this + 552);
    uint64_t v55 = *((void *)this + 553) - (void)v54;
    if (v55 >= 1) {
      bzero(v54, 4 * (((unint64_t)v55 >> 2) - ((unint64_t)v55 > 3)) + 4);
    }
    vDSP_Length v56 = (void *)*((void *)this + 555);
    uint64_t v57 = *((void *)this + 556) - (void)v56;
    if (v57 >= 1) {
      bzero(v56, 4 * (((unint64_t)v57 >> 2) - ((unint64_t)v57 > 3)) + 4);
    }
    float v58 = (void *)*((void *)this + 558);
    uint64_t v59 = *((void *)this + 559) - (void)v58;
    if (v59 >= 1) {
      bzero(v58, 4 * (((unint64_t)v59 >> 2) - ((unint64_t)v59 > 3)) + 4);
    }
    unint64_t v60 = (void *)*((void *)this + 561);
    uint64_t v61 = *((void *)this + 562) - (void)v60;
    if (v61 >= 1) {
      bzero(v60, 4 * (((unint64_t)v61 >> 2) - ((unint64_t)v61 > 3)) + 4);
    }
    *((_DWORD *)this + 1071) = 0;
    *((unsigned char *)this + 4288) = 0;
    *((_DWORD *)this + 1073) = 0;
    AULoudnessInNoise::SetOutputParamRelatedDefaults(this);
  }
  *((_DWORD *)this + 1186) = 0;
  return 0;
}

void AULoudnessInNoise::SetOutputParamRelatedDefaults(AULoudnessInNoise *this)
{
  uint64_t v2 = (AULoudnessInNoise *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AULoudnessInNoise *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(Element, 0x3Du, 0.0, 0);
  *((_DWORD *)this + 162) = 0;
  uint64_t v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v4, 0x3Cu, 0.0, 0);
  *((_DWORD *)this + 161) = 0;
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v5, 0x3Eu, 0.0, 0);
  *((_DWORD *)this + 170) = 0;
  CFIndex v6 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v6, 0x3Fu, -1.0, 0);
  *((_DWORD *)this + 171) = -1;
  uint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v7, 0x40u, 0.0, 0);
  *((_DWORD *)this + 173) = 0;
  int v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v8, 0x41u, 0.0, 0);
  *((_DWORD *)this + 419) = 0;
  uint64_t v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  ausdk::AUElement::SetParameter(v9, 0x42u, -200.0, 0);
  *((_DWORD *)this + 175) = -1018691584;
}

uint64_t AULoudnessInNoise::Initialize(AULoudnessInNoise *this)
{
  *((unsigned char *)this + 376) = 1;
  uint64_t v2 = (AULoudnessInNoise *)((char *)this + 80);
  uint64_t v3 = *((void *)this + 15);
  if (v3) {
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  else {
    uint64_t v4 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  if (v4 >= 2)
  {
    unsigned int v5 = 1;
    do
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement(v2, v5 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v2, v5) + 80)) {
        return 4294956428;
      }
    }
    while (v4 != ++v5);
  }
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) != 1
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 1u) + 108) != 1)
  {
    return 4294956428;
  }
  AULoudnessInNoise::InitializeInternals(this);
  *((_DWORD *)this + 419) = 0;
  int v7 = *((_DWORD *)this + 84);
  if (*((_DWORD *)this + 147) != v7)
  {
    *((_DWORD *)this + 147) = v7;
    *((_DWORD *)this + 148) = 2 * v7;
    *((_DWORD *)this + 149) = v7 + 1;
    if (!*((unsigned char *)this + 1624)) {
      AULoudnessInNoise::Set_Level_Spreading_PropertyRelatedDefaults(this);
    }
  }
  uint64_t v8 = AULoudnessInNoise::Validate_Level_Spreading_PropertyRelatedValues(this);
  float v9 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  *((float *)this + 146) = v9;
  unint64_t v10 = *((unsigned int *)this + 148);
  *((float *)this + 156) = sqrtf((float)v10);
  std::vector<float>::resize((uint64_t)this + 1528, v10);
  std::vector<float>::resize((uint64_t)this + 1552, *((unsigned int *)this + 148));
  std::vector<float>::resize((uint64_t)this + 1576, *((unsigned int *)this + 148));
  std::vector<float>::resize((uint64_t)this + 1600, *((unsigned int *)this + 149));
  AULoudnessInNoise::UpdateDynParams(this);
  AULoudnessInNoise::SetOutputParamRelatedDefaults(this);
  AULoudnessInNoise::UpdateOutputParams(this);
  *((void *)this + 204) = 0xC12000003E99999ALL;
  *((_DWORD *)this + 410) = 1050798235;
  unsigned int v11 = *((_DWORD *)this + 147);
  float v12 = *((float *)this + 146) * 0.5 / (float)v11;
  unsigned int v13 = vcvtms_u32_f32(*((float *)this + 157) / v12);
  if (v11 >= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = *((_DWORD *)this + 147);
  }
  if (v13) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = 0;
  }
  *((_DWORD *)this + 411) = v15;
  unsigned int v16 = vcvtps_u32_f32(*((float *)this + 158) / v12);
  if (v16 + 1 < v11) {
    unsigned int v11 = v16 + 1;
  }
  if (v11 <= v15 + 1) {
    unsigned int v11 = v15 + 1;
  }
  *((_DWORD *)this + 412) = v11;
  unint64_t v17 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 501, v17, &v71);
  unint64_t v18 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 504, v18, &v71);
  unint64_t v19 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 507, v19, &v71);
  unint64_t v20 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 510, v20, &v71);
  unint64_t v21 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 513, v21, &v71);
  unint64_t v22 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 516, v22, &v71);
  unint64_t v23 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 519, v23, &v71);
  unint64_t v24 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 522, v24, &v71);
  unint64_t v25 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 525, v25, &v71);
  unint64_t v26 = *((unsigned int *)this + 149);
  float v71 = 0.0;
  std::vector<float>::assign((char **)this + 528, v26, &v71);
  float v27 = __exp10f(*((float *)this + 135) / 20.0);
  float v71 = v27 * v27;
  std::vector<float>::assign((char **)this + 531, *((unsigned int *)this + 149), &v71);
  *((unsigned char *)this + 600) = 0;
  *((void *)this + 534) = 0x308000004E800000;
  *((unsigned char *)this + 4288) = 0;
  *((_DWORD *)this + 1071) = 0;
  *((_DWORD *)this + 1073) = 0;
  unint64_t v28 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 537, v28, &v70);
  unint64_t v29 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 543, v29, &v70);
  unint64_t v30 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 546, v30, &v70);
  unint64_t v31 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 549, v31, &v70);
  unint64_t v32 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 552, v32, &v70);
  unint64_t v33 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 555, v33, &v70);
  unint64_t v34 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 558, v34, &v70);
  unint64_t v35 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 561, v35, &v70);
  unint64_t v36 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 564, v36, &v70);
  unint64_t v37 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 567, v37, &v70);
  unint64_t v38 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 570, v38, &v70);
  *((_DWORD *)this + 1070) = 7;
  unint64_t v39 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 573, v39, &v70);
  unint64_t v40 = *((unsigned int *)this + 149);
  uint64_t v41 = (*((_DWORD *)this + 1070) - 1);
  if (*((_DWORD *)this + 1070) != 1)
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    int v44 = (char *)this + 4656;
    uint64_t v45 = *((void *)this + 573);
    float v46 = *((float *)this + 1164);
    float v47 = (float)v40
        / (float)(*((float *)this + 2 * (*((_DWORD *)this + 1070) - 1) + 1164) - v46);
    float v48 = v46 * v47;
    do
    {
      uint64_t v49 = (float *)&v44[8 * v42++];
      unsigned int v50 = (float *)&v44[8 * v42];
      float v51 = v49[1];
      float v53 = *v50;
      float v52 = v50[1];
      float v54 = v47 * (float)((float)(*v49 + *v50) * 0.5);
      float v55 = (float)(v51 + v52) * 0.5;
      if (v48 >= v54)
      {
        unint64_t v57 = v43;
      }
      else
      {
        float v56 = v47 * *v49;
        do
        {
          unint64_t v57 = (v43 + 1);
          *(float *)(v45 + 4 * v43) = v51
                                                    + (float)((float)((float)((float)(v48 - v56) / (float)(v54 - v56))
                                                                    * (float)((float)(v48 - v56) / (float)(v54 - v56)))
                                                            * (float)(v55 - v51));
          float v48 = v48 + 1.0;
          LODWORD(v43) = v43 + 1;
        }
        while (v48 < v54);
      }
      float v58 = v47 * v53;
      if (v48 < v58 && v57 < v40)
      {
        float v60 = v54 - v58;
        float v61 = v52 - v55;
        unint64_t v57 = v57;
        do
        {
          *(float *)(v45 + 4 * v57++) = v55
                                      + (float)((float)(1.0
                                                      - (float)((float)((float)(v48 - v58) / v60)
                                                              * (float)((float)(v48 - v58) / v60)))
                                              * v61);
          float v48 = v48 + 1.0;
        }
        while (v48 < v58 && v57 < v40);
      }
      unint64_t v43 = v57;
    }
    while (v42 != v41);
  }
  int v70 = 0;
  std::vector<float>::assign((char **)this + 576, (2 * v40), &v70);
  unint64_t v63 = *((unsigned int *)this + 149);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 579, v63, &v70);
  float v64 = *((float *)this + 146) / (float)*((unsigned int *)this + 149);
  *((float *)this + 1178) = expf(-1.0 / (float)(v64 * 0.04));
  *((float *)this + 1179) = 1.0 - expf(-1.0 / (float)(v64 * 0.1));
  *((float *)this + 1180) = 1.0 - expf(-1.0 / (float)(v64 * 0.05));
  *((_DWORD *)this + 1181) = 1094713344;
  *((float *)this + 1182) = 1.0 - expf(-1.0 / (float)(v64 * 0.5));
  *((_DWORD *)this + 1183) = 1112014848;
  *((void *)this + 592) = 0;
  *((_DWORD *)this + 407) = 1;
  unint64_t v65 = *((unsigned int *)this + 145);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 88, v65, &v70);
  unint64_t v66 = *((unsigned int *)this + 145);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 91, v66, &v70);
  unint64_t v67 = *((unsigned int *)this + 145);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 184, v67, &v70);
  unint64_t v68 = *((unsigned int *)this + 145);
  int v70 = 0;
  std::vector<float>::assign((char **)this + 187, v68, &v70);
  AULoudnessInNoise::Reset(this);
  *((unsigned char *)this + 576) = 1;
  return v8;
}

char *AULoudnessInNoise::Set_Level_Spreading_PropertyRelatedDefaults(AULoudnessInNoise *this)
{
  *((_DWORD *)this + 145) = 1;
  *((_DWORD *)this + 174) = 1014887350;
  *((_DWORD *)this + 135) = -1023148032;
  std::vector<unsigned int>::value_type __u = 1065353216;
  std::vector<float>::assign((char **)this + 210, 0x1EuLL, &__u);
  unint64_t v2 = *((unsigned int *)this + 149);
  std::vector<unsigned int>::value_type __u = 1065353216;
  std::vector<float>::assign((char **)this + 213, v2, &__u);
  unint64_t v3 = *((unsigned int *)this + 149);
  std::vector<unsigned int>::value_type __u = 1065353216;
  std::vector<float>::assign((char **)this + 399, v3, &__u);
  std::vector<unsigned int>::size_type v4 = *((unsigned int *)this + 149);
  std::vector<unsigned int>::value_type __u = 1;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)this + 135, v4, &__u);
  std::vector<unsigned int>::size_type v5 = *((unsigned int *)this + 149);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)this + 134, v5, &__u);
  LODWORD(v6) = *((_DWORD *)this + 149);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 402);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7 + 1;
      unint64_t v6 = *((unsigned int *)this + 149);
      ++v7;
    }
    while (v7 < v6);
  }
  if (*((_DWORD *)this + 145))
  {
    unint64_t v9 = 0;
    unint64_t v10 = (char **)((char *)this + 3288);
    do
    {
      unint64_t v11 = *((unsigned int *)this + 149);
      std::vector<unsigned int>::value_type __u = 1065353216;
      std::vector<float>::assign(v10 - 195, v11, &__u);
      unint64_t v12 = *((unsigned int *)this + 149);
      std::vector<unsigned int>::value_type __u = 1065353216;
      std::vector<float>::assign(v10 - 102, v12, &__u);
      unint64_t v13 = *((unsigned int *)this + 145);
      std::vector<unsigned int>::value_type __u = 0;
      std::vector<float>::assign(v10, v13, &__u);
      ++v9;
      v10 += 3;
    }
    while (v9 < *((unsigned int *)this + 145));
    LODWORD(v6) = *((_DWORD *)this + 149);
  }
  std::vector<unsigned int>::value_type __u = 1065353216;
  std::vector<float>::assign((char **)this + 306, v6, &__u);
  std::vector<unsigned int>::value_type __u = 0;
  return std::vector<float>::assign((char **)this + 408, 0x1EuLL, &__u);
}

void AULoudnessInNoise::~AULoudnessInNoise(AULoudnessInNoise *this)
{
  AULoudnessInNoise::~AULoudnessInNoise(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t j;
  void *v35;
  void *v36;
  uint64_t k;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t m;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t vars8;

  *(void *)this = &unk_1F14BE158;
  unint64_t v2 = (void *)*((void *)this + 579);
  if (v2)
  {
    *((void *)this + 580) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 576);
  if (v3)
  {
    *((void *)this + 577) = v3;
    operator delete(v3);
  }
  std::vector<unsigned int>::size_type v4 = (void *)*((void *)this + 573);
  if (v4)
  {
    *((void *)this + 574) = v4;
    operator delete(v4);
  }
  std::vector<unsigned int>::size_type v5 = (void *)*((void *)this + 570);
  if (v5)
  {
    *((void *)this + 571) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 567);
  if (v6)
  {
    *((void *)this + 568) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 564);
  if (v7)
  {
    *((void *)this + 565) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 561);
  if (v8)
  {
    *((void *)this + 562) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 558);
  if (v9)
  {
    *((void *)this + 559) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 555);
  if (v10)
  {
    *((void *)this + 556) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 552);
  if (v11)
  {
    *((void *)this + 553) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 549);
  if (v12)
  {
    *((void *)this + 550) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 546);
  if (v13)
  {
    *((void *)this + 547) = v13;
    operator delete(v13);
  }
  unsigned int v14 = (void *)*((void *)this + 543);
  if (v14)
  {
    *((void *)this + 544) = v14;
    operator delete(v14);
  }
  unsigned int v15 = (void *)*((void *)this + 540);
  if (v15)
  {
    *((void *)this + 541) = v15;
    operator delete(v15);
  }
  unsigned int v16 = (void *)*((void *)this + 537);
  if (v16)
  {
    *((void *)this + 538) = v16;
    operator delete(v16);
  }
  unint64_t v17 = (void *)*((void *)this + 531);
  if (v17)
  {
    *((void *)this + 532) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 528);
  if (v18)
  {
    *((void *)this + 529) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 525);
  if (v19)
  {
    *((void *)this + 526) = v19;
    operator delete(v19);
  }
  unint64_t v20 = (void *)*((void *)this + 522);
  if (v20)
  {
    *((void *)this + 523) = v20;
    operator delete(v20);
  }
  unint64_t v21 = (void *)*((void *)this + 519);
  if (v21)
  {
    *((void *)this + 520) = v21;
    operator delete(v21);
  }
  unint64_t v22 = (void *)*((void *)this + 516);
  if (v22)
  {
    *((void *)this + 517) = v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)*((void *)this + 513);
  if (v23)
  {
    *((void *)this + 514) = v23;
    operator delete(v23);
  }
  unint64_t v24 = (void *)*((void *)this + 510);
  if (v24)
  {
    *((void *)this + 511) = v24;
    operator delete(v24);
  }
  unint64_t v25 = (void *)*((void *)this + 507);
  if (v25)
  {
    *((void *)this + 508) = v25;
    operator delete(v25);
  }
  unint64_t v26 = (void *)*((void *)this + 504);
  if (v26)
  {
    *((void *)this + 505) = v26;
    operator delete(v26);
  }
  float v27 = (void *)*((void *)this + 501);
  if (v27)
  {
    *((void *)this + 502) = v27;
    operator delete(v27);
  }
  for (uint64_t i = 0; i != -720; i -= 24)
  {
    unint64_t v29 = *(void **)((char *)this + i + 3984);
    if (v29)
    {
      *(void *)((char *)this + i + 3992) = v29;
      operator delete(v29);
    }
  }
  unint64_t v30 = (void *)*((void *)this + 408);
  if (v30)
  {
    *((void *)this + 409) = v30;
    operator delete(v30);
  }
  unint64_t v31 = (void *)*((void *)this + 405);
  if (v31)
  {
    *((void *)this + 406) = v31;
    operator delete(v31);
  }
  unint64_t v32 = (void *)*((void *)this + 402);
  if (v32)
  {
    *((void *)this + 403) = v32;
    operator delete(v32);
  }
  unint64_t v33 = (void *)*((void *)this + 399);
  if (v33)
  {
    *((void *)this + 400) = v33;
    operator delete(v33);
  }
  for (j = 0; j != -720; j -= 24)
  {
    unint64_t v35 = *(void **)((char *)this + j + 3168);
    if (v35)
    {
      *(void *)((char *)this + j + 3176) = v35;
      operator delete(v35);
    }
  }
  unint64_t v36 = (void *)*((void *)this + 306);
  if (v36)
  {
    *((void *)this + 307) = v36;
    operator delete(v36);
  }
  for (k = 0; k != -720; k -= 24)
  {
    unint64_t v38 = *(void **)((char *)this + k + 2424);
    if (v38)
    {
      *(void *)((char *)this + k + 2432) = v38;
      operator delete(v38);
    }
  }
  unint64_t v39 = (void *)*((void *)this + 213);
  if (v39)
  {
    *((void *)this + 214) = v39;
    operator delete(v39);
  }
  unint64_t v40 = (void *)*((void *)this + 210);
  if (v40)
  {
    *((void *)this + 211) = v40;
    operator delete(v40);
  }
  uint64_t v41 = (void *)*((void *)this + 200);
  if (v41)
  {
    *((void *)this + 201) = v41;
    operator delete(v41);
  }
  uint64_t v42 = (void *)*((void *)this + 197);
  if (v42)
  {
    *((void *)this + 198) = v42;
    operator delete(v42);
  }
  unint64_t v43 = (void *)*((void *)this + 194);
  if (v43)
  {
    *((void *)this + 195) = v43;
    operator delete(v43);
  }
  int v44 = (void *)*((void *)this + 191);
  if (v44)
  {
    *((void *)this + 192) = v44;
    operator delete(v44);
  }
  uint64_t v45 = (void *)*((void *)this + 187);
  if (v45)
  {
    *((void *)this + 188) = v45;
    operator delete(v45);
  }
  float v46 = (void *)*((void *)this + 184);
  if (v46)
  {
    *((void *)this + 185) = v46;
    operator delete(v46);
  }
  for (m = 0; m != -720; m -= 24)
  {
    float v48 = *(void **)((char *)this + m + 1448);
    if (v48)
    {
      *(void *)((char *)this + m + 1456) = v48;
      operator delete(v48);
    }
  }
  uint64_t v49 = (void *)*((void *)this + 91);
  if (v49)
  {
    *((void *)this + 92) = v49;
    operator delete(v49);
  }
  unsigned int v50 = (void *)*((void *)this + 88);
  if (v50)
  {
    *((void *)this + 89) = v50;
    operator delete(v50);
  }
  float v51 = (void *)*((void *)this + 82);
  if (v51)
  {
    *((void *)this + 83) = v51;
    operator delete(v51);
  }
  float v52 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v52) {
    MEMORY[0x1C185D370](v52, 0x60C4044C4A2DFLL);
  }

  ausdk::AUBase::~AUBase(this);
}

float LimitWindBoost::initialize(LimitWindBoost *this, unsigned int a2, int a3, double a4, int a5)
{
  if (!a2) {
    __assert_rtn("initialize", "LimitWindBoost.cpp", 27, "numChans > 0");
  }
  if (!a3) {
    __assert_rtn("initialize", "LimitWindBoost.cpp", 28, "blockSize > 0");
  }
  if (a4 <= 0.0) {
    __assert_rtn("initialize", "LimitWindBoost.cpp", 29, "sampleRate > 0.0f");
  }
  *((unsigned char *)this + 104) = 1;
  *((_DWORD *)this + 6) = a3;
  *((_DWORD *)this + 7) = a2;
  *((double *)this + 4) = a4;
  *((unsigned char *)this + 40) = ChannelLayoutTagIsSupportedHOA(a5);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 44, a2);
  std::vector<WindUtility::EventTracker<float>>::resize((void *)this + 47, *((unsigned int *)this + 7));
  unint64_t v7 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 32, v7, &__u);
  unint64_t v8 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 35, v8, &__u);
  unint64_t v9 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 41, v9, &__u);
  std::vector<unsigned int>::size_type v10 = *((unsigned int *)this + 7);
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<unsigned int>::assign((std::vector<unsigned int> *)((char *)this + 304), v10, &__u);
  unint64_t v11 = (2 * *((_DWORD *)this + 6));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 20, v11, &__u);
  unint64_t v12 = (2 * *((_DWORD *)this + 6));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 23, v12, &__u);
  unint64_t v13 = (2 * *((_DWORD *)this + 6));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 26, v13, &__u);
  unint64_t v14 = (2 * *((_DWORD *)this + 6));
  std::vector<unsigned int>::value_type __u = 0;
  std::vector<float>::assign((char **)this + 17, v14, &__u);
  unint64_t v15 = (2 * *((_DWORD *)this + 6));
  std::vector<unsigned int>::value_type __u = 1065353216;
  std::vector<float>::assign((char **)this + 29, v15, &__u);
  if (*((_DWORD *)this + 7))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      unint64_t v18 = (char **)(*((void *)this + 44) + v16);
      unint64_t v19 = (2 * *((_DWORD *)this + 6));
      std::vector<unsigned int>::value_type __u = 1065353216;
      std::vector<float>::assign(v18, v19, &__u);
      ++v17;
      v16 += 24;
    }
    while (v17 < *((unsigned int *)this + 7));
  }
  double v20 = (float)*((unsigned int *)this + 6);
  double v21 = *((double *)this + 4) * 0.5;
  float v22 = 3000.0 / v21 * v20;
  *((_DWORD *)this + 13) = vcvtas_u32_f32(v22);
  *(float *)&double v20 = 2000.0 / v21 * v20;
  float result = roundf(*(float *)&v20);
  *((float *)this + 25) = result;
  return result;
}

void LimitWindBoost::LimitWindBoost(LimitWindBoost *this)
{
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  v1[0] = 0;
  std::vector<float>::assign((char **)this, 0x12uLL, v1);
}

void sub_1BB6BA974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<unsigned int>::size_type v5 = *(void **)(v2 + 376);
  if (v5)
  {
    *(void *)(v2 + 384) = v5;
    operator delete(v5);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  unint64_t v6 = *(void **)(v2 + 328);
  if (v6)
  {
    *(void *)(v2 + 336) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)(v2 + 304);
  if (v7)
  {
    *(void *)(v2 + 312) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *(void **)(v2 + 280);
  if (v8)
  {
    *(void *)(v2 + 288) = v8;
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(v2 + 256);
  if (v9)
  {
    *(void *)(v2 + 264) = v9;
    operator delete(v9);
  }
  std::vector<unsigned int>::size_type v10 = *(void **)(v2 + 232);
  if (v10)
  {
    *(void *)(v2 + 240) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(v2 + 208);
  if (v11)
  {
    *(void *)(v2 + 216) = v11;
    operator delete(v11);
  }
  unint64_t v12 = *(void **)(v2 + 184);
  if (v12)
  {
    *(void *)(v2 + 192) = v12;
    operator delete(v12);
  }
  unint64_t v13 = *(void **)(v2 + 160);
  if (v13)
  {
    *(void *)(v2 + 168) = v13;
    operator delete(v13);
  }
  unint64_t v14 = *(void **)(v2 + 136);
  if (v14)
  {
    *(void *)(v2 + 144) = v14;
    operator delete(v14);
  }
  unint64_t v15 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 120) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void LimitWindBoost::~LimitWindBoost(LimitWindBoost *this)
{
  uint64_t v2 = (void *)*((void *)this + 47);
  if (v2)
  {
    *((void *)this + 48) = v2;
    operator delete(v2);
  }
  unint64_t v14 = (void **)((char *)this + 352);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  unint64_t v3 = (void *)*((void *)this + 41);
  if (v3)
  {
    *((void *)this + 42) = v3;
    operator delete(v3);
  }
  std::vector<unsigned int>::size_type v4 = (void *)*((void *)this + 38);
  if (v4)
  {
    *((void *)this + 39) = v4;
    operator delete(v4);
  }
  std::vector<unsigned int>::size_type v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 32);
  if (v6)
  {
    *((void *)this + 33) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 29);
  if (v7)
  {
    *((void *)this + 30) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 26);
  if (v8)
  {
    *((void *)this + 27) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 23);
  if (v9)
  {
    *((void *)this + 24) = v9;
    operator delete(v9);
  }
  std::vector<unsigned int>::size_type v10 = (void *)*((void *)this + 20);
  if (v10)
  {
    *((void *)this + 21) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 17);
  if (v11)
  {
    *((void *)this + 18) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 14);
  if (v12)
  {
    *((void *)this + 15) = v12;
    operator delete(v12);
  }
  unint64_t v13 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v13;
    operator delete(v13);
  }
}

void LimitWindBoost::propagateParameterChanges(LimitWindBoost *this)
{
  if (!*((unsigned char *)this + 104)) {
    __assert_rtn("propagateParameterChanges", "LimitWindBoost.cpp", 124, "mInitialized");
  }
  double v2 = (float)*((unsigned int *)this + 6);
  uint64_t v3 = *(void *)this;
  double v4 = *((double *)this + 4);
  float v5 = *(float *)(*(void *)this + 4) / (v4 * 0.5) * v2;
  *((float *)this + 14) = roundf(v5);
  v6.i32[0] = *(_DWORD *)(v3 + 32);
  v6.i32[1] = *(_DWORD *)(v3 + 52);
  *(uint32x2_t *)((char *)this + 44) = vcvt_u32_f32(vrnda_f32(vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_f32(v6), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v4 * 0.5), 0)), v2))));
  *(float *)&double v2 = v4 / v2;
  float v14 = *(float *)&v2;
  *((float *)this + 18) = expf(-1.0 / (float)(*(float *)(v3 + 24) * *(float *)&v2));
  *((float *)this + 20) = expf(-1.0 / (float)(*(float *)(v3 + 36) * v14));
  *((float *)this + 21) = expf(-1.0 / (float)(*(float *)(v3 + 40) * v14));
  *((float *)this + 23) = expf(-1.0 / (float)(*(float *)(v3 + 48) * v14));
  float v7 = *(float *)(v3 + 44) * v14;
  *((float *)this + 22) = v7;
  *((float *)this + 15) = __exp10f(*(float *)(v3 + 8) / 20.0);
  *((float *)this + 16) = __exp10f(*(float *)(v3 + 12) / 20.0);
  *((float *)this + 17) = __exp10f(*(float *)(v3 + 20) / 20.0);
  *((float *)this + 19) = __exp10f(*(float *)(v3 + 28) / 20.0);
  *((float *)this + 24) = __exp10f(*(float *)(v3 + 56) / 10.0);
  uint64_t v8 = *((void *)this + 47);
  uint64_t v9 = *((void *)this + 48) - v8;
  if (v9)
  {
    uint64_t v10 = v9 / 72;
    uint64x2_t v11 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v3 + 60), v14)));
    float32x2_t v12 = vdiv_f32((float32x2_t)0xBF8000003F800000, vadd_f32(vcvt_f32_f64(vcvtq_f64_u64(v11)), (float32x2_t)vdup_n_s32(0x25800000u)));
    if ((unint64_t)(v9 / 72) <= 1) {
      uint64_t v10 = 1;
    }
    unint64_t v13 = (void *)(v8 + 48);
    do
    {
      *(v13 - 2) = v11.i64[0];
      *(v13 - 1) = (unint64_t)v7;
      *unint64_t v13 = v11.i64[1];
      *((_OWORD *)v13 - 3) = xmmword_1BB87BCC0;
      *(v13 - 3) = v12;
      v13 += 9;
      --v10;
    }
    while (v10);
  }
}

void LimitWindBoost::process(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4, const float **a5, unsigned int a6)
{
  if (!*(unsigned char *)(a1 + 104)) {
    __assert_rtn("process", "LimitWindBoost.cpp", 189, "mInitialized");
  }
  float v8 = *(float *)(a1 + 56);
  if (v8 > (float)(unint64_t)((a2[1] - *a2) >> 2)) {
    __assert_rtn("process", "LimitWindBoost.cpp", 190, "refMicEnergy.size() >= mFcBinLimitWindBoost");
  }
  if (v8 > (float)(unint64_t)((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2)) {
    __assert_rtn("process", "LimitWindBoost.cpp", 191, "beam.size() >= mFcBinLimitWindBoost");
  }
  unint64_t v13 = (float *)(*(void *)a3 + 4 * *(unsigned int *)(a1 + 24));
  __A.realp = *(float **)a3;
  __A.imagp = v13;
  vDSP_zvmags(&__A, 1, *(float **)(a1 + 136), 1, (unint64_t)v8);
  float v14 = *(const float **)(a1 + 160);
  float v15 = *(float *)(a1 + 56);
  if (v15 > 0.0)
  {
    uint64_t v16 = *(void *)(a1 + 136);
    uint64_t v17 = *a2;
    unsigned int v18 = 1;
    do
    {
      uint64_t v19 = v18 - 1;
      float v20 = sqrtf(*(float *)(v16 + 4 * v19) / *(float *)(v17 + 4 * v19));
      float v21 = 1.0;
      if (v20 > *(float *)(a1 + 60))
      {
        float v22 = *(float *)(a1 + 64);
        if (v20 > v22)
        {
          float v23 = 1.0 / (float)(v20 / v22);
          float v21 = *(float *)(a1 + 68);
          if (v23 >= v21) {
            float v21 = v23;
          }
        }
      }
      v14[v19] = v21;
      float v24 = (float)v18;
      float v15 = *(float *)(a1 + 56);
      ++v18;
    }
    while (v15 > v24);
  }
  vDSP_vmul(*(const float **)a3, 1, v14, 1, *(float **)a3, 1, (unint64_t)v15);
  unint64_t v25 = (float *)(*(void *)a3 + 4 * *(unsigned int *)(a1 + 24));
  vDSP_vmul(v25, 1, v14, 1, v25, 1, (unint64_t)*(float *)(a1 + 56));
  vDSP_zvabs(&__A, 1, *(float **)(a1 + 136), 1, (unint64_t)*(float *)(a1 + 56));
  unsigned int v26 = *(float *)(a1 + 56);
  if (*(_DWORD *)(a1 + 52) <= (2 * *(_DWORD *)(a1 + 44))) {
    unsigned int v27 = 2 * *(_DWORD *)(a1 + 44);
  }
  else {
    unsigned int v27 = *(_DWORD *)(a1 + 52);
  }
  if (v27 >= v26) {
    vDSP_Length v28 = v26;
  }
  else {
    vDSP_Length v28 = v27;
  }
  float __D = 1.0 - *(float *)(a1 + 72);
  unint64_t v29 = *(float **)(*(void *)(a1 + 352) + 24 * a6);
  vDSP_vsmsma(v29, 1, (const float *)(a1 + 72), v14, 1, &__D, v29, 1, v28);
  unint64_t v30 = *(float **)(a1 + 184);
  vDSP_vthrsc(*(const float **)(*(void *)(a1 + 352) + 24 * a6), 1, (const float *)(a1 + 76), &LimitWindBoost::kMinusOnef, v30, 1, v28);
  vDSP_vthr(v30, 1, &LimitWindBoost::kZerof, v30, 1, v28);
  float v58 = 0.0;
  float __C = 0.0;
  if (!*(unsigned char *)(a1 + 104)) {
    __assert_rtn("isSensorNoise", "LimitWindBoost.cpp", 324, "mInitialized");
  }
  vDSP_vclr(*(float **)(a1 + 208), 1, *(unsigned int *)(a1 + 24));
  unint64_t v31 = *a4;
  if (v31)
  {
    unint64_t v32 = 0;
    uint64_t v33 = 4;
    do
    {
      if (v32 != **(float **)a1)
      {
        unint64_t v34 = (float *)(*(void *)&a4[v33] + 4 * *(unsigned int *)(a1 + 24));
        v62.realp = *(float **)&a4[v33];
        v62.imagp = v34;
        vDSP_zvmags(&v62, 1, *(float **)(a1 + 160), 1, *(unsigned int *)(a1 + 44));
        vDSP_vmax(*(const float **)(a1 + 208), 1, *(const float **)(a1 + 160), 1, *(float **)(a1 + 208), 1, *(unsigned int *)(a1 + 44));
        unint64_t v31 = *a4;
      }
      ++v32;
      v33 += 4;
    }
    while (v32 < v31);
  }
  vDSP_vmul(v30, 1, *(const float **)(a1 + 208), 1, *(float **)(a1 + 208), 1, *(unsigned int *)(a1 + 44));
  vDSP_sve((const float *)(*(void *)(a1 + 208) + 4), 1, &__C, *(unsigned int *)(a1 + 44));
  if (__C > *(float *)(a1 + 96))
  {
    vDSP_sve(v30, 1, &v58, v28);
    unsigned int v35 = v58;
  }
  else
  {
    unsigned int v35 = 0;
  }
  if (*(_DWORD *)(a1 + 44) < v35) {
    unsigned int v35 = *(_DWORD *)(a1 + 44);
  }
  if ((float)v35 >= (float)*(unsigned int *)(a1 + 48)) {
    float v36 = (float)v35;
  }
  else {
    float v36 = 0.0;
  }
  if (!*(unsigned char *)(a1 + 104)) {
    __assert_rtn("getSmoothedCrossoverIndex", "LimitWindBoost.cpp", 355, "mInitialized");
  }
  WindUtility::EventTracker<float>::update(*(void *)(a1 + 376) + 72 * a6, v36);
  if ((*(_DWORD *)(*(void *)(a1 + 376) + 72 * a6 + 64) - 3) > 1)
  {
    float v37 = 1.0;
    if (*(float *)(*(void *)(a1 + 280) + 4 * a6) >= (float)*(unsigned int *)(a1 + 48)) {
      goto LABEL_36;
    }
  }
  else
  {
    float v37 = *(float *)(a1 + 80);
  }
  *(float *)(*(void *)(a1 + 328) + 4 * a6) = v37;
LABEL_36:
  float v38 = *(float *)(a1 + 92);
  uint64_t v39 = *(void *)(a1 + 256);
  float v40 = *(float *)(v39 + 4 * a6);
  if (v40 >= v36)
  {
    float v41 = *(float *)(a1 + 84);
    if (v40 > v36)
    {
      uint64_t v42 = *(void *)(a1 + 304);
      unsigned int v43 = *(_DWORD *)(v42 + 4 * a6);
      if (*(float *)(a1 + 88) > (float)v43)
      {
        *(_DWORD *)(v42 + 4 * a6) = v43 + 1;
        float v41 = 1.0;
        if ((float)(v40 * 0.9) <= v36) {
          *(_DWORD *)(v42 + 4 * a6) = 0;
        }
      }
    }
  }
  else
  {
    float v41 = *(float *)(*(void *)(a1 + 328) + 4 * a6);
    *(_DWORD *)(*(void *)(a1 + 304) + 4 * a6) = 0;
    if (*(float *)(*(void *)(a1 + 280) + 4 * a6) < v36) {
      float v38 = *(float *)(a1 + 80);
    }
  }
  float v44 = (float)((float)(1.0 - v41) * v36) + (float)(v41 * v40);
  *(float *)(v39 + 4 * a6) = v44;
  uint64_t v45 = *(void *)(a1 + 280);
  float v46 = (float)((float)(1.0 - v38) * v44) + (float)(v38 * *(float *)(v45 + 4 * a6));
  *(float *)(v45 + 4 * a6) = v46;
  vDSP_vclr(v30, 1, v28);
  float v47 = v46 * *(float *)(*(void *)a1 + 68);
  if (v47 >= *(float *)(a1 + 100)) {
    float v47 = *(float *)(a1 + 100);
  }
  vDSP_Length v48 = v47;
  if (v48)
  {
    float v49 = (float)v47;
    float v50 = fmaxf(v46 + (float)(v49 * -0.5), 0.0);
    uint64_t v51 = v50;
    if (v51)
    {
      vDSP_vfill(&LimitWindBoost::kOnef, v30, 1, v50);
      LODWORD(v62.realp) = 1065353216;
      float __B = -1.0 / v49;
      vDSP_vramp((const float *)&v62, &__B, &v30[v51], 1, v48);
      vDSP_vsub(v30, 1, *(const float **)(a1 + 232), 1, *(float **)(a1 + 160), 1, v28);
      vDSP_vsmul(v30, 1, (const float *)(a1 + 64), *(float **)(a1 + 184), 1, v28);
      if (a6 && *(unsigned char *)(a1 + 40))
      {
        vDSP_vmul(*(const float **)(a1 + 160), 1, *(const float **)a3, 1, *(float **)a3, 1, v28);
        float v52 = (float *)(*(void *)a3 + 4 * *(unsigned int *)(a1 + 24));
        vDSP_vmul(*(const float **)(a1 + 160), 1, v52, 1, v52, 1, v28);
      }
      else
      {
        vDSP_vmma(*(const float **)(a1 + 160), 1, *(const float **)a3, 1, *(const float **)(a1 + 184), 1, *a5, 1, *(float **)a3, 1, v28);
        __N = (float *)(*(void *)a3 + 4 * *(unsigned int *)(a1 + 24));
        vDSP_vmma(*(const float **)(a1 + 160), 1, __N, 1, *(const float **)(a1 + 184), 1, a5[1], 1, __N, 1, v28);
      }
      vDSP_zvabs(&__A, 1, *(float **)(a1 + 160), 1, v28);
      vDSP_vsadd(*(const float **)(a1 + 160), 1, &LimitWindBoost::kEpsf, *(float **)(a1 + 160), 1, v28);
      vDSP_vdiv(*(const float **)(a1 + 160), 1, *(const float **)(a1 + 136), 1, *(float **)(a1 + 184), 1, v28);
      if ((int)v51 + (int)v48 >= v28) {
        vDSP_Length v53 = (v28 - v51);
      }
      else {
        vDSP_Length v53 = v48;
      }
      vDSP_vmul((const float *)(*(void *)(a1 + 184) + 4 * v51), 1, (const float *)(*(void *)a3 + 4 * v51), 1, (float *)(*(void *)a3 + 4 * v51), 1, v53);
      float v54 = (float *)(*(void *)a3 + 4 * *(unsigned int *)(a1 + 24) + 4 * v51);
      vDSP_vmul((const float *)(*(void *)(a1 + 184) + 4 * v51), 1, v54, 1, v54, 1, v53);
      float v55 = *(double *)(a1 + 32) * 0.5 * (float)((float)v46 / (float)*(unsigned int *)(a1 + 24));
      if (*(float *)(*(void *)a1 + 16) >= v55) {
        float v55 = *(float *)(*(void *)a1 + 16);
      }
      *(float *)(*(void *)a1 + 16) = v55;
    }
  }
}

void PowerLogManager::FlushPowerLogEntries(PowerLogManager *this)
{
  uint64_t valuePtr = 0;
  double v2 = (uint64_t *)*((void *)this + 3);
  uint64_t v3 = (uint64_t *)*((void *)this + 4);
  if (v2 == v3)
  {
    char v5 = 0;
    char v4 = 0;
    float v6 = 0.0;
    float v7 = 0.0;
  }
  else
  {
    char v4 = 0;
    char v5 = 0;
    float v6 = 0.0;
    float v7 = 0.0;
    do
    {
      LODWORD(theDict) = 0;
      if (CACFDictionary::GetFloat32(*v2, @"Avg Watts Measured", (float *)&theDict))
      {
        float v7 = *(float *)&theDict + v7;
        *((float *)&valuePtr + 1) = v7;
        char v4 = 1;
      }
      float v17 = 0.0;
      if (CACFDictionary::GetFloat32(*v2, @"Avg Watts Modelled", &v17))
      {
        float v6 = v17 + v6;
        *(float *)&uint64_t valuePtr = v6;
        char v5 = 1;
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v16 = 257;
  if (v4)
  {
    *((float *)&valuePtr + 1) = v7 / 12.0;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, (char *)&valuePtr + 4);
    if (HIBYTE(v16))
    {
      if (v9 && theDict != 0) {
        CFDictionarySetValue(theDict, @"Avg Watts Measured", v9);
      }
    }
    CFRelease(v9);
    if ((v5 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (v5)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_21:
    *(float *)&uint64_t valuePtr = v6 / 12.0;
    CFNumberRef v11 = CFNumberCreate(v8, kCFNumberFloatType, &valuePtr);
    if (HIBYTE(v16))
    {
      if (v11) {
        BOOL v12 = theDict == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12) {
        CFDictionarySetValue(theDict, @"Avg Watts Modelled", v11);
      }
    }
    CFRelease(v11);
LABEL_28:
    PLLogRegisteredEvent();
  }
  uint64_t v14 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); i != v14; CACFDictionary::~CACFDictionary((CACFDictionary *)(i - 16)))
    ;
  *((void *)this + 4) = v14;
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
}

void sub_1BB6BB750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__split_buffer<CACFDictionary>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    CACFDictionary::~CACFDictionary((CACFDictionary *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZL23PowerLogManagerLogScopev_block_invoke()
{
}

void PowerLogManager::DispatchOneTime(PowerLogManager *this)
{
  double v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (v3 = *(void *)this, (char v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v5 = v4;
  *((unsigned char *)this + 72) = *((void *)this + 6) == 0;
  dispatch_time_t v6 = dispatch_time(0, 5000000000);
  float v7 = *((void *)this + 2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN15PowerLogManager15DispatchOneTimeEv_block_invoke;
  block[3] = &__block_descriptor_tmp_26224;
  block[4] = this;
  block[5] = v3;
  CFNumberRef v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_after(v6, v7, block);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void ___ZN15PowerLogManager15DispatchOneTimeEv_block_invoke(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  char v4 = *(AudioUnit **)(v2 + 48);
  if (!v4) {
    goto LABEL_70;
  }
  int v5 = *(_DWORD *)(v2 + 64);
  if (v5 == 1936748595) {
    int v6 = 15;
  }
  else {
    int v6 = -1;
  }
  if (v5 == 1936748594) {
    AudioUnitParameterID v7 = 33;
  }
  else {
    AudioUnitParameterID v7 = v6;
  }
  *(void *)outCFDataRef Value = 0;
  if (v5 != 1936748595) {
    goto LABEL_19;
  }
  OSStatus Parameter = AudioUnitGetParameter(*v4, 0x10u, 0, 0, &outValue[1]);
  if (!Parameter)
  {
    CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &outValue[1]);
    goto LABEL_20;
  }
  if (PowerLogManagerLogScope(void)::once != -1) {
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_26216);
  }
  if (!PowerLogManagerLogScope(void)::scope)
  {
    CFNumberRef v9 = MEMORY[0x1E4F14500];
LABEL_17:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&buf[4] = "PowerLogManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 214;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = Parameter;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get measured power: %d", buf, 0x18u);
    }
    goto LABEL_19;
  }
  CFNumberRef v9 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
  if (*(void *)PowerLogManagerLogScope(void)::scope) {
    goto LABEL_17;
  }
LABEL_19:
  CFNumberRef v10 = 0;
LABEL_20:
  if (v7 == -1)
  {
LABEL_31:
    CFNumberRef v13 = 0;
    goto LABEL_32;
  }
  OSStatus v11 = AudioUnitGetParameter(**(AudioUnit **)(v2 + 48), v7, 0, 0, outValue);
  if (v11)
  {
    if (PowerLogManagerLogScope(void)::once != -1) {
      dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_26216);
    }
    if (PowerLogManagerLogScope(void)::scope)
    {
      BOOL v12 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
      if (!*(void *)PowerLogManagerLogScope(void)::scope) {
        goto LABEL_31;
      }
    }
    else
    {
      BOOL v12 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&buf[4] = "PowerLogManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 227;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v11;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get modelled power: %d", buf, 0x18u);
    }
    goto LABEL_31;
  }
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, outValue);
LABEL_32:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef theDict = Mutable;
  __int16 v40 = 257;
  if (v10)
  {
    if (Mutable) {
      CFDictionarySetValue(Mutable, @"Avg Watts Measured", v10);
    }
    CFRelease(v10);
  }
  if (v13)
  {
    if (theDict) {
      CFDictionarySetValue(theDict, @"Avg Watts Modelled", v13);
    }
    CFRelease(v13);
  }
  if (theDict && CFDictionaryGetCount(theDict))
  {
    unint64_t v15 = *(void *)(v2 + 40);
    unint64_t v16 = *(void *)(v2 + 32);
    if (v16 >= v15)
    {
      unint64_t v20 = *(void *)(v2 + 24);
      uint64_t v21 = (uint64_t)(v16 - v20) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v15 - v20;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v44 = v2 + 40;
      if (v24 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v25 = (char *)operator new(16 * v24);
      unsigned int v26 = &v25[16 * v21];
      *(void *)AudioTimeStamp buf = v25;
      *(void *)&uint8_t buf[8] = v26;
      *(void *)&buf[16] = v26;
      unsigned int v43 = &v25[16 * v24];
      CFMutableDictionaryRef v27 = theDict;
      *(void *)unsigned int v26 = theDict;
      int v28 = v40;
      *((_WORD *)v26 + 4) = v40;
      if (v28)
      {
        CFRetain(v27);
        unint64_t v20 = *(void *)(v2 + 24);
        unint64_t v16 = *(void *)(v2 + 32);
        unint64_t v29 = *(char **)&buf[16];
        unsigned int v26 = *(char **)&buf[8];
      }
      else
      {
        unint64_t v29 = v26;
      }
      uint64_t v19 = v29 + 16;
      *(void *)&buf[16] = v29 + 16;
      if (v16 == v20)
      {
        int64x2_t v35 = vdupq_n_s64(v20);
      }
      else
      {
        uint64_t v30 = 0;
        do
        {
          unint64_t v31 = &v26[v30];
          unint64_t v32 = *(const void **)(v16 + v30 - 16);
          *((void *)v31 - 2) = v32;
          int v33 = *(unsigned __int8 *)(v16 + v30 - 8);
          *(v31 - 8) = v33;
          *(v31 - 7) = *(unsigned char *)(v16 + v30 - 7);
          if (v33) {
            BOOL v34 = v32 == 0;
          }
          else {
            BOOL v34 = 1;
          }
          if (!v34) {
            CFRetain(v32);
          }
          v30 -= 16;
        }
        while (v16 + v30 != v20);
        v26 += v30;
        int64x2_t v35 = *(int64x2_t *)(v2 + 24);
        uint64_t v19 = *(char **)&buf[16];
      }
      *(void *)(v2 + 24) = v26;
      *(void *)(v2 + 32) = v19;
      *(int64x2_t *)&uint8_t buf[8] = v35;
      float v36 = *(char **)(v2 + 40);
      *(void *)(v2 + 40) = v43;
      unsigned int v43 = v36;
      *(void *)AudioTimeStamp buf = v35.i64[0];
      std::__split_buffer<CACFDictionary>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      CFMutableDictionaryRef v17 = theDict;
      *(void *)unint64_t v16 = theDict;
      int v18 = v40;
      *(_WORD *)(v16 + 8) = v40;
      if (v18) {
        CFRetain(v17);
      }
      uint64_t v19 = (char *)(v16 + 16);
      *(void *)(v2 + 32) = v16 + 16;
    }
    *(void *)(v2 + 32) = v19;
    if ((unint64_t)&v19[-*(void *)(v2 + 24)] >= 0xB1) {
      PowerLogManager::FlushPowerLogEntries((PowerLogManager *)v2);
    }
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
LABEL_70:
  uint64_t v37 = *(void *)(v3 + 48);
  *(unsigned char *)(v3 + 72) = v37 == 0;
  if (v37)
  {
    float v38 = *(PowerLogManager **)(a1 + 40);
    PowerLogManager::DispatchOneTime(v38);
  }
}

void sub_1BB6BBE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::__split_buffer<CACFDictionary>::~__split_buffer((uint64_t)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrI15PowerLogManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrI15PowerLogManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN15PowerLogManager18BeginPowerTrackingEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2)
  {
    if (*(void *)(v1 + 48) != v2)
    {
      *(void *)(v1 + 48) = v2;
      *(_DWORD *)(v1 + 64) = *(_DWORD *)(v1 + 68);
      if (*(unsigned char *)(v1 + 72)) {
        PowerLogManager::DispatchOneTime((PowerLogManager *)v1);
      }
    }
    if (PowerLogManagerLogScope(void)::once != -1) {
      dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_26216);
    }
    if (PowerLogManagerLogScope(void)::scope)
    {
      uint64_t v3 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
      if (!*(void *)PowerLogManagerLogScope(void)::scope) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315394;
      uint64_t v5 = "PowerLogManager.cpp";
      __int16 v6 = 1024;
      int v7 = 302;
      _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d did begin speaker power tracking", (uint8_t *)&v4, 0x12u);
    }
  }
LABEL_13:
  *(void *)(v1 + 48) = *(void *)(v1 + 56);
  *(_DWORD *)(v1 + 64) = *(_DWORD *)(v1 + 68);
}

void PowerLogManager::EndPowerTracking(PowerLogManager *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (PowerLogManagerLogScope(void)::once != -1) {
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_26216);
  }
  if (PowerLogManagerLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(void *)PowerLogManagerLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    __int16 v6 = "PowerLogManager.cpp";
    __int16 v7 = 1024;
    int v8 = 314;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d will end speaker power tracking...", buf, 0x12u);
  }
LABEL_9:
  uint64_t v3 = *((void *)this + 2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN15PowerLogManager16EndPowerTrackingEv_block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  block[4] = this;
  dispatch_sync(v3, block);
}

void ___ZN15PowerLogManager16EndPowerTrackingEv_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  PowerLogManager::FlushPowerLogEntries((PowerLogManager *)v1);
  if (!*(void *)(v1 + 48)) {
    goto LABEL_21;
  }
  int v2 = *(_DWORD *)(v1 + 64);
  int valuePtr = 0;
  if (v2 == 1936748595)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
LABEL_7:
    CFNumberRef v5 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
    goto LABEL_8;
  }
  if ((v2 - 1936748596) >= 0xFFFFFFFE)
  {
    CFNumberRef v4 = 0;
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_7;
  }
  CFNumberRef v4 = 0;
  CFNumberRef v5 = 0;
LABEL_8:
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)CFMutableDictionaryRef theDict = Mutable;
  *(_WORD *)&theDict[8] = 257;
  if (v4)
  {
    if (Mutable) {
      CFDictionarySetValue(Mutable, @"Avg Watts Measured", v4);
    }
    CFRelease(v4);
  }
  if (v5)
  {
    if (theDict[9] && *(void *)theDict) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)theDict, @"Avg Watts Modelled", v5);
    }
    CFRelease(v5);
  }
  if (*(void *)theDict && CFDictionaryGetCount(*(CFDictionaryRef *)theDict)) {
    PLLogRegisteredEvent();
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)theDict);
LABEL_21:
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  if (PowerLogManagerLogScope(void)::once != -1) {
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_26216);
  }
  if (PowerLogManagerLogScope(void)::scope)
  {
    __int16 v7 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(void *)PowerLogManagerLogScope(void)::scope) {
      return;
    }
  }
  else
  {
    __int16 v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)CFMutableDictionaryRef theDict = 136315394;
    *(void *)&theDict[4] = "PowerLogManager.cpp";
    __int16 v10 = 1024;
    int v11 = 320;
    _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d did end speaker power tracking", theDict, 0x12u);
  }
}

void sub_1BB6BC354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void PowerLogManager::SetPowerVendor(PowerLogManager *this, OpaqueAudioComponentInstance **a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (PowerLogManagerLogScope(void)::once != -1) {
    dispatch_once(&PowerLogManagerLogScope(void)::once, &__block_literal_global_26216);
  }
  if (PowerLogManagerLogScope(void)::scope)
  {
    __int16 v6 = *(NSObject **)PowerLogManagerLogScope(void)::scope;
    if (!*(void *)PowerLogManagerLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    __int16 v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    int v11 = "PowerLogManager.cpp";
    __int16 v12 = 1024;
    int v13 = 327;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d set speaker power vendor to %p", buf, 0x1Cu);
  }
LABEL_9:
  __int16 v7 = *((void *)this + 2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN15PowerLogManager14SetPowerVendorEPP28OpaqueAudioComponentInstancej_block_invoke;
  block[3] = &__block_descriptor_tmp_11_26242;
  block[4] = this;
  void block[5] = a2;
  int v9 = a3;
  dispatch_sync(v7, block);
}

uint64_t ___ZN15PowerLogManager14SetPowerVendorEPP28OpaqueAudioComponentInstancej_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(void *)(v1 + 56) = *(void *)(result + 40);
  *(_DWORD *)(v1 + 68) = *(_DWORD *)(result + 48);
  return result;
}

char *std::vector<double>::assign(char **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  float result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    int v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 3;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 3;
    }
    if (v15)
    {
      uint64_t v16 = result;
      do
      {
        *(void *)uint64_t v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      CFMutableDictionaryRef v17 = &v13[8 * (a2 - v14)];
      uint64_t v18 = 8 * a2 - 8 * v14;
      do
      {
        *(void *)int v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    float result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, v9);
    __int16 v10 = a1[1];
    int v11 = &v10[8 * a2];
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)__int16 v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void MicSense_Core::setSampleRate(MicSense_Core *this, float a2)
{
  *((float *)this + 34) = a2;
  CFAllocatorRef v3 = (void *)*((void *)this + 76);
  if (v3) {
    void *v3 = (unint64_t)a2;
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    CFNumberRef v5 = (void **)*((void *)this + 77);
    do
    {
      if (*v5) {
        **CFNumberRef v5 = (unint64_t)a2;
      }
      ++v5;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = (unint64_t)a2;
  if ((uint64_t)(unint64_t)a2 > 44099)
  {
    if (v6 > 95999)
    {
      if (v6 == 96000)
      {
LABEL_34:
        uint64_t v8 = 48;
        goto LABEL_36;
      }
      if (v6 == 176400 || v6 == 192000)
      {
        uint64_t v8 = 96;
        goto LABEL_36;
      }
    }
    else
    {
      BOOL v7 = v6 == 44100 || v6 == 48000;
      if (!v7 && v6 == 88200) {
        goto LABEL_34;
      }
    }
LABEL_15:
    uint64_t v8 = 24;
    goto LABEL_36;
  }
  if (v6 > 22049)
  {
    BOOL v9 = v6 == 22050 || v6 == 24000;
    if (v9 || v6 == 32000)
    {
      uint64_t v8 = 20;
      goto LABEL_36;
    }
    goto LABEL_15;
  }
  if (v6 != 8000)
  {
    if (v6 == 16000)
    {
      uint64_t v8 = 16;
      goto LABEL_36;
    }
    goto LABEL_15;
  }
  uint64_t v8 = 12;
LABEL_36:
  *((void *)this + 11) = v8;
  int v15 = 0;
  std::vector<float>::assign((char **)this + 51, v8 | 1, &v15);
  unint64_t v11 = (unint64_t)(float)((float)(*((float *)this + 34) * 0.000625) + 0.5);
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  if (v11 >= 0x64) {
    unint64_t v12 = 100;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 != *((void *)this + 81))
  {
    *((void *)this + 81) = v12;
    std::vector<float>::resize((uint64_t)this + 656, v12);
    std::vector<float>::resize((uint64_t)this + 680, v12);
  }
  int v13 = (void **)*((void *)this + 80);
  if (v13)
  {
    CFilterBank::filterbank_destroy(v13);
    *((void *)this + 80) = 0;
  }
  *((void *)this + 80) = CFilterBank::filterbank_new((CFilterBank *)*((unsigned int *)this + 162), *((_DWORD *)this + 10), *((float *)this + 34));
  std::vector<float>::resize((uint64_t)this + 704, *((void *)this + 81));
  CFilterBank::filterbank_compute_bank32(*((void *)this + 80), *((const float **)this + 36), *((float **)this + 88));
  MicSense_Core::setParameters(this, v14);
}

void MicSense_Core::setParameters(MicSense_Core *this, const float *a2)
{
  CFAllocatorRef v3 = *(float **)this;
  float v4 = exp(*(float *)(*(void *)this + 8) * 0.115129255);
  *((float *)this + 31) = v4;
  float v5 = *((float *)this + 34);
  unint64_t v6 = *((void *)this + 3);
  float v7 = v5 / (float)v6;
  *((float *)this + 32) = expf(-1.0 / (float)((float)(v3[5] * 0.001) * v7));
  float v8 = exp(v3[3] * 0.115129255);
  *((float *)this + 30) = v8;
  *((void *)this + 10) = 1;
  *((float *)this + 33) = expf(-1.0 / (float)(v7 * (float)(v3[6] * 0.001)));
  unint64_t v9 = (unint64_t)(float)(v3[1] + 0.5);
  unint64_t v10 = vcvtps_u32_f32(v3[3] / -6.0206);
  *((void *)this + 7) = v9;
  *((void *)this + 9) = v10;
  float v11 = v3[7];
  if (v9 == 5) {
    float v11 = 8.0;
  }
  unint64_t v12 = (((unint64_t)(float)((float)((float)(v5 * v11) * 0.001) + 0.5) - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v12 >= v6) {
    unint64_t v12 = v6;
  }
  if (*((void *)this + 12) != v12)
  {
    *((void *)this + 12) = v12;
    if (*((void *)this + 8))
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        vDSP_vfill(&MicSenseUtils::kZerof, *(float **)(*((void *)this + 66) + v13), 1, (uint64_t)(*(void *)(*((void *)this + 66) + v13 + 8) - *(void *)(*((void *)this + 66) + v13)) >> 2);
        MicSenseUtils::DynamicFIR<float>::setCoefficients(*(void *)(*((void *)this + 77) + 8 * v14++), (const void **)(*((void *)this + 66) + v13), *((void *)this + 12));
        v13 += 24;
      }
      while (*((void *)this + 8) > v14);
      unint64_t v9 = *((void *)this + 7);
    }
  }
  switch(v9)
  {
    case 3uLL:
      float v15 = (float)(*((void *)this + 12) >> 1);
      float v16 = *((float *)this + 34);
      float v17 = -0.001;
      break;
    case 2uLL:
      float v15 = (float)(*((void *)this + 12) >> 1);
      float v16 = *((float *)this + 34);
      float v17 = -0.0005;
      break;
    case 1uLL:
      float v15 = (float)(*((void *)this + 12) >> 1);
      float v16 = *((float *)this + 34);
      float v17 = -0.00025;
      break;
    default:
      goto LABEL_17;
  }
  *((void *)this + 13) = (unint64_t)(float)(v15 + (float)(v16 * v17));
LABEL_17:
  float v18 = *(float *)(*(void *)this + 40);
  if (*((unsigned char *)this + 141) != v18 > 0.5)
  {
    if (v18 <= 0.5)
    {
      char v21 = 0;
    }
    else
    {
      uint64_t v19 = (void *)*((void *)this + 69);
      uint64_t v20 = *((void *)this + 70) - (void)v19;
      if (v20 >= 1) {
        bzero(v19, 8 * (((unint64_t)v20 >> 3) - ((unint64_t)v20 > 7)) + 8);
      }
      char v21 = 1;
    }
    *((unsigned char *)this + 141) = v21;
  }
}

void MicSense_Core::MicSense_Core(MicSense_Core *this, unint64_t a2, uint64_t a3, char a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a3;
  float v7 = (char **)((char *)this + 144);
  float v8 = (char **)((char *)this + 168);
  unint64_t v9 = (char **)((char *)this + 192);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  int64x2_t v35 = (char **)((char *)this + 240);
  float v36 = (char **)((char *)this + 216);
  *((void *)this + 8) = a2;
  int v33 = (char **)((char *)this + 312);
  BOOL v34 = (char **)((char *)this + 264);
  *(_OWORD *)((char *)this + 72) = 0u;
  unint64_t v29 = (char **)((char *)this + 288);
  uint64_t v30 = (char **)((char *)this + 360);
  *(_OWORD *)((char *)this + 88) = 0u;
  unint64_t v31 = (char **)((char *)this + 336);
  unint64_t v32 = (char **)((char *)this + 384);
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v37 = (uint64_t *)((char *)this + 432);
  float v38 = (uint64_t *)((char *)this + 480);
  *(_OWORD *)((char *)this + 120) = 0u;
  float v41 = (uint64_t *)((char *)this + 504);
  uint64_t v42 = (uint64_t *)((char *)this + 456);
  *((_DWORD *)this + 34) = 1195081728;
  uint64_t v39 = (uint64_t *)((char *)this + 528);
  __int16 v40 = (char *)this + 552;
  unint64_t v10 = (long long *)((char *)this + 576);
  *((unsigned char *)this + 142) = a4;
  float v11 = (void *)((char *)this + 616);
  uint64_t v12 = 2 * a3;
  *((_WORD *)this + 70) = 0;
  bzero((char *)this + 144, 0x248uLL);
  *((void *)this + 4) = v12;
  *((void *)this + 5) = a3 + 1;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::resize(v10, a2);
  uint64_t v13 = (void *)*((void *)this + 78);
  uint64_t v14 = *((void *)this + 77);
  unint64_t v15 = ((uint64_t)v13 - v14) >> 3;
  if (a2 <= v15)
  {
    if (a2 < v15)
    {
      unint64_t v24 = (void *)(v14 + 8 * a2);
      while (v13 != v24)
      {
        unsigned int v26 = (void *)*--v13;
        unint64_t v25 = v26;
        *uint64_t v13 = 0;
        if (v26) {
          std::default_delete<MicSenseUtils::DynamicFIR<float>>::operator()[abi:ne180100](v25);
        }
      }
      *((void *)this + 78) = v24;
    }
  }
  else
  {
    unint64_t v16 = a2 - v15;
    uint64_t v17 = *((void *)this + 79);
    if (a2 - v15 <= (v17 - (uint64_t)v13) >> 3)
    {
      bzero(*((void **)this + 78), 8 * v16);
      *((void *)this + 78) = &v13[v16];
    }
    else
    {
      if (a2 >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      v43[4] = (char *)this + 632;
      uint64_t v18 = v17 - v14;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= a2) {
        uint64_t v19 = a2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      char v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v20);
      unint64_t v22 = &v21[8 * v15];
      v43[0] = v21;
      v43[1] = v22;
      v43[3] = &v21[8 * v23];
      bzero(v22, 8 * v16);
      v43[2] = &v22[8 * v16];
      std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(v11, v43);
      std::__split_buffer<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::~__split_buffer((uint64_t)v43);
    }
  }
  std::vector<std::vector<float>>::resize(v42, a2);
  std::vector<std::vector<float>>::resize(v41, a2);
  std::vector<unsigned long>::resize((uint64_t)v40, a2);
  std::vector<std::vector<float>>::resize(v39, a2);
  std::vector<std::vector<float>>::resize(v38, a2);
  std::vector<std::vector<float>>::resize(v37, a2);
  unint64_t v27 = *((void *)this + 4);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v7, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v8, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v9, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v36, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v35, v27, v43);
  v43[0] = 0;
  std::vector<double>::assign(v34, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v33, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v32, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v31, v27, v43);
  LODWORD(v43[0]) = 0;
  std::vector<float>::assign(v30, v27, v43);
  unint64_t v28 = *((void *)this + 4);
  LODWORD(v43[0]) = 1065353216;
  std::vector<float>::assign(v29, v28, v43);
  if (*((void *)this + 8)) {
    operator new();
  }
  operator new();
}

void sub_1BB6BD170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,void *a27)
{
  MEMORY[0x1C185D370](v30, 0x10A0C40A3058978);
  int v33 = *(void **)(v27 + 704);
  if (v33)
  {
    *(void *)(v27 + 712) = v33;
    operator delete(v33);
  }
  BOOL v34 = *(void **)(v27 + 680);
  if (v34)
  {
    *(void *)(v27 + 688) = v34;
    operator delete(v34);
  }
  int64x2_t v35 = *(void **)(v27 + 656);
  if (v35)
  {
    *(void *)(v27 + 664) = v35;
    operator delete(v35);
  }
  *(void *)(v31 - 136) = v29;
  std::vector<std::unique_ptr<MicSenseUtils::DynamicFIR<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  std::unique_ptr<MicSenseUtils::GainsToFIR>::reset[abi:ne180100](a27, 0);
  uint64_t v36 = *(void *)(v27 + 600);
  *(void *)(v27 + 600) = 0;
  if (v36) {
    std::default_delete<MultiRadixRealFFT>::operator()[abi:ne180100](v36);
  }
  *(void *)(v31 - 136) = v28;
  std::vector<std::unique_ptr<VPTimeFreqConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  uint64_t v37 = *a24;
  if (*a24)
  {
    *(void *)(v27 + 560) = v37;
    operator delete(v37);
  }
  *(void *)(v31 - 136) = a23;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(void *)(v31 - 136) = a25;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(void *)(v31 - 136) = a22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(void *)(v31 - 136) = a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  *(void *)(v31 - 136) = a21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  float v38 = *(void **)(v27 + 408);
  if (v38)
  {
    *(void *)(v27 + 416) = v38;
    operator delete(v38);
  }
  uint64_t v39 = *a16;
  if (*a16)
  {
    *(void *)(v27 + 392) = v39;
    operator delete(v39);
  }
  __int16 v40 = *a14;
  if (*a14)
  {
    *(void *)(v27 + 368) = v40;
    operator delete(v40);
  }
  float v41 = *a15;
  if (*a15)
  {
    *(void *)(v27 + 344) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *a17;
  if (*a17)
  {
    *(void *)(v27 + 320) = v42;
    operator delete(v42);
  }
  unsigned int v43 = *a13;
  if (*a13)
  {
    *(void *)(v27 + 296) = v43;
    operator delete(v43);
  }
  uint64_t v44 = *a18;
  if (*a18)
  {
    *(void *)(v27 + 272) = v44;
    operator delete(v44);
  }
  uint64_t v45 = *a19;
  if (*a19)
  {
    *(void *)(v27 + 248) = v45;
    operator delete(v45);
  }
  float v46 = *a20;
  if (*a20)
  {
    *(void *)(v27 + 224) = v46;
    operator delete(v46);
  }
  float v47 = *a10;
  if (*a10)
  {
    *(void *)(v27 + 200) = v47;
    operator delete(v47);
  }
  vDSP_Length v48 = *a11;
  if (*a11)
  {
    *(void *)(v27 + 176) = v48;
    operator delete(v48);
  }
  float v49 = *a12;
  if (*a12)
  {
    *(void *)(v27 + 152) = v49;
    operator delete(v49);
  }
  float v50 = *(void **)v27;
  if (*(void *)v27)
  {
    *(void *)(v27 + 8) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

void *MicSense_Core::setNoiseProfile(void *result, void *a2)
{
  if (a2[1] != *a2)
  {
    int v2 = result;
    unint64_t v3 = result[8];
    if (v3)
    {
      uint64_t v5 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = v2[5];
        if (v7)
        {
          float result = memmove(*(void **)(v2[63] + v5), *(const void **)(*a2 + v5), 4 * v7);
          unint64_t v3 = v2[8];
        }
        v5 += 24;
      }
    }
  }
  return result;
}

unint64_t MicSense_Core::getPreferredBlockProcessorSize(MicSense_Core *this)
{
  if ((uint64_t)this > 44099)
  {
    if ((uint64_t)this > 95999)
    {
      if (this != (MicSense_Core *)96000)
      {
        if (this == (MicSense_Core *)176400 || this == (MicSense_Core *)192000) {
          return 2048;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (this == (MicSense_Core *)44100 || this == (MicSense_Core *)48000) {
        return 512;
      }
      if (this != (MicSense_Core *)88200) {
        goto LABEL_22;
      }
    }
    return 1024;
  }
  if ((uint64_t)this <= 22049)
  {
    if (this == (MicSense_Core *)8000) {
      return 80;
    }
    if (this == (MicSense_Core *)16000) {
      return 192;
    }
  }
  else
  {
    if (this == (MicSense_Core *)22050 || this == (MicSense_Core *)24000) {
      return 240;
    }
    if (this == (MicSense_Core *)32000) {
      return 256;
    }
  }
LABEL_22:
  unint64_t v2 = vcvtmd_u64_f64((double)(unint64_t)this * 0.008);
  unint64_t v3 = vcvtpd_u64_f64((double)(unint64_t)this * 0.016);
  if (v2 > v3) {
    return 512;
  }
  unint64_t v5 = 2 * v2;
  uint64_t v1 = 512;
  for (uint64_t i = -2 * v2; ; i -= 2)
  {
    if (i)
    {
      if ((v5 & (v5 - 1)) == 0) {
        break;
      }
      uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)(v5 / 3));
      v7.i16[0] = vaddlv_u8(v7);
      BOOL v8 = i == -3 * (v5 / 3) && v5 >= 3;
      BOOL v9 = !v8 || v7.u32[0] > 1uLL;
      if (!v9 && log2((double)(v5 / 3)) >= 4.0) {
        break;
      }
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)(v5 / 5));
      v10.i16[0] = vaddlv_u8(v10);
      BOOL v11 = i == -5 * (v5 / 5) && v5 >= 5;
      BOOL v12 = !v11 || v10.u32[0] > 1uLL;
      if (!v12 && log2((double)(v5 / 5)) >= 4.0) {
        break;
      }
      unint64_t v13 = v5 / 0xF;
      if (i == -15 * (v5 / 0xF) && v5 >= 0xF)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] <= 1uLL && log2((double)v13) >= 4.0) {
          break;
        }
      }
    }
    ++v2;
    v5 += 2;
    if (v2 > v3) {
      return v1;
    }
  }
  return v2;
}

unint64_t MicSense_Core::getPreferredBlockSize(MicSense_Core *this, unint64_t a2)
{
  unint64_t v2 = vcvtmd_u64_f64((double)(unint64_t)this * 0.008);
  unint64_t v3 = vcvtpd_u64_f64((double)(unint64_t)this * 0.016);
  if (v2 > v3) {
    return 0;
  }
  unint64_t v6 = 2 * v2;
  for (uint64_t i = -2 * v2; ; i -= 2)
  {
    if (!(a2 % v2) && i != 0)
    {
      if ((v6 & (v6 - 1)) == 0) {
        break;
      }
      unint64_t v9 = v6 / 3;
      if (i == -3 * (v6 / 3) && v6 >= 3)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] <= 1uLL && log2((double)v9) >= 4.0) {
          break;
        }
      }
      unint64_t v11 = v6 / 5;
      if (i == -5 * (v6 / 5) && v6 >= 5)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] <= 1uLL && log2((double)v11) >= 4.0) {
          break;
        }
      }
      unint64_t v13 = v6 / 0xF;
      if (i == -15 * (v6 / 0xF) && v6 >= 0xF)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] <= 1uLL && log2((double)v13) >= 4.0) {
          break;
        }
      }
    }
    ++v2;
    v6 += 2;
    if (v2 > v3) {
      return 0;
    }
  }
  return v2;
}

void MicSense_Core::psdFFT(uint64_t a1, DSPSplitComplex *__A, float **a3, float a4)
{
  float __B = a4;
  unint64_t v6 = *a3;
  float v7 = *__A->realp;
  float v8 = *__A->imagp;
  vDSP_Length v9 = *(void *)(a1 + 40) - 1;
  vDSP_zvmags(__A, 1, *a3, 1, v9);
  float *v6 = v7 * v7;
  v6[v9] = v8 * v8;
  vDSP_vsmul(*a3, 1, &__B, *a3, 1, *(void *)(a1 + 40));
}

float MicSense_Core::arburg(MicSense_Core *this, const float *__A, vDSP_Length __N, uint64_t a4, float *a5)
{
  if (!__N) {
    __assert_rtn("arburg", "MicSense_Core.cpp", 530, "length > 0");
  }
  unint64_t v6 = (char *)*((void *)this + 30);
  if (__N > (uint64_t)(*((void *)this + 31) - (void)v6) >> 2) {
    __assert_rtn("arburg", "MicSense_Core.cpp", 531, "mTmpVector5.size() >= length");
  }
  float v7 = (void *)*((void *)this + 21);
  if (__N > (uint64_t)(*((void *)this + 22) - (void)v7) >> 2) {
    __assert_rtn("arburg", "MicSense_Core.cpp", 532, "mTmpVector2.size() >= length");
  }
  float v8 = (char *)*((void *)this + 24);
  if (__N > (uint64_t)(*((void *)this + 25) - (void)v8) >> 2) {
    __assert_rtn("arburg", "MicSense_Core.cpp", 533, "mTmpVector3.size() >= length");
  }
  uint8x8_t v10 = (double *)*((void *)this + 33);
  vDSP_Length v11 = a4 + 1;
  if ((uint64_t)(*((void *)this + 34) - (void)v10) >> 3 < (unint64_t)(2 * (a4 + 1))) {
    __assert_rtn("arburg", "MicSense_Core.cpp", 534, "mTmpVector1D.size() >= 2 * (order + 1)");
  }
  LODWORD(__C) = 0;
  vDSP_svesq(__A, 1, (float *)&__C, __N);
  float v13 = *(float *)&__C / (float)__N;
  memcpy(v6, __A, 4 * __N);
  memcpy(v7, __A, 4 * __N);
  vDSP_Length v26 = v11;
  bzero(v10, 8 * v11);
  *uint8x8_t v10 = 1.0;
  unint64_t v25 = v10;
  if (a4)
  {
    vDSP_Length v14 = 0;
    uint64_t v28 = v10 + 1;
    uint64_t v29 = &v10[a4 + 1];
    vDSP_Length v15 = __N - 1;
    uint64_t v16 = 4;
    uint64_t v17 = v10;
    uint64_t v18 = v8;
    uint64_t v19 = v6;
    do
    {
      ++v14;
      LODWORD(__C) = 0;
      vDSP_dotpr((const float *)v7, 1, (const float *)&v19[v16], 1, (float *)&__C, v15);
      float v20 = *(float *)&__C * -2.0;
      LODWORD(__C) = 0;
      vDSP_svesq((const float *)&v19[v16], 1, (float *)&__C, v15);
      float v21 = *(float *)&__C;
      LODWORD(__C) = 0;
      vDSP_svesq((const float *)v7, 1, (float *)&__C, v15);
      double __C = v20 / ((float)(v21 + *(float *)&__C) + 2.22044605e-16);
      float v22 = __C;
      float __B = v22;
      vDSP_vsma((const float *)v7, 1, &__B, (const float *)&v19[v16], 1, (float *)&v18[v16], 1, v15);
      vDSP_vsma((const float *)&v19[v16], 1, &__B, (const float *)v7, 1, (float *)v7, 1, v15);
      vDSP_vsmulD(v17, -1, &__C, v29, 1, v14);
      vDSP_vaddD(v29, 1, v28, 1, v28, 1, v14);
      BOOL v23 = v19 == v6;
      if (v19 == v6) {
        uint64_t v19 = v8;
      }
      else {
        uint64_t v19 = v6;
      }
      if (v23) {
        uint64_t v18 = v6;
      }
      else {
        uint64_t v18 = v8;
      }
      float v13 = v13 * (float)(1.0 - (float)(__B * __B));
      ++v17;
      v16 += 4;
      --v15;
    }
    while (a4 != v14);
  }
  vDSP_vdpsp(v25, 1, a5, 1, v26);
  return v13;
}

void MicSense_Core::psdburg(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, float a5)
{
  if (*(void *)(a1 + 40) > (unint64_t)((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2)) {
    __assert_rtn("psdburg", "MicSense_Core.cpp", 502, "psd.size() >= mCplxVectorSize");
  }
  memcpy(*(void **)(a1 + 312), a2, 4 * a3 + 4);
  float v8 = *(float **)(a1 + 168);
  __A.realp = *(float **)(a1 + 144);
  __A.imagp = v8;
  MultiRadixRealFFT::RealOutOfPlaceForwardTransform(*(MultiRadixRealFFT **)(a1 + 600), *(DSPComplex **)(a1 + 312), &__A, 1.0);
  vDSP_Length v9 = *(float **)a4;
  float v10 = *__A.realp;
  float v11 = *__A.imagp;
  vDSP_Length v12 = *(void *)(a1 + 40) - 1;
  vDSP_zvmags(&__A, 1, *(float **)a4, 1, v12);
  *vDSP_Length v9 = v10 * v10;
  v9[v12] = v11 * v11;
  vDSP_vthr(*(const float **)a4, 1, &MicSenseUtils::kepsf, *(float **)a4, 1, *(void *)(a1 + 40));
  float v13 = a5;
  if (*(void *)(a1 + 56) != 6 && *(void *)(a1 + 80) != 1) {
    float v13 = a5 + a5;
  }
  vDSP_svdiv(&v13, *(const float **)a4, 1, *(float **)a4, 1, *(void *)(a1 + 40));
}

void MicSense_Core::computeSuppressionGains(uint64_t a1, const float **a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 141))
  {
    *((float *)&__B + 1) = (float)*(unint64_t *)(*(void *)(a1 + 552) + 8 * a3);
    vDSP_vsmul(*(const float **)(*(void *)(a1 + 504) + 24 * a3), 1, (const float *)&__B + 1, *(float **)(*(void *)(a1 + 504) + 24 * a3), 1, *(void *)(a1 + 40));
    unint64_t v6 = *(float **)(*(void *)(a1 + 504) + 24 * a3);
    vDSP_vadd(v6, 1, *a2, 1, v6, 1, *(void *)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 552);
    uint64_t v8 = *(void *)(v7 + 8 * a3) + 1;
    *(void *)(v7 + 8 * a3) = v8;
    *((float *)&__B + 1) = 1.0 / (float)(unint64_t)v8;
    vDSP_Length v9 = *(float **)(*(void *)(a1 + 504) + 24 * a3);
    vDSP_vsmul(v9, 1, (const float *)&__B + 1, v9, 1, *(void *)(a1 + 40));
  }
  float v25 = *(float *)(a1 + 128);
  float __D = 1.0 - v25;
  float v10 = *(float **)(*(void *)(a1 + 456) + 24 * a3);
  vDSP_vsmsma(v10, 1, &v25, *a2, 1, &__D, v10, 1, *(void *)(a1 + 40));
  float v23 = *(float *)(*(void *)a1 + 16);
  vDSP_vsmul(*(const float **)(*(void *)(a1 + 504) + 24 * a3), 1, &v23, *(float **)(a1 + 144), 1, *(void *)(a1 + 40));
  vDSP_vthr(*(const float **)(*(void *)(a1 + 456) + 24 * a3), 1, &MicSenseUtils::kepsf, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
  vDSP_vdiv(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 144), 1, *(float **)(a1 + 192), 1, *(void *)(a1 + 40));
  if (*(void *)(a1 + 72))
  {
    vDSP_vadd(*(const float **)(a1 + 192), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 144), 1, *(void *)(a1 + 40));
    vDSP_vdiv(*(const float **)(a1 + 144), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 144), 1, *(void *)(a1 + 40));
    vDSP_vclip(*(const float **)(a1 + 144), 1, (const float *)(a1 + 120), &MicSenseUtils::kOnef, *(float **)(a1 + 144), 1, *(void *)(a1 + 40));
    if (*(void *)(a1 + 72) != 1)
    {
      unint64_t v11 = 0;
      do
      {
        vDSP_vsq(*(const float **)(a1 + 144), 1, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
        vDSP_vsmul(*(const float **)(a1 + 168), 1, &MicSenseUtils::kFourf, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
        vDSP_vthr(*(const float **)(a1 + 168), 1, &MicSenseUtils::kepsf, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
        vDSP_vdiv(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 192), 1, *(float **)(a1 + 192), 1, *(void *)(a1 + 40));
        vDSP_vadd(*(const float **)(a1 + 192), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
        vDSP_vdiv(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 288), 1, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
        vDSP_vmul(*(const float **)(a1 + 168), 1, *(const float **)(a1 + 144), 1, *(float **)(a1 + 144), 1, *(void *)(a1 + 40));
        vDSP_vclip(*(const float **)(a1 + 144), 1, (const float *)(a1 + 120), &MicSenseUtils::kOnef, *(float **)(a1 + 144), 1, *(void *)(a1 + 40));
        ++v11;
      }
      while (*(void *)(a1 + 72) - 1 > v11);
    }
    vDSP_Length v12 = *(float **)a1;
    if (*(float *)(*(void *)a1 + 48) <= 0.5)
    {
      uint64_t v19 = *(void *)(a1 + 40);
      if (v19) {
        memmove(*(void **)(a1 + 192), *(const void **)(a1 + 144), 4 * v19);
      }
    }
    else
    {
      float v14 = v12[13];
      float v13 = v12[14];
      float v15 = v12[15];
      vDSP_vsq(*(const float **)(a1 + 144), 1, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
      vDSP_vmul(*(const float **)(a1 + 168), 1, *(const float **)(*(void *)(a1 + 456) + 24 * a3), 1, *(float **)(a1 + 168), 1, *(void *)(a1 + 40));
      uint64_t __B = 0;
      vDSP_sve(*(const float **)(a1 + 168), 1, (float *)&__B + 1, *(void *)(a1 + 40));
      vDSP_sve(*(const float **)(*(void *)(a1 + 456) + 24 * a3), 1, (float *)&__B, *(void *)(a1 + 40));
      float v16 = *((float *)&__B + 1) / (float)(*(float *)&__B + 0.00000011921);
      if (*(float *)(*(void *)a1 + 64) > 0.5)
      {
        CFilterBank::filterbank_compute_bank32(*(void *)(a1 + 640), *(const float **)(a1 + 168), *(float **)(a1 + 656));
        CFilterBank::filterbank_compute_bank32(*(void *)(a1 + 640), *(const float **)(*(void *)(a1 + 456) + 24 * a3), *(float **)(a1 + 680));
        vDSP_vthr(*(const float **)(a1 + 680), 1, &MicSenseUtils::kepsf, *(float **)(a1 + 680), 1, *(void *)(a1 + 648));
        vDSP_vdiv(*(const float **)(a1 + 680), 1, *(const float **)(a1 + 656), 1, *(float **)(a1 + 656), 1, *(void *)(a1 + 648));
        float __A = -v14;
        vDSP_vsadd(*(const float **)(a1 + 656), 1, &__A, *(float **)(a1 + 656), 1, *(void *)(a1 + 648));
        vDSP_vsmul(*(const float **)(a1 + 656), 1, &MicSense_Core::postFilter(std::vector<float> &,unsigned long,std::vector<float> &)::sigmoidSlope, *(float **)(a1 + 656), 1, *(void *)(a1 + 648));
        vvexpf(*(float **)(a1 + 656), *(const float **)(a1 + 656), (const int *)(a1 + 648));
        vDSP_vadd(*(const float **)(a1 + 288), 1, *(const float **)(a1 + 656), 1, *(float **)(a1 + 656), 1, *(void *)(a1 + 648));
        vDSP_svdiv(*(const float **)(a1 + 288), *(const float **)(a1 + 656), 1, *(float **)(a1 + 656), 1, *(void *)(a1 + 648));
        CFilterBank::filterbank_compute_psd16(*(int ***)(a1 + 640), *(void *)(a1 + 656), *(float **)(a1 + 168));
        vDSP_vmul(*(const float **)(a1 + 144), 1, *(const float **)(a1 + 168), 1, *(float **)(a1 + 144), 1, *(void *)(a1 + 40));
      }
      if (v16 >= v14) {
        float v17 = 1.0;
      }
      else {
        float v17 = v16;
      }
      if (v17 == 1.0) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (unint64_t)(float)((float)(roundf(v13 * (float)(1.0 - (float)(v17 / v14))) * 2.0) + 1.0);
      }
      if (v18 <= (unint64_t)(float)(v15 + 0.5)) {
        unint64_t v18 = (unint64_t)(float)(v15 + 0.5);
      }
      if (*(void *)(a1 + 40) >= v18) {
        vDSP_Length v20 = v18;
      }
      else {
        vDSP_Length v20 = *(void *)(a1 + 40);
      }
      float __A = 1.0 / (float)v20;
      vDSP_vfill(&__A, *(float **)(a1 + 168), 1, v20);
      vDSP_conv(*(const float **)(a1 + 144), 1, (const float *)(*(void *)(a1 + 168) + 4 * v20 - 4), -1, *(float **)(a1 + 192), 1, *(void *)(a1 + 40), v20);
    }
    float v25 = *(float *)(a1 + 132);
    float __D = 1.0 - v25;
    float v21 = *(float **)(*(void *)(a1 + 480) + 24 * a3);
    vDSP_vsmsma(v21, 1, &v25, *(const float **)(a1 + 192), 1, &__D, v21, 1, *(void *)(a1 + 40));
  }
  else
  {
    vDSP_vfill(&MicSenseUtils::kOnef, *(float **)(*(void *)(a1 + 480) + 24 * a3), 1, *(void *)(a1 + 40));
  }
  float v22 = *(float **)(*(void *)(a1 + 480) + 24 * a3);
  vDSP_vclip(v22, 1, (const float *)(a1 + 120), &MicSenseUtils::kOnef, v22, 1, *(void *)(a1 + 40));
}

void MicSense_Core::process(MicSense_Core *this, uint64_t a2, uint64_t *a3, vDSP_Length a4)
{
  unint64_t v5 = *(void **)a2;
  float v4 = *(void **)(a2 + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a2) >> 3);
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3)) {
    __assert_rtn("process", "MicSense_Core.cpp", 771, "numChannels == output.size()");
  }
  vDSP_Length v7 = a4;
  if (a4 > (uint64_t)(v5[1] - *v5) >> 2) {
    __assert_rtn("process", "MicSense_Core.cpp", 772, "input[0].size() >= numFrames");
  }
  float v46 = *(void **)a2;
  float v47 = *(void **)(a2 + 8);
  if (v4 != v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t __len = 8 * a4;
    uint64_t v49 = a4 & 0x1FFFFFFFFFFFFFFFLL;
    if (v6 <= 1) {
      unint64_t v13 = 1;
    }
    else {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a2) >> 3);
    }
    while (*((unsigned char *)this + 142))
    {
      uint64_t v14 = *a3;
      if (v49)
      {
        memmove(*(void **)(v14 + v11), *(const void **)(*(void *)a2 + v11), __len);
        uint64_t v14 = *a3;
      }
      __A.realp = 0;
      __A.imagp = 0;
      __A.realp = *(float **)(v14 + v11);
      __A.imagp = &__A.realp[v7];
      MicSense_Core::psdFFT((uint64_t)this, &__A, (float **)this + 18, (float)*((unint64_t *)this + 4) * 4.0);
      MicSense_Core::computeSuppressionGains((uint64_t)this, (const float **)this + 18, v12);
      float v15 = *(const float **)(*((void *)this + 60) + v11);
      float v16 = *__A.imagp;
      vDSP_Length v17 = *((void *)this + 5) - 1;
      vDSP_vmul(__A.realp, 1, v15, 1, __A.realp, 1, v17);
      vDSP_vmul(__A.imagp, 1, v15, 1, __A.imagp, 1, v17);
      float v18 = v15[v17];
      vDSP_Length v7 = a4;
      *__A.imagp = v16 * v18;
LABEL_11:
      ++v12;
      v11 += 24;
      if (v13 == v12) {
        goto LABEL_34;
      }
    }
    if (*((void *)this + 7) == 6)
    {
      int v19 = *((unsigned __int8 *)this + 140);
    }
    else
    {
      int v19 = *((unsigned __int8 *)this + 140);
      if (*((void *)this + 10) != 1)
      {
        if (*((unsigned char *)this + 140)) {
          goto LABEL_24;
        }
        float v21 = *(const float **)(*(void *)a2 + v11);
        vDSP_Length v22 = *((void *)this + 3);
        goto LABEL_22;
      }
    }
    if (v19) {
      goto LABEL_24;
    }
    memcpy(*(void **)(*((void *)this + 54) + v11), (const void *)(*(void *)(*((void *)this + 54) + v11) + 4 * *((void *)this + 3)), 4 * (*((void *)this + 4) - *((void *)this + 3)));
    memcpy((void *)(*(void *)(*((void *)this + 54) + v11) + 4 * (*((void *)this + 4) - *((void *)this + 3))), *(const void **)(*(void *)a2 + v11), 4 * *((void *)this + 3));
    vDSP_vmul(*((const float **)this + 48), 1, *(const float **)(*((void *)this + 54) + v11), 1, *((float **)this + 27), 1, *((void *)this + 4));
    float __B = 2.0;
    vDSP_vsmul(*((const float **)this + 27), 1, &__B, *((float **)this + 27), 1, *((void *)this + 4));
    vDSP_Length v20 = (float *)*((void *)this + 45);
    __A.realp = (float *)*((void *)this + 42);
    __A.imagp = v20;
    MultiRadixRealFFT::RealOutOfPlaceForwardTransform(*((MultiRadixRealFFT **)this + 75), *((DSPComplex **)this + 27), &__A, 1.0);
    if (*((void *)this + 10))
    {
      MicSense_Core::psdFFT((uint64_t)this, &__A, (float **)this + 18, 1.0 / (float)*((unint64_t *)this + 4));
LABEL_23:
      MicSense_Core::computeSuppressionGains((uint64_t)this, (const float **)this + 18, v12);
LABEL_24:
      if (**(float **)this <= 0.5)
      {
        switch(*((void *)this + 7))
        {
          case 0:
            MicSenseUtils::GainsToFIR::gainsToMinimumPhaseFilter(*((void *)this + 76), *((void *)this + 60) + v11, (float **)(*((void *)this + 66) + v11), *((void *)this + 12));
            goto LABEL_31;
          case 1:
          case 2:
          case 3:
            uint64_t v27 = (int *)*((void *)this + 76);
            uint64_t v28 = *((void *)this + 60) + v11;
            uint64_t v29 = (float **)(*((void *)this + 66) + v11);
            vDSP_Length v30 = *((void *)this + 12);
            uint64_t v31 = *((void *)this + 13);
            goto LABEL_30;
          case 4:
          case 5:
            uint64_t v27 = (int *)*((void *)this + 76);
            uint64_t v28 = *((void *)this + 60) + v11;
            uint64_t v29 = (float **)(*((void *)this + 66) + v11);
            vDSP_Length v30 = *((void *)this + 12);
            uint64_t v31 = 0;
LABEL_30:
            MicSenseUtils::GainsToFIR::gainsToLinearPhaseFilter(v27, v28, v29, v30, v31);
LABEL_31:
            unint64_t v32 = *(void **)a2;
            uint64_t v33 = *a3;
            MicSenseUtils::DynamicFIR<float>::setCoefficients(*(void *)(*((void *)this + 77) + 8 * v12), (const void **)(*((void *)this + 66) + v11), *((void *)this + 12));
            BOOL v34 = (void *)v32[v11 / 8];
            vDSP_Length v7 = a4;
            MicSenseUtils::DynamicFIR<float>::process(*(void *)(*((void *)this + 77) + 8 * v12), v34, *(float **)(v33 + v11), a4);
            break;
          case 6:
            int64x2_t v35 = (float *)*((void *)this + 45);
            __A.realp = (float *)*((void *)this + 42);
            __A.imagp = v35;
            uint64_t v36 = *(const float **)(*((void *)this + 60) + v11);
            float v37 = *v35;
            unint64_t v45 = v6;
            vDSP_Length v38 = *((void *)this + 5) - 1;
            vDSP_vmul(__A.realp, 1, v36, 1, __A.realp, 1, v38);
            vDSP_vmul(v35, 1, v36, 1, v35, 1, v38);
            float v39 = v36[v38];
            unint64_t v6 = v45;
            float *v35 = v37 * v39;
            VPTimeFreqConverter::Synthesize(*(VPTimeFreqConverter **)(*((void *)this + 72) + 8 * v12), &__A, *(float **)(*a3 + v11));
            float __B = 1.0 / (float)((float)*((unint64_t *)this + 4) + (float)*((unint64_t *)this + 4));
            vDSP_Length v7 = a4;
            vDSP_vsmul(*(const float **)(*a3 + v11), 1, &__B, *(float **)(*a3 + v11), 1, a4);
            break;
          default:
            goto LABEL_11;
        }
      }
      else
      {
        unint64_t v24 = *(void *)a2 + v11;
        float v25 = *(unsigned char **)v24;
        vDSP_Length v26 = *(unsigned char **)(v24 + 8);
        if (v26 != v25) {
          memmove(*(void **)(*a3 + v11), v25, v26 - v25);
        }
      }
      goto LABEL_11;
    }
    float v21 = (const float *)*((void *)this + 27);
    vDSP_Length v22 = *((void *)this + 4);
LABEL_22:
    float v23 = MicSense_Core::arburg(this, v21, v22, *((void *)this + 11), *((float **)this + 51));
    MicSense_Core::psdburg((uint64_t)this, *((const void **)this + 51), *((void *)this + 11), (uint64_t)this + 144, v23);
    goto LABEL_23;
  }
LABEL_34:
  float v41 = *((float *)this + 31);
  __int16 v40 = (const float *)((char *)this + 124);
  if (v41 != 1.0 && v47 != v46)
  {
    uint64_t v43 = 0;
    if (v6 <= 1) {
      uint64_t v44 = 1;
    }
    else {
      uint64_t v44 = v6;
    }
    do
    {
      vDSP_vsmul(*(const float **)(*a3 + v43), 1, v40, *(float **)(*a3 + v43), 1, (uint64_t)(*(void *)(*a3 + v43 + 8) - *(void *)(*a3 + v43)) >> 2);
      v43 += 24;
      --v44;
    }
    while (v44);
  }
}

uint64_t VoiceProcessorV2::GetPropertyInfo(VoiceProcessorV2 *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t result = 1651532146;
  if (!a3 || !a4) {
    return result;
  }
  uint64_t result = 4294956417;
  if (a2 > 1836266092)
  {
    if (a2 <= 1986882932)
    {
      if (a2 > 1953915761)
      {
        if (a2 > 1986880098)
        {
          if (a2 > 1986881899)
          {
            if (a2 == 1986881900) {
              goto LABEL_77;
            }
            unsigned __int16 v13 = 26991;
          }
          else
          {
            if (a2 == 1986880099) {
              goto LABEL_77;
            }
            unsigned __int16 v13 = 25715;
          }
          int v11 = v13 | 0x766D0000;
          goto LABEL_76;
        }
        if (a2 > 1969844081)
        {
          if (a2 == 1969844082) {
            return result;
          }
          int v11 = 1986097261;
          goto LABEL_76;
        }
        if (a2 != 1953915762)
        {
          int v11 = 1953915764;
          goto LABEL_76;
        }
LABEL_97:
        uint64_t result = 0;
        unsigned int v16 = 8;
        goto LABEL_98;
      }
      if (a2 <= 1936744802)
      {
        if (a2 > 1868653666)
        {
          if (a2 != 1868653667)
          {
            if (a2 != 1885957987) {
              return 2003332927;
            }
            goto LABEL_59;
          }
        }
        else
        {
          if (a2 == 1836266093) {
            return result;
          }
          if (a2 != 1836278117) {
            return 2003332927;
          }
        }
        if (!_os_feature_enabled_impl()) {
          return 4294956417;
        }
        goto LABEL_97;
      }
      if (a2 > 1936747875)
      {
        if (a2 == 1936747876)
        {
          *(void *)AudioTimeStamp buf = 0;
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_26320);
          }
          (*(void (**)(unsigned char *, uint64_t))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 8))(buf, 32);
          unsigned int v18 = 0;
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_26320);
          }
          (*(void (**)(void, unsigned int *))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 40))(*(void *)buf, &v18);
          if (GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce != -1) {
            dispatch_once(&GetSpatialMetadataSPI(void)::sSpatialMetadataSPIOnce, &__block_literal_global_26320);
          }
          (*(void (**)(void))(GetSpatialMetadataSPI(void)::sSpatialMetadataSPI + 16))(*(void *)buf);
          uint64_t result = 0;
          unsigned int v16 = v18;
          goto LABEL_98;
        }
        int v11 = 1937141091;
        goto LABEL_76;
      }
      if (a2 == 1936744803) {
        goto LABEL_77;
      }
      int v10 = 1936746595;
LABEL_39:
      if (a2 != v10) {
        return 2003332927;
      }
      goto LABEL_97;
    }
    if (a2 > 1987209582)
    {
      if (a2 > 1987211364)
      {
        if (a2 > 1987212145)
        {
          if (a2 == 1987212146) {
            goto LABEL_97;
          }
          unsigned __int16 v12 = 29812;
        }
        else
        {
          if (a2 == 1987211365) {
            goto LABEL_77;
          }
          unsigned __int16 v12 = 28787;
        }
      }
      else
      {
        if (a2 <= 1987211115)
        {
          if (a2 == 1987209583) {
            goto LABEL_77;
          }
          int v10 = 1987210613;
          goto LABEL_39;
        }
        if (a2 == 1987211116) {
          goto LABEL_77;
        }
        unsigned __int16 v12 = 28527;
      }
    }
    else if (a2 > 1987207795)
    {
      if (a2 > 1987208306)
      {
        if (a2 == 1987208307) {
          goto LABEL_77;
        }
        unsigned __int16 v12 = 26988;
      }
      else
      {
        if (a2 == 1987207796) {
          goto LABEL_77;
        }
        unsigned __int16 v12 = 25461;
      }
    }
    else
    {
      if (a2 <= 1986884723)
      {
        if (a2 == 1986882933) {
          goto LABEL_97;
        }
        int v10 = 1986884466;
        goto LABEL_39;
      }
      if (a2 == 1986884724) {
        goto LABEL_77;
      }
      unsigned __int16 v12 = 25188;
    }
    int v11 = v12 | 0x76720000;
    goto LABEL_76;
  }
  if (a2 > 1634300530)
  {
    if (a2 <= 1701868401)
    {
      if (a2 <= 1684305511)
      {
        if (a2 == 1634300531)
        {
          uint64_t result = 0;
          unsigned int v16 = 8 * *((_DWORD *)this + 542);
          goto LABEL_98;
        }
        if (a2 != 1634758259)
        {
          int v11 = 1635085677;
          goto LABEL_76;
        }
        if (_os_feature_enabled_impl()) {
          goto LABEL_77;
        }
        return 4294956417;
      }
      if (a2 == 1684305512 || a2 == 1685483378) {
        return result;
      }
      int v11 = 1701864051;
LABEL_76:
      if (a2 == v11) {
        goto LABEL_77;
      }
      return 2003332927;
    }
    if (a2 > 1768514914)
    {
      if (a2 == 1768514915 || a2 == 1835361379) {
        goto LABEL_77;
      }
      if (a2 == 1836082532)
      {
        *a3 = 4;
        unsigned __int8 IsDeviceSupportingAdvancedChatFlavors = VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)0xFFFFD581);
        uint64_t result = 0;
LABEL_99:
        *a4 = IsDeviceSupportingAdvancedChatFlavors;
        return result;
      }
      return 2003332927;
    }
    if (a2 != 1701868402)
    {
      if (a2 != 1718384225)
      {
        int v11 = 1718384242;
        goto LABEL_76;
      }
LABEL_59:
      uint64_t result = 0;
      int v15 = 4;
LABEL_87:
      *a3 = v15;
      *a4 = 0;
      return result;
    }
LABEL_77:
    uint64_t result = 0;
    unsigned int v16 = 4;
LABEL_98:
    *a3 = v16;
    unsigned __int8 IsDeviceSupportingAdvancedChatFlavors = 1;
    goto LABEL_99;
  }
  switch(a2)
  {
    case 32768:
    case 32769:
    case 32772:
    case 32773:
    case 32786:
    case 32787:
    case 32788:
    case 32789:
    case 32792:
    case 32794:
    case 32797:
      goto LABEL_77;
    case 32780:
      uint64_t result = 0;
      int v8 = *((_DWORD *)this + 526);
      int v9 = *((_DWORD *)this + 524);
      goto LABEL_79;
    case 32781:
      uint64_t result = 0;
      int v8 = *((_DWORD *)this + 534);
      int v9 = *((_DWORD *)this + 532);
LABEL_79:
      unsigned int v16 = (v8 - v9) & 0xFFFFFFFC;
      goto LABEL_98;
    case 32783:
      if (*((void *)this + 276)) {
        goto LABEL_97;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 561406316;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpProperties.cpp";
      __int16 v20 = 1024;
      int v21 = 141;
      __int16 v22 = 2080;
      float v23 = "mTelephonyMicDSPSettingsDict != nullptr";
      __int16 v24 = 2080;
      float v25 = "InvalidPropertyValue";
      vDSP_Length v17 = MEMORY[0x1E4F14500];
      break;
    case 32784:
      if (*((void *)this + 277)) {
        goto LABEL_97;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 561406316;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpProperties.cpp";
      __int16 v20 = 1024;
      int v21 = 147;
      __int16 v22 = 2080;
      float v23 = "mTelephonyRefDSPSettingsDict != nullptr";
      __int16 v24 = 2080;
      float v25 = "InvalidPropertyValue";
      vDSP_Length v17 = MEMORY[0x1E4F14500];
      break;
    case 32796:
      uint64_t result = 0;
      int v15 = 4 * *((_DWORD *)this + 548);
      goto LABEL_87;
    case 32798:
      if (*((void *)this + 278)) {
        goto LABEL_97;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 561406316;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpProperties.cpp";
      __int16 v20 = 1024;
      int v21 = 153;
      __int16 v22 = 2080;
      float v23 = "mPowerBudget != nullptr";
      __int16 v24 = 2080;
      float v25 = "InvalidPropertyValue";
      vDSP_Length v17 = MEMORY[0x1E4F14500];
      break;
    case 32799:
    case 32800:
    case 32801:
      goto LABEL_97;
    default:
      return 2003332927;
  }
  _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", buf, 0x26u);
  return 561406316;
}

void *___ZL21GetSpatialMetadataSPIv_block_invoke_26328()
{
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "gSpatialMetadataSPI");
    GetSpatialMetadataSPI(void)::sSpatialMetadataSPI = (uint64_t)result;
  }
  return result;
}

uint64_t VoiceProcessorV2::GetProperty(VoiceProcessorV2 *this, uint64_t a2, BOOL *a3, unsigned int a4, unsigned int *a5)
{
  int v6 = a2;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    int v10 = CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v32, (uint64_t)this + 2480, 0);
    int64x2_t v35 = (unsigned int *)a3;
    unsigned int v33 = 0;
    unsigned int v34 = a4;
    if (v6 <= 1635085676)
    {
      switch(v6)
      {
        case 32768:
          if (a4 > 3)
          {
            int v11 = *((unsigned __int8 *)this + 472);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 398;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32769:
          if (a4 > 3)
          {
            BOOL v16 = 0;
            *a5 = 4;
            *a3 = 0;
            if ((*((unsigned char *)this + 4672) & 4) != 0) {
              BOOL v16 = *((void *)this + 413) != 0;
            }
            *a3 = v16;
            goto LABEL_136;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 416;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32770:
        case 32771:
        case 32774:
        case 32775:
        case 32776:
        case 32777:
        case 32778:
        case 32779:
        case 32782:
        case 32785:
        case 32790:
        case 32791:
        case 32793:
        case 32795:
        case 32797:
          goto LABEL_126;
        case 32772:
          if (a4 > 3)
          {
            int v11 = *((unsigned __int8 *)this + 2080);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 404;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32773:
          if (a4 == 4)
          {
            int v11 = *((unsigned __int8 *)this + 2083);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 457;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize == sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32780:
          vDSP_Length v17 = (const void *)*((void *)this + 262);
          size_t v18 = *((void *)this + 263) - (void)v17;
          if (v18 <= a4)
          {
            memcpy(a3, v17, v18);
            int v19 = *((_DWORD *)this + 526);
            int v20 = *((_DWORD *)this + 524);
            goto LABEL_68;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 469;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= (mMicTrimGainsDB.size() * sizeof(Float32))";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32781:
          int v21 = (const void *)*((void *)this + 266);
          size_t v22 = *((void *)this + 267) - (void)v21;
          if (v22 <= a4)
          {
            memcpy(a3, v21, v22);
            int v19 = *((_DWORD *)this + 534);
            int v20 = *((_DWORD *)this + 532);
LABEL_68:
            unsigned int v23 = (v19 - v20) & 0xFFFFFFFC;
            goto LABEL_135;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 486;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= (mRefTrimGainsDB.size() * sizeof(Float32))";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32783:
          if (a4 != 8)
          {
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 530;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize == sizeof(CFDictionaryRef)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          CFDictionaryRef v24 = (const __CFDictionary *)*((void *)this + 276);
          if (v24) {
            goto LABEL_92;
          }
          uint64_t v12 = 561406316;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 531;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "mTelephonyMicDSPSettingsDict != nullptr";
            __int16 v39 = 2080;
            __int16 v40 = "InvalidPropertyValue";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          goto LABEL_137;
        case 32784:
          if (a4 != 8)
          {
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 538;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize == sizeof(CFDictionaryRef)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          CFDictionaryRef v24 = (const __CFDictionary *)*((void *)this + 277);
          if (v24) {
            goto LABEL_92;
          }
          uint64_t v12 = 561406316;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 539;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "mTelephonyRefDSPSettingsDict != nullptr";
            __int16 v39 = 2080;
            __int16 v40 = "InvalidPropertyValue";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          goto LABEL_137;
        case 32786:
          if (a4 > 3)
          {
            *a5 = 4;
            *a3 = 0;
            goto LABEL_136;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 560;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32787:
          if (a4 > 3)
          {
            int v11 = *((_DWORD *)this + 19);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 566;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32788:
          if (a4 > 3)
          {
            int v11 = *((unsigned __int8 *)this + 2085);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 463;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32789:
          if (a4 > 3) {
            goto LABEL_117;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 573;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32792:
          if (a4 > 3)
          {
            int v11 = *((_DWORD *)this + 286);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 611;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32794:
          if (a4 > 3)
          {
            int v11 = *((unsigned __int8 *)this + 2082);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 410;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32796:
          size_t v26 = 4 * *((unsigned int *)this + 548);
          if (v26 <= a4)
          {
            memcpy(a3, *((const void **)this + 273), v26);
            unsigned int v23 = 4 * *((_DWORD *)this + 548);
            goto LABEL_135;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 579;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= (mNumSpeakerInputDataSource * sizeof(UInt32))";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32798:
          if (a4 <= 7)
          {
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 545;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize >= sizeof(CFDictionaryRef)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          CFDictionaryRef v24 = (const __CFDictionary *)*((void *)this + 278);
          if (v24)
          {
LABEL_92:
            CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v24);
            goto LABEL_93;
          }
          uint64_t v12 = 561406316;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 546;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "mPowerBudget != nullptr";
            __int16 v39 = 2080;
            __int16 v40 = "InvalidPropertyValue";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          goto LABEL_137;
        case 32799:
          if (a4 == 8)
          {
            uint64_t v27 = (const void *)*((void *)this + 261);
            if (!v27) {
              goto LABEL_103;
            }
            goto LABEL_102;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 475;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize == sizeof(CFArrayRef)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32800:
          if (a4 == 8)
          {
            uint64_t v27 = (const void *)*((void *)this + 265);
            if (!v27) {
              goto LABEL_103;
            }
            goto LABEL_102;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 492;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize == sizeof(CFArrayRef)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        case 32801:
          if (a4 == 8)
          {
            uint64_t v27 = (const void *)*((void *)this + 269);
            if (v27) {
LABEL_102:
            }
              CFRetain(v27);
LABEL_103:
            *(void *)a3 = v27;
            goto LABEL_125;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 504;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize == sizeof(CFDictionaryRef)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        default:
          if (v6 == 1634300531)
          {
            size_t v30 = 8 * *((unsigned int *)this + 542);
            if (v30 <= a4)
            {
              memcpy(a3, *((const void **)this + 270), v30);
              unsigned int v23 = 8 * *((_DWORD *)this + 542);
              goto LABEL_135;
            }
            uint64_t v12 = 561211770;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "vpProperties.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 511;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = "inDataSize >= (mNumMetricsReporterIDs * sizeof(CAReporterID))";
              __int16 v39 = 2080;
              __int16 v40 = "BadPropertySize";
              float v25 = MEMORY[0x1E4F14500];
              goto LABEL_211;
            }
            goto LABEL_137;
          }
          if (v6 != 1634758259) {
            goto LABEL_126;
          }
          if (!_os_feature_enabled_impl()) {
            goto LABEL_46;
          }
          if (a4 <= 3) {
            goto LABEL_128;
          }
          int v11 = *((unsigned __int8 *)this + 16688);
          break;
      }
      goto LABEL_133;
    }
    if (v6 <= 1868653666)
    {
      if (v6 > 1768514914)
      {
        if (v6 <= 1836082531)
        {
          if (v6 != 1768514915)
          {
            if (v6 == 1835361379)
            {
              if (a4 == 4)
              {
                int v11 = *((unsigned __int8 *)this + 2244);
                goto LABEL_133;
              }
              uint64_t v12 = 561211770;
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_137;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "vpProperties.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 423;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = "inDataSize == sizeof(UInt32)";
              __int16 v39 = 2080;
              __int16 v40 = "BadPropertySize";
              float v25 = MEMORY[0x1E4F14500];
              goto LABEL_211;
            }
            goto LABEL_126;
          }
          if (a4 > 3)
          {
            int v11 = *((unsigned __int8 *)this + 16632);
            goto LABEL_133;
          }
          goto LABEL_128;
        }
        if (v6 == 1836082532)
        {
          if (a4 != 4)
          {
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 436;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize == sizeof(UInt32)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors((VoiceProcessorV2 *)v10))
          {
            int v11 = *((unsigned __int8 *)this + 2246);
            goto LABEL_133;
          }
LABEL_117:
          *a3 = 0;
          goto LABEL_134;
        }
        if (v6 != 1836266093)
        {
          if (v6 == 1836278117)
          {
            if (a4 != 8)
            {
              uint64_t v12 = 561211770;
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_137;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "vpProperties.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 695;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = "inDataSize == sizeof(AUVoiceIOMutedSpeechActivityEventListener)";
              __int16 v39 = 2080;
              __int16 v40 = "BadPropertySize";
              float v25 = MEMORY[0x1E4F14500];
              goto LABEL_211;
            }
            CFDictionaryRef Copy = (const void *)*((void *)this + 2062);
            if (Copy) {
              CFDictionaryRef Copy = _Block_copy(Copy);
            }
LABEL_93:
            *(void *)a3 = Copy;
            goto LABEL_125;
          }
          goto LABEL_126;
        }
      }
      else if (v6 <= 1685483377)
      {
        if (v6 == 1635085677)
        {
          if (a4 == 4)
          {
            int v11 = *((unsigned __int8 *)this + 2268);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 764;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize == sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        }
        if (v6 != 1684305512) {
          goto LABEL_126;
        }
      }
      else if (v6 != 1685483378)
      {
        if (v6 == 1718384225)
        {
          if (a4 > 3)
          {
            int v11 = *((_DWORD *)this + 4151);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 689;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        }
        if (v6 == 1718384242)
        {
          if (a4 > 3)
          {
            int v11 = *((_DWORD *)this + 4150);
            goto LABEL_133;
          }
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 684;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
LABEL_211:
          _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", buf, 0x26u);
          goto LABEL_137;
        }
        goto LABEL_126;
      }
    }
    else
    {
      if (v6 <= 1937141090)
      {
        if (v6 > 1936744802)
        {
          if (v6 == 1936744803)
          {
            if (a4 == 4)
            {
              int v11 = *((unsigned __int8 *)this + 2245);
              goto LABEL_133;
            }
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 429;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize == sizeof(UInt32)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          if (v6 != 1936746595)
          {
            if (v6 == 1936747876)
            {
              *(void *)AudioTimeStamp buf = &v34;
              *(void *)&uint8_t buf[8] = &v33;
              *(void *)&buf[16] = &v35;
              v37[0] = caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV2::GetPropertyInternal(unsigned int,void *,unsigned int,unsigned int *)::$_0>;
              v37[1] = buf;
              uint64_t v36 = v37;
              caulk::concurrent::lf_read_synchronized_write<std::optional<std::vector<unsigned char>>>::access<vp::utility::Lock_Free_SRSW_Storage<unsigned char>::load(caulk::function_ref<void ()(unsigned char const*,unsigned long)>)::{lambda(std::optional<std::vector<unsigned char>> const&)#1}>((VoiceProcessorV2 *)((char *)this + 16368), (void (***)(uint64_t, void, void))&v36);
LABEL_136:
              uint64_t v12 = v33;
LABEL_137:
              atomic_fetch_add((atomic_uint *volatile)(v32 + 4), 0xFFFFFFFF);
              return v12;
            }
            goto LABEL_126;
          }
          if (a4 <= 7)
          {
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 678;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize >= sizeof(SpatialHeadTrackingConfiguration)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          *(void *)a3 = *((void *)this + 2057);
          goto LABEL_125;
        }
        if (v6 == 1868653667)
        {
          if (_os_feature_enabled_impl())
          {
            if (a4 != 8)
            {
              uint64_t v12 = 561211770;
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_137;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "vpProperties.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 703;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = "inDataSize == sizeof(AUVoiceIOOtherAudioDuckingConfiguration)";
              __int16 v39 = 2080;
              __int16 v40 = "BadPropertySize";
              float v25 = MEMORY[0x1E4F14500];
              goto LABEL_211;
            }
            int v29 = *((_DWORD *)this + 4157);
            *(unsigned char *)a3 = *((unsigned char *)this + 16624);
            a3[1] = v29;
            goto LABEL_125;
          }
        }
        else if (v6 == 1885957987)
        {
          if (a4 <= 3)
          {
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 719;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize >= sizeof(Float32)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          int v14 = *((_DWORD *)this + 290);
LABEL_51:
          *a3 = v14;
          goto LABEL_134;
        }
LABEL_126:
        int v15 = 2003332927;
        goto LABEL_129;
      }
      if (v6 <= 1969844081)
      {
        if (v6 != 1937141091)
        {
          if (v6 != 1953915762)
          {
            if (v6 == 1953915764)
            {
              if (a4 > 3)
              {
                int v11 = *((_DWORD *)this + 549);
LABEL_133:
                *a3 = v11;
                goto LABEL_134;
              }
              uint64_t v12 = 561211770;
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_137;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "vpProperties.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 517;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = "inDataSize >= sizeof(UInt32)";
              __int16 v39 = 2080;
              __int16 v40 = "BadPropertySize";
              float v25 = MEMORY[0x1E4F14500];
              goto LABEL_211;
            }
            goto LABEL_126;
          }
          if (a4 <= 7)
          {
            uint64_t v12 = 561211770;
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_137;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpProperties.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 523;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "inDataSize >= sizeof(Float64)";
            __int16 v39 = 2080;
            __int16 v40 = "BadPropertySize";
            float v25 = MEMORY[0x1E4F14500];
            goto LABEL_211;
          }
          *(double *)a3 = *((float *)this + 550);
LABEL_125:
          unsigned int v23 = 8;
LABEL_135:
          *a5 = v23;
          goto LABEL_136;
        }
        if (a4 != 4)
        {
          uint64_t v12 = 561211770;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpProperties.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 451;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "inDataSize == sizeof(Float32)";
          __int16 v39 = 2080;
          __int16 v40 = "BadPropertySize";
          float v25 = MEMORY[0x1E4F14500];
          goto LABEL_211;
        }
        unsigned int v28 = atomic_load((unsigned int *)this + 562);
        unsigned int *v35 = v28;
LABEL_134:
        unsigned int v23 = 4;
        goto LABEL_135;
      }
      if (v6 != 1969844082)
      {
        if (v6 != 1986097261)
        {
          if (v6 == 1987208053)
          {
            if (a4 <= 3)
            {
              uint64_t v12 = 561211770;
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_137;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "vpProperties.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 714;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = "inDataSize >= sizeof(Float32)";
              __int16 v39 = 2080;
              __int16 v40 = "BadPropertySize";
              float v25 = MEMORY[0x1E4F14500];
              goto LABEL_211;
            }
            int v14 = *((_DWORD *)this + 289);
            goto LABEL_51;
          }
          goto LABEL_126;
        }
        if (a4 > 3)
        {
          int v11 = *((_DWORD *)this + 4164);
          goto LABEL_133;
        }
LABEL_128:
        int v15 = 561211770;
        goto LABEL_129;
      }
    }
LABEL_46:
    int v15 = -10879;
LABEL_129:
    unsigned int v33 = v15;
    goto LABEL_136;
  }
  buf[0] = 0;
  return (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t, unsigned int *, unsigned char *))(*(void *)this + 152))(this, a2, a5, buf);
}

void sub_1BB6C0C68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

unsigned int ***caulk::function_ref<void ()(unsigned char const*,unsigned long)>::functor_invoker<VoiceProcessorV2::GetPropertyInternal(unsigned int,void *,unsigned int,unsigned int *)::$_0>(unsigned int ***result, const void *a2, size_t a3)
{
  uint64_t v3 = (uint64_t)*result;
  if (***result >= a3) {
    return (unsigned int ***)memcpy(**(void ***)(v3 + 16), a2, a3);
  }
  **(_DWORD **)(v3 + 8) = 561211770;
  return result;
}

uint64_t VoiceProcessorV2::SetProperty(VoiceProcessorV2 *this, int a2, unsigned int *theDict, unsigned int a4)
{
  uint64_t v553 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 1651532146;
  if (!theDict || !a4) {
    return v4;
  }
  int v8 = this;
  int v9 = (char *)this + 15961;
  if (a2 == 1937141091)
  {
    if (a4 == 4)
    {
      uint64_t v4 = 0;
      float v34 = *(float *)theDict;
      float v35 = COERCE_FLOAT(atomic_load((unsigned int *)this + 562));
      if (v34 > 1.0) {
        return v4;
      }
      float v36 = v35;
      if (v34 < 0.0 || v34 == v35) {
        return v4;
      }
      float v38 = *(float *)theDict;
      while (1)
      {
        float v39 = v36;
        atomic_compare_exchange_strong((atomic_uint *volatile)v8 + 562, (unsigned int *)&v39, LODWORD(v38));
        if (LODWORD(v39) == LODWORD(v36)) {
          break;
        }
        float v36 = v39;
        sched_yield();
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      DSPSplitComplex v62 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
      {
        unint64_t v63 = (*v62 ? *v62 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          float v64 = COERCE_FLOAT(atomic_load((unsigned int *)v8 + 562));
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 868;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
          *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v36;
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2048;
          *(double *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v64;
          _os_log_impl(&dword_1BB0CE000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: media chat old volume:[%f], new volume:[%f]", (uint8_t *)buf, 0x26u);
        }
      }
      unint64_t v65 = (int *)*((void *)v8 + 1578);
      if (v65 && (*v9 || v9[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v66 = VPLogScope(void)::scope;
        float v67 = COERCE_FLOAT(atomic_load((unsigned int *)v8 + 562));
        CALegacyLog::log(v65, 3, v66, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 868, "SetProperty", "setproperty: media chat old volume:[%f], new volume:[%f]", v36, v67);
        int v8 = this;
      }
      if (*v9) {
        VoiceProcessorV2::PListWriteSetPropertyParameters(v8, 1937141091);
      }
      return 0;
    }
    uint64_t v4 = 561211770;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v4;
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 857;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(Float32)";
    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
    v530 = MEMORY[0x1E4F14500];
LABEL_1521:
    _os_log_impl(&dword_1BB0CE000, v530, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
    return v4;
  }
  v541 = (char *)this + 15961;
  if (a2 == 1936747876)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    BOOL v31 = os_log_type_enabled(*(os_log_t *)VPLogScope(void)::scope, OS_LOG_TYPE_DEBUG);
    uint64_t v32 = (void *)VPLogScope(void)::scope;
    if (v31)
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        unsigned int v33 = (*v32 ? *v32 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          vp::utility::encode_to_base_64((vp::utility *)theDict, (const unsigned __int8 *)a4, buf);
          if (buf[1].__r_.__value_.__s.__data_[0])
          {
            std::string __p = buf[0];
            memset(buf, 0, 24);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "???");
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v552 = 136315650;
          *(void *)&v552[4] = "vpProperties.cpp";
          *(_WORD *)&v552[12] = 1024;
          *(_DWORD *)&v552[14] = 842;
          *(_WORD *)&v552[18] = 2080;
          *(void *)&v552[20] = p_p;
          _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: spatial metaCFDataRef data = \"%s\"", v552, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf[0].__r_.__value_.__l.__data_);
          }
        }
      }
      uint64_t v147 = (int *)*((void *)this + 1578);
      if (v147 && (*v541 || v541[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v148 = VPLogScope(void)::scope;
        vp::utility::encode_to_base_64((vp::utility *)theDict, (const unsigned __int8 *)a4, buf);
        if (buf[1].__r_.__value_.__s.__data_[0])
        {
          *(std::string *)v552 = buf[0];
          memset(buf, 0, 24);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v552, "???");
        }
        float v149 = v552;
        if (v552[23] < 0) {
          float v149 = *(const char **)v552;
        }
        CALegacyLog::log(v147, 4, v148, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 842, "SetProperty", "setproperty: spatial metaCFDataRef data = \"%s\"", v149);
        if ((v552[23] & 0x80000000) != 0) {
          operator delete(*(void **)v552);
        }
        if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
      {
        float v56 = (*v32 ? *v32 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 846;
          _os_log_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: spatial metadata", (uint8_t *)buf, 0x12u);
        }
      }
      unint64_t v57 = (int *)*((void *)this + 1578);
      if (v57 && (*v541 || v541[1]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v57, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 846, "SetProperty", "setproperty: spatial metadata");
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)this + 4093);
    unsigned int v150 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((VoiceProcessorV2 *)((char *)this + 16368));
    uint64_t v151 = (char *)this + 16376;
    if (!*((unsigned char *)this + v150 + 16376))
    {
      __break(1u);
      JUMPOUT(0x1BB6C9D74);
    }
    uint64_t v152 = v150;
    float v153 = (char *)this + 32 * v150 + 0x4000;
    buf[0].__r_.__value_.__s.__data_[0] = 0;
    buf[1].__r_.__value_.__s.__data_[0] = 0;
    int v154 = v153[24];
    if (v153[24])
    {
      memset(buf, 0, 24);
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(buf, *(const void **)v153, *((void *)v153 + 1), *((void *)v153 + 1) - *(void *)v153);
      int v154 = 1;
      buf[1].__r_.__value_.__s.__data_[0] = 1;
    }
    BOOL v155 = v152 == 0;
    if (v152) {
      float v156 = (char *)this + 16376;
    }
    else {
      float v156 = (char *)this + 16377;
    }
    float v157 = (char *)this + 32 * v155 + 0x4000;
    if (*v156)
    {
      if (v157[24])
      {
        AudioUnitParameterValue v158 = *(void **)v157;
        if (*(void *)v157)
        {
          *((void *)v157 + 1) = v158;
          operator delete(v158);
          int v154 = buf[1].__r_.__value_.__s.__data_[0];
        }
      }
    }
    else
    {
      v151[v155] = 1;
    }
    *float v157 = 0;
    v157[24] = 0;
    if (v154)
    {
      *(std::string *)float v157 = buf[0];
      memset(buf, 0, 24);
    }
    else
    {
      *(void *)float v157 = 0;
      *((void *)v157 + 1) = 0;
      *((void *)v157 + 2) = 0;
    }
    v157[24] = 1;
    std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(v157, (char *)theDict, (char *)theDict + a4, a4);
    caulk::concurrent::details::lf_read_sync_write_impl::end_mutate((VoiceProcessorV2 *)((char *)this + 16368));
    v151[v152] = 0;
    if (v153[24])
    {
      long long v159 = *(void **)v153;
      if (*(void *)v153)
      {
        *((void *)v153 + 1) = v159;
        operator delete(v159);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 4093);
    atomic_fetch_add((atomic_ullong *volatile)this + 2056, 1uLL);
    if (*v541)
    {
      if (*((void *)this + 1892))
      {
        buf[0].__r_.__value_.__r.__words[0] = 0;
        VoiceProcessorV2::PListCopyDictionaryForWrite(this, (__CFDictionary **)buf);
        vDSP_Length v160 = (const void *)buf[0].__r_.__value_.__r.__words[0];
        if (buf[0].__r_.__value_.__r.__words[0])
        {
          CFDataRef v161 = CFDataCreate(0, (const UInt8 *)theDict, a4);
          if (!v161)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            applesauce::CF::construct_error(exception);
          }
          applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)v552, v161);
          __p.__r_.__value_.__r.__words[0] = *(void *)v552;
          VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&cf, 70);
          WriteItemToDictionary((__CFDictionary **)buf, &cf, 4, 8uLL, (const char *)&__p);
          if (cf) {
            CFRelease(cf);
          }
          CFRelease(v160);
          buf[0].__r_.__value_.__r.__words[0] = 0;
          if (*(void *)v552) {
            CFRelease(*(CFTypeRef *)v552);
          }
        }
      }
    }
    return 0;
  }
  if (a2 == 32798)
  {
    uint64_t v4 = 0;
    unsigned int v10 = *((_DWORD *)this + 18);
    if (v10 > 0x34 || ((0x1FFFE33F3FFEF0uLL >> v10) & 1) == 0) {
      return v4;
    }
    if (a4 > 7)
    {
      int v11 = (CFDictionaryRef *)((char *)this + 2224);
      uint64_t v12 = (const void *)*((void *)this + 278);
      if (v12)
      {
        CFRelease(v12);
        *int v11 = 0;
      }
      CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDictionaryRef)theDict);
      *int v11 = Copy;
      if (Copy)
      {
        {
          *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = xmmword_1BB87BCD0;
          buf[0].__r_.__value_.__r.__words[2] = 64100;
          std::vector<std::tuple<int,int,int>>::vector[abi:ne180100](buf, 2uLL);
          __cxa_atexit((void (*)(void *))std::vector<std::tuple<int,int,int>>::~vector[abi:ne180100], &VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs, &dword_1BB0CE000);
        }
        int v15 = (int *)VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs;
        for (uint64_t i = qword_1E9F7FF10; v15 != (int *)i; v15 += 3)
        {
          AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 3 * *v15 + 1371, v15[1], v15[2], 0, 8uLL, v11, 1);
          unsigned int v16 = *v15;
          if (*v15 >= 0x3E) {
            std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
          }
          if (((*((void *)this + 1112) >> v16) & 1) != 0
            && ((0x17FFFFFFC7FFFFFFuLL >> v16) & 1) != 0
            && *((void *)this + (int)v16 + 438))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            vDSP_Length v17 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
            {
              size_t v18 = (*v17 ? *v17 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                int v19 = *v15;
                int Count = CFDictionaryGetCount(*v11);
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 820;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v19;
                LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = Count;
                _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: thermal budget on AU (%d); count = %u",
                  (uint8_t *)buf,
                  0x1Eu);
              }
            }
            int v21 = (int *)*((void *)this + 1578);
            if (v21 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v22 = VPLogScope(void)::scope;
              int v23 = *v15;
              int v24 = CFDictionaryGetCount(*v11);
              CALegacyLog::log(v21, 3, v22, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 820, "SetProperty", "setproperty: thermal budget on AU (%d); count = %u",
                v23,
                v24);
            }
            AudioUnitSetProperty(*((AudioUnit *)this + *v15 + 438), v15[1], v15[2], 0, v11, 8u);
          }
          else
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v25 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
            {
              size_t v26 = (*v25 ? *v25 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
              {
                int v27 = *v15;
                if (*v15 >= 0x3E) {
                  std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
                }
                unint64_t v28 = *((void *)this + 1112);
                uint64_t v29 = *((void *)this + v27 + 438);
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316162;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 826;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v27;
                LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = (v28 >> v27) & (0x17FFFFFFC7FFFFFFuLL >> v27) & 1;
                HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 1024;
                LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v29 != 0;
                _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: AU (%d) enabled = %d, null = %d", (uint8_t *)buf, 0x24u);
              }
            }
            size_t v30 = (int *)*((void *)this + 1578);
            if (v30 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              if (*v15 >= 0x3E) {
                std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
              }
              CALegacyLog::log(v30, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 826, "SetProperty", "setproperty: AU (%d) enabled = %d, null = %d", *v15, (*((void *)this + 1112) >> *v15) & (0x17FFFFFFC7FFFFFFuLL >> *v15) & 1, *((void *)this + *v15 + 438) != 0);
            }
          }
        }
        if (*v541) {
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32798);
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        unsigned int v72 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
        {
          int v73 = (*v72 ? *v72 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 833;
            _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> setproperty: thermal budget dict is empty", (uint8_t *)buf, 0x12u);
          }
        }
        int v74 = (int *)*((void *)this + 1578);
        if (v74 && (*v541 || v541[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v74, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 833, "SetProperty", "setproperty: thermal budget dict is empty");
        }
      }
      return 0;
    }
    uint64_t v4 = 561211770;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v4;
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 796;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(CFDictionaryRef)";
    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
    v530 = MEMORY[0x1E4F14500];
    goto LABEL_1521;
  }
  v548 = (char *)this + 2392;
  __int16 v40 = (VoiceProcessorV2 *)(*(uint64_t (**)(void))(*((void *)this + 299) + 16))();
  char v549 = (char)v40;
  atomic_fetch_add((atomic_uint *volatile)this + 620, 1u);
  for (; *((_DWORD *)this + 621); __int16 v40 = (VoiceProcessorV2 *)usleep(0x1F4u))
    ;
  uint64_t v42 = (int *)((char *)this + 16456);
  if (a2 > 1701864050)
  {
    if (a2 > 1953915763)
    {
      if (a2 > 1987209579)
      {
        if (a2 > 1987211118)
        {
          switch(a2)
          {
            case 1987211119:
              if (a4 >= 4)
              {
                uint64_t v4 = 0;
                *((_DWORD *)this + 294) = *theDict;
                goto LABEL_1604;
              }
              goto LABEL_1248;
            case 1987211365:
              if (a4 >= 4)
              {
                uint64_t v4 = 0;
                *((_DWORD *)this + 597) = *theDict;
                goto LABEL_1604;
              }
              goto LABEL_1248;
            case 1987211379:
              if (a4 >= 4)
              {
                uint64_t v4 = 0;
                *((_DWORD *)this + 596) = *theDict;
                goto LABEL_1604;
              }
              goto LABEL_1248;
          }
        }
        else
        {
          switch(a2)
          {
            case 1987209580:
              if (a4 >= 4)
              {
                uint64_t v4 = 0;
                *((_DWORD *)this + 287) = *theDict;
                goto LABEL_1604;
              }
              goto LABEL_1248;
            case 1987209583:
              if (a4 >= 4)
              {
                uint64_t v4 = 0;
                *((_DWORD *)this + 288) = *theDict;
                goto LABEL_1604;
              }
              goto LABEL_1248;
            case 1987211116:
              if (a4 >= 4)
              {
                uint64_t v4 = 0;
                *((_DWORD *)this + 292) = *theDict;
                goto LABEL_1604;
              }
              goto LABEL_1248;
          }
        }
      }
      else if (a2 > 1986881899)
      {
        switch(a2)
        {
          case 1986881900:
            if (a4 >= 4)
            {
              uint64_t v4 = 0;
              *((_DWORD *)this + 291) = *theDict;
              goto LABEL_1604;
            }
            goto LABEL_1248;
          case 1986881903:
            if (a4 >= 4)
            {
              uint64_t v4 = 0;
              *((_DWORD *)this + 293) = *theDict;
              goto LABEL_1604;
            }
            goto LABEL_1248;
          case 1987208053:
            if (a4 >= 4)
            {
              uint64_t v4 = 0;
              *((_DWORD *)this + 289) = *theDict;
              goto LABEL_1604;
            }
            goto LABEL_1248;
        }
      }
      else
      {
        switch(a2)
        {
          case 1953915764:
            if (a4 == 4)
            {
              float v397 = *(float *)theDict;
              if (*theDict != *((_DWORD *)this + 549))
              {
                uint64_t v398 = (unsigned int *)((char *)this + 2196);
                *((float *)this + 549) = v397;
                VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_vocoder_type_int", 1, (float *)this + 549, v41);
                if (!v541[280]
                  && (*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this) <= 5)
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  v399 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v399)
                  {
                    int v400 = v399;
                    if (os_log_type_enabled(v399, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1326;
                      _os_log_impl(&dword_1BB0CE000, v400, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_PrimaryCodecType)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  unint64_t v401 = (int *)*((void *)this + 1578);
                  if (v401 && (*v541 || v541[1]))
                  {
                    if (VPLogScope(void)::once != -1) {
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                    }
                    CALegacyLog::log(v401, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1326, "SetProperty", "Begin self-reinit (kVPProperty_PrimaryCodecType)");
                  }
                  if (*((unsigned char *)this + 477)) {
                    VoiceProcessorV2::InitializeDLP(this);
                  }
                  if (*((unsigned char *)this + 476)) {
                    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
                  }
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  unint64_t v402 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v402)
                  {
                    float v403 = v402;
                    if (os_log_type_enabled(v402, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1329;
                      _os_log_impl(&dword_1BB0CE000, v403, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_PrimaryCodecType)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  BOOL v404 = (int *)*((void *)this + 1578);
                  if (v404 && (*v541 || v541[1]))
                  {
                    if (VPLogScope(void)::once != -1) {
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                    }
                    CALegacyLog::log(v404, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1329, "SetProperty", "End self-reinit (kVPProperty_PrimaryCodecType)");
                  }
                }
                VoiceProcessorV2::ReportMetrics(this);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                BOOL v405 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v405)
                {
                  BOOL v406 = v405;
                  if (os_log_type_enabled(v405, OS_LOG_TYPE_DEFAULT))
                  {
                    CAX4CCString::CAX4CCString((CAX4CCString *)v552, *v398);
                    unsigned int v407 = *v398;
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1342;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v552;
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 1024;
                    *(_DWORD *)((char *)buf[1].__r_.__value_.__r.__words + 6) = v407;
                    _os_log_impl(&dword_1BB0CE000, v406, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: primary audio vocoder type = %s(%d) ", (uint8_t *)buf, 0x22u);
                  }
                }
                unint64_t v408 = (int *)*((void *)this + 1578);
                if (v408 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  uint64_t v409 = VPLogScope(void)::scope;
                  CAX4CCString::CAX4CCString((CAX4CCString *)buf, *v398);
                  CALegacyLog::log(v408, 3, v409, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1342, "SetProperty", "setproperty: primary audio vocoder type = %s(%d) ", (const char *)buf, *v398);
                }
                if (*v541) {
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1953915764);
                }
              }
              goto LABEL_1603;
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_1248;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1312;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v531 = MEMORY[0x1E4F14500];
            goto LABEL_1588;
          case 1969844082:
            goto LABEL_989;
          case 1986097261:
            if (a4 > 3)
            {
              float v68 = *(float *)theDict;
              *((_DWORD *)this + 4164) = *theDict;
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              unsigned int v69 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v69)
              {
                int v70 = v69;
                if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1529;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  *((float *)&buf[0].__r_.__value_.__r.__words[2] + 1) = v68;
                  _os_log_impl(&dword_1BB0CE000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: VirtualAudio plug-in mode = %u", (uint8_t *)buf, 0x18u);
                }
              }
              float v71 = (int *)*((void *)this + 1578);
              if (v71 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v71, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1529, "SetProperty", "setproperty: VirtualAudio plug-in mode = %u", LODWORD(v68));
              }
              goto LABEL_1603;
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_1248;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1527;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v531 = MEMORY[0x1E4F14500];
            goto LABEL_1588;
        }
      }
      goto LABEL_1249;
    }
    if (a2 > 1836266092)
    {
      if (a2 > 1936744802)
      {
        if (a2 != 1936744803)
        {
          if (a2 == 1936746595)
          {
            if (a4 == 8)
            {
              int v367 = *v42;
              char v368 = *((unsigned char *)this + 16460);
              if (*theDict == *v42 && *((unsigned char *)theDict + 4) == (v368 & 1)) {
                goto LABEL_1603;
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v369 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v369)
              {
                uint64_t v370 = v369;
                if (os_log_type_enabled(v369, OS_LOG_TYPE_DEFAULT))
                {
                  float v371 = *(float *)theDict;
                  if (*((unsigned char *)theDict + 4)) {
                    float v372 = "on";
                  }
                  else {
                    float v372 = "off";
                  }
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1053;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  *((float *)&buf[0].__r_.__value_.__r.__words[2] + 1) = v371;
                  LOWORD(buf[1].__r_.__value_.__l.__data_) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v372;
                  _os_log_impl(&dword_1BB0CE000, v370, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: spatial head tracking configuration with mode %u and head tracking %s", (uint8_t *)buf, 0x22u);
                }
              }
              float v373 = (int *)*((void *)this + 1578);
              if (v373 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v374 = "on";
                if (!*((unsigned char *)theDict + 4)) {
                  float v374 = "off";
                }
                CALegacyLog::log(v373, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1053, "SetProperty", "setproperty: spatial head tracking configuration with mode %u and head tracking %s", *theDict, v374);
              }
              *((void *)this + 2057) = *(void *)theDict;
              if (*v541) {
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1936746595);
              }
              float v375 = *(float *)theDict;
              int v376 = *theDict == 0;
              int v377 = v367 == 0;
              int v378 = *((unsigned __int8 *)theDict + 4);
              BOOL v379 = *((unsigned char *)theDict + 4) == 0;
              int v380 = v368 & 1;
              if (v377 == v376)
              {
                if (v378 == v380) {
                  goto LABEL_1603;
                }
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                v480 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v480)
                {
                  v483 = v480;
                  if (os_log_type_enabled(v480, OS_LOG_TYPE_DEFAULT))
                  {
                    v484 = "On";
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1073;
                    if (v380) {
                      v485 = "On";
                    }
                    else {
                      v485 = "Off";
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v485;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    if (!v378) {
                      v484 = "Off";
                    }
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v484;
                    _os_log_impl(&dword_1BB0CE000, v483, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s])", (uint8_t *)buf, 0x26u);
                  }
                }
                v486 = (int *)*((void *)this + 1578);
                if (v486 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  v487 = "On";
                  if (v380) {
                    v488 = "On";
                  }
                  else {
                    v488 = "Off";
                  }
                  if (!v378) {
                    v487 = "Off";
                  }
                  CALegacyLog::log(v486, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1073, "SetProperty", "Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s])", v488, v487);
                }
                VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v481, v482);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                v489 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v489)
                {
                  v490 = v489;
                  if (os_log_type_enabled(v489, OS_LOG_TYPE_DEFAULT))
                  {
                    v491 = "On";
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1075;
                    if (v380) {
                      v492 = "On";
                    }
                    else {
                      v492 = "Off";
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v492;
                    if (!v378) {
                      v491 = "Off";
                    }
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v491;
                    _os_log_impl(&dword_1BB0CE000, v490, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s ]", (uint8_t *)buf, 0x26u);
                  }
                }
                v394 = (int *)*((void *)this + 1578);
                if (!v394 || !*v541 && !v541[1]) {
                  goto LABEL_1603;
                }
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v396 = 1075;
                int v377 = v380 == 0;
                int v376 = v379;
                float v395 = "End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [Headtracking %s => %s ]";
              }
              else
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v381 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v381)
                {
                  char v384 = v381;
                  if (os_log_type_enabled(v381, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v385 = "On";
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1067;
                    if (v367) {
                      uint64_t v386 = "On";
                    }
                    else {
                      uint64_t v386 = "Off";
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v386;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    if (v375 == 0.0) {
                      uint64_t v385 = "Off";
                    }
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v385;
                    _os_log_impl(&dword_1BB0CE000, v384, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s])", (uint8_t *)buf, 0x26u);
                  }
                }
                float v387 = (int *)*((void *)this + 1578);
                if (v387 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  uint64_t v388 = "On";
                  if (v367) {
                    float v389 = "On";
                  }
                  else {
                    float v389 = "Off";
                  }
                  if (v375 == 0.0) {
                    uint64_t v388 = "Off";
                  }
                  CALegacyLog::log(v387, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1067, "SetProperty", "Begin self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s])", v389, v388);
                }
                VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v382, v383);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v390 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v390)
                {
                  float v391 = v390;
                  if (os_log_type_enabled(v390, OS_LOG_TYPE_DEFAULT))
                  {
                    float v392 = "On";
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1069;
                    if (v367) {
                      float v393 = "On";
                    }
                    else {
                      float v393 = "Off";
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v393;
                    if (v375 == 0.0) {
                      float v392 = "Off";
                    }
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v392;
                    _os_log_impl(&dword_1BB0CE000, v391, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s ]", (uint8_t *)buf, 0x26u);
                  }
                }
                v394 = (int *)*((void *)this + 1578);
                if (!v394 || !*v541 && !v541[1]) {
                  goto LABEL_1603;
                }
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v395 = "End self-reinit (kVPProperty_SpatialHeadTrackingConfiguration [SpatialMode %s => %s ]";
                uint64_t v396 = 1069;
              }
              v493 = "On";
              if (v377) {
                v494 = "Off";
              }
              else {
                v494 = "On";
              }
              if (v376) {
                v493 = "Off";
              }
              CALegacyLog::log(v394, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", v396, "SetProperty", v395, v494, v493);
              goto LABEL_1603;
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_1248;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1047;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(SpatialHeadTrackingConfiguration)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v531 = MEMORY[0x1E4F14500];
            goto LABEL_1588;
          }
          if (a2 == 1953915762)
          {
            if (a4 == 8)
            {
              double v119 = *(double *)theDict;
              if (vabdd_f64(*(double *)theDict, *((float *)this + 550)) > 0.000000001)
              {
                uint64_t v120 = (float *)((char *)this + 2200);
                float v121 = v119;
                *((float *)this + 550) = v121;
                VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_vocoder_sample_rate", 2, (float *)this + 550, v41);
                uint64_t v122 = VPLogScope(void)::once;
                if (!v541[280])
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  UInt64 v123 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v123)
                  {
                    int64_t v124 = v123;
                    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1358;
                      _os_log_impl(&dword_1BB0CE000, v124, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_PrimaryCodecSampleRate)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  int64_t v125 = (int *)*((void *)this + 1578);
                  if (v125 && (*v541 || v541[1]))
                  {
                    if (VPLogScope(void)::once != -1) {
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                    }
                    CALegacyLog::log(v125, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1358, "SetProperty", "Begin self-reinit (kVPProperty_PrimaryCodecSampleRate)");
                  }
                  if (*((unsigned char *)this + 477)) {
                    VoiceProcessorV2::InitializeDLP(this);
                  }
                  int v126 = *((_DWORD *)this + 127);
                  double v127 = *((double *)this + 113);
                  if (*((unsigned char *)this + 476)) {
                    (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
                  }
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  unsigned int v128 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                  if (v128)
                  {
                    float v129 = v128;
                    if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1363;
                      _os_log_impl(&dword_1BB0CE000, v129, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_PrimaryCodecSampleRate)", (uint8_t *)buf, 0x12u);
                    }
                  }
                  float v130 = (int *)*((void *)this + 1578);
                  if (v130 && (*v541 || v541[1]))
                  {
                    if (VPLogScope(void)::once != -1) {
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                    }
                    CALegacyLog::log(v130, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1363, "SetProperty", "End self-reinit (kVPProperty_PrimaryCodecSampleRate)");
                  }
                  LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)this + 127);
                  double v131 = *((double *)this + 113);
                  *(double *)v552 = v131;
                  if (v126 != LODWORD(__p.__r_.__value_.__l.__data_) || v127 != v131)
                  {
                    if (VPLogScope(void)::once != -1) {
                      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                    }
                    float v132 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                    if (v132)
                    {
                      float v133 = v132;
                      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
                      {
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316418;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1369;
                        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v126;
                        LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                        *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = __p.__r_.__value_.__l.__data_;
                        HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 2048;
                        *(double *)&buf[1].__r_.__value_.__l.__size_ = v127;
                        LOWORD(buf[1].__r_.__value_.__r.__words[2]) = 2048;
                        *(double *)((char *)&buf[1].__r_.__value_.__r.__words[2] + 2) = v131;
                        _os_log_impl(&dword_1BB0CE000, v133, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: re-initializing speech enhancer; old ul blk sz = %u; new ul blk s"
                          "ize = %u; old ul sr = %lf; new ul sr = %lf",
                          (uint8_t *)buf,
                          0x32u);
                      }
                    }
                    uint64_t v134 = (int *)*((void *)this + 1578);
                    if (v134 && (*v541 || v541[1]))
                    {
                      if (VPLogScope(void)::once != -1) {
                        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                      }
                      CALegacyLog::log(v134, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1369, "SetProperty", "setproperty: re-initializing speech enhancer; old ul blk sz = %u; new ul blk std::string::size_type size = %u; old ul s"
                        "r = %lf; new ul sr = %lf",
                        v126,
                        LODWORD(__p.__r_.__value_.__l.__data_),
                        v127,
                        v131);
                    }
                    if ((*((unsigned char *)this + 8896) & 0x80) != 0)
                    {
                      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1392, 0x3EBu, 0, 0, 8uLL, v552, 1);
                      AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1392, 0x3ECu, 0, 0, 4uLL, &__p, 1);
                      VoiceProcessorV2::InstantiateAndConfigureEffectAU(this, 7u, 0);
                    }
                  }
                  uint64_t v122 = VPLogScope(void)::once;
                }
                if (v122 != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                vDSP_Length v135 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v135)
                {
                  int v136 = v135;
                  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                  {
                    double v137 = *v120;
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1387;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v137;
                    _os_log_impl(&dword_1BB0CE000, v136, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: primary vocoder sample rate = %f ", (uint8_t *)buf, 0x1Cu);
                  }
                }
                float v138 = (int *)*((void *)this + 1578);
                if (v138 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v138, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1387, "SetProperty", "setproperty: primary vocoder sample rate = %f ", *v120);
                }
                if (*v541) {
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1953915762);
                }
              }
              goto LABEL_1603;
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_1248;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1350;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(Float64)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v531 = MEMORY[0x1E4F14500];
            goto LABEL_1588;
          }
          goto LABEL_1249;
        }
        if (a4 == 4)
        {
          unsigned int v429 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
          if (v429 >= 6)
          {
            float v430 = *(float *)theDict;
            int v431 = *theDict != 0;
            if (*((unsigned __int8 *)this + 2245) != v431)
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v432 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v432)
              {
                uint64_t v433 = v432;
                if (os_log_type_enabled(v432, OS_LOG_TYPE_DEFAULT))
                {
                  v434 = "true";
                  int v435 = *((unsigned __int8 *)this + 2245);
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1029;
                  if (v435) {
                    v436 = "true";
                  }
                  else {
                    v436 = "false";
                  }
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                  if (v430 == 0.0) {
                    v434 = "false";
                  }
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v436;
                  WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                  *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v434;
                  _os_log_impl(&dword_1BB0CE000, v433, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of spatial chat = [%s], new state of spatial chat = [%s]", (uint8_t *)buf, 0x26u);
                }
              }
              v437 = (int *)*((void *)this + 1578);
              if (v437 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                v438 = "true";
                if (*((unsigned char *)this + 2245)) {
                  uint64_t v439 = "true";
                }
                else {
                  uint64_t v439 = "false";
                }
                if (v430 == 0.0) {
                  v438 = "false";
                }
                CALegacyLog::log(v437, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1029, "SetProperty", "setproperty: current state of spatial chat = [%s], new state of spatial chat = [%s]", v439, v438);
              }
              *((unsigned char *)this + 2245) = v431;
              if (*v541) {
                VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1936744803);
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              long long v440 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v440)
              {
                vDSP_Length v443 = v440;
                if (os_log_type_enabled(v440, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1032;
                  _os_log_impl(&dword_1BB0CE000, v443, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_EnableSpatialChat)", (uint8_t *)buf, 0x12u);
                }
              }
              v444 = (int *)*((void *)this + 1578);
              if (v444 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v444, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1032, "SetProperty", "Begin self-reinit (kVPProperty_EnableSpatialChat)");
              }
              VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v441, v442);
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              v445 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v445)
              {
                v446 = v445;
                if (os_log_type_enabled(v445, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1034;
                  _os_log_impl(&dword_1BB0CE000, v446, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_EnableSpatialChat)", (uint8_t *)buf, 0x12u);
                }
              }
              vDSP_Length v447 = (int *)*((void *)this + 1578);
              if (v447 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v447, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1034, "SetProperty", "End self-reinit (kVPProperty_EnableSpatialChat)");
              }
            }
            goto LABEL_1603;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v471 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
          if (v471)
          {
            v472 = v471;
            if (os_log_type_enabled(v471, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1039;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v429;
              _os_log_impl(&dword_1BB0CE000, v472, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> setproperty: spatial chat for vp version = %u is not supported", (uint8_t *)buf, 0x18u);
            }
          }
          uint64_t v4 = 561406316;
          v473 = (int *)*((void *)this + 1578);
          if (v473 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v473, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1039, "SetProperty", "setproperty: spatial chat for vp version = %u is not supported", v429);
          }
          goto LABEL_1604;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1021;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
LABEL_1588:
        _os_log_impl(&dword_1BB0CE000, v531, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
        goto LABEL_1248;
      }
      switch(a2)
      {
        case 1836266093:
          if (a4 == 4)
          {
            int v410 = *theDict == 1;
            if (v541[399] != v410)
            {
              v541[399] = v410;
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              v411 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v411)
              {
                unint64_t v414 = v411;
                if (os_log_type_enabled(v411, OS_LOG_TYPE_DEFAULT))
                {
                  float v415 = "True";
                  int v416 = v541[399];
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  if (!v416) {
                    float v415 = "False";
                  }
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1926;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v415;
                  _os_log_impl(&dword_1BB0CE000, v414, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_MixStereoToMono [%s])", (uint8_t *)buf, 0x1Cu);
                }
              }
              unsigned int v417 = (int *)*((void *)this + 1578);
              if (v417 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                if (v541[399]) {
                  float v418 = "True";
                }
                else {
                  float v418 = "False";
                }
                CALegacyLog::log(v417, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1926, "SetProperty", "Begin self-reinit (kVPProperty_MixStereoToMono [%s])", v418);
              }
              VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v412, v413);
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v419 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v419)
              {
                unsigned int v420 = v419;
                if (os_log_type_enabled(v419, OS_LOG_TYPE_DEFAULT))
                {
                  float v421 = "True";
                  int v422 = v541[399];
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  if (!v422) {
                    float v421 = "False";
                  }
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1928;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v421;
                  _os_log_impl(&dword_1BB0CE000, v420, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_MixStereoToMono [%s]", (uint8_t *)buf, 0x1Cu);
                }
              }
              int v423 = (int *)*((void *)this + 1578);
              if (v423 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                if (v541[399]) {
                  uint64_t v424 = "True";
                }
                else {
                  uint64_t v424 = "False";
                }
                CALegacyLog::log(v423, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1928, "SetProperty", "End self-reinit (kVPProperty_MixStereoToMono [%s]", v424);
              }
            }
            goto LABEL_1603;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1248;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1922;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
          v531 = MEMORY[0x1E4F14500];
          goto LABEL_1588;
        case 1836278117:
          if (!_os_feature_enabled_impl()) {
            goto LABEL_989;
          }
          if (a4 != 8)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1853;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(AUVoiceIOMutedSpeechActivityEventListener*)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
              v531 = MEMORY[0x1E4F14500];
              goto LABEL_1588;
            }
            goto LABEL_1248;
          }
          VoiceProcessorV2::CreateMessenger(this);
          float v342 = (caulk::concurrent::messenger *)*((void *)this + 2035);
          if (v342) {
            caulk::concurrent::messenger::drain(v342);
          }
          _ZN2vp5BlockIU13block_pointerFv28AUVoiceIOSpeechActivityEventEECI1NS0_IS2_EEES3_((void **)&buf[0].__r_.__value_.__l.__data_, *(void **)theDict);
          vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::operator=((const void **)this + 2062, (const void **)&buf[0].__r_.__value_.__l.__data_);
          vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block((const void **)&buf[0].__r_.__value_.__l.__data_);
          if (!*((void *)this + 2062)) {
            goto LABEL_1603;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v343 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v343)
          {
            uint64_t v344 = v343;
            if (os_log_type_enabled(v343, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1858;
              _os_log_impl(&dword_1BB0CE000, v344, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> registered muted speech activity event listener", (uint8_t *)buf, 0x12u);
            }
          }
          int v345 = (int *)*((void *)this + 1578);
          if (!v345 || !*v541 && !v541[1]) {
            goto LABEL_1603;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v346 = "registered muted speech activity event listener";
          uint64_t v347 = 1858;
          goto LABEL_1299;
        case 1868653667:
          if (!_os_feature_enabled_impl()) {
            goto LABEL_989;
          }
          unint64_t v75 = this;
          if (*((unsigned char *)this + 2244)) {
            goto LABEL_989;
          }
          if (a4 == 8)
          {
            unsigned int v76 = theDict[1];
            uint64_t v77 = v541;
            if (v76 <= 0x1E && ((1 << v76) & 0x40100401) != 0)
            {
              int v78 = *(unsigned __int8 *)theDict;
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              int v79 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v79)
              {
                uint64_t v80 = v79;
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                {
                  int v81 = *((_DWORD *)this + 4157);
                  int v82 = *((unsigned __int8 *)this + 16624);
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316418;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1875;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v81;
                  LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
                  *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = v76;
                  HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 1024;
                  LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v82;
                  WORD2(buf[1].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 6) = v78;
                  _os_log_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current mClientSetDuckingLevel = %u, new value = %u,  current mClientSetEnableDynamicDucking = %d, new value = %d", (uint8_t *)buf, 0x2Au);
                }
              }
              uint64_t v83 = (int *)*((void *)this + 1578);
              if (v83 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v83, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1875, "SetProperty", "setproperty: current mClientSetDuckingLevel = %u, new value = %u,  current mClientSetEnableDynamicDucking = %d, new value = %d", *((_DWORD *)this + 4157), v76, *((unsigned __int8 *)this + 16624), v78);
              }
              if (*((_DWORD *)this + 4157) != v76)
              {
                *((_DWORD *)this + 4157) = v76;
                if ((*((unsigned char *)this + 8897) & 0x80) != 0)
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = v76;
                  AUPropAndParamHelper::AddItemToAUPropsList((AUPropertyItem **)this + 1416, 0x6E65706Cu, 0, 0, 4uLL, buf, 1);
                  int v84 = (OpaqueAudioComponentInstance *)*((void *)this + 453);
                  if (v84) {
                    AudioUnitSetProperty(v84, 0x6E65706Cu, 0, 0, buf, 4u);
                  }
                }
              }
              if (*((unsigned __int8 *)this + 16624) != v78)
              {
                *((unsigned char *)this + 16624) = v78 != 0;
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                int v85 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v85)
                {
                  uint64_t v88 = v85;
                  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1897;
                    _os_log_impl(&dword_1BB0CE000, v88, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_OtherAudioDuckingConfiguration)", (uint8_t *)buf, 0x12u);
                  }
                }
                uint64_t v89 = (int *)*((void *)this + 1578);
                if (v89 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  unint64_t v75 = this;
                  CALegacyLog::log(v89, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1897, "SetProperty", "Begin self-reinit (kVPProperty_OtherAudioDuckingConfiguration)");
                  uint64_t v77 = v541;
                }
                VoiceProcessorV2::ResetTimestampsAndInitializeVP(v75, 0, v86, v87);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v90 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v90)
                {
                  BOOL v91 = v90;
                  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1899;
                    _os_log_impl(&dword_1BB0CE000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_OtherAudioDuckingConfiguration)", (uint8_t *)buf, 0x12u);
                  }
                }
                uint64_t v92 = (int *)*((void *)v75 + 1578);
                if (v92 && (*v77 || v77[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  unint64_t v75 = this;
                  CALegacyLog::log(v92, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1899, "SetProperty", "End self-reinit (kVPProperty_OtherAudioDuckingConfiguration)");
                  uint64_t v77 = v541;
                }
              }
              if (*v77) {
                VoiceProcessorV2::PListWriteSetPropertyParameters(v75, 1868653667);
              }
              goto LABEL_1603;
            }
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1872;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelDefault || requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelMin || requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelMid || requestedDuckingConfig.mDuckingLevel == kAUVoiceIOOtherAudioDuckingLevelMax";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
              v522 = MEMORY[0x1E4F14500];
LABEL_1503:
              _os_log_impl(&dword_1BB0CE000, v522, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
            }
LABEL_1504:
            uint64_t v4 = 561406316;
            v523 = (atomic_uint *)((char *)v75 + 2480);
            goto LABEL_1605;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1866;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(AUVoiceIOOtherAudioDuckingConfiguration)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v531 = MEMORY[0x1E4F14500];
            goto LABEL_1588;
          }
          goto LABEL_1248;
      }
    }
    else
    {
      if (a2 <= 1768514914)
      {
        if (a2 == 1701864051)
        {
          if (a4 >= 4)
          {
            uint64_t v4 = 0;
            *((_DWORD *)this + 4068) = *theDict;
            goto LABEL_1604;
          }
          goto LABEL_1248;
        }
        if (a2 == 1701868402)
        {
          if (a4 >= 4)
          {
            uint64_t v4 = 0;
            *((_DWORD *)this + 4069) = *theDict;
            goto LABEL_1604;
          }
          goto LABEL_1248;
        }
        if (a2 != 1718384242) {
          goto LABEL_1249;
        }
        if (a4 > 3)
        {
          uint64_t v58 = *theDict;
          uint64_t v4 = (*(uint64_t (**)(VoiceProcessorV2 *, uint64_t))(*(void *)this + 560))(this, v58);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v59 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v59)
          {
            float v60 = v59;
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1508;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v58;
              _os_log_impl(&dword_1BB0CE000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: preferred chat flavor = %u", (uint8_t *)buf, 0x18u);
            }
          }
          float v61 = (int *)*((void *)this + 1578);
          if (v61 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v61, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1508, "SetProperty", "setproperty: preferred chat flavor = %u", v58);
          }
          goto LABEL_1604;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1505;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      }
      switch(a2)
      {
        case 1768514915:
          if (a4 > 3)
          {
            float v425 = *(float *)theDict;
            VoiceProcessorV2::SetEmergencyCallStatus(this, *theDict != 0);
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            v426 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v426)
            {
              v427 = v426;
              if (os_log_type_enabled(v426, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1519;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = LODWORD(v425) != 0;
                _os_log_impl(&dword_1BB0CE000, v427, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: is in emergency call = %u", (uint8_t *)buf, 0x18u);
              }
            }
            v428 = (int *)*((void *)this + 1578);
            if (v428 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v428, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1519, "SetProperty", "setproperty: is in emergency call = %u", LODWORD(v425) != 0);
            }
            goto LABEL_1603;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1248;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1515;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
          v531 = MEMORY[0x1E4F14500];
          goto LABEL_1588;
        case 1835361379:
          if (a4 == 4)
          {
            unsigned int v348 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
            if (v348 < 3)
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v468 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
              if (v468)
              {
                v469 = v468;
                if (os_log_type_enabled(v468, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1015;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v348;
                  _os_log_impl(&dword_1BB0CE000, v469, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> setproperty: media chat for vp version = %u is not supported", (uint8_t *)buf, 0x18u);
                }
              }
              uint64_t v470 = (int *)*((void *)this + 1578);
              if (v470 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v470, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1015, "SetProperty", "setproperty: media chat for vp version = %u is not supported", v348);
              }
            }
            else if (_os_feature_enabled_impl())
            {
              float v349 = *(float *)theDict;
              int v350 = *theDict != 0;
              if (*((unsigned __int8 *)this + 2244) != v350)
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v351 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v351)
                {
                  float v352 = v351;
                  if (os_log_type_enabled(v351, OS_LOG_TYPE_DEFAULT))
                  {
                    v353 = "true";
                    int v354 = *((unsigned __int8 *)this + 2244);
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 998;
                    if (v354) {
                      float v355 = "true";
                    }
                    else {
                      float v355 = "false";
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    if (v349 == 0.0) {
                      v353 = "false";
                    }
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v355;
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v353;
                    _os_log_impl(&dword_1BB0CE000, v352, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of media chat = [%s], new state of media chat = [%s]", (uint8_t *)buf, 0x26u);
                  }
                }
                uint64_t v356 = (int *)*((void *)this + 1578);
                if (v356 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  v357 = "true";
                  if (*((unsigned char *)this + 2244)) {
                    AudioUnitParameterValue v358 = "true";
                  }
                  else {
                    AudioUnitParameterValue v358 = "false";
                  }
                  if (v349 == 0.0) {
                    v357 = "false";
                  }
                  CALegacyLog::log(v356, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 998, "SetProperty", "setproperty: current state of media chat = [%s], new state of media chat = [%s]", v358, v357);
                }
                *((unsigned char *)this + 2244) = v350;
                if (*v541) {
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1835361379);
                }
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                char v359 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v359)
                {
                  float v362 = v359;
                  if (os_log_type_enabled(v359, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1001;
                    _os_log_impl(&dword_1BB0CE000, v362, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_EnableMediaChat)", (uint8_t *)buf, 0x12u);
                  }
                }
                float v363 = (int *)*((void *)this + 1578);
                if (v363 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v363, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1001, "SetProperty", "Begin self-reinit (kVPProperty_EnableMediaChat)");
                }
                VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v360, v361);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v364 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v364)
                {
                  float v365 = v364;
                  if (os_log_type_enabled(v364, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1003;
                    _os_log_impl(&dword_1BB0CE000, v365, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_EnableMediaChat)", (uint8_t *)buf, 0x12u);
                  }
                }
                float v366 = (int *)*((void *)this + 1578);
                if (v366 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v366, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1003, "SetProperty", "End self-reinit (kVPProperty_EnableMediaChat)");
                }
              }
            }
            else
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              v508 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
              if (v508)
              {
                v509 = v508;
                if (os_log_type_enabled(v508, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1009;
                  _os_log_impl(&dword_1BB0CE000, v509, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> setproperty: feature was not enabled", (uint8_t *)buf, 0x12u);
                }
              }
              v510 = (int *)*((void *)this + 1578);
              if (v510 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v510, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1009, "SetProperty", "setproperty: feature was not enabled");
              }
            }
            goto LABEL_1603;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1248;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 982;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
          v531 = MEMORY[0x1E4F14500];
          goto LABEL_1588;
        case 1836082532:
          if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(v40))
          {
            if (a4 == 4)
            {
              float v93 = *(float *)theDict;
              int v94 = *theDict != 0;
              if (*((unsigned __int8 *)this + 2246) != v94)
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v95 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v95)
                {
                  float v96 = v95;
                  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                  {
                    float v97 = "true";
                    int v98 = *((unsigned __int8 *)this + 2246);
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1089;
                    if (v98) {
                      long long v99 = "true";
                    }
                    else {
                      long long v99 = "false";
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    if (v93 == 0.0) {
                      float v97 = "false";
                    }
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v99;
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v97;
                    _os_log_impl(&dword_1BB0CE000, v96, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of media playback on external device = [%s], new state of media playback on external device = [%s]", (uint8_t *)buf, 0x26u);
                  }
                }
                long long v100 = (int *)*((void *)this + 1578);
                if (v100 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  float v101 = "true";
                  if (*((unsigned char *)this + 2246)) {
                    float v102 = "true";
                  }
                  else {
                    float v102 = "false";
                  }
                  if (v93 == 0.0) {
                    float v101 = "false";
                  }
                  CALegacyLog::log(v100, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1089, "SetProperty", "setproperty: current state of media playback on external device = [%s], new state of media playback on external device = [%s]", v102, v101);
                }
                *((unsigned char *)this + 2246) = v94;
                if (*v541) {
                  VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1836082532);
                }
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                uint64_t v103 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v103)
                {
                  uint64_t v104 = v103;
                  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                  {
                    unsigned int ChatFlavor = VoiceProcessorV2::GetChatFlavor(this);
                    std::to_string((std::string *)v552, ChatFlavor);
                    int v106 = v552[23] >= 0 ? v552 : *(unsigned char **)v552;
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1093;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v106;
                    _os_log_impl(&dword_1BB0CE000, v104, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: chat flavor value changed to = [%s]", (uint8_t *)buf, 0x1Cu);
                    if ((v552[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v552);
                    }
                  }
                }
                long long v107 = (int *)*((void *)this + 1578);
                if (v107 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  uint64_t v108 = VPLogScope(void)::scope;
                  unsigned int v109 = VoiceProcessorV2::GetChatFlavor(this);
                  std::to_string(buf, v109);
                  if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    vDSP_Length v110 = buf;
                  }
                  else {
                    vDSP_Length v110 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                  }
                  CALegacyLog::log(v107, 3, v108, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1093, "SetProperty", "setproperty: chat flavor value changed to = [%s]", (const char *)v110);
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                }
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                int64_t v111 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v111)
                {
                  BOOL v114 = v111;
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1094;
                    _os_log_impl(&dword_1BB0CE000, v114, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)", (uint8_t *)buf, 0x12u);
                  }
                }
                float v115 = (int *)*((void *)this + 1578);
                if (v115 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v115, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1094, "SetProperty", "Begin self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)");
                }
                VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 0, v112, v113);
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v116 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v116)
                {
                  long long v117 = v116;
                  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1096;
                    _os_log_impl(&dword_1BB0CE000, v117, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)", (uint8_t *)buf, 0x12u);
                  }
                }
                uint64_t v118 = (int *)*((void *)this + 1578);
                if (v118 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v118, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1096, "SetProperty", "End self-reinit (kVPProperty_MediaPlaybackOnExternalDevice)");
                }
              }
              goto LABEL_1603;
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_1248;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1085;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
            v531 = MEMORY[0x1E4F14500];
            goto LABEL_1588;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v463 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v463)
          {
            int v464 = v463;
            if (os_log_type_enabled(v463, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1101;
              _os_log_impl(&dword_1BB0CE000, v464, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Voice isolation not supported, ignoring incoming property", (uint8_t *)buf, 0x12u);
            }
          }
          int v345 = (int *)*((void *)this + 1578);
          if (!v345 || !*v541 && !v541[1]) {
            goto LABEL_1603;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v346 = "Voice isolation not supported, ignoring incoming property";
          uint64_t v347 = 1101;
LABEL_1299:
          int v465 = 3;
          goto LABEL_1311;
      }
    }
LABEL_1249:
    uint64_t v4 = 2003332927;
    goto LABEL_1604;
  }
  if (a2 <= 1634300530)
  {
    uint64_t v4 = 0;
    switch(a2)
    {
      case 32768:
        uint64_t v4 = 561211770;
        if (a4 < 4) {
          goto LABEL_1604;
        }
        float v43 = *(float *)theDict;
        if (*theDict > 1) {
          goto LABEL_1604;
        }
        uint64_t v44 = (unsigned __int8 *)this + 472;
        *((unsigned char *)this + 472) = LODWORD(v43) != 0;
        uint64_t v45 = VPLogScope(void)::once;
        if (*((_DWORD *)this + 4150))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v46 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v46)
          {
            float v47 = v46;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 889;
              _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Forcing bypass to false due to chat flavor", (uint8_t *)buf, 0x12u);
            }
          }
          vDSP_Length v48 = (int *)*((void *)this + 1578);
          if (v48 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v48, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 889, "SetProperty", "Forcing bypass to false due to chat flavor");
          }
          unsigned __int8 *v44 = 0;
          uint64_t v45 = VPLogScope(void)::once;
        }
        if (v45 != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v49 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
        if (v49)
        {
          uint64_t v51 = v49;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            int v52 = *v44;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 892;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v52;
            _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: bypass =%d", (uint8_t *)buf, 0x18u);
          }
        }
        vDSP_Length v53 = (int *)*((void *)this + 1578);
        if (v53 && (*v541 || v541[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v53, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 892, "SetProperty", "setproperty: bypass =%d", *v44);
        }
        VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_bypass", 0, (float *)v44, v50);
        float v54 = (void (*)(void, void, void, void, void, float))*((void *)this + 1563);
        if (*((unsigned char *)this + 472))
        {
          if (!v54) {
            goto LABEL_1493;
          }
          v54(*((void *)this + 1562), 0, 0, 0, 0, *((float *)this + 1133));
          uint64_t v55 = 4532;
        }
        else
        {
          if (!v54) {
            goto LABEL_1493;
          }
          v54(*((void *)this + 1562), 0, 0, 0, 0, *((float *)this + 1131));
          uint64_t v55 = 4528;
        }
        (*((void (**)(void, uint64_t, void, void, void, float))this + 1563))(*((void *)this + 1562), 8, 0, 0, 0, *(float *)((char *)this + v55));
LABEL_1493:
        if (VoiceProcessorV2::ShouldInteractWithControlCenter(this)) {
          (*(void (**)(VoiceProcessorV2 *, uint64_t))(*(void *)this + 592))(this, 1);
        }
        VoiceProcessorV2::ReportMetrics(this);
        goto LABEL_1603;
      case 32769:
        uint64_t v4 = 561211770;
        if (a4 < 4) {
          goto LABEL_1604;
        }
        float v266 = *(float *)theDict;
        if (*theDict > 1) {
          goto LABEL_1604;
        }
        v552[0] = LODWORD(v266) == 1;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        float v267 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
        if (v267)
        {
          BOOL v269 = v267;
          if (os_log_type_enabled(v267, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v270 = *((_DWORD *)this + 1168);
            int v271 = *((_DWORD *)this + 571);
            std::string::size_type v272 = *((void *)this + 413);
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316418;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 961;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = LODWORD(v266) == 1;
            LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
            *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = (v270 >> 2) & 1;
            HIWORD(buf[1].__r_.__value_.__r.__words[0]) = 1024;
            LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v271;
            WORD2(buf[1].__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 6) = v272;
            _os_log_impl(&dword_1BB0CE000, v269, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> setproperty: enableagc=%d (currently: enableagcdefault=%d, clientsetenableagc=%d, agc=%p).", (uint8_t *)buf, 0x2Eu);
          }
        }
        float v273 = (int *)*((void *)this + 1578);
        if (v273 && (*v541 || v541[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v273, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 961, "SetProperty", "setproperty: enableagc=%d (currently: enableagcdefault=%d, clientsetenableagc=%d, agc=%p).", LODWORD(v266) == 1, (*((_DWORD *)this + 1168) >> 2) & 1, *((_DWORD *)this + 571), *((const void **)this + 413));
        }
        *((_DWORD *)this + 571) = *theDict;
        VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_enable_agc", 0, (float *)v552, v268);
        if (*v541) {
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32769);
        }
        uint64_t v274 = *((void *)this + 584);
        if (v552[0])
        {
          *((void *)this + 584) = v274 | 4;
          VoiceProcessorV2::InstantiateAndConfigureEffectAU(this, 0x42u, 1);
        }
        else
        {
          *((void *)this + 584) = v274 & 0xFFFFFFFFFFFFFFFBLL;
          VoiceProcessorV2::DisposeAU(this, 1635083896, 1634165554, (OpaqueAudioComponentInstance **)this + 413, 1);
        }
        goto LABEL_1603;
      case 32772:
        uint64_t v4 = 561211770;
        if (a4 < 4 || *theDict > 1) {
          goto LABEL_1604;
        }
        *((unsigned char *)this + 2080) = *theDict != 0;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v245 = (unsigned __int8 *)this + 2080;
        float v246 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
        if (v246)
        {
          int v248 = v246;
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
          {
            int v249 = *v245;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 922;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v249;
            _os_log_impl(&dword_1BB0CE000, v248, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: mute uplink output =%d", (uint8_t *)buf, 0x18u);
          }
        }
        float v250 = (int *)*((void *)this + 1578);
        if (v250 && (*v541 || v541[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v250, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 922, "SetProperty", "setproperty: mute uplink output =%d", *v245);
        }
        VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_mute_output", 0, (float *)this + 520, v247);
        if (*v541) {
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32772);
        }
        AudioIssueDetectorClientSetUplinkMute(*v245);
        if (*((void *)this + 2062))
        {
          applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v552, "Muted");
          if (*v245) {
            float v251 = (void *)MEMORY[0x1E4F1CFD0];
          }
          else {
            float v251 = (void *)MEMORY[0x1E4F1CFC8];
          }
          *(void *)&v552[8] = *v251;
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v552;
          buf[0].__r_.__value_.__l.__size_ = 1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)applesauce::CF::details::make_CFDictionaryRef((uint64_t)buf);
          applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v552);
          localPLLogRegisteredEvent((uint64_t)__p.__r_.__value_.__l.__data_);
          applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_1603;
      case 32773:
        if (a4 != 4)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1248;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1108;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
          v531 = MEMORY[0x1E4F14500];
          goto LABEL_1588;
        }
        unint64_t v75 = this;
        if (*theDict < 2)
        {
          int v252 = *theDict != 0;
          if (*((unsigned __int8 *)this + 2083) != v252)
          {
            unsigned int v253 = (char *)this + 2083;
            *((unsigned char *)this + 2083) = v252;
            VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_disable_vp", 0, (float *)((char *)this + 2083), v41);
            if (!v541[280])
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v254 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v254)
              {
                uint64_t v255 = v254;
                if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1117;
                  _os_log_impl(&dword_1BB0CE000, v255, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPParameter_DisableVP)", (uint8_t *)buf, 0x12u);
                }
              }
              uint64_t v256 = (int *)*((void *)this + 1578);
              if (v256 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v256, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1117, "SetProperty", "Begin self-reinit (kVPParameter_DisableVP)");
              }
              if (*((unsigned char *)this + 477)) {
                VoiceProcessorV2::InitializeDLP(this);
              }
              if (*((unsigned char *)this + 476)) {
                (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              int v257 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v257)
              {
                unint64_t v258 = v257;
                if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1120;
                  _os_log_impl(&dword_1BB0CE000, v258, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPParameter_DisableVP)", (uint8_t *)buf, 0x12u);
                }
              }
              unint64_t v259 = (int *)*((void *)this + 1578);
              if (v259 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v259, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1120, "SetProperty", "End self-reinit (kVPParameter_DisableVP)");
              }
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v260 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v260)
            {
              float v261 = v260;
              if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
              {
                float v262 = "TRUE";
                int v263 = *v253;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                if (!v263) {
                  float v262 = "FALSE";
                }
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1122;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v262;
                _os_log_impl(&dword_1BB0CE000, v261, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: disable vp = %s.  ", (uint8_t *)buf, 0x1Cu);
              }
            }
            int v264 = (int *)*((void *)this + 1578);
            if (v264 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              if (*v253) {
                uint64_t v265 = "TRUE";
              }
              else {
                uint64_t v265 = "FALSE";
              }
              CALegacyLog::log(v264, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1122, "SetProperty", "setproperty: disable vp = %s.  ", v265);
            }
          }
          if (*v541) {
            VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32773);
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1504;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1110;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"disableVP <= 1";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
        v522 = MEMORY[0x1E4F14500];
        goto LABEL_1503;
      case 32780:
        if ((a4 & 3) == 0)
        {
          memset(buf, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(buf, theDict, (uint64_t)&theDict[(unint64_t)a4 >> 2], (unint64_t)a4 >> 2);
          uint64_t v286 = (void *)*((void *)this + 262);
          if (v286)
          {
            *((void *)this + 263) = v286;
            operator delete(v286);
            *((void *)this + 262) = 0;
            *((void *)this + 263) = 0;
            *((void *)this + 264) = 0;
          }
          *(std::string *)((char *)this + 2096) = buf[0];
          if (*v541) {
            VoiceProcessorV2::PListWriteMicTrimGainParameters(this, (float **)this + 262);
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1154;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"(inDataSize % sizeof(Float32)) == 0";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      case 32781:
        if ((a4 & 3) == 0)
        {
          memset(buf, 0, 24);
          std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(buf, theDict, (uint64_t)&theDict[(unint64_t)a4 >> 2], (unint64_t)a4 >> 2);
          OSStatus v224 = (void *)*((void *)this + 266);
          if (v224)
          {
            *((void *)this + 267) = v224;
            operator delete(v224);
            *((void *)this + 266) = 0;
            *((void *)this + 267) = 0;
            *((void *)this + 268) = 0;
          }
          long long v225 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
          *(std::string *)((char *)this + 2128) = buf[0];
          if (*((unsigned char *)this + 477) && (*((unsigned char *)this + 8898) & 0x20) != 0)
          {
            unsigned int v226 = (float *)v225;
            if ((void)v225 != *((void *)&v225 + 1))
            {
              float v227 = (float *)(v225 + 4);
              if ((void)v225 + 4 != *((void *)&v225 + 1))
              {
                float v228 = *(float *)v225;
                uint64_t v229 = v226 + 1;
                do
                {
                  float v230 = *v229++;
                  float v231 = v230;
                  if (v230 < v228)
                  {
                    float v228 = v231;
                    unsigned int v226 = v227;
                  }
                  float v227 = v229;
                }
                while (v229 != *((float **)&v225 + 1));
              }
            }
            float v232 = fmaxf(*v226, 0.0);
            AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9416, 1, v232);
            unsigned int v233 = (OpaqueAudioComponentInstance *)*((void *)this + 459);
            if (v233) {
              AudioUnitSetParameter(v233, 1u, 0, 0, v232, 0);
            }
          }
          if (*v541) {
            VoiceProcessorV2::PListWriteRefTrimGainParameters(this, (float **)this + 266);
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1189;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"(inDataSize % sizeof(Float32)) == 0";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      case 32783:
        if (a4 == 8)
        {
          uint64_t v275 = this;
          unsigned int v276 = (const void *)*((void *)this + 276);
          if (v276)
          {
            CFRelease(v276);
            uint64_t v275 = this;
            *((void *)this + 276) = 0;
          }
          if (*(void *)theDict)
          {
            *((void *)v275 + 276) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)theDict);
            if (*((unsigned char *)v275 + 476) && !v541[280])
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              unsigned int v277 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v277)
              {
                uint64_t v278 = v277;
                if (os_log_type_enabled(v277, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1410;
                  _os_log_impl(&dword_1BB0CE000, v278, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_TelephonyMicDSPSettings)", (uint8_t *)buf, 0x12u);
                }
              }
              uint64_t v279 = (int *)*((void *)v275 + 1578);
              if (v279 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v279, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1410, "SetProperty", "Begin self-reinit (kVPProperty_TelephonyMicDSPSettings)");
              }
              (*(void (**)(VoiceProcessorV2 *))(*(void *)v275 + 240))(v275);
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v280 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v280)
              {
                uint64_t v281 = v280;
                if (os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1412;
                  _os_log_impl(&dword_1BB0CE000, v281, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_TelephonyMicDSPSettings)", (uint8_t *)buf, 0x12u);
                }
              }
              uint64_t v282 = (int *)*((void *)v275 + 1578);
              if (v282 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v282, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1412, "SetProperty", "End self-reinit (kVPProperty_TelephonyMicDSPSettings)");
              }
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v283 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v283)
            {
              uint64_t v284 = v283;
              if (os_log_type_enabled(v283, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1422;
                _os_log_impl(&dword_1BB0CE000, v284, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: mic custom dsp settings", (uint8_t *)buf, 0x12u);
              }
            }
            uint64_t v285 = (int *)*((void *)v275 + 1578);
            if (v285 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v285, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1422, "SetProperty", "setproperty: mic custom dsp settings");
            }
            if (*v541) {
              VoiceProcessorV2::PListWriteSetPropertyParameters(v275, 32783);
            }
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1395;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFDictionaryRef)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      case 32784:
        if (a4 == 8)
        {
          long long v234 = this;
          float v235 = (const void *)*((void *)this + 277);
          if (v235)
          {
            CFRelease(v235);
            long long v234 = this;
            *((void *)this + 277) = 0;
          }
          if (*(void *)theDict)
          {
            *((void *)v234 + 277) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)theDict);
            if (*((unsigned char *)v234 + 477) && !v541[280])
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              vDSP_Length v236 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v236)
              {
                uint64_t v237 = v236;
                if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1445;
                  _os_log_impl(&dword_1BB0CE000, v237, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_TelephonyRefDSPSettings)", (uint8_t *)buf, 0x12u);
                }
              }
              v238 = (int *)*((void *)v234 + 1578);
              if (v238 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v238, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1445, "SetProperty", "Begin self-reinit (kVPProperty_TelephonyRefDSPSettings)");
              }
              VoiceProcessorV2::InitializeDLP(v234);
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v239 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v239)
              {
                uint64_t v240 = v239;
                if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1447;
                  _os_log_impl(&dword_1BB0CE000, v240, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_TelephonyRefDSPSettings)", (uint8_t *)buf, 0x12u);
                }
              }
              vDSP_Length v241 = (int *)*((void *)v234 + 1578);
              if (v241 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v241, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1447, "SetProperty", "End self-reinit (kVPProperty_TelephonyRefDSPSettings)");
              }
            }
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            int v242 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v242)
            {
              int v243 = v242;
              if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1457;
                _os_log_impl(&dword_1BB0CE000, v243, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: ref custom dsp settings", (uint8_t *)buf, 0x12u);
              }
            }
            int v244 = (int *)*((void *)v234 + 1578);
            if (v244 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v244, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1457, "SetProperty", "setproperty: ref custom dsp settings");
            }
            if (*v541) {
              VoiceProcessorV2::PListWriteSetPropertyParameters(v234, 32784);
            }
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1430;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFDictionaryRef)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      case 32786:
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1248;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1478;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
          v531 = MEMORY[0x1E4F14500];
          goto LABEL_1588;
        }
        float v208 = *(float *)theDict;
        unint64_t v75 = this;
        if (*theDict < 2)
        {
          uint64_t v209 = (int *)((char *)this + 2736);
          *((float *)this + 684) = v208;
          VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_beam_direction", 1, (float *)this + 684, v41);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          vDSP_Length v210 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v210)
          {
            uint64_t v211 = v210;
            if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
            {
              UInt64 v212 = "top back mic";
              int v213 = *v209;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              if (!v213) {
                UInt64 v212 = "top front mic";
              }
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1486;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v212;
              _os_log_impl(&dword_1BB0CE000, v211, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: beam former direction = %s", (uint8_t *)buf, 0x1Cu);
            }
          }
          long long v214 = (int *)*((void *)this + 1578);
          if (v214 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            if (*v209) {
              uint64_t v215 = "top back mic";
            }
            else {
              uint64_t v215 = "top front mic";
            }
            CALegacyLog::log(v214, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1486, "SetProperty", "setproperty: beam former direction = %s", v215);
          }
          uint64_t v4 = VoiceProcessorV2::ApplyBeamDirection(this);
          if (v4)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v216 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v216)
            {
              float v217 = v216;
              if (os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1490;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v4;
                _os_log_impl(&dword_1BB0CE000, v217, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> Error %d from applying beam direction", (uint8_t *)buf, 0x18u);
              }
            }
            float v218 = (int *)*((void *)this + 1578);
            if (v218 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v218, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1490, "SetProperty", "Error %d from applying beam direction", v4);
            }
          }
          goto LABEL_1604;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1504;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1482;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"(beamDirection == kAUBeam2BeamIndex_Front) || (beamDirection == kAUBeam2BeamIndex_Back)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
        v522 = MEMORY[0x1E4F14500];
        goto LABEL_1503;
      case 32787:
        if (a4 > 3)
        {
          uint64_t v4 = (*(uint64_t (**)(VoiceProcessorV2 *, void))(*(void *)this + 96))(this, *theDict);
          goto LABEL_1604;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1496;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(UInt32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      case 32788:
        if (a4 < 4 || (float v184 = *(float *)theDict, *theDict >= 2))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v185 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
          if (v185)
          {
            uint64_t v186 = v185;
            if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1131;
              _os_log_impl(&dword_1BB0CE000, v186, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> setproperty: HwHasVP got invalid data", (uint8_t *)buf, 0x12u);
            }
          }
          uint64_t v4 = 561211770;
          float v187 = (int *)*((void *)this + 1578);
          if (v187 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v187, 2, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1131, "SetProperty", "setproperty: HwHasVP got invalid data");
          }
          goto LABEL_1604;
        }
        if (LODWORD(v184) != *((unsigned __int8 *)this + 2085))
        {
          v495 = (char *)this + 2085;
          *((unsigned char *)this + 2085) = LODWORD(v184) == 1;
          VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_hw_has_vp", 0, (float *)((char *)this + 2085), v41);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v496 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v496)
          {
            v497 = v496;
            if (os_log_type_enabled(v496, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1141;
              _os_log_impl(&dword_1BB0CE000, v497, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPParameter_HwHasVP)", (uint8_t *)buf, 0x12u);
            }
          }
          v498 = (int *)*((void *)this + 1578);
          if (v498 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v498, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1141, "SetProperty", "Begin self-reinit (kVPParameter_HwHasVP)");
          }
          if (*((unsigned char *)this + 477)) {
            VoiceProcessorV2::InitializeDLP(this);
          }
          if (*((unsigned char *)this + 476)) {
            (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v499 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v499)
          {
            v500 = v499;
            if (os_log_type_enabled(v499, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1144;
              _os_log_impl(&dword_1BB0CE000, v500, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPParameter_HwHasVP)", (uint8_t *)buf, 0x12u);
            }
          }
          v501 = (int *)*((void *)this + 1578);
          if (v501 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v501, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1144, "SetProperty", "End self-reinit (kVPParameter_HwHasVP)");
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v502 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v502)
          {
            v503 = v502;
            if (os_log_type_enabled(v502, OS_LOG_TYPE_DEFAULT))
            {
              v504 = "TRUE";
              int v505 = *v495;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              if (!v505) {
                v504 = "FALSE";
              }
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1146;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v504;
              _os_log_impl(&dword_1BB0CE000, v503, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: hw has vp = %s.  ", (uint8_t *)buf, 0x1Cu);
            }
          }
          v506 = (int *)*((void *)this + 1578);
          if (v506 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            if (*v495) {
              v507 = "TRUE";
            }
            else {
              v507 = "FALSE";
            }
            CALegacyLog::log(v506, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1146, "SetProperty", "setproperty: hw has vp = %s.  ", v507);
          }
        }
        if (*v541) {
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32788);
        }
        goto LABEL_1603;
      case 32789:
        goto LABEL_1604;
      case 32792:
        if (a4 < 4) {
          goto LABEL_1248;
        }
        int v219 = *theDict != 0;
        if (*((_DWORD *)this + 286) != v219)
        {
          *((_DWORD *)this + 286) = v219;
          if (*v541) {
            VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32792);
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v220 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v220)
          {
            unsigned int v221 = v220;
            if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
            {
              int v222 = *((_DWORD *)this + 286);
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1641;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v222;
              _os_log_impl(&dword_1BB0CE000, v221, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: is tap stream enabled  = %d", (uint8_t *)buf, 0x18u);
            }
          }
          int v223 = (int *)*((void *)this + 1578);
          if (v223 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v223, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1641, "SetProperty", "setproperty: is tap stream enabled  = %d", *((_DWORD *)this + 286));
          }
        }
        goto LABEL_1603;
      case 32794:
        uint64_t v4 = 561211770;
        if (a4 < 4 || *theDict > 1) {
          goto LABEL_1604;
        }
        *((unsigned char *)this + 2082) = *theDict != 0;
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        vDSP_Length v306 = (unsigned __int8 *)this + 2082;
        float v307 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
        if (v307)
        {
          int32x2_t v309 = v307;
          if (os_log_type_enabled(v307, OS_LOG_TYPE_DEFAULT))
          {
            int v310 = *v306;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 946;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v310;
            _os_log_impl(&dword_1BB0CE000, v309, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: mute downlink voice =%d", (uint8_t *)buf, 0x18u);
          }
        }
        vDSP_Length v311 = (int *)*((void *)this + 1578);
        if (v311 && (*v541 || v541[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v311, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 946, "SetProperty", "setproperty: mute downlink voice =%d", *v306);
        }
        VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_mute_downlink_voice", 0, (float *)((char *)this + 2082), v308);
        if (*v541) {
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32794);
        }
        goto LABEL_1603;
      case 32796:
        CADeprecated::CAAutoFree<long long>::allocBytes((void **)this + 273, a4);
        v162 = (void *)*((void *)this + 273);
        if (v162)
        {
          memcpy(v162, theDict, a4);
          *((_DWORD *)this + 548) = a4 >> 2;
          if (*v541) {
            VoiceProcessorV2::PListWriteSpkInputDataSrcParameters(this, *((unsigned int **)this + 273), a4 >> 2);
          }
        }
        goto LABEL_1603;
      case 32797:
        if (a4 > 3)
        {
          float v287 = *(float *)theDict;
          *((_DWORD *)this + 560) = *theDict;
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v288 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v288)
          {
            uint64_t v289 = v288;
            if (os_log_type_enabled(v288, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1574;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
              *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v287;
              _os_log_impl(&dword_1BB0CE000, v289, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: hardware volume =%f dB", (uint8_t *)buf, 0x1Cu);
            }
          }
          long long v290 = (int *)*((void *)this + 1578);
          if (v290 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v290, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1574, "SetProperty", "setproperty: hardware volume =%f dB", v287);
          }
          if (*v541) {
            VoiceProcessorV2::PListWriteSetPropertyParameters(this, 32797);
          }
          uint64_t v291 = *((void *)this + 1112);
          if ((v291 & 0x200000000000) != 0 && *((void *)this + 483))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v292 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v292)
            {
              uint64_t v293 = v292;
              if (os_log_type_enabled(v292, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1578;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v287;
                _os_log_impl(&dword_1BB0CE000, v293, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> AU HLC exists in the VP chain applying HW vol =>%f", (uint8_t *)buf, 0x1Cu);
              }
            }
            uint64_t v294 = (int *)*((void *)this + 1578);
            if (v294 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v294, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1578, "SetProperty", "AU HLC exists in the VP chain applying HW vol =>%f", v287);
            }
            AudioUnitSetParameter(*((AudioUnit *)this + 483), 0x19u, 0, 0, v287, 0);
            uint64_t v291 = *((void *)this + 1112);
          }
          if ((v291 & 0x4000000000000) != 0 && *((void *)this + 488))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            v295 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v295)
            {
              uint64_t v296 = v295;
              if (os_log_type_enabled(v295, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1583;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v287;
                _os_log_impl(&dword_1BB0CE000, v296, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] AUSPLMeter exists in the VP chain; applying HW vol =>%f",
                  (uint8_t *)buf,
                  0x1Cu);
              }
            }
            char v297 = (int *)*((void *)this + 1578);
            if (v297 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v297, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1583, "SetProperty", "[VolumeLimit] AUSPLMeter exists in the VP chain; applying HW vol =>%f",
                v287);
            }
            AudioUnitSetParameter(*((AudioUnit *)this + 488), 0, 0, 0, v287, 0);
            if ((*((unsigned char *)this + 8901) & 0x40) != 0 && *((void *)this + 484))
            {
              *(_DWORD *)v552 = 0;
              if (*((float *)this + 582) <= 0.0) {
                float v298 = 100.0;
              }
              else {
                float v298 = *((float *)this + 582);
              }
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              BOOL v299 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
              if (v299)
              {
                unsigned int v300 = v299;
                if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1591;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                  *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v298;
                  _os_log_impl(&dword_1BB0CE000, v300, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] SPLTarget update %f", (uint8_t *)buf, 0x1Cu);
                }
              }
              vDSP_Length v301 = (int *)*((void *)this + 1578);
              if (v301 && (*v541 || v541[1]))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v301, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1591, "SetProperty", "[VolumeLimit] SPLTarget update %f", v298);
              }
              OSStatus Parameter = AudioUnitGetParameter(*((AudioUnit *)this + 488), 0xBu, 0, 0, (AudioUnitParameterValue *)v552);
              if (Parameter)
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v303 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
                if (v303)
                {
                  unsigned int v304 = v303;
                  if (os_log_type_enabled(v303, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1603;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = Parameter;
                    _os_log_impl(&dword_1BB0CE000, v304, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> [VolumeLimit] Failed to et LKFS from AUSPLMeter. Error = %d", (uint8_t *)buf, 0x18u);
                  }
                }
                uint64_t v305 = (int *)*((void *)this + 1578);
                if (v305 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  CALegacyLog::log(v305, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1603, "SetProperty", "[VolumeLimit] Failed to et LKFS from AUSPLMeter. Error = %d", Parameter);
                }
              }
              else
              {
                float v524 = v298 - *(float *)v552;
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v525 = v524 + -2.5;
                v526 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
                if (v526)
                {
                  v527 = v526;
                  if (os_log_type_enabled(v526, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1598;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2048;
                    *(double *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v525;
                    _os_log_impl(&dword_1BB0CE000, v527, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> [VolumeLimit] Setting target LKFS on LDNM to %f", (uint8_t *)buf, 0x1Cu);
                  }
                }
                v528 = this;
                v529 = (int *)*((void *)this + 1578);
                if (v529 && (*v541 || v541[1]))
                {
                  if (VPLogScope(void)::once != -1) {
                    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                  }
                  v528 = this;
                  CALegacyLog::log(v529, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1598, "SetProperty", "[VolumeLimit] Setting target LKFS on LDNM to %f", v525);
                }
                AudioUnitSetParameter(*((AudioUnit *)v528 + 484), 2u, 0, 0, v525, 0);
              }
            }
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1571;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize >= sizeof(Float32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      case 32799:
        if (a4 == 8)
        {
          applesauce::CF::ArrayRef::from_get_noexcept((applesauce::CF::ArrayRef *)&value, *(CFTypeRef *)theDict);
          if (value)
          {
            v163 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&value);
            if (applesauce::CF::ArrayRef_proxy::get_size(*v163))
            {
              memset(v552, 0, 24);
              applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&__p, (CFArrayRef)value);
              applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&cf, (CFArrayRef)value);
              uint64_t v164 = v546;
              uint64_t v545 = v546;
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              while (1)
              {
                if (__p.__r_.__value_.__r.__words[0]) {
                  BOOL v166 = size == __p.__r_.__value_.__r.__words[2];
                }
                else {
                  BOOL v166 = 1;
                }
                if (v166 && (cf ? (BOOL v167 = v164 == v546) : (BOOL v167 = 1), v167)
                  || (__p.__r_.__value_.__l.__data_ == cf ? (BOOL v168 = size == v164) : (BOOL v168 = 0), v168))
                {
                  uint64_t v448 = this;
                  applesauce::CF::ArrayRef::operator=((const void **)this + 261, value);
                  float v449 = (void *)*((void *)this + 262);
                  if (v449)
                  {
                    *((void *)this + 263) = v449;
                    operator delete(v449);
                    *((void *)this + 262) = 0;
                    *((void *)this + 263) = 0;
                    *((void *)this + 264) = 0;
                  }
                  *((_OWORD *)this + 131) = *(_OWORD *)v552;
                  *((void *)this + 264) = *(void *)&v552[16];
                  memset(v552, 0, 24);
                  if (*v541)
                  {
                    VoiceProcessorV2::PListWriteMicTrimGainParameters(this, (float **)this + 262);
                    goto LABEL_1271;
                  }
                  goto LABEL_1602;
                }
                applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((const __CFArray *)__p.__r_.__value_.__l.__data_, size, (applesauce::CF::DictionaryRef *)&v543);
                if (!v543)
                {
                  v533 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v533, "Could not construct");
                }
                if (!applesauce::CF::details::has_key<char const(&)[25]>((const __CFDictionary *)v543, "trim_gain_data_source_id"))break; {
                if (!v543)
                }
                {
                  v536 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v536, "Could not construct");
                }
                if (!applesauce::CF::details::has_key<char const(&)[13]>((const __CFDictionary *)v543, "trim_gain_db"))
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1175;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFGainDBKey)";
                    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                    float v183 = MEMORY[0x1E4F14500];
LABEL_511:
                    _os_log_impl(&dword_1BB0CE000, v183, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
                  }
                  goto LABEL_512;
                }
                if (!v543)
                {
                  v537 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v537, "Could not construct");
                }
                float v169 = applesauce::CF::details::find_at_key<float,char const(&)[13]>((const __CFDictionary *)v543, "trim_gain_db");
                float v170 = v169;
                uint64_t v171 = *(char **)&v552[8];
                if (*(void *)&v552[8] >= *(void *)&v552[16])
                {
                  v173 = *(char **)v552;
                  uint64_t v174 = (uint64_t)(*(void *)&v552[8] - *(void *)v552) >> 2;
                  unint64_t v175 = v174 + 1;
                  if ((unint64_t)(v174 + 1) >> 62) {
                    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v176 = *(void *)&v552[16] - *(void *)v552;
                  if ((uint64_t)(*(void *)&v552[16] - *(void *)v552) >> 1 > v175) {
                    unint64_t v175 = v176 >> 1;
                  }
                  if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v177 = v175;
                  }
                  if (v177)
                  {
                    float v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v552[16], v177);
                    uint64_t v171 = *(char **)&v552[8];
                    v173 = *(char **)v552;
                  }
                  else
                  {
                    float v178 = 0;
                  }
                  v179 = &v178[4 * v174];
                  *(float *)v179 = v170;
                  v172 = v179 + 4;
                  while (v171 != v173)
                  {
                    int v180 = *((_DWORD *)v171 - 1);
                    v171 -= 4;
                    *((_DWORD *)v179 - 1) = v180;
                    v179 -= 4;
                  }
                  *(void *)v552 = v179;
                  *(void *)&v552[8] = v172;
                  *(void *)&v552[16] = &v178[4 * v177];
                  if (v173) {
                    operator delete(v173);
                  }
                }
                else
                {
                  **(float **)&v552[8] = v169;
                  v172 = v171 + 4;
                }
                int v181 = 0;
                *(void *)&v552[8] = v172;
                int v182 = 1;
LABEL_503:
                if (v543) {
                  CFRelease(v543);
                }
                if (!v182) {
                  goto LABEL_1250;
                }
                std::string::size_type size = ++__p.__r_.__value_.__l.__size_;
                uint64_t v164 = v545;
              }
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1174;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFDataSourceIDKey)";
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
                float v183 = MEMORY[0x1E4F14500];
                goto LABEL_511;
              }
LABEL_512:
              int v182 = 0;
              int v181 = 144;
              goto LABEL_503;
            }
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_1557;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1170;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"micTrimGainsCF->get_size() != 0";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
            v532 = MEMORY[0x1E4F14500];
          }
          else
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_1557;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1169;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"micTrimGainsCF.is_valid()";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
            v532 = MEMORY[0x1E4F14500];
          }
LABEL_1556:
          _os_log_impl(&dword_1BB0CE000, v532, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
LABEL_1557:
          uint64_t v448 = this;
LABEL_1275:
          applesauce::CF::ArrayRef::~ArrayRef((const void **)&value);
          atomic_fetch_add((atomic_uint *volatile)v448 + 620, 0xFFFFFFFF);
          CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v548);
          return 561406316;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1165;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFArrayRef)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      case 32800:
        if (a4 != 8)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1248;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1213;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFArrayRef)";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
          v531 = MEMORY[0x1E4F14500];
          goto LABEL_1588;
        }
        applesauce::CF::ArrayRef::from_get_noexcept((applesauce::CF::ArrayRef *)&value, *(CFTypeRef *)theDict);
        if (!value)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1557;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1217;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"refTrimGainsCF.is_valid()";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
          v532 = MEMORY[0x1E4F14500];
          goto LABEL_1556;
        }
        uint64_t v188 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&value);
        if (!applesauce::CF::ArrayRef_proxy::get_size(*v188))
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_1557;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1218;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"refTrimGainsCF->get_size() != 0";
          WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
          *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
          v532 = MEMORY[0x1E4F14500];
          goto LABEL_1556;
        }
        memset(v552, 0, 24);
        applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&__p, (CFArrayRef)value);
        applesauce::CF::ArrayRef_iterator<applesauce::CF::DictionaryRef>::ArrayRef_iterator(&cf, (CFArrayRef)value);
        uint64_t v189 = v546;
        uint64_t v545 = v546;
        std::string::size_type v190 = __p.__r_.__value_.__l.__size_;
        while (2)
        {
          if (__p.__r_.__value_.__r.__words[0]) {
            BOOL v191 = v190 == __p.__r_.__value_.__r.__words[2];
          }
          else {
            BOOL v191 = 1;
          }
          if (v191 && (cf ? (BOOL v192 = v189 == v546) : (BOOL v192 = 1), v192)
            || (__p.__r_.__value_.__l.__data_ == cf ? (BOOL v193 = v190 == v189) : (BOOL v193 = 0), v193))
          {
            uint64_t v448 = this;
            applesauce::CF::ArrayRef::operator=((const void **)this + 265, value);
            float v450 = (void *)*((void *)this + 266);
            if (v450)
            {
              *((void *)this + 267) = v450;
              operator delete(v450);
              *((void *)this + 266) = 0;
              *((void *)this + 267) = 0;
              *((void *)this + 268) = 0;
            }
            long long v451 = *(_OWORD *)v552;
            *((_OWORD *)this + 133) = *(_OWORD *)v552;
            *((void *)this + 268) = *(void *)&v552[16];
            memset(v552, 0, 24);
            if (*((unsigned char *)this + 477) && (*((unsigned char *)this + 8898) & 0x20) != 0)
            {
              float v452 = (float *)v451;
              v453 = (float *)(v451 + 4);
              if ((void)v451 != *((void *)&v451 + 1) && v453 != *((float **)&v451 + 1))
              {
                float v455 = *(float *)v451;
                float v456 = v453;
                do
                {
                  float v457 = *v456++;
                  float v458 = v457;
                  if (v457 < v455)
                  {
                    float v455 = v458;
                    float v452 = v453;
                  }
                  v453 = v456;
                }
                while (v456 != *((float **)&v451 + 1));
              }
              float v459 = fmaxf(*v452, 0.0);
              AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 9416, 1, v459);
              float v460 = (OpaqueAudioComponentInstance *)*((void *)this + 459);
              if (v460) {
                AudioUnitSetParameter(v460, 1u, 0, 0, v459, 0);
              }
            }
            if (*v541) {
              VoiceProcessorV2::PListWriteRefTrimGainParameters(this, (float **)this + 266);
            }
LABEL_1271:
            int v181 = 0;
            goto LABEL_1272;
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((const __CFArray *)__p.__r_.__value_.__l.__data_, v190, (applesauce::CF::DictionaryRef *)&v543);
          if (!v543)
          {
            v534 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v534, "Could not construct");
          }
          if (applesauce::CF::details::has_key<char const(&)[25]>((const __CFDictionary *)v543, "trim_gain_data_source_id"))
          {
            if (!v543)
            {
              v535 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v535, "Could not construct");
            }
            if (applesauce::CF::details::has_key<char const(&)[13]>((const __CFDictionary *)v543, "trim_gain_db"))
            {
              if (!v543)
              {
                v538 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v538, "Could not construct");
              }
              float v194 = applesauce::CF::details::find_at_key<float,char const(&)[13]>((const __CFDictionary *)v543, "trim_gain_db");
              float v195 = v194;
              float v196 = *(char **)&v552[8];
              if (*(void *)&v552[8] >= *(void *)&v552[16])
              {
                float v198 = *(char **)v552;
                uint64_t v199 = (uint64_t)(*(void *)&v552[8] - *(void *)v552) >> 2;
                unint64_t v200 = v199 + 1;
                if ((unint64_t)(v199 + 1) >> 62) {
                  std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v201 = *(void *)&v552[16] - *(void *)v552;
                if ((uint64_t)(*(void *)&v552[16] - *(void *)v552) >> 1 > v200) {
                  unint64_t v200 = v201 >> 1;
                }
                if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v202 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v202 = v200;
                }
                if (v202)
                {
                  uint64_t v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v552[16], v202);
                  float v196 = *(char **)&v552[8];
                  float v198 = *(char **)v552;
                }
                else
                {
                  uint64_t v203 = 0;
                }
                uint64_t v204 = &v203[4 * v199];
                *(float *)uint64_t v204 = v195;
                float v197 = v204 + 4;
                while (v196 != v198)
                {
                  int v205 = *((_DWORD *)v196 - 1);
                  v196 -= 4;
                  *((_DWORD *)v204 - 1) = v205;
                  v204 -= 4;
                }
                *(void *)v552 = v204;
                *(void *)&v552[8] = v197;
                *(void *)&v552[16] = &v203[4 * v202];
                if (v198) {
                  operator delete(v198);
                }
              }
              else
              {
                **(float **)&v552[8] = v194;
                float v197 = v196 + 4;
              }
              int v181 = 0;
              *(void *)&v552[8] = v197;
              int v206 = 1;
LABEL_565:
              if (v543) {
                CFRelease(v543);
              }
              if (v206)
              {
                std::string::size_type v190 = ++__p.__r_.__value_.__l.__size_;
                uint64_t v189 = v545;
                continue;
              }
LABEL_1250:
              uint64_t v448 = this;
LABEL_1272:
              if (*(void *)v552)
              {
                *(void *)&v552[8] = *(void *)v552;
                operator delete(*(void **)v552);
              }
              if (!v181)
              {
LABEL_1602:
                applesauce::CF::ArrayRef::~ArrayRef((const void **)&value);
                goto LABEL_1603;
              }
              goto LABEL_1275;
            }
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1223;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFGainDBKey)";
              WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
              *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
              uint64_t v207 = MEMORY[0x1E4F14500];
              goto LABEL_573;
            }
          }
          else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1222;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"value->has_key(kVirtualAudioPortPropertyTrimGainsCFDataSourceIDKey)";
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"InvalidPropertyValue";
            uint64_t v207 = MEMORY[0x1E4F14500];
LABEL_573:
            _os_log_impl(&dword_1BB0CE000, v207, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_require: %s %s", (uint8_t *)buf, 0x26u);
          }
          break;
        }
        int v206 = 0;
        int v181 = 144;
        goto LABEL_565;
      case 32801:
        if (a4 == 8)
        {
          applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)buf, *(CFTypeRef *)theDict);
          std::string::size_type v312 = *((void *)this + 269);
          *((void *)this + 269) = buf[0].__r_.__value_.__r.__words[0];
          buf[0].__r_.__value_.__r.__words[0] = v312;
          applesauce::CF::ArrayRef::~ArrayRef((const void **)&buf[0].__r_.__value_.__l.__data_);
          if (!v541[280] && *((unsigned char *)this + 477))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            v474 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v474)
            {
              v475 = v474;
              if (os_log_type_enabled(v474, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1255;
                _os_log_impl(&dword_1BB0CE000, v475, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_SpeakerCalibrationDataCF)", (uint8_t *)buf, 0x12u);
              }
            }
            v476 = (int *)*((void *)this + 1578);
            if (v476 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v476, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1255, "SetProperty", "Begin self-reinit (kVPProperty_SpeakerCalibrationDataCF)");
            }
            VoiceProcessorV2::InitializeDLP(this);
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            v477 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v477)
            {
              v478 = v477;
              if (os_log_type_enabled(v477, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1257;
                _os_log_impl(&dword_1BB0CE000, v478, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_SpeakerCalibrationDataCF)", (uint8_t *)buf, 0x12u);
              }
            }
            v479 = (int *)*((void *)this + 1578);
            if (v479 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v479, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1257, "SetProperty", "End self-reinit (kVPProperty_SpeakerCalibrationDataCF)");
            }
          }
          if (*v541) {
            VoiceProcessorV2::PListWriteSpeakerCalibrationParameters(this, *((const __CFArray **)this + 269));
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1249;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(CFArrayRef)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      default:
        goto LABEL_1249;
    }
  }
  if (a2 > 1635085676)
  {
    if (a2 != 1635085677)
    {
      if (a2 != 1684305512 && a2 != 1685483378) {
        goto LABEL_1249;
      }
LABEL_989:
      uint64_t v4 = 4294956417;
      goto LABEL_1604;
    }
    if (VoiceProcessorV2::IsDeviceSupportingAdvancedChatFlavors(v40))
    {
      if (a4 == 4)
      {
        float v324 = *(float *)theDict;
        int v325 = *theDict != 0;
        if (*((unsigned __int8 *)this + 2268) == v325) {
          goto LABEL_1603;
        }
        int v326 = VoiceProcessorV2::GetChatFlavor(this);
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v327 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
        if (v327)
        {
          unsigned int v328 = v327;
          if (os_log_type_enabled(v327, OS_LOG_TYPE_DEFAULT))
          {
            float v329 = "true";
            int v330 = *((unsigned __int8 *)this + 2268);
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1958;
            if (v330) {
              float v331 = "true";
            }
            else {
              float v331 = "false";
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
            if (v324 == 0.0) {
              float v329 = "false";
            }
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v331;
            WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v329;
            _os_log_impl(&dword_1BB0CE000, v328, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: current state of enable automatic chat flavor = [%s], new state of enable automatic chat flavor = [%s]", (uint8_t *)buf, 0x26u);
          }
        }
        float v332 = (int *)*((void *)this + 1578);
        if (v332 && (*v541 || v541[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v333 = "true";
          if (*((unsigned char *)this + 2268)) {
            float v334 = "true";
          }
          else {
            float v334 = "false";
          }
          if (v324 == 0.0) {
            uint64_t v333 = "false";
          }
          CALegacyLog::log(v332, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1958, "SetProperty", "setproperty: current state of enable automatic chat flavor = [%s], new state of enable automatic chat flavor = [%s]", v334, v333);
        }
        *((unsigned char *)this + 2268) = v325;
        if (*v541) {
          VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1635085677);
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        float v335 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
        if (v335)
        {
          float v336 = v335;
          if (os_log_type_enabled(v335, OS_LOG_TYPE_DEFAULT))
          {
            int v337 = *((unsigned __int8 *)this + 2268);
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1961;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v337;
            _os_log_impl(&dword_1BB0CE000, v336, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: enable automatic chat flavor value changed to = [%d]", (uint8_t *)buf, 0x18u);
          }
        }
        int v338 = (int *)*((void *)this + 1578);
        if (v338 && (*v541 || v541[1]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v338, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1961, "SetProperty", "setproperty: enable automatic chat flavor value changed to = [%d]", *((unsigned __int8 *)this + 2268));
        }
        int v339 = VoiceProcessorV2::GetChatFlavor(this);
        if (v339 != v326)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v511 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v511)
          {
            v512 = v511;
            if (os_log_type_enabled(v511, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1966;
              _os_log_impl(&dword_1BB0CE000, v512, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Begin self-reinit (kVPProperty_EnableAutomaticMicMode)", (uint8_t *)buf, 0x12u);
            }
          }
          v513 = (int *)*((void *)this + 1578);
          if (v513 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v513, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1966, "SetProperty", "Begin self-reinit (kVPProperty_EnableAutomaticMicMode)");
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v514 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v514)
          {
            v517 = v514;
            if (os_log_type_enabled(v514, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1967;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v326;
              LOWORD(buf[1].__r_.__value_.__l.__data_) = 1024;
              *(_DWORD *)&buf[1].__r_.__value_.__s.__data_[2] = v339;
              _os_log_impl(&dword_1BB0CE000, v517, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> current chat flavor = [%d], new chat flavor = [%d]", (uint8_t *)buf, 0x1Eu);
            }
          }
          v518 = (int *)*((void *)this + 1578);
          if (v518 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v518, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1967, "SetProperty", "current chat flavor = [%d], new chat flavor = [%d]", v326, v339);
          }
          VoiceProcessorV2::ResetTimestampsAndInitializeVP(this, 1, v515, v516);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          v519 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
          if (v519)
          {
            v520 = v519;
            if (os_log_type_enabled(v519, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1969;
              _os_log_impl(&dword_1BB0CE000, v520, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> End self-reinit (kVPProperty_EnableAutomaticMicMode)", (uint8_t *)buf, 0x12u);
            }
          }
          v521 = (int *)*((void *)this + 1578);
          if (v521 && (*v541 || v541[1]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v521, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1969, "SetProperty", "End self-reinit (kVPProperty_EnableAutomaticMicMode)");
          }
          goto LABEL_1603;
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v340 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
        if (v340)
        {
          unint64_t v341 = v340;
          if (os_log_type_enabled(v340, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1973;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v326;
            _os_log_impl(&dword_1BB0CE000, v341, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> No self-reinit required, chat flavor remains %d", (uint8_t *)buf, 0x18u);
          }
        }
        uint64_t v4 = *((void *)this + 1578);
        if (v4)
        {
          if (*v541 || v541[1])
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log((int *)v4, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1973, "SetProperty", "No self-reinit required, chat flavor remains %d", v326);
          }
          goto LABEL_1603;
        }
        goto LABEL_1604;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1952;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      }
LABEL_1248:
      uint64_t v4 = 561211770;
      goto LABEL_1604;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v461 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
    if (v461)
    {
      vDSP_Length v462 = v461;
      if (os_log_type_enabled(v461, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1979;
        _os_log_impl(&dword_1BB0CE000, v462, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Advance chat flavors are not supported, ignoring incoming property", (uint8_t *)buf, 0x12u);
      }
    }
    int v345 = (int *)*((void *)this + 1578);
    if (!v345 || !*v541 && !v541[1]) {
      goto LABEL_1603;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    float v346 = "Advance chat flavors are not supported, ignoring incoming property";
    uint64_t v347 = 1979;
    goto LABEL_1299;
  }
  if (a2 != 1634300531)
  {
    if (a2 == 1634758259)
    {
      if (_os_feature_enabled_impl())
      {
        if (a4 == 4)
        {
          float v139 = *(float *)theDict;
          int v140 = *theDict != 0;
          if (*((unsigned __int8 *)this + 16688) != v140)
          {
            *((unsigned char *)this + 16688) = v140;
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v141 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
            if (v141)
            {
              unsigned int v142 = v141;
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
              {
                float v143 = "off";
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                if (v139 != 0.0) {
                  float v143 = "on";
                }
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1544;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v143;
                _os_log_impl(&dword_1BB0CE000, v142, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> setproperty: offload AirPods noise suppression = %s", (uint8_t *)buf, 0x1Cu);
              }
            }
            float v144 = (int *)*((void *)this + 1578);
            if (v144 && (*v541 || v541[1]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              BOOL v145 = "off";
              if (v139 != 0.0) {
                BOOL v145 = "on";
              }
              CALegacyLog::log(v144, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1544, "SetProperty", "setproperty: offload AirPods noise suppression = %s", v145);
            }
            if (*v541) {
              VoiceProcessorV2::PListWriteSetPropertyParameters(this, 1634758259);
            }
          }
          goto LABEL_1603;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_1248;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1540;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"inDataSize == sizeof(UInt32)";
        WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
        *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"BadPropertySize";
        v531 = MEMORY[0x1E4F14500];
        goto LABEL_1588;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      v466 = CALog::LogObjIfEnabled(2, VPLogScope(void)::scope);
      if (v466)
      {
        float v467 = v466;
        if (os_log_type_enabled(v466, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpProperties.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1550;
          _os_log_impl(&dword_1BB0CE000, v467, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  >vp> setproperty: AudioDSP/EnhancedAirPodsVoice feature flag is not enabled", (uint8_t *)buf, 0x12u);
        }
      }
      int v345 = (int *)*((void *)this + 1578);
      if (!v345 || !*v541 && !v541[1]) {
        goto LABEL_1603;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      float v346 = "setproperty: AudioDSP/EnhancedAirPodsVoice feature flag is not enabled";
      uint64_t v347 = 1550;
      int v465 = 2;
LABEL_1311:
      CALegacyLog::log(v345, v465, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", v347, "SetProperty", v346);
      goto LABEL_1603;
    }
    goto LABEL_1249;
  }
  CADeprecated::CAAutoFree<long long>::allocBytes((void **)this + 270, a4);
  UInt64 v313 = (void *)*((void *)this + 270);
  if (!v313) {
    goto LABEL_1603;
  }
  memcpy(v313, theDict, a4);
  unint64_t v314 = a4 >> 3;
  *((_DWORD *)this + 542) = v314;
  buf[0].__r_.__value_.__r.__words[0] = 0;
  std::vector<long long>::vector(&__p, v314, buf);
  memcpy(__p.__r_.__value_.__l.__data_, theDict, a4);
  AudioIssueDetectorClientUpdateReportingSessions(*((void *)this + 2002), (uint64_t)&__p);
  AudioIssueDetectorClientUpdateReportingSessions(*((void *)this + 2003), (uint64_t)&__p);
  std::string::size_type v315 = __p.__r_.__value_.__l.__size_;
  float v316 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_) {
    goto LABEL_1499;
  }
  while (1)
  {
    uint64_t v317 = *v316;
    if (AudioStatisticsLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_205);
    }
    if (!AudioStatisticsLibraryLoader(void)::libSym
      || (AudioStatisticsLibraryLoader(void)::libSym(v317) & 0xFFFFFFFD) != 0)
    {
      goto LABEL_920;
    }
    uint64_t v318 = (const void *)AudioStatisticsCopyConfiguration(v317);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v318);
    value = 0;
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, @"HostApplicationDisplayID", (const void **)&value))
    {
      CStringPtr = (std::string *)CFStringGetCStringPtr((CFStringRef)value, 0x8000100u);
      if (CStringPtr) {
        goto LABEL_907;
      }
      if (CFStringGetCString((CFStringRef)value, (char *)buf, 155, 0x8000100u)) {
        break;
      }
    }
LABEL_919:
    applesauce::CF::DictionaryRef::~DictionaryRef(&cf);
LABEL_920:
    if (++v316 == (uint64_t *)v315) {
      goto LABEL_1498;
    }
  }
  CStringPtr = buf;
LABEL_907:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v320 = CALog::LogObjIfEnabled(3, VPLogScope(void)::scope);
  if (v320)
  {
    double v321 = v320;
    if (os_log_type_enabled(v320, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v552 = 136315650;
      *(void *)&v552[4] = "vpProperties.cpp";
      *(_WORD *)&v552[12] = 1024;
      *(_DWORD *)&v552[14] = 1298;
      *(_WORD *)&v552[18] = 2080;
      *(void *)&v552[20] = CStringPtr;
      _os_log_impl(&dword_1BB0CE000, v321, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> HostApplicationDisplayID = %s", v552, 0x1Cu);
    }
  }
  float v322 = (int *)*((void *)this + 1578);
  if (v322 && (*v541 || v541[1]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v322, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpProperties.cpp", 1298, "SetProperty", "HostApplicationDisplayID = %s", (const char *)CStringPtr);
  }
  applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)v552, value);
  uint64_t v323 = *((void *)this + 272);
  *((void *)this + 272) = *(void *)v552;
  *(void *)v552 = v323;
  applesauce::CF::StringRef::~StringRef((const void **)v552);
  if (!CStringPtr) {
    goto LABEL_919;
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&cf);
LABEL_1498:
  float v316 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
LABEL_1499:
  if (v316)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v316;
    operator delete(v316);
  }
LABEL_1603:
  uint64_t v4 = 0;
LABEL_1604:
  v523 = (atomic_uint *)((char *)this + 2480);
LABEL_1605:
  atomic_fetch_add(v523, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v548);
  return v4;
}

void sub_1BB6CA2D8()
{
}

void sub_1BB6CA2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,char a34)
{
  if (a2)
  {
    if (a34)
    {
      if (__p) {
        operator delete(__p);
      }
    }
    JUMPOUT(0x1BB6CA31CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BB6CA314(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::vector<std::tuple<int,int,int>>::vector[abi:ne180100](_DWORD *result, unint64_t a2)
{
  VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs = 0;
  qword_1E9F7FF10 = 0;
  qword_1E9F7FF18 = 0;
  if (a2)
  {
    if (a2 >= 0x1555555555555556) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v2 = result;
    uint64_t v3 = 3 * a2;
    uint64_t v4 = 12 * a2;
    uint64_t result = operator new(12 * a2);
    VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs = (uint64_t)result;
    qword_1E9F7FF10 = (uint64_t)result;
    qword_1E9F7FF18 = (uint64_t)&result[v3];
    do
    {
      uint64_t v5 = *(void *)v2;
      result[2] = v2[2];
      *(void *)uint64_t result = v5;
      result += 3;
      v2 += 3;
      v4 -= 12;
    }
    while (v4);
    qword_1E9F7FF10 = (uint64_t)result;
  }
  return result;
}

void sub_1BB6CA460(_Unwind_Exception *exception_object)
{
  if (VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs)
  {
    qword_1E9F7FF10 = VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs;
    operator delete((void *)VoiceProcessorV2::SetProperty(unsigned int,void const*,unsigned int)::supportedAUs);
  }
  _Unwind_Resume(exception_object);
}

void AudioIssueDetectorClientSetUplinkMute(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_179);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    unint64_t v2 = (void (*)(uint64_t))AudioIssueDetectorLibraryLoader(void)::libSym;
    v2(a1);
  }
}

uint64_t localPLLogRegisteredEvent(uint64_t a1)
{
  uint64_t v6 = 0;
  vDSP_Length v7 = &v6;
  uint64_t v8 = 0x2000000000;
  unint64_t v2 = (uint64_t (*)(uint64_t, __CFString *, uint64_t, void))getPLLogRegisteredEventSymbolLoc(void)::ptr;
  int v9 = getPLLogRegisteredEventSymbolLoc(void)::ptr;
  if (!getPLLogRegisteredEventSymbolLoc(void)::ptr)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZL32getPLLogRegisteredEventSymbolLocv_block_invoke;
    v5[3] = &unk_1E6242A30;
    v5[4] = &v6;
    ___ZL32getPLLogRegisteredEventSymbolLocv_block_invoke((uint64_t)v5);
    unint64_t v2 = (uint64_t (*)(uint64_t, __CFString *, uint64_t, void))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v4 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v4);
  }
  return v2(28, @"MutedTalkerDetection", a1, 0);
}

const void **applesauce::CF::ArrayRef::operator=(const void **a1, CFTypeRef cf)
{
  uint64_t v3 = *a1;
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void *CADeprecated::CAAutoFree<long long>::allocBytes(void **a1, size_t size)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  uint64_t result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    vDSP_Length v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

void *std::vector<long long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    vDSP_Length v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BB6CA720(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AudioIssueDetectorClientUpdateReportingSessions(uint64_t a1, uint64_t a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_179);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t))AudioIssueDetectorLibraryLoader(void)::libSym;
    v4(a1, a2);
  }
}

uint64_t AudioStatisticsCopyConfiguration(uint64_t a1)
{
  if (AudioStatisticsLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_205);
  }
  if (!AudioStatisticsLibraryLoader(void)::libSym) {
    return 0;
  }
  unint64_t v2 = AudioStatisticsLibraryLoader(void)::libSym;

  return v2(a1);
}

void **_ZN2vp5BlockIU13block_pointerFv28AUVoiceIOSpeechActivityEventEECI1NS0_IS2_EEES3_(void **a1, void *aBlock)
{
  *a1 = 0;
  if (aBlock) {
    *a1 = _Block_copy(aBlock);
  }
  return a1;
}

const void **vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::operator=(const void **a1, const void **a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    _Block_release(v4);
  }
  *a1 = 0;
  if (*a2)
  {
    *a1 = *a2;
    *a2 = 0;
  }
  return a1;
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_26643()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void))dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)result;
  }
  return result;
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_26660()
{
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

void *___ZL32getPLLogRegisteredEventSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!PowerLogLibraryCore(char **)::frameworkLibrary)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    v5[3] = ___ZL19PowerLogLibraryCorePPc_block_invoke;
    v5[4] = &__block_descriptor_tmp_200;
    void v5[5] = v5;
    long long v6 = xmmword_1E6242A50;
    uint64_t v7 = 0;
    PowerLogLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    unint64_t v2 = (void *)PowerLogLibraryCore(char **)::frameworkLibrary;
    if (PowerLogLibraryCore(char **)::frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  unint64_t v2 = (void *)PowerLogLibraryCore(char **)::frameworkLibrary;
LABEL_5:
  uint64_t result = dlsym(v2, "PLLogRegisteredEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPLLogRegisteredEventSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL19PowerLogLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PowerLogLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t std::vector<std::tuple<int,int,int>>::~vector[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void ___Z19EndpointVADLogScopev_block_invoke()
{
}

void ___Z20EndpointVAD2LogScopev_block_invoke()
{
}

void ___Z20EndpointVAD3LogScopev_block_invoke()
{
}

BOOL clsp::readPLKey(clsp *this, const __CFString *a2, const __CFString *a3, float *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  float v13 = 0.0;
  if (CACFDictionary::GetFloat32((uint64_t)this, a2, &v13))
  {
    *(float *)&a3->isa = v13;
    long long v6 = (NSObject **)spp3Subsystem();
    if (v6)
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        return 0;
      }
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4F14500];
    }
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    int v15 = "CLSPKernel_v4.cpp";
    __int16 v16 = 1024;
    int v17 = 684;
    __int16 v18 = 2080;
    int v19 = CStringPtr;
    __int16 v20 = 2048;
    double v21 = v13;
    _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read plist key: %s = %f", buf, 0x26u);
    return 0;
  }
  uint64_t v8 = (NSObject **)spp3Subsystem();
  if (!v8)
  {
    int v9 = MEMORY[0x1E4F14500];
LABEL_13:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = CFStringGetCStringPtr(a2, 0x8000100u);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v15 = "CLSPKernel_v4.cpp";
      __int16 v16 = 1024;
      int v17 = 688;
      __int16 v18 = 2080;
      int v19 = v12;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot read plist key: %s", buf, 0x1Cu);
    }
    return 1;
  }
  int v9 = *v8;
  if (*v8) {
    goto LABEL_13;
  }
  return 1;
}

void clsp::ClosedLoopParameters::Create(clsp::ClosedLoopParameters *this, const CACFDictionary *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BB6CBA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  *a16 = 0;
  std::default_delete<clsp::ClosedLoopParameters>::operator()[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void *clsp::ClosedLoopParameters::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"VMONScale = ", 12);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nIMONScale = ", 13);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nRdcScale = ", 12);
  long long v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\nTempCo20 = ", 12);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\nTempCo35 = ", 12);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nRebMin = ", 10);
  int v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\nRebMax = ", 10);
  unsigned int v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nCalTempMin = ", 14);
  int v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\nCalTempMax = ", 14);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nTlimAdjCap = ", 14);
  float v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\nVPwrThres = ", 13);
  int v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nIPwrThres = ", 13);
  int v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nParameterUpdaterConfig present = ", 34);
  uint64_t v16 = (void *)std::ostream::operator<<();
  char v30 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v30, 1);
  if (*(void *)(a1 + 48))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"capScale = ", 11);
    int v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\nminExcursion = ", 16);
    __int16 v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\nmaxExcursion = ", 16);
    int v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\ndelay ms = ", 12);
    __int16 v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\npeakFinderWindowTime ms = ", 27);
    double v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\nposPeakFinderThreshold = ", 26);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\nnegPeakFinderThreshold = ", 26);
    int v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\nxLimUpper = ", 13);
    int v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nxLimLower = ", 13);
    float v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\nxLimIncrement_dB = ", 20);
    size_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\nnormFactorAtk = ", 17);
    int v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\nnormFactorRel = ", 17);
    unint64_t v28 = (void *)std::ostream::operator<<();
    char v32 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v32, 1);
  }
  char v31 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v31, 1);
  return a2;
}

void PMWF_FAST_GS_vDSP::PMWF_FAST_GS_vDSP(PMWF_FAST_GS_vDSP *this, unsigned int a2, int a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, int a12, int a13, unsigned int a14, int a15, char a16, float a17, float a18, float a19, float a20,float a21,float a22,unsigned int a23)
{
  float v79 = a8;
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *((float *)this + 3) = a5;
  *((float *)this + 4) = a6;
  *((float *)this + 5) = a7;
  *((float *)this + 6) = a8;
  *((float *)this + 7) = a9;
  *((float *)this + 8) = a10;
  *((float *)this + 9) = a11;
  *((_DWORD *)this + 10) = 629145600;
  *((float *)this + 11) = a17;
  *((_DWORD *)this + 12) = a2;
  *((_DWORD *)this + 13) = a3;
  *((_DWORD *)this + 14) = 2 * a2;
  *((_DWORD *)this + 15) = a3 * a2;
  *((_DWORD *)this + 16) = 2 * a2 * a3;
  *((_DWORD *)this + 17) = 2 * a2 * a3 * a2;
  *((void *)this + 9) = 0x3F80000000000000;
  *((_DWORD *)this + 20) = -1082130432;
  float v25 = (const float *)((char *)this + 80);
  *((float *)this + 21) = (float)a2;
  size_t v26 = (_DWORD *)((char *)this + 84);
  *((float *)this + 22) = -(float)a2;
  *((float *)this + 23) = (float)(1.0 - a9) / a9;
  *((float *)this + 24) = 1.0 - a4;
  *((float *)this + 25) = 1.0 - a5;
  *((float *)this + 26) = 1.0 - a6;
  *((_DWORD *)this + 27) = a12;
  *((_DWORD *)this + 28) = a14;
  *((_DWORD *)this + 29) = a13;
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)&a18;
  *((_DWORD *)this + 34) = a15;
  *((unsigned char *)this + 140) = a16;
  *((float *)this + 36) = a22;
  *((_DWORD *)this + 37) = 0;
  *((float *)this + 38) = 1.0 / a4;
  *((float *)this + 39) = 1.0 / (float)(1.0 - a4);
  float v27 = (float)(a3 - 1) + (float)(a3 - 1);
  *((float *)this + 40) = v27;
  *((float *)this + 41) = 1.0 / v27;
  *((_DWORD *)this + 42) = a2;
  LOBYTE(v77) = 0;
  std::vector<BOOL>::vector((void *)this + 22, 2 * a2, (unsigned __int8 *)&v77);
  unint64_t v28 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v77, *((unsigned int *)this + 13), &v79);
  std::vector<std::vector<float>>::vector((void *)this + 25, v28, (uint64_t)&v77);
  if (v77)
  {
    int v78 = v77;
    operator delete(v77);
  }
  unint64_t v29 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v77, *((unsigned int *)this + 13), &v79);
  std::vector<std::vector<float>>::vector((void *)this + 28, v29, (uint64_t)&v77);
  if (v77)
  {
    int v78 = v77;
    operator delete(v77);
  }
  unint64_t v30 = *((unsigned int *)this + 14);
  unint64_t v31 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v30, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((void *)this + 31, v31, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    unsigned int v76 = v75;
    operator delete(v75);
  }
  unint64_t v32 = *((unsigned int *)this + 14);
  unint64_t v33 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v32, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((void *)this + 34, v33, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    unsigned int v76 = v75;
    operator delete(v75);
  }
  unint64_t v34 = *((unsigned int *)this + 12);
  std::vector<DSPSplitComplex>::vector(&v77, *((unsigned int *)this + 14));
  std::vector<std::vector<DSPSplitComplex>>::vector((void *)this + 37, v34, (uint64_t)&v77);
  if (v77)
  {
    int v78 = v77;
    operator delete(v77);
  }
  unint64_t v35 = *((unsigned int *)this + 14);
  unint64_t v36 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v35, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((void *)this + 40, v36, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    unsigned int v76 = v75;
    operator delete(v75);
  }
  unint64_t v37 = *((unsigned int *)this + 14);
  unint64_t v38 = *((unsigned int *)this + 12);
  std::vector<float>::vector(&v75, *((unsigned int *)this + 13));
  std::vector<std::vector<float>>::vector(&v77, v37, (uint64_t)&v75);
  std::vector<std::vector<std::vector<float>>>::vector((void *)this + 43, v38, (uint64_t *)&v77);
  v80[0] = &v77;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v80);
  if (v75)
  {
    unsigned int v76 = v75;
    operator delete(v75);
  }
  unint64_t v39 = *((unsigned int *)this + 12);
  std::vector<DSPSplitComplex>::vector(&v77, *((unsigned int *)this + 14));
  std::vector<std::vector<DSPSplitComplex>>::vector((void *)this + 46, v39, (uint64_t)&v77);
  if (v77)
  {
    int v78 = v77;
    operator delete(v77);
  }
  std::vector<float>::vector((void *)this + 49, *((unsigned int *)this + 13), v26);
  unint64_t v40 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1056964608;
  std::vector<float>::vector((void *)this + 52, v40, &v77);
  *((_DWORD *)this + 110) = 0;
  std::vector<float>::vector((void *)this + 56, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((void *)this + 59, *((unsigned int *)this + 16));
  std::vector<float>::vector((void *)this + 62, *((unsigned int *)this + 16));
  std::vector<DSPSplitComplex>::vector((void *)this + 65, *((unsigned int *)this + 14));
  std::vector<float>::vector((void *)this + 68, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 71, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 74, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 77, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 80, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 83, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 86, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 89, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 92, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 95, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 98, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 101, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 104, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 107, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 110, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 113, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 116, *((unsigned int *)this + 13));
  *((void *)this + 119) = *((void *)this + 113);
  *((void *)this + 120) = *((void *)this + 116);
  std::vector<float>::vector((void *)this + 121, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((void *)this + 124, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((void *)this + 127, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((void *)this + 130, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((void *)this + 133, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 136, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 139, (2 * *((_DWORD *)this + 15)));
  std::vector<float>::vector((void *)this + 142, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 145, *((unsigned int *)this + 13));
  std::vector<float>::vector((void *)this + 148, *((unsigned int *)this + 13));
  unint64_t v41 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1065353216;
  std::vector<float>::vector((void *)this + 151, v41, &v77);
  unint64_t v42 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1065353216;
  std::vector<float>::vector((void *)this + 154, v42, &v77);
  std::vector<float>::vector((void *)this + 157, (2 * *((_DWORD *)this + 15)));
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 160, a14, &v77);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 163, a14, &v77);
  unint64_t v43 = *((unsigned int *)this + 13);
  LODWORD(v77) = 1056964608;
  std::vector<float>::vector((void *)this + 166, v43, &v77);
  unint64_t v44 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 169, v44, &v77);
  unint64_t v45 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 172, v45, &v77);
  unint64_t v46 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 175, v46, &v77);
  unint64_t v47 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 178, v47, &v77);
  unint64_t v48 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 181, v48, &v77);
  unint64_t v49 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 184, v49, &v77);
  unint64_t v50 = *((unsigned int *)this + 13);
  LODWORD(v77) = 0;
  std::vector<float>::vector((void *)this + 187, v50, &v77);
  *((_DWORD *)this + 380) = 0;
  LODWORD(v51) = *((_DWORD *)this + 12);
  if (v51)
  {
    unint64_t v52 = 0;
    do
    {
      uint64_t v53 = *((unsigned int *)this + 14);
      uint64_t v54 = *((void *)this + 37);
      if (v53)
      {
        uint64_t v55 = 0;
        float v56 = *(uint64_t **)(*((void *)this + 31) + 24 * v52);
        uint64_t v57 = *(void *)(v54 + 24 * v52);
        uint64_t v58 = *(uint64_t **)(*((void *)this + 34) + 24 * v52);
        uint64_t v59 = *(uint64_t **)(*((void *)this + 40) + 24 * v52);
        uint64_t v60 = *(void *)(*((void *)this + 46) + 24 * v52);
        uint64_t v61 = 16 * v53;
        DSPSplitComplex v62 = *(uint64_t **)(*((void *)this + 43) + 24 * v52);
        do
        {
          uint64_t v63 = *v56;
          v56 += 3;
          float v64 = (void *)(v57 + v55);
          *float v64 = v63;
          uint64_t v65 = *v58;
          v58 += 3;
          v64[1] = v65;
          uint64_t v66 = *v59;
          v59 += 3;
          float v67 = (void *)(v60 + v55);
          void *v67 = v66;
          uint64_t v68 = *v62;
          v62 += 3;
          v67[1] = v68;
          v55 += 16;
        }
        while (v61 != v55);
      }
      else
      {
        uint64_t v57 = *(void *)(v54 + 24 * v52);
      }
      vDSP_vfill(v25, *(float **)(v57 + 16 * (v51 + v52)), 1, *((unsigned int *)this + 13));
      vDSP_vfill(v25, *(float **)(*(void *)(*((void *)this + 46) + 24 * v52) + 16 * (*((_DWORD *)this + 12) + v52)), 1, *((unsigned int *)this + 13));
      ++v52;
      unint64_t v51 = *((unsigned int *)this + 12);
    }
    while (v52 < v51);
  }
  uint64_t v69 = *((unsigned int *)this + 14);
  if (v69)
  {
    unsigned int v70 = 0;
    int v71 = *((_DWORD *)this + 13);
    uint64_t v72 = *((void *)this + 59);
    uint64_t v73 = *((void *)this + 62);
    int v74 = (void *)(*((void *)this + 65) + 8);
    do
    {
      *(v74 - 1) = v72 + 4 * v70;
      *int v74 = v73 + 4 * v70;
      v74 += 2;
      v70 += v71;
      --v69;
    }
    while (v69);
  }
}

void sub_1BB6CC5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44)
{
  unint64_t v52 = *v45;
  if (*v45)
  {
    v46[185] = v52;
    operator delete(v52);
  }
  uint64_t v53 = *v44;
  if (*v44)
  {
    v46[182] = v53;
    operator delete(v53);
  }
  uint64_t v54 = *a9;
  if (*a9)
  {
    v46[179] = v54;
    operator delete(v54);
  }
  uint64_t v55 = *a10;
  if (*a10)
  {
    v46[176] = v55;
    operator delete(v55);
  }
  float v56 = *a11;
  if (*a11)
  {
    v46[173] = v56;
    operator delete(v56);
  }
  uint64_t v57 = *a12;
  if (*a12)
  {
    v46[170] = v57;
    operator delete(v57);
  }
  uint64_t v58 = *a13;
  if (*a13)
  {
    v46[167] = v58;
    operator delete(v58);
  }
  uint64_t v59 = *a14;
  if (*a14)
  {
    v46[164] = v59;
    operator delete(v59);
  }
  uint64_t v60 = *a15;
  if (*a15)
  {
    v46[161] = v60;
    operator delete(v60);
  }
  uint64_t v61 = *a16;
  if (*a16)
  {
    v46[158] = v61;
    operator delete(v61);
  }
  DSPSplitComplex v62 = *a17;
  if (*a17)
  {
    v46[155] = v62;
    operator delete(v62);
  }
  uint64_t v63 = *a18;
  if (*a18)
  {
    v46[152] = v63;
    operator delete(v63);
  }
  float v64 = *a19;
  if (*a19)
  {
    v46[149] = v64;
    operator delete(v64);
  }
  uint64_t v65 = *a20;
  if (*a20)
  {
    v46[146] = v65;
    operator delete(v65);
  }
  uint64_t v66 = *a21;
  if (*a21)
  {
    v46[143] = v66;
    operator delete(v66);
  }
  float v67 = *a22;
  if (*a22)
  {
    v46[140] = v67;
    operator delete(v67);
  }
  uint64_t v68 = *a23;
  if (*a23)
  {
    v46[137] = v68;
    operator delete(v68);
  }
  uint64_t v69 = *a24;
  if (*a24)
  {
    v46[134] = v69;
    operator delete(v69);
  }
  unsigned int v70 = *a25;
  if (*a25)
  {
    v46[131] = v70;
    operator delete(v70);
  }
  int v71 = *a26;
  if (*a26)
  {
    v46[128] = v71;
    operator delete(v71);
  }
  uint64_t v72 = *a27;
  if (*a27)
  {
    v46[125] = v72;
    operator delete(v72);
  }
  uint64_t v73 = *a28;
  if (*a28)
  {
    v46[122] = v73;
    operator delete(v73);
  }
  int v74 = *a29;
  if (*a29)
  {
    v46[117] = v74;
    operator delete(v74);
  }
  unint64_t v75 = *a30;
  if (*a30)
  {
    v46[114] = v75;
    operator delete(v75);
  }
  unsigned int v76 = *a31;
  if (*a31)
  {
    v46[111] = v76;
    operator delete(v76);
  }
  uint64_t v77 = *a32;
  if (*a32)
  {
    v46[108] = v77;
    operator delete(v77);
  }
  int v78 = *a33;
  if (*a33)
  {
    v46[105] = v78;
    operator delete(v78);
  }
  float v79 = *a34;
  if (*a34)
  {
    v46[102] = v79;
    operator delete(v79);
  }
  uint64_t v80 = *a35;
  if (*a35)
  {
    v46[99] = v80;
    operator delete(v80);
  }
  int v81 = *a36;
  if (*a36)
  {
    v46[96] = v81;
    operator delete(v81);
  }
  int v82 = *a37;
  if (*a37)
  {
    v46[93] = v82;
    operator delete(v82);
  }
  uint64_t v83 = *a38;
  if (*a38)
  {
    v46[90] = v83;
    operator delete(v83);
  }
  int v84 = *a39;
  if (*a39)
  {
    v46[87] = v84;
    operator delete(v84);
  }
  int v85 = *a40;
  if (*a40)
  {
    v46[84] = v85;
    operator delete(v85);
  }
  double v86 = *a41;
  if (*a41)
  {
    v46[81] = v86;
    operator delete(v86);
  }
  double v87 = *a42;
  if (*a42)
  {
    v46[78] = v87;
    operator delete(v87);
  }
  uint64_t v88 = *a43;
  if (*a43)
  {
    v46[75] = v88;
    operator delete(v88);
  }
  uint64_t v89 = *a44;
  if (*a44)
  {
    v46[72] = v89;
    operator delete(v89);
  }
  float v90 = **(void ***)(v50 - 256);
  if (v90)
  {
    v46[69] = v90;
    operator delete(v90);
  }
  BOOL v91 = **(void ***)(v50 - 248);
  if (v91)
  {
    v46[66] = v91;
    operator delete(v91);
  }
  uint64_t v92 = **(void ***)(v50 - 240);
  if (v92)
  {
    v46[63] = v92;
    operator delete(v92);
  }
  float v93 = **(void ***)(v50 - 232);
  if (v93)
  {
    v46[60] = v93;
    operator delete(v93);
  }
  int v94 = **(void ***)(v50 - 224);
  if (v94)
  {
    v46[57] = v94;
    operator delete(v94);
  }
  float v95 = **(void ***)(v50 - 216);
  if (v95)
  {
    v46[53] = v95;
    operator delete(v95);
  }
  float v96 = **(void ***)(v50 - 208);
  if (v96)
  {
    v46[50] = v96;
    operator delete(v96);
  }
  *(void *)(v50 - 128) = v49;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(void *)(v50 - 128) = v48;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(void *)(v50 - 128) = v47;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(void *)(v50 - 128) = *(void *)(v50 - 200);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(void *)(v50 - 128) = *(void *)(v50 - 168);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(void *)(v50 - 128) = *(void *)(v50 - 160);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(void *)(v50 - 128) = *(void *)(v50 - 192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  *(void *)(v50 - 128) = *(void *)(v50 - 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 128));
  float v97 = **(void ***)(v50 - 176);
  if (v97) {
    operator delete(v97);
  }
  _Unwind_Resume(a1);
}

void vec::fill<BOOL>(uint64_t a1, unint64_t a2, char a3)
{
  if (a2)
  {
    uint64_t v3 = a1;
    int v4 = 0;
    if (a3) {
      std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v3, a2);
    }
    else {
      std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v3, a2);
    }
  }
}

uint64_t vec::fill<float>(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (a2 != result)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = result + 24 * v3;
      uint64_t v5 = *(_DWORD **)v4;
      uint64_t v6 = *(void *)(v4 + 8) - *(void *)v4;
      if (v6 >= 1)
      {
        unint64_t v7 = ((unint64_t)v6 >> 2) + 1;
        do
        {
          *v5++ = *a3;
          --v7;
        }
        while (v7 > 1);
      }
      ++v3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2 - result) >> 3) > v3);
  }
  return result;
}

void PMWF_FAST_GS_vDSP::ProcessOneFrame(PMWF_FAST_GS_vDSP *this)
{
  unsigned int v2 = *((_DWORD *)this + 37);
  if (!v2)
  {
    vDSP_vfill((const float *)this + 21, *((float **)this + 49), 1, *((unsigned int *)this + 13));
    if (!*((_DWORD *)this + 36))
    {
LABEL_10:
      ++*((_DWORD *)this + 37);
      goto LABEL_11;
    }
LABEL_5:
    unint64_t v3 = *((unsigned int *)this + 12);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        if (((*(void *)(*((void *)this + 22) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        {
          vDSP_Length v6 = *((unsigned int *)this + 13);
          uint64_t v7 = *((void *)this + 56);
          uint64_t v8 = (float *)(v7 + 4 * (*((_DWORD *)this + 15) + v6 * i));
          __A.realp = (float *)(v7 + 4 * (v6 * i));
          __A.imagp = v8;
          vDSP_zvmags(&__A, 1, *((float **)this + 133), 1, v6);
          vDSP_vmax(*((const float **)this + 133), 1, *(const float **)(*((void *)this + 25) + v4), 1, *(float **)(*((void *)this + 25) + v4), 1, *((unsigned int *)this + 13));
          vDSP_vmax(*((const float **)this + 133), 1, *(const float **)(*((void *)this + 28) + v4), 1, *(float **)(*((void *)this + 28) + v4), 1, *((unsigned int *)this + 13));
          unint64_t v3 = *((unsigned int *)this + 12);
        }
        v4 += 24;
      }
    }
    goto LABEL_10;
  }
  if (v2 < *((_DWORD *)this + 36)) {
    goto LABEL_5;
  }
LABEL_11:
  memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
  memcpy(*((void **)this + 62), (const void *)(*((void *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  bzero((void *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  bzero((void *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  bzero(*((void **)this + 71), 4 * *((unsigned int *)this + 13));
  unsigned int v9 = *((_DWORD *)this + 12);
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
    uint64_t v12 = 16;
    do
    {
      if ((*(void *)(*((void *)this + 22) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10))
      {
        ++v10;
      }
      else
      {
        vDSP_zvmags((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v10), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
        vDSP_svdiv((const float *)this + 19, *(const float **)(*((void *)this + 25) + 24 * v10), 1, *((float **)this + 77), 1, *((unsigned int *)this + 13));
        vDSP_vma(*((const float **)this + 68), 1, *((const float **)this + 77), 1, *((const float **)this + 71), 1, *((float **)this + 71), 1, *((unsigned int *)this + 13));
        vDSP_Length v13 = *((unsigned int *)this + 13);
        uint64_t v14 = *((void *)this + 124);
        int v15 = *((_DWORD *)this + 15);
        __A.realp = (float *)(v14 + 4 * (v13 * v10));
        __A.imagp = (float *)(v14 + 4 * (v15 + v13 * v10));
        vDSP_zrvmul((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v10), 1, *((const float **)this + 77), 1, &__A, 1, v13);
        unsigned int v9 = *((_DWORD *)this + 12);
        uint64_t v16 = v12;
        unint64_t v17 = v11;
        if (v10 + 1 < 2 * v9)
        {
          do
          {
            if (((*(void *)(*((void *)this + 22) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
            {
              vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 37) + 24 * v10) + v16), 1, (const DSPSplitComplex *)(*((void *)this + 65) + 16 * v10), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v16), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v16), 1, *((unsigned int *)this + 13));
              unsigned int v9 = *((_DWORD *)this + 12);
            }
            ++v17;
            v16 += 16;
          }
          while (v17 < 2 * v9);
        }
        ++v10;
      }
      ++v11;
      v12 += 16;
    }
    while (v10 < v9);
  }
  vDSP_vneg((const float *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 121), 1, *((unsigned int *)this + 15));
  vDSP_vneg((const float *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((void *)this + 121) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
  int v18 = *((_DWORD *)this + 12);
  unint64_t v19 = (v18 - 1);
  if (v18 - 1 >= 0)
  {
    unsigned int v20 = v18 - 2;
    do
    {
      if (((*(void *)(*((void *)this + 22) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      {
        unsigned int v21 = *((_DWORD *)this + 13) * v18 - 1;
        uint64_t v22 = *((void *)this + 124);
        int v23 = (float *)(v22 + 4 * v21);
        int v24 = (float *)(v22 + 4 * (*((_DWORD *)this + 15) + v21));
        __A.realp = v23;
        __A.imagp = v24;
        if (v18 - 2 >= 0)
        {
          uint64_t v25 = 24 * v20;
          unint64_t v26 = v20;
          do
          {
            if (((*(void *)(*((void *)this + 22) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
            {
              v201.realp = 0;
              v201.imagp = 0;
              vDSP_Length v27 = *((unsigned int *)this + 13);
              v201.realp = (float *)(*(void *)(*(void *)(*((void *)this + 31) + v25) + 24 * v19)
                                   + 4 * (v27 - 1));
              v201.imagp = (float *)(*(void *)(*(void *)(*((void *)this + 34) + v25) + 24 * v19)
                                   + 4 * (v27 - 1));
              unsigned int v28 = v27 - 1 + v27 * v26;
              uint64_t v29 = *((void *)this + 124);
              unsigned int v30 = *((_DWORD *)this + 15) + v28;
              __D.realp = (float *)(v29 + 4 * v28);
              __D.imagp = (float *)(v29 + 4 * v30);
              vDSP_zvcma(&v201, -1, &__A, -1, &__D, -1, &__D, -1, v27);
            }
            int v31 = v26--;
            v25 -= 24;
          }
          while (v31 > 0);
        }
      }
      int v18 = v19;
      --v20;
    }
    while ((uint64_t)v19-- > 0);
  }
  float __B = (float *)((char *)this + 96);
  vDSP_vsmsma(*((const float **)this + 49), 1, (const float *)this + 2, *((const float **)this + 71), 1, (const float *)this + 24, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  BOOL v191 = (float *)((char *)this + 88);
  vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 22, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  vDSP_vabs(*((const float **)this + 80), 1, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  bzero(*((void **)this + 133), 4 * *((unsigned int *)this + 13));
  int v33 = *((_DWORD *)this + 12);
  if ((v33 & 0x7FFFFFFF) != 0)
  {
    unint64_t v34 = 0;
    do
    {
      if (((*(void *)(*((void *)this + 22) + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
      {
        vDSP_vma((const float *)(*((void *)this + 121) + 4 * (*((_DWORD *)this + 13) * v34)), 1, (const float *)(*((void *)this + 124) + 4 * (*((_DWORD *)this + 13) * v34)), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        int v33 = *((_DWORD *)this + 12);
      }
      ++v34;
    }
    while (v34 < (2 * v33));
  }
  vDSP_vsq(*((const float **)this + 71), 1, *((float **)this + 74), 1, *((unsigned int *)this + 13));
  vDSP_vsmsma(*((const float **)this + 133), 1, (const float *)this + 2, *((const float **)this + 74), 1, __B, *((float **)this + 83), 1, *((unsigned int *)this + 13));
  vDSP_vsub(*((const float **)this + 71), 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
  vDSP_vabs(*((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
  unint64_t v35 = (const float *)((char *)this + 76);
  vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 19, *((float **)this + 133), 1, *((unsigned int *)this + 13));
  vDSP_svdiv((const float *)this + 19, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
  vDSP_vmul(*((const float **)this + 83), 1, *((const float **)this + 133), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  int v199 = *((_DWORD *)this + 13);
  vvexpf(*((float **)this + 86), *((const float **)this + 86), &v199);
  vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  if (*((_DWORD *)this + 27) == 1 && *((_DWORD *)this + 28))
  {
    vDSP_vneg(*((const float **)this + 166), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 133), 1, (const float *)this + 19, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vdiv(*((const float **)this + 166), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  }
  else
  {
    vDSP_vsmul(*((const float **)this + 86), 1, (const float *)this + 23, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  }
  unint64_t v36 = (const float *)((char *)this + 72);
  double __C = (float *)((char *)this + 36);
  vDSP_vclip(*((const float **)this + 86), 1, (const float *)this + 18, (const float *)this + 9, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 86), 1, (const float *)this + 19, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  vDSP_vdiv(*((const float **)this + 89), 1, *((const float **)this + 86), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  if (*((float *)this + 4) == 0.0)
  {
    vDSP_vclip(*((const float **)this + 89), 1, (const float *)this + 18, (const float *)this + 8, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  }
  else
  {
    vDSP_vsmsma(*((const float **)this + 52), 1, (const float *)this + 4, *((const float **)this + 89), 1, (const float *)this + 26, *((float **)this + 52), 1, *((unsigned int *)this + 13));
    uint64_t v37 = *((unsigned int *)this + 13);
    if (v37)
    {
      uint64_t v38 = 0;
      uint64_t v39 = *((void *)this + 52);
      uint64_t v40 = 4 * v37;
      do
      {
        float v41 = *((float *)this + 8);
        if (*(float *)(v39 + v38) > v41)
        {
          uint64_t v42 = *((void *)this + 89);
          if (*(float *)(v42 + v38) > v41) {
            *(float *)(v42 + v38) = v41;
          }
        }
        v38 += 4;
      }
      while (v40 != v38);
    }
  }
  float v194 = (float *)((char *)this + 72);
  float v195 = (float *)((char *)this + 76);
  if (*((_DWORD *)this + 34))
  {
    unint64_t v43 = (float *)((char *)this + 32);
    unsigned int v44 = 1;
    do
    {
      vDSP_vmin(*((const float **)this + 151), 1, *((const float **)this + 89), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
      vDSP_vsmsa(*((const float **)this + 89), 1, (const float *)this + 25, (const float *)this + 3, *((float **)this + 92), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v35, *((const float **)this + 92), 1, *((float **)this + 95), 1, *((unsigned int *)this + 13));
      vDSP_vneg(*((const float **)this + 92), 1, *((float **)this + 98), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 98), 1, v35, *((float **)this + 98), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v35, *((const float **)this + 98), 1, *((float **)this + 101), 1, *((unsigned int *)this + 13));
      vDSP_vsmul(*((const float **)this + 101), 1, __B, *((float **)this + 133), 1, *((unsigned int *)this + 13));
      unint64_t v45 = *((unsigned int *)this + 12);
      if (v45)
      {
        for (unint64_t j = 0; j < v45; ++j)
        {
          if (((*(void *)(*((void *)this + 22) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
          {
            vDSP_Length v47 = *((unsigned int *)this + 13);
            uint64_t v48 = *((void *)this + 127);
            unsigned int v49 = v47 * j + *((_DWORD *)this + 15);
            __A.realp = (float *)(v48 + 4 * (v47 * j));
            __A.imagp = (float *)(v48 + 4 * v49);
            uint64_t v50 = *((void *)this + 56);
            v201.realp = (float *)(v50 + 4 * (v47 * j));
            v201.imagp = (float *)(v50 + 4 * v49);
            vDSP_zrvmul(&v201, 1, *((const float **)this + 133), 1, &__A, 1, v47);
            unint64_t v45 = *((unsigned int *)this + 12);
          }
        }
      }
      vDSP_vsmul(*((const float **)this + 95), 1, (const float *)this + 2, *((float **)this + 104), 1, *((unsigned int *)this + 13));
      unint64_t v51 = *((unsigned int *)this + 12);
      if (v51)
      {
        for (unint64_t k = 0; k < v51; ++k)
        {
          if (((*(void *)(*((void *)this + 22) + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1) == 0)
          {
            vDSP_Length v53 = *((unsigned int *)this + 13);
            uint64_t v54 = *((void *)this + 130);
            unsigned int v55 = v53 * k + *((_DWORD *)this + 15);
            __A.realp = (float *)(v54 + 4 * (v53 * k));
            __A.imagp = (float *)(v54 + 4 * v55);
            uint64_t v56 = *((void *)this + 127);
            v201.realp = (float *)(v56 + 4 * (v53 * k));
            v201.imagp = (float *)(v56 + 4 * v55);
            uint64_t v57 = *((void *)this + 121);
            __D.realp = (float *)(v57 + 4 * (v53 * k));
            __D.imagp = (float *)(v57 + 4 * v55);
            vDSP_zrvmul(&__D, 1, *((const float **)this + 104), 1, &__A, 1, v53);
            vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
            unint64_t v51 = *((unsigned int *)this + 12);
          }
        }
      }
      vDSP_vmul(*((const float **)this + 95), 1, *((const float **)this + 71), 1, *((float **)this + 110), 1, *((unsigned int *)this + 13));
      bzero(*((void **)this + 133), 4 * *((unsigned int *)this + 13));
      int v58 = *((_DWORD *)this + 12);
      if ((v58 & 0x7FFFFFFF) != 0)
      {
        unint64_t v59 = 0;
        do
        {
          if (((*(void *)(*((void *)this + 22) + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
          {
            vDSP_vma((const float *)(*((void *)this + 130) + 4 * (*((_DWORD *)this + 13) * v59)), 1, (const float *)(*((void *)this + 124) + 4 * (*((_DWORD *)this + 13) * v59)), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
            int v58 = *((_DWORD *)this + 12);
          }
          ++v59;
        }
        while (v59 < (2 * v58));
      }
      vDSP_vadd(*((const float **)this + 110), 1, *((const float **)this + 101), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 92), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v35, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
      vDSP_vmma(*((const float **)this + 104), 1, *((const float **)this + 49), 1, *((const float **)this + 107), 1, *((const float **)this + 133), 1, *((float **)this + 80), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 80), 1, v191, *((float **)this + 80), 1, *((unsigned int *)this + 13));
      vDSP_vabs(*((const float **)this + 80), 1, *((float **)this + 80), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 71), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      vDSP_vneg(*((const float **)this + 136), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 136), 1, v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      vDSP_vthr(*((const float **)this + 136), 1, v194, *((float **)this + 136), 1, *((unsigned int *)this + 13));
      unint64_t v60 = *((unsigned int *)this + 12);
      if (v60)
      {
        for (unint64_t m = 0; m < v60; ++m)
        {
          if (((*(void *)(*((void *)this + 22) + ((m >> 3) & 0x1FFFFFFFFFFFFFF8)) >> m) & 1) == 0)
          {
            vDSP_Length v62 = *((unsigned int *)this + 13);
            uint64_t v63 = *((void *)this + 139);
            unsigned int v64 = v62 * m + *((_DWORD *)this + 15);
            __A.realp = (float *)(v63 + 4 * (v62 * m));
            __A.imagp = (float *)(v63 + 4 * v64);
            uint64_t v65 = *((void *)this + 127);
            v201.realp = (float *)(v65 + 4 * (v62 * m));
            v201.imagp = (float *)(v65 + 4 * v64);
            uint64_t v66 = *((void *)this + 130);
            __D.realp = (float *)(v66 + 4 * (v62 * m));
            __D.imagp = (float *)(v66 + 4 * v64);
            vDSP_zrvmul(&__D, 1, *((const float **)this + 136), 1, &__A, 1, v62);
            vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
            unint64_t v60 = *((unsigned int *)this + 12);
          }
        }
      }
      bzero(*((void **)this + 83), 4 * *((unsigned int *)this + 13));
      unint64_t v67 = *((unsigned int *)this + 12);
      if (v67)
      {
        for (unint64_t n = 0; n < v67; ++n)
        {
          if (((*(void *)(*((void *)this + 22) + ((n >> 3) & 0x1FFFFFFFFFFFFFF8)) >> n) & 1) == 0)
          {
            vDSP_Length v69 = *((unsigned int *)this + 13);
            uint64_t v70 = *((void *)this + 139);
            unsigned int v71 = v69 * n + *((_DWORD *)this + 15);
            __A.realp = (float *)(v70 + 4 * (v69 * n));
            __A.imagp = (float *)(v70 + 4 * v71);
            uint64_t v72 = *((void *)this + 56);
            v201.realp = (float *)(v72 + 4 * (v69 * n));
            v201.imagp = (float *)(v72 + 4 * v71);
            uint64_t v73 = *((void *)this + 124);
            int v74 = (const float *)(v73 + 4 * (v69 * n));
            unint64_t v75 = (const float *)(v73 + 4 * v71);
            vDSP_zvsub(&__A, 1, &v201, 1, &__A, 1, v69);
            vDSP_vma(__A.realp, 1, v74, 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
            vDSP_vma(__A.imagp, 1, v75, 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
            unint64_t v67 = *((unsigned int *)this + 12);
          }
        }
      }
      vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 95), 1, *((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
      vDSP_vabs(*((const float **)this + 83), 1, *((float **)this + 83), 1, *((unsigned int *)this + 13));
      unint64_t v35 = (const float *)((char *)this + 76);
      vDSP_vsadd(*((const float **)this + 80), 1, v195, *((float **)this + 133), 1, *((unsigned int *)this + 13));
      vDSP_svdiv(v195, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
      vDSP_vmul(*((const float **)this + 83), 1, *((const float **)this + 133), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      vvexpf(*((float **)this + 86), *((const float **)this + 86), &v199);
      vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      if (*((_DWORD *)this + 27) == 1 && *((_DWORD *)this + 28))
      {
        vDSP_vneg(*((const float **)this + 166), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 133), 1, v195, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vdiv(*((const float **)this + 166), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      }
      else
      {
        vDSP_vsmul(*((const float **)this + 86), 1, (const float *)this + 23, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      }
      unint64_t v36 = (const float *)((char *)this + 72);
      vDSP_vclip(*((const float **)this + 86), 1, v194, __C, *((float **)this + 86), 1, *((unsigned int *)this + 13));
      vDSP_vsadd(*((const float **)this + 86), 1, v195, *((float **)this + 89), 1, *((unsigned int *)this + 13));
      vDSP_vdiv(*((const float **)this + 89), 1, *((const float **)this + 86), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
      if (v44 < *((_DWORD *)this + 34))
      {
        if (*((float *)this + 4) == 0.0)
        {
          vDSP_vclip(*((const float **)this + 89), 1, v194, (const float *)this + 8, *((float **)this + 89), 1, *((unsigned int *)this + 13));
        }
        else
        {
          vDSP_vsmsma(*((const float **)this + 52), 1, (const float *)this + 4, *((const float **)this + 89), 1, (const float *)this + 26, *((float **)this + 52), 1, *((unsigned int *)this + 13));
          uint64_t v76 = *((unsigned int *)this + 13);
          if (v76)
          {
            uint64_t v77 = 0;
            uint64_t v78 = *((void *)this + 52);
            uint64_t v79 = 4 * v76;
            do
            {
              float v80 = *v43;
              if (*(float *)(v78 + v77) > *v43)
              {
                uint64_t v81 = *((void *)this + 89);
                if (*(float *)(v81 + v77) > v80) {
                  *(float *)(v81 + v77) = v80;
                }
              }
              v77 += 4;
            }
            while (v79 != v77);
          }
        }
      }
      ++v44;
    }
    while (v44 <= *((_DWORD *)this + 34));
  }
  vDSP_vmin(*((const float **)this + 151), 1, *((const float **)this + 89), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
  vDSP_vneg(*((const float **)this + 89), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 86), 1, v35, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  std::string::size_type v190 = (float *)((char *)this + 40);
  vDSP_vthr(*((const float **)this + 86), 1, (const float *)this + 10, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vdiv(*((const float **)this + 86), 1, *((const float **)this + 89), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vclip(*((const float **)this + 86), 1, v36, __C, *((float **)this + 86), 1, *((unsigned int *)this + 13));
  vDSP_vsmsa(*((const float **)this + 89), 1, (const float *)this + 25, (const float *)this + 3, *((float **)this + 92), 1, *((unsigned int *)this + 13));
  vDSP_svdiv(v35, *((const float **)this + 92), 1, *((float **)this + 95), 1, *((unsigned int *)this + 13));
  vDSP_vneg(*((const float **)this + 92), 1, *((float **)this + 98), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 98), 1, v35, *((float **)this + 98), 1, *((unsigned int *)this + 13));
  vDSP_svdiv(v35, *((const float **)this + 98), 1, *((float **)this + 101), 1, *((unsigned int *)this + 13));
  vDSP_vsmul(*((const float **)this + 101), 1, __B, *((float **)this + 133), 1, *((unsigned int *)this + 13));
  unint64_t v82 = *((unsigned int *)this + 12);
  if (v82)
  {
    for (iunint64_t i = 0; ii < v82; ++ii)
    {
      if (((*(void *)(*((void *)this + 22) + ((ii >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ii) & 1) == 0)
      {
        vDSP_Length v84 = *((unsigned int *)this + 13);
        uint64_t v85 = *((void *)this + 127);
        unsigned int v86 = *((_DWORD *)this + 15) + v84 * ii;
        __A.realp = (float *)(v85 + 4 * (v84 * ii));
        __A.imagp = (float *)(v85 + 4 * v86);
        uint64_t v87 = *((void *)this + 56);
        v201.realp = (float *)(v87 + 4 * (v84 * ii));
        v201.imagp = (float *)(v87 + 4 * v86);
        vDSP_zrvmul(&v201, 1, *((const float **)this + 133), 1, &__A, 1, v84);
        unint64_t v82 = *((unsigned int *)this + 12);
      }
    }
  }
  vDSP_vsmul(*((const float **)this + 95), 1, (const float *)this + 2, *((float **)this + 104), 1, *((unsigned int *)this + 13));
  unint64_t v88 = *((unsigned int *)this + 12);
  if (v88)
  {
    for (junint64_t j = 0; jj < v88; ++jj)
    {
      if (((*(void *)(*((void *)this + 22) + ((jj >> 3) & 0x1FFFFFFFFFFFFFF8)) >> jj) & 1) == 0)
      {
        vDSP_Length v90 = *((unsigned int *)this + 13);
        uint64_t v91 = *((void *)this + 130);
        unsigned int v92 = *((_DWORD *)this + 15) + v90 * jj;
        __A.realp = (float *)(v91 + 4 * (v90 * jj));
        __A.imagp = (float *)(v91 + 4 * v92);
        uint64_t v93 = *((void *)this + 127);
        v201.realp = (float *)(v93 + 4 * (v90 * jj));
        v201.imagp = (float *)(v93 + 4 * v92);
        uint64_t v94 = *((void *)this + 121);
        __D.realp = (float *)(v94 + 4 * (v90 * jj));
        __D.imagp = (float *)(v94 + 4 * v92);
        vDSP_zrvmul(&__D, 1, *((const float **)this + 104), 1, &__A, 1, v90);
        vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
        unint64_t v88 = *((unsigned int *)this + 12);
      }
    }
  }
  vDSP_vmul(*((const float **)this + 95), 1, *((const float **)this + 71), 1, *((float **)this + 110), 1, *((unsigned int *)this + 13));
  bzero(*((void **)this + 133), 4 * *((unsigned int *)this + 13));
  int v95 = *((_DWORD *)this + 12);
  if ((v95 & 0x7FFFFFFF) != 0)
  {
    unint64_t v96 = 0;
    do
    {
      if (((*(void *)(*((void *)this + 22) + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
      {
        vDSP_vma((const float *)(*((void *)this + 130) + 4 * (*((_DWORD *)this + 13) * v96)), 1, (const float *)(*((void *)this + 124) + 4 * (*((_DWORD *)this + 13) * v96)), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        int v95 = *((_DWORD *)this + 12);
      }
      ++v96;
    }
    while (v96 < (2 * v95));
  }
  vDSP_vadd(*((const float **)this + 110), 1, *((const float **)this + 101), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
  vDSP_vmul(*((const float **)this + 92), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
  vDSP_svdiv(v35, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
  vDSP_vmma(*((const float **)this + 104), 1, *((const float **)this + 49), 1, *((const float **)this + 107), 1, *((const float **)this + 133), 1, *((float **)this + 49), 1, *((unsigned int *)this + 13));
  memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
  memcpy(*((void **)this + 62), (const void *)(*((void *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  memcpy((void *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), *((const void **)this + 127), 4 * *((unsigned int *)this + 15));
  memcpy((void *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), (const void *)(*((void *)this + 127) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  vDSP_vfill(v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
  bzero(*((void **)this + 145), 4 * *((unsigned int *)this + 13));
  unsigned int v97 = *((_DWORD *)this + 12);
  if (v97)
  {
    unint64_t v98 = 0;
    long long v99 = (const float *)((char *)this + 44);
    uint64_t v100 = 16;
    uint64_t v101 = 1;
    do
    {
      if ((*(void *)(*((void *)this + 22) + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v98))
      {
        unint64_t v102 = v98 + 1;
      }
      else
      {
        vDSP_zvmags((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v98), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 98), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        __N = *(float **)(*((void *)this + 25) + 24 * v98);
        vDSP_vmma(*((const float **)this + 92), 1, __N, 1, *((const float **)this + 107), 1, *((const float **)this + 68), 1, __N, 1, *((unsigned int *)this + 13));
        uint64_t v103 = *(float **)(*((void *)this + 25) + 24 * v98);
        vDSP_vthr(v103, 1, v99, v103, 1, *((unsigned int *)this + 13));
        vDSP_vneg(*((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vdiv(*(const float **)(*((void *)this + 25) + 24 * v98), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_zrvmul((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v98), 1, *((const float **)this + 107), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
        vDSP_zvconj((const DSPSplitComplex *)((char *)this + 952), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 107), 1, v35, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vthr(*((const float **)this + 107), 1, v194, *((float **)this + 107), 1, *((unsigned int *)this + 13));
        vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
        vvlogf(*((float **)this + 133), *(const float **)(*((void *)this + 25) + 24 * v98), &v199);
        vDSP_vadd(*((const float **)this + 133), 1, *((const float **)this + 145), 1, *((float **)this + 145), 1, *((unsigned int *)this + 13));
        unint64_t v102 = v98 + 1;
        unsigned int v97 = *((_DWORD *)this + 12);
        if (v98 + 1 < 2 * v97)
        {
          uint64_t v104 = v100;
          unint64_t v105 = v101;
          do
          {
            if (((*(void *)(*((void *)this + 22) + ((v105 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v105) & 1) == 0)
            {
              if (v105 >= v97)
              {
                int v106 = (const DSPSplitComplex *)(*(void *)(*((void *)this + 37) + 24 * v98) + v104);
                vDSP_zrvmul(v106, 1, *((const float **)this + 104), 1, v106, 1, *((unsigned int *)this + 13));
              }
              __Na = (float32x4_t **)(*(void *)(*((void *)this + 37) + 24 * v98) + v104);
              aDSP_zvmama((float32x4_t *)(*((void *)this + 65) + 16 * v98), 1, __Na, 1, (float32x4_t **)(*((void *)this + 65) + v104), 1, (float32x4_t **)this + 119, 1, __Na, 1, *((unsigned int *)this + 13));
              unsigned int v97 = *((_DWORD *)this + 12);
            }
            ++v105;
            v104 += 16;
          }
          while (v105 < 2 * v97);
          long long v99 = (const float *)((char *)this + 44);
        }
      }
      ++v101;
      v100 += 16;
      unint64_t v98 = v102;
      BOOL v107 = v102 >= v97;
      unint64_t v35 = (const float *)((char *)this + 76);
    }
    while (!v107);
  }
  memcpy(*((void **)this + 130), (const void *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  memcpy((void *)(*((void *)this + 130) + 4 * *((unsigned int *)this + 15)), (const void *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
  vDSP_vneg(*((const float **)this + 136), 1, *((float **)this + 71), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 71), 1, v35, *((float **)this + 71), 1, *((unsigned int *)this + 13));
  vDSP_vmul(*((const float **)this + 101), 1, *((const float **)this + 71), 1, *((float **)this + 71), 1, *((unsigned int *)this + 13));
  vDSP_vsadd(*((const float **)this + 49), 1, v191, *((float **)this + 80), 1, *((unsigned int *)this + 13));
  if (*((unsigned char *)this + 140))
  {
    memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
    memcpy(*((void **)this + 62), (const void *)(*((void *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    vDSP_vfill(v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
    bzero(*((void **)this + 148), 4 * *((unsigned int *)this + 13));
    unint64_t v108 = *((unsigned int *)this + 12);
    unsigned int v109 = (const float *)((char *)this + 8);
    if (v108)
    {
      unint64_t v110 = 0;
      uint64_t v111 = 1;
      uint64_t v112 = 16;
      do
      {
        if ((*(void *)(*((void *)this + 22) + ((v110 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v110))
        {
          unint64_t v113 = v110 + 1;
        }
        else
        {
          vDSP_zvmags((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v110), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
          vDSP_vsmul(*((const float **)this + 136), 1, __B, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vsmul(*(const float **)(*((void *)this + 28) + 24 * v110), 1, v109, *((float **)this + 133), 1, *((unsigned int *)this + 13));
          vDSP_vma(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
          vDSP_vthr(*((const float **)this + 133), 1, (const float *)this + 11, *((float **)this + 133), 1, *((unsigned int *)this + 13));
          vDSP_vneg(*((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vdiv(*((const float **)this + 133), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_zrvmul((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v110), 1, *((const float **)this + 107), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_zvconj((const DSPSplitComplex *)((char *)this + 952), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vsadd(*((const float **)this + 107), 1, v35, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vthr(*((const float **)this + 107), 1, v194, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
          vvlogf(*((float **)this + 133), *((const float **)this + 133), &v199);
          vDSP_vadd(*((const float **)this + 133), 1, *((const float **)this + 148), 1, *((float **)this + 148), 1, *((unsigned int *)this + 13));
          unint64_t v113 = v110 + 1;
          unint64_t v108 = *((unsigned int *)this + 12);
          if (v110 + 1 < v108)
          {
            uint64_t v114 = v112;
            unint64_t v115 = v111;
            do
            {
              if (((*(void *)(*((void *)this + 22) + ((v115 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v115) & 1) == 0)
              {
                vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 46) + 24 * v110) + v114), 1, (const DSPSplitComplex *)(*((void *)this + 65) + 16 * v110), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v114), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v114), 1, *((unsigned int *)this + 13));
                unint64_t v108 = *((unsigned int *)this + 12);
              }
              ++v115;
              v114 += 16;
            }
            while (v115 < v108);
            unsigned int v109 = (const float *)((char *)this + 8);
          }
        }
        ++v111;
        v112 += 16;
        unint64_t v110 = v113;
        BOOL v107 = v113 >= v108;
        unint64_t v35 = (const float *)((char *)this + 76);
      }
      while (!v107);
    }
    vDSP_vneg(*((const float **)this + 136), 1, *((float **)this + 142), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 142), 1, v35, *((float **)this + 142), 1, *((unsigned int *)this + 13));
    vDSP_vsmul(*((const float **)this + 142), 1, (const float *)this + 39, *((float **)this + 142), 1, *((unsigned int *)this + 13));
    v203[0] = 0.0;
    vDSP_vthr(*((const float **)this + 86), 1, v190, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vvlogf(*((float **)this + 86), *((const float **)this + 86), &v199);
    vDSP_meanv(*((const float **)this + 86), 1, v203, *((unsigned int *)this + 13));
    v203[0] = expf(v203[0]);
    float v198 = (float)(*((float *)this + 19)
                 - (float)(*((float *)this + 19) - (float)(v203[0] / (float)(v203[0] + *((float *)this + 19)))))
         / fmaxf(*((float *)this + 19) - (float)(v203[0] / (float)(v203[0] + *((float *)this + 19))), *((float *)this + 10));
    vDSP_vsub(*((const float **)this + 145), 1, *((const float **)this + 148), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vthr(*((const float **)this + 133), 1, v194, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vneg(*((const float **)this + 133), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vDSP_vsub(*((const float **)this + 142), 1, *((const float **)this + 71), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vabs(*((const float **)this + 133), 1, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vadd(*((const float **)this + 133), 1, *((const float **)this + 86), 1, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vvexpf(*((float **)this + 86), *((const float **)this + 86), &v199);
    vDSP_vsmul(*((const float **)this + 86), 1, &v198, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vDSP_vclip(*((const float **)this + 86), 1, v194, __C, *((float **)this + 86), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 86), 1, v35, *((float **)this + 89), 1, *((unsigned int *)this + 13));
    vDSP_vdiv(*((const float **)this + 89), 1, *((const float **)this + 86), 1, *((float **)this + 89), 1, *((unsigned int *)this + 13));
    vDSP_vsmsa(*((const float **)this + 89), 1, (const float *)this + 25, (const float *)this + 3, *((float **)this + 92), 1, *((unsigned int *)this + 13));
    vDSP_svdiv(v35, *((const float **)this + 92), 1, *((float **)this + 95), 1, *((unsigned int *)this + 13));
    vDSP_vneg(*((const float **)this + 92), 1, *((float **)this + 98), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 98), 1, v35, *((float **)this + 98), 1, *((unsigned int *)this + 13));
    vDSP_svdiv(v35, *((const float **)this + 98), 1, *((float **)this + 101), 1, *((unsigned int *)this + 13));
    vDSP_vsmul(*((const float **)this + 92), 1, (const float *)this + 38, *((float **)this + 104), 1, *((unsigned int *)this + 13));
    vDSP_vsmul(*((const float **)this + 98), 1, (const float *)this + 39, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    unint64_t v116 = *((unsigned int *)this + 12);
    if (v116)
    {
      for (kunint64_t k = 0; kk < v116; ++kk)
      {
        if (((*(void *)(*((void *)this + 22) + ((kk >> 3) & 0x1FFFFFFFFFFFFFF8)) >> kk) & 1) == 0)
        {
          vDSP_Length v118 = *((unsigned int *)this + 13);
          uint64_t v119 = *((void *)this + 127);
          unsigned int v120 = *((_DWORD *)this + 15) + v118 * kk;
          __A.realp = (float *)(v119 + 4 * (v118 * kk));
          __A.imagp = (float *)(v119 + 4 * v120);
          uint64_t v121 = *((void *)this + 56);
          v201.realp = (float *)(v121 + 4 * (v118 * kk));
          v201.imagp = (float *)(v121 + 4 * v120);
          vDSP_zrvmul(&v201, 1, *((const float **)this + 133), 1, &__A, 1, v118);
          unint64_t v116 = *((unsigned int *)this + 12);
        }
      }
    }
    memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
    memcpy(*((void **)this + 62), (const void *)(*((void *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    memcpy((void *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), *((const void **)this + 127), 4 * *((unsigned int *)this + 15));
    memcpy((void *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), (const void *)(*((void *)this + 127) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    vDSP_vfill(v35, *((float **)this + 136), 1, *((unsigned int *)this + 13));
    unsigned int v122 = *((_DWORD *)this + 12);
    if (v122)
    {
      unint64_t v123 = 0;
      uint64_t v124 = 16;
      uint64_t v125 = 1;
      do
      {
        if ((*(void *)(*((void *)this + 22) + ((v123 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v123))
        {
          unint64_t v126 = v123 + 1;
        }
        else
        {
          vDSP_zvmags((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v123), 1, *((float **)this + 68), 1, *((unsigned int *)this + 13));
          vDSP_vsmul(*((const float **)this + 136), 1, __B, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          double v127 = *(float **)(*((void *)this + 28) + 24 * v123);
          vDSP_vsmul(v127, 1, v109, v127, 1, *((unsigned int *)this + 13));
          unsigned int v128 = *(float **)(*((void *)this + 28) + 24 * v123);
          vDSP_vma(*((const float **)this + 107), 1, *((const float **)this + 68), 1, v128, 1, v128, 1, *((unsigned int *)this + 13));
          float v129 = *(float **)(*((void *)this + 28) + 24 * v123);
          vDSP_vthr(v129, 1, (const float *)this + 11, v129, 1, *((unsigned int *)this + 13));
          vDSP_vneg(*((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vdiv(*(const float **)(*((void *)this + 28) + 24 * v123), 1, *((const float **)this + 107), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_zrvmul((const DSPSplitComplex *)(*((void *)this + 65) + 16 * v123), 1, *((const float **)this + 107), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_zvconj((const DSPSplitComplex *)((char *)this + 952), 1, (const DSPSplitComplex *)((char *)this + 952), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 107), 1, *((const float **)this + 68), 1, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vsadd(*((const float **)this + 107), 1, v35, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vthr(*((const float **)this + 107), 1, v194, *((float **)this + 107), 1, *((unsigned int *)this + 13));
          vDSP_vmul(*((const float **)this + 136), 1, *((const float **)this + 107), 1, *((float **)this + 136), 1, *((unsigned int *)this + 13));
          unint64_t v126 = v123 + 1;
          unsigned int v122 = *((_DWORD *)this + 12);
          if (v123 + 1 < 2 * v122)
          {
            uint64_t v130 = v124;
            unint64_t v131 = v125;
            do
            {
              if (((*(void *)(*((void *)this + 22) + ((v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v131) & 1) == 0)
              {
                if (v131 >= v122)
                {
                  float v132 = (const DSPSplitComplex *)(*(void *)(*((void *)this + 46) + 24 * v123) + v130);
                  vDSP_zrvmul(v132, 1, *((const float **)this + 104), 1, v132, 1, *((unsigned int *)this + 13));
                }
                __Nb = (float32x4_t **)(*(void *)(*((void *)this + 46) + 24 * v123) + v130);
                aDSP_zvmama((float32x4_t *)(*((void *)this + 65) + 16 * v123), 1, __Nb, 1, (float32x4_t **)(*((void *)this + 65) + v130), 1, (float32x4_t **)this + 119, 1, __Nb, 1, *((unsigned int *)this + 13));
                unsigned int v122 = *((_DWORD *)this + 12);
              }
              ++v131;
              v130 += 16;
            }
            while (v131 < 2 * v122);
          }
          unsigned int v109 = (const float *)((char *)this + 8);
        }
        ++v125;
        v124 += 16;
        unint64_t v123 = v126;
        BOOL v107 = v126 >= v122;
        unint64_t v35 = (const float *)((char *)this + 76);
      }
      while (!v107);
    }
    memcpy(*((void **)this + 130), (const void *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    memcpy((void *)(*((void *)this + 130) + 4 * *((unsigned int *)this + 15)), (const void *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
    unint64_t v133 = *((unsigned int *)this + 12);
    if (v133)
    {
      for (munint64_t m = 0; mm < v133; ++mm)
      {
        if (((*(void *)(*((void *)this + 22) + ((mm >> 3) & 0x1FFFFFFFFFFFFFF8)) >> mm) & 1) == 0)
        {
          vDSP_Length v135 = *((unsigned int *)this + 13);
          uint64_t v136 = *((void *)this + 139);
          unsigned int v137 = v135 * mm + *((_DWORD *)this + 15);
          __A.realp = (float *)(v136 + 4 * (v135 * mm));
          __A.imagp = (float *)(v136 + 4 * v137);
          uint64_t v138 = *((void *)this + 127);
          v201.realp = (float *)(v138 + 4 * (v135 * mm));
          v201.imagp = (float *)(v138 + 4 * v137);
          uint64_t v139 = *((void *)this + 130);
          __D.realp = (float *)(v139 + 4 * (v135 * mm));
          __D.imagp = (float *)(v139 + 4 * v137);
          vDSP_zrvmul(&__D, 1, *((const float **)this + 136), 1, &__A, 1, v135);
          vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
          unint64_t v133 = *((unsigned int *)this + 12);
        }
      }
      if (v133)
      {
        for (nunint64_t n = 0; nn < v133; ++nn)
        {
          if (((*(void *)(*((void *)this + 22) + ((nn >> 3) & 0x1FFFFFFFFFFFFFF8)) >> nn) & 1) == 0)
          {
            vDSP_Length v141 = *((unsigned int *)this + 13);
            uint64_t v142 = *((void *)this + 56);
            unsigned int v143 = v141 * nn + *((_DWORD *)this + 15);
            __A.realp = (float *)(v142 + 4 * (v141 * nn));
            __A.imagp = (float *)(v142 + 4 * v143);
            uint64_t v144 = *((void *)this + 139);
            v201.realp = (float *)(v144 + 4 * (v141 * nn));
            v201.imagp = (float *)(v144 + 4 * v143);
            vDSP_zvsub(&__A, 1, &v201, 1, &__A, 1, v141);
            unint64_t v133 = *((unsigned int *)this + 12);
          }
        }
      }
    }
  }
  else
  {
    unint64_t v145 = *((unsigned int *)this + 12);
    if (v145)
    {
      for (unint64_t i1 = 0; i1 < v145; ++i1)
      {
        if (((*(void *)(*((void *)this + 22) + ((i1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i1) & 1) == 0)
        {
          vDSP_Length v147 = *((unsigned int *)this + 13);
          uint64_t v148 = *((void *)this + 139);
          unsigned int v149 = *((_DWORD *)this + 15) + v147 * i1;
          __A.realp = (float *)(v148 + 4 * (v147 * i1));
          __A.imagp = (float *)(v148 + 4 * v149);
          uint64_t v150 = *((void *)this + 127);
          v201.realp = (float *)(v150 + 4 * (v147 * i1));
          v201.imagp = (float *)(v150 + 4 * v149);
          uint64_t v151 = *((void *)this + 130);
          __D.realp = (float *)(v151 + 4 * (v147 * i1));
          __D.imagp = (float *)(v151 + 4 * v149);
          vDSP_zrvmul(&__D, 1, *((const float **)this + 136), 1, &__A, 1, v147);
          vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, *((unsigned int *)this + 13));
          unint64_t v145 = *((unsigned int *)this + 12);
        }
      }
    }
    vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 5, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_vsadd(*((const float **)this + 133), 1, v190, *((float **)this + 133), 1, *((unsigned int *)this + 13));
    vDSP_Length v152 = *((unsigned int *)this + 13);
    float v153 = (float *)*((void *)this + 133);
    if (v152)
    {
      int v154 = (float *)*((void *)this + 133);
      uint64_t v155 = *((unsigned int *)this + 13);
      do
      {
        if (*v154 == *v194) {
          *int v154 = *v190;
        }
        ++v154;
        --v155;
      }
      while (v155);
    }
    else
    {
      vDSP_Length v152 = 0;
    }
    vDSP_svdiv(v35, v153, 1, v153, 1, v152);
    unint64_t v156 = *((unsigned int *)this + 12);
    if (v156)
    {
      for (unint64_t i2 = 0; i2 < v156; ++i2)
      {
        if (((*(void *)(*((void *)this + 22) + ((i2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i2) & 1) == 0)
        {
          vDSP_Length v158 = *((unsigned int *)this + 13);
          uint64_t v159 = *((void *)this + 56);
          unsigned int v160 = *((_DWORD *)this + 15) + v158 * i2;
          __A.realp = (float *)(v159 + 4 * (v158 * i2));
          __A.imagp = (float *)(v159 + 4 * v160);
          uint64_t v161 = *((void *)this + 139);
          v201.realp = (float *)(v161 + 4 * (v158 * i2));
          v201.imagp = (float *)(v161 + 4 * v160);
          vDSP_zvsub(&v201, 1, &__A, 1, &__A, 1, v158);
          vDSP_zrvmul(&__A, 1, *((const float **)this + 133), 1, &__A, 1, *((unsigned int *)this + 13));
          unint64_t v156 = *((unsigned int *)this + 12);
        }
      }
    }
  }
  vDSP_meanv(*((const float **)this + 89), 1, (float *)this + 380, *((unsigned int *)this + 13));
  float v198 = 0.0;
  uint64_t v197 = 0;
  float v196 = 0.0;
  memcpy(*((void **)this + 169), *((const void **)this + 71), 4 * *((unsigned int *)this + 13));
  memcpy(*((void **)this + 172), *((const void **)this + 49), 4 * *((unsigned int *)this + 13));
  if (*((_DWORD *)this + 27) == 1)
  {
    int v162 = *((_DWORD *)this + 28);
    if (v162)
    {
      uint64_t v163 = (v162 - 1);
      if (v162 != 1)
      {
        unsigned int v164 = v162 - 2;
        uint64_t v165 = *((void *)this + 160);
        uint64_t v166 = *((void *)this + 163);
        do
        {
          uint64_t v167 = 4 * v163;
          *(_DWORD *)(v165 + v167) = *(_DWORD *)(v165 + 4 * v164);
          *(_DWORD *)(v166 + v167) = *(_DWORD *)(v166 + 4 * v164--);
          --v163;
        }
        while (v163);
      }
      vDSP_meanv(*((const float **)this + 169), 1, &v198, *((unsigned int *)this + 13));
      vDSP_meanv(*((const float **)this + 172), 1, (float *)&v197 + 1, *((unsigned int *)this + 13));
      **((float **)this + 163) = *((float *)this + 30) * *((float *)&v197 + 1);
      BOOL v168 = (float *)*((void *)this + 160);
      *BOOL v168 = *((float *)this + 30) * v198;
      vDSP_minv(v168, 1, (float *)&v197, *((unsigned int *)this + 28));
      vDSP_minv(*((const float **)this + 163), 1, &v196, *((unsigned int *)this + 28));
      float v170 = v196;
      float v169 = *(float *)&v197;
      LODWORD(__A.realp) = 0;
      vDSP_meanv(*((const float **)this + 169), 1, (float *)&__A, *((unsigned int *)this + 13));
      float v171 = 0.0;
      if (*(float *)&__A.realp < v169) {
        float v171 = 1.0;
      }
      *(float *)&v201.realp = v171;
      vDSP_Length v172 = *((unsigned int *)this + 13);
      if (v172)
      {
        uint64_t v173 = 0;
        uint64_t v174 = *((void *)this + 172);
        unint64_t v175 = (float *)*((void *)this + 181);
        do
        {
          v175[v173] = (float)(v170 - *(float *)(v174 + v173 * 4)) / (float)(v170 - *((float *)this + 21));
          ++v173;
        }
        while (v172 != v173);
      }
      else
      {
        vDSP_Length v172 = 0;
        unint64_t v175 = (float *)*((void *)this + 181);
      }
      LODWORD(__D.realp) = 0;
      v203[0] = 1.0;
      vDSP_vclip(v175, 1, (const float *)&__D, v203, v175, 1, v172);
      vDSP_Length v176 = *((unsigned int *)this + 13);
      if (v176)
      {
        uint64_t v177 = 0;
        float v178 = (float *)*((void *)this + 172);
        uint64_t v179 = *((void *)this + 169);
        do
        {
          float v180 = v178[v177];
          if (v180 >= v170 || v180 < *((float *)this + 21))
          {
            int v182 = (const float *)*((void *)this + 184);
            float v183 = 0.0;
          }
          else
          {
            int v182 = (const float *)*((void *)this + 184);
            float v183 = 0.0;
            if (*(float *)(v179 + v177 * 4) < v169) {
              float v183 = *(float *)(*((void *)this + 181) + v177 * 4);
            }
          }
          v182[v177++] = v183;
        }
        while (v176 != v177);
        float v184 = (float *)*((void *)this + 169);
        vDSP_Length v185 = v176;
        uint64_t v186 = (float *)v182;
        do
        {
          if (*v178 < *((float *)this + 21) && *v184 < v169) {
            *uint64_t v186 = 1.0;
          }
          ++v186;
          ++v184;
          ++v178;
          --v185;
        }
        while (v185);
      }
      else
      {
        vDSP_Length v176 = 0;
        int v182 = (const float *)*((void *)this + 184);
      }
      vDSP_vsmul(v182, 1, (const float *)&v201, *((float **)this + 166), 1, v176);
      vDSP_vclip(*((const float **)this + 166), 1, (const float *)this + 33, (const float *)this + 32, *((float **)this + 166), 1, *((unsigned int *)this + 13));
    }
  }
}

void PMWF_FAST_GS_vDSP::ProcessBufferList(PMWF_FAST_GS_vDSP *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, int a7)
{
  int v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 42) = v12;
  if (v12)
  {
    vDSP_Length v13 = a4;
    unint64_t v14 = 0;
    int v15 = a2;
    p_mData = &a2->mBuffers[0].mData;
    float v17 = 0.0;
    do
    {
      float v18 = cblas_sdot(2 * *((_DWORD *)this + 13) - 2, (const float *)*p_mData, 1, (const float *)*p_mData, 1);
      uint64_t v19 = *((void *)this + 22);
      *(void *)(v19 + 8 * (v14 >> 6)) &= ~(1 << v14);
      unint64_t v20 = *((unsigned int *)this + 12);
      unint64_t v21 = (unint64_t)(v14 + v20) >> 6;
      uint64_t v22 = 1 << (v14 + v20);
      *(void *)(v19 + 8 * v21) &= ~v22;
      if (v18 == 0.0)
      {
        --*((_DWORD *)this + 42);
        *(void *)(v19 + 8 * (v14 >> 6)) |= 1 << v14;
        *(void *)(v19 + 8 * v21) |= v22;
      }
      else
      {
        float v17 = v17 + v18;
      }
      ++v14;
      p_mData += 2;
    }
    while (v14 < v20);
    unsigned int v23 = *((_DWORD *)this + 42);
    if (v23)
    {
      float v24 = (float)v23;
      float v25 = v17 / (float)v23;
    }
    else
    {
      float v24 = 0.0;
      float v25 = 0.0;
    }
    a4 = v13;
    a2 = v15;
  }
  else
  {
    unsigned int v23 = 0;
    unint64_t v20 = 0;
    float v24 = 0.0;
    float v25 = 0.0;
  }
  unint64_t v26 = (float *)((char *)this + 40);
  float v27 = *((float *)this + 10);
  *((float *)this + 21) = v24;
  *((float *)this + 22) = -v24;
  if (v25 <= v27 || v23 < 2 || (LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    if (v20)
    {
      unint64_t v33 = 0;
      unint64_t v34 = &a2->mBuffers[0].mData;
      unint64_t v35 = &a4->mBuffers[0].mData;
      do
      {
        uint64_t v37 = *v35;
        v35 += 2;
        unint64_t v36 = v37;
        uint64_t v38 = *v34;
        v34 += 2;
        memcpy(v36, v38, 4 * (2 * *((_DWORD *)this + 13) - 2));
        ++v33;
        unint64_t v39 = *((unsigned int *)this + 12);
      }
      while (v33 < v39);
      if (v39 && a6 != 0)
      {
        unint64_t v41 = 0;
        uint64_t v42 = &a3->mBuffers[0].mData;
        unint64_t v43 = &a5->mBuffers[0].mData;
        do
        {
          unint64_t v45 = *v43;
          v43 += 2;
          unsigned int v44 = v45;
          unint64_t v46 = *v42;
          v42 += 2;
          memcpy(v44, v46, 4 * (2 * *((_DWORD *)this + 13) - 2));
          ++v41;
        }
        while (v41 < *((unsigned int *)this + 12));
      }
    }
  }
  else
  {
    vDSP_Length v135 = a4;
    uint64_t v136 = a2;
    if (v20)
    {
      unint64_t v28 = 0;
      uint64_t v29 = &a2->mBuffers[0].mData;
      do
      {
        if (((*(void *)(*((void *)this + 22) + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
        {
          vDSP_vsmul((const float *)*v29, 1, (const float *)this + 40, (float *)(*((void *)this + 56) + 4 * (*((_DWORD *)this + 13) * v28)), 1, *((unsigned int *)this + 13));
          vDSP_vsmul((const float *)*v29 + *((unsigned int *)this + 13), 1, (const float *)this + 40, (float *)(*((void *)this + 56)+ 4 * (*((_DWORD *)this + 15) + *((_DWORD *)this + 13) * v28 + 1)), 1, (*((_DWORD *)this + 13) - 2));
          unint64_t v20 = *((unsigned int *)this + 12);
        }
        ++v28;
        v29 += 2;
      }
      while (v28 < v20);
      if (v20 && a6)
      {
        unint64_t v30 = 0;
        int v31 = &a3->mBuffers[0].mData;
        do
        {
          if (((*(void *)(*((void *)this + 22) + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
          {
            vDSP_vsmul((const float *)*v31, 1, (const float *)this + 40, (float *)(*((void *)this + 157) + 4 * (*((_DWORD *)this + 13) * v30)), 1, *((unsigned int *)this + 13));
            vDSP_vsmul((const float *)*v31 + *((unsigned int *)this + 13), 1, (const float *)this + 40, (float *)(*((void *)this + 157)+ 4 * (*((_DWORD *)this + 15) + *((_DWORD *)this + 13) * v30 + 1)), 1, (*((_DWORD *)this + 13) - 2));
            unint64_t v20 = *((unsigned int *)this + 12);
          }
          ++v30;
          v31 += 2;
        }
        while (v30 < v20);
      }
    }
    unint64_t v133 = a3;
    uint64_t v134 = a5;
    if (a7)
    {
      PMWF_FAST_GS_vDSP::ProcessOneFrame(this);
      unint64_t v32 = v136;
    }
    else
    {
      int v47 = *((unsigned __int8 *)this + 140);
      memcpy(*((void **)this + 59), *((const void **)this + 56), 4 * *((unsigned int *)this + 15));
      memcpy(*((void **)this + 62), (const void *)(*((void *)this + 56) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      unsigned int v48 = *((_DWORD *)this + 12);
      if (v47)
      {
        if (v48)
        {
          unint64_t v49 = 0;
          uint64_t v50 = 1;
          uint64_t v51 = 16;
          do
          {
            unint64_t v52 = v49 + 1;
            if (((*(void *)(*((void *)this + 22) + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v49) & 1) == 0
              && v52 < 2 * v48)
            {
              uint64_t v53 = v51;
              unint64_t v54 = v50;
              do
              {
                if (((*(void *)(*((void *)this + 22) + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 46) + 24 * v49) + v53), 1, (const DSPSplitComplex *)(*((void *)this + 65) + 16 * v49), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v53), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v53), 1, *((unsigned int *)this + 13));
                  unsigned int v48 = *((_DWORD *)this + 12);
                }
                ++v54;
                v53 += 16;
              }
              while (v54 < 2 * v48);
            }
            ++v50;
            v51 += 16;
            ++v49;
          }
          while (v52 < v48);
        }
        vDSP_vneg((const float *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((void *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        unint64_t v55 = *((unsigned int *)this + 12);
        a5 = v134;
        unint64_t v32 = v136;
        if (v55)
        {
          for (unint64_t i = 0; i < v55; ++i)
          {
            if (((*(void *)(*((void *)this + 22) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
            {
              vDSP_Length v57 = *((unsigned int *)this + 13);
              uint64_t v58 = *((void *)this + 56);
              unsigned int v59 = *((_DWORD *)this + 15) + v57 * i;
              __C.realp = (float *)(v58 + 4 * (v57 * i));
              __C.imagp = (float *)(v58 + 4 * v59);
              uint64_t v60 = *((void *)this + 139);
              __B.realp = (float *)(v60 + 4 * (v57 * i));
              __B.imagp = (float *)(v60 + 4 * v59);
              vDSP_zvsub(&__C, 1, &__B, 1, &__C, 1, v57);
              unint64_t v55 = *((unsigned int *)this + 12);
            }
          }
        }
      }
      else
      {
        if (v48)
        {
          unint64_t v61 = 0;
          uint64_t v62 = 1;
          uint64_t v63 = 16;
          do
          {
            unint64_t v64 = v61 + 1;
            if (((*(void *)(*((void *)this + 22) + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61) & 1) == 0
              && v64 < 2 * v48)
            {
              uint64_t v65 = v63;
              unint64_t v66 = v62;
              do
              {
                if (((*(void *)(*((void *)this + 22) + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v66) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 37) + 24 * v61) + v65), 1, (const DSPSplitComplex *)(*((void *)this + 65) + 16 * v61), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v65), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v65), 1, *((unsigned int *)this + 13));
                  unsigned int v48 = *((_DWORD *)this + 12);
                }
                ++v66;
                v65 += 16;
              }
              while (v66 < 2 * v48);
            }
            ++v62;
            v63 += 16;
            ++v61;
          }
          while (v64 < v48);
        }
        vDSP_vneg((const float *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((void *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 5, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 133), 1, (const float *)this + 10, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_Length v67 = *((unsigned int *)this + 13);
        uint64_t v68 = (float *)*((void *)this + 133);
        if (v67)
        {
          vDSP_Length v69 = (float *)*((void *)this + 133);
          uint64_t v70 = *((unsigned int *)this + 13);
          a5 = v134;
          unint64_t v32 = v136;
          do
          {
            if (*v69 == *((float *)this + 18)) {
              float *v69 = *v26;
            }
            ++v69;
            --v70;
          }
          while (v70);
        }
        else
        {
          vDSP_Length v67 = 0;
          a5 = v134;
          unint64_t v32 = v136;
        }
        vDSP_svdiv((const float *)this + 19, v68, 1, v68, 1, v67);
        unint64_t v71 = *((unsigned int *)this + 12);
        if (v71)
        {
          for (unint64_t j = 0; j < v71; ++j)
          {
            if (((*(void *)(*((void *)this + 22) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
            {
              vDSP_Length v73 = *((unsigned int *)this + 13);
              uint64_t v74 = *((void *)this + 56);
              unsigned int v75 = *((_DWORD *)this + 15) + v73 * j;
              __C.realp = (float *)(v74 + 4 * (v73 * j));
              __C.imagp = (float *)(v74 + 4 * v75);
              uint64_t v76 = *((void *)this + 139);
              __B.realp = (float *)(v76 + 4 * (v73 * j));
              __B.imagp = (float *)(v76 + 4 * v75);
              vDSP_zvsub(&__B, 1, &__C, 1, &__C, 1, v73);
              vDSP_zrvmul(&__C, 1, *((const float **)this + 133), 1, &__C, 1, *((unsigned int *)this + 13));
              unint64_t v71 = *((unsigned int *)this + 12);
            }
          }
        }
      }
    }
    uint64_t v77 = (const float *)((char *)this + 164);
    vDSP_vsmul(*((const float **)this + 56), 1, (const float *)this + 41, *((float **)this + 56), 1, (2 * *((_DWORD *)this + 15)));
    if (a6)
    {
      int v78 = *((unsigned __int8 *)this + 140);
      memcpy(*((void **)this + 59), *((const void **)this + 157), 4 * *((unsigned int *)this + 15));
      memcpy(*((void **)this + 62), (const void *)(*((void *)this + 157) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      bzero((void *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 4 * *((unsigned int *)this + 15));
      unsigned int v79 = *((_DWORD *)this + 12);
      if (v78)
      {
        if (v79)
        {
          unint64_t v80 = 0;
          uint64_t v81 = 1;
          uint64_t v82 = 16;
          do
          {
            unint64_t v83 = v80 + 1;
            if (((*(void *)(*((void *)this + 22) + ((v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80) & 1) == 0
              && v83 < 2 * v79)
            {
              uint64_t v84 = v82;
              unint64_t v85 = v81;
              do
              {
                if (((*(void *)(*((void *)this + 22) + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v85) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 46) + 24 * v80) + v84), 1, (const DSPSplitComplex *)(*((void *)this + 65) + 16 * v80), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v84), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v84), 1, *((unsigned int *)this + 13));
                  unsigned int v79 = *((_DWORD *)this + 12);
                }
                ++v85;
                v84 += 16;
              }
              while (v85 < 2 * v79);
            }
            ++v81;
            v82 += 16;
            ++v80;
          }
          while (v83 < v79);
        }
        vDSP_vneg((const float *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((void *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        unint64_t v86 = *((unsigned int *)this + 12);
        a5 = v134;
        unint64_t v32 = v136;
        if (v86)
        {
          for (unint64_t k = 0; k < v86; ++k)
          {
            if (((*(void *)(*((void *)this + 22) + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1) == 0)
            {
              vDSP_Length v88 = *((unsigned int *)this + 13);
              uint64_t v89 = *((void *)this + 157);
              unsigned int v90 = *((_DWORD *)this + 15) + v88 * k;
              __C.realp = (float *)(v89 + 4 * (v88 * k));
              __C.imagp = (float *)(v89 + 4 * v90);
              uint64_t v91 = *((void *)this + 139);
              __B.realp = (float *)(v91 + 4 * (v88 * k));
              __B.imagp = (float *)(v91 + 4 * v90);
              vDSP_zvsub(&__C, 1, &__B, 1, &__C, 1, v88);
              unint64_t v86 = *((unsigned int *)this + 12);
            }
          }
        }
      }
      else
      {
        if (v79)
        {
          unint64_t v92 = 0;
          uint64_t v93 = 1;
          uint64_t v94 = 16;
          do
          {
            unint64_t v95 = v92 + 1;
            if (((*(void *)(*((void *)this + 22) + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v92) & 1) == 0
              && v95 < 2 * v79)
            {
              uint64_t v96 = v94;
              unint64_t v97 = v93;
              do
              {
                if (((*(void *)(*((void *)this + 22) + ((v97 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v97) & 1) == 0)
                {
                  vDSP_zvma((const DSPSplitComplex *)(*(void *)(*((void *)this + 37) + 24 * v92) + v96), 1, (const DSPSplitComplex *)(*((void *)this + 65) + 16 * v92), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v96), 1, (const DSPSplitComplex *)(*((void *)this + 65) + v96), 1, *((unsigned int *)this + 13));
                  unsigned int v79 = *((_DWORD *)this + 12);
                }
                ++v97;
                v96 += 16;
              }
              while (v97 < 2 * v79);
            }
            ++v93;
            v94 += 16;
            ++v92;
          }
          while (v95 < v79);
        }
        vDSP_vneg((const float *)(*((void *)this + 59) + 4 * *((unsigned int *)this + 15)), 1, *((float **)this + 139), 1, *((unsigned int *)this + 15));
        vDSP_vneg((const float *)(*((void *)this + 62) + 4 * *((unsigned int *)this + 15)), 1, (float *)(*((void *)this + 139) + 4 * *((unsigned int *)this + 15)), 1, *((unsigned int *)this + 15));
        vDSP_vsadd(*((const float **)this + 80), 1, (const float *)this + 5, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_vsadd(*((const float **)this + 133), 1, (const float *)this + 10, *((float **)this + 133), 1, *((unsigned int *)this + 13));
        vDSP_Length v98 = *((unsigned int *)this + 13);
        long long v99 = (float *)*((void *)this + 133);
        if (v98)
        {
          uint64_t v100 = (float *)*((void *)this + 133);
          uint64_t v101 = *((unsigned int *)this + 13);
          a3 = v133;
          a5 = v134;
          unint64_t v32 = v136;
          uint64_t v77 = (const float *)((char *)this + 164);
          do
          {
            if (*v100 == *((float *)this + 18)) {
              float *v100 = *v26;
            }
            ++v100;
            --v101;
          }
          while (v101);
        }
        else
        {
          vDSP_Length v98 = 0;
          a3 = v133;
          a5 = v134;
          unint64_t v32 = v136;
          uint64_t v77 = (const float *)((char *)this + 164);
        }
        vDSP_svdiv((const float *)this + 19, v99, 1, v99, 1, v98);
        unint64_t v102 = *((unsigned int *)this + 12);
        if (v102)
        {
          for (unint64_t m = 0; m < v102; ++m)
          {
            if (((*(void *)(*((void *)this + 22) + ((m >> 3) & 0x1FFFFFFFFFFFFFF8)) >> m) & 1) == 0)
            {
              vDSP_Length v104 = *((unsigned int *)this + 13);
              uint64_t v105 = *((void *)this + 157);
              unsigned int v106 = *((_DWORD *)this + 15) + v104 * m;
              __C.realp = (float *)(v105 + 4 * (v104 * m));
              __C.imagp = (float *)(v105 + 4 * v106);
              uint64_t v107 = *((void *)this + 139);
              __B.realp = (float *)(v107 + 4 * (v104 * m));
              __B.imagp = (float *)(v107 + 4 * v106);
              vDSP_zvsub(&__B, 1, &__C, 1, &__C, 1, v104);
              vDSP_zrvmul(&__C, 1, *((const float **)this + 133), 1, &__C, 1, *((unsigned int *)this + 13));
              unint64_t v102 = *((unsigned int *)this + 12);
            }
          }
        }
      }
      vDSP_vsmul(*((const float **)this + 157), 1, v77, *((float **)this + 157), 1, (2 * *((_DWORD *)this + 15)));
    }
    if (*((_DWORD *)this + 12))
    {
      unint64_t v108 = 0;
      while (((*(void *)(*((void *)this + 22) + ((v108 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v108) & 1) != 0)
      {
        memcpy(v135->mBuffers[v108].mData, v32->mBuffers[v108].mData, 4 * (2 * *((_DWORD *)this + 13) - 2));
        if (a6) {
          memcpy(a5->mBuffers[v108].mData, a3->mBuffers[v108].mData, 4 * (2 * *((_DWORD *)this + 13) - 2));
        }
LABEL_140:
        if (++v108 >= *((unsigned int *)this + 12)) {
          return;
        }
      }
      unsigned int v109 = (char *)v135 + 16 * v108;
      uint64_t v112 = (float *)*((void *)v109 + 2);
      uint64_t v111 = v109 + 16;
      unint64_t v110 = v112;
      unint64_t v113 = (char *)a5 + 16 * v108;
      uint64_t v116 = *((void *)v113 + 2);
      unint64_t v115 = (const float **)(v113 + 16);
      uint64_t v114 = v116;
      vDSP_Length v117 = *((unsigned int *)this + 13);
      if (!v117)
      {
        vDSP_Length v117 = 0;
LABEL_138:
        vDSP_vmul(*((const float **)this + 154), 1, v110, 1, v110, 1, v117);
        vDSP_vmul((const float *)(*((void *)this + 154) + 4), 1, (const float *)(*v111 + 4 * *((unsigned int *)this + 13)), 1, (float *)(*v111 + 4 * *((unsigned int *)this + 13)), 1, (*((_DWORD *)this + 13) - 2));
        if (a6)
        {
          vDSP_vmul(*((const float **)this + 154), 1, *v115, 1, (float *)*v115, 1, *((unsigned int *)this + 13));
          vDSP_vmul((const float *)(*((void *)this + 154) + 4), 1, &(*v115)[*((unsigned int *)this + 13)], 1, (float *)&(*v115)[*((unsigned int *)this + 13)], 1, (*((_DWORD *)this + 13) - 2));
        }
        goto LABEL_140;
      }
      uint64_t v118 = 0;
      mData = (float *)v32->mBuffers[v108].mData;
      unsigned int v120 = (float *)a3->mBuffers[v108].mData;
      uint64_t v121 = (v117 - 1);
      int v122 = v117 * v108;
      while (1)
      {
        unsigned int v123 = v122 + v118;
        if (!v118 || v121 == v118)
        {
          float v130 = *(float *)(*((void *)this + 56) + 4 * v123);
          float v131 = mData[v118];
          if ((float)(v130 * v130) <= (float)(v131 * v131))
          {
            v110[v118] = (float)(v131 * *((float *)this + 31)) + (float)((float)(1.0 - *((float *)this + 31)) * v130);
            if (a6)
            {
              float v129 = (float)(*((float *)this + 31) * v120[v118])
                   + (float)((float)(1.0 - *((float *)this + 31))
                           * *(float *)(*((void *)this + 157) + 4 * (v122 + v118)));
LABEL_133:
              uint64_t v124 = v118;
LABEL_134:
              *(float *)(v114 + 4 * v124) = v129;
            }
          }
          else
          {
            v110[v118] = v131;
            if (a6)
            {
              float v129 = v120[v118];
              goto LABEL_133;
            }
          }
        }
        else
        {
          uint64_t v124 = (v121 + v118);
          uint64_t v125 = *((void *)this + 56);
          float v126 = *(float *)(v125 + 4 * v123);
          uint64_t v127 = (v122 + v118 + *((_DWORD *)this + 15));
          float v128 = mData[v118];
          if ((float)((float)(*(float *)(v125 + 4 * v127) * *(float *)(v125 + 4 * v127))
                     + (float)(v126 * v126)) <= (float)((float)(mData[v124] * mData[v124])
                                                      + (float)(v128 * v128)))
          {
            v110[v118] = (float)(v128 * *((float *)this + 31)) + (float)((float)(1.0 - *((float *)this + 31)) * v126);
            v110[v124] = (float)(*((float *)this + 31) * mData[v124])
                       + (float)((float)(1.0 - *((float *)this + 31)) * *(float *)(v125 + 4 * v127));
            if (a6)
            {
              uint64_t v132 = *((void *)this + 157);
              *(float *)(v114 + 4 * v118) = (float)(*((float *)this + 31) * v120[v118])
                                          + (float)((float)(1.0 - *((float *)this + 31))
                                                  * *(float *)(v132 + 4 * (v122 + v118)));
              float v129 = (float)(*((float *)this + 31) * v120[v124])
                   + (float)((float)(1.0 - *((float *)this + 31)) * *(float *)(v132 + 4 * v127));
              goto LABEL_134;
            }
          }
          else
          {
            v110[v118] = v128;
            v110[v124] = mData[v124];
            if (a6)
            {
              *(float *)(v114 + 4 * v118) = v120[v118];
              float v129 = v120[v124];
              goto LABEL_134;
            }
          }
        }
        if (v117 == ++v118) {
          goto LABEL_138;
        }
      }
    }
  }
}

uint64_t AGCKernelV2::InitializeAWeightingFilter(AGCKernelV2 *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = (ausdk::AUScope *)(v2 + 128);
  double v4 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 128), 0) + 80);
  uint64_t v5 = (const AudioStreamBasicDescription *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 80), 0) + 80);
  uint64_t Element = (const AudioStreamBasicDescription *)ausdk::AUScope::SafeGetElement(v3, 0);
  uint64_t v7 = NewIIRFilter(v5, Element + 2, (const CAStreamBasicDescription *)3);
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v7 = *((void *)this + 3);
  }
  if (!v7) {
    return 4294956428;
  }
  uint64_t v9 = 0;
  float v10 = v4;
  do
  {
    uint64_t v11 = (void *)((char *)&v16 + v9);
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[3] = 0;
    v11[4] = 0;
    v9 += 40;
    v11[2] = 0x3FF0000000000000;
  }
  while (v9 != 120);
  if (v10 <= 12000.0)
  {
    long long v16 = xmmword_1BB87BCE0;
    long long v17 = xmmword_1BB87BCF0;
    long long v18 = xmmword_1BB87BD00;
    long long v19 = xmmword_1BB87BD10;
    long long v20 = xmmword_1BB87AAA0;
    long long v21 = xmmword_1BB87AA90;
    long long v22 = xmmword_1BB87BD20;
    uint64_t v14 = 80716449;
  }
  else
  {
    if (v10 <= 18000.0)
    {
      long long v16 = xmmword_1BB87BD30;
      long long v17 = xmmword_1BB87BD40;
      long long v18 = xmmword_1BB87BD50;
      long long v19 = xmmword_1BB87BD60;
      long long v20 = xmmword_1BB87AB00;
      long long v21 = xmmword_1BB87AAF0;
      long long v22 = xmmword_1BB87BD70;
      uint64_t v12 = 0xFE1659EFC7EELL;
LABEL_16:
      uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL | 0x3FEF000000000000;
      goto LABEL_17;
    }
    if (v10 > 23000.0)
    {
      if (v10 <= 32000.0)
      {
        long long v16 = xmmword_1BB87BDD0;
        long long v17 = xmmword_1BB87BDE0;
        long long v18 = xmmword_1BB87BDF0;
        long long v19 = xmmword_1BB87BE00;
        long long v20 = xmmword_1BB87ABC0;
        long long v21 = xmmword_1BB87ABB0;
        long long v22 = xmmword_1BB87BE10;
        uint64_t v12 = 0xFEAF852BEC7DLL;
      }
      else if (v10 <= 46000.0)
      {
        long long v16 = xmmword_1BB87BE20;
        long long v17 = xmmword_1BB87BE30;
        long long v18 = xmmword_1BB87BE40;
        long long v19 = xmmword_1BB87BE50;
        long long v20 = xmmword_1BB87AC20;
        long long v21 = xmmword_1BB87AC10;
        long long v22 = xmmword_1BB87BE60;
        uint64_t v12 = -115213797;
      }
      else
      {
        long long v16 = xmmword_1BB87BE70;
        long long v17 = xmmword_1BB87BE80;
        long long v18 = xmmword_1BB87BE90;
        long long v19 = xmmword_1BB87BEA0;
        long long v20 = xmmword_1BB87AC80;
        long long v21 = xmmword_1BB87AC70;
        long long v22 = xmmword_1BB87BEB0;
        uint64_t v12 = 0xFE93D59DB7AALL;
      }
      goto LABEL_16;
    }
    long long v16 = xmmword_1BB87BD80;
    long long v17 = xmmword_1BB87BD90;
    long long v18 = xmmword_1BB87BDA0;
    long long v19 = xmmword_1BB87BDB0;
    long long v20 = xmmword_1BB87AB60;
    long long v21 = xmmword_1BB87AB50;
    long long v22 = xmmword_1BB87BDC0;
    uint64_t v14 = 214956234;
  }
  uint64_t v15 = v14 & 0xFFFFFFFFFFFFLL | 0x3FF0000000000000;
LABEL_17:
  uint64_t v23 = v15;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v7 + 16))(v7, 3, &v16);
  return 0;
}

void AGCKernelV2::ClearDetectors(AGCKernelV2 *this)
{
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 82) = 0;
  *(void *)((char *)this + 708) = 0;
  *(void *)((char *)this + 676) = 0;
  *(void *)((char *)this + 668) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 86) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v2 + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x2Bu);
  float v5 = __exp10f(Parameter / 10.0);
  vDSP_Length v6 = (float *)*((void *)this + 79);
  uint64_t v7 = *((void *)this + 80) - (void)v6;
  if (v7 >= 1)
  {
    unint64_t v8 = ((unint64_t)v7 >> 2) + 1;
    do
    {
      *v6++ = v5;
      --v8;
    }
    while (v8 > 1);
  }
  *((_DWORD *)this + 162) = 0;
}

void AGCKernelV2::InitializePastBuffer(AGCKernelV2 *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  float v3 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 32), 0) + 80);
  float v4 = (float)v2[84];
  unsigned int v5 = vcvtps_u32_f32(v3 / v4);
  unsigned int v6 = vcvtps_u32_f32((float)(v3 * 6.0) / v4);
  if (v5 <= v6) {
    unsigned int v5 = v6;
  }
  unint64_t v7 = (1 << -__clz(v5 - 1));
  *((_DWORD *)this + 163) = v7;
  std::valarray<float>::resize((uint64_t)this + 632, v7, 0.0);
  unint64_t v8 = (void *)*((void *)this + 79);
  uint64_t v9 = *((void *)this + 80) - (void)v8;
  if (v9 >= 1) {
    bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  }
  *((_DWORD *)this + 162) = 0;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v2 + 8), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x2Bu);
  float v12 = __exp10f(Parameter / 10.0);
  vDSP_Length v13 = (float *)*((void *)this + 79);
  uint64_t v14 = *((void *)this + 80) - (void)v13;
  if (v14 >= 1)
  {
    unint64_t v15 = ((unint64_t)v14 >> 2) + 1;
    do
    {
      *v13++ = v12;
      --v15;
    }
    while (v15 > 1);
  }
  *((_DWORD *)this + 162) = 0;
}

void AGCKernelV2::Process(AGCKernelV2 *this, const float *a2, float *a3, uint64_t a4, BOOL *a5)
{
  LODWORD(v5) = a4;
  unsigned int v6 = a3;
  uint64_t v279 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *((void *)this + 1);
  int v10 = *(_DWORD *)(v9 + 592);
  if (v10 != *((_DWORD *)this + 8))
  {
    if (*(unsigned char *)(v9 + 596))
    {
      (*(void (**)(AGCKernelV2 *, const float *, float *, uint64_t, BOOL *))(*(void *)this + 16))(this, a2, a3, a4, a5);
      *(unsigned char *)(v9 + 596) = 0;
    }
    AGCKernelV2::RefreshCoeffs(this);
    *((_DWORD *)this + 8) = v10;
  }
  uint64_t v11 = (ausdk::AUScope *)(v9 + 32);
  uint64_t v265 = v9;
  double v12 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v9 + 128), 0) + 80);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v9 + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x3Eu);
  float __B = __exp10f(Parameter / 20.0);
  uint64_t v5 = v5;
  vDSP_vsmul(a2, 1, &__B, *((float **)this + 91), 1, v5);
  float __C = 0.0;
  vDSP_svesq(*((const float **)this + 91), 1, &__C, v5);
  float v264 = (float)v5;
  float v15 = __C / (float)v5;
  float __C = v15;
  float v266 = 0.0;
  if (*((unsigned char *)this + 57))
  {
    *(_DWORD *)AudioTimeStamp buf = 1;
    *(_DWORD *)&uint8_t buf[8] = 1;
    int v277 = 4 * v5;
    uint64_t v278 = *((void *)this + 91);
    LODWORD(v272) = 1;
    int v273 = 1;
    int v274 = 4 * v5;
    uint64_t v275 = *((void *)this + 90);
    (*(void (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
    vDSP_svesq(*((const float **)this + 90), 1, &v266, v5);
    float v15 = v266 / v264;
  }
  float v266 = v15;
  if (v15 <= 1.0e-12)
  {
    int v19 = *((_DWORD *)this + 162);
    uint64_t v17 = *((void *)this + 79);
    int v18 = *((_DWORD *)this + 163) - 1;
  }
  else
  {
    uint64_t v16 = *((unsigned int *)this + 162);
    uint64_t v17 = *((void *)this + 79);
    *(float *)(v17 + 4 * v16) = v15;
    int v18 = *((_DWORD *)this + 163) - 1;
    int v19 = v18 & (v16 + 1);
    *((_DWORD *)this + 162) = v19;
  }
  unsigned int v20 = *((float *)this + 153);
  int v21 = v18 & (v19 - 1);
  float v22 = *(float *)(v17 + 4 * v21);
  if (v20 >= 2)
  {
    unsigned int v23 = v20 - 1;
    do
    {
      int v21 = (v21 - 1) & v18;
      if (*(float *)(v17 + 4 * v21) < v22) {
        float v22 = *(float *)(v17 + 4 * v21);
      }
      --v23;
    }
    while (v23);
  }
  float v24 = log10f(v22 + 1.0e-12);
  unsigned int v25 = *((_DWORD *)this + 152);
  if (v25)
  {
    float v26 = 0.0;
    int v27 = *((_DWORD *)this + 152);
    do
    {
      int v19 = (v19 - 1) & v18;
      float v26 = v26 + *(float *)(*((void *)this + 79) + 4 * v19);
      --v27;
    }
    while (v27);
  }
  else
  {
    float v26 = 0.0;
  }
  float v28 = log10f((float)(v26 / (float)v25) + 1.0e-12);
  uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
  BOOL v30 = ausdk::AUElement::GetParameter(v29, 0x20u) == 0;
  int v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
  float v32 = ausdk::AUElement::GetParameter(v31, 0x22u);
  float v262 = v24 * 10.0;
  float v263 = v28 * 10.0;
  if (v30)
  {
    BOOL v260 = 0;
    if ((float)(v28 * 10.0) > v32)
    {
      unint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
      float v35 = ausdk::AUElement::GetParameter(v34, 0x23u);
      unint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
      if (v35 > ausdk::AUElement::GetParameter(v36, 0x24u)) {
        BOOL v260 = 1;
      }
    }
  }
  else
  {
    BOOL v260 = 0;
    if ((float)(v28 * 10.0) > v32)
    {
      unint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
      if (v263 > (float)(v262 + ausdk::AUElement::GetParameter(v33, 0x27u))) {
        BOOL v260 = 1;
      }
    }
  }
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
  if (ausdk::AUElement::GetParameter(v37, 0x2Cu) == 0.0)
  {
    unsigned int v48 = 0;
  }
  else
  {
    uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    if (v263 <= (float)(v262 + ausdk::AUElement::GetParameter(v38, 0x27u))) {
      float v39 = 0.0;
    }
    else {
      float v39 = 1.0;
    }
    uint64_t v40 = (const void *)*((void *)this + 91);
    ++*((_DWORD *)this + 20);
    if (*((unsigned char *)this + 128))
    {
      *(void *)AudioTimeStamp buf = v40;
      uint64_t v272 = *((void *)this + 13);
      uint64_t ExpectedNumberOfOutputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames(*((CA::AudioSampleRateConverter **)this + 15));
      if (ExpectedNumberOfOutputFrames <= *((_DWORD *)this + 42))
      {
        int RequiredNumberOfInputFrames = v5;
      }
      else
      {
        uint64_t v42 = _os_log_pack_size();
        uint64_t message = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 74), v42 + 88, 16);
        if (message)
        {
          unsigned int v44 = (caulk::concurrent::message *)message;
          uint64_t v45 = _os_log_pack_fill();
          int v46 = *((_DWORD *)this + 42);
          *(_DWORD *)uint64_t v45 = 67109632;
          *(_DWORD *)(v45 + 4) = ExpectedNumberOfOutputFrames;
          *(_WORD *)(v45 + 8) = 1024;
          *(_DWORD *)(v45 + 10) = v5;
          *(_WORD *)(v45 + 14) = 1024;
          *(_DWORD *)(v45 + 16) = v46;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 74) + 16), v44);
        }
        uint64_t ExpectedNumberOfOutputFrames = *((unsigned int *)this + 42);
        int RequiredNumberOfInputFrames = AudioSampleRateConverterGetRequiredNumberOfInputFrames();
      }
      int v54 = CA::AudioSampleRateConverter::Process(*((CA::AudioSampleRateConverter **)this + 15), (const float *const *)buf, RequiredNumberOfInputFrames, &v272, (float *const *)ExpectedNumberOfOutputFrames);
      if (v54)
      {
        int v55 = v54;
        uint64_t v56 = _os_log_pack_size();
        uint64_t v57 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 74), v56 + 88, 16);
        if (v57)
        {
          uint64_t v58 = (caulk::concurrent::message *)v57;
          unsigned int v59 = (_DWORD *)_os_log_pack_fill();
          *unsigned int v59 = 67109120;
          v59[1] = v55;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 74) + 16), v58);
        }
      }
      uint64_t v40 = (const void *)*((void *)this + 13);
    }
    else if (*((_DWORD *)this + 42) >= v5)
    {
      LODWORD(ExpectedNumberOfOutputFrames) = v5;
    }
    else
    {
      uint64_t v49 = _os_log_pack_size();
      uint64_t v50 = caulk::deferred_logger::create_message(*((caulk::deferred_logger **)this + 74), v49 + 88, 16);
      if (v50)
      {
        uint64_t v51 = (caulk::concurrent::message *)v50;
        uint64_t v52 = _os_log_pack_fill();
        int v53 = *((_DWORD *)this + 42);
        *(_DWORD *)uint64_t v52 = 67109376;
        *(_DWORD *)(v52 + 4) = v5;
        *(_WORD *)(v52 + 8) = 1024;
        *(_DWORD *)(v52 + 10) = v53;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(*((void *)this + 74) + 16), v51);
      }
      LODWORD(ExpectedNumberOfOutputFrames) = *((_DWORD *)this + 42);
    }
    memmove(*((void **)this + 11), (const void *)(*((void *)this + 11) + 4 * ExpectedNumberOfOutputFrames), 4 * (*((_DWORD *)this + 36) - ExpectedNumberOfOutputFrames));
    uint64_t v60 = *((void *)this + 11);
    int v61 = *((_DWORD *)this + 36);
    uint64_t v62 = (const float *)(v60 + 4 * (v61 - *((_DWORD *)this + 34)));
    uint64_t v63 = (void *)(v60 + 4 * (v61 - ExpectedNumberOfOutputFrames));
    memcpy(v63, v40, 4 * ExpectedNumberOfOutputFrames);
    vDSP_vmul(v62, 1, *((const float **)this + 14), 1, *((float **)this + 13), 1, *((unsigned int *)this + 34));
    int v64 = *((_DWORD *)this + 35);
    uint64_t v65 = (const float *)*((void *)this + 13);
    vDSP_Length v66 = *((unsigned int *)this + 34);
    if (v64)
    {
      int v67 = *((_DWORD *)this + 34);
      uint64_t v68 = *((unsigned int *)this + 35);
      do
      {
        v65[v67++] = 0.0;
        --v68;
      }
      while (v68);
    }
    vDSP_conv(v65, 1, v65, 1, (float *)this + 43, 1, (v64 + 1), v66);
    uint64_t v256 = (const float *)v63;
    vDSP_Length v257 = ExpectedNumberOfOutputFrames;
    if (*((float *)this + 43) >= 1.0e-15) {
      float v69 = *((float *)this + 43);
    }
    else {
      float v69 = 1.0e-15;
    }
    float v70 = (float)-*((float *)this + 44) / v69;
    *((_DWORD *)this + 64) = 1065353216;
    *((float *)this + 65) = v70;
    int v71 = *((_DWORD *)this + 35);
    uint64_t v255 = (v71 + 1);
    if (v255 >= 3)
    {
      uint64_t v72 = 0;
      uint64_t v73 = (v71 - 1);
      uint64_t v74 = 2;
      uint64_t v75 = 1;
      do
      {
        float v76 = *((float *)this + v74 + 43);
        uint64_t v77 = v75;
        int v78 = (float *)((char *)this + 176);
        do
        {
          float v79 = *v78++;
          float v76 = v76 + (float)(*((float *)this + v77-- + 64) * v79);
        }
        while (v77);
        float v69 = (float)(1.0 - (float)(v70 * v70)) * v69;
        uint64_t v80 = v75;
        uint64_t v81 = (float *)((char *)this + 344);
        float v70 = (float)-v76 / v69;
        do
        {
          float *v81 = *(v81 - 21) + (float)(v70 * *((float *)this + v80 + 64));
          ++v81;
          --v80;
        }
        while (v80);
        memmove((char *)this + 260, (char *)this + 344, 4 * v72 + 4);
        *((float *)this + v74++ + 64) = v70;
        ++v72;
        ++v75;
      }
      while (v72 != v73);
    }
    *(float *)AudioTimeStamp buf = v69;
    if (v255 >= 2)
    {
      uint64_t v82 = (float *)((char *)this + 260);
      uint64_t v83 = v255 - 1;
      do
      {
        *uint64_t v82 = v82[42] * *v82;
        ++v82;
        --v83;
      }
      while (v83);
    }
    memmove(*((void **)this + 12), (const void *)(*((void *)this + 12) + 4 * v257), 4 * (*((_DWORD *)this + 38) - v257));
    vDSP_conv(&v256[-*((unsigned int *)this + 35)], 1, (const float *)this + *((unsigned int *)this + 35) + 64, -1, (float *)(*((void *)this + 12) + 4 * (*((_DWORD *)this + 38) - v257)), 1, v257, (*((_DWORD *)this + 35) + 1));
    uint64_t v84 = *((void *)this + 12);
    int v85 = *((_DWORD *)this + 38);
    if (*((unsigned char *)this + 564))
    {
      unint64_t v86 = (float *)(v84 + 4 * (v85 - v257));
      float v87 = *((float *)this + 146);
      unsigned int v88 = *((_DWORD *)this + 144);
      if (v88)
      {
        if (v257)
        {
          int v89 = *((_DWORD *)this + 142);
          int v90 = *((_DWORD *)this + 143);
          unsigned int v91 = *((_DWORD *)this + 145);
          vDSP_Length v92 = v257;
          do
          {
            unsigned int v91 = (v90 + v91 * v89) % v88;
            *unint64_t v86 = *v86 + (float)(v87 * (float)((float)((float)(2.0 / (float)v88) * (float)v91) + -1.0));
            ++v86;
            --v92;
          }
          while (v92);
          *((_DWORD *)this + 145) = v91;
        }
      }
      else if (v257)
      {
        int v93 = *((_DWORD *)this + 142);
        int v94 = *((_DWORD *)this + 143);
        vDSP_Length v95 = v257;
        unsigned int v96 = *((_DWORD *)this + 145);
        do
        {
          unsigned int v96 = v94 + v96 * v93;
          *unint64_t v86 = *v86 + (float)(v87 * (float)((float)((float)v96 * 4.6566e-10) + -1.0));
          ++v86;
          --v95;
        }
        while (v95);
        *((_DWORD *)this + 145) = v96;
      }
    }
    float v97 = (float)(sqrtf(v39) * -1.5) + 1.0;
    if (v97 >= 0.02) {
      float v98 = v97;
    }
    else {
      float v98 = *(float *)"\nף<";
    }
    float v271 = 0.0;
    LODWORD(v272) = 0;
    vDSP_svesq((const float *)(v84 + 4 * (v85 - 1)), -1, (float *)buf, *((unsigned int *)this + 127));
    vDSP_svesq((const float *)(*((void *)this + 12) + 4 * (*((_DWORD *)this + 38) + ~*((_DWORD *)this + 133))), -1, (float *)&v272, *((unsigned int *)this + 127));
    int v99 = *((_DWORD *)this + 133);
    float v100 = -1.0;
    if (*((_DWORD *)this + 134) + 1 != v99)
    {
      unsigned int v101 = 0;
      uint64_t v102 = *((void *)this + 12);
      int v103 = *((_DWORD *)this + 38);
      int v104 = -1;
      unsigned int v105 = *((_DWORD *)this + 127);
      do
      {
        vDSP_dotpr((const float *)(v102 + 4 * (v103 - 1)), -1, (const float *)(v102 + 4 * (v104 + v103 - v99)), -1, &v271, v105);
        float v106 = v271 / sqrtf((float)(*(float *)buf * *(float *)&v272) + 1.0e-12);
        float v271 = v106;
        if (v106 > v100) {
          float v100 = v106;
        }
        uint64_t v102 = *((void *)this + 12);
        int v103 = *((_DWORD *)this + 38);
        float v107 = *(float *)(v102 + 4 * (v104 + v103 - v99));
        *(float *)&uint64_t v272 = *(float *)&v272 - (float)(v107 * v107);
        unsigned int v105 = *((_DWORD *)this + 127);
        float v108 = *(float *)(v102 + 4 * (v104 + v103 - v99 - v105));
        *(float *)&uint64_t v272 = *(float *)&v272 + (float)(v108 * v108);
        ++v101;
        int v99 = *((_DWORD *)this + 133);
        --v104;
      }
      while (v101 < *((_DWORD *)this + 134) - v99 + 1);
    }
    float v109 = (float)(v100 * *((float *)this + 128))
         + (float)((float)(1.0 - *((float *)this + 128)) * *((float *)this + 129));
    *((float *)this + 129) = v109;
    float v110 = (float)(v100 * (float)(v98 * *((float *)this + 130)))
         + (float)((float)(1.0 - (float)(*((float *)this + 130) * v98)) * *((float *)this + 131));
    *((float *)this + 131) = v110;
    int v111 = 1045220557;
    if (v110 < 0.2 || (int v111 = 1053609165, v110 > 0.4))
    {
      *((_DWORD *)this + 131) = v111;
      float v110 = *(float *)&v111;
    }
    float v112 = *((float *)this + 132);
    float v269 = 0.0;
    float v270 = 0.0;
    vDSP_svemg((const float *)(*((void *)this + 12) + 4 * (*((_DWORD *)this + 38) - 1)), -1, &v270, *((unsigned int *)this + 135));
    vDSP_svesq((const float *)(*((void *)this + 12) + 4 * (*((_DWORD *)this + 38) - 1)), -1, &v269, *((unsigned int *)this + 135));
    float v113 = sqrtf(v269);
    unsigned int v114 = *((_DWORD *)this + 20) * v257;
    unsigned int v115 = *((_DWORD *)this + 135);
    float v116 = sqrtf((float)v114);
    float v117 = sqrtf((float)v115);
    if (v114 >= v115) {
      float v116 = v117;
    }
    float v118 = (float)(v116 - (float)(v270 / (float)(v113 + 1.0e-12))) / (float)(v116 + -1.0);
    float v119 = (float)(*((float *)this + 136) * v118)
         + (float)((float)(1.0 - *((float *)this + 136)) * *((float *)this + 137));
    *((float *)this + 137) = v119;
    float v120 = (float)(v118 * (float)(v98 * *((float *)this + 138)))
         + (float)((float)(1.0 - (float)(*((float *)this + 138) * v98)) * *((float *)this + 139));
    *((float *)this + 139) = v120;
    int v121 = 1045220557;
    if (v120 < 0.2 || (int v121 = 1050253722, v120 > 0.3))
    {
      *((_DWORD *)this + 139) = v121;
      float v120 = *(float *)&v121;
    }
    if (v119 <= (float)(v120 + *((float *)this + 140))) {
      unsigned int v48 = v109 > (float)(v110 + v112);
    }
    else {
      unsigned int v48 = (v109 > (float)(v110 + v112)) | 2;
    }
  }
  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 45, 0, 0, 0, (float)v48);
  float v122 = *((float *)this + 129);
  float v123 = *((float *)this + 131);
  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 61, 0, 0, 0, *((float *)this + 137) - *((float *)this + 139));
  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 60, 0, 0, 0, v122 - v123);
  uint64_t v124 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
  float v125 = v12;
  float v259 = v264 / v125;
  if (ausdk::AUElement::GetParameter(v124, 0x29u) == 0.0)
  {
    uint64_t v138 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    switch(ausdk::AUElement::GetParameter(v138, 0x2Cu))
    {
      case 0u:
        if (v260) {
          goto LABEL_114;
        }
        goto LABEL_115;
      case 1u:
        v48 &= 1u;
        goto LABEL_112;
      case 2u:
        v48 &= 2u;
        goto LABEL_112;
      case 3u:
        unsigned int v48 = (v48 > 1) & v48;
        goto LABEL_112;
      case 4u:
LABEL_112:
        if (!v260) {
          goto LABEL_115;
        }
        if (v48)
        {
LABEL_114:
          *((_DWORD *)this + 156) = *((_DWORD *)this + 155);
LABEL_118:
          int v139 = 1;
          goto LABEL_119;
        }
LABEL_116:
        int v140 = *((_DWORD *)this + 156);
        if (v140)
        {
          *((_DWORD *)this + 156) = v140 - 1;
          (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 45, 0, 0, 0, 0.5);
          goto LABEL_118;
        }
        int v139 = 0;
LABEL_119:
        vDSP_Length v141 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
        BOOL v142 = ausdk::AUElement::GetParameter(v141, 0x11u) != 0.0;
        unsigned int v143 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
        if (v142)
        {
          float v144 = ausdk::AUElement::GetParameter(v143, 0x12u);
          unint64_t v145 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          float v146 = ausdk::AUElement::GetParameter(v145, 0x14u);
          vDSP_Length v147 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          float v148 = ausdk::AUElement::GetParameter(v147, 8u);
          unsigned int v149 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          float v150 = ausdk::AUElement::GetParameter(v149, 9u);
          float v151 = *((float *)this + 13);
          if (v144 > v146 || v151 < v148)
          {
            vDSP_Length v152 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
            float v153 = ausdk::AUElement::GetParameter(v152, 0x15u);
            int v154 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
            float v155 = ausdk::AUElement::GetParameter(v154, 0x16u);
            unint64_t v156 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
            float v157 = ausdk::AUElement::GetParameter(v156, 0x17u);
            float v158 = v148 - (float)(v153 * (float)(v144 - v146));
            float v159 = v259 * v157;
            if (v151 <= v158)
            {
              float v161 = v158 + (float)((float)-v153 * v155);
              if (v151 < v161)
              {
                float v162 = v159 + *((float *)this + 13);
                float v151 = v161 <= v162 ? v161 : v162;
                if (v151 > v148) {
                  float v151 = v148;
                }
              }
            }
            else
            {
              float v160 = *((float *)this + 13) - v159;
              if (v158 >= v160) {
                float v151 = v148 - (float)(v153 * (float)(v144 - v146));
              }
              else {
                float v151 = v160;
              }
              if (v151 < v150) {
                float v151 = v150;
              }
            }
            *((float *)this + 13) = v151;
          }
        }
        else
        {
          float v151 = ausdk::AUElement::GetParameter(v143, 8u);
        }
        float v163 = *((float *)this + 15);
        float v258 = v151;
        if (v139)
        {
          float v164 = *((float *)this + 16);
          float v165 = *((float *)this + 11);
          uint64_t v166 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          if (v263 > (float)(v165 + ausdk::AUElement::GetParameter(v166, 0xCu)))
          {
            uint64_t v167 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
            unsigned int v168 = ausdk::AUElement::GetParameter(v167, 2u);
            float v169 = flt_1BB879720[v168 == 2];
            if (v168 == 1) {
              float v169 = 0.5;
            }
            float v163 = v163 * v169;
            float v164 = v164 * 0.0001;
          }
          AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 656), v266, v163);
          float v170 = *((float *)this + 167);
          float v171 = *((float *)this + 9);
          float v172 = *((float *)this + 165);
          uint64_t v173 = *((void *)this + 1);
          if (*((float *)this + 17) >= v172)
          {
            float v191 = v258;
          }
          else
          {
            uint64_t v174 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v173 + 32), 0);
            float v175 = ausdk::AUElement::GetParameter(v174, 0x2Bu);
            vDSP_Length v176 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v173 + 32), 0);
            float v177 = v170 + v171;
            float v178 = ausdk::AUElement::GetParameter(v176, 5u) * 0.5;
            float v179 = v175 + v178;
            if ((float)(v170 + v171) <= (float)(v175 + v178))
            {
              float v179 = v175 - v178;
              if (v177 >= (float)(v175 - v178))
              {
                float v261 = v171;
                goto LABEL_169;
              }
              unsigned int v181 = 6;
              float v180 = v259;
            }
            else
            {
              float v180 = -v259;
              unsigned int v181 = 7;
            }
            BOOL v192 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v173 + 32), 0);
            float v193 = ausdk::AUElement::GetParameter(v192, v181) * v180;
            float v194 = *((float *)this + 18);
            if (v194 > v172) {
              float v193 = v193 * (float)((float)(v172 - *((float *)this + 17)) / (float)(v194 - *((float *)this + 17)));
            }
            float v191 = v258;
            if (fabsf(v179 - v177) < fabsf(v193)) {
              float v193 = v179 - v177;
            }
            float v171 = v193 + v171;
          }
          float v261 = v191;
          if (v171 <= v191)
          {
            float v195 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v173 + 32), 0);
            float v261 = v171;
            if (v171 < ausdk::AUElement::GetParameter(v195, 9u))
            {
              float v196 = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v173 + 32), 0);
              float v261 = ausdk::AUElement::GetParameter(v196, 9u);
            }
          }
LABEL_169:
          *((float *)this + 11) = v170;
          uint64_t v197 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          if (ausdk::AUElement::GetParameter(v197, 0xDu) == 0.0)
          {
            float v182 = 0.0;
          }
          else
          {
            float v198 = __exp10f(v261 / 10.0);
            AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 676), v198 * v266, v164);
            float v199 = *((float *)this + 172);
            float v200 = *((float *)this + 10);
            DSPSplitComplex v201 = (ausdk::AUScope *)(*((void *)this + 1) + 32);
            unint64_t v202 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v201, 0);
            float v203 = ausdk::AUElement::GetParameter(v202, 0x2Bu);
            uint64_t v204 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v201, 0);
            float v205 = ausdk::AUElement::GetParameter(v204, 0x10u) * v259;
            float v182 = v205 + v200;
            if ((float)(v203 - v199) <= (float)(v205 + v200))
            {
              float v206 = v200 - v205;
              float v182 = v203 - v199;
              if ((float)(v203 - v199) < v206) {
                float v182 = v206;
              }
            }
            uint64_t v207 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v201, 0);
            float v208 = ausdk::AUElement::GetParameter(v207, 5u) * 0.4;
            if (v182 > v208 || (float v208 = -v208, v182 < v208)) {
              float v182 = v208;
            }
            uint64_t v209 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v201, 0);
            BOOL v210 = (float)(v182 + v261) > ausdk::AUElement::GetParameter(v209, 8u);
            uint64_t v211 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v201, 0);
            if (v210)
            {
              float v212 = ausdk::AUElement::GetParameter(v211, 8u);
LABEL_181:
              float v182 = v212 - v261;
              goto LABEL_182;
            }
            if ((float)(v182 + v261) < ausdk::AUElement::GetParameter(v211, 9u))
            {
              int v213 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v201, 0);
              float v212 = ausdk::AUElement::GetParameter(v213, 9u);
              goto LABEL_181;
            }
          }
LABEL_182:
          *((_DWORD *)this + 154) = 0;
          goto LABEL_195;
        }
        if (v163 > 0.0 && v163 <= 1.0) {
          *((float32x2_t *)this + 82) = vmul_n_f32(*(float32x2_t *)((char *)this + 656), 1.0 - v163);
        }
        float v182 = *((float *)this + 10);
        float v261 = *((float *)this + 9);
        if (v261 > v151)
        {
          float v261 = v151;
LABEL_193:
          float v218 = v259;
          goto LABEL_194;
        }
        float v183 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
        if (ausdk::AUElement::GetParameter(v183, 0x18u) == 0.0) {
          goto LABEL_193;
        }
        float v184 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
        if (ausdk::AUElement::GetParameter(v184, 0x11u) != 0.0)
        {
          vDSP_Length v185 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          float v186 = ausdk::AUElement::GetParameter(v185, 0x12u);
          float v187 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          if (v186 >= ausdk::AUElement::GetParameter(v187, 0x14u)) {
            goto LABEL_193;
          }
        }
        float v188 = *((float *)this + 154);
        uint64_t v189 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
        if (v188 < ausdk::AUElement::GetParameter(v189, 0x19u)) {
          goto LABEL_193;
        }
        if (v261 <= 0.0)
        {
          if (v261 >= 0.0
            || (long long v214 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0),
                float v261 = v261 + (float)(ausdk::AUElement::GetParameter(v214, 0x1Au) * v259),
                v261 <= 0.0))
          {
LABEL_186:
            uint64_t v215 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
            if (ausdk::AUElement::GetParameter(v215, 0xDu) == 0.0) {
              goto LABEL_193;
            }
            if (v182 <= 0.0)
            {
              if (v182 >= 0.0) {
                goto LABEL_193;
              }
              unsigned int v221 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
              float v222 = ausdk::AUElement::GetParameter(v221, 0x1Au);
              float v218 = v259;
              float v182 = v182 + (float)(v222 * v259);
              if (v182 <= 0.0)
              {
LABEL_194:
                *((float *)this + 154) = v218 + *((float *)this + 154);
LABEL_195:
                int v223 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
                float v224 = ausdk::AUElement::GetParameter(v223, 0x1Bu);
                long long v225 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
                float v226 = 0.0;
                float v227 = v261 + v182;
                if (ausdk::AUElement::GetParameter(v225, 0x3Fu) == 0.0)
                {
                  int v238 = v5;
                }
                else
                {
                  float v228 = __exp10f((float)(v227 + v224) / 10.0);
                  AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 696), v228 * __C, *((float *)this + 19));
                  float v229 = *((float *)this + 177);
                  float v230 = *((float *)this + 12);
                  float v231 = (ausdk::AUScope *)(*((void *)this + 1) + 32);
                  float v232 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v231, 0);
                  float v233 = ausdk::AUElement::GetParameter(v232, 0x1Cu);
                  long long v234 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v231, 0);
                  float v235 = ausdk::AUElement::GetParameter(v234, 0x1Eu);
                  vDSP_Length v236 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v231, 0);
                  float v237 = v259 * ausdk::AUElement::GetParameter(v236, 0x1Fu);
                  if (v233 >= v229)
                  {
                    int v238 = v5;
                    if (v230 < (float)-v237) {
                      float v226 = v230 + v237;
                    }
                  }
                  else
                  {
                    float v226 = v230 - (float)(v259 * v235);
                    int v238 = v5;
                    if ((float)(v233 - v229) >= v226)
                    {
                      float v239 = v230 + v237;
                      float v226 = v233 - v229;
                      if ((float)(v233 - v229) > v239) {
                        float v226 = v239;
                      }
                    }
                  }
                }
                uint64_t v240 = (float *)*((void *)this + 91);
                float v241 = (float)((float)(v224 + *((float *)this + 9)) + *((float *)this + 10)) + *((float *)this + 12);
                float v242 = __exp10f((float)((float)((float)((float)(v182 + (float)(v261 + v224)) + v226) - v241) / v264) / 20.0);
                float v243 = __exp10f(v241 / 20.0);
                if (v238)
                {
                  int v244 = v6;
                  uint64_t v245 = v5;
                  do
                  {
                    float v243 = v242 * v243;
                    float v246 = *v240++;
                    *v244++ = v243 * v246;
                    --v245;
                  }
                  while (v245);
                }
                int v247 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
                BOOL v249 = ausdk::AUElement::GetParameter(v247, 0x28u) == 0.0 || v238 == 0;
                v248.n128_f32[0] = v263;
                if (v249)
                {
LABEL_223:
                  *((float *)this + 9) = v261;
                  *((float *)this + 10) = v182;
                  *((float *)this + 12) = v226;
                  (*(void (**)(uint64_t, void, void, void, void, __n128))(*(void *)v265 + 152))(v265, 0, 0, 0, 0, v248);
                  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 37, 0, 0, 0, v262);
                  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 1, 0, 0, 0, v227 + v226);
                  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 14, 0, 0, 0, v182);
                  unsigned int v253 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
                  float v254 = ausdk::AUElement::GetParameter(v253, 8u);
                  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 19, 0, 0, 0, v258 - v254);
                  return;
                }
                while (1)
                {
                  float v250 = *v6;
                  if (fabsf(*v6) > 0.95)
                  {
                    if (v250 > 0.95 && v250 < 5.0)
                    {
                      float v252 = (float)((float)(v250 + -0.95) * 0.0123) + 0.95;
                    }
                    else if (v250 <= -5.0 || v250 >= -0.95)
                    {
                      float v252 = 0.9999;
                      if (v250 < 5.0)
                      {
                        float v252 = -0.9999;
                        if (v250 > -5.0) {
                          goto LABEL_222;
                        }
                      }
                    }
                    else
                    {
                      float v252 = (float)((float)(v250 + 0.95) * 0.0123) + -0.95;
                    }
                    float *v6 = v252;
                  }
LABEL_222:
                  ++v6;
                  if (!--v5) {
                    goto LABEL_223;
                  }
                }
              }
            }
            else
            {
              float v216 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
              float v217 = ausdk::AUElement::GetParameter(v216, 0x1Au);
              float v218 = v259;
              float v182 = v182 - (float)(v217 * v259);
              if (v182 >= 0.0) {
                goto LABEL_194;
              }
            }
            float v182 = 0.0;
            goto LABEL_194;
          }
        }
        else
        {
          std::string::size_type v190 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
          float v261 = v261 - (float)(ausdk::AUElement::GetParameter(v190, 0x1Au) * v259);
          if (v261 >= 0.0) {
            goto LABEL_186;
          }
        }
        float v261 = 0.0;
        goto LABEL_186;
      default:
        if (v260) {
          goto LABEL_116;
        }
LABEL_115:
        int v139 = 0;
        *((_DWORD *)this + 156) = 0;
        goto LABEL_119;
    }
  }
  (*(void (**)(uint64_t, void, void, void, void, float))(*(void *)v265 + 152))(v265, 0, 0, 0, 0, v263);
  (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 37, 0, 0, 0, v262);
  (*(void (**)(uint64_t, uint64_t, void, void, void, double))(*(void *)v265 + 152))(v265, 1, 0, 0, 0, 0.0);
  (*(void (**)(uint64_t, uint64_t, void, void, void, double))(*(void *)v265 + 152))(v265, 14, 0, 0, 0, 0.0);
  (*(void (**)(uint64_t, uint64_t, void, void, void, double))(*(void *)v265 + 152))(v265, 19, 0, 0, 0, 0.0);
  if (v260)
  {
    float v126 = 1.0;
    if (v259 > 0.0) {
      float v126 = 1.0 - powf(0.01, v259 / 20.0);
    }
    AGCRecursiveDetector::InsertElement((AGCKernelV2 *)((char *)this + 676), v266, v126);
    float v127 = *((float *)this + 172);
    float v128 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
    float v129 = ausdk::AUElement::GetParameter(v128, 0x2Bu);
    (*(void (**)(uint64_t, uint64_t, void, void, void, float))(*(void *)v265 + 152))(v265, 42, 0, 0, 0, v127 - v129);
    int v130 = *((_DWORD *)this + 184) + v5;
    *((_DWORD *)this + 184) = v130;
    if ((float)(v125 * 0.2) < (float)v130)
    {
      *((_DWORD *)this + 184) = 0;
      float v131 = AUAGCV2Log();
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
      {
        int v219 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
        float v220 = ausdk::AUElement::GetParameter(v219, 0x2Bu);
        *(_DWORD *)AudioTimeStamp buf = 134217984;
        *(double *)&uint8_t buf[4] = (float)(v127 - v220);
        _os_log_debug_impl(&dword_1BB0CE000, v131, OS_LOG_TYPE_DEBUG, "AUAGCV2 calibration meter: %2.1f dB", buf, 0xCu);
      }
    }
  }
  uint64_t v132 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v11, 0);
  float v133 = ausdk::AUElement::GetParameter(v132, 0x1Bu);
  uint64_t v134 = (float *)*((void *)this + 91);
  float v135 = __exp10f((float)((float)(v133 - v133) / v264) / 20.0);
  float v136 = __exp10f(v133 / 20.0);
  if (v5)
  {
    do
    {
      float v136 = v135 * v136;
      float v137 = *v134++;
      *v6++ = v136 * v137;
      --v5;
    }
    while (v5);
  }
}

void sub_1BB6D23B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AGCKernelV2::RefreshCoeffs(AGCKernelV2 *this)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  float v3 = (ausdk::AUScope *)(v2 + 8);
  double v4 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v2 + 32), 0) + 80);
  unsigned int v5 = v2[84];
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  int v7 = ausdk::AUElement::GetParameter(Element, 3u) != 0.0;
  if (*((unsigned __int8 *)this + 57) != v7)
  {
    (*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));
    *((unsigned char *)this + 57) = v7;
  }
  unint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  int v9 = ausdk::AUElement::GetParameter(v8, 0x29u) != 0.0;
  if (*((unsigned __int8 *)this + 56) != v9)
  {
    *((unsigned char *)this + 56) = v9;
    *(void *)((char *)this + 676) = 0;
    *((void *)this + 86) = 0;
  }
  int v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  if (ausdk::AUElement::GetParameter(v10, 0xDu) == 0.0) {
    *((_DWORD *)this + 10) = 0;
  }
  float v11 = *((float *)this + 13);
  double v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  if (v11 > ausdk::AUElement::GetParameter(v12, 8u)
    || (vDSP_Length v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0), ausdk::AUElement::GetParameter(v13, 0x11u) == 0.0))
  {
    uint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
    *((float *)this + 13) = ausdk::AUElement::GetParameter(v14, 8u);
  }
  float v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  unsigned int Parameter = ausdk::AUElement::GetParameter(v15, 2u);
  int v17 = *((_DWORD *)this + 166);
  if (v17 != Parameter)
  {
    if (Parameter == 1)
    {
      *((float *)this + 164) = log10f(*((float *)this + 164) + 1.0e-12) * 10.0;
    }
    else
    {
      if (v17 == 1) {
        *((float *)this + 164) = __exp10f(*((float *)this + 164) / 10.0);
      }
      if (Parameter == 2) {
        *((_DWORD *)this + 168) = 0;
      }
    }
  }
  *((_DWORD *)this + 166) = Parameter;
  if (*((_DWORD *)this + 171) == 1) {
    *((float *)this + 169) = __exp10f(*((float *)this + 169) / 10.0);
  }
  float v18 = (float)v5;
  float v19 = v4;
  *((_DWORD *)this + 171) = 0;
  if (*((_DWORD *)this + 176) == 1) {
    *((float *)this + 174) = __exp10f(*((float *)this + 174) / 10.0);
  }
  *((_DWORD *)this + 176) = 0;
  unsigned int v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v21 = ausdk::AUElement::GetParameter(v20, 4u);
  float v22 = v18 / v19;
  float v23 = 1.0;
  float v24 = 1.0;
  if ((float)(v18 / v19) > 0.0 && v21 > 0.0) {
    float v24 = 1.0 - powf(0.01, v22 / v21);
  }
  *((float *)this + 15) = v24;
  unsigned int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v26 = ausdk::AUElement::GetParameter(v25, 0xFu);
  if (v22 > 0.0 && v26 > 0.0) {
    float v23 = 1.0 - powf(0.01, v22 / v26);
  }
  *((float *)this + 16) = v23;
  int v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v28 = ausdk::AUElement::GetParameter(v27, 0x1Du);
  float v29 = 1.0;
  if (v22 > 0.0 && v28 > 0.0) {
    float v29 = 1.0 - powf(0.01, v22 / v28);
  }
  *((float *)this + 19) = v29;
  BOOL v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v31 = ausdk::AUElement::GetParameter(v30, 0xAu);
  *((float *)this + 17) = 1.0 - powf(1.0 - *((float *)this + 15), v31 / v22);
  float v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v33 = ausdk::AUElement::GetParameter(v32, 0xBu);
  *((float *)this + 18) = 1.0 - powf(1.0 - *((float *)this + 15), v33 / v22);
  unint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  *((_DWORD *)this + 152) = vcvtps_u32_f32((float)(ausdk::AUElement::GetParameter(v34, 0x21u) * v19) / v18);
  float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  *((float *)this + 153) = ceilf((float)(ausdk::AUElement::GetParameter(v35, 0x26u) * v19) / v18);
  unint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  *((_DWORD *)this + 155) = vcvtps_u32_f32((float)((float)(ausdk::AUElement::GetParameter(v36, 0x2Eu) / 1000.0) * v19) / v18);
  uint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v38 = ausdk::AUElement::GetParameter(v37, 0x2Fu);
  AGCVAD::SetLpcBlockSize((AGCKernelV2 *)((char *)this + 80), v38);
  float v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v40 = ausdk::AUElement::GetParameter(v39, 0x30u);
  unsigned int v41 = v40;
  if (v40 < 0x15)
  {
    unsigned int v43 = v40;
    if (!v41)
    {
      unsigned int v44 = AUAGCV2Log();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        int v74 = 67109120;
        *(_DWORD *)uint64_t v75 = 0;
        _os_log_error_impl(&dword_1BB0CE000, v44, OS_LOG_TYPE_ERROR, "VAD LPC order is %d", (uint8_t *)&v74, 8u);
      }
      unsigned int v43 = 1;
    }
  }
  else
  {
    uint64_t v42 = AUAGCV2Log();
    unsigned int v43 = 20;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      int v74 = 67109376;
      *(_DWORD *)uint64_t v75 = v41;
      *(_WORD *)&v75[4] = 1024;
      *(_DWORD *)&v75[6] = 20;
      _os_log_error_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "VAD LPC order %d is larger than %d", (uint8_t *)&v74, 0xEu);
    }
  }
  *((_DWORD *)this + 35) = v43;
  uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v46 = ausdk::AUElement::GetParameter(v45, 0x31u);
  uint64_t v47 = 0;
  *((_DWORD *)this + 106) = 1065353216;
  float v48 = 1.0;
  do
  {
    float v48 = v46 * v48;
    *(float *)((char *)this + v47 + 428) = v48;
    v47 += 4;
  }
  while (v47 != 80);
  uint64_t v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v50 = ausdk::AUElement::GetParameter(v49, 0x32u);
  AGCVAD::SetAutoCorrBlockSize((AGCKernelV2 *)((char *)this + 80), v50);
  uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v52 = ausdk::AUElement::GetParameter(v51, 0x33u);
  int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v54 = ausdk::AUElement::GetParameter(v53, 0x34u);
  if (v52 < 50.0)
  {
    int v55 = AUAGCV2Log();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      int v74 = 134218240;
      *(double *)uint64_t v75 = v52;
      *(_WORD *)&v75[8] = 2048;
      uint64_t v76 = 0x4049000000000000;
      _os_log_error_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_ERROR, "VAD min periodicity tracking frequency %f Hz is less than %f", (uint8_t *)&v74, 0x16u);
    }
    float v52 = 50.0;
  }
  if (v54 > 500.0)
  {
    uint64_t v56 = AUAGCV2Log();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      int v74 = 134218240;
      *(double *)uint64_t v75 = v54;
      *(_WORD *)&v75[8] = 2048;
      uint64_t v76 = 0x407F400000000000;
      _os_log_error_impl(&dword_1BB0CE000, v56, OS_LOG_TYPE_ERROR, "VAD max periodicity tracking frequency %f Hz is greater than %f", (uint8_t *)&v74, 0x16u);
    }
    float v54 = 500.0;
  }
  if (v54 >= v52) {
    float v57 = v54;
  }
  else {
    float v57 = v52;
  }
  float v58 = *((float *)this + 41);
  *((_DWORD *)this + 133) = (float)((float)(v58 / v57) + 0.5);
  *((_DWORD *)this + 134) = (float)((float)(v58 / v52) + 0.5);
  unsigned int v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v60 = ausdk::AUElement::GetParameter(v59, 0x35u);
  *((float *)this + 128) = 1.0
                         - expf(-1.0/ (float)((float)(v60 / 1000.0)/ (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  int v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v62 = ausdk::AUElement::GetParameter(v61, 0x36u);
  *((float *)this + 130) = 1.0
                         - expf(-1.0 / (float)(v62 / (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  uint64_t v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  *((float *)this + 132) = ausdk::AUElement::GetParameter(v63, 0x37u);
  int v64 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v65 = ausdk::AUElement::GetParameter(v64, 0x38u);
  AGCVAD::SetSparsityBlockSize((AGCKernelV2 *)((char *)this + 80), v65);
  vDSP_Length v66 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v67 = ausdk::AUElement::GetParameter(v66, 0x39u);
  *((float *)this + 136) = 1.0
                         - expf(-1.0/ (float)((float)(v67 / 1000.0)/ (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  uint64_t v68 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v69 = ausdk::AUElement::GetParameter(v68, 0x3Au);
  *((float *)this + 138) = 1.0
                         - expf(-1.0 / (float)(v69 / (float)((float)*((unsigned int *)this + 40) / *((float *)this + 39))));
  float v70 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  *((float *)this + 140) = ausdk::AUElement::GetParameter(v70, 0x3Bu);
  int v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  *((unsigned char *)this + 564) = ausdk::AUElement::GetParameter(v71, 0x40u) > 0.0;
  uint64_t v72 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  float v73 = ausdk::AUElement::GetParameter(v72, 0x22u);
  *((float *)this + 146) = __exp10f((float)((float)(v73 + -20.0) + 4.8) / 20.0);
}

void AGCRecursiveDetector::InsertElement(AGCRecursiveDetector *this, float a2, float a3)
{
  if (a3 > 0.0 && a3 <= 1.0)
  {
    float v5 = 1.0 - a3;
    float v7 = *(float *)this;
    float v6 = *((float *)this + 1);
    float v8 = a3 + (float)((float)(1.0 - a3) * v6);
    *((float *)this + 1) = v8;
    int v9 = *((_DWORD *)this + 2);
    if (v9 == 1)
    {
      float v10 = (float)((float)(a3 * 10.0) * log10f(a2 + 1.0e-12)) + (float)(v5 * v7);
      *(float *)this = v10;
      float v11 = v10 / v8;
    }
    else
    {
      float v12 = (float)(a2 * a3) + (float)(v5 * v7);
      *(float *)this = v12;
      float v13 = v12 / v8;
      if (v9 == 2)
      {
        float v14 = *((float *)this + 4);
        if (v14 > 1.0e-12)
        {
          float v15 = v14 / (float)((float)((float)(v5 * v6) / v8) + 1.0e-12);
          if (v13 > v15) {
            float v13 = v15;
          }
        }
        *((float *)this + 4) = v13;
      }
      float v11 = log10f(v13 + 1.0e-12) * 10.0;
    }
    *((float *)this + 3) = v11;
  }
}

uint64_t AUAGCV2Log(void)
{
  v0 = (char *)&xmmword_1E9F7EFF8 + 8;
  {
    v0 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    if (v2)
    {
      AUAGCV2Log(void)::sLog = (uint64_t)os_log_create("com.apple.coreaudio", "AUAGCV2");
      v0 = (unsigned char *)(&xmmword_1E9F7EFF8 + 8);
    }
  }
  return *((void *)v0 + 495);
}

void AGCVAD::SetLpcBlockSize(AGCVAD *this, float a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  float v4 = 30.0;
  if (a2 <= 30.0)
  {
    float v4 = a2;
  }
  else
  {
    float v5 = AUAGCV2Log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v9 = 134218240;
      double v10 = a2;
      __int16 v11 = 2048;
      uint64_t v12 = 0x403E000000000000;
      _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "VAD LPC block size %f ms is larger than %f", (uint8_t *)&v9, 0x16u);
    }
  }
  int v6 = (int)(float)((float)((float)(v4 / 1000.0) * *((float *)this + 21)) + 0.5);
  if (v6 <= 0)
  {
    float v7 = AUAGCV2Log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 67109120;
      LODWORD(v10) = v6;
      _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "VAD LPC block size is %d", (uint8_t *)&v9, 8u);
    }
    int v6 = 1;
  }
  if (v6 != *((_DWORD *)this + 14))
  {
    *((_DWORD *)this + 14) = v6;
    vDSP_hamm_window(*((float **)this + 4), v6, 0);
    unsigned int v8 = *((_DWORD *)this + 14);
    if (v8 <= *((_DWORD *)this + 22) + 20) {
      unsigned int v8 = *((_DWORD *)this + 22) + 20;
    }
    *((_DWORD *)this + 16) = v8;
    AGCVAD::Clear((void **)this);
  }
}

void AGCVAD::SetAutoCorrBlockSize(AGCVAD *this, float a2)
{
  float v2 = a2;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 > 50.0)
  {
    float v4 = AUAGCV2Log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218240;
      double v8 = v2;
      __int16 v9 = 2048;
      uint64_t v10 = 0x4049000000000000;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "VAD autocorrelation length %f ms is larger than %f", (uint8_t *)&v7, 0x16u);
    }
    float v2 = 50.0;
  }
  int v5 = (int)(float)((float)((float)(v2 / 1000.0) * *((float *)this + 21)) + 0.5);
  if (v5 <= 0)
  {
    int v6 = AUAGCV2Log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 67109120;
      LODWORD(v8) = v5;
      _os_log_error_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "VAD autocorrelation block size is %d", (uint8_t *)&v7, 8u);
    }
    int v5 = 1;
  }
  *((_DWORD *)this + 107) = v5;
}

void AGCVAD::SetSparsityBlockSize(AGCVAD *this, float a2)
{
  float v2 = a2;
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 > 50.0)
  {
    float v4 = AUAGCV2Log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218240;
      double v8 = v2;
      __int16 v9 = 2048;
      uint64_t v10 = 0x4049000000000000;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "VAD sparsity length %f ms is larger than %f", (uint8_t *)&v7, 0x16u);
    }
    float v2 = 50.0;
  }
  int v5 = (int)(float)((float)((float)(v2 / 1000.0) * *((float *)this + 21)) + 0.5);
  if (v5 <= 0)
  {
    int v6 = AUAGCV2Log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 67109120;
      LODWORD(v8) = v5;
      _os_log_error_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "VAD sparsity block size is %d", (uint8_t *)&v7, 8u);
    }
    int v5 = 1;
  }
  *((_DWORD *)this + 115) = v5;
}

void AGCVAD::Clear(void **this)
{
  *(_DWORD *)this = 0;
  uint64_t v2 = *((unsigned int *)this + 17);
  if (v2) {
    bzero(this[1], 4 * v2);
  }
  uint64_t v3 = *((unsigned int *)this + 18);
  if (v3) {
    bzero(this[2], 4 * v3);
  }
  *((_DWORD *)this + 109) = 0;
  *((_DWORD *)this + 111) = 1045220557;
  *((_DWORD *)this + 117) = 0;
  *((_DWORD *)this + 119) = 1045220557;
}

void AGCKernelV2::Reset(AGCKernelV2 *this)
{
  uint64_t v2 = *((void *)this + 1);
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 12) = 0;
  uint64_t v3 = (ausdk::AUScope *)(v2 + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(v2 + 32), 0);
  *((float *)this + 11) = ausdk::AUElement::GetParameter(Element, 0x2Bu);
  int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v3, 0);
  *((float *)this + 13) = ausdk::AUElement::GetParameter(v5, 8u);
  *((_DWORD *)this + 154) = 0;
  *((unsigned char *)this + 56) = 0;
  *((_DWORD *)this + 156) = 0;
  (*(void (**)(AGCKernelV2 *))(*(void *)this + 40))(this);
  (*(void (**)(void))(**((void **)this + 3) + 24))(*((void *)this + 3));

  AGCKernelV2::RefreshCoeffs(this);
}

void AGCKernelV2::~AGCKernelV2(AGCKernelV2 *this)
{
  AGCKernelV2::~AGCKernelV2(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  unsigned char *v5;
  uint64_t v6;

  *(void *)this = &unk_1F14BE798;
  uint64_t v2 = *((void *)this + 90);
  if (v2) {
    MEMORY[0x1C185D340](v2, 0x1000C8052888210);
  }
  *((void *)this + 90) = 0;
  uint64_t v3 = *((void *)this + 91);
  if (v3) {
    MEMORY[0x1C185D340](v3, 0x1000C8052888210);
  }
  *((void *)this + 91) = 0;
  float v4 = (unsigned char *)*((void *)this + 79);
  if (v4)
  {
    int v5 = (unsigned char *)*((void *)this + 80);
    if (v5 != v4) {
      *((void *)this + 80) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v4);
    *((void *)this + 79) = 0;
    *((void *)this + 80) = 0;
  }
  AGCVAD::~AGCVAD((AGCKernelV2 *)((char *)this + 80));
  int v6 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

void AGCVAD::~AGCVAD(AGCVAD *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x1C185D340](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x1C185D340](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x1C185D340](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    MEMORY[0x1C185D340](v5, 0x1000C8052888210);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 40);
}

void AUAGCV2::NewKernel(AUAGCV2 *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BB6D3B7C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](v2);
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MEMORY[0x1C185D370](v1, 0x10A3C40914C8E45);
  _Unwind_Resume(a1);
}

void AGCPastBuffer::~AGCPastBuffer(AGCPastBuffer *this)
{
  uint64_t v2 = *(unsigned char **)this;
  if (v2)
  {
    uint64_t v3 = (unsigned char *)*((void *)this + 1);
    if (v3 != v2) {
      *((void *)this + 1) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
}

BOOL AUAGCV2::ValidFormat(AUAGCV2 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUAGCV2::SupportedNumChannels(AUAGCV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUAGCV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

uint64_t AUAGCV2::SupportsTail(AUAGCV2 *this)
{
  return 1;
}

double AUAGCV2::GetTailTime(AUAGCV2 *this)
{
  return 0.0;
}

double AUAGCV2::GetLatency(AUAGCV2 *this)
{
  return 0.0;
}

uint64_t AUAGCV2::GetParameterValueStrings(AUAGCV2 *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2) {
    return 4294956417;
  }
  if (!a4) {
    return 0;
  }
  switch(a3)
  {
    case 44:
      long long v8 = xmmword_1E6242B30;
      long long v9 = *(_OWORD *)off_1E6242B40;
      uint64_t v10 = @"Either";
      CFIndex v6 = 5;
      break;
    case 32:
      long long v8 = xmmword_1E6242B20;
      CFIndex v6 = 2;
      break;
    case 2:
      long long v8 = xmmword_1E6242B08;
      *(void *)&long long v9 = @"Modified RMS";
      CFIndex v6 = 3;
      break;
    default:
      return 4294956417;
  }
  CFArrayRef v7 = CFArrayCreate(0, (const void **)&v8, v6, 0);
  uint64_t result = 0;
  *a4 = v7;
  return result;
}

uint64_t AUAGCV2::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 148);
  }
  return result;
}

uint64_t AUAGCV2::GetParameterInfo(AUAGCV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"Input level";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Input level", buffer->name, 52, 0x8000100u);
      UInt32 v6 = 1;
      goto LABEL_45;
    case 1:
      buffer->cfNameString = @"Total gain";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Total gain", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v8 = 0x41200000C1F00000;
      goto LABEL_59;
    case 2:
      buffer->cfNameString = @"Averaging method";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Averaging method", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(void *)&buffer->minCFDataRef Value = 0x4000000000000000;
      AudioUnitParameterValue v10 = 2.0;
      goto LABEL_31;
    case 3:
      buffer->cfNameString = @"A weighting";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"A weighting", buffer->name, 52, 0x8000100u);
      UInt32 v11 = 1;
      goto LABEL_87;
    case 4:
      buffer->cfNameString = @"Exp. window length (99%)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Exp. window length (99%)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x412000003C23D70ALL;
      AudioUnitParameterValue v13 = 0.8;
      goto LABEL_90;
    case 5:
      buffer->cfNameString = @"Dead zone width";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Dead zone width", buffer->name, 52, 0x8000100u);
      UInt32 v14 = 1;
      goto LABEL_48;
    case 6:
      buffer->cfNameString = @"Gain increase slew rate/sec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain increase slew rate/sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v15 = 0x42C8000000000000;
      goto LABEL_49;
    case 7:
      buffer->cfNameString = @"Gain decrease slew rate/sec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain decrease slew rate/sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 0x42C8000000000000;
      AudioUnitParameterValue v13 = 40.0;
      goto LABEL_90;
    case 8:
      buffer->cfNameString = @"Max gain";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Max gain", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v16 = 0x41A00000C2200000;
      goto LABEL_57;
    case 9:
      buffer->cfNameString = @"Min gain";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Min gain", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 0x41A00000C2200000;
      AudioUnitParameterValue v13 = -35.0;
      goto LABEL_90;
    case 10:
      buffer->cfNameString = @"Min data for gain change";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Min data for gain change", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x40A0000000000000;
      AudioUnitParameterValue v13 = 0.06;
      goto LABEL_90;
    case 11:
      buffer->cfNameString = @"Optimum data for gain change";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Optimum data for gain change", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x40A0000000000000;
      AudioUnitParameterValue v13 = 0.25;
      goto LABEL_90;
    case 12:
      buffer->cfNameString = @"Peak thd (relative)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Peak thd (relative)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 1;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v17 = 0x42C8000000000000;
      goto LABEL_64;
    case 13:
      buffer->cfNameString = @"Dead zone centering";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Dead zone centering", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(void *)&buffer->minCFDataRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v10 = 1.0;
      goto LABEL_31;
    case 14:
      buffer->cfNameString = @"Centering gain";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Centering gain", buffer->name, 52, 0x8000100u);
      UInt32 v18 = 2;
      goto LABEL_54;
    case 15:
      buffer->cfNameString = @"Centering exp. window length (99%)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Centering exp. window length (99%)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x41A000003F800000;
      AudioUnitParameterValue v13 = 12.0;
      goto LABEL_90;
    case 16:
      buffer->cfNameString = @"Centering slew rate/sec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Centering slew rate/sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 2;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v19 = 0x4120000000000000;
      goto LABEL_89;
    case 17:
      buffer->cfNameString = @"Noise SPL based gain limiting";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Noise SPL based gain limiting", buffer->name, 52, 0x8000100u);
      UInt32 v20 = 3;
      goto LABEL_52;
    case 18:
      buffer->cfNameString = @"Noise SPL estimate (from NS)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Noise SPL estimate (from NS)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v21 = 0x42F0000000000000;
      goto LABEL_42;
    case 19:
      buffer->cfNameString = @"Gain limit relative to max";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain limit relative to max", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v8 = 3248488448;
      goto LABEL_59;
    case 20:
      buffer->cfNameString = @"Gain limiting thd SPL";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain limiting thd SPL", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v22 = 0x42C8000042200000;
      goto LABEL_37;
    case 21:
      buffer->cfNameString = @"Gain limiting slope";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain limiting slope", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v13 = 0.5;
      goto LABEL_90;
    case 22:
      buffer->cfNameString = @"Gain limiting hysteresis";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain limiting hysteresis", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 0x41A0000000000000;
      AudioUnitParameterValue v13 = 6.0;
      goto LABEL_90;
    case 23:
      buffer->cfNameString = @"Gain limiting slew rate/sec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain limiting slew rate/sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 3;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 0x4120000000000000;
      AudioUnitParameterValue v13 = 2.0;
      goto LABEL_90;
    case 24:
      buffer->cfNameString = @"Gain leak during silence";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain leak during silence", buffer->name, 52, 0x8000100u);
      UInt32 v11 = 4;
      goto LABEL_87;
    case 25:
      buffer->cfNameString = @"Gain leak pre delay";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain leak pre delay", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      AudioUnitParameterOptions v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x41A0000000000000;
      AudioUnitParameterValue v10 = 4.0;
      goto LABEL_31;
    case 26:
      buffer->cfNameString = @"Gain leak slew rate/sec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Gain leak slew rate/sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 4;
      AudioUnitParameterOptions v9 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x4120000000000000;
      AudioUnitParameterValue v10 = 0.5;
LABEL_31:
      buffer->defaultCFDataRef Value = v10;
      AudioUnitParameterOptions v23 = v9 | 0xC0100000;
      goto LABEL_93;
    case 27:
      buffer->cfNameString = @"Post gain (between AGC & limiter)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Post gain (between AGC & limiter)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v24 = 0x41A00000C1A00000;
      goto LABEL_85;
    case 28:
      buffer->cfNameString = @"Limiter thd";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Limiter thd", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 3253731328;
      AudioUnitParameterValue v13 = -12.0;
      goto LABEL_90;
    case 29:
      buffer->cfNameString = @"Limiter exp. window length (99%)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Limiter exp. window length (99%)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x3F8000003C23D70ALL;
      AudioUnitParameterValue v13 = 0.03;
      goto LABEL_90;
    case 30:
      buffer->cfNameString = @"Limiter attack slew rate/sec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Limiter attack slew rate/sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 0x43C8000042480000;
      AudioUnitParameterValue v13 = 300.0;
      goto LABEL_90;
    case 31:
      buffer->cfNameString = @"Limiter release slew rate/sec";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Limiter release slew rate/sec", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 6;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v22 = 0x43C8000042480000;
LABEL_37:
      *(void *)&buffer->minCFDataRef Value = v22;
      AudioUnitParameterValue v13 = 60.0;
      goto LABEL_90;
    case 32:
      buffer->cfNameString = @"Level-based VAD";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Level-based VAD", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      AudioUnitParameterUnit v25 = kAudioUnitParameterUnit_Indexed;
      goto LABEL_88;
    case 33:
      buffer->cfNameString = @"VAD window length (rectangular)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"VAD window length (rectangular)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x3F8000003C23D70ALL;
      AudioUnitParameterValue v13 = 0.125;
      goto LABEL_90;
    case 34:
      buffer->cfNameString = @"Absolute silence thd";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Absolute silence thd", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 3267887104;
      AudioUnitParameterValue v13 = -48.0;
      goto LABEL_90;
    case 35:
      buffer->cfNameString = @"Ext. speech prob estimate (from NS)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Ext. speech prob estimate (from NS)", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v21 = 0x3F80000000000000;
LABEL_42:
      *(void *)&buffer->minCFDataRef Value = v21;
      buffer->defaultCFDataRef Value = 0.0;
      goto LABEL_61;
    case 36:
      buffer->cfNameString = @"Ext. speech prob thd";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Ext. speech prob thd", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x3F80000000000000;
      AudioUnitParameterValue v13 = 0.4;
      goto LABEL_90;
    case 37:
      buffer->cfNameString = @"Minimum tracking level";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Minimum tracking level", buffer->name, 52, 0x8000100u);
      UInt32 v6 = 7;
LABEL_45:
      buffer->clumpID = v6;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 0x41A00000C2C80000;
      buffer->defaultCFDataRef Value = -100.0;
      goto LABEL_60;
    case 38:
      buffer->cfNameString = @"Minimum tracking length";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Minimum tracking length", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x40C000003C23D70ALL;
      AudioUnitParameterValue v13 = 4.0;
      goto LABEL_90;
    case 39:
      buffer->cfNameString = @"Minimum tracking VAD thd";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Minimum tracking VAD thd", buffer->name, 52, 0x8000100u);
      UInt32 v14 = 7;
LABEL_48:
      buffer->clumpID = v14;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v15 = 0x41A0000000000000;
LABEL_49:
      *(void *)&buffer->minCFDataRef Value = v15;
      AudioUnitParameterValue v13 = 10.0;
      goto LABEL_90;
    case 40:
      buffer->cfNameString = @"Soft clipping";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Soft clipping", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(void *)&buffer->minCFDataRef Value = 0x3F80000000000000;
      buffer->defaultCFDataRef Value = 0.0;
      goto LABEL_80;
    case 41:
      buffer->cfNameString = @"Calibration mode (turns AGC off)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Calibration mode (turns AGC off)", buffer->name, 52, 0x8000100u);
      UInt32 v20 = 8;
LABEL_52:
      buffer->clumpID = v20;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      uint64_t v24 = 0x3F80000000000000;
      goto LABEL_85;
    case 42:
      buffer->cfNameString = @"Calibration";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Calibration", buffer->name, 52, 0x8000100u);
      UInt32 v18 = 8;
LABEL_54:
      buffer->clumpID = v18;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v8 = 0x41200000C1200000;
      goto LABEL_59;
    case 43:
      buffer->cfNameString = @"Calibration/AGC target level";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Calibration/AGC target level", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(void *)&buffer->minCFDataRef Value = 0xC1200000C2480000;
      AudioUnitParameterValue v13 = -30.0;
      goto LABEL_90;
    case 44:
      buffer->cfNameString = @"Non-level-based VAD";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Non-level-based VAD", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      uint64_t v16 = 0x4080000000000000;
LABEL_57:
      *(void *)&buffer->minCFDataRef Value = v16;
      AudioUnitParameterValue v13 = 3.0;
      goto LABEL_90;
    case 45:
      buffer->cfNameString = @"VAD state: 1=periodicity; 2=sparsity; 3=both";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"VAD state: 1=periodicity; 2=sparsity; 3=both", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v8 = 0x4040000000000000;
LABEL_59:
      *(void *)&buffer->minCFDataRef Value = v8;
      buffer->defaultCFDataRef Value = 0.0;
LABEL_60:
      AudioUnitParameterOptions v12 = flags & 0x7FFFFFFF;
LABEL_61:
      int v26 = 1074823168;
      break;
    case 46:
      buffer->cfNameString = @"Release time";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Release time", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFDataRef Value = 0x43FA000000000000;
      AudioUnitParameterValue v27 = 200.0;
      goto LABEL_79;
    case 47:
      buffer->cfNameString = @"LPC block size";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"LPC block size", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      uint64_t v17 = 0x41F000003F800000;
LABEL_64:
      *(void *)&buffer->minCFDataRef Value = v17;
      AudioUnitParameterValue v27 = 18.0;
      goto LABEL_79;
    case 48:
      buffer->cfNameString = @"LPC order";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"LPC order", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x41A000003F800000;
      AudioUnitParameterValue v27 = 12.0;
      goto LABEL_79;
    case 49:
      buffer->cfNameString = @"LPC bandwidth expansion";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"LPC bandwidth expansion", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x3F8000003C23D70ALL;
      AudioUnitParameterValue v27 = 0.9;
      goto LABEL_79;
    case 50:
      buffer->cfNameString = @"Autocorrelation length";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Autocorrelation length", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      uint64_t v28 = 0x4248000041200000;
      goto LABEL_75;
    case 51:
      buffer->cfNameString = @"Min pitch frequency";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Min pitch frequency", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(void *)&buffer->minCFDataRef Value = 0x43FA000042480000;
      AudioUnitParameterValue v27 = 70.0;
      goto LABEL_79;
    case 52:
      buffer->cfNameString = @"Max pitch frequency";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Max pitch frequency", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Hertz;
      *(void *)&buffer->minCFDataRef Value = 0x43FA000042480000;
      AudioUnitParameterValue v27 = 350.0;
      goto LABEL_79;
    case 53:
      buffer->cfNameString = @"Periodicity smoothing TC";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Periodicity smoothing TC", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFDataRef Value = 0x4348000000000000;
      AudioUnitParameterValue v27 = 3.0;
      goto LABEL_79;
    case 54:
      CFStringRef v29 = @"Periodicity background smoothing TC";
      goto LABEL_77;
    case 55:
      buffer->cfNameString = @"Periodicity thd above background";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Periodicity thd above background", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x3F00000000000000;
      AudioUnitParameterValue v27 = 0.08;
      goto LABEL_79;
    case 56:
      buffer->cfNameString = @"Sparsity blocksize";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Sparsity blocksize", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      *(void *)&buffer->minCFDataRef Value = 0x4248000041200000;
      AudioUnitParameterValue v27 = 50.0;
      goto LABEL_79;
    case 57:
      buffer->cfNameString = @"Sparsity smoothing TC";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Sparsity smoothing TC", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Milliseconds;
      uint64_t v28 = 0x4348000000000000;
LABEL_75:
      *(void *)&buffer->minCFDataRef Value = v28;
      AudioUnitParameterValue v27 = 15.0;
      goto LABEL_79;
    case 58:
      CFStringRef v29 = @"Sparsity background smothing TC";
LABEL_77:
      buffer->cfNameString = v29;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v29, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDataRef Value = 0x400000003C23D70ALL;
      AudioUnitParameterValue v27 = 0.2;
      goto LABEL_79;
    case 59:
      buffer->cfNameString = @"Sparsity thd above background";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Sparsity thd above background", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x3F00000000000000;
      AudioUnitParameterValue v27 = 0.02;
LABEL_79:
      buffer->defaultCFDataRef Value = v27;
LABEL_80:
      int v26 = -1005584384;
      break;
    case 60:
      CFStringRef v30 = @"Current residual periodicity above smoothed background";
      goto LABEL_83;
    case 61:
      CFStringRef v30 = @"Current residual sparsity above smoothed background";
LABEL_83:
      buffer->cfNameString = v30;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v30, buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v31 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x3F80000000000000;
      buffer->defaultCFDataRef Value = 0.0;
      goto LABEL_95;
    case 62:
      buffer->cfNameString = @"Pre gain";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Pre gain", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 5;
      AudioUnitParameterOptions v12 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      uint64_t v24 = 0x42200000C1A00000;
LABEL_85:
      *(void *)&buffer->minCFDataRef Value = v24;
      buffer->defaultCFDataRef Value = 0.0;
      goto LABEL_91;
    case 63:
      buffer->cfNameString = @"Limiter";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Limiter", buffer->name, 52, 0x8000100u);
      UInt32 v11 = 6;
LABEL_87:
      buffer->clumpID = v11;
      AudioUnitParameterOptions v12 = buffer->flags;
      AudioUnitParameterUnit v25 = kAudioUnitParameterUnit_Boolean;
LABEL_88:
      buffer->unit = v25;
      uint64_t v19 = 0x3F80000000000000;
LABEL_89:
      *(void *)&buffer->minCFDataRef Value = v19;
      AudioUnitParameterValue v13 = 1.0;
LABEL_90:
      buffer->defaultCFDataRef Value = v13;
LABEL_91:
      int v26 = -1072693248;
      break;
    case 64:
      buffer->cfNameString = @"Noise Dither Enabled";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Noise Dither Enabled", buffer->name, 52, 0x8000100u);
      buffer->clumpID = 7;
      AudioUnitParameterOptions v31 = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDataRef Value = 0x3F80000000000000;
      buffer->defaultCFDataRef Value = 1.0;
LABEL_95:
      AudioUnitParameterOptions v12 = v31 & 0x7FFFFFFF;
      int v26 = 68190208;
      break;
    default:
      return 4294956418;
  }
  AudioUnitParameterOptions v23 = v12 | v26;
LABEL_93:
  uint64_t result = 0;
  buffer->AudioUnitParameterOptions flags = v23;
  return result;
}

uint64_t AUAGCV2::SetParameter(AUAGCV2 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if ((a2 - 14 > 0x32 || ((1 << (a2 - 14)) & 0x4C00086E02031) == 0) && a2 >= 2) {
    ++*((_DWORD *)this + 148);
  }
  return 0;
}

uint64_t AUAGCV2::GetProperty(AUAGCV2 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a2 == 3700 && !a3)
  {
    uint64_t result = 0;
    int v7 = *((unsigned __int8 *)this + 376);
LABEL_4:
    *a5 = v7;
    return result;
  }
  if (!a3)
  {
    if (a2 == 29)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 554);
      goto LABEL_4;
    }
    if (a2 == 21)
    {
      uint64_t result = 0;
      int v7 = *((unsigned __int8 *)this + 552);
      goto LABEL_4;
    }
  }
  return 4294956417;
}

uint64_t AUAGCV2::GetPropertyInfo(AUAGCV2 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 3700 || a3)
  {
    if (a3 || (a2 | 8) != 0x1D) {
      return 4294956417;
    }
    BOOL v6 = 1;
  }
  else
  {
    BOOL v6 = 0;
  }
  uint64_t result = 0;
  *a6 = v6;
  *a5 = 4;
  return result;
}

void AUAGCV2::~AUAGCV2(AUAGCV2 *this)
{
  AUAGCV2::~AUAGCV2(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14BE7E0;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  *(_OWORD *)((char *)this + 568) = 0u;
  *(void *)this = &unk_1F14C8258;
  uint64_t v3 = v2;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

void clsp::ConvoyDisplacementControllerV2::setLogs(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[123] = v5;
  BOOL v6 = (std::__shared_weak_count *)a1[124];
  a1[124] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[113] = v8;
  AudioUnitParameterOptions v9 = (std::__shared_weak_count *)a1[114];
  a1[114] = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

float clsp::ConvoyDisplacementControllerV2::getAttenuationMax(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 144);
}

float clsp::ConvoyDisplacementControllerV2::getflvMax(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 145);
}

double clsp::ConvoyDisplacementControllerV2::postProcess(clsp::ConvoyDisplacementControllerV2 *this)
{
  *(void *)&double result = 1065353216;
  *((void *)this + 72) = 1065353216;
  return result;
}

uint64_t clsp::ConvoyDisplacementControllerV2::zapBadValues(uint64_t this)
{
  float64x2_t v1 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  float32x4_t v3 = *(float32x4_t *)(this + 940);
  float32x4_t v4 = vabsq_f32(v3);
  float64x2_t v5 = vcvt_hight_f64_f32(v4);
  float64x2_t v6 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  *(int8x16_t *)(this + 940) = vandq_s8((int8x16_t)v3, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v6, v1), (int8x16_t)vcgtq_f64(v2, v6)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v5, v1), (int8x16_t)vcgtq_f64(v2, v5))));
  float v7 = *(float *)(this + 424);
  uint64_t v8 = *(void *)(this + 160);
  uint64_t v9 = *(void *)(this + 168);
  float64x2_t v10 = *(float64x2_t *)(v8 + 40);
  float64x2_t v11 = vabsq_f64(v10);
  *(int8x16_t *)(v8 + 40) = vandq_s8((int8x16_t)v10, vandq_s8((int8x16_t)vcgtq_f64(v11, v1), (int8x16_t)vcgtq_f64(v2, v11)));
  float64x2_t v12 = *(float64x2_t *)(v8 + 56);
  float64x2_t v13 = vabsq_f64(v12);
  *(int8x16_t *)(v8 + 56) = vandq_s8((int8x16_t)v12, vandq_s8((int8x16_t)vcgtq_f64(v13, v1), (int8x16_t)vcgtq_f64(v2, v13)));
  v12.f64[0] = *(float64_t *)(this + 120);
  float64x2_t v14 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v12.f64[0]));
  *(int8x8_t *)(this + 120) = vand_s8(*(int8x8_t *)&v12.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v14, v1), (int8x16_t)vcgtq_f64(v2, v14))));
  float v15 = *(float *)(this + 648);
  double v16 = fabsf(v15);
  if (v16 >= 1.0e15 || v16 <= 1.0e-15) {
    float v15 = 0.0;
  }
  *(float *)(this + 648) = v15;
  float32x2_t v18 = *(float32x2_t *)(this + 140);
  float64x2_t v19 = vcvtq_f64_f32(vabs_f32(v18));
  *(int8x8_t *)(this + 140) = vand_s8((int8x8_t)v18, (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v19, v1), (int8x16_t)vcgtq_f64(v2, v19))));
  float v20 = *(float *)(this + 688);
  double v21 = fabsf(v20);
  if (v21 >= 1.0e15 || v21 <= 1.0e-15) {
    float v20 = 0.0;
  }
  *(float *)(this + 688) = v20;
  float v23 = *(float *)(this + 708);
  double v24 = fabsf(v23);
  if (v24 >= 1.0e15 || v24 <= 1.0e-15) {
    float v23 = 0.0;
  }
  *(float *)(this + 708) = v23;
  float v26 = *(float *)(this + 104);
  double v27 = fabsf(v26);
  if (v27 >= 1.0e15 || v27 <= 1.0e-15) {
    float v26 = 0.0;
  }
  if (v26 >= v7) {
    float v7 = v26;
  }
  *(float *)(this + 104) = v7;
  float64x2_t v29 = *(float64x2_t *)(v9 + 40);
  float64x2_t v30 = vabsq_f64(v29);
  *(int8x16_t *)(v9 + 40) = vandq_s8((int8x16_t)v29, vandq_s8((int8x16_t)vcgtq_f64(v30, v1), (int8x16_t)vcgtq_f64(v2, v30)));
  float64x2_t v31 = *(float64x2_t *)(v9 + 56);
  float64x2_t v32 = vabsq_f64(v31);
  *(int8x16_t *)(v9 + 56) = vandq_s8((int8x16_t)v31, vandq_s8((int8x16_t)vcgtq_f64(v32, v1), (int8x16_t)vcgtq_f64(v2, v32)));
  uint64_t v33 = *(void *)(this + 176);
  float64x2_t v34 = *(float64x2_t *)(v33 + 40);
  float64x2_t v35 = vabsq_f64(v34);
  *(int8x16_t *)(v33 + 40) = vandq_s8((int8x16_t)v34, vandq_s8((int8x16_t)vcgtq_f64(v35, v1), (int8x16_t)vcgtq_f64(v2, v35)));
  float64x2_t v36 = *(float64x2_t *)(v33 + 56);
  float64x2_t v37 = vabsq_f64(v36);
  *(int8x16_t *)(v33 + 56) = vandq_s8((int8x16_t)v36, vandq_s8((int8x16_t)vcgtq_f64(v37, v1), (int8x16_t)vcgtq_f64(v2, v37)));
  v36.f64[0] = *(float64_t *)(this + 196);
  float64x2_t v38 = vcvtq_f64_f32(vabs_f32(*(float32x2_t *)&v36.f64[0]));
  *(int8x8_t *)(this + 196) = vand_s8(*(int8x8_t *)&v36.f64[0], (int8x8_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vcgtq_f64(v38, v1), (int8x16_t)vcgtq_f64(v2, v38))));
  float v39 = *(float *)(this + 748);
  double v40 = fabsf(v39);
  if (v40 >= 1.0e15 || v40 <= 1.0e-15) {
    float v39 = 0.0;
  }
  *(float *)(this + 748) = v39;
  if (v39 == 0.0) {
    *(_DWORD *)(this + 748) = *(_DWORD *)(this + 744);
  }
  float v42 = *(float *)(this + 788);
  double v43 = fabsf(v42);
  if (v43 >= 1.0e15 || v43 <= 1.0e-15) {
    float v42 = 0.0;
  }
  *(float *)(this + 788) = v42;
  if (v42 == 0.0) {
    *(_DWORD *)(this + 788) = *(_DWORD *)(this + 784);
  }
  float v45 = *(float *)(this + 824);
  double v46 = fabsf(v45);
  if (v46 >= 1.0e15 || v46 <= 1.0e-15) {
    float v45 = 0.0;
  }
  *(float *)(this + 824) = v45;
  double v48 = fabsf(*(float *)(this + 864));
  if (v48 >= 1.0e15 || v48 <= 1.0e-15) {
    float v50 = 0.0;
  }
  else {
    float v50 = *(float *)(this + 864);
  }
  *(float *)(this + 864) = v50;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::reset(clsp::ConvoyDisplacementControllerV2 *this)
{
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  *((_DWORD *)this + 206) = 1065353216;
  float v1 = *((float *)this + 105);
  float v2 = fabsf(*((float *)this + 94));
  float v3 = fabsf(*((float *)this + 95));
  if (v3 < v2) {
    float v2 = v3;
  }
  float v4 = v1 * v2;
  *((float *)this + 24) = v4;
  *((float *)this + 25) = 1.0 / v4;
  *((float *)this + 109) = v4;
  *((float *)this + 216) = v4;
  *((float *)this + 108) = v1;
  *((_DWORD *)this + 187) = *((_DWORD *)this + 186);
  *((_DWORD *)this + 197) = *((_DWORD *)this + 196);
  *(void *)((char *)this + 948) = 0;
  *(void *)((char *)this + 940) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 162) = 0;
  *(void *)((char *)this + 140) = 0;
  *((_DWORD *)this + 172) = 0;
  *((_DWORD *)this + 177) = 0;
  *((float *)this + 26) = v4;
  uint64_t v5 = *((void *)this + 20);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  uint64_t v6 = *((void *)this + 21);
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  uint64_t v7 = *((void *)this + 22);
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(void *)((char *)this + 196) = 0;
  *((void *)this + 71) = 0;
  *((_DWORD *)this + 130) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((_DWORD *)this + 133) = *((_DWORD *)this + 132);
  *((_DWORD *)this + 137) = 0;
  *((unsigned char *)this + 560) = 0;
  *(void *)&double result = 1065353216;
  *((void *)this + 72) = 1065353216;
  *((_DWORD *)this + 139) = 0;
  *((_DWORD *)this + 148) = 0;
  *((void *)this + 75) = 0;
  *((unsigned char *)this + 608) = 0;
  return result;
}

uint64_t clsp::ConvoyDisplacementControllerV2::setSkipTelemetryBuffer(uint64_t this, char a2)
{
  *(unsigned char *)(this + 560) = a2;
  return this;
}

float clsp::ConvoyDisplacementControllerV2::getNormAttenFactor(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 26) * *((float *)this + 107);
}

float32_t clsp::ConvoyDisplacementControllerV2::analyzeDisp(float32x2_t *this, float a2, float a3)
{
  float v4 = this[60].f32[0];
  float v5 = this[103].f32[0];
  uint64_t v6 = 203;
  if (v5 < v4) {
    uint64_t v6 = 202;
  }
  float v7 = v5 + (float)(this->f32[v6] * (float)(v4 - v5));
  this[103].f32[0] = v7;
  float v8 = this[54].f32[1];
  float v9 = this[108].f32[0];
  uint64_t v10 = 213;
  if (v9 < v8) {
    uint64_t v10 = 212;
  }
  float v11 = v9 + (float)(this->f32[v10] * (float)(v8 - v9));
  this[108].f32[0] = v11;
  float v12 = 1.0 / v11;
  this[12].f32[0] = v11;
  this[12].f32[1] = 1.0 / v11;
  float v13 = this[14].f32[0];
  float v14 = this[15].f32[0];
  float v15 = (float)((float)(v7 * a2) * this[14].f32[1]) - (float)(v14 * this[13].f32[1]);
  float v16 = this[15].f32[1];
  float v17 = this[16].f32[0];
  float v18 = v15 - (float)(v16 * v13);
  this[15].f32[0] = v18;
  this[15].f32[1] = v14;
  float v19 = -(float)(v15 + (float)((float)-v16 * v13));
  if (v18 >= 0.0) {
    float v19 = v18;
  }
  float v20 = this[81].f32[0];
  uint64_t v21 = 159;
  if (v20 < v19) {
    uint64_t v21 = 158;
  }
  float v22 = this->f32[v21];
  float v23 = v19 - v20;
  float v24 = v20 + (float)(v22 * v23);
  this[81].f32[0] = v24;
  if (v11 >= v24) {
    float v25 = v11;
  }
  else {
    float v25 = v20 + (float)(v22 * v23);
  }
  float v26 = this[16].f32[1];
  float v27 = this[17].f32[1];
  float v28 = this[18].f32[0];
  float v29 = (float)((float)(v7 * a3) * this[17].f32[0]) - (float)(v27 * v17);
  float v30 = v29 - (float)(v28 * v26);
  this[17].f32[1] = v30;
  this[18].f32[0] = v27;
  float v31 = -(float)(v29 + (float)((float)-v28 * v26));
  if (v30 >= 0.0) {
    float v31 = v30;
  }
  float v32 = this[86].f32[0];
  uint64_t v33 = 169;
  if (v32 < v31) {
    uint64_t v33 = 168;
  }
  float v34 = this->f32[v33];
  float v35 = v32 + (float)(v34 * (float)(v31 - v32));
  this[86].f32[0] = v35;
  if (v11 >= v35) {
    float v36 = v11;
  }
  else {
    float v36 = v32 + (float)(v34 * (float)(v31 - v32));
  }
  float v37 = this[88].f32[1] + (float)(this[88].f32[0] * (float)((float)(v12 * v36) - this[88].f32[1]));
  this[88].f32[1] = v37;
  v38.f32[0] = v12 * (float)(v25 * v37);
  float32_t v39 = v38.f32[0] * this[53].f32[0];
  v38.f32[1] = v31;
  this[72] = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v38, this[72]), (int8x8_t)v38, (int8x8_t)this[72]);
  this[13].f32[0] = v39;
  double v40 = (clsp::CLSP_Log **)this[123];
  unsigned int v41 = *v40;
  if (*v40)
  {
    float __src = a3;
    clsp::CLSP_Log::LogCLSPData(v41, &__src, 1);
    double v40 = (clsp::CLSP_Log **)this[123];
  }
  float v42 = v40[2];
  if (v42)
  {
    float __src = v18;
    clsp::CLSP_Log::LogCLSPData(v42, &__src, 1);
    double v40 = (clsp::CLSP_Log **)this[123];
    double v43 = v40[2];
    if (v43)
    {
      float __src = v24;
      clsp::CLSP_Log::LogCLSPData(v43, &__src, 1);
      double v40 = (clsp::CLSP_Log **)this[123];
      unsigned int v44 = v40[2];
      if (v44)
      {
        float __src = v25;
        clsp::CLSP_Log::LogCLSPData(v44, &__src, 1);
        double v40 = (clsp::CLSP_Log **)this[123];
        float v45 = v40[2];
        if (v45)
        {
          float __src = v37;
          clsp::CLSP_Log::LogCLSPData(v45, &__src, 1);
          double v40 = (clsp::CLSP_Log **)this[123];
        }
      }
    }
  }
  double v46 = *v40;
  if (*v40)
  {
    float __src = v30;
    clsp::CLSP_Log::LogCLSPData(v46, &__src, 1);
    uint64_t v47 = **(clsp::CLSP_Log ***)&this[123];
    if (v47)
    {
      float __src = v35;
      clsp::CLSP_Log::LogCLSPData(v47, &__src, 1);
      double v48 = **(clsp::CLSP_Log ***)&this[123];
      if (v48)
      {
        float __src = this[13].f32[0];
        clsp::CLSP_Log::LogCLSPData(v48, &__src, 1);
        uint64_t v49 = **(clsp::CLSP_Log ***)&this[123];
        if (v49)
        {
          float v50 = (float *)(*(uint64_t (**)(float32x2_t *))(*(void *)this + 128))(this);
          float __src = log10f(v50[21]* (float)((float)((float)((float)(1.0 - v50[12]) + v50[13])* (float)((float)(v50[14] + v50[15]) + v50[16]))/ (float)((float)(v50[12] + 1.0) + v50[13])))* 20.0;
          clsp::CLSP_Log::LogCLSPData(v49, &__src, 1);
        }
      }
    }
  }
  return this[13].f32[0];
}

void clsp::ConvoyDisplacementControllerV2::processSample(clsp::ConvoyDisplacementControllerV2 *this, float a2, float a3)
{
  if (*((unsigned char *)this + 72))
  {
    float v5 = *((float *)this + 26);
    if (v5 >= *((float *)this + 224)) {
      float v5 = *((float *)this + 224);
    }
    float v6 = (float)(*((float *)this + 218) + (float)(*((float *)this + 219) * v5))
       + (float)(*((float *)this + 220) * (float)(v5 * v5));
    float v7 = (float)(*((float *)this + 221) + (float)(*((float *)this + 222) * v5))
       + (float)(*((float *)this + 223) * (float)(v5 * v5));
    *((float *)this + 230) = v6;
    *((float *)this + 231) = v7;
    float v8 = *(clsp::CLSP_Log **)(*((void *)this + 113) + 16);
    if (v8)
    {
      float __src = v6;
      clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
      float v9 = *(clsp::CLSP_Log **)(*((void *)this + 113) + 16);
      if (v9)
      {
        float v14 = v7;
        clsp::CLSP_Log::LogCLSPData(v9, &v14, 1);
      }
    }
    float v10 = *((float *)this + 235);
    float v11 = *((float *)this + 237);
    float v12 = (float)((float)((float)((float)(*((float *)this + 233) * v10) + (float)(a3 * *((float *)this + 232)))
                        + (float)(*((float *)this + 236) * *((float *)this + 234)))
                - (float)(v11 * *((float *)this + 230)))
        - (float)(*((float *)this + 238) * *((float *)this + 231));
    *((float *)this + 235) = a3;
    *((float *)this + 236) = v10;
    *((float *)this + 237) = v12;
    *((float *)this + 238) = v11;
  }
}

uint64_t clsp::ConvoyDisplacementControllerV2::calcCoeffsSyncDisp(clsp::ConvoyDisplacementControllerV2 *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  float v7 = (double *)*((void *)this + 19);
  if (!v7) {
    __assert_rtn("calcCoeffsSyncDisp", "ConvoyDispControllerV2.cpp", 298, "mr_dispModel");
  }
  double v13 = 1.0 / a2;
  double v14 = -(1.0 / a2 * a3);
  long double v15 = exp(v14 / (a4 + a4)) * -2.0;
  long double v16 = v15 * cos(v13 * a3 * sqrt(1.0 / (a4 * -4.0 * a4) + 1.0));
  long double v17 = exp(v14 / a4);
  float v18 = (v17 + v16 + 1.0) * (a7 * 1000.0 * v7[1] / (*v7 * v7[4]));
  float v19 = v16;
  *(float *)&long double v17 = v17;
  *((float *)this + 27) = v19;
  *((_DWORD *)this + 28) = LODWORD(v17);
  *((float *)this + 29) = v18;
  LODWORD(v17) = *((_DWORD *)this + 32);
  float v20 = *((float *)this + 33);
  uint64_t v21 = *(void *)((char *)this + 108);
  *((_DWORD *)this + 232) = 1065353216;
  *((_DWORD *)this + 233) = LODWORD(v17);
  *((float *)this + 234) = v20;
  *((void *)this + 115) = v21;
  *(float *)&long double v17 = 1.0 / (1.0 - *(float *)&v17 + v20);
  *((_DWORD *)this + 239) = LODWORD(v17);

  return clsp::LFSNFeedbackCoeffCalc::calcCoeffs((clsp::ConvoyDisplacementControllerV2 *)((char *)this + 872), a2, a3, a4, a5, 1.0, a6);
}

void clsp::ConvoyDisplacementControllerV2::calcCoeffs(clsp::ConvoyDisplacementControllerV2 *this, double a2, double a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  float v4 = (double *)*((void *)this + 19);
  if (!v4) {
    __assert_rtn("calcCoeffs", "ConvoyDispControllerV2.cpp", 220, "mr_dispModel");
  }
  float v7 = *((float *)this + 105);
  float v8 = v7 * *((float *)this + 94);
  float v9 = v7 * *((float *)this + 95);
  if (v8 > 0.0) {
    float v8 = 0.0;
  }
  if (v9 < 0.0) {
    float v9 = 0.0;
  }
  float v10 = -v8;
  if (v9 > v10) {
    float v9 = v10;
  }
  *((float *)this + 109) = v9;
  *((float *)this + 24) = v9;
  *((float *)this + 25) = 1.0 / v9;
  *((float *)this + 106) = v9;
  *((float *)this + 107) = 1.0 / v9;
  clsp::DisplacementModelSealed::calcCoeffsFLV(v4, (float *)this + 32, a2, a3);
  float v11 = clsp::DisplacementModelSealed::calcCoeffsFLV(*((double **)this + 19), (float *)this + 46, a2, 1.0);
  float v12 = (double *)*((void *)this + 19);
  double v13 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *, float))(*(void *)this + 72))(this, v11);
  double v14 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *))(*(void *)this + 40))(this);
  float v15 = clsp::DisplacementModelSealed::calcCoeffsPTP(v12, (float *)this + 27, a2, v13, v14, a3);
  long double v16 = (double *)*((void *)this + 19);
  double v17 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *, float))(*(void *)this + 72))(this, v15);
  double v18 = (*(double (**)(clsp::ConvoyDisplacementControllerV2 *))(*(void *)this + 40))(this);
  clsp::LFSN::calcCoeffs((uint64_t)this + 872, v16, a2, *(double *)((char *)this + 108), *((float *)this + 32), *((float *)this + 33), v17, v18, *((float *)this + 106), a3);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 616, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 656, a2);
  double v19 = *((double *)this + 7);
  *((double *)this + 87) = v19;
  double v20 = v19 * a2;
  double v21 = 0.0;
  if (v20 >= 0.00001) {
    double v21 = exp(-4.60517019 / v20);
  }
  float v22 = 1.0 - v21;
  *((float *)this + 176) = v22;
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 20), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(9, *((double **)this + 21), a2, 1.0);
  clsp::ConvoyDisplacementController::designBQCoeffs(8, *((double **)this + 22), a2, 1.0);
  unint64_t v23 = vcvtad_u64_f64(*((double *)this + 8) * 0.001 * a2);
  *((void *)this + 49) = v23;
  if (v23 >= (uint64_t)(*((void *)this + 43) - *((void *)this + 41)) >> 2)
  {
    if (shouldTraceRender())
    {
      float v24 = (NSObject **)spp3SubsystemAsync();
      if (v24)
      {
        float v25 = *v24;
        if (!*v24) {
          goto LABEL_19;
        }
      }
      else
      {
        float v25 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = 136315394;
        float v28 = "ConvoyDispControllerV2.cpp";
        __int16 v29 = 1024;
        int v30 = 263;
        _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Trying to set peakFinderWindowTime_ms past max capacity", (uint8_t *)&v27, 0x12u);
      }
    }
  }
  else
  {
    std::vector<float>::resize((uint64_t)this + 304, v23);
    std::vector<float>::resize((uint64_t)this + 328, *((void *)this + 49));
  }
LABEL_19:
  *((float32x2_t *)this + 50) = vmul_f32(*(float32x2_t *)((char *)this + 384), (float32x2_t)vrev64_s32(*(int32x2_t *)((char *)this + 376)));
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 712, a2);
  clsp::AttackReleaseTo<float,double>::calcCoeffs((uint64_t)this + 752, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 792, a2);
  clsp::AttackRelease<float,double>::calcCoeffs((uint64_t)this + 832, a2);
  float v26 = round(*((float *)this + 135) * 0.001 * a2);
  *((float *)this + 136) = v26;
  *((_DWORD *)this + 125) = vcvtad_u64_f64(a2 * 0.1);
  *((_DWORD *)this + 126) = vcvtad_u64_f64(a2);
  *((_DWORD *)this + 127) = vcvtad_u64_f64(a2 * 30.0);
  *((void *)this + 73) = llround(a2);
}

float clsp::ConvoyDisplacementControllerV2::getAttenuationFactor(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((float *)this + 26);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setAttenuationFactor(uint64_t this, float a2)
{
  *(float *)(this + 104) = a2;
  return this;
}

uint64_t clsp::ConvoyDisplacementControllerV2::getDispEnabled(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setDispEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 72) = a2;
  return this;
}

uint64_t clsp::ConvoyDisplacementControllerV2::getLFSN(clsp::ConvoyDisplacementControllerV2 *this)
{
  return (uint64_t)this + 872;
}

double clsp::ConvoyDisplacementControllerV2::getFlvSmoothingTime(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 7);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setFlvSmoothingTime(uint64_t this, double a2)
{
  *(double *)(this + 56) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getPeakDecayTime(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 6);
}

double *clsp::ConvoyDisplacementControllerV2::setPeakDecayTime(double *this, double a2)
{
  this[6] = a2;
  this[78] = a2;
  this[83] = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getPeakAttackTime(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 5);
}

double *clsp::ConvoyDisplacementControllerV2::setPeakAttackTime(double *this, double a2)
{
  this[5] = a2;
  this[77] = a2;
  this[82] = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getQ_d(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 4);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setQ_d(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getX_lim(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 3);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setX_lim(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

double clsp::ConvoyDisplacementControllerV2::getG_bw(clsp::ConvoyDisplacementControllerV2 *this)
{
  return *((double *)this + 2);
}

uint64_t clsp::ConvoyDisplacementControllerV2::setG_bw(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

void clsp::ConvoyDisplacementControllerV2::logCoeffs(uint64_t a1, uint64_t a2)
{
  float v4 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v5 = *(double *)(a1 + 16);
  float __src = v5;
  clsp::CLSP_Log::LogCLSPData(v4, &__src, 1);
  float v6 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v7 = *(double *)(a1 + 24);
  float __src = v7;
  clsp::CLSP_Log::LogCLSPData(v6, &__src, 1);
  float v8 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v9 = *(double *)(a1 + 32);
  float __src = v9;
  clsp::CLSP_Log::LogCLSPData(v8, &__src, 1);
  float v10 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v11 = *(double *)(a1 + 40);
  float __src = v11;
  clsp::CLSP_Log::LogCLSPData(v10, &__src, 1);
  float v12 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v13 = *(double *)(a1 + 48);
  float __src = v13;
  clsp::CLSP_Log::LogCLSPData(v12, &__src, 1);
  double v14 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v15 = *(double *)(a1 + 56);
  float __src = v15;
  clsp::CLSP_Log::LogCLSPData(v14, &__src, 1);
  long double v16 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float v17 = *(double *)(a1 + 64);
  float __src = v17;
  clsp::CLSP_Log::LogCLSPData(v16, &__src, 1);
  double v18 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 96);
  clsp::CLSP_Log::LogCLSPData(v18, &__src, 1);
  double v19 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 100);
  clsp::CLSP_Log::LogCLSPData(v19, &__src, 1);
  double v20 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 384);
  clsp::CLSP_Log::LogCLSPData(v20, &__src, 1);
  double v21 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 388);
  clsp::CLSP_Log::LogCLSPData(v21, &__src, 1);
  float v22 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = (float)*(unint64_t *)(a1 + 392);
  clsp::CLSP_Log::LogCLSPData(v22, &__src, 1);
  unint64_t v23 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 400);
  clsp::CLSP_Log::LogCLSPData(v23, &__src, 1);
  float v24 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 404);
  clsp::CLSP_Log::LogCLSPData(v24, &__src, 1);
  float v25 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 408);
  clsp::CLSP_Log::LogCLSPData(v25, &__src, 1);
  float v26 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 376);
  clsp::CLSP_Log::LogCLSPData(v26, &__src, 1);
  int v27 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 380);
  clsp::CLSP_Log::LogCLSPData(v27, &__src, 1);
  float v28 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 412);
  clsp::CLSP_Log::LogCLSPData(v28, &__src, 1);
  __int16 v29 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 416);
  clsp::CLSP_Log::LogCLSPData(v29, &__src, 1);
  int v30 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 420);
  clsp::CLSP_Log::LogCLSPData(v30, &__src, 1);
  uint64_t v31 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 424);
  clsp::CLSP_Log::LogCLSPData(v31, &__src, 1);
  float v32 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 428);
  clsp::CLSP_Log::LogCLSPData(v32, &__src, 1);
  uint64_t v33 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 484);
  clsp::CLSP_Log::LogCLSPData(v33, &__src, 1);
  float v34 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 488);
  clsp::CLSP_Log::LogCLSPData(v34, &__src, 1);
  float v35 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 492);
  clsp::CLSP_Log::LogCLSPData(v35, &__src, 1);
  float v36 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 496);
  clsp::CLSP_Log::LogCLSPData(v36, &__src, 1);
  float v37 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 528);
  clsp::CLSP_Log::LogCLSPData(v37, &__src, 1);
  float32x2_t v38 = *(clsp::CLSP_Log **)a2;
  if (!*(void *)a2) {
    goto LABEL_32;
  }
  float __src = *(float *)(a1 + 536);
  clsp::CLSP_Log::LogCLSPData(v38, &__src, 1);
  float32_t v39 = *(clsp::CLSP_Log **)a2;
  if (*(void *)a2
    && (float __src = *(float *)(a1 + 540),
        clsp::CLSP_Log::LogCLSPData(v39, &__src, 1),
        (double v40 = *(clsp::CLSP_Log **)a2) != 0))
  {
    float __src = *(float *)(a1 + 544);
    clsp::CLSP_Log::LogCLSPData(v40, &__src, 1);
    unsigned int v41 = *(clsp::CLSP_Log **)a2;
  }
  else
  {
LABEL_32:
    unsigned int v41 = 0;
  }
  float v42 = (float *)(a1 + 108);
  double v43 = *(atomic_ullong **)(a2 + 8);
  v75[0] = v41;
  v75[1] = (clsp::CLSP_Log *)v43;
  if (v43)
  {
    atomic_fetch_add_explicit(v43 + 1, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v42, v75);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v43);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v42, v75);
  }
  unsigned int v44 = (float *)(a1 + 128);
  float v45 = *(atomic_ullong **)(a2 + 8);
  v74[0] = *(clsp::CLSP_Log **)a2;
  v74[1] = (clsp::CLSP_Log *)v45;
  if (v45)
  {
    atomic_fetch_add_explicit(v45 + 1, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v44, v74);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v45);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v44, v74);
  }
  double v46 = (float *)(a1 + 184);
  uint64_t v47 = *(atomic_ullong **)(a2 + 8);
  v73[0] = *(clsp::CLSP_Log **)a2;
  v73[1] = (clsp::CLSP_Log *)v47;
  if (v47)
  {
    atomic_fetch_add_explicit(v47 + 1, 1uLL, memory_order_relaxed);
    clsp::IIRTwoPole<float>::logCoeffs(v46, v73);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v47);
  }
  else
  {
    clsp::IIRTwoPole<float>::logCoeffs(v46, v73);
  }
  uint64_t v48 = a1 + 616;
  uint64_t v49 = *(atomic_ullong **)(a2 + 8);
  v72[0] = *(clsp::CLSP_Log **)a2;
  v72[1] = (clsp::CLSP_Log *)v49;
  if (v49)
  {
    atomic_fetch_add_explicit(v49 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v48, v72);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v49);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v48, v72);
  }
  uint64_t v50 = a1 + 656;
  uint64_t v51 = *(atomic_ullong **)(a2 + 8);
  v71[0] = *(clsp::CLSP_Log **)a2;
  v71[1] = (clsp::CLSP_Log *)v51;
  if (v51)
  {
    atomic_fetch_add_explicit(v51 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v50, v71);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v50, v71);
  }
  uint64_t v52 = a1 + 696;
  int v53 = *(atomic_ullong **)(a2 + 8);
  v70[0] = *(clsp::CLSP_Log **)a2;
  v70[1] = (clsp::CLSP_Log *)v53;
  if (v53)
  {
    atomic_fetch_add_explicit(v53 + 1, 1uLL, memory_order_relaxed);
    clsp::ExponentialSmoother<float,double>::logCoeffs(v52, v70);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
  }
  else
  {
    clsp::ExponentialSmoother<float,double>::logCoeffs(v52, v70);
  }
  uint64_t v54 = a1 + 712;
  int v55 = *(atomic_ullong **)(a2 + 8);
  v69[0] = *(clsp::CLSP_Log **)a2;
  v69[1] = (clsp::CLSP_Log *)v55;
  if (v55)
  {
    atomic_fetch_add_explicit(v55 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackReleaseTo<float,double>::logCoeffs(v54, v69);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v54, v69);
  }
  uint64_t v56 = a1 + 752;
  float v57 = *(atomic_ullong **)(a2 + 8);
  v68[0] = *(clsp::CLSP_Log **)a2;
  v68[1] = (clsp::CLSP_Log *)v57;
  if (v57)
  {
    atomic_fetch_add_explicit(v57 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackReleaseTo<float,double>::logCoeffs(v56, v68);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57);
  }
  else
  {
    clsp::AttackReleaseTo<float,double>::logCoeffs(v56, v68);
  }
  uint64_t v58 = a1 + 792;
  unsigned int v59 = *(atomic_ullong **)(a2 + 8);
  v67[0] = *(clsp::CLSP_Log **)a2;
  v67[1] = (clsp::CLSP_Log *)v59;
  if (v59)
  {
    atomic_fetch_add_explicit(v59 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v58, v67);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v58, v67);
  }
  uint64_t v60 = a1 + 832;
  int v61 = *(atomic_ullong **)(a2 + 8);
  v66[0] = *(clsp::CLSP_Log **)a2;
  v66[1] = (clsp::CLSP_Log *)v61;
  if (v61)
  {
    atomic_fetch_add_explicit(v61 + 1, 1uLL, memory_order_relaxed);
    clsp::AttackRelease<float,double>::logCoeffs(v60, v66);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61);
  }
  else
  {
    clsp::AttackRelease<float,double>::logCoeffs(v60, v66);
  }
  float v62 = (float *)(a1 + 872);
  uint64_t v63 = *(clsp::CLSP_Log **)a2;
  int v64 = *(std::__shared_weak_count **)(a2 + 8);
  v65[0] = v63;
  v65[1] = v64;
  if (v64)
  {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    clsp::LFSN::logCoeffs(v62, (uint64_t)v65);
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  else
  {
    clsp::LFSN::logCoeffs(v62, (uint64_t)v65);
  }
}

void *clsp::ConvoyDisplacementControllerV2::dump(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"g_bw = ", 7);
  float v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\nx_liunint64_t m = ", 9);
  float v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\nQ_d = ", 7);
  float v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\npeakAttackTime = ", 18);
  float v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\npeakDecayTime = ", 17);
  float v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\nflvSmoothingTime = ", 20);
  float v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\npeakFinderWindowTime_ms = ", 27);
  float v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\nms_x_liunint64_t m = ", 12);
  float v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\ninvxliunint64_t m = ", 11);
  float v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nptp_x_flv = ", 13);
  float v13 = (void *)std::ostream::operator<<();
  double v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\nptp:\n", 7);
  clsp::IIRTwoPole<float>::dump(a1 + 108, v14);
  float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nflv:\n", 6);
  clsp::IIRTwoPole<float>::dump(a1 + 128, v15);
  long double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nconvoyModel:\n", 14);
  clsp::IIRTwoPole<float>::dump(a1 + 184, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nrelative posPeakFinderThreshold = ", 35);
  float v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\nrelative negPeakFinderThreshold = ", 35);
  double v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\npeakFinderWindowSize = ", 24);
  double v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\nposPeakFinderthreshold = ", 26);
  double v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\nnegPeakFinderThreshold = ", 26);
  double v21 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\nxLimInc = ", 11);
  float v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\nxMiunint64_t n = ", 8);
  unint64_t v23 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\nxMax = ", 8);
  float v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nxLimUpper = ", 13);
  float v25 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\nxLimUpperReal = ", 17);
  float v26 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\nxLimLower = ", 13);
  int v27 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\nxLimInit = ", 12);
  float v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\ninvxLimInit = ", 15);
  __int16 v29 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\nMaxNormFactor = ", 17);
  int v30 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\nMinNormFactor = ", 17);
  uint64_t v31 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\nPeakRatioPosBlockThreshold = ", 30);
  float v32 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\nPeakRationNegBlockThreshold = ", 31);
  uint64_t v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\nPeakRatiosInWindowCountThreshold = ", 36);
  float v34 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\nnormFactorThreshold = ", 23);
  float v35 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\nmp_ConvoyBufferDirtyCountThreshold = ", 38);
  float v36 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\nmc_ConvoyBufferDirtyCountThreshold = ", 38);
  float v37 = (void *)std::ostream::operator<<();
  float32x2_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\nptpAtkRel:\n", 12);
  clsp::AttackRelease<float,double>::dump(a1 + 616, v38);
  float32_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"\nflvTime:\n", 10);
  clsp::AttackRelease<float,double>::dump(a1 + 656, v39);
  double v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\nflvSmoother:\n", 14);
  clsp::ExponentialSmoother<float,double>::dump(a1 + 696, v40);
  unsigned int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\nlfsn:\n", 7);
  clsp::LFSN::dump(a1 + 872, v41);
  float v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\nmodelNormFactor:\n", 18);
  clsp::AttackRelease<float,double>::dump(a1 + 792, v42);
  char v44 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)&v44, 1);
  return a2;
}

void clsp::ConvoyDisplacementControllerV2::~ConvoyDisplacementControllerV2(clsp::ConvoyDisplacementControllerV2 *this)
{
  clsp::ConvoyDisplacementControllerV2::~ConvoyDisplacementControllerV2(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(void *)this = &unk_1F14BEA48;
  float v2 = (std::__shared_weak_count *)*((void *)this + 124);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 114);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  float v4 = (void *)*((void *)this + 44);
  if (v4)
  {
    *((void *)this + 45) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 41);
  if (v5)
  {
    *((void *)this + 42) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 38);
  if (v6)
  {
    *((void *)this + 39) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 35);
  if (v7)
  {
    *((void *)this + 36) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 32);
  if (v8)
  {
    *((void *)this + 33) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 29);
  if (v9)
  {
    *((void *)this + 30) = v9;
    operator delete(v9);
  }
  float v10 = (void *)*((void *)this + 26);
  if (v10)
  {
    *((void *)this + 27) = v10;
    operator delete(v10);
  }
  float v11 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v11) {
    MEMORY[0x1C185D370](v11, 0x1000C40FF89C88ELL);
  }
  float v12 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v12) {
    MEMORY[0x1C185D370](v12, 0x1000C40FF89C88ELL);
  }
  float v13 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v13) {
    MEMORY[0x1C185D370](v13, 0x1000C40FF89C88ELL);
  }
}

void clsp::ConvoyDisplacementControllerV2::ConvoyDisplacementControllerV2(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(void *)a1 = &unk_1F14BEA48;
  *(double *)(a1 + 16) = a7;
  *(double *)(a1 + 24) = a8;
  *(double *)(a1 + 32) = a9;
  *(double *)(a1 + 40) = a10;
  *(double *)(a1 + 48) = a11;
  *(double *)(a1 + 56) = a12;
  *(double *)(a1 + 64) = *(float *)(a4 + 16);
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = a4;
  *(void *)(a1 + 88) = a5;
  float v19 = a8;
  float v20 = 1.0 / a8;
  *(float *)(a1 + 96) = v19;
  *(float *)(a1 + 100) = v20;
  *(float *)(a1 + 104) = v19;
  *(void *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(void *)(a1 + 152) = a3;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  std::vector<float>::vector((void *)(a1 + 208), a2);
  std::vector<float>::vector((void *)(a1 + 232), a2);
  std::vector<float>::vector((void *)(a1 + 256), a2);
  std::vector<float>::vector((void *)(a1 + 280), a2);
  std::vector<float>::vector((void *)(a1 + 304), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a6));
  std::vector<float>::vector((void *)(a1 + 328), vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a6));
  std::vector<float>::vector((void *)(a1 + 352), a2);
  *(void *)(a1 + 392) = vcvtad_u64_f64(*(double *)(a1 + 64) * 0.001 * a6);
  *(void *)&long long v21 = *(void *)(a4 + 4);
  *((void *)&v21 + 1) = *(void *)(a4 + 20);
  *(_OWORD *)(a1 + 376) = v21;
  *(float32x2_t *)(a1 + 400) = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)&v21), *(float32x2_t *)((char *)&v21 + 8));
  *(float *)v22.i32 = __exp10(*(float *)(a4 + 40) / -20.0);
  *(_DWORD *)(a1 + 408) = v22.i32[0];
  v22.i32[0] = *(_DWORD *)(a4 + 28);
  *(_DWORD *)(a1 + 412) = v22.i32[0];
  *(_DWORD *)(a1 + 416) = v22.i32[0];
  v22.i32[0] = *(_DWORD *)(a4 + 36);
  *(_DWORD *)(a1 + 420) = v22.i32[0];
  *(float *)(a1 + 424) = v19;
  *(float *)(a1 + 428) = v20;
  *(_DWORD *)(a1 + 432) = v22.i32[0];
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(double *)v22.i64 = a6 * 0.1;
  *(_DWORD *)(a1 + 500) = vcvtad_u64_f64(a6 * 0.1);
  int32x4_t v23 = *(int32x4_t *)(a4 + 52);
  *(_DWORD *)(a1 + 504) = vcvtad_u64_f64(a6);
  *(int32x4_t *)(a1 + 484) = v23;
  *(_DWORD *)(a1 + 508) = vcvtad_u64_f64(a6 * 30.0);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 517) = 0;
  v23.i64[0] = *(void *)(a4 + 84);
  int32x4_t v24 = vzip1q_s32(v23, v22);
  v24.i32[1] = v24.i32[0];
  v24.i32[3] = *(_DWORD *)(a4 + 92);
  *(int32x4_t *)(a1 + 528) = v24;
  *(float *)v24.i32 = round(*(float *)&v24.i32[3] * 0.001 * a6);
  *(_DWORD *)(a1 + 544) = v24.i32[0];
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 553) = 0;
  *(void *)(a1 + 548) = 0;
  *(void *)(a1 + 576) = 1065353216;
  *(void *)(a1 + 584) = llround(a6);
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(double *)(a1 + 616) = a10;
  *(double *)(a1 + 624) = a11;
  *(void *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(double *)(a1 + 656) = a10;
  *(double *)(a1 + 664) = a11;
  *(void *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  double v25 = *(float *)(a4 + 76);
  double v26 = *(float *)(a4 + 80);
  *(double *)(a1 + 712) = v25;
  *(double *)(a1 + 720) = v26;
  *(_OWORD *)(a1 + 736) = xmmword_1BB875830;
  *(double *)(a1 + 752) = v25;
  *(double *)(a1 + 760) = v26;
  *(_OWORD *)(a1 + 776) = xmmword_1BB875830;
  *(float64x2_t *)(a1 + 792) = vcvtq_f64_f32(*(float32x2_t *)(a4 + 44));
  *(void *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 0;
  *(float64x2_t *)(a1 + 832) = vcvtq_f64_f32(*(float32x2_t *)(a4 + 68));
  *(void *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 960) = 1065353216;
  *(_OWORD *)(a1 + 984) = 0u;
  *(void *)(a1 + 969) = 0;
  *(void *)(a1 + 964) = 0;
  if (a3)
  {
    if (*(float *)(a1 + 380) <= 0.0)
    {
      float v28 = "mc_xMax > 0.";
      int v29 = 108;
    }
    else if (*(float *)(a1 + 376) >= 0.0)
    {
      float v28 = "mc_xMin < 0.";
      int v29 = 109;
    }
    else if (*(float *)(a1 + 400) <= 0.0)
    {
      float v28 = "mc_posPeakFinderThreshold > 0.";
      int v29 = 110;
    }
    else
    {
      if (*(float *)(a1 + 404) < 0.0)
      {
        unint64_t v27 = (unint64_t)round(*(double *)v22.i64);
        std::vector<float>::reserve((void **)(a1 + 304), v27);
        std::vector<float>::reserve((void **)(a1 + 328), v27);
        operator new();
      }
      float v28 = "mc_negPeakFinderThreshold < 0.";
      int v29 = 111;
    }
  }
  else
  {
    float v28 = "inDispModel";
    int v29 = 106;
  }
  __assert_rtn("ConvoyDisplacementControllerV2", "ConvoyDispControllerV2.cpp", v29, v28);
}

void sub_1BB6D73B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  float v19 = (std::__shared_weak_count *)v12[124];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  float v20 = (std::__shared_weak_count *)v12[114];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  long long v21 = *v17;
  if (*v17)
  {
    v12[45] = v21;
    operator delete(v21);
  }
  int32x4_t v22 = *v16;
  if (*v16)
  {
    v12[42] = v22;
    operator delete(v22);
  }
  int32x4_t v23 = *v15;
  if (*v15)
  {
    v12[39] = v23;
    operator delete(v23);
  }
  int32x4_t v24 = *v14;
  if (*v14)
  {
    v12[36] = v24;
    operator delete(v24);
  }
  double v25 = *a12;
  if (*a12)
  {
    v12[33] = v25;
    operator delete(v25);
  }
  double v26 = *a10;
  if (*a10)
  {
    v12[30] = v26;
    operator delete(v26);
  }
  unint64_t v27 = *a11;
  if (*a11)
  {
    v12[27] = v27;
    operator delete(v27);
  }
  uint64_t v28 = v12[22];
  v12[22] = 0;
  if (v28) {
    MEMORY[0x1C185D370](v28, 0x1000C40FF89C88ELL);
  }
  uint64_t v29 = v12[21];
  v12[21] = 0;
  if (v29) {
    MEMORY[0x1C185D370](v29, 0x1000C40FF89C88ELL);
  }
  uint64_t v30 = *v13;
  *float v13 = 0;
  if (v30) {
    MEMORY[0x1C185D370](v30, 0x1000C40FF89C88ELL);
  }
  _Unwind_Resume(exception_object);
}

float clsp::ConvoyDisplacementControllerV2::resetToOpenLoop(clsp::ConvoyDisplacementControllerV2 *this)
{
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  *((_DWORD *)this + 206) = 1065353216;
  float v1 = *((float *)this + 105);
  float v2 = fabsf(*((float *)this + 94));
  float v3 = fabsf(*((float *)this + 95));
  if (v3 < v2) {
    float v2 = v3;
  }
  float v4 = v1 * v2;
  *((float *)this + 24) = v4;
  *((float *)this + 25) = 1.0 / v4;
  *((float *)this + 109) = v4;
  *((float *)this + 216) = v4;
  *((float *)this + 108) = v1;
  *((_DWORD *)this + 187) = *((_DWORD *)this + 186);
  float result = *((float *)this + 196);
  *((float *)this + 197) = result;
  return result;
}

uint64_t HOASpatializer::getLatencyFrames(HOASpatializer *this)
{
  float v1 = (unsigned int *)*((void *)this + 53);
  if (v1) {
    return *v1;
  }
  else {
    return 0;
  }
}

uint64_t HOASpatializer::processAccumulating(HOASpatializer *this, float *a2, const float **a3, int a4, float **a5, int a6, vDSP_Length a7, float a8, IR::ComplexDataCircBuffer *a9)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (a6 == a4)
  {
    if (*((unsigned char *)this + 16) && *((void *)this + 44))
    {
      LODWORD(v12) = a6;
      unsigned __int8 v15 = atomic_load((unsigned __int8 *)this + 322);
      if (v15)
      {
        float v17 = (CFDictionaryRef *)((char *)this + 32);
        CFDictionaryRef v16 = (const __CFDictionary *)*((void *)this + 4);
        if (v16)
        {
          if (*((void *)this + 75)
            && applesauce::CF::details::has_key<__CFString const*&>(v16, (const void *)kHOASourceExtentIRCustomURLParamName))
          {
            double v18 = (uint64_t (***)(void, uint64_t, uint64_t, uint64_t, void **, void, void, float))*((void *)this + 75);
            float v19 = *((float *)this + 2);
            uint64_t v20 = *((unsigned int *)this + 3);
            long long v21 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->((void *)this + 4);
            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(__p, *v21, (const void *)kHOASourceExtentIRCustomURLParamName);
            float v123 = __p[0];
            __p[0] = 0;
            LOWORD(v18) = (**v18)(v18, v20, 512, 512, &v123, 0, 0, v19);
            applesauce::CF::URLRef::~URLRef((const void **)&v123);
            std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
            if (!(_WORD)v18)
            {
              HOASpatializer::initializeSourceExtentProcessor(this);
              *((unsigned char *)this + 320) = 1;
            }
            atomic_store(0, (unsigned __int8 *)this + 322);
          }
          if (*((void *)this + 76))
          {
            if (!*v17)
            {
              exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              applesauce::CF::construct_error(exception);
            }
            if (applesauce::CF::details::has_key<__CFString const*&>(*v17, (const void *)kHOANFCIRCustomURLParamName))
            {
              int32x4_t v22 = (uint64_t (***)(void, uint64_t, uint64_t, uint64_t, void **, void, uint64_t, float))*((void *)this + 76);
              float v23 = *((float *)this + 2);
              uint64_t v24 = *((unsigned int *)this + 3);
              double v25 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->((void *)this + 4);
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(__p, *v25, (const void *)kHOANFCIRCustomURLParamName);
              float v122 = __p[0];
              __p[0] = 0;
              LOWORD(v22) = (**v22)(v22, v24, 128, 512, &v122, 0, 1, v23);
              applesauce::CF::URLRef::~URLRef((const void **)&v122);
              std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
              if (!(_WORD)v22)
              {
                HOASpatializer::initializeNFCDelaysAndBuffers(this);
                *((unsigned char *)this + 17) = 1;
                *((unsigned char *)this + 320) = 1;
                atomic_store(0, (unsigned __int8 *)this + 322);
              }
            }
          }
        }
      }
      if (*((unsigned char *)this + 132)) {
        float v26 = a8;
      }
      else {
        float v26 = 0.0;
      }
      uint64_t v27 = *((void *)this + 75);
      if (v27 && *(unsigned char *)(v27 + 208) && (uint64_t v28 = **(void **)(v27 + 160)) != 0) {
        unsigned int v120 = *(_DWORD *)(*(void *)(v28 + 24) + 168);
      }
      else {
        unsigned int v120 = 0;
      }
      float v33 = *((float *)this + 18);
      if (!*((unsigned char *)this + 320))
      {
        unsigned __int8 v34 = atomic_load((unsigned __int8 *)this + 412);
        if ((v34 & 1) == 0 && !*((unsigned char *)this + 17)) {
          goto LABEL_124;
        }
      }
      float v35 = (unsigned char *)*((void *)this + 75);
      if (v35)
      {
        if (v35[208])
        {
          BOOL v36 = fabsf(*((float *)this + 15)) >= 0.00000011921
             || (unint64_t)(fabsf(*((float *)this + 16)) >= 0.00000011921);
          (*(void (**)(unsigned char *, BOOL))(*(void *)v35 + 56))(v35, v36);
          BOOL v37 = fabsf(*((float *)this + 49)) >= 0.00000011921
             || (unint64_t)(fabsf(*((float *)this + 50)) >= 0.00000011921);
          SourceExtentProcessor::updateExtentParameters(*((SourceExtentProcessor **)this + 75), *((float *)this + 15), *((float *)this + 16));
          (*(void (**)(void, void, BOOL))(**((void **)this + 75) + 40))(*((void *)this + 75), *((unsigned __int8 *)this + 17), v37);
        }
        else
        {
          (*(void (**)(unsigned char *, void))(*(void *)v35 + 56))(v35, 0);
          LOBYTE(v37) = 0;
        }
        if (!*((unsigned char *)this + 17))
        {
          if (*(unsigned char *)(*((void *)this + 75) + 209)) {
            char v38 = v37;
          }
          else {
            char v38 = 1;
          }
          if (v38)
          {
            char v39 = !v37;
            if (*(unsigned char *)(*((void *)this + 75) + 209)) {
              char v39 = 1;
            }
            if ((v39 & 1) == 0)
            {
              HOASpatializer::calculateEncoderGains(this, *((float *)this + 12), *((float *)this + 13));
              std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 360, *((char **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
            }
          }
          else
          {
            HOA::RotationMatrix::setRotationMatrixYPR(*((float ***)this + 72), *((float *)this + 12), *((float *)this + 13), 0.0);
            *((unsigned char *)this + 592) = 0;
          }
        }
      }
      *(void *)((char *)this + 196) = *(void *)((char *)this + 60);
      if (!*((unsigned char *)this + 17)
        && *((float *)this + 46) == *((float *)this + 12)
        && *((float *)this + 47) == *((float *)this + 13)
        && *((float *)this + 48) == *((float *)this + 14))
      {
LABEL_123:
        *((unsigned char *)this + 320) = 0;
        *((unsigned char *)this + 17) = 0;
        atomic_store(0, (unsigned __int8 *)this + 412);
LABEL_124:
        uint64_t v85 = *((void *)this + 75);
        if (v85 && *(unsigned char *)(v85 + 208))
        {
          if (*(_DWORD *)(v85 + 212)) {
            BOOL v86 = 1;
          }
          else {
            BOOL v86 = *(unsigned __int8 *)(v85 + 209) != 0;
          }
        }
        else
        {
          BOOL v86 = 0;
        }
        uint64_t v87 = *((void *)this + 76);
        if (v87 && *(unsigned char *)(v87 + 208))
        {
          uint64_t v88 = **(void **)(v87 + 160);
          if (v88) {
            LODWORD(v88) = *(_DWORD *)(*(void *)(v88 + 24) + 168);
          }
          if (v88 >= v12) {
            uint64_t v89 = v12;
          }
          else {
            uint64_t v89 = v88;
          }
          if (*(_DWORD *)(v87 + 212)) {
            BOOL v90 = 1;
          }
          else {
            BOOL v90 = *(unsigned char *)(v87 + 209) != 0;
          }
        }
        else
        {
          uint64_t v89 = 0;
          BOOL v90 = 0;
        }
        unsigned int v91 = (IR::FixedIntegerDelay *)*((void *)this + 53);
        vDSP_Length v92 = a2;
        if (v91)
        {
          IR::FixedIntegerDelay::process(v91, a2, *((float **)this + 77), a7);
          vDSP_Length v92 = (const float *)*((void *)this + 77);
        }
        if (v86)
        {
          (*(void (**)(void, float *, float **, void, void, vDSP_Length, void, IR::ComplexDataCircBuffer *, float))(**((void **)this + 75) + 8))(*((void *)this + 75), a2, a5, 0, v120, a7, *((unsigned int *)this + 81), a9, v26 * (float)(1.0 - v33));
          HOASpatializer::rotateAccumulating(this, a5, a5, a7);
          if (v120)
          {
            for (uint64_t i = 0; i != v120; ++i)
            {
              uint64_t v94 = *((void *)this + 75);
              if (*(_DWORD *)(v94 + 212) || *(_DWORD *)(v94 + 216))
              {
                HOASpatializer::gainBasedProcessing(this, v92, *((float **)this + 80), i, a7, v26 * (float)(1.0 - v33));
                (*(void (**)(void, void, float *, void, uint64_t, vDSP_Length))(**((void **)this + 75)
                                                                                              + 24))(*((void *)this + 75), *((void *)this + 80), a5[i], 0, i, a7);
              }
            }
          }
          (*(void (**)(void, vDSP_Length))(**((void **)this + 75) + 48))(*((void *)this + 75), a7);
          unsigned int v95 = v120;
        }
        else
        {
          unsigned int v95 = 0;
        }
        if (v95 < *((_DWORD *)this + 104))
        {
          unint64_t v96 = v95;
          do
          {
            HOASpatializer::gainBasedProcessing(this, v92, a5[v96], v96, a7, v26 * (float)(1.0 - v33));
            ++v96;
          }
          while (v96 < *((unsigned int *)this + 104));
        }
        float v97 = (unsigned char *)*((void *)this + 76);
        if (v97 && v97[208])
        {
          if (v90)
          {
            (*(void (**)(unsigned char *, float **, void, void, uint64_t, uint64_t, vDSP_Length, void, float))(*(void *)v97 + 16))(v97, a5, *((void *)this + 86), 0, v89, v89, a7, *((unsigned int *)this + 81), 1.0);
            if (v89)
            {
              unint64_t v99 = 0;
              do
              {
                uint64_t v100 = *((void *)this + 54);
                if (v99 < (*((void *)this + 55) - v100) >> 3)
                {
                  unsigned int v101 = *(IR::FixedIntegerDelay **)(v100 + 8 * v99);
                  if (v101) {
                    __n128 v98 = IR::FixedIntegerDelay::process(v101, a5[v99], (float *)*((void *)this + 77), a7);
                  }
                }
                uint64_t v102 = (_DWORD *)*((void *)this + 76);
                if (v102[53] || v102[54])
                {
                  uint64_t v103 = *((void *)this + 54);
                  if (v99 < (*((void *)this + 55) - v103) >> 3 && *(void *)(v103 + 8 * v99)) {
                    (*(void (**)(_DWORD *, void, void, void, unint64_t, vDSP_Length, __n128))(*(void *)v102 + 24))(v102, *((void *)this + 77), *(void *)(*((void *)this + 86) + 8 * v99), 0, v99, a7, v98);
                  }
                  else {
                    (*(void (**)(_DWORD *, float *, void, void, unint64_t, vDSP_Length, __n128))(*(void *)v102 + 24))(v102, a5[v99], *(void *)(*((void *)this + 86) + 8 * v99), 0, v99, a7, v98);
                  }
                }
                vDSP_vadd(*(const float **)(*((void *)this + 86) + 8 * v99), 1, a3[v99], 1, (float *)a3[v99], 1, a7);
                ++v99;
              }
              while (v89 != v99);
            }
          }
          else if (v89)
          {
            unint64_t v106 = 0;
            do
            {
              uint64_t v107 = *((void *)this + 54);
              if (v106 < (*((void *)this + 55) - v107) >> 3
                && (float v108 = *(IR::FixedIntegerDelay **)(v107 + 8 * v106)) != 0)
              {
                IR::FixedIntegerDelay::process(v108, a5[v106], *((float **)this + 77), a7);
                vDSP_vadd(*((const float **)this + 77), 1, a3[v106], 1, (float *)a3[v106], 1, a7);
              }
              else
              {
                vDSP_vadd(a5[v106], 1, a3[v106], 1, (float *)a3[v106], 1, a7);
              }
              ++v106;
            }
            while (v89 != v106);
          }
          (*(void (**)(void, vDSP_Length))(**((void **)this + 76) + 48))(*((void *)this + 76), a7);
          int v109 = v12 - v89;
          if (v12 > v89)
          {
            unint64_t v110 = v89;
            do
            {
              uint64_t v111 = *((void *)this + 54);
              if (v110 < (*((void *)this + 55) - v111) >> 3
                && (float v112 = *(IR::FixedIntegerDelay **)(v111 + 8 * v110)) != 0)
              {
                IR::FixedIntegerDelay::process(v112, a5[v110], *((float **)this + 77), a7);
                vDSP_vadd(*((const float **)this + 77), 1, a3[v110], 1, (float *)a3[v110], 1, a7);
              }
              else
              {
                vDSP_vadd(a5[v110], 1, a3[v110], 1, (float *)a3[v110], 1, a7);
              }
              ++v110;
              --v109;
            }
            while (v109);
          }
        }
        else if (v12)
        {
          int v104 = (const float **)a5;
          unsigned int v105 = a3;
          uint64_t v12 = v12;
          do
          {
            vDSP_vadd(*v104, 1, *v105, 1, (float *)*v105, 1, a7);
            ++v105;
            ++v104;
            --v12;
          }
          while (v12);
        }
        float v113 = (IR::IRProcessor *)*((void *)this + 92);
        if (v113)
        {
          if (*((float *)this + 18) > 0.0)
          {
            unsigned int v114 = *((_DWORD *)this + 104);
            __p[0] = a2;
            IR::IRProcessor::processMultipleInputs(v113, (const float **)__p, a5, 1u, v114, a7, v33 * v26, 0);
            if (*((_DWORD *)this + 104))
            {
              unint64_t v115 = 0;
              do
              {
                vDSP_vadd(a5[v115], 1, a3[v115], 1, (float *)a3[v115], 1, a7);
                ++v115;
              }
              while (v115 < *((unsigned int *)this + 104));
            }
          }
        }
        uint64_t result = 0;
        *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
        return result;
      }
      float v45 = fabsf(*((float *)this + 14)) / 0.05;
      if (v45 <= 1.0) {
        float v46 = v45;
      }
      else {
        float v46 = 1.0;
      }
      memcpy(*((void **)this + 60), *((const void **)this + 57), *((void *)this + 58) - *((void *)this + 57));
      uint64_t v47 = 0;
      int v48 = *(_DWORD *)(*((void *)this + 44) + 4);
      uint64_t v49 = *((void *)this + 57);
      if ((v48 + 1) > 1) {
        uint64_t v50 = (v48 + 1);
      }
      else {
        uint64_t v50 = 1;
      }
      int v51 = -1;
      do
      {
        float v52 = powf(v46, (float)v47);
        int v53 = (float *)(v49 + 4 * (v47 * v47));
        int v54 = v51;
        do
          *v53++ = v52;
        while (!__CFADD__(v54++, 1));
        ++v47;
        v51 -= 2;
      }
      while (v47 != v50);
      uint64_t v56 = *((void *)this + 76);
      if (v56)
      {
        (*(void (**)(uint64_t, uint64_t, void, float))(*(void *)v56 + 72))(v56, 2, 0, *((float *)this + 14));
        float v57 = (unsigned char *)*((void *)this + 76);
        if (v57[208])
        {
          if (*((unsigned char *)this + 17)) {
            BOOL v58 = 0;
          }
          else {
            BOOL v58 = v57[209] != 0;
          }
          (*(void (**)(unsigned char *, BOOL))(*(void *)v57 + 56))(v57, *((float *)this + 14) < 1.0);
          (*(void (**)(void, void, BOOL))(**((void **)this + 76) + 40))(*((void *)this + 76), *((unsigned __int8 *)this + 17), v58);
        }
        else
        {
          (*(void (**)(unsigned char *, void))(*(void *)v57 + 56))(v57, 0);
        }
      }
      uint64_t v59 = *((void *)this + 75);
      if (!v59 || !*(unsigned char *)(v59 + 209)) {
        goto LABEL_119;
      }
      uint64_t v60 = *((void *)this + 72);
      uint64_t v61 = *((void *)this + 73);
      if (v61 == v60)
      {
LABEL_116:
        int v83 = *(_DWORD *)(v60 + 48);
        *(unsigned char *)(v61 + 52) = *(unsigned char *)(v60 + 52);
        *(_DWORD *)(v61 + 48) = v83;
        HOA::RotationMatrix::setRotationMatrixYPR(*((float ***)this + 72), *((float *)this + 12), *((float *)this + 13), 0.0);
        *((unsigned char *)this + 592) = *((unsigned char *)this + 17) ^ 1;
        uint64_t v84 = *((void *)this + 75);
        if (v84 && *(unsigned char *)(v84 + 209) && *((_DWORD *)this + 104) <= v120)
        {
LABEL_122:
          *((void *)this + 23) = *((void *)this + 6);
          *((_DWORD *)this + 48) = *((_DWORD *)this + 14);
          goto LABEL_123;
        }
LABEL_119:
        uint64_t result = HOASpatializer::calculateEncoderGains(this, *((float *)this + 12), *((float *)this + 13));
        if (result) {
          return result;
        }
        if (*((unsigned char *)this + 17)) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 360, *((char **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
        }
        goto LABEL_122;
      }
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(*((char **)this + 73), *(char **)v60, *(void *)(v60 + 8), (uint64_t)(*(void *)(v60 + 8) - *(void *)v60) >> 2);
      float v62 = *(char **)(v61 + 24);
      uint64_t v63 = *(char **)(v60 + 24);
      int v64 = *(unsigned char **)(v60 + 32);
      size_t __len = v64 - v63;
      unint64_t v65 = (v64 - v63) >> 4;
      uint64_t v66 = *(void *)(v61 + 40);
      if (v65 <= (v66 - (uint64_t)v62) >> 4)
      {
        float v69 = (void **)(v61 + 32);
        uint64_t v72 = *(unsigned char **)(v61 + 32);
        size_t v73 = v72 - v62;
        unint64_t v74 = (v72 - v62) >> 4;
        if (v74 >= v65)
        {
          if (v64 == v63)
          {
            size_t v70 = v64 - v63;
            goto LABEL_115;
          }
          int v71 = *(void **)(v61 + 24);
          size_t v70 = v64 - v63;
        }
        else
        {
          uint64_t v75 = &v63[16 * v74];
          if (v72 != v62)
          {
            uint64_t v76 = *(unsigned char **)(v60 + 32);
            uint64_t v77 = v75;
            memmove(*(void **)(v61 + 24), v63, v73);
            uint64_t v75 = v77;
            int v64 = v76;
            float v62 = (char *)*v69;
          }
          size_t v70 = v64 - v75;
          if (v64 == v75) {
            goto LABEL_115;
          }
          int v71 = v62;
          uint64_t v63 = v75;
        }
      }
      else
      {
        float v117 = *(char **)(v60 + 32);
        float v118 = *(char **)(v60 + 24);
        if (v62)
        {
          *(void *)(v61 + 32) = v62;
          operator delete(v62);
          uint64_t v66 = 0;
          *(void *)(v61 + 24) = 0;
          *(void *)(v61 + 32) = 0;
          *(void *)(v61 + 40) = 0;
        }
        if ((__len & 0x8000000000000000) != 0) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = v66 >> 3;
        if (v66 >> 3 <= v65) {
          uint64_t v67 = v65;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        std::vector<DSPSplitComplex>::__vallocate[abi:ne180100]((void *)(v61 + 24), v68);
        float v69 = (void **)(v61 + 32);
        float v62 = *(char **)(v61 + 32);
        uint64_t v63 = v118;
        size_t v70 = __len;
        if (v117 == v118) {
          goto LABEL_115;
        }
        int v71 = *(void **)(v61 + 32);
      }
      memmove(v71, v63, v70);
LABEL_115:
      float *v69 = &v62[v70];
      goto LABEL_116;
    }
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v32 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v124, "HOASpatializer");
      int v78 = std::string::append(&v124, "::", 2uLL);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v125.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      uint64_t v80 = std::string::append(&v125, "processAccumulating", 0x13uLL);
      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      int64_t v127 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      uint64_t v82 = __p;
      if (v127 < 0) {
        uint64_t v82 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      float v129 = v82;
      _os_log_debug_impl(&dword_1BB0CE000, v32, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v127) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v125.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
    }
    return 4294956429;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v30 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string[abi:ne180100]<0>(&v124, "HOASpatializer");
      double v40 = std::string::append(&v124, "::", 2uLL);
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v125.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      float v42 = std::string::append(&v125, "processAccumulating", 0x13uLL);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      int64_t v127 = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      char v44 = __p;
      if (v127 < 0) {
        char v44 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      float v129 = v44;
      __int16 v130 = 1024;
      int v131 = a4;
      _os_log_debug_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "%s: ERROR: cannot process with %d output channels", buf, 0x12u);
      if (SHIBYTE(v127) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v125.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
    }
    return 4294956445;
  }
}

void sub_1BB6D8584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
}

void HOASpatializer::initializeSourceExtentProcessor(HOASpatializer *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 75)) {
    operator new();
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  float v2 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "HOASpatializer");
    float v4 = std::string::append(&v9, "::", 2uLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    float v6 = std::string::append(&v10, "initializeSourceExtentProcessor", 0x1FuLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    int64_t v12 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    float v8 = __p;
    if (v12 < 0) {
      float v8 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    double v14 = v8;
    _os_log_debug_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%s: SourceExtentProcessor is not available, HOASpatializer will ignore source extent", buf, 0xCu);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  *((_DWORD *)this + 5) = 0;
  float v3 = (void *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v3) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v3);
  }
}

void sub_1BB6D8978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void HOASpatializer::initializeNFCDelaysAndBuffers(HOASpatializer *this)
{
  uint64_t v2 = *((void *)this + 76);
  if (*(unsigned char *)(v2 + 208)
    && (uint64_t v3 = **(void **)(v2 + 160)) != 0
    && (*(unsigned int (**)(void))(**(void **)(v3 + 24) + 88))(*(void *)(v3 + 24)))
  {
    uint64_t v4 = *((void *)this + 76);
    if (*(unsigned char *)(v4 + 208) && (uint64_t v5 = **(void **)(v4 + 160)) != 0)
    {
      int v6 = (*(uint64_t (**)(void))(**(void **)(v5 + 24) + 72))(*(void *)(v5 + 24));
      uint64_t v4 = *((void *)this + 76);
      unsigned int v7 = v6 + 128;
    }
    else
    {
      unsigned int v7 = 128;
    }
    if (v7 > *(_DWORD *)(v4 + 220)) {
      *(_DWORD *)(v4 + 220) = v7;
    }
    std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::resize((uint64_t)this + 432, *((unsigned int *)this + 104));
    if (*((_DWORD *)this + 104)) {
      operator new();
    }
  }
  else
  {
    float v8 = (void *)*((void *)this + 54);
    std::string v9 = (void *)*((void *)this + 55);
    while (v9 != v8)
    {
      float v11 = (void *)*--v9;
      std::string v10 = v11;
      *std::string v9 = 0;
      if (v11) {
        std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v10);
      }
    }
    *((void *)this + 55) = v8;
  }
  uint64_t v12 = *((void *)this + 76);
  if (*(unsigned char *)(v12 + 208) && (uint64_t v13 = **(void **)(v12 + 160)) != 0) {
    unint64_t v14 = *(unsigned int *)(*(void *)(v13 + 24) + 168);
  }
  else {
    unint64_t v14 = 0;
  }
  std::vector<void const*>::resize((uint64_t)this + 688, v14);
  uint64_t v15 = *((void *)this + 76);
  if (*(unsigned char *)(v15 + 208))
  {
    uint64_t v16 = **(void **)(v15 + 160);
    if (v16) {
      LODWORD(v16) = *(_DWORD *)(*(void *)(v16 + 24) + 168);
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  std::vector<float>::resize((uint64_t)this + 712, (*((_DWORD *)this + 3) * v16));
  vDSP_vclr(*((float **)this + 89), 1, (uint64_t)(*((void *)this + 90) - *((void *)this + 89)) >> 2);
  unint64_t v17 = 0;
  uint64_t v18 = *((void *)this + 89);
  while (1)
  {
    uint64_t v19 = *((void *)this + 76);
    if (*(unsigned char *)(v19 + 208))
    {
      unint64_t v20 = **(void **)(v19 + 160);
      if (v20) {
        unint64_t v20 = *(unsigned int *)(*(void *)(v20 + 24) + 168);
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    if (v17 >= v20) {
      break;
    }
    *(void *)(*((void *)this + 86) + 8 * v17) = v18;
    v18 += 4 * *((unsigned int *)this + 3);
    ++v17;
  }
}

void sub_1BB6D8C34(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40C92309C1);
  _Unwind_Resume(a1);
}

uint64_t HOASpatializer::calculateEncoderGains(HOASpatializer *this, float a2, float a3)
{
  float v6 = a3;
  float v7 = a2;
  uint64_t v4 = (HOA *)*((void *)this + 44);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = HOA::createEncoder(v4, &v7, &v6, 1uLL, *((float **)this + 48), *((unsigned int *)this + 104));
  if (!result)
  {
    vDSP_vmul(*((const float **)this + 48), 1, *((const float **)this + 57), 1, *((float **)this + 48), 1, *((unsigned int *)this + 104));
    return 0;
  }
  return result;
}

void HOASpatializer::rotateAccumulating(HOASpatializer *this, float *const *a2, float *const *a3, vDSP_Length __N)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16))
  {
    uint64_t v8 = *((void *)this + 75);
    if (*(unsigned char *)(v8 + 208) && (uint64_t v9 = **(void **)(v8 + 160)) != 0) {
      int v10 = *(_DWORD *)(*(void *)(v9 + 24) + 168);
    }
    else {
      int v10 = 0;
    }
    if (fabsf(*((float *)this + 12)) >= 0.00000011921 || fabsf(*((float *)this + 13)) >= 0.00000011921)
    {
      bzero(*((void **)this + 66), *((void *)this + 67) - *((void *)this + 66));
      MEMORY[0x1F4188790](v24);
      float v26 = &v53[-((v25 + 15) & 0xFFFFFFFF0)];
      if (v25 >= 0x200) {
        size_t v27 = 512;
      }
      else {
        size_t v27 = v25;
      }
      bzero(&v53[-((v25 + 15) & 0xFFFFFFFF0)], v27);
      uint64_t v28 = *((unsigned int *)this + 104);
      uint64_t v29 = 4 * __N;
      if (v28)
      {
        uint64_t v30 = *((void *)this + 66);
        int v31 = *((_DWORD *)this + 104);
        float v32 = v26;
        do
        {
          *v32++ = v30;
          v30 += v29;
          --v31;
        }
        while (v31);
      }
      HOA::RotationMatrix::applyLeftAccumulating(*((void *)this + 72), (uint64_t)a2, v28, (uint64_t)v26, v28, __N);
      if (*((unsigned char *)this + 592))
      {
        bzero(*((void **)this + 69), *((void *)this + 70) - *((void *)this + 69));
        MEMORY[0x1F4188790](v33);
        float v35 = &v53[-((v34 + 15) & 0xFFFFFFFF0)];
        if (v34 >= 0x200) {
          size_t v36 = 512;
        }
        else {
          size_t v36 = v34;
        }
        bzero(&v53[-((v34 + 15) & 0xFFFFFFFF0)], v36);
        uint64_t v37 = *((unsigned int *)this + 104);
        if (v37)
        {
          uint64_t v38 = *((void *)this + 69);
          int v39 = *((_DWORD *)this + 104);
          double v40 = v35;
          do
          {
            *v40++ = v38;
            v38 += v29;
            --v39;
          }
          while (v39);
        }
        HOA::RotationMatrix::applyLeftAccumulating(*((void *)this + 73), (uint64_t)a2, v37, (uint64_t)v35, v37, __N);
      }
      if (v10)
      {
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        float v43 = (float)__N;
        do
        {
          LODWORD(__B) = 0;
          float v44 = *(float *)(*((void *)this + 57) + 4 * v42) * *(float *)(*((void *)this + 63) + 4 * v42);
          *(float *)&long long __B = v44;
          if (*((unsigned char *)this + 592))
          {
            LODWORD(__Start.__r_.__value_.__l.__data_) = 0;
            *(float *)float __Step = v44 / v43;
            float v45 = (float **)&a3[v42];
            vDSP_vrampmul((const float *)(*((void *)this + 66) + 4 * v41), 1, (float *)&__Start, (const float *)__Step, *v45, 1, __N);
            *(float *)AudioTimeStamp buf = 0.0;
            *(float *)AudioTimeStamp buf = *(float *)(*((void *)this + 60) + 4 * v42) * *(float *)(*((void *)this + 63) + 4 * v42);
            float v54 = (float)-*(float *)buf / v43;
            vDSP_vrampmuladd((const float *)(*((void *)this + 69) + 4 * v41), 1, (float *)buf, &v54, *v45, 1, __N);
          }
          else
          {
            vDSP_vsmul((const float *)(*((void *)this + 66) + 4 * v41), 1, (const float *)&__B, a3[v42], 1, __N);
          }
          ++v42;
          v41 += __N;
        }
        while (v10 != v42);
      }
    }
    else
    {
      if (*((unsigned char *)this + 592))
      {
        bzero(*((void **)this + 69), *((void *)this + 70) - *((void *)this + 69));
        MEMORY[0x1F4188790](v11);
        uint64_t v13 = &v53[-((v12 + 15) & 0xFFFFFFFF0)];
        if (v12 >= 0x200) {
          size_t v14 = 512;
        }
        else {
          size_t v14 = v12;
        }
        bzero(&v53[-((v12 + 15) & 0xFFFFFFFF0)], v14);
        uint64_t v15 = *((unsigned int *)this + 104);
        if (v15)
        {
          uint64_t v16 = *((void *)this + 69);
          int v17 = *((_DWORD *)this + 104);
          uint64_t v18 = v13;
          do
          {
            *v18++ = v16;
            v16 += 4 * __N;
            --v17;
          }
          while (v17);
        }
        HOA::RotationMatrix::applyLeftAccumulating(*((void *)this + 73), (uint64_t)a2, v15, (uint64_t)v13, v15, __N);
      }
      if (v10)
      {
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        float v21 = (float)__N;
        do
        {
          LODWORD(__B) = 0;
          float v22 = *(float *)(*((void *)this + 57) + 4 * v20) * *(float *)(*((void *)this + 63) + 4 * v20);
          *(float *)&long long __B = v22;
          if (*((unsigned char *)this + 592))
          {
            LODWORD(__Start.__r_.__value_.__l.__data_) = 0;
            *(float *)float __Step = v22 / v21;
            float v23 = (float **)&a3[v20];
            vDSP_vrampmul(a2[v20], 1, (float *)&__Start, (const float *)__Step, *v23, 1, __N);
            *(float *)AudioTimeStamp buf = 0.0;
            *(float *)AudioTimeStamp buf = *(float *)(*((void *)this + 60) + 4 * v20) * *(float *)(*((void *)this + 63) + 4 * v20);
            float v54 = (float)-*(float *)buf / v21;
            vDSP_vrampmuladd((const float *)(*((void *)this + 69) + 4 * v19), 1, (float *)buf, &v54, *v23, 1, __N);
          }
          else
          {
            vDSP_vsmul(a2[v20], 1, (const float *)&__B, a3[v20], 1, __N);
          }
          ++v20;
          v19 += __N;
        }
        while (v10 != v20);
      }
    }
    *((unsigned char *)this + 592) = 0;
  }
  else
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    float v46 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v47 = (std::string *)std::string::basic_string[abi:ne180100]<0>(__Step, "HOASpatializer");
      int v48 = std::string::append(v47, "::", 2uLL);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      __Start.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__Start.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      uint64_t v50 = std::string::append(&__Start, "rotateAccumulating", 0x12uLL);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      int64_t v59 = v50->__r_.__value_.__r.__words[2];
      long long __B = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      p_B = &__B;
      if (v59 < 0) {
        p_B = (long long *)__B;
      }
      *(float *)AudioTimeStamp buf = 4.8149e-34;
      uint64_t v61 = p_B;
      _os_log_debug_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_DEBUG, "%s: ERROR: not initialized", buf, 0xCu);
      if (SHIBYTE(v59) < 0) {
        operator delete((void *)__B);
      }
      if (SHIBYTE(__Start.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__Start.__r_.__value_.__l.__data_);
      }
      if (v56 < 0) {
        operator delete(__Step[0]);
      }
    }
  }
}

void sub_1BB6D929C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 193) < 0) {
    operator delete(*(void **)(v1 - 216));
  }
  _Unwind_Resume(exception_object);
}

void HOASpatializer::gainBasedProcessing(HOASpatializer *this, const float *__A, float *__C, unsigned int a4, vDSP_Length __N, float a6)
{
  uint64_t v6 = *((void *)this + 45);
  float v7 = *(float *)(v6 + 4 * a4);
  float __Start = v7;
  float v8 = *(float *)(*((void *)this + 48) + 4 * a4) * a6;
  float v9 = v8;
  if (!*((_DWORD *)this + 81)) {
    float v9 = v8 + (float)(*((float *)this + 102) * (float)(v7 - v8));
  }
  *(float *)(v6 + 4 * a4) = v9;
  float __Step = (float)(v9 - v7) / (float)__N;
  if (fabsf(__Step) <= 0.000001)
  {
    if (fabsf(v7) <= 0.000001)
    {
      bzero(__C, 4 * __N);
    }
    else
    {
      *(float *)(v6 + 4 * a4) = v8;
      vDSP_vsmul(__A, 1, &__Start, __C, 1, __N);
    }
  }
  else
  {
    vDSP_vrampmul(__A, 1, &__Start, &__Step, __C, 1, __N);
  }
}

void HOASpatializer::reset(HOASpatializer *this)
{
  *((unsigned char *)this + 17) = 1;
  *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
  vDSP_vclr(*((float **)this + 45), 1, (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
  vDSP_vclr(*((float **)this + 89), 1, (uint64_t)(*((void *)this + 90) - *((void *)this + 89)) >> 2);
  uint64_t v2 = *((void *)this + 75);
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, 1);
  }
  uint64_t v3 = (IR::FixedIntegerDelay *)*((void *)this + 53);
  if (v3) {
    IR::FixedIntegerDelay::reset(v3);
  }
  uint64_t v4 = *((void *)this + 76);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, 1);
  }
  uint64_t v6 = *((void *)this + 54);
  uint64_t v5 = *((void *)this + 55);
  if (v5 != v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      float v9 = *(IR::FixedIntegerDelay **)(v6 + 8 * v7);
      if (v9)
      {
        IR::FixedIntegerDelay::reset(v9);
        uint64_t v6 = *((void *)this + 54);
        uint64_t v5 = *((void *)this + 55);
      }
      unint64_t v7 = v8++;
    }
    while (v7 < (v5 - v6) >> 3);
  }
}

uint64_t HOASpatializer::initialize(HOASpatializer *this, float a2, unsigned int a3, unsigned int a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 16) = 0;
  uint64_t v4 = *((void *)this + 44);
  if (!v4 || !*(unsigned char *)(v4 + 28) || (*(_DWORD *)(v4 + 4) + 1) * (*(_DWORD *)(v4 + 4) + 1) != *((_DWORD *)this + 104)) {
    return 4294956421;
  }
  *((float *)this + 2) = a2;
  *((_DWORD *)this + 3) = a4;
  double v8 = a2 * 0.001953125 * 0.02;
  if (v8 >= 2.22507386e-308) {
    double v9 = -6.90775528 / v8;
  }
  else {
    double v9 = -INFINITY;
  }
  double v10 = exp(v9);
  if (v9 < -708.4) {
    double v10 = 0.0;
  }
  float v11 = v10;
  *((float *)this + 102) = v11;
  if (a3 < (unint64_t)((uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2)) {
    return 4294900553;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)*((void *)this + 5);
  if (v13)
  {
    cf.__r_.__value_.__r.__words[0] = 0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*&>(&v65, v13, (const void *)kOptionalFeatureSupport, &cf);
    if (cf.__r_.__value_.__r.__words[0]) {
      CFRelease(cf.__r_.__value_.__l.__data_);
    }
    CFDictionaryRef v14 = v65;
    if (v65)
    {
      unsigned int v15 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v65, (const void *)kOptionalFeatureSourceExtent);
      if (v15 <= 0x100) {
        LOBYTE(v15) = 0;
      }
      BOOL v16 = v15 != 0;
      unsigned int v17 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v14, (const void *)kOptionalFeatureNearFieldHOA);
      if (v17 <= 0x100) {
        LOBYTE(v17) = 0;
      }
      BOOL v18 = v17 != 0;
      if (v16) {
        goto LABEL_25;
      }
    }
    else
    {
      BOOL v16 = 0;
      BOOL v18 = 0;
    }
  }
  else
  {
    BOOL v16 = 0;
    BOOL v18 = 0;
    CFDictionaryRef v65 = 0;
  }
  if (v18) {
LABEL_25:
  }
    std::vector<float>::resize((uint64_t)this + 616, a4);
  if (v16)
  {
    std::vector<float>::resize((uint64_t)this + 640, a4);
    IR::getPresetDataAttributes();
    CFDictionaryRef v19 = (const __CFDictionary *)*((void *)this + 4);
    if (v19)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&__p, v19, (const void *)kHOASourceExtentIRCustomURLParamName);
      if (__p.__r_.__value_.__s.__data_[8]) {
        applesauce::CF::URLRef::operator=((const void **)&cf.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__data_);
      }
      std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
    }
    operator new();
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  uint64_t v20 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    uint64_t v38 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "HOASpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v38, &__p);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &__p, &cf);
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string cf = &cf;
    }
    else {
      p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
    }
    buf[0] = 136315394;
    *(void *)&buf[1] = p_cf;
    __int16 v68 = 1024;
    int v69 = -10868;
    _os_log_error_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%s: error %d while initializing source extent processor", (uint8_t *)buf, 0x12u);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
  }
  *((_DWORD *)this + 5) = 0;
  uint64_t v21 = *((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v21) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v21);
  }
  uint64_t v22 = *((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v22) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v22);
  }
  *((void *)this + 67) = *((void *)this + 66);
  *((void *)this + 70) = *((void *)this + 69);
  float v23 = (void *)*((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v23) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v23);
  }
  if (v18)
  {
    IR::getPresetDataAttributes();
    CFDictionaryRef v24 = (const __CFDictionary *)*((void *)this + 4);
    if (v24 && applesauce::CF::details::has_key<__CFString const*&>(v24, (const void *)kHOANFCIRCustomURLParamName))
    {
      unint64_t v25 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->((void *)this + 4);
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::URLRef,__CFString const*&>(&v66, *v25, (const void *)kHOANFCIRCustomURLParamName);
      float v26 = (const void *)v66.__r_.__value_.__r.__words[0];
      std::string::size_type v42 = v66.__r_.__value_.__r.__words[0];
      v66.__r_.__value_.__r.__words[0] = 0;
      IR::IRDataAttributes::IRDataAttributes((uint64_t)&__p, v26, 128, 1, 0.0);
      std::string::size_type v27 = cf.__r_.__value_.__r.__words[0];
      std::string cf = __p;
      char v57 = v46;
      uint64_t v28 = v47;
      __p.__r_.__value_.__r.__words[0] = v27;
      CFTypeRef v47 = v58;
      CFTypeRef v29 = v60;
      CFTypeRef v58 = v28;
      CFTypeRef v60 = v49;
      uint64_t v30 = v51;
      long long v49 = v29;
      CFTypeRef v51 = v62;
      int v64 = v53;
      long long v55 = v44;
      long long v56 = v45;
      long long v59 = v48;
      *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v50 + 9);
      v61[0] = v50[0];
      CFTypeRef v62 = v30;
      uint64_t v63 = v52;
      IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&__p);
      applesauce::CF::URLRef::~URLRef((const void **)&v42);
      std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v66);
    }
    operator new();
  }
  if (getAUSMV2Log(void)::onceToken != -1) {
    dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
  }
  int v31 = getAUSMV2Log(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    double v40 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "HOASpatializer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("::", v40, &__p);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("initialize", &__p, &cf);
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v41 = &cf;
    }
    else {
      unsigned int v41 = (std::string *)cf.__r_.__value_.__r.__words[0];
    }
    buf[0] = 136315394;
    *(void *)&buf[1] = v41;
    __int16 v68 = 1024;
    int v69 = -10868;
    _os_log_error_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, "%s: error %d while initializing NFC processor", (uint8_t *)buf, 0x12u);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(cf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
  }
  float v32 = (void *)*((void *)this + 54);
  uint64_t v33 = (void *)*((void *)this + 55);
  while (v33 != v32)
  {
    float v35 = (void *)*--v33;
    unint64_t v34 = v35;
    *uint64_t v33 = 0;
    if (v35) {
      std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v34);
    }
  }
  *((void *)this + 55) = v32;
  CFDictionaryRef v36 = v65;
  if (v65)
  {
    unsigned int v37 = (unsigned __int16)applesauce::CF::details::find_at_key_or_optional<BOOL,__CFString const*&>(v65, (const void *)kOptionalFeatureSourceDiffuse);
    if (v37 <= 0x100) {
      LOBYTE(v37) = 0;
    }
    if (a3 <= 0x10 && (_BYTE)v37) {
      operator new();
    }
  }
  LODWORD(cf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 136, a3, &cf);
  LODWORD(cf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((uint64_t)this + 272, a3, &cf);
  *((_WORD *)this + 8) = 257;
  if (v36) {
    CFRelease(v36);
  }
  return 0;
}

void sub_1BB6D9F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  applesauce::CF::URLRef::~URLRef(&a10);
  std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100](v37 - 208);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a35);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v37 - 216));
  _Unwind_Resume(a1);
}

const void **applesauce::CF::URLRef::operator=(const void **a1, CFTypeRef cf)
{
  uint64_t v3 = *a1;
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t HOASpatializer::implementsDiffuse(HOASpatializer *this)
{
  return 1;
}

void HOASpatializer::~HOASpatializer(IR::IRProcessor **this)
{
  HOASpatializer::~HOASpatializer(this);

  JUMPOUT(0x1C185D370);
}

{
  IR::IRProcessor *v2;
  IR::IRProcessor *v3;
  IR::IRProcessor *v4;
  IR::IRProcessor *v5;
  IR::IRProcessor *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  IR::IRProcessor *v11;
  IR::IRProcessor *v12;
  IR::IRProcessor *v13;
  IR::IRProcessor *v14;
  IR::IRProcessor *v15;
  IR::IRProcessor *v16;
  IR::IRProcessor *v17;
  IR::IRProcessor *v18;
  void **v19;
  uint64_t vars8;

  *this = (IR::IRProcessor *)&unk_1F14BEB60;
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100](this + 92, 0);
  uint64_t v2 = this[89];
  if (v2)
  {
    this[90] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[86];
  if (v3)
  {
    this[87] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[83];
  if (v4)
  {
    this[84] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[80];
  if (v5)
  {
    this[81] = v5;
    operator delete(v5);
  }
  uint64_t v6 = this[77];
  if (v6)
  {
    this[78] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (uint64_t)this[76];
  this[76] = 0;
  if (v7) {
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v7);
  }
  double v8 = (uint64_t)this[75];
  this[75] = 0;
  if (v8) {
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v8);
  }
  double v9 = (uint64_t)this[73];
  this[73] = 0;
  if (v9) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v9);
  }
  double v10 = (uint64_t)this[72];
  this[72] = 0;
  if (v10) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v10);
  }
  float v11 = this[69];
  if (v11)
  {
    this[70] = v11;
    operator delete(v11);
  }
  unint64_t v12 = this[66];
  if (v12)
  {
    this[67] = v12;
    operator delete(v12);
  }
  CFDictionaryRef v13 = this[63];
  if (v13)
  {
    this[64] = v13;
    operator delete(v13);
  }
  CFDictionaryRef v14 = this[60];
  if (v14)
  {
    this[61] = v14;
    operator delete(v14);
  }
  unsigned int v15 = this[57];
  if (v15)
  {
    this[58] = v15;
    operator delete(v15);
  }
  CFDictionaryRef v19 = (void **)(this + 54);
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](&v19);
  BOOL v16 = this[53];
  this[53] = 0;
  if (v16) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v16);
  }
  unsigned int v17 = this[48];
  if (v17)
  {
    this[49] = v17;
    operator delete(v17);
  }
  BOOL v18 = this[45];
  if (v18)
  {
    this[46] = v18;
    operator delete(v18);
  }
  std::unique_ptr<HOA>::reset[abi:ne180100](this + 44, 0);

  Spatializer::~Spatializer((Spatializer *)this);
}

void HOASpatializer::HOASpatializer(HOASpatializer *this, const AudioChannelLayout *a2)
{
  Spatializer::Spatializer(this);
  *(_OWORD *)(v4 + 332) = xmmword_1BB87B480;
  *(void *)uint64_t v4 = &unk_1F14BEB60;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 397) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 520) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(void *)(v4 + 584) = 0;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  if (a2->mChannelLayoutTag == 0x10000)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2->mChannelBitmap);
    v6.i16[0] = vaddlv_u8(v6);
    UInt32 mChannelLayoutTag = v6.i32[0];
  }
  else if (a2->mChannelLayoutTag)
  {
    UInt32 mChannelLayoutTag = (unsigned __int16)a2->mChannelLayoutTag;
  }
  else
  {
    UInt32 mChannelLayoutTag = a2->mNumberChannelDescriptions;
  }
  *((_DWORD *)this + 104) = mChannelLayoutTag;
  operator new();
}

void sub_1BB6DA584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12, void **buf)
{
  std::unique_ptr<IR::IRProcessor>::reset[abi:ne180100]((IR::IRProcessor **)(v13 + 736), 0);
  uint64_t v21 = *(void **)(v13 + 712);
  if (v21)
  {
    *(void *)(v13 + 720) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(v13 + 688);
  if (v22)
  {
    *(void *)(v13 + 696) = v22;
    operator delete(v22);
  }
  float v23 = *v20;
  if (*v20)
  {
    *(void *)(v13 + 672) = v23;
    operator delete(v23);
  }
  CFDictionaryRef v24 = *(void **)(v13 + 640);
  if (v24)
  {
    *(void *)(v13 + 648) = v24;
    operator delete(v24);
  }
  unint64_t v25 = *(void **)(v13 + 616);
  if (v25)
  {
    *(void *)(v13 + 624) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void *)(v13 + 608);
  *(void *)(v13 + 608) = 0;
  if (v26) {
    std::default_delete<BypassableIRProcessor>::operator()[abi:ne180100](v26);
  }
  uint64_t v27 = *v16;
  *BOOL v16 = 0;
  if (v27) {
    std::default_delete<SourceExtentProcessor>::operator()[abi:ne180100](v27);
  }
  uint64_t v28 = *(void *)(v13 + 584);
  *(void *)(v13 + 584) = 0;
  if (v28) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v28);
  }
  uint64_t v29 = *(void *)(v13 + 576);
  *(void *)(v13 + 576) = 0;
  if (v29) {
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](v29);
  }
  uint64_t v30 = *(void **)(v13 + 552);
  if (v30)
  {
    *(void *)(v13 + 560) = v30;
    operator delete(v30);
  }
  int v31 = *(void **)(v13 + 528);
  if (v31)
  {
    *(void *)(v13 + 536) = v31;
    operator delete(v31);
  }
  float v32 = *v19;
  if (*v19)
  {
    *(void *)(v13 + 512) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v18;
  if (*v18)
  {
    *(void *)(v13 + 488) = v33;
    operator delete(v33);
  }
  unint64_t v34 = *v17;
  if (*v17)
  {
    *(void *)(v13 + 464) = v34;
    operator delete(v34);
  }
  AudioTimeStamp buf = (void **)(v13 + 432);
  std::vector<std::unique_ptr<IR::FixedIntegerDelay>>::__destroy_vector::operator()[abi:ne180100](&buf);
  float v35 = *v15;
  *unsigned int v15 = 0;
  if (v35) {
    std::default_delete<IR::FixedIntegerDelay>::operator()[abi:ne180100](v35);
  }
  CFDictionaryRef v36 = *a11;
  if (*a11)
  {
    *(void *)(v13 + 392) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 368) = v37;
    operator delete(v37);
  }
  std::unique_ptr<HOA>::reset[abi:ne180100](v14, 0);
  Spatializer::~Spatializer((Spatializer *)v13);
  _Unwind_Resume(a1);
}

void sub_1BB6DA710(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BB6DA718);
  }
  JUMPOUT(0x1BB6DA708);
}

void sub_1BB6DA894(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a2)
  {
    MEMORY[0x1C185D370](v11, 0x10A0C40872B63C1);
    __cxa_begin_catch(a1);
    std::unique_ptr<HOA>::reset[abi:ne180100](v10, 0);
    __cxa_end_catch();
    JUMPOUT(0x1BB6DA830);
  }
  JUMPOUT(0x1BB6DA708);
}

void sub_1BB6DA8E0()
{
}

void sub_1BB6DA8EC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BB6DA708);
}

void AUBoostClip::NewKernel(AUBoostClip *this)
{
}

void BoostClipKernel::ProcessStereoNonInterleaved(BoostClipKernel *this, const AudioBufferList *a2, AudioBufferList *a3, unsigned int a4, BOOL *a5, __n128 a6)
{
  double v10 = (_DWORD *)*((void *)this + 1);
  if (*((_DWORD *)this + 41) != a4)
  {
    if ((a4 & 0x1F) != 0)
    {
      HIDWORD(v11) = -286331153 * a4;
      LODWORD(v11) = -286331153 * a4;
      if ((v11 >> 1) < 0x8888889)
      {
        int v13 = 30;
      }
      else
      {
        HIDWORD(v12) = -1431655765 * a4;
        LODWORD(v12) = -1431655765 * a4;
        if ((v12 >> 3) > 0xAAAAAAA) {
          return;
        }
        int v13 = 24;
      }
    }
    else
    {
      int v13 = 32;
    }
    *((_DWORD *)this + 40) = v13;
    *((_DWORD *)this + 41) = a4;
  }
  int v14 = v10[148];
  if (v14 != *((_DWORD *)this + 42))
  {
    a6.n128_f64[0] = BoostClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 42) = v14;
  }
  if (((*(uint64_t (**)(_DWORD *, __n128))(*(void *)v10 + 592))(v10, a6) & 1) == 0)
  {
    BoostClipKernel::UpdateTimeConstants(this);
    if (a4)
    {
      unsigned int v15 = 0;
      vDSP_Length v16 = *((int *)this + 40);
      uint64_t v17 = *((unsigned int *)this + 40);
      uint64_t v61 = *(void *)&a2[1].mBuffers[0].mNumberChannels;
      mData = (char *)a2->mBuffers[0].mData;
      uint64_t v59 = *(void *)&a3[1].mBuffers[0].mNumberChannels;
      CFTypeRef v60 = (char *)a3->mBuffers[0].mData;
      do
      {
        BOOL v18 = (float32x4_t *)(v59 + 4 * v15);
        CFDictionaryRef v19 = (float32x4_t *)&v60[4 * v15];
        uint64_t v20 = (float32x4_t *)(v61 + 4 * v15);
        float __C = 0.0;
        uint64_t v21 = (float32x4_t *)&mData[4 * v15];
        vDSP_maxmgv(v21->f32, 1, &__C, v16);
        float v22 = __C;
        float __C = 0.0;
        vDSP_maxmgv(v20->f32, 1, &__C, v16);
        if (v22 >= __C) {
          float v23 = v22;
        }
        else {
          float v23 = __C;
        }
        if (*((unsigned char *)this + 173))
        {
          float v24 = *((float *)this + 6);
          if (v23 >= v24) {
            float v25 = v23;
          }
          else {
            float v25 = *((float *)this + 6);
          }
          if (v17)
          {
            uint64_t v26 = (float *)((char *)this + 176);
            uint64_t v27 = &v60[4 * v15];
            uint64_t v28 = v17;
            do
            {
              float v29 = v21->f32[0];
              uint64_t v21 = (float32x4_t *)((char *)v21 + 4);
              *(float *)uint64_t v27 = *v26;
              v27 += 4;
              *v26++ = v29;
              --v28;
            }
            while (v28);
            uint64_t v30 = (float *)((char *)this + 4 * v17 + 176);
            int v31 = (_DWORD *)(v59 + 4 * v15);
            uint64_t v32 = v17;
            do
            {
              float v33 = v20->f32[0];
              uint64_t v20 = (float32x4_t *)((char *)v20 + 4);
              *v31++ = *(_DWORD *)v30;
              *v30++ = v33;
              --v32;
            }
            while (v32);
          }
          uint64_t v21 = (float32x4_t *)&v60[4 * v15];
          uint64_t v20 = (float32x4_t *)(v59 + 4 * v15);
        }
        else
        {
          float v24 = v23;
          float v25 = v23;
        }
        BoostClipKernel::CalcBoostGain(this, v25);
        vDSP_Length v34 = *((unsigned int *)this + 40);
        float v35 = *((float *)this + 5);
        float v36 = *((float *)this + 8);
        float __C = v36;
        v37.f32[0] = v35 - v36;
        float v38 = (float)(v35 - v36) / (float)v34;
        if (*((unsigned char *)this + 172)
          && (v35 >= v36 ? (float v39 = v35) : (float v39 = v36),
              float32_t v40 = v39 * v24,
              v37.i32[0] = *((_DWORD *)this + 34),
              v40 > v37.f32[0]))
        {
          if (v37.f32[0] >= 1.0)
          {
            if (v34)
            {
              do
              {
                float v51 = v21->f32[0];
                uint64_t v21 = (float32x4_t *)((char *)v21 + 4);
                float v52 = v51 * v36;
                if ((float)(v51 * v36) >= -1.0) {
                  float v53 = v52;
                }
                else {
                  float v53 = -1.0;
                }
                if (v52 <= 1.0) {
                  float v54 = v53;
                }
                else {
                  float v54 = 1.0;
                }
                v19->f32[0] = v54;
                CFDictionaryRef v19 = (float32x4_t *)((char *)v19 + 4);
                float v55 = v20->f32[0];
                uint64_t v20 = (float32x4_t *)((char *)v20 + 4);
                float v56 = v36 * v55;
                if ((float)(v36 * v55) >= -1.0) {
                  float v57 = v56;
                }
                else {
                  float v57 = -1.0;
                }
                if (v56 <= 1.0) {
                  float v58 = v57;
                }
                else {
                  float v58 = 1.0;
                }
                v18->f32[0] = v58;
                BOOL v18 = (float32x4_t *)((char *)v18 + 4);
                float v36 = v38 + v36;
                --v34;
              }
              while (v34);
            }
          }
          else if (v34)
          {
            float v41 = (float)*((int *)this + 37) * 0.000000059605;
            float v42 = (float)*((int *)this + 36) * 0.000000059605;
            float v43 = (float)*((int *)this + 35) * 0.000000059605;
            float v44 = -v43;
            float v45 = -v42;
            do
            {
              float v46 = v21->f32[0] * v36;
              if (v46 >= 0.0)
              {
                if (v46 <= v43)
                {
LABEL_43:
                  float v47 = v21->f32[0] * v36;
                  goto LABEL_44;
                }
                float v47 = 1.0;
                if (v46 < v42) {
                  float v47 = (float)((float)((float)(v46 - v42) * (float)(v46 - v42)) * v41) + 1.0;
                }
              }
              else
              {
                if (v46 >= v44) {
                  goto LABEL_43;
                }
                float v47 = -1.0;
                if (v46 >= v45) {
                  float v47 = (float)((float)-(float)((float)((float)-v46 - v42) * (float)((float)-v46 - v42)) * v41) + -1.0;
                }
              }
LABEL_44:
              v19->f32[0] = v47;
              float v48 = v36 * v20->f32[0];
              if (v48 >= 0.0)
              {
                if (v48 > v43)
                {
                  float v49 = 1.0;
                  if (v48 < v42) {
                    float v49 = (float)((float)((float)(v48 - v42) * (float)(v48 - v42)) * v41) + 1.0;
                  }
                  goto LABEL_52;
                }
              }
              else if (v48 < v44)
              {
                float v49 = -1.0;
                if (v48 >= v45) {
                  float v49 = (float)((float)-(float)((float)((float)-v48 - v42) * (float)((float)-v48 - v42)) * v41) + -1.0;
                }
                goto LABEL_52;
              }
              float v49 = v36 * v20->f32[0];
LABEL_52:
              v18->f32[0] = v49;
              BOOL v18 = (float32x4_t *)((char *)v18 + 4);
              float v36 = v38 + v36;
              uint64_t v20 = (float32x4_t *)((char *)v20 + 4);
              CFDictionaryRef v19 = (float32x4_t *)((char *)v19 + 4);
              uint64_t v21 = (float32x4_t *)((char *)v21 + 4);
              --v34;
            }
            while (v34);
          }
        }
        else if (v35 == v36)
        {
          vDSP_vsmul(v21->f32, 1, &__C, v19->f32, 1, v34);
          vDSP_vsmul(v20->f32, 1, &__C, v18->f32, 1, v34);
        }
        else
        {
          float v63 = v36;
          float v64 = v36;
          RampGainMono(v21, v19, v34, &v64, (float)(v35 - v36) / (float)v34, v37);
          RampGainMono(v20, v18, v34, &v63, v38, v50);
        }
        *((float *)this + 8) = v35;
        *((float *)this + 6) = v23;
        v15 += v16;
      }
      while (v15 < a4);
    }
  }
}

double BoostClipKernel::CalculateCoeffs(BoostClipKernel *this)
{
  uint64_t v2 = (ausdk::AUScope *)(*((void *)this + 1) + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x7063676Eu);
  uint64_t v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v6 = ausdk::AUElement::GetParameter(v5, 0x5F737776u);
  unint64_t v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v38 = ausdk::AUElement::GetParameter(v7, 0x626F6F66u);
  double v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v36 = ausdk::AUElement::GetParameter(v8, 0x63757466u);
  double v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v37 = ausdk::AUElement::GetParameter(v9, 0x74687273u);
  double v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v35 = ausdk::AUElement::GetParameter(v10, 0x6E6F6973u);
  unint64_t v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v34 = ausdk::AUElement::GetParameter(v11, 0x6D617867u);
  unint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v13 = ausdk::AUElement::GetParameter(v12, 0x6365696Cu);
  int v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v33 = ausdk::AUElement::GetParameter(v14, 0x766F6C74u);
  unsigned int v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v16 = ausdk::AUElement::GetParameter(v15, 0x61746B74u);
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v18 = ausdk::AUElement::GetParameter(v17, 0x72656C74u);
  CFDictionaryRef v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v20 = ausdk::AUElement::GetParameter(v19, 0x6E61746Bu);
  uint64_t v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v22 = ausdk::AUElement::GetParameter(v21, 0x6E72656Cu);
  float v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v24 = ausdk::AUElement::GetParameter(v23, 0x636C6970u);
  float v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 173) = ausdk::AUElement::GetParameter(v25, 0x6D6F6465u) != 0.0;
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 172) = ausdk::AUElement::GetParameter(v26, 0x7363656Eu) != 0.0;
  if (v6 < v13) {
    float v13 = v6;
  }
  *((float *)this + 23) = v38;
  *((float *)this + 24) = v36 * 10.0;
  *((float *)this + 25) = Parameter;
  float v27 = __exp10f(v6 * 0.05);
  *((float *)this + 38) = v37;
  *((float *)this + 39) = v35;
  *((float *)this + 26) = fminf(v27, 100.0);
  *((float *)this + 27) = v34;
  *((float *)this + 28) = fmaxf(v33, 0.0001);
  *((float *)this + 29) = fmaxf(v16, 0.0001);
  *((float *)this + 30) = fmaxf(v18, 0.001);
  *((float *)this + 31) = fmaxf(v20, 0.0001);
  *((float *)this + 32) = fmaxf(v22, 0.001);
  *((float *)this + 33) = fmaxf(__exp10f(v13 * 0.05), 0.001);
  float v28 = __exp10f(v24 * 0.05);
  if (v28 < 0.25) {
    float v28 = 0.25;
  }
  if (v28 >= 0.98) {
    float v28 = 1.0;
  }
  *((float *)this + 34) = v28;
  double v29 = v28;
  unsigned int v30 = vcvtd_n_s64_f64(v29, 0x18uLL);
  unsigned int v31 = vcvtd_n_s64_f64(1.0 / ((v29 + -1.0) * 4.0), 0x18uLL);
  double result = 2.0 - v29;
  *((_DWORD *)this + 35) = v30;
  *((_DWORD *)this + 36) = vcvtd_n_s64_f64(result, 0x18uLL);
  *((_DWORD *)this + 37) = v31;
  return result;
}

void BoostClipKernel::UpdateTimeConstants(BoostClipKernel *this)
{
  double v3 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((void *)this + 1) + 128), 0) + 80);
  float32x2_t v4 = *(float32x2_t *)((char *)this + 116);
  __asm { FMOV            V9.2S, #1.0 }
  if (!_ZF || v4.f32[1] != *((float *)this + 19))
  {
    v2.i32[0] = *((_DWORD *)this + 40);
    float64x2_t v10 = vmulq_n_f64(vcvtq_f64_f32(v4), v3 / (double)v2.u64[0]);
    uint64_t v21 = *(void *)((char *)this + 116);
    float64x2_t __x = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x10000000000000uLL), v10), (int8x16_t)vdupq_n_s64(0xFFF0000000000000), (int8x16_t)vdivq_f64((float64x2_t)vdupq_n_s64(0xC01BA18A998FFFA0), v10));
    long double v19 = exp(__x.f64[1]);
    *(double *)v2.i64 = exp(__x.f64[0]);
    *(long double *)&v2.i64[1] = v19;
    *(float32x2_t *)((char *)this + 52) = vsub_f32(_D9, vcvt_f32_f64((float64x2_t)vbicq_s8(v2, (int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0xC086233333333333), __x))));
    v2.i32[1] = HIDWORD(v21);
    *((void *)this + 9) = v21;
  }
  float32x2_t v11 = *(float32x2_t *)((char *)this + 124);
  if (v11.f32[0] != *((float *)this + 20) || v11.f32[1] != *((float *)this + 21))
  {
    v2.i32[0] = *((_DWORD *)this + 40);
    float64x2_t v12 = vmulq_n_f64(vcvtq_f64_f32(v11), v3 / (double)v2.u64[0]);
    uint64_t v22 = *(void *)((char *)this + 124);
    float64x2_t __xa = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0x10000000000000uLL), v12), (int8x16_t)vdupq_n_s64(0xFFF0000000000000), (int8x16_t)vdivq_f64((float64x2_t)vdupq_n_s64(0xC01BA18A998FFFA0), v12));
    long double v20 = exp(__xa.f64[1]);
    *(double *)v2.i64 = exp(__xa.f64[0]);
    *(long double *)&v2.i64[1] = v20;
    *(float32x2_t *)((char *)this + 60) = vsub_f32(_D9, vcvt_f32_f64((float64x2_t)vbicq_s8(v2, (int8x16_t)vcgtq_f64((float64x2_t)vdupq_n_s64(0xC086233333333333), __xa))));
    v2.i32[1] = HIDWORD(v22);
    *((void *)this + 10) = v22;
  }
  float v13 = *((float *)this + 28);
  if (v13 != *((float *)this + 17))
  {
    v2.i32[0] = *((_DWORD *)this + 40);
    *(double *)v2.i64 = v3 / (double)v2.u64[0] * v13;
    if (*(double *)v2.i64 >= 2.22507386e-308) {
      double v14 = -6.90775528 / *(double *)v2.i64;
    }
    else {
      double v14 = -INFINITY;
    }
    double v15 = exp(v14);
    if (v14 < -708.4) {
      double v15 = 0.0;
    }
    float v16 = v15;
    *((float *)this + 12) = 1.0 - v16;
    *((float *)this + 17) = v13;
  }
}

void BoostClipKernel::CalcBoostGain(BoostClipKernel *this, float a2)
{
  if (a2 >= 0.00000001) {
    float v3 = a2;
  }
  else {
    float v3 = 0.00000001;
  }
  float v4 = log10f(v3) * 20.0;
  float v5 = *((float *)this + 38);
  float v6 = v4;
  if (v4 < v5) {
    float v6 = v4 + (float)(*((float *)this + 23) * (float)(v5 - v4));
  }
  float v7 = *((float *)this + 39);
  if (v4 >= v7)
  {
    float v8 = 0.0;
    float v9 = 1.0;
  }
  else
  {
    float v8 = (float)(v4 - v7) * *((float *)this + 24);
    float v9 = __exp10f(v8 * 0.05);
  }
  float v10 = (float)(v6 + *((float *)this + 25)) - v4;
  float v11 = *((float *)this + 27);
  if ((float)(v8 + v10) > v11) {
    float v10 = v11 - v8;
  }
  float v12 = __exp10f(v10 * 0.05);
  float v13 = *((float *)this + 26);
  int v14 = *((unsigned __int8 *)this + 88);
  if (*((unsigned char *)this + 88))
  {
    float v15 = v13 + (float)(*((float *)this + 12) * (float)(v13 - v13));
    *((float *)this + 10) = v9;
    *((float *)this + 11) = v15;
    float v16 = v12;
  }
  else
  {
    float v16 = *((float *)this + 9);
    float v15 = *((float *)this + 11) + (float)(*((float *)this + 12) * (float)(v13 - *((float *)this + 11)));
    *((float *)this + 11) = v15;
    if (v12 < v16)
    {
      uint64_t v17 = (float *)((char *)this + 52);
      goto LABEL_16;
    }
  }
  uint64_t v17 = (float *)((char *)this + 56);
LABEL_16:
  float v18 = v16 + (float)(*v17 * (float)(v12 - v16));
  *((float *)this + 9) = v18;
  float v19 = *((float *)this + 10);
  uint64_t v20 = 64;
  if (v9 < v19) {
    uint64_t v20 = 60;
  }
  float v21 = v19 + (float)(*(float *)((char *)this + v20) * (float)(v9 - v19));
  *((float *)this + 10) = v21;
  float v22 = (float)(v3 * v15) * v21;
  float v23 = *((float *)this + 33);
  if ((float)(v18 * v22) > v23)
  {
    float v18 = v23 / v22;
    *((float *)this + 9) = v23 / v22;
  }
  float v24 = v21 * (float)(v15 * v18);
  *((float *)this + 5) = v24;
  if (v14)
  {
    *((float *)this + 8) = v24;
    *((_DWORD *)this + 7) = vcvts_n_s32_f32(v24, 0x18uLL);
    *((unsigned char *)this + 88) = 0;
  }
}

void BoostClipKernel::Process(BoostClipKernel *this, const float *a2, float *a3, unsigned int a4, BOOL *a5, __n128 a6)
{
  float v10 = (_DWORD *)*((void *)this + 1);
  if (*((_DWORD *)this + 41) != a4)
  {
    if ((a4 & 0x1F) != 0)
    {
      HIDWORD(v11) = -286331153 * a4;
      LODWORD(v11) = -286331153 * a4;
      if ((v11 >> 1) < 0x8888889)
      {
        int v13 = 30;
      }
      else
      {
        HIDWORD(v12) = -1431655765 * a4;
        LODWORD(v12) = -1431655765 * a4;
        if ((v12 >> 3) > 0xAAAAAAA) {
          return;
        }
        int v13 = 24;
      }
    }
    else
    {
      int v13 = 32;
    }
    *((_DWORD *)this + 40) = v13;
    *((_DWORD *)this + 41) = a4;
  }
  int v14 = v10[148];
  if (v14 != *((_DWORD *)this + 42))
  {
    a6.n128_f64[0] = BoostClipKernel::CalculateCoeffs(this);
    *((_DWORD *)this + 42) = v14;
  }
  if (((*(uint64_t (**)(_DWORD *, __n128))(*(void *)v10 + 592))(v10, a6) & 1) == 0)
  {
    BoostClipKernel::UpdateTimeConstants(this);
    vDSP_Length v15 = *((int *)this + 40);
    if (!v15)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiounint64_t n = &unk_1F14C8B68;
      exception[2] = -50;
    }
    if (a4)
    {
      unsigned int v16 = 0;
      while (1)
      {
        uint64_t v17 = &a3[v16];
        float __C = 0.0;
        float v18 = (float32x4_t *)&a2[v16];
        vDSP_maxmgv(v18->f32, 1, &__C, v15);
        float v19 = __C;
        if (*((unsigned char *)this + 173))
        {
          float v20 = *((float *)this + 6);
          float v21 = (float *)((char *)this + 176);
          float v22 = &a3[v16];
          uint64_t v23 = v15;
          do
          {
            float v24 = v18->f32[0];
            float v18 = (float32x4_t *)((char *)v18 + 4);
            *v22++ = *v21;
            *v21++ = v24;
            --v23;
          }
          while (v23);
          if (v19 >= v20) {
            float v25 = v19;
          }
          else {
            float v25 = v20;
          }
          float v18 = (float32x4_t *)&a3[v16];
        }
        else
        {
          float v20 = __C;
          float v25 = __C;
        }
        BoostClipKernel::CalcBoostGain(this, v25);
        vDSP_Length v26 = *((unsigned int *)this + 40);
        float v27 = *((float *)this + 5);
        v28.i32[0] = *((_DWORD *)this + 8);
        float32_t __B = v28.f32[0];
        float v29 = (float)(v27 - v28.f32[0]) / (float)v26;
        if (!*((unsigned char *)this + 172)
          || (v27 >= v28.f32[0] ? (float v30 = v27) : (float v30 = v28.f32[0]),
              float v31 = v30 * v20,
              float v32 = *((float *)this + 34),
              v31 < v32))
        {
          if (v27 == v28.f32[0]) {
            vDSP_vsmul(v18->f32, 1, &__B, &a3[v16], 1, v26);
          }
          else {
            RampGainMono(v18, (float32x4_t *)&a3[v16], v26, &__B, v29, v28);
          }
          goto LABEL_52;
        }
        if (v32 >= 1.0)
        {
          for (; v26; LODWORD(v26) = v26 - 1)
          {
            float v38 = v18->f32[0];
            float v18 = (float32x4_t *)((char *)v18 + 4);
            float v39 = v38 * v28.f32[0];
            if ((float)(v38 * v28.f32[0]) >= -1.0) {
              float v40 = v39;
            }
            else {
              float v40 = -1.0;
            }
            if (v39 <= 1.0) {
              float v41 = v40;
            }
            else {
              float v41 = 1.0;
            }
            *v17++ = v41;
            v28.f32[0] = v29 + v28.f32[0];
          }
          goto LABEL_52;
        }
        if (v26) {
          break;
        }
LABEL_52:
        *((float *)this + 8) = v27;
        *((float *)this + 6) = v19;
        v16 += v15;
        if (v16 >= a4) {
          return;
        }
      }
      float v33 = (float)*((int *)this + 37) * 0.000000059605;
      float v34 = (float)*((int *)this + 36) * 0.000000059605;
      float v35 = (float)*((int *)this + 35) * 0.000000059605;
      while (1)
      {
        float v36 = v18->f32[0] * v28.f32[0];
        if (v36 >= 0.0)
        {
          if (v36 > v35)
          {
            float v37 = 1.0;
            if (v36 < v34) {
              float v37 = (float)((float)((float)(v36 - v34) * (float)(v36 - v34)) * v33) + 1.0;
            }
            goto LABEL_41;
          }
        }
        else if (v36 < (float)-v35)
        {
          float v37 = -1.0;
          if (v36 >= (float)-v34) {
            float v37 = (float)((float)-(float)((float)((float)-v36 - v34) * (float)((float)-v36 - v34)) * v33) + -1.0;
          }
          goto LABEL_41;
        }
        float v37 = v18->f32[0] * v28.f32[0];
LABEL_41:
        *v17++ = v37;
        float v18 = (float32x4_t *)((char *)v18 + 4);
        v28.f32[0] = v29 + v28.f32[0];
        LODWORD(v26) = v26 - 1;
        if (!v26) {
          goto LABEL_52;
        }
      }
    }
  }
}

double BoostClipKernel::Reset(BoostClipKernel *this)
{
  *(void *)((char *)this + 84) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *((unsigned char *)this + 88) = 1;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  return result;
}

void BoostClipKernel::~BoostClipKernel(BoostClipKernel *this)
{
}

BOOL AUBoostClip::ValidFormat(AUBoostClip *this, unsigned int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  int v10 = 0;
  long long v5 = *(_OWORD *)&a4->mBytesPerPacket;
  v8[0] = *(_OWORD *)&a4->mSampleRate;
  v8[1] = v5;
  uint64_t v9 = *(void *)&a4->mBitsPerChannel;
  CAStreamBasicDescription::IdentifyCommonPCMFormat(v8, &v10, &v11);
  return v10 == 1 && a4->mChannelsPerFrame - 1 < 2;
}

uint64_t AUBoostClip::SupportedNumChannels(AUBoostClip *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUBoostClip::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 2;
}

uint64_t AUBoostClip::SupportsTail(AUBoostClip *this)
{
  return 1;
}

double AUBoostClip::GetTailTime(AUBoostClip *this)
{
  return 0.0;
}

double AUBoostClip::GetLatency(AUBoostClip *this)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUBoostClip *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0x6D6F6465u);
  double result = 0.0;
  if (Parameter != 0.0 && *((unsigned char *)this + 17))
  {
    long long v5 = (uint64_t *)*((void *)this + 66);
    if (*((uint64_t **)this + 67) != v5)
    {
      uint64_t v6 = *v5;
      uint64_t v7 = ausdk::AUScope::SafeGetElement((AUBoostClip *)((char *)this + 128), 0);
      LODWORD(v8) = *(_DWORD *)(v6 + 160);
      return (double)v8 / *(double *)(v7 + 80);
    }
  }
  return result;
}

uint64_t AUBoostClip::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

uint64_t AUBoostClip::GetParameterInfo(AUBoostClip *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2) {
    return 4294956418;
  }
  unint64_t v6 = 0x3F80000000000000;
  uint64_t result = 4294956418;
  if (a3 > 1851880554)
  {
    if (a3 > 1919249523)
    {
      if (a3 <= 1953002098)
      {
        if (a3 != 1919249524)
        {
          if (a3 != 1935893870) {
            return result;
          }
          int v10 = -1073741824;
          AudioUnitParameterValue v7 = 1.0;
          AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
          CFStringRef v9 = @"clip enable";
          goto LABEL_44;
        }
        unint64_t v6 = 0x4270000038D1B717;
        AudioUnitParameterValue v7 = 0.5;
        AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Seconds;
        CFStringRef v9 = @"release time";
        goto LABEL_38;
      }
      if (a3 == 1953002099)
      {
        unint64_t v6 = 0x41400000C1400000;
        int v10 = -1073741824;
        AudioUnitParameterValue v7 = 0.0;
        AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Decibels;
        CFStringRef v9 = @"boost threshold dB";
        goto LABEL_44;
      }
      if (a3 != 1987013748) {
        return result;
      }
      unint64_t v6 = 0x4270000038D1B717;
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Seconds;
      CFStringRef v9 = @"volume smooth time";
    }
    else if (a3 > 1852990827)
    {
      if (a3 != 1852990828)
      {
        if (a3 != 1885562734) {
          return result;
        }
        unint64_t v6 = 0x42100000C1400000;
        int v10 = -1073741824;
        AudioUnitParameterValue v7 = 0.0;
        AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Decibels;
        CFStringRef v9 = @"preclip gain dB";
        goto LABEL_44;
      }
      unint64_t v6 = 0x4270000038D1B717;
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Seconds;
      CFStringRef v9 = @"noise release time";
    }
    else
    {
      if (a3 != 1851880555)
      {
        if (a3 != 1852795251) {
          return result;
        }
        unint64_t v6 = 0xC1200000C3200000;
        int v10 = -1073741824;
        AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Decibels;
        CFStringRef v9 = @"noise threshold dB";
        AudioUnitParameterValue v7 = -100.0;
        goto LABEL_44;
      }
      unint64_t v6 = 0x4270000038D1B717;
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Seconds;
      CFStringRef v9 = @"noise attack time";
    }
    int v10 = -1069547520;
    AudioUnitParameterValue v7 = 0.05;
    goto LABEL_44;
  }
  if (a3 > 1668049263)
  {
    if (a3 > 1835104358)
    {
      if (a3 == 1835104359)
      {
        unint64_t v6 = 0x4240000000000000;
        int v10 = -1073741824;
        AudioUnitParameterValue v7 = 12.0;
        AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Decibels;
        CFStringRef v9 = @"max gain dB";
      }
      else
      {
        if (a3 != 1836016741) {
          return result;
        }
        int v10 = -1073741824;
        AudioUnitParameterValue v7 = 0.0;
        AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Boolean;
        CFStringRef v9 = @"look ahead";
      }
    }
    else if (a3 == 1668049264)
    {
      unint64_t v6 = 3233808384;
      int v10 = -1073741824;
      AudioUnitParameterValue v7 = 0.0;
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Decibels;
      CFStringRef v9 = @"softclip level dB";
    }
    else
    {
      if (a3 != 1668641894) {
        return result;
      }
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
      int v10 = -1073741824;
      AudioUnitParameterValue v7 = 0.0;
      CFStringRef v9 = @"cut";
    }
    goto LABEL_44;
  }
  if (a3 > 1651470181)
  {
    if (a3 == 1651470182)
    {
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Generic;
      int v10 = -1073741824;
      CFStringRef v9 = @"boost";
      AudioUnitParameterValue v7 = 0.2;
    }
    else
    {
      if (a3 != 1667590508) {
        return result;
      }
      unint64_t v6 = 0x41400000C1400000;
      int v10 = -1073741824;
      AudioUnitParameterValue v7 = 0.0;
      AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Decibels;
      CFStringRef v9 = @"ceiling dB";
    }
    goto LABEL_44;
  }
  if (a3 != 1601402742)
  {
    if (a3 != 1635019636) {
      return result;
    }
    unint64_t v6 = 0x4270000038D1B717;
    AudioUnitParameterValue v7 = 0.5;
    AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Seconds;
    CFStringRef v9 = @"attack time";
LABEL_38:
    int v10 = -1069547520;
    goto LABEL_44;
  }
  unint64_t v6 = 0x41400000C2C00000;
  int v10 = -1073741824;
  AudioUnitParameterValue v7 = 0.0;
  AudioUnitParameterUnit v8 = kAudioUnitParameterUnit_Decibels;
  CFStringRef v9 = @"user gain dB";
LABEL_44:
  buffer->cfNameString = v9;
  buffer->AudioUnitParameterOptions flags = 0x8000000;
  CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v8;
  *(void *)&buffer->minCFDataRef Value = v6;
  buffer->defaultCFDataRef Value = v7;
  buffer->flags += v10;
  return result;
}

uint64_t AUBoostClip::ProcessBufferLists(AUBoostClip *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  if (*((_DWORD *)this + 149) != 1)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiounint64_t n = &unk_1F14C8B68;
    int v12 = -4;
    goto LABEL_10;
  }
  if (a3->mNumberBuffers != 2)
  {
    ausdk::AUEffectBase::ProcessBufferLists(this, a2, a3, a4, a5);
    return 0;
  }
  CFStringRef v9 = (void *)*((void *)this + 66);
  if (!*v9)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiounint64_t n = &unk_1F14C8B68;
    int v12 = -10868;
LABEL_10:
    exception[2] = v12;
  }
  char IsInputSilent = ausdk::AUEffectBase::IsInputSilent(this, *a2, a5);
  (*(void (**)(void, const AudioBufferList *, AudioBufferList *, uint64_t, char *))(*(void *)*v9 + 32))(*v9, a3, a4, a5, &IsInputSilent);
  if (!IsInputSilent) {
    *a2 &= ~0x10u;
  }
  return 0;
}

uint64_t AUBoostClip::SetParameter(AUBoostClip *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

uint64_t AUBoostClip::Reset(AUBoostClip *this, int a2)
{
  float v4 = (void *)*((void *)this + 66);
  long long v5 = (void *)*((void *)this + 67);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 16))(*v4);
    }
    ++v4;
  }
  if (!a2)
  {
    unint64_t v6 = (void *)*((void *)this + 66);
    if (*((void **)this + 67) != v6)
    {
      if (*v6) {
        (*(void (**)(void))(*(void *)*v6 + 16))(*v6);
      }
    }
  }
  return 0;
}

double AUBoostClip::Cleanup(AUBoostClip *this)
{
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  double result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUBoostClip::Initialize(AUBoostClip *this)
{
  uint64_t v2 = ausdk::AUEffectBase::Initialize(this);
  if (!v2)
  {
    (*(void (**)(AUBoostClip *, void, void))(*(void *)this + 72))(this, 0, 0);
    (*(void (**)(void *__return_ptr, AUBoostClip *, uint64_t, void))(*(void *)this + 392))(v4, this, 2, 0);
    CAStreamBasicDescription::IdentifyCommonPCMFormat(v4, (int *)this + 149, 0);
  }
  return v2;
}

void AUBoostClip::~AUBoostClip(AUBoostClip *this)
{
  AUBoostClip::~AUBoostClip(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14BEE70;
  uint64_t v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__clear[abi:ne180100]((void *)this + 66);
  *(_OWORD *)((char *)this + 568) = 0u;
  *(void *)this = &unk_1F14C8258;
  float v3 = v2;
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);

  ausdk::AUBase::~AUBase(this);
}

void VADGenUtils::VectorSigmoid<float>(const float *a1, float *a2, float *a3, float *__D, vDSP_Length __N, float a6, float a7)
{
  float __C = -(float)(a7 * a6);
  float __B = a7;
  vDSP_vsmsa(a1, 1, &__B, &__C, __D, 1, __N);
  vDSP_vneg(__D, 1, a3, 1, __N);
  int __A = __N;
  vvexpf(a3, a3, &__A);
  int __A = 1065353216;
  vDSP_vsadd(a3, 1, (const float *)&__A, a2, 1, __N);
  vDSP_vfill((const float *)&__A, a3, 1, __N);
  vDSP_vdiv(a2, 1, a3, 1, a2, 1, __N);
}

void VADGenUtils::TwoPoleBandpass_Array<float>(const float *a1, const float *a2, const float *a3, const float *a4, const float *a5, const float *a6, float *__C, vDSP_Length __M, float a9, float a10, float a11)
{
  float v19 = a10;
  float v20 = a9;
  float __B = a11;
  vDSP_mmov(a1, __C, __M, 1uLL, __M, __M);
  vDSP_vadd(__C, 1, a2, 1, __C, 1, __M);
  vDSP_vsub(a3, 1, __C, 1, __C, 1, __M);
  vDSP_vsub(a4, 1, __C, 1, __C, 1, __M);
  vDSP_vsmul(__C, 1, &__B, __C, 1, __M);
  vDSP_vsma(a5, 1, &v20, __C, 1, __C, 1, __M);
  vDSP_vsma(a6, 1, &v19, __C, 1, __C, 1, __M);
}

uint64_t AUResidualEchoSuppressorV4::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 528) = a2;
  return this;
}

uint64_t AUResidualEchoSuppressorV4::ShouldBypassEffect(AUResidualEchoSuppressorV4 *this)
{
  return *((unsigned __int8 *)this + 528);
}

uint64_t AUResidualEchoSuppressorV4::ChangeStreamFormat(AUResidualEchoSuppressorV4 *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  unsigned int v6 = a3;
  int v7 = a2;
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (v7 != 2 || v6)
  {
    if (v7 == 1 && v6 <= 2)
    {
      CFStringRef v9 = (BOOL *)this + v6 + 540;
      *CFStringRef v9 = a5->mFormatID == 1718773105;
    }
  }
  else
  {
    *((unsigned char *)this + 545) = a5->mFormatID == 1718773105;
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV4::ValidFormat(AUResidualEchoSuppressorV4 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (a4->mChannelsPerFrame != 1) {
    return 0;
  }
  int v6 = (int)a2;
  uint64_t result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (v6 == 1)
  {
    if (a3 > 2 || result == 1) {
      return result;
    }
    goto LABEL_11;
  }
  if (v6 != 2) {
    return result;
  }
  if (result) {
    return 1;
  }
  uint64_t result = 0;
  if (!a3)
  {
LABEL_11:
    if (a4->mFormatID == 1718773105)
    {
      long long v8 = *(_OWORD *)&a4->mBytesPerPacket;
      v9[0] = *(_OWORD *)&a4->mSampleRate;
      v9[1] = v8;
      uint64_t v10 = *(void *)&a4->mBitsPerChannel;
      DWORD2(v9[0]) = 1819304813;
      int v11 = 0;
      LODWORD(result) = CAStreamBasicDescription::IdentifyCommonPCMFormat(v9, &v11, 0);
      if (v11 == 4) {
        return result;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV4::SupportedNumChannels(AUResidualEchoSuppressorV4 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUResidualEchoSuppressorV4::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUResidualEchoSuppressorV4::StreamFormatWritable(AUResidualEchoSuppressorV4 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUResidualEchoSuppressorV4::SupportsTail(AUResidualEchoSuppressorV4 *this)
{
  return 1;
}

double AUResidualEchoSuppressorV4::GetTailTime(AUResidualEchoSuppressorV4 *this)
{
  return 0.0;
}

double AUResidualEchoSuppressorV4::GetLatency(AUResidualEchoSuppressorV4 *this)
{
  return 0.0;
}

uint64_t AUResidualEchoSuppressorV4::GetParameterInfo(AUResidualEchoSuppressorV4 *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->unitName = 0;
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x24)
  {
    CFStringRef v6 = *(&off_1E6242BD8 + a3);
    AudioUnitParameterUnit v7 = dword_1BB8D057C[a3];
    AudioUnitParameterValue v8 = flt_1BB8D0610[a3];
    AudioUnitParameterValue v9 = flt_1BB8D06A4[a3];
    AudioUnitParameterValue v10 = flt_1BB8D0738[a3];
    int v11 = dword_1BB8D07CC[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFDataRef Value = v8;
    buffer->maxCFDataRef Value = v9;
    buffer->defaultCFDataRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

BOOL AUResidualEchoSuppressorV4::BusCountWritable(AUResidualEchoSuppressorV4 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUResidualEchoSuppressorV4::Render(AUResidualEchoSuppressorV4 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v40[5] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  AudioUnitParameterValue v8 = (AUResidualEchoSuppressorV4 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 0);
  int v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t v12 = ausdk::AUInputElement::PullInput(v11, a2, a3, 0, a4);
  if (!v12)
  {
    uint64_t v13 = ausdk::AUScope::GetElement(v8, 1u);
    if (v13 && *(_DWORD *)(v13 + 172))
    {
      int v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 1u);
      uint64_t v12 = ausdk::AUInputElement::PullInput(v14, a2, a3, 1, a4);
      uint64_t v15 = ausdk::AUScope::SafeGetElement(v8, 1u);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
      if (v12) {
        return v12;
      }
    }
    else
    {
      uint64_t v18 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
    }
    uint64_t v19 = BufferList;
    uint64_t v20 = ausdk::AUScope::GetElement(v8, 2u);
    if (v20 && *(_DWORD *)(v20 + 172))
    {
      float v21 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 2u);
      uint64_t v12 = ausdk::AUInputElement::PullInput(v21, a2, a3, 2, a4);
      uint64_t v22 = ausdk::AUScope::SafeGetElement(v8, 2u);
      uint64_t v23 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v22 + 144));
      if (v12) {
        return v12;
      }
    }
    else
    {
      uint64_t v24 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t v23 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v24 + 144));
    }
    uint64_t v25 = v23;
    uint64_t v26 = ausdk::AUScope::GetElement(v8, 3u);
    if (v26 && *(_DWORD *)(v26 + 172))
    {
      float v27 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 3u);
      uint64_t v12 = ausdk::AUInputElement::PullInput(v27, a2, a3, 3, a4);
      uint64_t v28 = ausdk::AUScope::SafeGetElement(v8, 3u);
      uint64_t v29 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v28 + 144));
      if (v12) {
        return v12;
      }
    }
    else
    {
      uint64_t v30 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t v29 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v30 + 144));
    }
    uint64_t v31 = v29;
    uint64_t v32 = ausdk::AUScope::GetElement(v8, 4u);
    if (!v32 || !*(_DWORD *)(v32 + 172))
    {
      uint64_t v36 = ausdk::AUScope::SafeGetElement(v8, 0);
      uint64_t v35 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v36 + 144));
LABEL_28:
      uint64_t v37 = v35;
      uint64_t v38 = ausdk::AUScope::SafeGetElement(v8, 0);
      v40[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v38 + 144));
      v40[1] = v19;
      v40[2] = v25;
      v40[3] = v31;
      v40[4] = v37;
      uint64_t v39 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
      return (*(uint64_t (**)(AUResidualEchoSuppressorV4 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 5, v40, 1, &v39);
    }
    float v33 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 4u);
    uint64_t v12 = ausdk::AUInputElement::PullInput(v33, a2, a3, 4, a4);
    uint64_t v34 = ausdk::AUScope::SafeGetElement(v8, 4u);
    uint64_t v35 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v34 + 144));
    if (!v12) {
      goto LABEL_28;
    }
  }
  return v12;
}

uint64_t AUResidualEchoSuppressorV4::ProcessMultipleBufferLists(AUResidualEchoSuppressorV4 *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  v140[2] = *(float **)MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  if ((*(unsigned int (**)(AUResidualEchoSuppressorV4 *, unsigned int *))(*(void *)this + 576))(this, a2))
  {
    uint64_t v10 = a7[1];
    unsigned int mDataByteSize = v10->mBuffers[0].mDataByteSize;
    if (mDataByteSize >= 4) {
      memset_pattern16(v10->mBuffers[0].mData, &unk_1BB873A60, mDataByteSize & 0xFFFFFFFC);
    }
    if (*((unsigned __int8 *)this + 540) == *((unsigned __int8 *)this + 545)) {
      memcpy((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    }
    else {
      bzero((*a7)->mBuffers[0].mData, (*a7)->mBuffers[0].mDataByteSize);
    }
    return 0;
  }
  int v13 = *((_DWORD *)this + 133);
  if (v13 != *((_DWORD *)this + 134))
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    *(float *)&uint64_t v15 = ausdk::AUElement::GetParameter(Element, 1u);
    *(void *)&long long v133 = v15;
    unsigned int v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    *(float *)&uint64_t v17 = ausdk::AUElement::GetParameter(v16, 2u);
    *(void *)&long long v132 = v17;
    uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    unsigned int Parameter = ausdk::AUElement::GetParameter(v18, 8u);
    uint64_t v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    unsigned int v137 = ausdk::AUElement::GetParameter(v20, 9u);
    float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v22 = ausdk::AUElement::GetParameter(v21, 0xAu);
    uint64_t v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v24 = ausdk::AUElement::GetParameter(v23, 0xBu);
    uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v26 = ausdk::AUElement::GetParameter(v25, 0xCu);
    float v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v136 = ausdk::AUElement::GetParameter(v27, 0xDu);
    uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v135 = ausdk::AUElement::GetParameter(v28, 0xEu);
    uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v134 = ausdk::AUElement::GetParameter(v29, 0xFu);
    uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v31 = ausdk::AUElement::GetParameter(v30, 0x10u);
    uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v33 = ausdk::AUElement::GetParameter(v32, 0x11u);
    uint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v35 = ausdk::AUElement::GetParameter(v34, 0x12u);
    uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v37 = ausdk::AUElement::GetParameter(v36, 0x13u);
    uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v130 = ausdk::AUElement::GetParameter(v38, 0x14u);
    uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    unsigned int v131 = ausdk::AUElement::GetParameter(v39, 0x15u);
    float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v129 = ausdk::AUElement::GetParameter(v40, 0x16u);
    float v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v128 = ausdk::AUElement::GetParameter(v41, 0x17u);
    float v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    unsigned int v43 = ausdk::AUElement::GetParameter(v42, 0x18u);
    float v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    unsigned int v45 = ausdk::AUElement::GetParameter(v44, 0x19u);
    uint64_t v46 = *((void *)this + 70);
    *(int32x2_t *)(v46 + 36) = vneg_s32(vabs_s32(vcvt_s32_f32((float32x2_t)__PAIR64__(v132, v133))));
    *(_DWORD *)(v46 + 44) = Parameter;
    float v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    LODWORD(v133) = ausdk::AUElement::GetParameter(v47, 0x1Au);
    float v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    LODWORD(v132) = ausdk::AUElement::GetParameter(v48, 0x1Bu);
    float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v127 = ausdk::AUElement::GetParameter(v49, 0x1Cu);
    float32x4_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    int v51 = (int)ausdk::AUElement::GetParameter(v50, 0x1Eu);
    float v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    int v53 = (int)ausdk::AUElement::GetParameter(v52, 0x1Du);
    float v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v126 = ausdk::AUElement::GetParameter(v54, 0x1Fu);
    float v55 = __exp10f(v22 / 10.0);
    float v56 = __exp10f(v24 / 10.0);
    float v57 = __exp10f(v26 / 10.0);
    float v58 = __exp10f(v31 / 10.0);
    float v59 = __exp10f(v33 / 10.0);
    float v60 = __exp10f(v35 / 10.0);
    float v61 = __exp10f(v37 / 10.0);
    float v62 = __exp10f(v130 / 10.0);
    uint64_t v63 = *((void *)this + 70);
    *(_DWORD *)(v63 + 496) = v137;
    *(float *)(v63 + 500) = v55;
    *(float *)(v63 + 504) = v56;
    *(float *)(v63 + 508) = v57;
    *(float *)(v63 + 556) = v136;
    *(float *)(v63 + 512) = v135;
    *(float *)(v63 + 516) = v134;
    *(float *)(v63 + 520) = v58;
    *(float *)(v63 + 524) = v59;
    *(float *)(v63 + 528) = v60;
    *(float *)(v63 + 532) = v61;
    *(float *)(v63 + 536) = v62;
    *(_DWORD *)(v63 + 540) = v131;
    *(float *)(v63 + 548) = v129;
    *(float *)(v63 + 552) = v128;
    *(_DWORD *)(v63 + 572) = v43;
    *(_DWORD *)(v63 + 576) = v45;
    unsigned int v64 = (float)*(int *)(v63 + 8);
    float v65 = (float)*(int *)(v63 + 12) * 0.5;
    float v66 = v65 / (float)v64;
    float v67 = fmaxf(*(float *)&v133, 300.0);
    if (v67 < v65) {
      float v65 = v67;
    }
    unsigned int v68 = vcvtms_u32_f32(v65 / v66);
    if (v68 < v64) {
      unsigned int v64 = v68;
    }
    *(_DWORD *)(v63 + 664) = v64;
    *(_DWORD *)(v63 + 668) = v132;
    *(float *)(v63 + 672) = v127;
    *(_DWORD *)uint64_t v63 = v53;
    if (v51 < 0) {
      int v69 = v51;
    }
    else {
      int v69 = -v51;
    }
    *(_DWORD *)(v63 + 32) = v69;
    float v70 = __exp10f((float)v69 * 0.1);
    *(float *)(v63 + 56) = v70;
    *(float *)(v63 + 60) = sqrtf(v70);
    uint64_t v71 = *((void *)this + 70);
    float v72 = v126;
    *(float *)(v71 + 48) = v126;
    *(float *)(v71 + 52) = __exp10f(v72 * 0.1);
    size_t v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    *(float *)(*((void *)this + 70) + 688) = ausdk::AUElement::GetParameter(v73, 0x21u);
    unint64_t v74 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    float v75 = ausdk::AUElement::GetParameter(v74, 0x22u);
    uint64_t v76 = *((void *)this + 70);
    *(float *)(v76 + 680) = 1.0
                          - expf(-1.0 / (float)(v75 * (float)((float)*(int *)(v76 + 12) / (float)*(int *)(v76 + 8))));
    uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    *(_DWORD *)(*((void *)this + 71) + 8) = (int)ausdk::AUElement::GetParameter(v77, 0x24u);
    int v78 = (_DWORD *)*((void *)this + 70);
    if (!*v78) {
      v78[169] = 0;
    }
    *((_DWORD *)this + 134) = v13;
  }
  long long v79 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
  int v80 = (int)ausdk::AUElement::GetParameter(v79, 6u);
  long long v81 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
  float v82 = ausdk::AUElement::GetParameter(v81, 7u);
  int v83 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
  float v84 = ausdk::AUElement::GetParameter(v83, 0xDu);
  uint64_t v85 = *((void *)this + 70);
  *(_DWORD *)(v85 + 488) = v80;
  *(float *)(v85 + 492) = v82;
  *(float *)(v85 + 556) = v84;
  int v86 = *(_DWORD *)v85;
  uint64_t v87 = *((unsigned int *)this + 84);
  if (*(int *)v85 >= 2)
  {
    mData = 0;
    uint64_t v89 = 0;
    BOOL v90 = 0;
    unsigned int v91 = 0;
  }
  else
  {
    mData = (float *)a5[1]->mBuffers[0].mData;
    uint64_t v89 = &mData[v87];
    BOOL v90 = (float *)a5[2]->mBuffers[0].mData;
    unsigned int v91 = &v90[v87];
  }
  vDSP_Length v92 = a5[3];
  if (v92) {
    uint64_t v93 = (uint64_t)v92->mBuffers[0].mData;
  }
  else {
    uint64_t v93 = 0;
  }
  uint64_t v94 = (uint64_t)*a5;
  unsigned int v95 = a5[4];
  if (v95) {
    uint64_t v96 = (uint64_t)v95->mBuffers[0].mData;
  }
  else {
    uint64_t v96 = 0;
  }
  float v97 = *(float **)(v94 + 16);
  v140[0] = mData;
  v140[1] = v89;
  v139[0] = v90;
  v139[1] = v91;
  BOOL v100 = v86 < 2 && mData != 0 && v90 != 0;
  if ((v86 > 1 || v100) && *((unsigned char *)this + 541))
  {
    if (*((unsigned char *)this + 542) && *((unsigned char *)this + 540) && v97)
    {
      v138[0] = v97;
      v138[1] = &v97[v87];
      CResidualSuppressorV4::speex_preprocess_run_freq(v85, v138, v140, v139, v93, *((float **)this + 71), v96);
      if (*((unsigned char *)this + 545))
      {
        uint64_t v101 = *((void *)this + 70);
        uint64_t v102 = *(const void **)(v101 + 344);
        uint64_t v103 = *(const void **)(v101 + 352);
        int v104 = (char *)(*a7)->mBuffers[0].mData;
        uint64_t v105 = *((unsigned int *)this + 84);
        unint64_t v106 = &v104[4 * v105];
        memcpy(v104, v102, 4 * v105);
        memcpy(v106, v103, 4 * *((unsigned int *)this + 84));
        memcpy(a7[1]->mBuffers[0].mData, *(const void **)(*((void *)this + 70) + 112), 4 * *(int *)(*((void *)this + 70) + 8));
      }
      goto LABEL_55;
    }
    uint64_t v12 = 0xFFFFFFFFLL;
    if (*((unsigned char *)this + 542) && !*((unsigned char *)this + 540) && v97)
    {
      MEMORY[0x1F4188790](v85);
      float v108 = (char *)&v125 - ((v107 + 15) & 0x7FFFFFFF0);
      memcpy(v108, v109, 4 * *((unsigned int *)this + 84));
      CResidualSuppressorV4::speex_preprocess_run(*((void *)this + 70), v108, v140, v139, v93, *((float **)this + 71), v96);
      if (*((unsigned char *)this + 545))
      {
        uint64_t v110 = *((void *)this + 70);
        uint64_t v111 = *(const void **)(v110 + 344);
        float v112 = *(const void **)(v110 + 352);
        float v113 = (char *)(*a7)->mBuffers[0].mData;
        uint64_t v114 = *((unsigned int *)this + 84);
        unint64_t v115 = &v113[4 * v114];
        memcpy(v113, v111, 4 * v114);
        memcpy(v115, v112, 4 * *((unsigned int *)this + 84));
        float v116 = a7[1]->mBuffers[0].mData;
        uint64_t v117 = *((void *)this + 70);
        float v118 = *(const void **)(v117 + 112);
        size_t v119 = 4 * *(int *)(v117 + 8);
      }
      else
      {
        float v116 = (*a7)->mBuffers[0].mData;
        size_t v119 = 4 * *((unsigned int *)this + 84);
        float v118 = v108;
      }
      memcpy(v116, v118, v119);
LABEL_55:
      if (*((_DWORD *)this + 138) == 2)
      {
        unsigned int v120 = a7[1];
        unsigned int v121 = v120->mBuffers[0].mDataByteSize;
        if (v121 >= 4) {
          memset_pattern16(v120->mBuffers[0].mData, &unk_1BB873A60, v121 & 0xFFFFFFFC);
        }
      }
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  float v122 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v122, 0x20u, *(float *)(*((void *)this + 70) + 220), 0);
  if (**((int **)this + 70) >= 1)
  {
    float v123 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v123, 0x23u, *(float *)(*((void *)this + 70) + 676), 0);
  }
  return v12;
}

uint64_t AUResidualEchoSuppressorV4::CanScheduleParameters(AUResidualEchoSuppressorV4 *this)
{
  return 0;
}

uint64_t AUResidualEchoSuppressorV4::SetParameter(AUResidualEchoSuppressorV4 *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a2 <= 0x24 && ((1 << a2) & 0x16FFFFDF27) != 0)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    ++*((_DWORD *)this + 133);
  }
  else
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t v12 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    ausdk::AUElement::SetParameter(v12, a2, a5, 0);
  }
  return 0;
}

uint64_t AUResidualEchoSuppressorV4::SetProperty(AUResidualEchoSuppressorV4 *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      int v8 = *a5;
      int v9 = *a5 != 0;
      if (v9 != (*(unsigned int (**)(AUResidualEchoSuppressorV4 *))(*(void *)this + 576))(this)) {
        (*(void (**)(AUResidualEchoSuppressorV4 *, BOOL))(*(void *)this + 584))(this, v8 != 0);
      }
      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUResidualEchoSuppressorV4::GetProperty(AUResidualEchoSuppressorV4 *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    int v7 = *((unsigned __int8 *)this + 376);
    goto LABEL_7;
  }
  if (a2 == 21)
  {
    int v7 = (*(uint64_t (**)(AUResidualEchoSuppressorV4 *))(*(void *)this + 576))(this);
LABEL_7:
    uint64_t result = 0;
    *a5 = v7;
    return result;
  }
  return 4294956417;
}

uint64_t AUResidualEchoSuppressorV4::GetPropertyInfo(AUResidualEchoSuppressorV4 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    BOOL v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    BOOL v7 = 0;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUResidualEchoSuppressorV4::Reset(AUResidualEchoSuppressorV4 *this)
{
  return 0;
}

void AUResidualEchoSuppressorV4::Cleanup(AUResidualEchoSuppressorV4 *this)
{
  uint64_t v2 = *((void *)this + 70);
  if (v2)
  {
    CResidualSuppressorV3::speex_preprocess_state_res_destroy(v2);
    *((void *)this + 70) = 0;
  }
  float v3 = (void *)*((void *)this + 71);
  if (v3)
  {
    free(v3);
    *((void *)this + 71) = 0;
  }
}

uint64_t AUResidualEchoSuppressorV4::Initialize(AUResidualEchoSuppressorV4 *this)
{
  char v2 = 0;
  float v3 = (AUResidualEchoSuppressorV4 *)((char *)this + 80);
  for (unsigned int i = 1; ; unsigned int i = 2)
  {
    char v5 = v2;
    uint64_t Element = ausdk::AUScope::SafeGetElement(v3, i - 1);
    if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v3, i) + 80)) {
      break;
    }
    char v2 = 1;
    if (v5)
    {
      double v7 = *(double *)(ausdk::AUScope::SafeGetElement(v3, 0) + 80);
      if (v7 == *(double *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 0) + 80))
      {
        *((_DWORD *)this + 137) = *((_DWORD *)this + 84);
        *((unsigned char *)this + 540) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 0) + 88) == 1718773105;
        *((unsigned char *)this + 541) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 1u) + 88) == 1718773105;
        *((unsigned char *)this + 542) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 2u) + 88) == 1718773105;
        *((unsigned char *)this + 543) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 3u) + 88) == 1718773105;
        *((unsigned char *)this + 544) = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v3, 4u) + 88) == 1718773105;
        *((unsigned char *)this + 545) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 0)+ 88) == 1718773105;
        *((unsigned char *)this + 546) = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUResidualEchoSuppressorV4 *)((char *)this + 128), 1u)+ 88) == 1718773105;
        uint64_t v8 = ausdk::AUScope::SafeGetElement(v3, 0);
        double v9 = *(double *)(v8 + 80);
        int v11 = *(_DWORD *)(v8 + 88);
        int v10 = *(_DWORD *)(v8 + 92);
        int v12 = *(_DWORD *)(v8 + 104);
        int v13 = *(_DWORD *)(v8 + 108);
        uint64_t v14 = ausdk::AUScope::SafeGetElement(v3, 1u);
        double v15 = *(double *)(v14 + 80);
        int v17 = *(_DWORD *)(v14 + 88);
        int v16 = *(_DWORD *)(v14 + 92);
        int v18 = *(_DWORD *)(v14 + 104);
        int v19 = *(_DWORD *)(v14 + 108);
        uint64_t v20 = (_DWORD *)ausdk::AUScope::SafeGetElement(v3, 2u);
        if (v9 == v15)
        {
          int v25 = v20[22];
          int v24 = v20[23];
          if ((v11 == 1819304813 || v11 == 1718773105) && (v10 & 2) == 0 && v13 == 1 && ((v10 & 1) != 0 || v12 == 2))
          {
            if ((v17 == 1819304813 || v17 == 1718773105)
              && (v16 & 2) == 0
              && v19 == 1
              && ((v16 & 1) != 0 || v18 == 2)
              && (v25 == 1819304813 || v25 == 1718773105)
              && (v24 & 2) == 0
              && v20[27] == 1
              && ((v24 & 1) != 0 || v20[26] == 2))
            {
              float v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v27, 1u);
              uint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v28, 2u);
              uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              *((_DWORD *)this + 138) = ausdk::AUElement::GetParameter(v29, 8u);
              uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v30, 9u);
              float v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float Parameter = ausdk::AUElement::GetParameter(v31, 0xAu);
              float v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float v34 = ausdk::AUElement::GetParameter(v33, 0xBu);
              float v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float v36 = ausdk::AUElement::GetParameter(v35, 0xCu);
              float v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v37, 0xDu);
              uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v38, 0xEu);
              uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v39, 0xFu);
              float v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float v41 = ausdk::AUElement::GetParameter(v40, 0x10u);
              float v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float v60 = ausdk::AUElement::GetParameter(v42, 0x11u);
              unsigned int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float v59 = ausdk::AUElement::GetParameter(v43, 0x12u);
              float v44 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float v58 = ausdk::AUElement::GetParameter(v44, 0x13u);
              unsigned int v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              float v57 = ausdk::AUElement::GetParameter(v45, 0x14u);
              uint64_t v46 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v46, 0x15u);
              float v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v47, 0x16u);
              float v48 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v48, 0x17u);
              float v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v49, 0x18u);
              float32x4_t v50 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v50, 0x19u);
              int v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v51, 0x1Au);
              float v52 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v52, 0x1Bu);
              int v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v53, 0x1Cu);
              float v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v54, 0x1Eu);
              float v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v55, 0x1Du);
              float v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUResidualEchoSuppressorV4 *)((char *)this + 32), 0);
              ausdk::AUElement::GetParameter(v56, 0x1Fu);
              (*(void (**)(AUResidualEchoSuppressorV4 *))(*(void *)this + 64))(this);
              __exp10f(Parameter * 0.1);
              __exp10f(v34 * 0.1);
              __exp10f(v36 * 0.1);
              __exp10f(v41 * 0.1);
              __exp10f(v60 * 0.1);
              __exp10f(v59 * 0.1);
              __exp10f(v58 * 0.1);
              __exp10f(v57 * 0.1);
              CResidualSuppressorV3::speex_preprocess_state_res_init((CResidualSuppressorV3 *)*((unsigned int *)this + 84), v9);
            }
            float v21 = (FILE **)MEMORY[0x1E4F143C8];
            float v22 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v23 = "_vpio_res: check 3 failed!\n";
          }
          else
          {
            float v21 = (FILE **)MEMORY[0x1E4F143C8];
            float v22 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v23 = "_vpio_res: check 2 failed!\n";
          }
        }
        else
        {
          float v21 = (FILE **)MEMORY[0x1E4F143C8];
          float v22 = (FILE *)*MEMORY[0x1E4F143C8];
          uint64_t v23 = "_vpio_res: check 1 failed!\n";
        }
        fwrite(v23, 0x1BuLL, 1uLL, v22);
        fflush(*v21);
      }
      return 4294956428;
    }
  }
  return 4294956428;
}

void AUResidualEchoSuppressorV4::~AUResidualEchoSuppressorV4(AUResidualEchoSuppressorV4 *this)
{
  *(void *)this = &unk_1F14BF110;
  AUResidualEchoSuppressorV4::Cleanup(this);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F14BF110;
  AUResidualEchoSuppressorV4::Cleanup(this);

  ausdk::AUBase::~AUBase(this);
}

void AUEcConvergenceOversight::FreeIntMatrixContUtil(AUEcConvergenceOversight *this, void **a2, int a3)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  if (a3 >= 1)
  {
    bzero(a2, 8 * a3);
  }
}

void AUEcConvergenceOversight::AllocIntMatrixContUtil(AUEcConvergenceOversight *this, int **a2, int a3, int a4)
{
  int v7 = 4 * a4 * a3;
  uint64_t v8 = (int *)malloc_type_malloc(v7, 0x2C8E6D5CuLL);
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v15 = std::bad_alloc::bad_alloc(exception);
  }
  int v10 = v8;
  bzero(v8, v7);
  *a2 = v10;
  if (a3 >= 2)
  {
    int v11 = &v10[a4];
    uint64_t v12 = a3 - 1;
    int v13 = a2 + 1;
    do
    {
      *v13++ = v11;
      v11 += a4;
      --v12;
    }
    while (v12);
  }
}

void AUEcConvergenceOversight::FreeFloatMatrixContUtil(AUEcConvergenceOversight *this, float **a2, int a3)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  if (a3 >= 1)
  {
    bzero(a2, 8 * a3);
  }
}

void AUEcConvergenceOversight::AllocFloatMatrixContUtil(AUEcConvergenceOversight *this, float **a2, int a3, int a4)
{
  int v7 = 4 * a4 * a3;
  uint64_t v8 = (float *)malloc_type_malloc(v7, 0x2C8E6D5CuLL);
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v15 = std::bad_alloc::bad_alloc(exception);
  }
  int v10 = v8;
  bzero(v8, v7);
  *a2 = v10;
  if (a3 >= 2)
  {
    int v11 = &v10[a4];
    uint64_t v12 = a3 - 1;
    int v13 = a2 + 1;
    do
    {
      *v13++ = v11;
      v11 += a4;
      --v12;
    }
    while (v12);
  }
}

BOOL AUEcConvergenceOversight::ValidFormat(AUEcConvergenceOversight *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5 = (int)a2;
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    BOOL result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  if (v5 == 1 && result) {
    return a4->mChannelsPerFrame - 1 < 6;
  }
  return result;
}

uint64_t AUEcConvergenceOversight::SupportedNumChannels(AUEcConvergenceOversight *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUEcConvergenceOversight::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 6;
}

BOOL AUEcConvergenceOversight::StreamFormatWritable(AUEcConvergenceOversight *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUEcConvergenceOversight::SupportsTail(AUEcConvergenceOversight *this)
{
  return 1;
}

double AUEcConvergenceOversight::GetTailTime(AUEcConvergenceOversight *this)
{
  return 0.0;
}

double AUEcConvergenceOversight::GetLatency(AUEcConvergenceOversight *this)
{
  return 0.0;
}

uint64_t AUEcConvergenceOversight::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    ++*((_DWORD *)this + 133);
  }
  return result;
}

uint64_t AUEcConvergenceOversight::GetParameterInfo(AUEcConvergenceOversight *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  buffer->unitName = 0;
  uint64_t result = 4294956418;
  if (!a2 && a3 <= 0x2A)
  {
    CFStringRef v6 = *(&off_1E6242D00 + a3);
    AudioUnitParameterUnit v7 = dword_1BB8D0878[a3];
    AudioUnitParameterValue v8 = flt_1BB8D0924[a3];
    AudioUnitParameterValue v9 = flt_1BB8D09D0[a3];
    AudioUnitParameterValue v10 = flt_1BB8D0A7C[a3];
    int v11 = dword_1BB8D0B28[a3];
    buffer->cfNameString = v6;
    buffer->AudioUnitParameterOptions flags = 1207959552;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    uint64_t result = 0;
    buffer->unit = v7;
    buffer->minCFDataRef Value = v8;
    buffer->maxCFDataRef Value = v9;
    buffer->defaultCFDataRef Value = v10;
    buffer->flags |= v11;
  }
  return result;
}

uint64_t AUEcConvergenceOversight::GetParameterList(AUEcConvergenceOversight *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    *((_OWORD *)a3 + 2) = xmmword_1BB879E40;
    *((_OWORD *)a3 + 3) = xmmword_1BB879E50;
    *((_OWORD *)a3 + 4) = xmmword_1BB879E60;
    *((_OWORD *)a3 + 5) = xmmword_1BB879E70;
    *((_OWORD *)a3 + 6) = xmmword_1BB87A9C0;
    *((_OWORD *)a3 + 7) = xmmword_1BB87A9E0;
    *((_OWORD *)a3 + 8) = xmmword_1BB87A9F0;
    *((_OWORD *)a3 + 9) = xmmword_1BB87B630;
    *((void *)a3 + 20) = 0x2900000028;
    a3[42] = 42;
  }
  uint64_t result = 0;
  *a4 = 43;
  return result;
}

uint64_t AUEcConvergenceOversight::Render(AUEcConvergenceOversight *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a4) {
    return 4294956422;
  }
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), 0);
  uint64_t v9 = ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 80), 0);
  if (!v9 || !*(_DWORD *)(v9 + 172)) {
    return 4294956420;
  }
  AudioUnitParameterValue v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (result) {
    return result;
  }
  uint64_t v12 = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0);
  uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
  uint64_t v14 = ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 80), 1u);
  if (v14 && *(_DWORD *)(v14 + 172))
  {
    unsigned int v15 = 1;
    int v16 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 1u);
    uint64_t result = ausdk::AUInputElement::PullInput(v16, a2, a3, 1, a4);
    if (result) {
      return result;
    }
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v17 = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v15);
  uint64_t v18 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v17 + 144));
  uint64_t v19 = ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 80), 2u);
  if (!v19 || !*(_DWORD *)(v19 + 172))
  {
    unsigned int v20 = 0;
LABEL_18:
    uint64_t v22 = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v20);
    ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v22 + 144));
    v24[0] = BufferList;
    v24[1] = v18;
    v24[2] = v18;
    uint64_t v23 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    return (*(uint64_t (**)(AUEcConvergenceOversight *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 3, v24, 1, &v23);
  }
  unsigned int v20 = 2;
  float v21 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 2u);
  uint64_t result = ausdk::AUInputElement::PullInput(v21, a2, a3, 2, a4);
  if (!result) {
    goto LABEL_18;
  }
  return result;
}

uint64_t AUEcConvergenceOversight::ProcessMultipleBufferLists(AUEcConvergenceOversight *this, unsigned int *a2, int a3, unsigned int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) != a3) {
    return 4294956422;
  }
  if (*((_DWORD *)this + 134) != *((_DWORD *)this + 133)) {
    AUEcConvergenceOversight::InitializeInternals(this);
  }
  if (*((unsigned char *)this + 540)) {
    return 0;
  }
  memset(v183, 0, sizeof(v183));
  memset(v182, 0, sizeof(v182));
  signed int mNumberBuffers = (*a5)->mNumberBuffers;
  if (mNumberBuffers >= (signed int)a5[1]->mNumberBuffers) {
    signed int mNumberBuffers = a5[1]->mNumberBuffers;
  }
  if (mNumberBuffers >= 6) {
    signed int mNumberBuffers = 6;
  }
  if (mNumberBuffers < *((_DWORD *)this + 137)) {
    return 1;
  }
  AUEcConvergenceOversight::SetRealTimeTunableThresholds(this);
  if (a6 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = a7[v13];
      if (v14->mNumberBuffers)
      {
        UInt32 v15 = 0;
        p_mData = &v14->mBuffers[0].mData;
        do
        {
          bzero(*p_mData, *((unsigned int *)p_mData - 1));
          ++v15;
          p_mData += 2;
        }
        while (v15 < v14->mNumberBuffers);
      }
      ++v13;
    }
    while (v13 != a6);
  }
  uint64_t v17 = *((unsigned int *)this + 137);
  if ((int)v17 >= 1)
  {
    uint64_t v18 = &a5[1]->mBuffers[0].mData;
    uint64_t v19 = &(*a5)->mBuffers[0].mData;
    unsigned int v20 = v182;
    float v21 = v183;
    do
    {
      uint64_t v22 = *v19;
      v19 += 2;
      *v21++ = v22;
      uint64_t v23 = *v18;
      v18 += 2;
      *v20++ = v23;
      --v17;
    }
    while (v17);
  }
  mData = a5[2]->mBuffers[0].mData;
  int v25 = *((_DWORD *)this + 475);
  if (v25 >= *((_DWORD *)this + 474))
  {
    int v25 = 0;
    *((_DWORD *)this + 475) = 0;
  }
  memcpy((void *)(*((void *)this + 240) + 4 * *((_DWORD *)this + 132) * v25), mData, 4 * *((int *)this + 132));
  ++*((_DWORD *)this + 475);
  uint64_t v26 = *((int *)this + 461);
  float v27 = (float *)*((int *)this + 462);
  uint64_t v28 = (DSPSplitComplex *)*((int *)this + 465);
  if (!v26) {
    AUEcConvergenceOversight::ResetEnergyValsAndFlags(this);
  }
  v180.realp = 0;
  v180.imagp = 0;
  v29.realp = (float *)*((void *)this + 91);
  v29.imagp = &v29.realp[*((int *)this + 132)];
  DSPSplitComplex v181 = v29;
  uint64_t v30 = (VPTimeFreqConverter *)*((void *)this + 77);
  float v175 = v28;
  if (v30)
  {
    VPTimeFreqConverter::Analyze(v30, (const float *)mData, &v181);
    DSPSplitComplex v29 = v181;
  }
  AUEcConvergenceOversight::Get_Band_Energies(this, (float *)this + 352, (float *)this + 322, v29, (int *)this + 187, (int *)this + 194, *((float *)this + 186), *((_DWORD *)this + 139));
  uint64_t v31 = *((int *)this + 132);
  uint64_t v32 = (float *)(*((void *)this + 91) + 4 * v31);
  v181.realp = (float *)*((void *)this + 91);
  v181.imagp = v32;
  float v33 = (float *)*((void *)this + 92);
  uint64_t __C = 0;
  v180.realp = v33;
  v180.imagp = &v33[v31];
  int64_t v34 = *((int *)this + 137);
  if ((int)v34 > 0)
  {
    uint64_t v173 = v27;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 365;
    do
    {
      uint64_t v38 = *(VPTimeFreqConverter **)((char *)this + v35 + 624);
      if (v38) {
        VPTimeFreqConverter::Analyze(v38, *(const float **)((char *)v183 + v35), &v181);
      }
      uint64_t v39 = *(VPTimeFreqConverter **)((char *)this + v35 + 672);
      if (v39) {
        VPTimeFreqConverter::Analyze(v39, *(const float **)((char *)v182 + v35), &v180);
      }
      AUEcConvergenceOversight::Get_Band_Energies(this, (float *)((char *)this + v36 + 1412), *(float **)((char *)this + v35 + 1312), v181, (int *)this + 187, (int *)this + 194, *((float *)this + 186), *((_DWORD *)this + 139));
      AUEcConvergenceOversight::Get_Band_Energies(this, (float *)((char *)this + v36 + 1436), *(float **)((char *)this + v35 + 1360), v180, (int *)this + 187, (int *)this + 194, *((float *)this + 186), *((_DWORD *)this + 139));
      vDSP_vsub(*((const float **)this + 92), 1, *((const float **)this + 91), 1, *((float **)this + 91), 1, *((int *)this + 180));
      vDSP_svesq(&v181.realp[*((int *)this + 187)], 1, (float *)&__C + 1, *((int *)this + 202));
      vDSP_svesq(&v181.imagp[*((int *)this + 187)], 1, (float *)&__C, *((int *)this + 202));
      *((float *)this + v37) = log10f(*((float *)this + 466)+ (float)((float)(*((float *)&__C + 1) + *(float *)&__C) * *((float *)this + 186)))* 10.0;
      int64_t v40 = v37 - 364;
      ++v37;
      int64_t v34 = *((int *)this + 137);
      v36 += 4;
      v35 += 8;
    }
    while (v40 < v34);
    float v27 = v173;
  }
  float v41 = *((float *)this + 352);
  float v42 = *((float *)this + 227);
  vDSP_minv((const float *)this + 353, 1, (float *)&__C + 1, v34);
  *((float *)&__C + 1) = *((float *)&__C + 1) - *((float *)this + 352);
  float v43 = *((float *)&__C + 1);
  float v44 = *((float *)this + 229);
  vDSP_maxv((const float *)this + 353, 1, (float *)&__C + 1, *((int *)this + 137));
  BOOL v45 = (float)(*((float *)&__C + 1) - *((float *)this + 352)) > *((float *)this + 230);
  if (v43 < v44) {
    BOOL v45 = 1;
  }
  *((float *)&__C + 1) = *((float *)&__C + 1) - *((float *)this + 352);
  if (v41 < v42) {
    BOOL v45 = 1;
  }
  *((unsigned char *)this + v26 + 1484) = v45;
  *((unsigned char *)this + 1838) = 0;
  uint64_t v46 = *((unsigned int *)this + 148);
  if ((int)v46 >= 1)
  {
    float v47 = (unsigned __int8 *)this + 1484;
    while (1)
    {
      int v48 = *v47++;
      if (v48 == 1) {
        break;
      }
      if (!--v46) {
        goto LABEL_45;
      }
    }
    *((unsigned char *)this + 1838) = 1;
  }
LABEL_45:
  vDSP_maxv((const float *)this + 365, 1, (float *)&__C + 1, *((int *)this + 137));
  vDSP_sve((const float *)this + 365, 1, (float *)&__C, *((int *)this + 137));
  uint64_t v49 = *((unsigned int *)this + 137);
  float v50 = *(float *)&__C / (float)(int)v49;
  *(float *)&uint64_t __C = v50;
  if (*((float *)&__C + 1) > (float)(v50 + 6.0))
  {
    float v50 = v50 + 3.0;
    *(float *)&uint64_t __C = v50;
  }
  *((float *)this + v26 + 389) = v50 - *((float *)this + 352);
  int v51 = *((_DWORD *)this + 148);
  if (*((_DWORD *)this + 461) % v51 != v51 - 1)
  {
    int v61 = *((_DWORD *)this + 151);
    goto LABEL_145;
  }
  unint64_t v52 = *((unsigned int *)this + 139);
  if ((int)v52 < 1)
  {
    BOOL v59 = 1;
    int v60 = 1;
  }
  else
  {
    uint64_t v53 = 0;
    float v54 = 1.0 / (float)v51;
    do
    {
      *((float *)this + v53 + 322) = log10f(*((float *)this + 466) + (float)(v54 * *((float *)this + v53 + 322))) * 10.0;
      if ((int)v49 >= 1)
      {
        float v55 = (uint64_t *)((char *)this + 1360);
        uint64_t v56 = v49;
        do
        {
          uint64_t v57 = *(v55 - 6);
          *(float *)(v57 + 4 * v53) = log10f(*((float *)this + 466) + (float)(v54 * *(float *)(v57 + 4 * v53))) * 10.0;
          uint64_t v58 = *v55++;
          *(float *)(v58 + 4 * v53) = log10f(*((float *)this + 466) + (float)(v54 * *(float *)(v58 + 4 * v53))) * 10.0;
          --v56;
        }
        while (v56);
      }
      ++v53;
    }
    while (v53 != v52);
    if (*((float *)this + 322) >= *((float *)this + 203))
    {
      unint64_t v62 = 0;
      while (v52 - 1 != v62)
      {
        uint64_t v63 = (float *)((char *)this + 4 * v62++);
        if (v63[323] < v63[204])
        {
          int v60 = 0;
          goto LABEL_63;
        }
      }
      int v60 = 1;
      unint64_t v62 = v52;
LABEL_63:
      BOOL v59 = v62 >= v52;
    }
    else
    {
      BOOL v59 = 0;
      int v60 = 0;
    }
  }
  *((_DWORD *)this + (void)v27 + 235) = v60;
  if (*((int *)this + 139) < 1) {
    goto LABEL_95;
  }
  uint64_t v64 = 0;
  int v65 = 0;
  do
  {
    uint64_t v66 = *((unsigned int *)this + 137);
    if ((int)v66 <= 0)
    {
      *(_DWORD *)(*((void *)this + v64 + 143) + 4 * (void)v27) = 1;
LABEL_74:
      int v65 = 1;
      goto LABEL_75;
    }
    int v67 = 1;
    unsigned int v68 = (uint64_t *)((char *)this + 1312);
    do
    {
      uint64_t v69 = *v68++;
      if (*(float *)(v69 + 4 * v64) < *((float *)this + v64 + 209)) {
        int v67 = 0;
      }
      --v66;
    }
    while (v66);
    *(_DWORD *)(*((void *)this + v64 + 143) + 4 * (void)v27) = v67;
    if (v67 == 1) {
      goto LABEL_74;
    }
LABEL_75:
    ++v64;
    uint64_t v70 = *((int *)this + 139);
  }
  while (v64 < v70);
  if ((int)v70 >= 1)
  {
    uint64_t v71 = 0;
    int v72 = 0;
    do
    {
      uint64_t v73 = *((unsigned int *)this + 137);
      if ((int)v73 < 1)
      {
        int v79 = 1;
        int v77 = 1;
      }
      else
      {
        unint64_t v74 = (float *)((char *)this + 4 * v71);
        float v75 = v74[215];
        float v76 = v74[221];
        int v77 = 1;
        int v78 = (uint64_t *)((char *)this + 1312);
        int v79 = 1;
        do
        {
          float v80 = *(float *)(v78[6] + 4 * v71);
          uint64_t v81 = *v78++;
          float v82 = v80 - *(float *)(v81 + 4 * v71);
          *((float *)&__C + 1) = v82;
          if (v82 >= v75) {
            int v79 = 0;
          }
          if (v82 >= v76) {
            int v77 = 0;
          }
          --v73;
        }
        while (v73);
      }
      int v83 = (char *)this + 8 * v71;
      *(_DWORD *)(*((void *)v83 + 149) + 4 * (void)v27) = v79;
      *(_DWORD *)(*((void *)v83 + 155) + 4 * (void)v175) = v77;
      if (v79 == 1) {
        int v72 = 1;
      }
      ++v71;
    }
    while (v71 < *((int *)this + 139));
    char v84 = !v59;
    if (v72 != 1) {
      char v84 = 1;
    }
    if ((v84 & 1) == 0 && v65 == 1)
    {
      vDSP_minv((const float *)this + 389, 1, (float *)&__C + 1, *((int *)this + 148));
      uint64_t v85 = *((int *)this + 464);
      *((_DWORD *)this + v85 + 409) = HIDWORD(__C);
      goto LABEL_96;
    }
  }
LABEL_95:
  LODWORD(v85) = *((_DWORD *)this + 464);
LABEL_96:
  vDSP_Length v86 = *((int *)this + 152);
  *((_DWORD *)this + 464) = ((int)v85 + 1) % (int)v86;
  vDSP_sve((const float *)this + 409, 1, (float *)&__C + 1, v86);
  *((float *)this + 460) = *((float *)&__C + 1) / (float)*((int *)this + 152);
  uint64_t v87 = *((unsigned int *)this + 149);
  float v88 = 100.0 / (float)(int)v87;
  uint64_t v89 = *((unsigned int *)this + 150);
  *(float *)&uint64_t __C = 100.0 / (float)(int)v89;
  *((float *)&__C + 1) = v88;
  if ((int)v87 < 1)
  {
    int v90 = 0;
  }
  else
  {
    int v90 = 0;
    unsigned int v91 = (int *)((char *)this + 940);
    uint64_t v92 = v87;
    do
    {
      int v93 = *v91++;
      v90 += v93;
      --v92;
    }
    while (v92);
  }
  float v94 = v88 * (float)v90;
  uint64_t v95 = *((unsigned int *)this + 139);
  if ((int)v95 < 1)
  {
    int v109 = (char *)this + 1836;
    *((unsigned char *)this + 1836) = 1;
    if (v94 >= *((float *)this + 231))
    {
      uint64_t v110 = (char *)this + 1837;
      *((unsigned char *)this + 1837) = 1;
LABEL_126:
      __int16 v178 = 257;
      int v177 = 16843009;
      goto LABEL_127;
    }
LABEL_125:
    *((_WORD *)this + 918) = 0;
    uint64_t v110 = (char *)this + 1837;
    goto LABEL_126;
  }
  for (uint64_t i = 0; i != v95; ++i)
  {
    if ((int)v87 < 1)
    {
      int v98 = 0;
      int v97 = 0;
    }
    else
    {
      int v97 = 0;
      int v98 = 0;
      unint64_t v99 = (char *)this + 8 * i;
      BOOL v100 = (int *)*((void *)v99 + 143);
      uint64_t v101 = (int *)*((void *)v99 + 149);
      uint64_t v102 = v87;
      do
      {
        int v103 = *v100++;
        v98 += v103;
        int v104 = *v101++;
        v97 += v104;
        --v102;
      }
      while (v102);
    }
    if ((int)v89 < 1)
    {
      int v105 = 0;
    }
    else
    {
      int v105 = 0;
      unint64_t v106 = (int *)*((void *)this + i + 155);
      uint64_t v107 = v89;
      do
      {
        int v108 = *v106++;
        v105 += v108;
        --v107;
      }
      while (v107);
    }
    __B[i] = v88 * (float)v98;
    v185[i] = v88 * (float)v97;
    v184[i] = (float)(100.0 / (float)(int)v89) * (float)v105;
  }
  int v109 = (char *)this + 1836;
  *((unsigned char *)this + 1836) = 1;
  if (v94 < *((float *)this + 231)) {
    goto LABEL_125;
  }
  uint64_t v110 = (char *)this + 1837;
  *((unsigned char *)this + 1837) = 1;
  __int16 v178 = 257;
  int v177 = 16843009;
  float v111 = *((float *)this + 232);
  float v112 = &v177;
  float v113 = v184;
  uint64_t v114 = v185;
  unint64_t v115 = __B;
  while (*v115 >= v111)
  {
    float v116 = *((float *)this + 233);
    if (*v114 < v116) {
      *int v109 = 0;
    }
    if (*v113 < v116) {
      *(unsigned char *)float v112 = 0;
    }
    float v112 = (int *)((char *)v112 + 1);
    ++v113;
    ++v114;
    ++v115;
    if (!--v95) {
      goto LABEL_127;
    }
  }
  *int v109 = 0;
  *uint64_t v110 = 0;
LABEL_127:
  int v117 = *((_DWORD *)this + 141);
  int v118 = *((_DWORD *)this + 142);
  if (v117 <= v118)
  {
    int v119 = v117 - 1;
    int v120 = v118 - v117 + 1;
    unsigned int v121 = (char *)&v177 + v119;
    do
    {
      if (!*v121++) {
        *uint64_t v110 = 0;
      }
      --v120;
    }
    while (v120);
  }
  int v61 = *((_DWORD *)this + 151);
  if (v61 >= 1)
  {
    *((unsigned char *)this + *((int *)this + 463) + 1504) = *((unsigned char *)this + 1838);
    int v61 = *((_DWORD *)this + 151);
    if (*((unsigned char *)this + 560) == 1 && v61 >= 1)
    {
      std::string v124 = (unsigned __int8 *)this + 1504;
      uint64_t v125 = *((unsigned int *)this + 151);
      while (1)
      {
        int v126 = *v124++;
        if (v126 == 1) {
          break;
        }
        if (!--v125) {
          goto LABEL_143;
        }
      }
      *int v109 = 0;
      *uint64_t v110 = 0;
    }
LABEL_143:
    *((_DWORD *)this + 463) = (*((_DWORD *)this + 463) + 1) % v61;
    LODWORD(v89) = *((_DWORD *)this + 150);
    LODWORD(v87) = *((_DWORD *)this + 149);
  }
  *((_DWORD *)this + 465) = (*((_DWORD *)this + 465) + 1) % (int)v89;
  *((_DWORD *)this + 462) = (*((_DWORD *)this + 462) + 1) % (int)v87;
LABEL_145:
  if (v61 >= 1 && *((unsigned char *)this + 560) == 1 && *((unsigned char *)this + 1838)) {
    *((_WORD *)this + 918) = 0;
  }
  if (*((unsigned char *)this + 1868))
  {
    if (*((_DWORD *)this + 475) == *((_DWORD *)this + 474))
    {
      __B[0] = 0.0;
      *((unsigned char *)this + 1869) = 0;
      MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUEcConvergenceOversight *)((char *)this + 1872), *((DSPComplex **)this + 240), (DSPSplitComplex *)this + 119, 1.0);
      vDSP_vsq((const float *)(*((void *)this + 238) + 4 * *((int *)this + 488)), 1, *((float **)this + 241), 1, *((int *)this + 493));
      vDSP_vsq((const float *)(*((void *)this + 239) + 4 * *((int *)this + 488)), 1, *((float **)this + 242), 1, *((int *)this + 493));
      vDSP_vadd(*((const float **)this + 241), 1, *((const float **)this + 242), 1, *((float **)this + 241), 1, *((int *)this + 493));
      vDSP_sve(*((const float **)this + 241), 1, (float *)&__C + 1, *((int *)this + 493));
      vDSP_Length v127 = *((int *)this + 493);
      *((float *)&__C + 1) = (float)((float)(*((float *)&__C + 1) * 0.01) / (float)(int)v127) + 1.0e-15;
      vDSP_vsadd(*((const float **)this + 241), 1, (const float *)&__C + 1, *((float **)this + 241), 1, v127);
      HIDWORD(__C) = *((_DWORD *)this + 494);
      vDSP_vsmul(*((const float **)this + 243), 1, (const float *)&__C + 1, *((float **)this + 243), 1, *((int *)this + 493));
      *((float *)&__C + 1) = 1.0 - *((float *)this + 494);
      vDSP_vsmul(*((const float **)this + 241), 1, (const float *)&__C + 1, *((float **)this + 241), 1, *((int *)this + 493));
      vDSP_vadd(*((const float **)this + 241), 1, *((const float **)this + 243), 1, *((float **)this + 243), 1, *((int *)this + 493));
      vDSP_sve(*((const float **)this + 243), 1, (float *)&__C + 1, *((int *)this + 491));
      vDSP_sve((const float *)(*((void *)this + 243) + 4 * *((int *)this + 491)), 1, __B, *((int *)this + 492));
      float v128 = __B[0];
      float v129 = __B[0] + *((float *)&__C + 1);
      vDSP_Length v130 = *((int *)this + 491);
      float v131 = log10f(*((float *)&__C + 1) / (float)(int)v130) * 10.0;
      float v132 = log10f(v128 / (float)*((int *)this + 492)) * 10.0;
      uint64_t v133 = *((unsigned int *)this + 493);
      float v134 = log10f(v129 / (float)(int)v133) * 10.0;
      float v135 = (const float *)*((void *)this + 241);
      if ((int)v133 >= 1)
      {
        float v136 = (float *)*((void *)this + 243);
        unsigned int v137 = (float *)*((void *)this + 241);
        do
        {
          float v138 = *v136++;
          *v137++ = log10f(v138) * 10.0;
          --v133;
        }
        while (v133);
      }
      vDSP_sve(v135, 1, (float *)&__C + 1, v130);
      vDSP_sve((const float *)(*((void *)this + 241) + 4 * *((int *)this + 491)), 1, __B, *((int *)this + 492));
      float v139 = v132 - (float)(__B[0] / (float)*((int *)this + 492));
      if ((float)(v131 - (float)(*((float *)&__C + 1) / (float)*((int *)this + 491))) >= 0.0) {
        float v140 = v131 - (float)(*((float *)&__C + 1) / (float)*((int *)this + 491));
      }
      else {
        float v140 = 0.0;
      }
      if (v139 < 0.0) {
        float v139 = 0.0;
      }
      if ((float)(v134 - (float)((float)(__B[0] + *((float *)&__C + 1)) / (float)*((int *)this + 493))) >= 0.0) {
        float v141 = v134 - (float)((float)(__B[0] + *((float *)&__C + 1)) / (float)*((int *)this + 493));
      }
      else {
        float v141 = 0.0;
      }
      if (v140 <= v141) {
        float v142 = v141;
      }
      else {
        float v142 = v140;
      }
      if (v139 <= v142) {
        float v139 = v142;
      }
      *((float *)this + 498) = v139;
      *((float *)this + 499) = v141;
      if (v139 > *((float *)this + 495) && v141 > *((float *)this + 497) || v139 > *((float *)this + 496)) {
        *((unsigned char *)this + 1869) = 1;
      }
    }
    if (*((unsigned char *)this + 1869)) {
      *((_WORD *)this + 918) = 0;
    }
  }
  *((_DWORD *)this + 501) = 0;
  if (*((unsigned char *)this + 2000))
  {
    unsigned int v143 = (float *)*((void *)this + 269);
    float v144 = (float *)*((void *)this + 270);
    __B[0] = 1.0 - *((float *)this + 554);
    uint64_t v145 = *((int *)this + 504);
    v185[0] = 2.2204e-16;
    LODWORD(v146) = *((_DWORD *)this + 137);
    if ((int)v146 < 1)
    {
      float v155 = 0.0;
    }
    else
    {
      uint64_t v147 = 0;
      uint64_t v148 = 0;
      uint64_t v174 = (float *)((char *)this + 2216);
      vDSP_Length v176 = (DSPSplitComplex *)((char *)this + 2152);
      float v172 = (AUEcConvergenceOversight *)((char *)this + 2248);
      uint64_t __len = 4 * v145;
      float v171 = (DSPSplitComplex *)((char *)this + 2120);
      unsigned int v149 = (void **)((char *)this + 2024);
      float v150 = (char *)this + 2220;
      do
      {
        int v151 = *((_DWORD *)this + 504);
        if (v151 >= 1)
        {
          memmove(*v149, (char *)*v149 + 4 * *((int *)this + 132), __len);
          memmove(v149[6], (char *)v149[6] + 4 * *((int *)this + 132), __len);
          int v151 = *((_DWORD *)this + 504);
        }
        vDSP_Length v152 = (float *)((char *)*v149 + 4 * v151);
        float v153 = (const void *)*((void *)v183 + v148);
        memcpy(v149[6], v153, *((int *)this + 132));
        vDSP_vsub(*((const float **)v182 + v148), 1, (const float *)v153, 1, v152, 1, *((int *)this + 132));
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v172, (DSPComplex *)v149[6], (DSPSplitComplex *)((char *)this + 2136), 1.0);
        MultiRadixRealFFT::RealOutOfPlaceForwardTransform(v172, (DSPComplex *)*v149, v171, 1.0);
        vDSP_zvmags((const DSPSplitComplex *)((char *)this + 2136), 1, *((float **)this + 273), 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 273), 1, __B, v143, 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 274), 1, v174, v144, 1, *((int *)this + 544));
        vDSP_vadd(v143, 1, v144, 1, *((float **)this + 274), 1, *((int *)this + 544));
        vDSP_zvcmul((const DSPSplitComplex *)((char *)this + 2136), 1, v171, 1, v176, 1, *((int *)this + 544));
        vDSP_zvabs(v176, 1, *((float **)this + 275), 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 275), 1, __B, v143, 1, *((int *)this + 544));
        vDSP_vsmul(*((const float **)this + 276), 1, v174, v144, 1, *((int *)this + 544));
        vDSP_vadd(v143, 1, v144, 1, *((float **)this + 276), 1, *((int *)this + 544));
        vDSP_vsadd(*((const float **)this + 274), 1, v185, v143, 1, *((int *)this + 544));
        vDSP_vdiv(v143, 1, *((const float **)this + 276), 1, v144, 1, *((int *)this + 544));
        vDSP_meanv(&v144[*((int *)this + 542)], 1, (float *)&v150[v147], *((_DWORD *)this + 543) - *((_DWORD *)this + 542) + 1);
        float v154 = fmaxf(fminf(*(float *)&v150[4 * v148], 1.0), 0.0);
        *(float *)&v150[4 * v148] = v154;
        float v155 = *((float *)this + 501) + v154;
        *((float *)this + 501) = v155;
        ++v148;
        uint64_t v146 = *((int *)this + 137);
        ++v149;
        v147 += 4;
      }
      while (v148 < v146);
    }
    *((float *)this + 501) = v155 / (float)(int)v146;
  }
  *((_DWORD *)this + 461) = (*((_DWORD *)this + 461) + 1) % *((_DWORD *)this + 148);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  LOBYTE(v157) = *((unsigned char *)this + 1836);
  ausdk::AUElement::SetParameter(Element, 0, (float)v157, 0);
  float v158 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  LOBYTE(v159) = *((unsigned char *)this + 1837);
  ausdk::AUElement::SetParameter(v158, 1u, (float)v159, 0);
  float v160 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  LOBYTE(v161) = *((unsigned char *)this + 1838);
  ausdk::AUElement::SetParameter(v160, 2u, (float)v161, 0);
  float v162 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v162, 3u, *((float *)this + 460), 0);
  float v163 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v163, 0x25u, *((float *)this + 498), 0);
  float v164 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v164, 0x26u, *((float *)this + 499), 0);
  if (*((unsigned char *)this + 1836) == 1 && !*((unsigned char *)this + 612))
  {
    float v165 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
    LOBYTE(v166) = *((unsigned char *)this + 1836);
    ausdk::AUElement::SetParameter(v165, 0x27u, (float)v166, 0);
    *((unsigned char *)this + 612) = 1;
  }
  if (*((unsigned char *)this + 1837) == 1 && !*((unsigned char *)this + 613))
  {
    uint64_t v167 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
    LOBYTE(v168) = *((unsigned char *)this + 1837);
    ausdk::AUElement::SetParameter(v167, 0x28u, (float)v168, 0);
    *((unsigned char *)this + 613) = 1;
  }
  float v169 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v169, 0x2Au, *((float *)this + 501), 0);
  return 0;
}

void AUEcConvergenceOversight::InitializeInternals(AUEcConvergenceOversight *this)
{
  AUEcConvergenceOversight::ClearAllocations(this);
  int v2 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 132) = v2;
  *((_DWORD *)this + 180) = 2 * v2;
  *((_DWORD *)this + 134) = *((_DWORD *)this + 133);
  float v3 = *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 80);
  *((float *)this + 136) = v3;
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  *((unsigned char *)this + 560) = (int)ausdk::AUElement::GetParameter(Element, 4u);
  int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  int v6 = 6;
  int Parameter = (int)ausdk::AUElement::GetParameter(v5, 6u);
  *((_DWORD *)this + 139) = Parameter;
  if (Parameter <= 6)
  {
    if (Parameter > 0)
    {
LABEL_5:
      AudioUnitParameterValue v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
      float v9 = ausdk::AUElement::GetParameter(v8, 7u);
      *((float *)this + 200) = v9;
      float v10 = 0.0;
      if (v9 < 0.0 || (float v10 = 20.0, v9 > (float)((float)(*((float *)this + 136) + -100.0) * 0.5))) {
        *((float *)this + 200) = v10;
      }
      int v11 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
      float v12 = ausdk::AUElement::GetParameter(v11, 8u);
      *((float *)this + 201) = v12;
      float v13 = *((float *)this + 136);
      float v14 = v13 * 0.5 + -50.0;
      if (v12 >= 0.0)
      {
        float v15 = *((float *)this + 200);
        if (v15 <= v14) {
          float v14 = v12;
        }
        else {
          *((float *)this + 201) = v14;
        }
      }
      else
      {
        *((float *)this + 201) = v14;
        float v15 = *((float *)this + 200);
      }
      float v16 = v14 + -100.0;
      if (v15 > (float)(v14 + -100.0) || (float v16 = v15, v15 < 0.0))
      {
        float v15 = 0.0;
        if (v16 >= 0.0) {
          float v15 = v16;
        }
        *((float *)this + 200) = v15;
      }
      float v17 = v13 / (float)*((int *)this + 180);
      int v18 = vcvtps_s32_f32(v15 / v17);
      signed int v19 = vcvtms_s32_f32(v14 / v17);
      signed int v20 = *((_DWORD *)this + 132);
      if (v20 <= v19) {
        signed int v21 = v20 - 1;
      }
      else {
        signed int v21 = v19;
      }
      uint64_t v22 = *((unsigned int *)this + 139);
      if (v21 - 2 * (int)v22 < v18) {
        int v18 = v21 - 2 * v22;
      }
      int v23 = v18 & ~(v18 >> 31);
      *((_DWORD *)this + 187) = v23;
      if ((int)v22 >= 1)
      {
        uint64_t v24 = 0;
        int v25 = v23;
        do
        {
          uint64_t v26 = v24 + 1;
          signed int v27 = v23 + llroundf((float)((float)(v21 - v23) / (float)(int)v22) * (float)(v24 + 1));
          if (v27 <= v25) {
            ++v25;
          }
          else {
            int v25 = v27;
          }
          if (v25 >= v20) {
            int v25 = v20 - 1;
          }
          *((_DWORD *)this + v24++ + 188) = v25;
        }
        while (v22 != v26);
        uint64_t v28 = (int *)((char *)this + 776);
        uint64_t v29 = v22;
        int v30 = v23;
        do
        {
          int v31 = *(v28 - 6);
          int v32 = v31 - v30;
          if (v32 <= 1) {
            int v32 = 1;
          }
          *v28++ = v32;
          int v30 = v31;
          --v29;
        }
        while (v29);
      }
      *((_DWORD *)this + 202) = *((_DWORD *)this + (int)v22 + 187) - v23 + 1;
      float v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
      int v34 = (int)ausdk::AUElement::GetParameter(v33, 0x1Au);
      *((_DWORD *)this + 141) = v34;
      if (v34 < 1)
      {
        int v35 = 1;
      }
      else
      {
        int v35 = *((_DWORD *)this + 139);
        if (v35 >= v34)
        {
LABEL_40:
          uint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
          int v37 = (int)ausdk::AUElement::GetParameter(v36, 0x1Bu);
          *((_DWORD *)this + 142) = v37;
          if (v37 < 1)
          {
            int v38 = 1;
          }
          else
          {
            int v38 = *((_DWORD *)this + 139);
            if (v38 >= v37)
            {
LABEL_45:
              int v39 = *((_DWORD *)this + 141);
              if (v39 > v37) {
                *((_DWORD *)this + 142) = v39;
              }
              int64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
              int v41 = (int)ausdk::AUElement::GetParameter(v40, 5u);
              if (*((_DWORD *)this + 138) < v41) {
                int v41 = *((_DWORD *)this + 138);
              }
              *((_DWORD *)this + 137) = v41;
              if (v41 <= 6)
              {
                if (v41 > 0) {
                  goto LABEL_54;
                }
                int v42 = 1;
              }
              else
              {
                int v42 = 6;
              }
              *((_DWORD *)this + 137) = v42;
LABEL_54:
              VPTimeFreqConverter_Create();
            }
          }
          *((_DWORD *)this + 142) = v38;
          int v37 = v38;
          goto LABEL_45;
        }
      }
      *((_DWORD *)this + 141) = v35;
      goto LABEL_40;
    }
    int v6 = 1;
  }
  *((_DWORD *)this + 139) = v6;
  goto LABEL_5;
}

void AUEcConvergenceOversight::SetRealTimeTunableThresholds(AUEcConvergenceOversight *this)
{
  int v2 = (AUEcConvergenceOversight *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, 0xBu);
  int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v6 = ausdk::AUElement::GetParameter(v5, 0xCu);
  AudioUnitParameterUnit v7 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v8 = ausdk::AUElement::GetParameter(v7, 9u);
  float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v10 = ausdk::AUElement::GetParameter(v9, 0xAu);
  for (uint64_t i = 0; i != 24; i += 4)
  {
    float v12 = (float *)((char *)this + i + 812);
    float *v12 = Parameter;
    v12[6] = v6;
    v12[12] = v8;
    v12[18] = v10;
  }
  float v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 231) = ausdk::AUElement::GetParameter(v13, 0x12u);
  float v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 232) = ausdk::AUElement::GetParameter(v14, 0x13u);
  float v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 233) = ausdk::AUElement::GetParameter(v15, 0x14u);
  float v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 227) = ausdk::AUElement::GetParameter(v16, 0x15u);
  float v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 228) = ausdk::AUElement::GetParameter(v17, 0x16u);
  int v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 229) = ausdk::AUElement::GetParameter(v18, 0x17u);
  signed int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 230) = ausdk::AUElement::GetParameter(v19, 0x18u);
  signed int v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 234) = ausdk::AUElement::GetParameter(v20, 0x19u);
  signed int v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 1868) = ausdk::AUElement::GetParameter(v21, 0x1Cu) != 0.0;
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v23 = ausdk::AUElement::GetParameter(v22, 0x21u);
  if (v23 == 0.0) {
    float v23 = 0.01;
  }
  if (v23 >= 1.0) {
    float v23 = 1.0;
  }
  *((float *)this + 494) = v23;
  uint64_t v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 496) = ausdk::AUElement::GetParameter(v24, 0x22u);
  int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 495) = ausdk::AUElement::GetParameter(v25, 0x23u);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((float *)this + 497) = ausdk::AUElement::GetParameter(v26, 0x24u);
  signed int v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 2000) = ausdk::AUElement::GetParameter(v27, 0x29u) != 0.0;
}

double AUEcConvergenceOversight::ResetEnergyValsAndFlags(AUEcConvergenceOversight *this)
{
  float __A = 0.0;
  vDSP_vfill(&__A, (float *)this + 322, 1, 6uLL);
  for (uint64_t i = 0; i != 48; i += 8)
  {
    vDSP_vfill(&__A, *(float **)((char *)this + i + 1312), 1, 6uLL);
    vDSP_vfill(&__A, *(float **)((char *)this + i + 1360), 1, 6uLL);
  }
  *((_DWORD *)this + 352) = 0;
  vDSP_vfill(&__A, (float *)this + 353, 1, 6uLL);
  vDSP_vfill(&__A, (float *)this + 359, 1, 6uLL);
  vDSP_vfill(&__A, (float *)this + 365, 1, 6uLL);
  *((_DWORD *)this + 375) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 1484) = 0u;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1588) = 0u;
  *(_OWORD *)((char *)this + 1604) = 0u;
  *(_OWORD *)((char *)this + 1620) = 0u;
  return result;
}

float AUEcConvergenceOversight::Get_Band_Energies(AUEcConvergenceOversight *this, float *a2, float *a3, DSPSplitComplex a4, int *a5, int *a6, float a7, int a8)
{
  if (a8 < 1)
  {
    float v17 = 0.0;
  }
  else
  {
    imagp = a4.imagp;
    realp = a4.realp;
    uint64_t __C = 0;
    uint64_t v16 = a8;
    float v17 = 0.0;
    do
    {
      vDSP_svesq(&realp[*a5], 1, (float *)&__C + 1, *a6);
      uint64_t v18 = *a5++;
      signed int v19 = &imagp[v18];
      vDSP_Length v20 = *a6++;
      vDSP_svesq(v19, 1, (float *)&__C, v20);
      float v21 = (float)(*(float *)&__C + *((float *)&__C + 1)) * a7;
      *((float *)&__C + 1) = v21;
      *a3 = *a3 + v21;
      ++a3;
      float v17 = v17 + v21;
      --v16;
    }
    while (v16);
  }
  float result = log10f(v17 + *((float *)this + 466)) * 10.0;
  *a2 = result;
  return result;
}

void AUEcConvergenceOversight::ClearAllocations(AUEcConvergenceOversight *this)
{
  int v2 = (VPTimeFreqConverter *)*((void *)this + 77);
  if (v2)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v2);
    MEMORY[0x1C185D370]();
    *((void *)this + 77) = 0;
  }
  for (uint64_t i = 0; i != 48; i += 8)
  {
    float v4 = (char *)this + i;
    int v5 = *(VPTimeFreqConverter **)((char *)this + i + 624);
    if (v5)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v5);
      MEMORY[0x1C185D370]();
      *((void *)v4 + 78) = 0;
    }
    float v6 = (VPTimeFreqConverter *)*((void *)v4 + 84);
    if (v6)
    {
      VPTimeFreqConverter::~VPTimeFreqConverter(v6);
      MEMORY[0x1C185D370]();
      *((void *)v4 + 84) = 0;
    }
  }
  AudioUnitParameterUnit v7 = (void *)*((void *)this + 91);
  if (v7)
  {
    free(v7);
    *((void *)this + 91) = 0;
  }
  float v8 = (void *)*((void *)this + 92);
  if (v8)
  {
    free(v8);
    *((void *)this + 92) = 0;
  }
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(void *)this + 584))(this, (char *)this + 1312, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(void *)this + 584))(this, (char *)this + 1360, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(void *)this + 600))(this, (char *)this + 1144, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(void *)this + 600))(this, (char *)this + 1192, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(void *)this + 600))(this, (char *)this + 1240, 6);
  float v9 = (void *)*((void *)this + 240);
  if (v9)
  {
    free(v9);
    *((void *)this + 240) = 0;
  }
  float v10 = (void *)*((void *)this + 241);
  if (v10)
  {
    free(v10);
    *((void *)this + 241) = 0;
  }
  int v11 = (void *)*((void *)this + 242);
  if (v11)
  {
    free(v11);
    *((void *)this + 242) = 0;
  }
  float v12 = (void *)*((void *)this + 243);
  if (v12)
  {
    free(v12);
    *((void *)this + 243) = 0;
  }
  float v13 = (void *)*((void *)this + 238);
  if (v13)
  {
    free(v13);
    *((void *)this + 238) = 0;
  }
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(void *)this + 584))(this, (char *)this + 2024, 6);
  (*(void (**)(AUEcConvergenceOversight *, char *, uint64_t))(*(void *)this + 584))(this, (char *)this + 2072, 6);
  float v14 = (void *)*((void *)this + 265);
  if (v14)
  {
    free(v14);
    *((void *)this + 265) = 0;
  }
  float v15 = (void *)*((void *)this + 267);
  if (v15)
  {
    free(v15);
    *((void *)this + 267) = 0;
  }
  uint64_t v16 = (void *)*((void *)this + 269);
  if (v16)
  {
    free(v16);
    *((void *)this + 269) = 0;
  }
  float v17 = (void *)*((void *)this + 273);
  if (v17)
  {
    free(v17);
    *((void *)this + 273) = 0;
  }
  uint64_t v18 = (void *)*((void *)this + 274);
  if (v18)
  {
    free(v18);
    *((void *)this + 274) = 0;
  }
  signed int v19 = (void *)*((void *)this + 275);
  if (v19)
  {
    free(v19);
    *((void *)this + 275) = 0;
  }
  vDSP_Length v20 = (void *)*((void *)this + 276);
  if (v20)
  {
    free(v20);
    *((void *)this + 276) = 0;
  }
}

uint64_t AUEcConvergenceOversight::Reset(AUEcConvergenceOversight *this)
{
  if (*((unsigned char *)this + 17))
  {
    uint64_t v2 = 0;
    *(void *)((char *)this + 1132) = 0;
    *(_OWORD *)((char *)this + 1100) = 0u;
    *(_OWORD *)((char *)this + 1116) = 0u;
    *(_OWORD *)((char *)this + 1068) = 0u;
    *(_OWORD *)((char *)this + 1084) = 0u;
    *(_OWORD *)((char *)this + 1036) = 0u;
    *(_OWORD *)((char *)this + 1052) = 0u;
    *(_OWORD *)((char *)this + 1004) = 0u;
    *(_OWORD *)((char *)this + 1020) = 0u;
    *(_OWORD *)((char *)this + 972) = 0u;
    *(_OWORD *)((char *)this + 988) = 0u;
    *(_OWORD *)((char *)this + 940) = 0u;
    *(_OWORD *)((char *)this + 956) = 0u;
    do
    {
      uint64_t v3 = 0;
      float v4 = (void *)((char *)this + 8 * v2);
      uint64_t v5 = v4[143];
      uint64_t v6 = v4[149];
      uint64_t v7 = v4[155];
      do
      {
        *(_DWORD *)(v5 + v3) = 0;
        *(_DWORD *)(v6 + v3) = 0;
        *(_DWORD *)(v7 + v3) = 0;
        v3 += 4;
      }
      while (v3 != 200);
      ++v2;
    }
    while (v2 != 6);
    AUEcConvergenceOversight::ResetEnergyValsAndFlags(this);
    float __A = 0.0;
    vDSP_vfill(&__A, *((float **)this + 243), 1, *((int *)this + 493));
  }
  *((unsigned char *)this + 1869) = 0;
  *((void *)this + 249) = 0;
  *(_OWORD *)((char *)this + 1484) = 0u;
  *(_OWORD *)((char *)this + 1500) = 0u;
  *(_OWORD *)((char *)this + 1516) = 0u;
  *(_OWORD *)((char *)this + 1532) = 0u;
  *(void *)((char *)this + 1546) = 0;
  *(_OWORD *)((char *)this + 1556) = 0u;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1588) = 0u;
  *(_OWORD *)((char *)this + 1604) = 0u;
  *(_OWORD *)((char *)this + 1620) = 0u;
  *(_OWORD *)((char *)this + 1636) = 0u;
  *(_OWORD *)((char *)this + 1652) = 0u;
  *(_OWORD *)((char *)this + 1668) = 0u;
  *(_OWORD *)((char *)this + 1684) = 0u;
  *(_OWORD *)((char *)this + 1700) = 0u;
  *(_OWORD *)((char *)this + 1716) = 0u;
  *(_OWORD *)((char *)this + 1732) = 0u;
  *(_OWORD *)((char *)this + 1748) = 0u;
  *(_OWORD *)((char *)this + 1764) = 0u;
  *(_OWORD *)((char *)this + 1780) = 0u;
  *(_OWORD *)((char *)this + 1796) = 0u;
  *(_OWORD *)((char *)this + 1812) = 0u;
  *(void *)((char *)this + 1828) = 0;
  *((_DWORD *)this + 465) = 0;
  *(_OWORD *)((char *)this + 1844) = 0u;
  return 0;
}

uint64_t AUEcConvergenceOversight::CanScheduleParameters(AUEcConvergenceOversight *this)
{
  return 0;
}

uint64_t AUEcConvergenceOversight::SetParameter(AUEcConvergenceOversight *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  }
  else
  {
    if (*((unsigned char *)this + 17) && a2 <= 0x20 && ((1 << a2) & 0x1EC03E1F0) != 0) {
      ++*((_DWORD *)this + 133);
    }
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUEcConvergenceOversight *)((char *)this + 32), 0);
  }
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  return 0;
}

uint64_t AUEcConvergenceOversight::SetProperty(AUEcConvergenceOversight *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result = 4294956417;
  if (a2 == 21 && !a3)
  {
    if (a6 >= 4)
    {
      uint64_t result = 0;
      *((unsigned char *)this + 540) = *a5 != 0;
    }
    else
    {
      return 4294956445;
    }
  }
  return result;
}

uint64_t AUEcConvergenceOversight::GetProperty(AUEcConvergenceOversight *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t v6 = (unsigned __int8 *)this + 540;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUEcConvergenceOversight::GetPropertyInfo(AUEcConvergenceOversight *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 21)
  {
    BOOL v7 = 1;
  }
  else
  {
    if (a2 != 3700) {
      return 4294956417;
    }
    BOOL v7 = 0;
  }
  uint64_t result = 0;
  *a6 = v7;
  *a5 = 4;
  return result;
}

uint64_t AUEcConvergenceOversight::Initialize(AUEcConvergenceOversight *this)
{
  *((unsigned char *)this + 376) = 1;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    LODWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  else {
    uint64_t v3 = (*((void *)this + 13) - *((void *)this + 12)) >> 3;
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = (*((void *)this + 19) - *((void *)this + 18)) >> 3;
  }
  if (v3 < 2)
  {
    int v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 108);
LABEL_16:
    *((_DWORD *)this + 138) = v8;
    if (v5 < 2)
    {
LABEL_20:
      double v11 = *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 80);
      if (v11 == *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), 0) + 80))
      {
        AUEcConvergenceOversight::InitializeInternals(this);
      }
    }
    else
    {
      unsigned int v9 = 1;
      while (1)
      {
        double v10 = *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), v9 - 1) + 80);
        if (v10 != *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 128), v9) + 80)) {
          break;
        }
        if (v5 == ++v9) {
          goto LABEL_20;
        }
      }
    }
  }
  else
  {
    unsigned int v6 = 1;
    while (1)
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v6 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), v6)+ 80))break; {
      if (v3 == ++v6)
      }
      {
        int v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 0) + 108);
        if (v8 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 1u) + 108)
          && (v3 < 3
           || *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUEcConvergenceOversight *)((char *)this + 80), 2u) + 108)))
        {
          goto LABEL_16;
        }
        return 4294956428;
      }
    }
  }
  return 4294956428;
}

void AUEcConvergenceOversight::~AUEcConvergenceOversight(std::__shared_weak_count **this)
{
  AUEcConvergenceOversight::~AUEcConvergenceOversight(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *this = (std::__shared_weak_count *)&unk_1F14BF370;
  AUEcConvergenceOversight::ClearAllocations((AUEcConvergenceOversight *)this);
  ((void (*)(std::__shared_weak_count **))(*this)[2].__shared_weak_owners_)(this);
  uint64_t v2 = this[282];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = this[235];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  ausdk::AUBase::~AUBase((ausdk::AUBase *)this);
}

uint64_t SoundFieldSpatializer::processAccumulating(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, double a6, __n128 a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 4294956429;
  }
  if (*(_DWORD *)(a1 + 344) != a4) {
    return 4294956428;
  }
  if (*(unsigned char *)(a1 + 132)) {
    a7.n128_f32[0] = a5;
  }
  else {
    a7.n128_f32[0] = 0.0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, float, float, __n128))(**(void **)(a1 + 336)
                                                                                           + 16))(*(void *)(a1 + 336), a2, a3, a10, 1, *(float *)(a1 + 48), *(float *)(a1 + 52), a7);
  uint64_t result = 0;
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(a1 + 132);
  return result;
}

uint64_t SoundFieldSpatializer::reset(SoundFieldSpatializer *this)
{
  *((unsigned char *)this + 17) = 1;
  *((unsigned char *)this + 268) = *((unsigned char *)this + 132);
  return (*(uint64_t (**)(void))(**((void **)this + 42) + 24))();
}

void SoundFieldSpatializer::~SoundFieldSpatializer(SoundFieldSpatializer *this)
{
  *(void *)this = &unk_1F14BF5E0;
  uint64_t v2 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  Spatializer::~Spatializer(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14BF5E0;
  uint64_t v2 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  Spatializer::~Spatializer(this);
}

void SoundFieldSpatializer::SoundFieldSpatializer(SoundFieldSpatializer *this, const AudioChannelLayout *a2)
{
  Spatializer::Spatializer(this);
  void *v3 = &unk_1F14BF5E0;
  v3[42] = 0;
  signed int mChannelLayoutTag = a2->mChannelLayoutTag;
  if ((int)a2->mChannelLayoutTag <= 7733252)
  {
    if (mChannelLayoutTag == 6619138) {
      operator new();
    }
    if (mChannelLayoutTag == 7077892) {
      operator new();
    }
    int v5 = 7274504;
  }
  else
  {
    if (mChannelLayoutTag > 9175046)
    {
      if (mChannelLayoutTag != 9175047 && mChannelLayoutTag != 9699335) {
LABEL_9:
      }
        operator new();
LABEL_15:
      operator new();
    }
    if (mChannelLayoutTag == 7733253) {
      operator new();
    }
    int v5 = 9109510;
  }
  if (mChannelLayoutTag != v5) {
    goto LABEL_9;
  }
  goto LABEL_15;
}

void sub_1BB6E174C(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 42);
  *((void *)v1 + 42) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  Spatializer::~Spatializer(v1);
  _Unwind_Resume(a1);
}

unint64_t AU::DSPGraph::at_to_fourcc(const __CFDictionary **a1)
{
  CFDictionaryRef v2 = *a1;
  if (!v2) {
    goto LABEL_13;
  }
  unint64_t v3 = (unint64_t)applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,char const*&>(v2, (const UInt8 *)"ParameterID");
  if ((v3 & 0xFF00000000) != 0) {
    return v3;
  }
  if (!*a1)
  {
LABEL_13:
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_16;
  }
  CFStringRef v4 = (const __CFString *)applesauce::CF::details::at_key<char const*&>(*a1, (const UInt8 *)"ParameterID");
  if (!v4)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
LABEL_16:
  }
  applesauce::CF::convert_to<std::string,0>(v4, (uint64_t)__p);
  if ((v10 & 0x80000000) == 0)
  {
    if (v10 == 4)
    {
      int v5 = (unsigned int *)__p;
      goto LABEL_10;
    }
LABEL_17:
    int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\" to four character code", &v11, &v12);
    std::runtime_error::runtime_error(v8, &v12);
  }
  if (__p[1] != (void *)4) {
    goto LABEL_17;
  }
  int v5 = (unsigned int *)__p[0];
LABEL_10:
  unint64_t v3 = bswap32(*v5);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1BB6E1920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFDictionaryRef v2 = (char *)**a1;
  if (v2)
  {
    CFStringRef v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = v4 - 48;
        std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)(v4 - 40));
        CFStringRef v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table(uint64_t a1)
{
  CFDictionaryRef v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      CFStringRef v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      CFDictionaryRef v2 = v3;
    }
    while (v3);
  }
  int v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t AU::DSPGraph::MetaParameterManager::loadMetaParametersFromPlist(AU::DSPGraph::MetaParameterManager *this, const __CFDictionary *a2)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  if (getAUDSPGraphLog(void)::onceToken != -1) {
    dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
  }
  CFStringRef v4 = getAUDSPGraphLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)AudioTimeStamp buf = 0;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "loading MetaParameterPlist:", buf, 2u);
  }
  int v5 = this;
  if (a2 && CFDictionaryGetCount(a2))
  {
    long long v139 = 0uLL;
    float v140 = 0;
    CFRetain(a2);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v138, a2);
    if (!v138)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[7]>((applesauce::CF::ArrayRef *)&v137, v138, "Inputs");
    CFArrayRef v6 = v137;
    if (!v137) {
      goto LABEL_257;
    }
    unint64_t v120 = 0;
LABEL_10:
    if (v120 < CFArrayGetCount(v6))
    {
      long long v135 = 0u;
      *(_OWORD *)std::string __p = 0u;
      float v136 = 1.0;
      if (!v137)
      {
        uint64_t v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v114, "Could not construct");
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v137, v120, (applesauce::CF::DictionaryRef *)&cf);
      CFDictionaryRef v7 = (const __CFDictionary *)cf;
      if (cf) {
        CFRetain(cf);
      }
      CFDictionaryRef v132 = v7;
      unsigned int __val = AU::DSPGraph::at_to_fourcc(&v132);
      if (v7) {
        CFRelease(v7);
      }
      if (!cf)
      {
        unint64_t v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v115, "Could not construct");
      }
      int v8 = applesauce::CF::details::at_key<char const(&)[8]>((const __CFDictionary *)cf, "Outputs");
      if (!v8)
      {
        float v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v116, "Could not find item");
      }
      unsigned int v9 = v8;
      CFRetain(v8);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v9);
      CFArrayRef v10 = theArray;
      if (!theArray)
      {
LABEL_252:
        int v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v109, "Could not construct");
      }
      unint64_t v11 = 0;
      int v12 = bswap32(__val);
      int v123 = v12;
      BOOL v16 = ((char)v12 - 127) < 0xFFFFFFA1
         || (((__int16)v12 >> 8) - 127) < 0xFFFFFFA1
         || ((v12 << 8 >> 24) - 127) < 0xFFFFFFA1
         || ((v12 >> 24) - 127) < 0xFFFFFFA1;
      BOOL v122 = v16;
      while (1)
      {
        if (v11 >= CFArrayGetCount(v10))
        {
          *(_DWORD *)AudioTimeStamp buf = __val;
          *(_DWORD *)&uint8_t buf[4] = 0;
          int v83 = __p[0];
          unint64_t v84 = (unint64_t)__p[1];
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&uint8_t buf[8] = v83;
          *(void *)&buf[16] = v84;
          long long v142 = v135;
          float v143 = v136;
          if (*((void *)&v135 + 1))
          {
            unint64_t v85 = *(void *)(v135 + 8);
            if ((v84 & (v84 - 1)) != 0)
            {
              if (v85 >= v84) {
                v85 %= v84;
              }
            }
            else
            {
              v85 &= v84 - 1;
            }
            v83[v85] = &v142;
            long long v135 = 0uLL;
          }
          uint64_t v86 = *((void *)&v139 + 1);
          if (*((void *)&v139 + 1) < (unint64_t)v140)
          {
            **((void **)&v139 + 1) = *(void *)buf;
            uint64_t v87 = (void *)(v86 + 48);
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(v86 + 8, (uint64_t *)&buf[8]);
            goto LABEL_224;
          }
          unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v139 + 1) - v139) >> 4);
          unint64_t v89 = v88 + 1;
          if (v88 + 1 > 0x555555555555555) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)&v140[-v139] >> 4) > v89) {
            unint64_t v89 = 0x5555555555555556 * ((uint64_t)&v140[-v139] >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v140[-v139] >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v90 = 0x555555555555555;
          }
          else {
            unint64_t v90 = v89;
          }
          if (v90)
          {
            if (v90 > 0x555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unsigned int v91 = (char *)operator new(48 * v90);
          }
          else
          {
            unsigned int v91 = 0;
          }
          uint64_t v92 = &v91[48 * v88];
          int v93 = &v91[48 * v90];
          *(void *)uint64_t v92 = *(void *)buf;
          uint64_t v87 = v92 + 48;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(v92 + 8), (uint64_t *)&buf[8]);
          float v94 = (uint64_t *)*((void *)&v139 + 1);
          unint64_t v2 = v139;
          if (*((void *)&v139 + 1) == (void)v139)
          {
            *(void *)&long long v139 = v92;
            *((void *)&v139 + 1) = v92 + 48;
            float v140 = v93;
            if (v94) {
              goto LABEL_223;
            }
          }
          else
          {
            do
            {
              uint64_t v95 = *(v94 - 6);
              v94 -= 6;
              *((void *)v92 - 6) = v95;
              v92 -= 48;
              std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(v92 + 8), v94 + 1);
            }
            while (v94 != (uint64_t *)v2);
            float v94 = (uint64_t *)*((void *)&v139 + 1);
            unint64_t v2 = v139;
            *(void *)&long long v139 = v92;
            *((void *)&v139 + 1) = v87;
            float v140 = v93;
            if (v94 != (uint64_t *)v2)
            {
              do
              {
                std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)(v94 - 5));
                v94 -= 6;
              }
              while (v94 != (uint64_t *)v2);
              float v94 = (uint64_t *)v2;
            }
            if (v94) {
LABEL_223:
            }
              operator delete(v94);
          }
LABEL_224:
          *((void *)&v139 + 1) = v87;
          std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)&buf[8]);
          if (theArray) {
            CFRelease(theArray);
          }
          int v5 = this;
          if (cf) {
            CFRelease(cf);
          }
          std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)__p);
          ++v120;
          CFArrayRef v6 = v137;
          if (!v137)
          {
LABEL_257:
            float v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v113, "Could not construct");
          }
          goto LABEL_10;
        }
        if (!theArray)
        {
          float v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v111, "Could not construct");
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(theArray, v11, (applesauce::CF::DictionaryRef *)&v130);
        CFTypeRef v17 = v130;
        if (v130) {
          CFRetain(v130);
        }
        CFTypeRef v129 = v17;
        unsigned int v18 = AU::DSPGraph::at_to_fourcc((const __CFDictionary **)&v129);
        if (v129) {
          CFRelease(v129);
        }
        if (!v130)
        {
          float v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v112, "Could not construct");
        }
        applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[7]>((applesauce::CF::ArrayRef *)&v128, (const __CFDictionary *)v130, "Points");
        CFArrayRef v19 = v128;
        if (!v128)
        {
LABEL_253:
          uint64_t v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v110, "Could not construct");
        }
        unint64_t v20 = 0;
        unint64_t v21 = 0;
        long long v124 = 0u;
        while (v21 < CFArrayGetCount(v19))
        {
          if (!v128)
          {
            int v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v105, "Could not construct");
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v128, v21, (applesauce::CF::DictionaryRef *)buf);
          if (!*(void *)buf)
          {
            unint64_t v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v106, "Could not construct");
          }
          CFNumberRef v22 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[6]>(*(const __CFDictionary **)buf, "Input");
          if (!v22)
          {
            uint64_t v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v107, "Could not find item");
          }
          float v23 = applesauce::CF::convert_to<float,0>(v22);
          if (!*(void *)buf)
          {
            int v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v103, "Could not construct");
          }
          float v24 = v23;
          CFNumberRef v25 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[7]>(*(const __CFDictionary **)buf, "Output");
          if (!v25)
          {
            int v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v104, "Could not find item");
          }
          float v26 = applesauce::CF::convert_to<float,0>(v25);
          uint64_t v27 = *((void *)&v124 + 1);
          if (*((void *)&v124 + 1) >= v20)
          {
            uint64_t v29 = (void *)v124;
            unint64_t v2 = (uint64_t)(*((void *)&v124 + 1) - v124) >> 3;
            unint64_t v30 = v2 + 1;
            if ((v2 + 1) >> 61) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v20 - v124) >> 2 > v30) {
              unint64_t v30 = (uint64_t)(v20 - v124) >> 2;
            }
            if (v20 - (unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            if (v31) {
              unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v31);
            }
            else {
              uint64_t v32 = 0;
            }
            float v33 = (float *)(v31 + 8 * v2);
            *float v33 = v24;
            v33[1] = v26;
            int v34 = v33;
            while (v27 != (void)v124)
            {
              uint64_t v35 = *(void *)(v27 - 8);
              v27 -= 8;
              *((void *)v34 - 1) = v35;
              v34 -= 2;
            }
            unint64_t v20 = v31 + 8 * v32;
            uint64_t v28 = (uint64_t)(v33 + 2);
            *(void *)&long long v124 = v34;
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            **((float **)&v124 + 1) = v24;
            *(float *)(*((void *)&v124 + 1) + 4) = v26;
            uint64_t v28 = *((void *)&v124 + 1) + 8;
          }
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
          *(void *)&long long v36 = v124;
          *((void *)&v36 + 1) = v28;
          long long v124 = v36;
          ++v21;
          CFArrayRef v19 = v128;
          if (!v128) {
            goto LABEL_253;
          }
        }
        memset(&v127, 0, sizeof(v127));
        for (uint64_t i = (float *)v124; i != *((float **)&v124 + 1); i += 2)
        {
          caulk::make_string((caulk *)"{%.2f,%.2f} ", (uint64_t)buf, *i, i[1]);
          if (buf[23] >= 0) {
            int v38 = buf;
          }
          else {
            int v38 = *(const std::string::value_type **)buf;
          }
          if (buf[23] >= 0) {
            std::string::size_type v39 = buf[23];
          }
          else {
            std::string::size_type v39 = *(void *)&buf[8];
          }
          std::string::append(&v127, v38, v39);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (getAUDSPGraphLog(void)::onceToken != -1) {
          dispatch_once(&getAUDSPGraphLog(void)::onceToken, &__block_literal_global_10751);
        }
        int64_t v40 = getAUDSPGraphLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)getAUDSPGraphLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v2 = (unint64_t)__p;
          *(_DWORD *)&buf[1] = v123;
          if (v122)
          {
            std::to_string(&v126, __val);
          }
          else
          {
            strcpy(&buf[5], "'");
            buf[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(&v126, buf);
          }
          if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v41 = &v126;
          }
          else {
            int v41 = (std::string *)v126.__r_.__value_.__r.__words[0];
          }
          int v42 = bswap32(v18);
          *(_DWORD *)&buf[1] = v42;
          if (((char)v42 - 32) > 0x5E
            || (((__int16)v42 >> 8) - 32) > 0x5E
            || ((v42 << 8 >> 24) - 32) > 0x5E
            || ((v42 >> 24) - 32) > 0x5E)
          {
            std::to_string(&v125, v18);
          }
          else
          {
            strcpy(&buf[5], "'");
            buf[0] = 39;
            std::string::basic_string[abi:ne180100]<0>(&v125, buf);
          }
          float v43 = &v125;
          if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            float v43 = (std::string *)v125.__r_.__value_.__r.__words[0];
          }
          float v44 = &v127;
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            float v44 = (std::string *)v127.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = v41;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v43;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&long long v142 = v44;
          _os_log_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_DEFAULT, "%s -> %s: [ %s]", buf, 0x20u);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v125.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v126.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v45 = v18;
        unint64_t v46 = (unint64_t)__p[1];
        if (__p[1])
        {
          uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v47.i16[0] = vaddlv_u8(v47);
          if (v47.u32[0] > 1uLL)
          {
            unint64_t v2 = v18;
            if (__p[1] <= (void *)v18) {
              unint64_t v2 = v18 % (unint64_t)__p[1];
            }
          }
          else
          {
            unint64_t v2 = (LODWORD(__p[1]) - 1) & v18;
          }
          int v48 = (uint64_t **)*((void *)__p[0] + v2);
          if (v48)
          {
            for (unint64_t j = *v48; j; unint64_t j = (uint64_t *)*j)
            {
              unint64_t v50 = j[1];
              if (v50 == v18)
              {
                if (*((_DWORD *)j + 4) == v18) {
                  goto LABEL_189;
                }
              }
              else
              {
                if (v47.u32[0] > 1uLL)
                {
                  if ((void *)v50 >= __p[1]) {
                    v50 %= (unint64_t)__p[1];
                  }
                }
                else
                {
                  v50 &= (unint64_t)__p[1] - 1;
                }
                if (v50 != v2) {
                  break;
                }
              }
            }
          }
        }
        int v51 = (char *)operator new(0x30uLL);
        unint64_t v52 = 126 - 2 * __clz((uint64_t)(*((void *)&v124 + 1) - v124) >> 3);
        *(void *)int v51 = 0;
        *((void *)v51 + 1) = v18;
        *((_DWORD *)v51 + 4) = v18;
        *(_OWORD *)(v51 + 24) = v124;
        *((void *)v51 + 5) = v20;
        if (*((void *)&v124 + 1) == (void)v124) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = v52;
        }
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_Lb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb((float *)v124, *((unint64_t *)&v124 + 1), v53, 1, *(double *)&v124);
        float v54 = (float *)*((void *)v51 + 3);
        uint64_t v55 = *((void *)v51 + 4) - (void)v54;
        if ((unint64_t)v55 >= 9)
        {
          unint64_t v56 = v55 >> 3;
          if (v56 <= 2) {
            unint64_t v56 = 2;
          }
          float v58 = *v54;
          uint64_t v57 = v54 + 2;
          float v59 = v58;
          unint64_t v60 = v56 - 1;
          do
          {
            float v61 = v59;
            float v59 = *v57;
            if ((float)(*v57 - v61) < 0.000001)
            {
              int v108 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v108, "transform curve has duplicate points");
              v108->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            }
            v57 += 2;
            --v60;
          }
          while (v60);
        }
        float v62 = (float)(unint64_t)(*((void *)&v135 + 1) + 1);
        if (!v46 || (float)(v136 * (float)v46) < v62) {
          break;
        }
LABEL_179:
        float v80 = __p[0];
        uint64_t v81 = (void *)*((void *)__p[0] + v2);
        if (v81)
        {
          *(void *)int v51 = *v81;
        }
        else
        {
          *(void *)int v51 = v135;
          *(void *)&long long v135 = v51;
          v80[v2] = &v135;
          if (!*(void *)v51) {
            goto LABEL_188;
          }
          unint64_t v82 = *(void *)(*(void *)v51 + 8);
          if ((v46 & (v46 - 1)) != 0)
          {
            if (v82 >= v46) {
              v82 %= v46;
            }
          }
          else
          {
            v82 &= v46 - 1;
          }
          uint64_t v81 = (char *)__p[0] + 8 * v82;
        }
        void *v81 = v51;
LABEL_188:
        ++*((void *)&v135 + 1);
        *(void *)&long long v124 = 0;
LABEL_189:
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v127.__r_.__value_.__l.__data_);
        }
        if ((void)v124) {
          operator delete((void *)v124);
        }
        if (v128) {
          CFRelease(v128);
        }
        if (v130) {
          CFRelease(v130);
        }
        ++v11;
        CFArrayRef v10 = theArray;
        if (!theArray) {
          goto LABEL_252;
        }
      }
      BOOL v63 = (v46 & (v46 - 1)) != 0;
      if (v46 < 3) {
        BOOL v63 = 1;
      }
      unint64_t v64 = v63 | (2 * v46);
      unint64_t v65 = vcvtps_u32_f32(v62 / v136);
      if (v64 <= v65) {
        int8x8_t prime = (int8x8_t)v65;
      }
      else {
        int8x8_t prime = (int8x8_t)v64;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      int v67 = __p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_138;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v74 = vcvtps_u32_f32((float)*((unint64_t *)&v135 + 1) / v136);
        if (__p[1] < (void *)3
          || (uint8x8_t v75 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
        {
          unint64_t v74 = std::__next_prime(v74);
        }
        else
        {
          uint64_t v76 = 1 << -(char)__clz(v74 - 1);
          if (v74 >= 2) {
            unint64_t v74 = v76;
          }
        }
        if (*(void *)&prime <= v74) {
          int8x8_t prime = (int8x8_t)v74;
        }
        if (*(void *)&prime < (unint64_t)v67)
        {
          if (prime)
          {
LABEL_138:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unsigned int v68 = operator new(8 * *(void *)&prime);
            uint64_t v69 = __p[0];
            __p[0] = v68;
            if (v69) {
              operator delete(v69);
            }
            uint64_t v70 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v70++) = 0;
            while (*(void *)&prime != v70);
            uint64_t v71 = (void **)v135;
            if ((void)v135)
            {
              unint64_t v72 = *(void *)(v135 + 8);
              uint8x8_t v73 = (uint8x8_t)vcnt_s8(prime);
              v73.i16[0] = vaddlv_u8(v73);
              if (v73.u32[0] > 1uLL)
              {
                if (v72 >= *(void *)&prime) {
                  v72 %= *(void *)&prime;
                }
              }
              else
              {
                v72 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v72) = &v135;
              int v77 = *v71;
              if (*v71)
              {
                while (1)
                {
                  unint64_t v78 = v77[1];
                  if (v73.u32[0] > 1uLL)
                  {
                    if (v78 >= *(void *)&prime) {
                      v78 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v78 &= *(void *)&prime - 1;
                  }
                  if (v78 != v72)
                  {
                    if (!*((void *)__p[0] + v78))
                    {
                      *((void *)__p[0] + v78) = v71;
                      goto LABEL_163;
                    }
                    *uint64_t v71 = (void *)*v77;
                    *int v77 = **((void **)__p[0] + v78);
                    **((void **)__p[0] + v78) = v77;
                    int v77 = v71;
                  }
                  unint64_t v78 = v72;
LABEL_163:
                  uint64_t v71 = (void **)v77;
                  int v77 = (void *)*v77;
                  unint64_t v72 = v78;
                  if (!v77) {
                    goto LABEL_174;
                  }
                }
              }
            }
            goto LABEL_174;
          }
          int v79 = __p[0];
          __p[0] = 0;
          if (v79) {
            operator delete(v79);
          }
          __p[1] = 0;
        }
      }
LABEL_174:
      unint64_t v46 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v45) {
          unint64_t v2 = v45 % (unint64_t)__p[1];
        }
        else {
          unint64_t v2 = v45;
        }
      }
      else
      {
        unint64_t v2 = (LODWORD(__p[1]) - 1) & v45;
      }
      goto LABEL_179;
    }
    if (v137) {
      CFRelease(v137);
    }
    if (v138) {
      CFRelease(v138);
    }
    unint64_t v99 = *(char **)v5;
    if (*(void *)v5)
    {
      BOOL v100 = (char *)*((void *)v5 + 1);
      uint64_t v101 = *(char **)v5;
      if (v100 != v99)
      {
        do
        {
          uint64_t v102 = v100 - 48;
          std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table((uint64_t)(v100 - 40));
          BOOL v100 = v102;
        }
        while (v102 != v99);
        int v5 = this;
        uint64_t v101 = *(char **)this;
      }
      *((void *)v5 + 1) = v99;
      operator delete(v101);
      *(void *)int v5 = 0;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
    }
    *(_OWORD *)int v5 = v139;
    *((void *)v5 + 2) = v140;
    float v140 = 0;
    long long v139 = 0uLL;
    *(void *)AudioTimeStamp buf = &v139;
    std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    uint64_t v97 = *(void *)this;
    uint64_t v96 = *((void *)this + 1);
    if (v96 != *(void *)this)
    {
      do
      {
        uint64_t v98 = v96 - 48;
        std::__hash_table<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>>>::~__hash_table(v96 - 40);
        uint64_t v96 = v98;
      }
      while (v98 != v97);
    }
    *((void *)this + 1) = v97;
  }
  return 0;
}

void sub_1BB6E3000()
{
  *(void *)(v0 - 192) = v0 - 224;
  std::vector<AU::DSPGraph::MetaParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x1BB6E303CLL);
}

void sub_1BB6E3034(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

applesauce::CF::ArrayRef *applesauce::CF::details::find_at_key<applesauce::CF::ArrayRef,char const(&)[7]>(applesauce::CF::ArrayRef *a1, const __CFDictionary *a2, char *__s)
{
  CFStringRef v4 = applesauce::CF::details::at_key<char const(&)[7]>(a2, __s);
  if (!v4)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  int v5 = v4;
  CFRetain(v4);

  return applesauce::CF::ArrayRef::ArrayRef(a1, v5);
}

void sub_1BB6E30D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,AU::DSPGraph::Transformer>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

float _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_Lb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb(float *a1, unint64_t a2, uint64_t a3, char a4, double a5)
{
  while (2)
  {
    unint64_t v11 = (_DWORD *)(a2 - 8);
    unint64_t v12 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (float *)v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = (uint64_t)(a2 - v12) >> 3;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return *(float *)&a5;
              case 2uLL:
                LODWORD(a5) = *v11;
                float v41 = *(float *)v12;
                if (*(float *)v11 < *(float *)v12)
                {
                  *(_DWORD *)unint64_t v12 = LODWORD(a5);
                  *(float *)(a2 - 8) = v41;
                  LODWORD(a5) = *(_DWORD *)(v12 + 4);
                  *(_DWORD *)(v12 + 4) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = LODWORD(a5);
                }
                break;
              case 3uLL:
                *(float *)&a5 = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)v12, (float *)(v12 + 8), (float *)(a2 - 8));
                break;
              case 4uLL:
                *(float *)&a5 = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)v12, v12 + 8, v12 + 16, a2 - 8);
                break;
              case 5uLL:
                *(float *)&a5 = _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)v12, (float *)(v12 + 8), (float *)(v12 + 16), (float *)(v12 + 24), (float *)(a2 - 8));
                break;
              default:
                JUMPOUT(0);
            }
            return *(float *)&a5;
          }
          if (v13 <= 191)
          {
            unint64_t v42 = v12 + 8;
            BOOL v44 = v12 == a2 || v42 == a2;
            if (a4)
            {
              if (!v44)
              {
                uint64_t v45 = 0;
                unint64_t v46 = v12;
                do
                {
                  unint64_t v47 = v42;
                  LODWORD(a5) = *(_DWORD *)(v46 + 8);
                  float v48 = *(float *)v46;
                  if (*(float *)&a5 < *(float *)v46)
                  {
                    int v49 = *(_DWORD *)(v46 + 12);
                    uint64_t v50 = v45;
                    while (1)
                    {
                      uint64_t v51 = v12 + v50;
                      int v52 = *(_DWORD *)(v12 + v50 + 4);
                      *(float *)(v51 + 8) = v48;
                      *(_DWORD *)(v51 + 12) = v52;
                      if (!v50) {
                        break;
                      }
                      float v48 = *(float *)(v51 - 8);
                      v50 -= 8;
                      if (*(float *)&a5 >= v48)
                      {
                        uint64_t v53 = (_DWORD *)(v12 + v50 + 8);
                        goto LABEL_82;
                      }
                    }
                    uint64_t v53 = (_DWORD *)v12;
LABEL_82:
                    *uint64_t v53 = LODWORD(a5);
                    v53[1] = v49;
                  }
                  unint64_t v42 = v47 + 8;
                  v45 += 8;
                  unint64_t v46 = v47;
                }
                while (v47 + 8 != a2);
              }
            }
            else if (!v44)
            {
              float v80 = (float *)(v12 + 12);
              do
              {
                uint64_t v81 = (float *)v42;
                *(float *)&a5 = a1[2];
                float v82 = *a1;
                if (*(float *)&a5 < *a1)
                {
                  int v83 = *((_DWORD *)a1 + 3);
                  unint64_t v84 = v80;
                  do
                  {
                    unint64_t v85 = v84;
                    *(v84 - 1) = v82;
                    int v86 = *((_DWORD *)v84 - 2);
                    v84 -= 2;
                    *(_DWORD *)unint64_t v85 = v86;
                    float v82 = *(v85 - 5);
                  }
                  while (*(float *)&a5 < v82);
                  *(v84 - 1) = *(float *)&a5;
                  *(_DWORD *)unint64_t v84 = v83;
                }
                unint64_t v42 = (unint64_t)(v81 + 2);
                v80 += 2;
                a1 = v81;
              }
              while (v81 + 2 != (float *)a2);
            }
            return *(float *)&a5;
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v54 = (v14 - 2) >> 1;
              int64_t v55 = v54;
              do
              {
                int64_t v56 = v55;
                if (v54 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  unint64_t v58 = v12 + 8 * v57;
                  if (2 * v56 + 2 < (uint64_t)v14 && *(float *)v58 < *(float *)(v58 + 8))
                  {
                    v58 += 8;
                    uint64_t v57 = 2 * v56 + 2;
                  }
                  unint64_t v59 = v12 + 8 * v56;
                  float v60 = *(float *)v58;
                  float v61 = *(float *)v59;
                  if (*(float *)v58 >= *(float *)v59)
                  {
                    int v62 = *(_DWORD *)(v59 + 4);
                    do
                    {
                      BOOL v63 = (float *)v59;
                      unint64_t v59 = v58;
                      *BOOL v63 = v60;
                      v63[1] = *(float *)(v58 + 4);
                      if (v54 < v57) {
                        break;
                      }
                      uint64_t v64 = 2 * v57;
                      uint64_t v57 = (2 * v57) | 1;
                      unint64_t v58 = v12 + 8 * v57;
                      uint64_t v65 = v64 + 2;
                      if (v65 < (uint64_t)v14 && *(float *)v58 < *(float *)(v58 + 8))
                      {
                        v58 += 8;
                        uint64_t v57 = v65;
                      }
                      float v60 = *(float *)v58;
                    }
                    while (*(float *)v58 >= v61);
                    *(float *)unint64_t v59 = v61;
                    *(_DWORD *)(v59 + 4) = v62;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              uint64_t v66 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v67 = 0;
                float v68 = *(float *)v12;
                LODWORD(a5) = *(_DWORD *)(v12 + 4);
                uint64_t v69 = (_DWORD *)v12;
                do
                {
                  uint64_t v70 = v69;
                  v69 += 2 * v67 + 2;
                  uint64_t v71 = 2 * v67;
                  uint64_t v67 = (2 * v67) | 1;
                  uint64_t v72 = v71 + 2;
                  if (v72 < v66 && *(float *)v69 < *((float *)v69 + 2))
                  {
                    v69 += 2;
                    uint64_t v67 = v72;
                  }
                  *uint64_t v70 = *v69;
                  v70[1] = v69[1];
                }
                while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                if (v69 == (_DWORD *)(a2 - 8))
                {
                  *(float *)uint64_t v69 = v68;
                  v69[1] = LODWORD(a5);
                }
                else
                {
                  _DWORD *v69 = *(_DWORD *)(a2 - 8);
                  v69[1] = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 8) = v68;
                  *(_DWORD *)(a2 - 4) = LODWORD(a5);
                  uint64_t v73 = (uint64_t)v69 - v12 + 8;
                  if (v73 >= 9)
                  {
                    unint64_t v74 = (unint64_t)((v73 >> 3) - 2) >> 1;
                    uint8x8_t v75 = (float *)(v12 + 8 * v74);
                    float v76 = *v75;
                    LODWORD(a5) = *v69;
                    if (*v75 < *(float *)v69)
                    {
                      int v77 = v69[1];
                      do
                      {
                        unint64_t v78 = (float *)v69;
                        uint64_t v69 = v75;
                        *unint64_t v78 = v76;
                        v78[1] = v75[1];
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        uint8x8_t v75 = (float *)(v12 + 8 * v74);
                        float v76 = *v75;
                      }
                      while (*v75 < *(float *)&a5);
                      _DWORD *v69 = LODWORD(a5);
                      v69[1] = v77;
                    }
                  }
                }
                a2 -= 8;
              }
              while (v66-- > 2);
            }
            return *(float *)&a5;
          }
          unint64_t v15 = v14 >> 1;
          BOOL v16 = (float *)(v12 + 8 * (v14 >> 1));
          if ((unint64_t)v13 >= 0x401)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1, &a1[2 * (v14 >> 1)], (float *)(a2 - 8));
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 2, v16 - 2, (float *)(a2 - 16));
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(a1 + 4, &a1[2 * v15 + 2], (float *)(a2 - 24));
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(v16 - 2, v16, &a1[2 * v15 + 2]);
            double v17 = *(double *)a1;
            *(void *)a1 = *(void *)v16;
            *(double *)BOOL v16 = v17;
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_(&a1[2 * (v14 >> 1)], a1, (float *)(a2 - 8));
          }
          --a3;
          if ((a4 & 1) != 0 || *(a1 - 2) < *a1) {
            break;
          }
          a5 = *(double *)a1;
          if (COERCE_FLOAT(*(void *)a1) >= *(float *)v11)
          {
            float v33 = a1 + 2;
            do
            {
              unint64_t v12 = (unint64_t)v33;
              if ((unint64_t)v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (*(float *)&a5 >= *(float *)v12);
          }
          else
          {
            unint64_t v12 = (unint64_t)a1;
            do
            {
              float v32 = *(float *)(v12 + 8);
              v12 += 8;
            }
            while (*(float *)&a5 >= v32);
          }
          int v34 = (float *)a2;
          if (v12 < a2)
          {
            int v34 = (float *)a2;
            do
            {
              float v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (*(float *)&a5 < v35);
          }
          if (v12 < (unint64_t)v34)
          {
            float v36 = *(float *)v12;
            float v37 = *v34;
            do
            {
              *(float *)unint64_t v12 = v37;
              float *v34 = v36;
              int v38 = *(_DWORD *)(v12 + 4);
              *(float *)(v12 + 4) = v34[1];
              *((_DWORD *)v34 + 1) = v38;
              do
              {
                float v39 = *(float *)(v12 + 8);
                v12 += 8;
                float v36 = v39;
              }
              while (*(float *)&a5 >= v39);
              do
              {
                float v40 = *(v34 - 2);
                v34 -= 2;
                float v37 = v40;
              }
              while (*(float *)&a5 < v40);
            }
            while (v12 < (unint64_t)v34);
          }
          BOOL v5 = v12 - 8 >= (unint64_t)a1;
          BOOL v6 = v12 - 8 == (void)a1;
          if ((float *)(v12 - 8) != a1)
          {
            *a1 = *(float *)(v12 - 8);
            a1[1] = *(float *)(v12 - 4);
          }
          a4 = 0;
          *(double *)(v12 - 8) = a5;
        }
        double v18 = *(double *)a1;
        CFArrayRef v19 = a1;
        do
        {
          unint64_t v20 = v19;
          float v21 = v19[2];
          v19 += 2;
          float v22 = v21;
        }
        while (v21 < *(float *)&v18);
        float v23 = (float *)a2;
        if (v20 == a1)
        {
          float v23 = (float *)a2;
          do
          {
            if (v19 >= v23) {
              break;
            }
            float v25 = *(v23 - 2);
            v23 -= 2;
          }
          while (v25 >= *(float *)&v18);
        }
        else
        {
          do
          {
            float v24 = *(v23 - 2);
            v23 -= 2;
          }
          while (v24 >= *(float *)&v18);
        }
        if (v19 >= v23)
        {
          unint64_t v12 = (unint64_t)v19;
        }
        else
        {
          float v26 = *v23;
          unint64_t v12 = (unint64_t)v19;
          uint64_t v27 = v23;
          do
          {
            *(float *)unint64_t v12 = v26;
            *uint64_t v27 = v22;
            int v28 = *(_DWORD *)(v12 + 4);
            *(float *)(v12 + 4) = v27[1];
            *((_DWORD *)v27 + 1) = v28;
            do
            {
              float v29 = *(float *)(v12 + 8);
              v12 += 8;
              float v22 = v29;
            }
            while (v29 < *(float *)&v18);
            do
            {
              float v30 = *(v27 - 2);
              v27 -= 2;
              float v26 = v30;
            }
            while (v30 >= *(float *)&v18);
          }
          while (v12 < (unint64_t)v27);
        }
        if ((float *)(v12 - 8) != a1)
        {
          *a1 = *(float *)(v12 - 8);
          a1[1] = *(float *)(v12 - 4);
        }
        *(double *)(v12 - 8) = v18;
        if (v19 >= v23) {
          break;
        }
LABEL_32:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_Lb0EEEvT1_SL_SF_NS_15iterator_traitsISL_E15difference_typeEb(a1, v12 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_EEbT1_SL_SF_((uint64_t)a1, v12 - 8);
      if (_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_EEbT1_SL_SF_(v12, a2))
      {
        break;
      }
      if (!v31) {
        goto LABEL_32;
      }
    }
    a2 = v12 - 8;
    if (!v31) {
      continue;
    }
    return *(float *)&a5;
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN2AU8DSPGraph11TransformerC1EONS_6vectorINS_4pairIffEENS_9allocatorIS7_EEEEEUlRKT_RKT0_E_PS7_EEbT1_SL_SF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        int v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_S5_((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEvT1_SC_SC_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (float *)(a1 + 24), (float *)(a2 - 8));
      return 1;
    default:
      unsigned int v9 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN24PiecewiseLinearTransform4SortEvEUlRT_RT0_E_PNS_4pairIffEEEEjT1_SC_SC_S5_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v10 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = *(float *)v10;
    float v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      int v15 = *(_DWORD *)(v10 + 4);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        int v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16) {
          break;
        }
        float v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          uint64_t v19 = a1 + v16 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *(float *)uint64_t v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8) {
        return v10 + 8 == a2;
      }
    }
    unsigned int v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t non-virtual thunk to'AUEndpointVAD3::HandleEvent(uint64_t this, const VAD3EventData *a2)
{
  unint64_t v2 = *(uint64_t **)(this + 32);
  if (v2 != *(uint64_t **)(this + 40))
  {
    uint64_t v4 = this;
    do
    {
      uint64_t v5 = *v2++;
      this = (*(uint64_t (**)(uint64_t, const VAD3EventData *))(*(void *)v5 + 16))(v5, a2);
    }
    while (v2 != *(uint64_t **)(v4 + 40));
  }
  return this;
}

void non-virtual thunk to'AUEndpointVAD3::~AUEndpointVAD3(AUEndpointVAD3 *this)
{
  AUEndpointVAD3::~AUEndpointVAD3((AUEndpointVAD3 *)((char *)this - 528));

  JUMPOUT(0x1C185D370);
}

{
  AUEndpointVAD3::~AUEndpointVAD3((AUEndpointVAD3 *)((char *)this - 528));
}

void AUEndpointVAD3::~AUEndpointVAD3(AUEndpointVAD3 *this)
{
  *(void *)this = &unk_1F14BF820;
  *((void *)this + 66) = &unk_1F14BFA90;
  uint64_t v2 = *((void *)this + 68);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 68) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 70);
  if (v3)
  {
    *((void *)this + 71) = v3;
    operator delete(v3);
  }

  ausdk::AUBase::~AUBase(this);
}

{
  uint64_t vars8;

  AUEndpointVAD3::~AUEndpointVAD3(this);

  JUMPOUT(0x1C185D370);
}

uint64_t AUEndpointVAD3::SetInputOutputAudioFormat(AUEndpointVAD3 *this, double *a2)
{
  *(double *)float v6 = *a2;
  v6[1] = 0x296C70636DLL;
  long long v7 = xmmword_1BB87A680;
  uint64_t v8 = 32;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)Element + 56))(Element, v6);
  if (!result)
  {
    uint64_t v5 = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 128), 0);
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 56))(v5, v6);
  }
  return result;
}

uint64_t AUEndpointVAD3::HandleEvent(uint64_t this, const VAD3EventData *a2)
{
  uint64_t v2 = *(uint64_t **)(this + 560);
  if (v2 != *(uint64_t **)(this + 568))
  {
    uint64_t v4 = this;
    do
    {
      uint64_t v5 = *v2++;
      this = (*(uint64_t (**)(uint64_t, const VAD3EventData *))(*(void *)v5 + 16))(v5, a2);
    }
    while (v2 != *(uint64_t **)(v4 + 568));
  }
  return this;
}

uint64_t AUEndpointVAD3::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 536) = a2;
  return this;
}

uint64_t AUEndpointVAD3::ShouldBypassEffect(AUEndpointVAD3 *this)
{
  return *((unsigned __int8 *)this + 536);
}

BOOL AUEndpointVAD3::ValidFormat(AUEndpointVAD3 *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2)) {
    BOOL v5 = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  else {
    BOOL v5 = 0;
  }
  return a4->mChannelsPerFrame == 1 && v5;
}

uint64_t AUEndpointVAD3::SupportedNumChannels(AUEndpointVAD3 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUEndpointVAD3::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUEndpointVAD3::StreamFormatWritable(AUEndpointVAD3 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUEndpointVAD3::SupportsTail(AUEndpointVAD3 *this)
{
  return 1;
}

double AUEndpointVAD3::GetTailTime(AUEndpointVAD3 *this)
{
  return 0.0;
}

double AUEndpointVAD3::GetLatency(AUEndpointVAD3 *this)
{
  uint64_t v1 = (float *)*((void *)this + 68);
  float v2 = v1[36];
  if (v2 <= v1[37]) {
    float v2 = v1[37];
  }
  if (v1[35] > v2) {
    float v2 = v1[35];
  }
  return (float)(v1[34] + v2);
}

uint64_t AUEndpointVAD3::GetParameterInfo(AUEndpointVAD3 *this, unsigned int a2, unsigned int a3, AudioUnitParameterInfo *a4)
{
  a4->AudioUnitParameterOptions flags = 0x40000000;
  a4->unitName = 0;
  return 4294956418;
}

uint64_t AUEndpointVAD3::Render(AUEndpointVAD3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 84) < a4) {
    return 4294956422;
  }
  unsigned int v9 = (AUEndpointVAD3 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  uint64_t v11 = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 128), 0);
  int v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v13 = ausdk::AUScope::SafeGetElement(v9, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v13 + 144));
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    return (*(uint64_t (**)(AUEndpointVAD3 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUEndpointVAD3::ProcessMultipleBufferLists(AUEndpointVAD3 *this, unsigned int *a2, uint64_t a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  int v11 = *((_DWORD *)this + 146);
  *((_DWORD *)this + 146) = v11 + 1;
  double v12 = *((double *)this + 75);
  if (!v11)
  {
    unint64_t v13 = *((void *)this + 35);
    mach_timebase_info((mach_timebase_info_t)info);
    LODWORD(v15) = *(_DWORD *)info;
    LODWORD(v14) = *(_DWORD *)&info[4];
    *((double *)this + 74) = (double)v13 / ((double)v14 / (double)v15 * 1000000000.0);
  }
  double v16 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0) + 80);
  if (*((unsigned char *)this + 376) && *((_DWORD *)this + 84) != a3)
  {
    if (EndpointVAD3LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
    }
    if (EndpointVAD3LogScope(void)::scope)
    {
      float v48 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(void *)EndpointVAD3LogScope(void)::scope) {
        return 4294956422;
      }
    }
    else
    {
      float v48 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      int v49 = *((_DWORD *)this + 84);
      *(_DWORD *)info = 136315906;
      *(void *)&info[4] = "AUEndpointVAD3.cpp";
      *(_WORD *)&info[12] = 1024;
      *(_DWORD *)&info[14] = 908;
      *(_WORD *)&info[18] = 1024;
      *(_DWORD *)&info[20] = a3;
      LOWORD(v77) = 1024;
      *(_DWORD *)((char *)&v77 + 2) = v49;
      _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Incorrect number of input samples! Received %d, but expected %d.", info, 0x1Eu);
    }
    return 4294956422;
  }
  if (((*(uint64_t (**)(AUEndpointVAD3 *))(*(void *)this + 576))(this) & 1) == 0)
  {
    uint64_t v18 = *((void *)this + 68);
    uint64_t v19 = *a5;
    std::string::basic_string[abi:ne180100]<0>(&v74, "");
    ++*(_DWORD *)(v18 + 528);
    int v20 = *(_DWORD *)(*(void *)(v18 + 64) + 88);
    double v21 = v12 / v16;
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v18 + 32), v19, v21, a3);
    FeaturesDSPWrapper::ProcessAudio(*(FeaturesDSPWrapper **)(v18 + 48), v19, v21, a3);
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    float v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    std::string __p = 0;
    BOOL v63 = 0;
    uint64_t v64 = 0;
    FeaturesDSPWrapper::GetCurrentProcessedFeatures(*(void *)(v18 + 32), (float **)&v71);
    FeaturesDSPWrapper::GetCurrentProcessedSuperFeatures(*(void **)(v18 + 32), (float **)&v68);
    FeaturesDSPWrapper::GetCurrentProcessedFeatures(*(void *)(v18 + 48), (float **)&v65);
    FeaturesDSPWrapper::GetCurrentProcessedSuperFeatures(*(void **)(v18 + 48), (float **)&__p);
    unsigned int v22 = *(_DWORD *)(*(void *)(v18 + 64) + 88) - v20;
    *(_DWORD *)(v18 + 80) = v22;
    if (v22)
    {
      for (unsigned int i = 0; i < v22; ++i)
      {
        ++*(_DWORD *)(v18 + 528);
        uint64_t v24 = *(void *)(v18 + 64);
        *(_DWORD *)info = i - v22;
        VectorTimeSeriesSynchronizer<float>::GetSynchronizedVector(v24, info, *(void *)(v18 + 336));
        float v25 = *(int ***)(v18 + 344);
        float v26 = *v25;
        uint64_t v27 = v25[1];
        if (v26 == v27)
        {
          unsigned int v32 = 0;
        }
        else
        {
          int v28 = *(float **)(*(void *)(v18 + 336) + 24);
          uint64_t v29 = (uint64_t)(*(void *)(*(void *)(v18 + 336) + 32) - (void)v28) >> 2;
          float v30 = v26;
          do
          {
            if (!v29) {
              __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
            }
            float v31 = *v28++;
            *v30++ = (v31 + 0.5);
            --v29;
          }
          while (v30 != v27);
          unsigned int v32 = 0;
          unint64_t v33 = v27 - v26;
          int v34 = *(int **)(v18 + 896);
          if (v33 <= 1) {
            unint64_t v33 = 1;
          }
          do
          {
            int v36 = *v26++;
            int v35 = v36;
            int v37 = *v34++;
            v32 += v37 * v35;
            --v33;
          }
          while (v33);
        }
        uint64_t v38 = *(void *)(v18 + 104);
        if (*(unsigned char *)(v18 + 360))
        {
          double v17 = MixViterbiProd::Update(v38, *(_DWORD *)(v18 + 364), v32, (_OWORD *)(*(void *)(v18 + 336) + 48));
        }
        else
        {
          double v17 = MixViterbiProd::Initialize(v38, v32, (_OWORD *)(*(void *)(v18 + 336) + 48));
          *(unsigned char *)(v18 + 360) = 1;
        }
        *(_DWORD *)(v18 + 364) = v32;
        uint64_t v39 = *(void *)(v18 + 104);
        unint64_t v40 = *(unsigned int *)(v39 + 72);
        float v41 = *(_DWORD **)(v18 + 264);
        if ((uint64_t)(*(void *)(v18 + 272) - (void)v41) >> 2 < v40) {
          unint64_t v40 = (uint64_t)(*(void *)(v18 + 272) - (void)v41) >> 2;
        }
        if (v40)
        {
          unint64_t v42 = *(int **)(v39 + 296);
          do
          {
            int v43 = *v42++;
            *v41++ = v43;
            --v40;
          }
          while (v40);
        }
        if (((*(void *)(v18 + 576) - *(void *)(v18 + 568)) & 0x3FFFFFFFCLL) == 4)
        {
          double v17 = *(double *)(*(void *)(v18 + 336) + 56);
          *(void *)info = &unk_1F14BD040;
          *(void *)&info[8] = 4;
          *(double *)&info[16] = v17;
          uint64_t v77 = v18 + 264;
          for (unint64_t j = *(void **)(v18 + 504); j != *(void **)(v18 + 512); ++j)
            (*(void (**)(void, unsigned char *))(*(void *)*j + 16))(*j, info);
        }
        unsigned int v22 = *(_DWORD *)(v18 + 80);
      }
    }
    if (__p)
    {
      BOOL v63 = __p;
      operator delete(__p);
    }
    if (v65)
    {
      uint64_t v66 = v65;
      operator delete(v65);
    }
    if (v68)
    {
      uint64_t v69 = v68;
      operator delete(v68);
    }
    if (v71)
    {
      uint64_t v72 = v71;
      operator delete(v71);
    }
    if (v75 < 0) {
      operator delete(v74);
    }
    if (!*(_DWORD *)(v18 + 24))
    {
      float v50 = *(float *)(v18 + 136);
      uint64_t v51 = *(void *)(v18 + 104);
      int v52 = *(unsigned __int8 *)(v51 + 232);
      double v53 = 0.0;
      if (!*(unsigned char *)(v51 + 232))
      {
        MRRingBuffer<DataTimeStamp>::GetSample(*(void *)(v51 + 192), *(_DWORD *)(v51 + 224) - 1);
        double v53 = v54;
      }
      double v55 = v50;
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v18 + 432));
      std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(v18 + 456));
      uint64_t v56 = *(void *)(v18 + 480);
      uint64_t v57 = *(void *)(v18 + 488);
      while (v57 != v56)
      {
        v57 -= 24;
        *(void *)info = v57;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)info);
      }
      double v58 = v21 - v55;
      *(void *)(v18 + 488) = v56;
      *(void *)(v18 + 416) = *(void *)(v18 + 408);
      uint64_t v59 = *(void *)(v18 + 104);
      if (v52 || v58 > v53)
      {
        *(_DWORD *)info = 0;
        if (MixViterbiProd::getForceDecodeTimeFramesRelativeToPresent((MixViterbiProd *)v59, v58, (int *)info)
          && *(int *)info > *(_DWORD *)(v59 + 216))
        {
          MixViterbiProd::updateDecode_Post(v59, (void *)(v18 + 432), (char **)(v18 + 408), (uint64_t *)(v18 + 456), *(int *)info);
        }
      }
      else
      {
        if (*(unsigned char *)(v59 + 232)) {
          __assert_rtn("DecodeFromConvergence_Post", "MixViterbiProd.cpp", 204, "!mNeverConverged");
        }
        MixViterbiProd::updateDecode_Post(*(void *)(v18 + 104), (void *)(v18 + 432), (char **)(v18 + 408), (uint64_t *)(v18 + 456), *(_DWORD *)(v59 + 224));
      }
      if (*(void *)(v18 + 440) != *(void *)(v18 + 432) && *(void *)(v18 + 416) != *(void *)(v18 + 408))
      {
        EndpointVAD3::TranslateFullPosteriorsToMarginalized(v18, (float ***)(v18 + 456), (uint64_t *)(v18 + 480), *(unsigned int ***)(v18 + 376), (int **)(v18 + 384));
        uint64_t v60 = *(void *)(v18 + 112);
        if (*(void *)(v18 + 120) != v60)
        {
          unint64_t v61 = 0;
          do
          {
            EndpointVAD3::UpdateAndDispatchDecisions(v18, (uint64_t **)(v18 + 432), *(void **)(v18 + 480), (uint64_t *)(v18 + 408), *(void *)(v60 + 8 * v61), v61);
            ++v61;
            uint64_t v60 = *(void *)(v18 + 112);
          }
          while (v61 < (*(void *)(v18 + 120) - v60) >> 3);
        }
      }
    }
  }
  mData = (*a5)->mBuffers[0].mData;
  unint64_t v46 = (*a7)->mBuffers[0].mData;
  if (mData != v46) {
    memcpy(v46, mData, (*a5)->mBuffers[0].mDataByteSize);
  }
  uint64_t result = 0;
  LODWORD(v17) = *((_DWORD *)this + 84);
  *((double *)this + 75) = *((double *)this + 75) + (double)*(unint64_t *)&v17;
  return result;
}

void sub_1BB6E4558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUEndpointVAD3::CanScheduleParameters(AUEndpointVAD3 *this)
{
  return 0;
}

uint64_t AUEndpointVAD3::SetProperty(AUEndpointVAD3 *this, int a2, int a3, unsigned int a4, CFDictionaryRef theDict, unsigned int a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956431;
  switch(a2)
  {
    case 65010:
      if (*((unsigned char *)this + 17)) {
        return 4294956447;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CommonParameters");
      CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ConfigurationParameters");
      CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ULDATParameters");
      CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ASAParameters");
      CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ViterbiParameters");
      EndpointVAD2::SetProperties(Value, (CFTypeRef *)(*((void *)this + 68) + 168), v17);
      EndpointVAD2::SetProperties(v13, (CFTypeRef *)(*((void *)this + 68) + 176), v18);
      EndpointVAD2::SetProperties(v14, (CFTypeRef *)(*((void *)this + 68) + 184), v19);
      EndpointVAD2::SetProperties(v15, (CFTypeRef *)(*((void *)this + 68) + 192), v20);
      EndpointVAD2::SetProperties(v16, (CFTypeRef *)(*((void *)this + 68) + 200), v21);
      uint64_t result = 0;
      *((unsigned char *)this + 552) = 1;
      return result;
    case 65011:
    case 65012:
    case 65013:
    case 65014:
    case 65015:
    case 65016:
    case 65017:
    case 65018:
    case 65019:
    case 65020:
    case 65021:
    case 65033:
    case 65034:
    case 65035:
    case 65036:
    case 65037:
    case 65038:
    case 65039:
    case 65040:
    case 65041:
    case 65042:
    case 65043:
    case 65044:
      return result;
    case 65022:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 24) = *(unsigned char *)theDict == 0;
      return result;
    case 65023:
      AUEndpointVAD3::AddObserver(this, (uint64_t)theDict);
      goto LABEL_25;
    case 65024:
      if (*(unsigned char *)theDict)
      {
        ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
        EndpointVAD3::DoneProcessingAudio(*((EndpointVAD3 **)this + 68), v9);
      }
      goto LABEL_25;
    case 65025:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 136) = *(_DWORD *)theDict;
      return result;
    case 65026:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 140) = *(_DWORD *)theDict;
      return result;
    case 65027:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 144) = *(_DWORD *)theDict;
      return result;
    case 65028:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 148) = *(_DWORD *)theDict;
      return result;
    case 65029:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 152) = *(_DWORD *)theDict;
      return result;
    case 65030:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 156) = *(_DWORD *)theDict;
      return result;
    case 65031:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 160) = *(_DWORD *)theDict;
      return result;
    case 65032:
      uint64_t result = 0;
      *(_DWORD *)(*((void *)this + 68) + 164) = *(_DWORD *)theDict;
      return result;
    default:
      if (a2 == 3700) {
        return result;
      }
      if (a2 != 21) {
        return 4294956417;
      }
      if (a6 >= 4)
      {
        int v10 = *(_DWORD *)theDict;
        int v11 = *(_DWORD *)theDict != 0;
        if (v11 != (*(unsigned int (**)(AUEndpointVAD3 *))(*(void *)this + 576))(this)) {
          (*(void (**)(AUEndpointVAD3 *, BOOL))(*(void *)this + 584))(this, v10 != 0);
        }
LABEL_25:
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = 4294956445;
      }
      break;
  }
  return result;
}

void AUEndpointVAD3::AddObserver(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[71];
  unint64_t v5 = a1[72];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = a1[70];
    uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    CFDictionaryRef v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    *CFDictionaryRef v13 = a2;
    float v6 = v13 + 1;
    CFDictionaryRef v15 = (char *)a1[71];
    CFDictionaryRef v16 = (char *)a1[70];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--CFDictionaryRef v13 = v17;
      }
      while (v15 != v16);
      CFDictionaryRef v15 = (char *)a1[70];
    }
    a1[70] = v13;
    a1[71] = v6;
    a1[72] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v4 = a2;
    float v6 = v4 + 1;
  }
  a1[71] = v6;
}

uint64_t AUEndpointVAD3::GetProperty(AUEndpointVAD3 *this, int a2, int a3, unsigned int a4, void **a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  switch(a2)
  {
    case 65010:
      if (EndpointVAD3LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
      }
      if (EndpointVAD3LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(void *)EndpointVAD3LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v25 = 136315394;
      float v26 = "AUEndpointVAD3.cpp";
      __int16 v27 = 1024;
      int v28 = 457;
      uint64_t v24 = "%25s:%-5d The top-level parameter data structure is not saved internally! Instead, you should query specific"
            " AU properties individually.";
      goto LABEL_96;
    case 65011:
      uint64_t v10 = *(void *)(*((void *)this + 68) + 32);
      goto LABEL_19;
    case 65012:
      uint64_t v11 = *(void *)(*((void *)this + 68) + 32);
      goto LABEL_21;
    case 65013:
      uint64_t v12 = *(void *)(*((void *)this + 68) + 32);
      int v13 = *(_DWORD *)(v12 + 160);
      uint64_t v14 = *(void *)(v12 + 24);
      CFDictionaryRef v15 = (float **)a5;
      int v16 = 10;
      goto LABEL_27;
    case 65014:
      uint64_t result = 0;
      int v9 = 10;
      goto LABEL_74;
    case 65015:
      uint64_t result = 0;
      int v9 = *(_DWORD *)(*((void *)this + 68) + 84);
      goto LABEL_74;
    case 65016:
      uint64_t v10 = *(void *)(*((void *)this + 68) + 48);
LABEL_19:
      uint64_t v17 = *(void *)(*(void *)(v10 + 112) + 48);
      memcpy(a5[2], *(const void **)(v17 + 16), *(unsigned int *)(v17 + 12));
      uint64_t result = 0;
      int v18 = *(_DWORD *)(v17 + 12);
      *((_DWORD *)a5 + 2) = v18;
      *((_DWORD *)a5 + 3) = v18;
      return result;
    case 65017:
      uint64_t v11 = *(void *)(*((void *)this + 68) + 48);
LABEL_21:
      (*(void (**)(void, void **))(**(void **)(v11 + 8) + 40))(*(void *)(v11 + 8), a5);
      return 0;
    case 65018:
      uint64_t v19 = *((void *)this + 68);
      int v16 = *(_DWORD *)(v19 + 88) + 19;
      uint64_t v20 = *(void *)(v19 + 48);
      int v13 = *(_DWORD *)(v20 + 160);
      uint64_t v14 = *(void *)(v20 + 24);
      goto LABEL_26;
    case 65019:
      uint64_t result = 0;
      int v9 = *(_DWORD *)(*((void *)this + 68) + 88) + 19;
      goto LABEL_74;
    case 65020:
      uint64_t result = 0;
      int v9 = *(_DWORD *)(*((void *)this + 68) + 88);
      goto LABEL_74;
    case 65021:
      uint64_t v21 = *((void *)this + 68);
      int v16 = *(_DWORD *)(v21 + 92);
      int v13 = *(_DWORD *)(v21 + 80);
      uint64_t v14 = *(void *)(v21 + 64);
LABEL_26:
      CFDictionaryRef v15 = (float **)a5;
LABEL_27:
      EndpointVAD2::GetInterleavedFeaturesFromQueue(v15, v16, v13, v14);
      return 0;
    case 65022:
      uint64_t result = 0;
      *(unsigned char *)a5 = *(_DWORD *)(*((void *)this + 68) + 24) == 0;
      return result;
    case 65023:
      if (EndpointVAD3LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
      }
      if (EndpointVAD3LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(void *)EndpointVAD3LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v25 = 136315394;
      float v26 = "AUEndpointVAD3.cpp";
      __int16 v27 = 1024;
      int v28 = 544;
      uint64_t v24 = "%25s:%-5d kAUEndpointVAD3Property_EventHandler is write-only.";
      goto LABEL_96;
    case 65024:
      if (EndpointVAD3LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
      }
      if (EndpointVAD3LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(void *)EndpointVAD3LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v25 = 136315394;
      float v26 = "AUEndpointVAD3.cpp";
      __int16 v27 = 1024;
      int v28 = 549;
      uint64_t v24 = "%25s:%-5d kAUEndpointVAD3Property_DoneProcessingAudioForNonRealTimeDecode is write-only.";
      goto LABEL_96;
    case 65025:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 136);
      goto LABEL_48;
    case 65026:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 140);
      goto LABEL_48;
    case 65027:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 144);
      goto LABEL_48;
    case 65028:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 148);
      goto LABEL_48;
    case 65029:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 152);
      goto LABEL_48;
    case 65030:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 156);
      goto LABEL_48;
    case 65031:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 160);
      goto LABEL_48;
    case 65032:
      uint64_t result = 0;
      int v22 = *(_DWORD *)(*((void *)this + 68) + 164);
LABEL_48:
      *(_DWORD *)a5 = v22;
      return result;
    case 65033:
      if (EndpointVAD3LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
      }
      if (EndpointVAD3LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(void *)EndpointVAD3LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v25 = 136315394;
      float v26 = "AUEndpointVAD3.cpp";
      __int16 v27 = 1024;
      int v28 = 594;
      uint64_t v24 = "%25s:%-5d kAUEndpointVAD3Property_RecurrentVADSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_96;
    case 65034:
      if (EndpointVAD3LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
      }
      if (EndpointVAD3LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(void *)EndpointVAD3LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v25 = 136315394;
      float v26 = "AUEndpointVAD3.cpp";
      __int16 v27 = 1024;
      int v28 = 599;
      uint64_t v24 = "%25s:%-5d kAUEndpointVAD3Property_RecurrentVADNonspeechDetectionEvent cannot be directly accessed.";
      goto LABEL_96;
    case 65035:
      if (EndpointVAD3LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
      }
      if (EndpointVAD3LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(void *)EndpointVAD3LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        return 4294956449;
      }
      int v25 = 136315394;
      float v26 = "AUEndpointVAD3.cpp";
      __int16 v27 = 1024;
      int v28 = 604;
      uint64_t v24 = "%25s:%-5d kAUEndpointVAD3Property_EndpointerSpeechDetectionEvent cannot be directly accessed.";
      goto LABEL_96;
    case 65036:
      if (EndpointVAD3LogScope(void)::once != -1) {
        dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
      }
      if (EndpointVAD3LogScope(void)::scope)
      {
        uint64_t v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
        if (!*(void *)EndpointVAD3LogScope(void)::scope) {
          return 4294956449;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = 136315394;
        float v26 = "AUEndpointVAD3.cpp";
        __int16 v27 = 1024;
        int v28 = 609;
        uint64_t v24 = "%25s:%-5d kAUEndpointVAD3Property_EndpointerNonspeechDetectionEvent cannot be directly accessed.";
LABEL_96:
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v25, 0x12u);
      }
      return 4294956449;
    case 65037:
    case 65038:
    case 65039:
    case 65040:
    case 65041:
    case 65042:
      return result;
    case 65043:
      uint64_t result = 0;
      uint64_t v23 = *(void *)(*((void *)this + 68) + 32);
      goto LABEL_71;
    case 65044:
      uint64_t result = 0;
      uint64_t v23 = *(void *)(*((void *)this + 68) + 48);
LABEL_71:
      *(double *)a5 = *(float *)(v23 + 164);
      return result;
    case 65045:
      uint64_t result = 0;
      *a5 = (void *)(*((void *)this + 68) + 536);
      return result;
    default:
      if (a2 == 3700)
      {
        uint64_t result = 0;
        int v9 = *((unsigned __int8 *)this + 376);
      }
      else
      {
        if (a2 != 21) {
          return result;
        }
        int v9 = (*(uint64_t (**)(AUEndpointVAD3 *))(*(void *)this + 576))(this);
        uint64_t result = 0;
      }
LABEL_74:
      *(_DWORD *)a5 = v9;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD3::GetPropertyInfo(AUEndpointVAD3 *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  switch(a2)
  {
    case 65010:
      char v7 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_6;
    case 65011:
    case 65013:
    case 65016:
    case 65018:
    case 65021:
      char v7 = 0;
      unsigned int v8 = 0;
      goto LABEL_22;
    case 65012:
    case 65017:
      char v7 = 0;
      unsigned int v8 = 40;
      goto LABEL_22;
    case 65014:
    case 65015:
    case 65019:
    case 65020:
    case 65037:
    case 65040:
      goto LABEL_11;
    case 65022:
      char v7 = 1;
      goto LABEL_16;
    case 65023:
      unsigned int v8 = 8;
      goto LABEL_21;
    case 65024:
      unsigned int v8 = 0;
      char v7 = *((_DWORD *)this + 146) != 0;
      goto LABEL_22;
    case 65025:
    case 65026:
    case 65027:
    case 65028:
    case 65029:
    case 65030:
    case 65031:
    case 65032:
      char v7 = *((unsigned char *)this + 17) ^ 1;
      goto LABEL_12;
    case 65033:
    case 65034:
    case 65035:
    case 65036:
      char v7 = 0;
LABEL_16:
      unsigned int v8 = 1;
      goto LABEL_22;
    case 65038:
    case 65039:
    case 65041:
    case 65042:
    case 65043:
    case 65044:
      char v7 = 0;
LABEL_6:
      unsigned int v8 = 8;
      goto LABEL_22;
    case 65045:
      char v7 = 0;
      unsigned int v8 = 392;
      goto LABEL_22;
    default:
      if (a2 == 21)
      {
        unsigned int v8 = 4;
LABEL_21:
        char v7 = 1;
      }
      else
      {
        if (a2 != 3700) {
          return 4294956417;
        }
LABEL_11:
        char v7 = 0;
LABEL_12:
        unsigned int v8 = 4;
      }
LABEL_22:
      uint64_t result = 0;
      *a6 = v7;
      *a5 = v8;
      break;
  }
  return result;
}

uint64_t AUEndpointVAD3::Reset(AUEndpointVAD3 *this)
{
  if (*((unsigned char *)this + 17) && *((_DWORD *)this + 146)) {
    (*(void (**)(AUEndpointVAD3 *))(*(void *)this + 56))(this);
  }
  return 0;
}

uint64_t AUEndpointVAD3::Initialize(AUEndpointVAD3 *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  (*(void (**)(AUEndpointVAD3 *))(*(void *)this + 64))(this);
  *((_DWORD *)this + 146) = 0;
  *((_OWORD *)this + 37) = 0u;
  double v2 = *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0) + 80);
  if (v2 != *(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 128), 0) + 80)) {
    return 4294956421;
  }
  if (*(double *)(ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0) + 80) < 8000.0)
  {
    if (EndpointVAD3LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
    }
    if (EndpointVAD3LogScope(void)::scope)
    {
      uint64_t v4 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(void *)EndpointVAD3LogScope(void)::scope) {
        return 4294956421;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v9 = 136315394;
      *(void *)&v9[4] = "AUEndpointVAD3.cpp";
      *(_WORD *)&v9[12] = 1024;
      *(_DWORD *)&v9[14] = 94;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Audio sampling rate must be 8000 Hz or higher.", v9, 0x12u);
    }
    return 4294956421;
  }
  if (*((unsigned char *)this + 552))
  {
    unint64_t v5 = (EndpointVAD3 *)*((void *)this + 68);
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUEndpointVAD3 *)((char *)this + 80), 0);
    long long v7 = *(_OWORD *)(Element + 96);
    *(_OWORD *)int v9 = *(_OWORD *)(Element + 80);
    *(_OWORD *)&v9[16] = v7;
    uint64_t v10 = *(void *)(Element + 112);
    EndpointVAD3::Initialize(v5, (const CAStreamBasicDescription *)v9);
  }
  if (EndpointVAD3LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
  }
  if (!EndpointVAD3LogScope(void)::scope)
  {
    unsigned int v8 = MEMORY[0x1E4F14500];
LABEL_20:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v9 = 136315394;
      *(void *)&v9[4] = "AUEndpointVAD3.cpp";
      *(_WORD *)&v9[12] = 1024;
      *(_DWORD *)&v9[14] = 109;
      _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUEndpointVAD3: The top-level plist property is unset. Setting the AU to bypass mode (no VAD outputs).", v9, 0x12u);
    }
    goto LABEL_22;
  }
  unsigned int v8 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
  if (*(void *)EndpointVAD3LogScope(void)::scope) {
    goto LABEL_20;
  }
LABEL_22:
  (*(void (**)(AUEndpointVAD3 *, uint64_t))(*(void *)this + 584))(this, 1);
  return 0;
}

uint64_t AUSpeakerProtectionV2::SetBypassEffect(uint64_t this, char a2)
{
  *(unsigned char *)(this + 529) = a2;
  return this;
}

uint64_t AUSpeakerProtectionV2::ShouldBypassEffect(AUSpeakerProtectionV2 *this)
{
  return *((unsigned __int8 *)this + 529);
}

uint64_t AUSpeakerProtectionV2::GetScopeExtended(AUSpeakerProtectionV2 *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 560;
  }
  else {
    return 0;
  }
}

BOOL AUSpeakerProtectionV2::ValidFormat(AUSpeakerProtectionV2 *this, const AudioStreamBasicDescription *a2, int a3, AudioStreamBasicDescription *a4)
{
  if (a2 == 2 || (BOOL result = 1, a2 == 1) && !a3)
  {
    BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
    if (result) {
      return a4->mChannelsPerFrame - 1 < 2;
    }
  }
  return result;
}

uint64_t AUSpeakerProtectionV2::SupportedNumChannels(AUSpeakerProtectionV2 *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSpeakerProtectionV2::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 2;
}

BOOL AUSpeakerProtectionV2::StreamFormatWritable(AUSpeakerProtectionV2 *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSpeakerProtectionV2::SupportsTail(AUSpeakerProtectionV2 *this)
{
  return 1;
}

double AUSpeakerProtectionV2::GetTailTime(AUSpeakerProtectionV2 *this)
{
  return 0.0;
}

double AUSpeakerProtectionV2::GetLatency(AUSpeakerProtectionV2 *this)
{
  return 0.0;
}

uint64_t AUSpeakerProtectionV2::RestoreState(AUSpeakerProtectionV2 *this, const void *a2)
{
  if (!*((unsigned char *)this + 640)) {
    return 0;
  }
  uint64_t result = ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  ++*((_DWORD *)this + 137);
  return result;
}

UInt8 *AUSpeakerProtectionV2::SaveExtendedScopes(AUSpeakerProtectionV2 *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUSpeakerProtectionV2::GetParameterInfo(AUSpeakerProtectionV2 *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 == 4)
  {
    AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
    _D8 = 0x4248000043020000;
    AudioUnitParameterValue v12 = 10.0;
    CFStringRef v14 = @"temperature";
    int v11 = 1073782784;
    switch(a3)
    {
      case 12:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4100000041200000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.0;
        CFStringRef v14 = @"Reb20C";
        goto LABEL_43;
      case 13:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3DCCCCCD40000000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.0;
        CFStringRef v14 = @"Rshunt";
        goto LABEL_43;
      case 14:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3ECCCCCD3FC00000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.0;
        CFStringRef v14 = @"Rampout";
        goto LABEL_43;
      case 15:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x387776C53A83126FLL;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.0;
        CFStringRef v14 = @"mt";
        goto LABEL_43;
      case 16:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3EA18BB541200000;
        int v11 = -1073741824;
        CFStringRef v14 = @"ct";
        AudioUnitParameterValue v12 = 0.001;
        goto LABEL_43;
      case 17:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x44EA858645DAC000;
        int v11 = -1073741824;
        CFStringRef v14 = @"kt";
        AudioUnitParameterValue v12 = 100.0;
        goto LABEL_43;
      case 18:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4100000041700000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 5.0;
        CFStringRef v14 = @"ag";
        goto LABEL_43;
      case 19:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3F80000040000000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.25;
        CFStringRef v14 = @"g_bw";
        goto LABEL_43;
      case 20:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3F80000040400000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.5;
        CFStringRef v14 = @"Q_d";
        goto LABEL_43;
      case 21:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3F8B851F41200000;
        int v11 = -1073741824;
        CFStringRef v14 = @"phi";
        goto LABEL_42;
      case 22:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x3E99999A3F800000;
        int v11 = -1073741824;
        CFStringRef v14 = @"x_lim";
LABEL_36:
        AudioUnitParameterValue v12 = 0.000001;
        goto LABEL_43;
      case 23:
        goto LABEL_43;
      case 24:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        CFStringRef v14 = @"OL temperature";
        goto LABEL_43;
      case 25:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x42C8000043480000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.0;
        CFStringRef v14 = @"T_sett_vc";
        goto LABEL_43;
      case 26:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x41A0000043480000;
        int v11 = -1073741824;
        AudioUnitParameterValue v12 = 0.0;
        CFStringRef v14 = @"T_sett_mg";
        goto LABEL_43;
      case 27:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4040000042C80000;
        int v11 = -1073741824;
        CFStringRef v14 = @"Tc_vc";
        goto LABEL_42;
      case 28:
        AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
        _D8 = 0x4334000043FA0000;
        int v11 = -1073741824;
        CFStringRef v14 = @"Tc_mg";
LABEL_42:
        AudioUnitParameterValue v12 = 0.1;
LABEL_43:
        buffer->cfNameString = v14;
        buffer->AudioUnitParameterOptions flags = 0x8000000;
        CFStringGetCString(v14, buffer->name, 52, 0x8000100u);
        uint64_t v5 = 0;
        buffer->unit = v13;
        buffer->minCFDictionaryRef Value = v12;
        *(void *)&buffer->maxCFDictionaryRef Value = _D8;
        buffer->flags += v11;
        break;
      default:
        return 4294956418;
    }
  }
  else
  {
    if (!a2)
    {
      uint64_t v5 = 4294956418;
      __asm { FMOV            V8.2S, #1.0 }
      int v11 = -1073741824;
      AudioUnitParameterValue v12 = 0.0;
      AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Boolean;
      CFStringRef v14 = @"thermal protection enabled";
      switch(a3)
      {
        case 0:
          goto LABEL_43;
        case 1:
          CFStringRef v14 = @"displacement protection enabled";
          goto LABEL_43;
        case 2:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x42C8000043160000;
          CFStringRef v14 = @"temperature limit";
          goto LABEL_43;
        case 3:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x4248000042C80000;
          CFStringRef v14 = @"ambient temperature";
          goto LABEL_43;
        case 4:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x4120000041A00000;
          CFStringRef v14 = @"hard temp limit headroom";
          goto LABEL_43;
        case 5:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3E8000003F800000;
          CFStringRef v14 = @"ThermalFFSpeedupFactor";
          goto LABEL_43;
        case 6:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3D23D70A41200000;
          CFStringRef v14 = @"Thermal kI";
          goto LABEL_43;
        case 7:
          _D8 = 0x3C23D70A44960000;
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Seconds;
          CFStringRef v14 = @"thermal gain attack time";
          goto LABEL_17;
        case 8:
          _D8 = 0x3F80000044960000;
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Seconds;
          CFStringRef v14 = @"thermal gain release time";
          goto LABEL_17;
        case 9:
          _D8 = 0x38D1B7173F000000;
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Seconds;
          CFStringRef v14 = @"peak attack time";
          goto LABEL_19;
        case 10:
          _D8 = 0x3F00000043B40000;
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Seconds;
          CFStringRef v14 = @"peak decay time";
LABEL_17:
          int v11 = -1069547520;
          AudioUnitParameterValue v12 = 0.0001;
          goto LABEL_43;
        case 11:
          _D8 = 0x3727C5AC43B40000;
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Seconds;
          CFStringRef v14 = @"feedback integration time";
LABEL_19:
          int v11 = -1069547520;
          goto LABEL_36;
        case 29:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3F80000040000000;
          CFStringRef v14 = @"LookaheadDelay_ms";
          goto LABEL_43;
        case 30:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 0x3F8000003FAAAAABLL;
          CFStringRef v14 = @"thermal gain";
          goto LABEL_23;
        case 31:
          _D8 = 0xC140000040800000;
          AudioUnitParameterValue v12 = -12.0;
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Decibels;
          CFStringRef v14 = @"displacement gain";
LABEL_23:
          int v11 = 1073782784;
          goto LABEL_43;
        case 32:
          _D8 = 0x40A0000041F00000;
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Seconds;
          CFStringRef v14 = @"spk pwr averaging window time";
          goto LABEL_42;
        case 33:
          AudioUnitParameterUnit v13 = kAudioUnitParameterUnit_Generic;
          _D8 = 1101004800;
          int v11 = 1077977088;
          CFStringRef v14 = @"modeled speaker power";
          goto LABEL_43;
        default:
          return v5;
      }
    }
    return 4294956418;
  }
  return v5;
}

uint64_t AUSpeakerProtectionV2::GetParameterList(AUSpeakerProtectionV2 *this, int a2, unsigned int *__dst, unsigned int *a4)
{
  __src[17] = *MEMORY[0x1E4F143B8];
  if (a2 == 4)
  {
    int v35 = a4;
    uint64_t v24 = 28;
    int v33 = 26;
    __unint64_t n = 0x190000001BLL;
    __src[0] = 0x150000000CLL;
    uint64_t v25 = 24;
    int v29 = 23;
    int v7 = 13;
    int v8 = 14;
    int v9 = 18;
    uint64_t v32 = 20;
    int v11 = 19;
    int v28 = 22;
    int v13 = 17;
    int v14 = 16;
    int v27 = 15;
    uint64_t v16 = 64;
    uint64_t v17 = 60;
    uint64_t v18 = 56;
    uint64_t v19 = 52;
    uint64_t v20 = 48;
    uint64_t v21 = 44;
    uint64_t v22 = 40;
    uint64_t v6 = 36;
    uint64_t v23 = 32;
    uint64_t v12 = 12;
    uint64_t v15 = 8;
    uint64_t v26 = 16;
    int v10 = 20;
    int v5 = 24;
    int v4 = 28;
    unsigned int v30 = 17;
  }
  else
  {
    if (a2)
    {
      unsigned int v30 = 0;
      goto LABEL_9;
    }
    int v35 = a4;
    LODWORD(__src[0]) = 2;
    uint64_t v32 = 16;
    int v4 = 31;
    __unint64_t n = 30;
    int v33 = 1;
    int v5 = 33;
    uint64_t v6 = 32;
    int v7 = 29;
    int v8 = 5;
    int v9 = 11;
    int v10 = 10;
    int v11 = 9;
    uint64_t v12 = 8;
    int v13 = 7;
    int v14 = 3;
    uint64_t v15 = 4;
    uint64_t v16 = 60;
    uint64_t v17 = 56;
    uint64_t v18 = 52;
    uint64_t v19 = 48;
    uint64_t v20 = 44;
    uint64_t v21 = 40;
    uint64_t v22 = 36;
    uint64_t v23 = 28;
    uint64_t v24 = 24;
    uint64_t v25 = 20;
    uint64_t v26 = 12;
    int v27 = 4;
    int v28 = 8;
    int v29 = 32;
    unsigned int v30 = 16;
  }
  *(_DWORD *)((char *)__src + v15) = v27;
  *(_DWORD *)((char *)__src + v12) = v14;
  *(_DWORD *)((char *)__src + v26) = v13;
  *(_DWORD *)((char *)__src + v32) = v28;
  *(_DWORD *)((char *)__src + v25) = v11;
  *(_DWORD *)((char *)__src + v24) = v10;
  *(_DWORD *)((char *)__src + v23) = v9;
  *(_DWORD *)((char *)__src + v6) = v8;
  *(_DWORD *)((char *)__src + v22) = v7;
  *(_DWORD *)((char *)__src + v21) = v29;
  *(_DWORD *)((char *)__src + v20) = v5;
  *(_DWORD *)((char *)__src + v19) = HIDWORD(__n);
  *(_DWORD *)((char *)__src + v18) = v33;
  *(_DWORD *)((char *)__src + v17) = __n;
  *(_DWORD *)((char *)__src + v16) = v4;
  if (__dst) {
    memcpy(__dst, __src, 4 * v30);
  }
  a4 = v35;
LABEL_9:
  *a4 = v30;
  return 0;
}

uint64_t AUSpeakerProtectionV2::SetBusCount(AUSpeakerProtectionV2 *this, int a2, int a3)
{
  if (a2 == 1 && a3 == 1)
  {
    unint64_t v3 = (AUSpeakerProtectionV2 *)((char *)this + 80);
LABEL_7:
    ausdk::AUScope::SetNumberOfElements(v3, 1u);
    return 0;
  }
  uint64_t v4 = 4294956445;
  if (a2 == 2 && a3 == 1)
  {
    unint64_t v3 = (AUSpeakerProtectionV2 *)((char *)this + 128);
    goto LABEL_7;
  }
  return v4;
}

BOOL AUSpeakerProtectionV2::BusCountWritable(AUSpeakerProtectionV2 *this, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t AUSpeakerProtectionV2::Render(AUSpeakerProtectionV2 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  int v8 = (AUSpeakerProtectionV2 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 80), 0);
  uint64_t v10 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0);
  uint64_t v11 = ausdk::AUScope::GetElement(v8, 0);
  if (!v11 || !*(_DWORD *)(v11 + 172)) {
    return 4294956420;
  }
  uint64_t v12 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v12, a2, a3, 0, a4);
  if (!result)
  {
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUSpeakerProtectionV2 *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUSpeakerProtectionV2::ProcessMultipleBufferLists(AUSpeakerProtectionV2 *this, unsigned int *a2, unsigned int a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  uint64_t v11 = (AUSpeakerProtectionV2 *)((char *)this + 680);
  uint64_t v12 = SimpleMeters::ProcessInputBufferList((AUSpeakerProtectionV2 *)((char *)this + 680), a3, *a5);
  if (v12)
  {
    uint64_t v14 = v12;
    AUSpeakerProtectionV2::AttenuateInputToOutput(this, a3, a5, a7, v13);
    return v14;
  }
  if ((*(unsigned int (**)(AUSpeakerProtectionV2 *))(*(void *)this + 576))(this))
  {
    uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0);
    uint64_t v17 = *a7;
    unint64_t mNumberBuffers = (*a7)->mNumberBuffers;
    if (mNumberBuffers)
    {
      uint64_t v19 = Element;
      unint64_t v20 = 0;
      uint64_t v21 = 16;
      do
      {
        uint64_t v22 = *(const void **)((char *)&(*a5)->mNumberBuffers + v21);
        uint64_t v23 = *(void **)((char *)&v17->mNumberBuffers + v21);
        if (v22 != v23)
        {
          memcpy(v23, v22, *(_DWORD *)(v19 + 104) * a3);
          uint64_t v17 = *a7;
          unint64_t mNumberBuffers = (*a7)->mNumberBuffers;
        }
        ++v20;
        v21 += 16;
      }
      while (v20 < mNumberBuffers);
    }
    *((unsigned char *)this + 530) = 1;
  }
  else
  {
    if (*((unsigned char *)this + 530))
    {
      (*(void (**)(AUSpeakerProtectionV2 *, void, void))(*(void *)this + 72))(this, 0, 0);
      *((unsigned char *)this + 530) = 0;
    }
    if (!*((unsigned char *)this + 528)
      || (uint64_t v25 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 80), 0) + 108),
          uint64_t v26 = *((void *)this + 77),
          uint64_t v27 = *((void *)this + 76),
          v25 != (v26 - v27) >> 4)
      || v25 != *((_DWORD *)this + 136))
    {
      AUSpeakerProtectionV2::AttenuateInputToOutput(this, a3, a5, a7, v15);
      SimpleMeters::ProcessOutputBufferList(v11, a3, *a7);
      return 0;
    }
    int v28 = *((_DWORD *)this + 137);
    float v163 = v11;
    if (v28 != *((_DWORD *)this + 138))
    {
      if (v26 != v27)
      {
        unint64_t v29 = 0;
        unsigned int v30 = 1;
        do
        {
          uint64_t v31 = 16 * v29;
          uint64_t v32 = *(void *)(v27 + 16 * v29);
          int v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(float *)(v32 + 128) = ausdk::AUElement::GetParameter(v33, 2u);
          uint64_t v34 = *(void *)(*((void *)this + 76) + v31);
          int v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(float *)(v34 + 132) = ausdk::AUElement::GetParameter(v35, 4u);
          uint64_t v36 = *(void *)(*((void *)this + 76) + v31);
          int v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(float *)(v36 + 84) = ausdk::AUElement::GetParameter(v37, 3u);
          uint64_t v38 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(double *)(v38 + 344) = ausdk::AUElement::GetParameter(v39, 7u);
          uint64_t v40 = *(void *)(*((void *)this + 76) + v31);
          float v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(double *)(v40 + 352) = ausdk::AUElement::GetParameter(v41, 8u);
          uint64_t v42 = *(void *)(*((void *)this + 76) + v31);
          int v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(double *)(v42 + 360) = ausdk::AUElement::GetParameter(v43, 9u);
          uint64_t v44 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(double *)(v44 + 368) = ausdk::AUElement::GetParameter(v45, 0xAu);
          uint64_t v46 = *(void *)(*((void *)this + 76) + v31);
          unint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(double *)(v46 + 376) = ausdk::AUElement::GetParameter(v47, 0xBu);
          uint64_t v48 = *(void *)(*((void *)this + 76) + v31);
          int v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v48 + 384) = ausdk::AUElement::GetParameter(v49, 0xDu);
          uint64_t v50 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v50 + 392) = ausdk::AUElement::GetParameter(v51, 0xEu);
          uint64_t v52 = *(void *)(*((void *)this + 76) + v31);
          double v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v52 + 400) = ausdk::AUElement::GetParameter(v53, 0xFu);
          uint64_t v54 = *(void *)(*((void *)this + 76) + v31);
          double v55 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v54 + 408) = ausdk::AUElement::GetParameter(v55, 0x10u);
          uint64_t v56 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v57 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v56 + 416) = ausdk::AUElement::GetParameter(v57, 0x11u);
          uint64_t v58 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v59 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v58 + 424) = ausdk::AUElement::GetParameter(v59, 0x12u);
          uint64_t v60 = *(void *)(*((void *)this + 76) + v31);
          unint64_t v61 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v60 + 432) = ausdk::AUElement::GetParameter(v61, 0x13u);
          uint64_t v62 = *(void *)(*((void *)this + 76) + v31);
          BOOL v63 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v62 + 440) = ausdk::AUElement::GetParameter(v63, 0x14u);
          uint64_t v64 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v65 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v64 + 448) = ausdk::AUElement::GetParameter(v65, 0x15u);
          uint64_t v66 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v67 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v66 + 456) = ausdk::AUElement::GetParameter(v67, 0x16u);
          uint64_t v68 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v69 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v68 + 464) = ausdk::AUElement::GetParameter(v69, 0x19u);
          uint64_t v70 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v71 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v70 + 472) = ausdk::AUElement::GetParameter(v71, 0x1Au);
          uint64_t v72 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v73 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v72 + 480) = ausdk::AUElement::GetParameter(v73, 0x1Bu);
          uint64_t v74 = *(void *)(*((void *)this + 76) + v31);
          char v75 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          *(double *)(v74 + 488) = ausdk::AUElement::GetParameter(v75, 0x1Cu);
          uint64_t v76 = *(void *)(*((void *)this + 76) + v31);
          uint64_t v77 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v30 - 1);
          float Parameter = ausdk::AUElement::GetParameter(v77, 0xCu);
          if (Parameter != -1.0) {
            *(float *)(v76 + 104) = Parameter;
          }
          uint64_t v79 = *(void *)(*((void *)this + 76) + v31);
          float v80 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(double *)(v79 + 968) = ausdk::AUElement::GetParameter(v80, 0x1Du);
          uint64_t v81 = *(void *)(*((void *)this + 76) + v31);
          float v82 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(double *)(v81 + 880) = ausdk::AUElement::GetParameter(v82, 5u);
          uint64_t v83 = *(void *)(*((void *)this + 76) + v31);
          unint64_t v84 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
          *(float *)(v83 + 496) = ausdk::AUElement::GetParameter(v84, 0x20u);
          unint64_t v29 = v30;
          uint64_t v85 = *((void *)this + 77);
          uint64_t v27 = *((void *)this + 76);
          ++v30;
        }
        while (v29 < (v85 - v27) >> 4);
        if (v85 != v27)
        {
          unint64_t v86 = 0;
          unsigned int v87 = 1;
          do
          {
            (*(void (**)(void, double))(**(void **)(v27 + 16 * v86) + 24))(*(void *)(v27 + 16 * v86), *((double *)this + 67));
            unint64_t v86 = v87;
            uint64_t v27 = *((void *)this + 76);
            ++v87;
          }
          while (v86 < (*((void *)this + 77) - v27) >> 4);
        }
      }
      *((_DWORD *)this + 138) = v28;
    }
    double v89 = *((double *)this + 34);
    unint64_t v88 = *((void *)this + 35);
    clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
    double v90 = (double)v88 * 0.0000000416666667;
    double v91 = v90 - *(double *)&qword_1E9F7FFC0;
    clsp::CLSP_Log::printToSyslog((clsp::CLSP_Log *)(*((_DWORD *)this + 159) & 2), "RenderTime %d, RenderTimeDelta %f, HostTime %f", v92, (int)v89, v90 - *(double *)&qword_1E9F7FFC0, *(void *)&v90);
    double v93 = v90 + (double)a3 / *((double *)this + 67);
    clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
    qword_1E9F7FFC0 = *(void *)&v93;
    float v94 = (char *)*((void *)this + 77);
    uint64_t v95 = (float32x2_t **)*((void *)this + 76);
    if (v94 == (char *)v95)
    {
      uint64_t v95 = (float32x2_t **)*((void *)this + 77);
    }
    else
    {
      unint64_t v96 = 0;
      unsigned int v97 = 1;
      do
      {
        uint64_t v98 = 16 * v96;
        unint64_t v99 = v95[2 * v96];
        BOOL v100 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
        v99[15].i8[4] = ausdk::AUElement::GetParameter(v100, 0) != 0.0;
        uint64_t v101 = *(void *)(*((void *)this + 76) + v98);
        uint64_t v102 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
        *(unsigned char *)(v101 + 125) = ausdk::AUElement::GetParameter(v102, 1u) != 0.0;
        uint64_t v103 = *(void *)(*((void *)this + 76) + v98);
        int v104 = clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState(v97 - 1);
        (*(void (**)(uint64_t, char *))(*(void *)v103 + 136))(v103, v104);
        (*(void (**)(void, double))(**(void **)(*((void *)this + 76) + v98) + 128))(*(void *)(*((void *)this + 76) + v98), v91);
        unint64_t v96 = v97;
        float v94 = (char *)*((void *)this + 77);
        uint64_t v95 = (float32x2_t **)*((void *)this + 76);
        ++v97;
      }
      while (v96 < (v94 - (char *)v95) >> 4);
    }
    if (a3)
    {
      unsigned int v105 = 0;
      unint64_t v106 = *v95;
      unsigned int v107 = (*v95)[1].u32[0];
      __asm { FMOV            V8.2S, #1.0 }
      float v112 = (float32x2_t **)v94;
      do
      {
        if (a3 - v105 >= v107) {
          uint64_t v113 = v107;
        }
        else {
          uint64_t v113 = a3 - v105;
        }
        if (v112 == v95)
        {
          unint64_t v116 = 0;
          float v112 = v95;
        }
        else
        {
          uint64_t v114 = 0;
          unsigned int v115 = 1;
          do
          {
            (*(void (**)(float32x2_t *, char *, char *, uint64_t))(*(void *)v95[2 * v114] + 64))(v95[2 * v114], (char *)(*a5)->mBuffers[v114].mData + 4 * v105, (char *)(*a7)->mBuffers[v114].mData + 4 * v105, v113);
            uint64_t v114 = v115;
            float v94 = (char *)*((void *)this + 77);
            uint64_t v95 = (float32x2_t **)*((void *)this + 76);
            unint64_t v116 = (v94 - (char *)v95) >> 4;
            BOOL v117 = v116 > v115++;
          }
          while (v117);
          unint64_t v106 = *v95;
          unsigned int v107 = (*v95)[1].u32[0];
          float v112 = (float32x2_t **)*((void *)this + 77);
        }
        if (v106[1].i32[1] == v107 && v116 != 0)
        {
          float v119 = 0.0;
          float v120 = 1.0;
          unsigned int v121 = 1;
          BOOL v122 = v95;
          float32x2_t v123 = _D8;
          do
          {
            std::string v125 = *v122;
            v122 += 2;
            long long v124 = v125;
            float v126 = v125[8].f32[1];
            if (v126 < v120) {
              float v120 = v126;
            }
            float32x2_t v123 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v123, v124[111]), (int8x8_t)v124[111], (int8x8_t)v123);
            if (v119 < v124[17].f32[1]) {
              float v119 = v124[17].f32[1];
            }
            BOOL v117 = v116 > v121++;
          }
          while (v117);
          unsigned int v127 = 1;
          CFArrayRef v128 = v95;
          do
          {
            CFTypeRef v129 = *v128;
            v128 += 2;
            v129[8].f32[1] = v120;
            v129[111] = v123;
            v129[112].f32[0] = v119;
            BOOL v117 = v116 > v127++;
          }
          while (v117);
        }
        v105 += v113;
      }
      while (v105 < a3);
    }
    if (v94 == (char *)v95)
    {
      float v131 = 1.0;
      float v134 = 0.0;
      float v132 = 0.0;
    }
    else
    {
      unint64_t v130 = 0;
      float v131 = 1.0;
      float v132 = 0.0;
      unsigned int v133 = 1;
      float v134 = 0.0;
      do
      {
        long long v135 = (clsp::CLSP_Log *)(*((_DWORD *)this + 159) & 2);
        uint64_t v136 = 16 * v130;
        double v137 = (*(float (**)(float32x2_t *))(*(void *)v95[2 * v130] + 40))(v95[2 * v130]);
        CFDictionaryRef v138 = *(float **)(*((void *)this + 76) + 16 * v130);
        double v139 = v138[35];
        DisplacementFilterGaiunint64_t n = ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain((ClosedLoopSpeakerProtectionKernel *)v138);
        clsp::CLSP_Log::printToSyslog(v135, "Ch %d; T_CL=%6.2f; T_OL=%6.2f; DGain=%5.2f; TGain=%6.4f; tgtgain=%4.2f, hlimgain=%f, fbhlgain=%f",
          v141,
          v133 - 1,
          *(void *)&v137,
          *(void *)&v139,
          DisplacementFilterGain,
          v138[27],
          v138[17],
          v138[222],
          v138[223]);
        uint64_t v142 = *(void *)(*((void *)this + 76) + 16 * v130);
        float v143 = clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState(v133 - 1);
        (*(void (**)(uint64_t, char *))(*(void *)v142 + 144))(v142, v143);
        uint64_t v144 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v133 - 1);
        uint64_t v145 = *(void *)(*((void *)this + 76) + 16 * v130);
        float v146 = (*(float (**)(uint64_t))(*(void *)v145 + 40))(v145);
        ausdk::AUElement::SetParameter(v144, 0x17u, v146, 0);
        uint64_t v147 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v133 - 1);
        ausdk::AUElement::SetParameter(v147, 0x18u, *(float *)(*(void *)(*((void *)this + 76) + 16 * v130) + 140), 0);
        float v148 = *(float *)(*(void *)(*((void *)this + 76) + 16 * v130) + 512);
        unsigned int v149 = (char *)this + 16 * v130;
        float v150 = (clsp::CLSP_Log *)*((void *)v149 + 81);
        if (v150)
        {
          int v151 = (clsp::CLSP_Log **)(v149 + 648);
          float __src = (float)a3;
          clsp::CLSP_Log::LogCLSPData(v150, &__src, 1);
          vDSP_Length v152 = *v151;
          if (*v151)
          {
            clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
            float v153 = *(double *)&qword_1E9F7FFC0;
            float __src = v153;
            clsp::CLSP_Log::LogCLSPData(v152, &__src, 1);
            float v154 = *v151;
            if (*v151)
            {
              float __src = *(float *)(*(void *)(*((void *)this + 76) + v136) + 140);
              clsp::CLSP_Log::LogCLSPData(v154, &__src, 1);
              float v155 = *v151;
              if (*v151)
              {
                float __src = (*(float (**)(void))(**(void **)(*((void *)this + 76) + v136) + 48))(*(void *)(*((void *)this + 76) + v136));
                clsp::CLSP_Log::LogCLSPData(v155, &__src, 1);
                unint64_t v156 = *v151;
                if (*v151)
                {
                  float __src = *(float *)(*(void *)(*((void *)this + 76) + v136) + 108);
                  clsp::CLSP_Log::LogCLSPData(v156, &__src, 1);
                }
              }
            }
          }
        }
        float v132 = v132 + v148;
        uint64_t v95 = (float32x2_t **)*((void *)this + 76);
        unsigned int v157 = (float *)v95[(unint64_t)v136 / 8];
        if (v157[27] < v131) {
          float v131 = v157[27];
        }
        float v158 = ClosedLoopSpeakerProtectionKernel::GetDisplacementFilterGain((ClosedLoopSpeakerProtectionKernel *)v157);
        if (v158 < v134) {
          float v134 = v158;
        }
        unint64_t v130 = v133++;
      }
      while (v130 < (uint64_t)(*((void *)this + 77) - (void)v95) >> 4);
    }
    unsigned int v159 = (AUSpeakerProtectionV2 *)((char *)this + 32);
    float v160 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v159, 0);
    ausdk::AUElement::SetParameter(v160, 0x21u, v132, 0);
    unsigned int v161 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v159, 0);
    ausdk::AUElement::SetParameter(v161, 0x1Eu, v131, 0);
    float v162 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v159, 0);
    ausdk::AUElement::SetParameter(v162, 0x1Fu, v134, 0);
    uint64_t v17 = *a7;
    uint64_t v11 = v163;
  }

  return SimpleMeters::ProcessOutputBufferList(v11, a3, v17);
}

void AUSpeakerProtectionV2::AttenuateInputToOutput(AUSpeakerProtectionV2 *this, int a2, const AudioBufferList **a3, AudioBufferList **a4, float a5)
{
  float __B = 0.1;
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0);
  uint64_t v9 = (uint64_t)*a4;
  if ((*a4)->mNumberBuffers)
  {
    uint64_t v10 = Element;
    unint64_t v11 = 0;
    uint64_t v12 = 16;
    do
    {
      float v13 = *(float **)(v9 + v12);
      if ((*(_DWORD *)(v10 + 92) & 0x20) != 0) {
        int v14 = 1;
      }
      else {
        int v14 = *(_DWORD *)(v10 + 108);
      }
      vDSP_vsmul(*(const float **)((char *)&(*a3)->mNumberBuffers + v12), 1, &__B, v13, 1, (v14 * a2));
      ++v11;
      uint64_t v9 = (uint64_t)*a4;
      v12 += 16;
    }
    while (v11 < (*a4)->mNumberBuffers);
  }
}

char *clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState(unsigned int a1)
{
  clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
  if (0xAAAAAAAAAAAAAAABLL
     * ((qword_1E9F7FFA8 - clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst) >> 3) <= a1)
  {
    uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState;
    {
      uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState;
      if (v3)
      {
        clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState = 0;
        unk_1E9F7FFDC = 0;
        unk_1E9F7FFD4 = 0;
        dword_1E9F7FFE4 = 0;
        uint64_t result = &clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState;
      }
    }
    clsp::ThermalStateVector_v3_separate<clsp::EL>::ThermalState::unInitState = 0;
  }
  else
  {
    clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance();
    if (0xAAAAAAAAAAAAAAABLL
       * ((qword_1E9F7FFA8 - clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst) >> 3) <= a1)
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    return (char *)(clsp::ThermalStateVector_v3_separate<clsp::EL>::TheInstance(void)::inst + 24 * a1);
  }
  return result;
}

uint64_t AUSpeakerProtectionV2::CanScheduleParameters(AUSpeakerProtectionV2 *this)
{
  return 0;
}

uint64_t AUSpeakerProtectionV2::SetParameter(AUSpeakerProtectionV2 *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    int v8 = (AUSpeakerProtectionV2 *)((char *)this + 560);
    unsigned int v9 = a4;
    goto LABEL_5;
  }
  if (!a3)
  {
    int v8 = (AUSpeakerProtectionV2 *)((char *)this + 32);
    unsigned int v9 = 0;
LABEL_5:
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement(v8, v9);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    uint64_t result = 0;
    ++*((_DWORD *)this + 137);
    return result;
  }
  return 4294956430;
}

uint64_t AUSpeakerProtectionV2::SetProperty(AUSpeakerProtectionV2 *this, int a2, int a3, unsigned int a4, int *a5, void *a6, int *a7)
{
  unsigned int v7 = a6;
  unsigned int v185 = 0;
  if (SimpleMeters::HandleSetProperty((AUSpeakerProtectionV2 *)((char *)this + 680), a2, a3, a5, a6, (int *)&v185, a7)) {
    return v185;
  }
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64003)
  {
    float v183 = *(CACFDictionary **)a5;
    __int16 v184 = 0;
    int v192 = -1;
    int SInt32 = CACFDictionary::GetSInt32((uint64_t)v183, @"Version", &v192);
    int v15 = v192;
    if (v192 == 2) {
      int v16 = SInt32 ^ 1;
    }
    else {
      int v16 = 1;
    }
    int v191 = -1;
    if (CACFDictionary::GetSInt32((uint64_t)v183, @"NumChannels", &v191))
    {
      if (v15 == 2) {
        int v17 = 0;
      }
      else {
        int v17 = -205;
      }
      if (SInt32) {
        int v18 = v17;
      }
      else {
        int v18 = -203;
      }
      *((_DWORD *)this + 136) = v191;
    }
    else
    {
      if (v16) {
        int v16 = 2;
      }
      else {
        int v16 = 1;
      }
      int v18 = -203;
    }
    unint64_t v20 = operator new(0x10uLL);
    *unint64_t v20 = @"TemperatureLimit";
    v20[1] = 2;
    uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
    uint64_t v23 = v22;
    uint64_t v24 = &v21[16 * v22];
    *((void *)v21 + 2) = @"AmbientTemp";
    *((void *)v21 + 3) = 3;
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v20;
    operator delete(v20);
    unsigned int v176 = v18;
    if (v23 < 3)
    {
      uint64_t v27 = 3;
      if ((unint64_t)((v24 - v21) >> 3) > 3) {
        uint64_t v27 = (v24 - v21) >> 3;
      }
      if ((unint64_t)(v24 - v21) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v28);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = 0;
      uint64_t v24 = (char *)(v28 + 16 * v29);
      *(void *)(v28 + 32) = @"ThermalGainAttackTime";
      *(void *)(v28 + 40) = 7;
      uint64_t v25 = (char *)(v28 + 48);
      do
      {
        *(_OWORD *)(v28 + 32 + v30 - 16) = *(_OWORD *)&v21[v30 + 16];
        v30 -= 16;
      }
      while (v30 != -32);
      uint64_t v26 = (char *)v28;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *((void *)v21 + 4) = @"ThermalGainAttackTime";
      *((void *)v21 + 5) = 7;
      uint64_t v25 = v21 + 48;
      uint64_t v26 = v21;
    }
    std::string __p = v26;
    if (v25 < v24)
    {
      *(void *)uint64_t v25 = @"ThermalGainReleaseTime";
      *((void *)v25 + 1) = 8;
      uint64_t v31 = v25 + 16;
      goto LABEL_61;
    }
    uint64_t v32 = v26;
    uint64_t v33 = (v25 - v26) >> 4;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v35 = v24 - v32;
    unint64_t v36 = (v24 - v32) >> 3;
    if (v36 > v34) {
      unint64_t v34 = v36;
    }
    if (v35 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v34;
    }
    if (v37) {
      unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v37);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (void *)(v37 + 16 * v33);
    uint64_t v24 = (char *)(v37 + 16 * v38);
    void *v39 = @"ThermalGainReleaseTime";
    v39[1] = 8;
    uint64_t v31 = (char *)(v39 + 2);
    if (v25 == __p)
    {
      uint64_t v40 = __p;
    }
    else
    {
      uint64_t v40 = __p;
      do
      {
        *((_OWORD *)v39 - 1) = *((_OWORD *)v25 - 1);
        v39 -= 2;
        v25 -= 16;
      }
      while (v25 != __p);
      if (!__p) {
        goto LABEL_60;
      }
    }
    operator delete(v40);
LABEL_60:
    std::string __p = (char *)v39;
LABEL_61:
    if (v31 < v24)
    {
      *(void *)uint64_t v31 = @"PeakDispAttackTime";
      *((void *)v31 + 1) = 9;
      float v41 = v31 + 16;
      uint64_t v42 = __p;
      goto LABEL_80;
    }
    uint64_t v43 = (v31 - __p) >> 4;
    unint64_t v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v24 - __p) >> 3 > v44) {
      unint64_t v44 = (v24 - __p) >> 3;
    }
    if ((unint64_t)(v24 - __p) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v44;
    }
    if (v45) {
      unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v45);
    }
    else {
      uint64_t v46 = 0;
    }
    unint64_t v47 = (void *)(v45 + 16 * v43);
    uint64_t v24 = (char *)(v45 + 16 * v46);
    *unint64_t v47 = @"PeakDispAttackTime";
    v47[1] = 9;
    float v41 = (char *)(v47 + 2);
    if (v31 == __p)
    {
      uint64_t v48 = __p;
    }
    else
    {
      uint64_t v48 = __p;
      do
      {
        *((_OWORD *)v47 - 1) = *((_OWORD *)v31 - 1);
        v47 -= 2;
        v31 -= 16;
      }
      while (v31 != __p);
      if (!__p) {
        goto LABEL_79;
      }
    }
    operator delete(v48);
LABEL_79:
    uint64_t v42 = (char *)v47;
LABEL_80:
    if (v41 >= v24)
    {
      uint64_t v50 = (v41 - v42) >> 4;
      unint64_t v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      if ((v24 - v42) >> 3 > v51) {
        unint64_t v51 = (v24 - v42) >> 3;
      }
      if ((unint64_t)(v24 - v42) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52)
      {
        unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v52);
        uint64_t v54 = v42;
      }
      else
      {
        uint64_t v54 = v42;
        uint64_t v53 = 0;
      }
      double v55 = (void *)(v52 + 16 * v50);
      uint64_t v24 = (char *)(v52 + 16 * v53);
      *double v55 = @"PeakDispDecayTime";
      v55[1] = 10;
      int v49 = (char *)(v55 + 2);
      if (v41 == v54) {
        goto LABEL_94;
      }
      do
      {
        *((_OWORD *)v55 - 1) = *((_OWORD *)v41 - 1);
        v55 -= 2;
        v41 -= 16;
      }
      while (v41 != v54);
      if (v54) {
LABEL_94:
      }
        operator delete(v54);
      __pa = (char *)v55;
    }
    else
    {
      __pa = v42;
      *(void *)float v41 = @"PeakDispDecayTime";
      *((void *)v41 + 1) = 10;
      int v49 = v41 + 16;
    }
    if (v49 < v24)
    {
      *(void *)int v49 = @"DispFBIntegrationTime";
      *((void *)v49 + 1) = 11;
      uint64_t v56 = v49 + 16;
      uint64_t v57 = __pa;
      goto LABEL_115;
    }
    uint64_t v58 = (v49 - __pa) >> 4;
    unint64_t v59 = v58 + 1;
    if ((unint64_t)(v58 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v24 - __pa) >> 3 > v59) {
      unint64_t v59 = (v24 - __pa) >> 3;
    }
    if ((unint64_t)(v24 - __pa) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v59;
    }
    if (v60) {
      unint64_t v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v60);
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v62 = (void *)(v60 + 16 * v58);
    uint64_t v24 = (char *)(v60 + 16 * v61);
    *uint64_t v62 = @"DispFBIntegrationTime";
    v62[1] = 11;
    uint64_t v56 = (char *)(v62 + 2);
    if (v49 == __pa)
    {
      BOOL v63 = __pa;
    }
    else
    {
      BOOL v63 = __pa;
      do
      {
        *((_OWORD *)v62 - 1) = *((_OWORD *)v49 - 1);
        v62 -= 2;
        v49 -= 16;
      }
      while (v49 != __pa);
      if (!__pa) {
        goto LABEL_114;
      }
    }
    operator delete(v63);
LABEL_114:
    uint64_t v57 = (char *)v62;
LABEL_115:
    if (v56 >= v24)
    {
      uint64_t v65 = (v56 - v57) >> 4;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      if ((v24 - v57) >> 3 > v66) {
        unint64_t v66 = (v24 - v57) >> 3;
      }
      if ((unint64_t)(v24 - v57) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      if (v67)
      {
        unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v67);
        uint64_t v69 = v57;
      }
      else
      {
        uint64_t v69 = v57;
        uint64_t v68 = 0;
      }
      uint64_t v70 = (void *)(v67 + 16 * v65);
      uint64_t v24 = (char *)(v67 + 16 * v68);
      *uint64_t v70 = @"HardTempLimitHeadroom";
      v70[1] = 4;
      uint64_t v64 = (char *)(v70 + 2);
      if (v56 == v69) {
        goto LABEL_129;
      }
      do
      {
        *((_OWORD *)v70 - 1) = *((_OWORD *)v56 - 1);
        v70 -= 2;
        v56 -= 16;
      }
      while (v56 != v69);
      if (v69) {
LABEL_129:
      }
        operator delete(v69);
      __pb = (char *)v70;
    }
    else
    {
      __pb = v57;
      *(void *)uint64_t v56 = @"HardTempLimitHeadroom";
      *((void *)v56 + 1) = 4;
      uint64_t v64 = v56 + 16;
    }
    if (v64 < v24)
    {
      *(void *)uint64_t v64 = @"ThermalFFSpeedupFactor";
      *((void *)v64 + 1) = 5;
      uint64_t v71 = v64 + 16;
      uint64_t v72 = __pb;
      goto LABEL_149;
    }
    uint64_t v73 = (v64 - __pb) >> 4;
    unint64_t v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    if ((v24 - __pb) >> 3 > v74) {
      unint64_t v74 = (v24 - __pb) >> 3;
    }
    if ((unint64_t)(v24 - __pb) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v75 = v74;
    }
    if (v75) {
      unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v75);
    }
    else {
      uint64_t v76 = 0;
    }
    uint64_t v72 = (char *)(v75 + 16 * v73);
    uint64_t v24 = (char *)(v75 + 16 * v76);
    *(void *)uint64_t v72 = @"ThermalFFSpeedupFactor";
    *((void *)v72 + 1) = 5;
    uint64_t v71 = v72 + 16;
    if (v64 == __pb)
    {
      uint64_t v77 = __pb;
    }
    else
    {
      uint64_t v77 = __pb;
      do
      {
        *((_OWORD *)v72 - 1) = *((_OWORD *)v64 - 1);
        v72 -= 16;
        v64 -= 16;
      }
      while (v64 != __pb);
      if (!__pb)
      {
LABEL_149:
        if (v71 < v24)
        {
          *(void *)uint64_t v71 = @"LookaheadDelay_ms";
          *((void *)v71 + 1) = 29;
          uint64_t v78 = (unsigned int *)(v71 + 16);
LABEL_167:
          __pc = (unsigned int *)v72;
          unint64_t v84 = operator new(0x10uLL);
          *unint64_t v84 = @"Rshunt";
          v84[1] = 13;
          uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(2uLL);
          uint64_t v87 = v86;
          unint64_t v88 = &v85[16 * v86];
          *((void *)v85 + 2) = @"Rampout";
          *((void *)v85 + 3) = 14;
          *(_OWORD *)uint64_t v85 = *(_OWORD *)v84;
          operator delete(v84);
          if (v87 < 3)
          {
            uint64_t v91 = 3;
            if ((unint64_t)((v88 - v85) >> 3) > 3) {
              uint64_t v91 = (v88 - v85) >> 3;
            }
            if ((unint64_t)(v88 - v85) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v92 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v92 = v91;
            }
            if (v92) {
              unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v92);
            }
            else {
              uint64_t v93 = 0;
            }
            uint64_t v94 = 0;
            unint64_t v88 = (char *)(v92 + 16 * v93);
            *(void *)(v92 + 32) = @"mt";
            *(void *)(v92 + 40) = 15;
            double v89 = (char *)(v92 + 48);
            do
            {
              *(_OWORD *)(v92 + 32 + v94 - 16) = *(_OWORD *)&v85[v94 + 16];
              v94 -= 16;
            }
            while (v94 != -32);
            double v90 = (char *)v92;
            if (v85) {
              operator delete(v85);
            }
          }
          else
          {
            *((void *)v85 + 4) = @"mt";
            *((void *)v85 + 5) = 15;
            double v89 = v85 + 48;
            double v90 = v85;
          }
          if (v89 >= v88)
          {
            uint64_t v96 = (v89 - v90) >> 4;
            unint64_t v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v97) {
              unint64_t v97 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v98 = v97;
            }
            if (v98) {
              unint64_t v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v98);
            }
            else {
              uint64_t v99 = 0;
            }
            BOOL v100 = (void *)(v98 + 16 * v96);
            unint64_t v88 = (char *)(v98 + 16 * v99);
            void *v100 = @"ct";
            v100[1] = 16;
            uint64_t v95 = (char *)(v100 + 2);
            if (v89 == v90) {
              goto LABEL_195;
            }
            do
            {
              *((_OWORD *)v100 - 1) = *((_OWORD *)v89 - 1);
              v100 -= 2;
              v89 -= 16;
            }
            while (v89 != v90);
            if (v90) {
LABEL_195:
            }
              operator delete(v90);
            double v90 = (char *)v100;
          }
          else
          {
            *(void *)double v89 = @"ct";
            *((void *)v89 + 1) = 16;
            uint64_t v95 = v89 + 16;
          }
          if (v95 >= v88)
          {
            uint64_t v102 = (v95 - v90) >> 4;
            unint64_t v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v103) {
              unint64_t v103 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v104 = v103;
            }
            if (v104) {
              unint64_t v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v104);
            }
            else {
              uint64_t v105 = 0;
            }
            unint64_t v106 = (void *)(v104 + 16 * v102);
            unint64_t v88 = (char *)(v104 + 16 * v105);
            *unint64_t v106 = @"kt";
            v106[1] = 17;
            uint64_t v101 = (char *)(v106 + 2);
            if (v95 == v90) {
              goto LABEL_211;
            }
            do
            {
              *((_OWORD *)v106 - 1) = *((_OWORD *)v95 - 1);
              v106 -= 2;
              v95 -= 16;
            }
            while (v95 != v90);
            if (v90) {
LABEL_211:
            }
              operator delete(v90);
            double v90 = (char *)v106;
          }
          else
          {
            *(void *)uint64_t v95 = @"kt";
            *((void *)v95 + 1) = 17;
            uint64_t v101 = v95 + 16;
          }
          if (v101 >= v88)
          {
            uint64_t v108 = (v101 - v90) >> 4;
            unint64_t v109 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v109) {
              unint64_t v109 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v110 = v109;
            }
            if (v110) {
              unint64_t v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v110);
            }
            else {
              uint64_t v111 = 0;
            }
            float v112 = (void *)(v110 + 16 * v108);
            unint64_t v88 = (char *)(v110 + 16 * v111);
            *float v112 = @"ag";
            v112[1] = 18;
            unsigned int v107 = (char *)(v112 + 2);
            if (v101 == v90) {
              goto LABEL_227;
            }
            do
            {
              *((_OWORD *)v112 - 1) = *((_OWORD *)v101 - 1);
              v112 -= 2;
              v101 -= 16;
            }
            while (v101 != v90);
            if (v90) {
LABEL_227:
            }
              operator delete(v90);
            double v90 = (char *)v112;
          }
          else
          {
            *(void *)uint64_t v101 = @"ag";
            *((void *)v101 + 1) = 18;
            unsigned int v107 = v101 + 16;
          }
          if (v107 >= v88)
          {
            uint64_t v114 = (v107 - v90) >> 4;
            unint64_t v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v115) {
              unint64_t v115 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v116 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v116 = v115;
            }
            if (v116) {
              unint64_t v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v116);
            }
            else {
              uint64_t v117 = 0;
            }
            int v118 = (void *)(v116 + 16 * v114);
            unint64_t v88 = (char *)(v116 + 16 * v117);
            *int v118 = @"g_bw";
            v118[1] = 19;
            uint64_t v113 = (char *)(v118 + 2);
            if (v107 == v90) {
              goto LABEL_243;
            }
            do
            {
              *((_OWORD *)v118 - 1) = *((_OWORD *)v107 - 1);
              v118 -= 2;
              v107 -= 16;
            }
            while (v107 != v90);
            if (v90) {
LABEL_243:
            }
              operator delete(v90);
            double v90 = (char *)v118;
          }
          else
          {
            *(void *)unsigned int v107 = @"g_bw";
            *((void *)v107 + 1) = 19;
            uint64_t v113 = v107 + 16;
          }
          if (v113 >= v88)
          {
            uint64_t v120 = (v113 - v90) >> 4;
            unint64_t v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v121) {
              unint64_t v121 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v122 = v121;
            }
            if (v122) {
              unint64_t v122 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v122);
            }
            else {
              uint64_t v123 = 0;
            }
            long long v124 = (void *)(v122 + 16 * v120);
            unint64_t v88 = (char *)(v122 + 16 * v123);
            void *v124 = @"Q_d";
            v124[1] = 20;
            float v119 = (char *)(v124 + 2);
            if (v113 == v90) {
              goto LABEL_259;
            }
            do
            {
              *((_OWORD *)v124 - 1) = *((_OWORD *)v113 - 1);
              v124 -= 2;
              v113 -= 16;
            }
            while (v113 != v90);
            if (v90) {
LABEL_259:
            }
              operator delete(v90);
            double v90 = (char *)v124;
          }
          else
          {
            *(void *)uint64_t v113 = @"Q_d";
            *((void *)v113 + 1) = 20;
            float v119 = v113 + 16;
          }
          if (v119 >= v88)
          {
            uint64_t v126 = (v119 - v90) >> 4;
            unint64_t v127 = v126 + 1;
            if ((unint64_t)(v126 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v127) {
              unint64_t v127 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v128 = v127;
            }
            if (v128) {
              unint64_t v128 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v128);
            }
            else {
              uint64_t v129 = 0;
            }
            unint64_t v130 = (void *)(v128 + 16 * v126);
            unint64_t v88 = (char *)(v128 + 16 * v129);
            *unint64_t v130 = @"phi";
            v130[1] = 21;
            std::string v125 = (char *)(v130 + 2);
            if (v119 == v90) {
              goto LABEL_275;
            }
            do
            {
              *((_OWORD *)v130 - 1) = *((_OWORD *)v119 - 1);
              v130 -= 2;
              v119 -= 16;
            }
            while (v119 != v90);
            if (v90) {
LABEL_275:
            }
              operator delete(v90);
            double v90 = (char *)v130;
          }
          else
          {
            *(void *)float v119 = @"phi";
            *((void *)v119 + 1) = 21;
            std::string v125 = v119 + 16;
          }
          if (v125 >= v88)
          {
            uint64_t v132 = (v125 - v90) >> 4;
            unint64_t v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v133) {
              unint64_t v133 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v134 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v134 = v133;
            }
            if (v134) {
              unint64_t v134 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v134);
            }
            else {
              uint64_t v135 = 0;
            }
            uint64_t v136 = (void *)(v134 + 16 * v132);
            unint64_t v88 = (char *)(v134 + 16 * v135);
            *uint64_t v136 = @"x_lim";
            v136[1] = 22;
            float v131 = (char *)(v136 + 2);
            if (v125 == v90) {
              goto LABEL_291;
            }
            do
            {
              *((_OWORD *)v136 - 1) = *((_OWORD *)v125 - 1);
              v136 -= 2;
              v125 -= 16;
            }
            while (v125 != v90);
            if (v90) {
LABEL_291:
            }
              operator delete(v90);
            double v90 = (char *)v136;
          }
          else
          {
            *(void *)std::string v125 = @"x_lim";
            *((void *)v125 + 1) = 22;
            float v131 = v125 + 16;
          }
          if (v131 >= v88)
          {
            uint64_t v138 = (v131 - v90) >> 4;
            unint64_t v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v139) {
              unint64_t v139 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v140 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v140 = v139;
            }
            if (v140) {
              unint64_t v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v140);
            }
            else {
              uint64_t v141 = 0;
            }
            uint64_t v142 = (void *)(v140 + 16 * v138);
            unint64_t v88 = (char *)(v140 + 16 * v141);
            *uint64_t v142 = @"Reb_20C";
            v142[1] = 12;
            double v137 = (char *)(v142 + 2);
            if (v131 == v90) {
              goto LABEL_307;
            }
            do
            {
              *((_OWORD *)v142 - 1) = *((_OWORD *)v131 - 1);
              v142 -= 2;
              v131 -= 16;
            }
            while (v131 != v90);
            if (v90) {
LABEL_307:
            }
              operator delete(v90);
            double v90 = (char *)v142;
          }
          else
          {
            *(void *)float v131 = @"Reb_20C";
            *((void *)v131 + 1) = 12;
            double v137 = v131 + 16;
          }
          if (v137 >= v88)
          {
            uint64_t v144 = (v137 - v90) >> 4;
            unint64_t v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v145) {
              unint64_t v145 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v146 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v146 = v145;
            }
            if (v146) {
              unint64_t v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v146);
            }
            else {
              uint64_t v147 = 0;
            }
            float v148 = (void *)(v146 + 16 * v144);
            unint64_t v88 = (char *)(v146 + 16 * v147);
            void *v148 = @"T_sett_vc";
            v148[1] = 25;
            float v143 = (char *)(v148 + 2);
            if (v137 == v90) {
              goto LABEL_323;
            }
            do
            {
              *((_OWORD *)v148 - 1) = *((_OWORD *)v137 - 1);
              v148 -= 2;
              v137 -= 16;
            }
            while (v137 != v90);
            if (v90) {
LABEL_323:
            }
              operator delete(v90);
            double v90 = (char *)v148;
          }
          else
          {
            *(void *)double v137 = @"T_sett_vc";
            *((void *)v137 + 1) = 25;
            float v143 = v137 + 16;
          }
          if (v143 >= v88)
          {
            uint64_t v150 = (v143 - v90) >> 4;
            unint64_t v151 = v150 + 1;
            if ((unint64_t)(v150 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v151) {
              unint64_t v151 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v152 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v152 = v151;
            }
            if (v152) {
              unint64_t v152 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v152);
            }
            else {
              uint64_t v153 = 0;
            }
            float v154 = (void *)(v152 + 16 * v150);
            unint64_t v88 = (char *)(v152 + 16 * v153);
            *float v154 = @"T_sett_mg";
            v154[1] = 26;
            unsigned int v149 = (char *)(v154 + 2);
            if (v143 == v90) {
              goto LABEL_339;
            }
            do
            {
              *((_OWORD *)v154 - 1) = *((_OWORD *)v143 - 1);
              v154 -= 2;
              v143 -= 16;
            }
            while (v143 != v90);
            if (v90) {
LABEL_339:
            }
              operator delete(v90);
            double v90 = (char *)v154;
          }
          else
          {
            *(void *)float v143 = @"T_sett_mg";
            *((void *)v143 + 1) = 26;
            unsigned int v149 = v143 + 16;
          }
          if (v149 >= v88)
          {
            uint64_t v156 = (v149 - v90) >> 4;
            unint64_t v157 = v156 + 1;
            if ((unint64_t)(v156 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v157) {
              unint64_t v157 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v158 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v158 = v157;
            }
            if (v158) {
              unint64_t v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v158);
            }
            else {
              uint64_t v159 = 0;
            }
            float v160 = (void *)(v158 + 16 * v156);
            unint64_t v88 = (char *)(v158 + 16 * v159);
            *float v160 = @"Tc_vc";
            v160[1] = 27;
            float v155 = (char *)(v160 + 2);
            if (v149 == v90) {
              goto LABEL_355;
            }
            do
            {
              *((_OWORD *)v160 - 1) = *((_OWORD *)v149 - 1);
              v160 -= 2;
              v149 -= 16;
            }
            while (v149 != v90);
            if (v90) {
LABEL_355:
            }
              operator delete(v90);
            double v90 = (char *)v160;
          }
          else
          {
            *(void *)unsigned int v149 = @"Tc_vc";
            *((void *)v149 + 1) = 27;
            float v155 = v149 + 16;
          }
          if (v155 >= v88)
          {
            uint64_t v161 = (v155 - v90) >> 4;
            unint64_t v162 = v161 + 1;
            if ((unint64_t)(v161 + 1) >> 60) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if ((v88 - v90) >> 3 > v162) {
              unint64_t v162 = (v88 - v90) >> 3;
            }
            if ((unint64_t)(v88 - v90) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v163 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v163 = v162;
            }
            if (v163) {
              unint64_t v163 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v163);
            }
            float v164 = (void *)(v163 + 16 * v161);
            *float v164 = @"Tc_mg";
            v164[1] = 28;
            __int16 v178 = (char *)(v164 + 2);
            if (v155 == v90) {
              goto LABEL_370;
            }
            do
            {
              *((_OWORD *)v164 - 1) = *((_OWORD *)v155 - 1);
              v164 -= 2;
              v155 -= 16;
            }
            while (v155 != v90);
            if (v90) {
LABEL_370:
            }
              operator delete(v90);
            double v90 = (char *)v164;
          }
          else
          {
            *(void *)float v155 = @"Tc_mg";
            *((void *)v155 + 1) = 28;
            __int16 v178 = v155 + 16;
          }
          if (v78 != __pc)
          {
            if ((unint64_t)(((char *)v78 - (char *)__pc) >> 4) <= 1) {
              uint64_t v165 = 1;
            }
            else {
              uint64_t v165 = ((char *)v78 - (char *)__pc) >> 4;
            }
            unsigned int v166 = __pc + 2;
            do
            {
              uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 32), 0);
              v16 += AUSpeakerProtectionV2::SetParamFromPair((uint64_t)this, Element, *((__CFString **)v166 - 1), *v166, v183);
              v166 += 4;
              --v165;
            }
            while (v165);
          }
          CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          __int16 v190 = 257;
          CACFDictionary::GetCACFArray(&v183, @"ChannelSpecificParams", (CACFArray *)&theArray);
          int Count = (int)theArray;
          if (theArray) {
            int Count = CFArrayGetCount(theArray);
          }
          if (Count == *((_DWORD *)this + 136)) {
            int v169 = v16;
          }
          else {
            int v169 = v16 + 1;
          }
          clsp::ThermalStateVector_v3_separate<clsp::EL>::SetNumChannels(*((_DWORD *)this + 136), 0);
          if (*((_DWORD *)this + 136))
          {
            unsigned int v170 = 0;
            if ((unint64_t)((v178 - v90) >> 4) <= 1) {
              uint64_t v171 = 1;
            }
            else {
              uint64_t v171 = (v178 - v90) >> 4;
            }
            uint64_t v177 = v171;
            float v172 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
            do
            {
              Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], v172);
              __int16 v188 = 257;
              CACFArray::GetCACFDictionary(&theArray, v170, (CACFDictionary *)&Mutable);
              int v186 = -1;
              CACFDictionary::GetSInt32((uint64_t)Mutable, @"ChannelID", &v186);
              if (v186 == v170)
              {
                uint64_t v174 = (unsigned int *)(v90 + 8);
                uint64_t v173 = v177;
                if (v178 != v90)
                {
                  do
                  {
                    float v175 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)this + 560), v170);
                    v169 += AUSpeakerProtectionV2::SetParamFromPair((uint64_t)this, v175, *((__CFString **)v174 - 1), *v174, Mutable);
                    v174 += 4;
                    --v173;
                  }
                  while (v173);
                }
              }
              else
              {
                ++v169;
              }
              CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
              ++v170;
            }
            while (v170 < *((_DWORD *)this + 136));
          }
          if (v169)
          {
            uint64_t v12 = 4294967246;
          }
          else
          {
            *((unsigned char *)this + 528) = 1;
            uint64_t v12 = v176;
          }
          CACFArray::~CACFArray((CACFArray *)&theArray);
          if (v90) {
            operator delete(v90);
          }
          if (__pc) {
            operator delete(__pc);
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v183);
          return v12;
        }
        uint64_t v79 = (v71 - v72) >> 4;
        unint64_t v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 60) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if ((v24 - v72) >> 3 > v80) {
          unint64_t v80 = (v24 - v72) >> 3;
        }
        if ((unint64_t)(v24 - v72) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v80;
        }
        if (v81) {
          unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v81);
        }
        float v82 = (void *)(v81 + 16 * v79);
        *float v82 = @"LookaheadDelay_ms";
        v82[1] = 29;
        uint64_t v78 = (unsigned int *)(v82 + 2);
        if (v71 == v72)
        {
          uint64_t v83 = v72;
        }
        else
        {
          uint64_t v83 = v72;
          do
          {
            *((_OWORD *)v82 - 1) = *((_OWORD *)v71 - 1);
            v82 -= 2;
            v71 -= 16;
          }
          while (v71 != v72);
          if (!v72) {
            goto LABEL_166;
          }
        }
        operator delete(v83);
LABEL_166:
        uint64_t v72 = (char *)v82;
        goto LABEL_167;
      }
    }
    operator delete(v77);
    goto LABEL_149;
  }
  if (a2 != 21) {
    return 4294956417;
  }
  if (v7 < 4) {
    return 4294956445;
  }
  int v19 = *a5;
  if ((v19 != 0) != (*(unsigned int (**)(AUSpeakerProtectionV2 *))(*(void *)this + 576))(this)) {
    (*(void (**)(AUSpeakerProtectionV2 *, BOOL))(*(void *)this + 584))(this, v19 != 0);
  }
  return 0;
}

void sub_1BB6E83C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  operator delete(v20);
  if (__p) {
    operator delete(__p);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a15);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV2::SetParamFromPair(uint64_t a1, ausdk::AUElement *a2, __CFString *a3, unsigned int a4, CACFDictionary *this)
{
  float v10 = 0.0;
  uint64_t v8 = CACFDictionary::GetFloat32((uint64_t)this, a3, &v10) ^ 1;
  ausdk::AUElement::SetParameter(a2, a4, v10, 0);
  ++*(_DWORD *)(a1 + 548);
  return v8;
}

uint64_t AUSpeakerProtectionV2::GetProperty(AUSpeakerProtectionV2 *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, int *a6)
{
  unsigned int v12 = 0;
  if (SimpleMeters::HandleGetProperty((AUSpeakerProtectionV2 *)((char *)this + 680), a2, a3, a5, &v12, a6))return v12; {
  uint64_t result = 4294956417;
  }
  if (a2 == 21 && !a3)
  {
    int v11 = (*(uint64_t (**)(AUSpeakerProtectionV2 *))(*(void *)this + 576))(this);
    uint64_t result = 0;
    *a5 = v11;
  }
  return result;
}

uint64_t AUSpeakerProtectionV2::GetPropertyInfo(AUSpeakerProtectionV2 *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 == 3007)
  {
    BOOL v7 = 1;
    unsigned int v8 = 4;
LABEL_12:
    uint64_t result = 0;
    *a5 = v8;
    *a6 = v7;
    return result;
  }
  if (a2 == 3099)
  {
    if (a3 > 1) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = (uint64_t)(*((void *)this + 86) - *((void *)this + 85)) >> 7;
    }
    if ((a3 & 0xFFFFFFFD) == 0) {
      v6 += (uint64_t)(*((void *)this + 89) - *((void *)this + 88)) >> 7;
    }
    BOOL v7 = 0;
    unsigned int v8 = 16 * v6;
    goto LABEL_12;
  }
  if (a3) {
    return 4294956417;
  }
  if (a2 == 64003)
  {
    uint64_t result = 0;
    *a6 = 1;
    unsigned int v10 = 8;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t result = 0;
    *a6 = 1;
    unsigned int v10 = 4;
  }
  *a5 = v10;
  return result;
}

uint64_t AUSpeakerProtectionV2::Reset(AUSpeakerProtectionV2 *this)
{
  *((void *)this + 67) = *(void *)(ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)this + 128), 0)
                                     + 80);
  uint64_t v2 = *((void *)this + 76);
  if (*((void *)this + 77) != v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      (*(void (**)(void, double))(**(void **)(v2 + 16 * v3) + 24))(*(void *)(v2 + 16 * v3), *((double *)this + 67));
      unint64_t v3 = v4;
      uint64_t v2 = *((void *)this + 76);
      ++v4;
    }
    while (v3 < (*((void *)this + 77) - v2) >> 4);
  }
  SimpleMeters::Reset((uint64_t)this + 680);
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    unsigned int v8 = (clsp::CLSP_Log *)*((void *)this + 2 * v5 + 81);
    if (v8) {
      clsp::CLSP_Log::FlushLog(v8);
    }
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) != 0);
  return 0;
}

void AUSpeakerProtectionV2::Cleanup(AUSpeakerProtectionV2 *this)
{
  uint64_t v2 = (long long *)*((void *)this + 77);
  unint64_t v3 = (long long *)*((void *)this + 76);
  if (v2 != v3)
  {
    do
    {
      unsigned int v4 = v3 + 1;
      if (v3 + 1 == v2)
      {
        uint64_t v5 = v3;
      }
      else
      {
        do
        {
          uint64_t v5 = v4;
          long long v6 = *v4;
          *(void *)unsigned int v4 = 0;
          *((void *)v4 + 1) = 0;
          char v7 = (std::__shared_weak_count *)*((void *)v4 - 1);
          *(v4 - 1) = v6;
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
          unsigned int v4 = v5 + 1;
        }
        while (v5 + 1 != v2);
        uint64_t v2 = (long long *)*((void *)this + 77);
      }
      while (v2 != v5)
      {
        unsigned int v8 = (std::__shared_weak_count *)*((void *)v2 - 1);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        --v2;
      }
      *((void *)this + 77) = v5;
      unint64_t v3 = (long long *)*((void *)this + 76);
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  *((void *)this + 86) = *((void *)this + 85);
  *((void *)this + 89) = *((void *)this + 88);
}

uint64_t AUSpeakerProtectionV2::Initialize(AUSpeakerProtectionV2 *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (AUSpeakerProtectionV2 *)((char *)this + 80);
  uint64_t v3 = *((void *)this + 15);
  if (v3) {
    LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  else {
    uint64_t v4 = (*((void *)v1 + 13) - *((void *)v1 + 12)) >> 3;
  }
  if (v4 >= 2)
  {
    unsigned int v5 = 1;
    do
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement(v2, v5 - 1);
      if (*(double *)(Element + 80) != *(double *)(ausdk::AUScope::SafeGetElement(v2, v5) + 80)) {
        return 4294956428;
      }
    }
    while (v4 != ++v5);
  }
  uint64_t v7 = ausdk::AUScope::SafeGetElement(v2, 0);
  long long v8 = *(_OWORD *)(v7 + 96);
  v102[0] = *(_OWORD *)(v7 + 80);
  v102[1] = v8;
  uint64_t v103 = *(void *)(v7 + 112);
  uint64_t v9 = ausdk::AUScope::SafeGetElement((AUSpeakerProtectionV2 *)((char *)v1 + 128), 0);
  long long v10 = *(_OWORD *)(v9 + 96);
  *(_OWORD *)&v101.mSampleRate = *(_OWORD *)(v9 + 80);
  *(_OWORD *)&v101.mBytesPerPacket = v10;
  *(void *)&v101.mBitsPerChannel = *(void *)(v9 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v102, &v101, v11)) {
    return 4294956428;
  }
  uint64_t v12 = *(unsigned int *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108);
  float v13 = (AUSpeakerProtectionV2 *)((char *)v1 + 560);
  int v14 = (const void **)(ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)v1 + 560), 0) + 72);
  uint64_t v80 = v12;
  if (v12 == 2) {
    int v15 = @"Left Speaker Settings";
  }
  else {
    int v15 = @"Speaker Settings";
  }
  if (v12 == 2) {
    int v16 = @"Right Speaker Settings";
  }
  else {
    int v16 = @"N/A";
  }
  ausdk::Owned<__CFString const*>::operator=(v14, v15);
  uint64_t v17 = ausdk::AUScope::GetElement((AUSpeakerProtectionV2 *)((char *)v1 + 560), 1u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v17 + 72), v16);
  if (*((unsigned char *)v1 + 528) && v80)
  {
    uint64_t v18 = 0;
    double v78 = *(double *)v102;
    int v19 = (AUSpeakerProtectionV2 *)((char *)v1 + 32);
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v79 = _D0;
    BOOL v100 = v1;
    do
    {
      uint64_t v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      float Parameter = ausdk::AUElement::GetParameter(v25, 2u);
      uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      float v97 = ausdk::AUElement::GetParameter(v26, 4u);
      uint64_t v27 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      float v98 = ausdk::AUElement::GetParameter(v27, 3u);
      unint64_t v28 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      double v96 = ausdk::AUElement::GetParameter(v28, 7u);
      uint64_t v29 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      double v95 = ausdk::AUElement::GetParameter(v29, 8u);
      uint64_t v30 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      double v94 = ausdk::AUElement::GetParameter(v30, 9u);
      uint64_t v31 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      double v93 = ausdk::AUElement::GetParameter(v31, 0xAu);
      uint64_t v32 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      double v92 = ausdk::AUElement::GetParameter(v32, 0xBu);
      uint64_t v33 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      float v89 = ausdk::AUElement::GetParameter(v33, 0xCu);
      unint64_t v34 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v91 = ausdk::AUElement::GetParameter(v34, 0xDu);
      unint64_t v35 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v90 = ausdk::AUElement::GetParameter(v35, 0xEu);
      unint64_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v88 = ausdk::AUElement::GetParameter(v36, 0xFu);
      unint64_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v87 = ausdk::AUElement::GetParameter(v37, 0x10u);
      uint64_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v86 = ausdk::AUElement::GetParameter(v38, 0x11u);
      uint64_t v39 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v85 = ausdk::AUElement::GetParameter(v39, 0x12u);
      uint64_t v40 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v84 = ausdk::AUElement::GetParameter(v40, 0x13u);
      float v41 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v83 = ausdk::AUElement::GetParameter(v41, 0x14u);
      uint64_t v42 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v82 = ausdk::AUElement::GetParameter(v42, 0x15u);
      uint64_t v43 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      float v44 = ausdk::AUElement::GetParameter(v43, 0x16u);
      unint64_t v45 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v46 = ausdk::AUElement::GetParameter(v45, 0x19u);
      unint64_t v47 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v48 = ausdk::AUElement::GetParameter(v47, 0x1Au);
      int v49 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v50 = ausdk::AUElement::GetParameter(v49, 0x1Bu);
      unint64_t v51 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v13, v18);
      double v52 = ausdk::AUElement::GetParameter(v51, 0x1Cu);
      uint64_t v53 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      double v81 = ausdk::AUElement::GetParameter(v53, 0x1Du);
      uint64_t v54 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      double v55 = ausdk::AUElement::GetParameter(v54, 5u);
      uint64_t v56 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v19, 0);
      float v57 = ausdk::AUElement::GetParameter(v56, 0x20u);
      uint64_t v58 = (char *)operator new(0x3E8uLL);
      *(_OWORD *)(v58 + 8) = 0u;
      *((float *)v58 + 32) = v89;
      *((float *)v58 + 39) = v97;
      *((float *)v58 + 46) = v44 / 0.1;
      *((float *)v58 + 55) = v44 / 0.1;
      *((float *)v58 + 49) = v44;
      *((float *)v58 + 58) = v44;
      *((double *)v58 + 46) = v96;
      *((double *)v58 + 47) = v95;
      *((double *)v58 + 48) = v94;
      *((double *)v58 + 49) = v93;
      *((double *)v58 + 50) = v92;
      *((double *)v58 + 51) = v91;
      *((double *)v58 + 52) = v90;
      *((double *)v58 + 53) = v88;
      *((double *)v58 + 54) = v87;
      *((double *)v58 + 55) = v86;
      *((double *)v58 + 56) = v85;
      *((double *)v58 + 57) = v84;
      *((double *)v58 + 58) = v83;
      *((double *)v58 + 59) = v82;
      *((double *)v58 + 60) = v44;
      *((double *)v58 + 61) = v46;
      *((double *)v58 + 62) = v48;
      *((double *)v58 + 63) = v50;
      *((double *)v58 + 64) = v52;
      *((float *)v58 + 130) = v57;
      *((float *)v58 + 38) = Parameter;
      *((float *)v58 + 27) = v98;
      *(void *)uint64_t v58 = &unk_1F14BD008;
      *((void *)v58 + 4) = 0x100000000;
      *((_DWORD *)v58 + 10) = 0;
      *(_OWORD *)(v58 + 44) = xmmword_1BB87BEC0;
      *((float *)v58 + 15) = Parameter - v98;
      *((void *)v58 + 8) = 0;
      *((float *)v58 + 18) = Parameter - v98;
      *(_OWORD *)(v58 + 76) = 0u;
      *(_OWORD *)(v58 + 92) = 0u;
      *((_DWORD *)v58 + 28) = v18;
      *((void *)v58 + 15) = 0;
      *(_OWORD *)(v58 + 132) = xmmword_1BB873CD0;
      *((_WORD *)v58 + 74) = 257;
      *((void *)v58 + 20) = 0x42C800007FC00000;
      *(_OWORD *)(v58 + 168) = 0u;
      *(void *)(v58 + 188) = 0x3F80000000000000;
      *((_DWORD *)v58 + 54) = 0;
      *(_OWORD *)(v58 + 200) = 0u;
      *((void *)v58 + 28) = 0x3F80000000000000;
      *(_OWORD *)(v58 + 252) = 0u;
      *(_OWORD *)(v58 + 268) = 0u;
      *((_DWORD *)v58 + 87) = 0;
      *(_OWORD *)(v58 + 236) = 0u;
      *(_OWORD *)(v58 + 284) = 0u;
      *(_OWORD *)(v58 + 300) = 0u;
      *(_OWORD *)(v58 + 316) = 0u;
      *(_OWORD *)(v58 + 332) = 0u;
      *((void *)v58 + 44) = 1065353216;
      *((_DWORD *)v58 + 90) = 0;
      *((_DWORD *)v58 + 215) = 0;
      *(_OWORD *)(v58 + 828) = 0u;
      *(_OWORD *)(v58 + 844) = 0u;
      *(_OWORD *)(v58 + 796) = 0u;
      *(_OWORD *)(v58 + 812) = 0u;
      *(_OWORD *)(v58 + 764) = 0u;
      *(_OWORD *)(v58 + 780) = 0u;
      *(_OWORD *)(v58 + 732) = 0u;
      *(_OWORD *)(v58 + 748) = 0u;
      *(_OWORD *)(v58 + 700) = 0u;
      *(_OWORD *)(v58 + 716) = 0u;
      *(_OWORD *)(v58 + 668) = 0u;
      *(_OWORD *)(v58 + 684) = 0u;
      *(_OWORD *)(v58 + 636) = 0u;
      *(_OWORD *)(v58 + 652) = 0u;
      *(_OWORD *)(v58 + 604) = 0u;
      *(_OWORD *)(v58 + 620) = 0u;
      *(_OWORD *)(v58 + 572) = 0u;
      *(_OWORD *)(v58 + 588) = 0u;
      *(_OWORD *)(v58 + 540) = 0u;
      *(_OWORD *)(v58 + 556) = 0u;
      *(_OWORD *)(v58 + 524) = 0u;
      v58[864] = 1;
      *((_DWORD *)v58 + 217) = 0;
      *((void *)v58 + 109) = 0;
      *((float *)v58 + 219) = (float)(Parameter - v98) / 0.1;
      *((double *)v58 + 113) = v55;
      *((double *)v58 + 124) = v81;
      *((void *)v58 + 3) = &unk_1F14BCF50;
      *((_OWORD *)v58 + 55) = 0u;
      *((_DWORD *)v58 + 224) = 1065353216;
      *((void *)v58 + 114) = v79;
      *(_OWORD *)(v58 + 924) = 0u;
      *(_OWORD *)(v58 + 940) = 0u;
      *(_OWORD *)(v58 + 956) = 0u;
      *(_OWORD *)(v58 + 972) = 0u;
      *((_DWORD *)v58 + 247) = 0;
      v59.n128_f32[0] = clsp::CLSPKernel_v3::ResetThermalState((clsp::CLSPKernel_v3 *)(v58 + 24));
      *((_DWORD *)v58 + 33) = 1065353216;
      unint64_t v60 = (__n128 *)*((void *)v1 + 77);
      unint64_t v61 = *((void *)v1 + 78);
      if ((unint64_t)v60 >= v61)
      {
        BOOL v63 = (char *)*((void *)v1 + 76);
        uint64_t v64 = ((char *)v60 - v63) >> 4;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = v61 - (void)v63;
        if (v66 >> 3 > v65) {
          unint64_t v65 = v66 >> 3;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v68 = (char *)operator new(16 * v67);
        v59.n128_u64[0] = (unint64_t)(v58 + 24);
        v59.n128_u64[1] = (unint64_t)v58;
        uint64_t v69 = (__n128 *)&v68[16 * v64];
        uint64_t v70 = &v68[16 * v67];
        __n128 *v69 = v59;
        uint64_t v62 = v69 + 1;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v58 + 1, 1uLL, memory_order_relaxed);
        if (v60 == (__n128 *)v63)
        {
          uint64_t v1 = v100;
          *((void *)v100 + 76) = v69;
          *((void *)v100 + 77) = v62;
          *((void *)v100 + 78) = v70;
          if (!v60) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v1 = v100;
          do
          {
            __n128 v71 = v60[-1];
            --v60;
            __n128 v59 = v71;
            v69[-1] = v71;
            --v69;
            v60->n128_u64[0] = 0;
            v60->n128_u64[1] = 0;
          }
          while (v60 != (__n128 *)v63);
          uint64_t v72 = (__n128 *)*((void *)v100 + 76);
          unint64_t v60 = (__n128 *)*((void *)v100 + 77);
          *((void *)v100 + 76) = v69;
          *((void *)v100 + 77) = v62;
          *((void *)v100 + 78) = v70;
          if (v60 != v72)
          {
            do
            {
              uint64_t v73 = (std::__shared_weak_count *)v60[-1].n128_u64[1];
              if (v73) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v73);
              }
              --v60;
            }
            while (v60 != v72);
            unint64_t v60 = v72;
          }
          if (!v60) {
            goto LABEL_37;
          }
        }
        operator delete(v60);
      }
      else
      {
        v60->n128_u64[0] = (unint64_t)(v58 + 24);
        v60->n128_u64[1] = (unint64_t)v58;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v58 + 1, 1uLL, memory_order_relaxed);
        uint64_t v62 = v60 + 1;
        *((void *)v1 + 77) = v60 + 1;
      }
LABEL_37:
      *((void *)v1 + 77) = v62;
      uint64_t v74 = *(void *)(*((void *)v1 + 76) + 16 * v18);
      (*(void (**)(uint64_t, void, __n128))(*(void *)v74 + 80))(v74, *((unsigned int *)v1 + 158), v59);
      unint64_t v75 = *(_DWORD **)(*((void *)v100 + 76) + 16 * v18);
      v75[211] = *((_DWORD *)v100 + 159);
      (*(void (**)(_DWORD *, void, double))(*(void *)v75 + 16))(v75, *((unsigned int *)v100 + 84), v78);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58);
      ++v18;
      uint64_t v1 = v100;
    }
    while (v18 != v80);
  }
  SimpleMeters::Initialize((AUSpeakerProtectionV2 *)((char *)v1 + 680), (const CAStreamBasicDescription *)v102, (const CAStreamBasicDescription *)&v101);
  if ((*((unsigned char *)v1 + 632) & 2) != 0)
  {
    uint64_t v77 = operator new(0x48uLL);
    v77[1] = 0;
    v77[2] = 0;
    *uint64_t v77 = &unk_1F14C1BF0;
    std::string::basic_string[abi:ne180100]<0>(&v104, "T_Coil");
    clsp::CLSP_Log::CLSP_Log((uint64_t)(v77 + 3), (uint64_t)&v104);
  }
  return (*(uint64_t (**)(AUSpeakerProtectionV2 *, void, void))(*(void *)v1 + 72))(v1, 0, 0);
}

void sub_1BB6E9194(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 153) < 0) {
    operator delete(*(void **)(v2 - 176));
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t AUSpeakerProtectionV2::CreateExtendedElements(AUSpeakerProtectionV2 *this)
{
  uint64_t v1 = (AUSpeakerProtectionV2 *)((char *)this + 560);
  ausdk::AUScope::Initialize((AUSpeakerProtectionV2 *)((char *)this + 560), this, 4, 2);
  uint64_t Element = ausdk::AUScope::GetElement(v1, 0);
  ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), @"Left/Mono Speaker Settings");
  uint64_t v3 = ausdk::AUScope::GetElement(v1, 1u);
  ausdk::Owned<__CFString const*>::operator=((const void **)(v3 + 72), @"Right Speaker Settings");
  uint64_t v4 = ausdk::AUScope::GetElement(v1, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, 34);
  unsigned int v5 = *(uint64_t (**)(void))(*(void *)ausdk::AUScope::GetElement(v1, 1u) + 40);

  return v5();
}

void AUSpeakerProtectionV2::~AUSpeakerProtectionV2(AUSpeakerProtectionV2 *this)
{
  AUSpeakerProtectionV2::~AUSpeakerProtectionV2(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  void **v6;
  uint64_t vars8;

  *(void *)this = &unk_1F14BFAB8;
  AUSpeakerProtectionV2::Cleanup(this);
  uint64_t v2 = (void *)*((void *)this + 88);
  if (v2)
  {
    *((void *)this + 89) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 85);
  if (v3)
  {
    *((void *)this + 86) = v3;
    operator delete(v3);
  }
  for (unsigned int i = 672; i != 640; i -= 16)
  {
    unsigned int v5 = *(std::__shared_weak_count **)((char *)this + i);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  long long v6 = (void **)((char *)this + 608);
  std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>::__destroy_vector::operator()[abi:ne180100](&v6);
  long long v6 = (void **)((char *)this + 576);
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100](&v6);

  ausdk::AUBase::~AUBase(this);
}

uint64_t VoiceProcessorV9::ProcessDSPChain_Uplink(uint64_t this, AudioTimeStamp *a2)
{
  uint64_t v3 = (VoiceProcessorV9 *)this;
  uint64_t v520 = *MEMORY[0x1E4F143B8];
  size_t v4 = **(unsigned int **)(this + 1080);
  if (v4) {
    bzero(*(void **)(this + 1408), v4);
  }
  if (*((unsigned char *)v3 + 1404)) {
    VoiceProcessorV2::PostSRCMicClipDetection(v3);
  }
  if (!*((unsigned char *)v3 + 2083)) {
    VoiceProcessorV2::GetAbsoluteChIndexForEpmicAndApplyPreDigitalGain(v3);
  }
  int v5 = *((unsigned __int8 *)v3 + 15961);
  if (*((unsigned char *)v3 + 15961)
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 7, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 134)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && (VoiceProcessorV2::InjectionFilesReadSignal(v3, 8, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135)),
        int v5 = *((unsigned __int8 *)v3 + 15961),
        *((unsigned char *)v3 + 15961))
    && *((unsigned char *)v3 + 15960)
    || *((unsigned char *)v3 + 15963))
  {
    long long v6 = (const AudioBufferList *)*((void *)v3 + 134);
    if (v6->mNumberBuffers)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        bzero(v6->mBuffers[v7].mData, v6->mBuffers[v7].mDataByteSize);
        ++v8;
        long long v6 = (const AudioBufferList *)*((void *)v3 + 134);
        ++v7;
      }
      while (v8 < v6->mNumberBuffers);
      int v5 = *((unsigned __int8 *)v3 + 15961);
    }
  }
  else
  {
    long long v6 = (const AudioBufferList *)*((void *)v3 + 134);
  }
  uint64_t v9 = *((unsigned int *)v3 + 127);
  if (v5 || *((unsigned char *)v3 + 15962))
  {
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 4u, v9, v6, a2);
    uint64_t v9 = *((unsigned int *)v3 + 127);
    long long v10 = (const AudioBufferList *)*((void *)v3 + 135);
    if (*((unsigned char *)v3 + 15961)) {
      goto LABEL_23;
    }
  }
  else
  {
    long long v10 = (const AudioBufferList *)*((void *)v3 + 135);
  }
  if (!*((unsigned char *)v3 + 15962))
  {
    int v11 = (const AudioBufferList *)*((void *)v3 + 177);
    goto LABEL_26;
  }
LABEL_23:
  this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 5u, v9, v10, a2);
  uint64_t v9 = *((unsigned int *)v3 + 127);
  int v11 = (const AudioBufferList *)*((void *)v3 + 177);
  if (*((unsigned char *)v3 + 15961))
  {
LABEL_27:
    this = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Au, v9, v11, a2);
    goto LABEL_28;
  }
LABEL_26:
  if (*((unsigned char *)v3 + 15962)) {
    goto LABEL_27;
  }
LABEL_28:
  AudioUnitParameterValue v503 = 0.0;
  if (*((unsigned char *)v3 + 2083)
    || *((unsigned char *)v3 + 2085)
    || *((unsigned char *)v3 + 472)
    || (uint64_t v25 = *((void *)v3 + 583)) == 0 && !*((unsigned char *)v3 + 4672))
  {
    unsigned int v12 = 0;
    while (((*((_DWORD *)v3 + 116) >> v12) & 1) == 0)
    {
      if (++v12 == 32)
      {
        unsigned int v12 = 33;
        break;
      }
    }
    float v13 = (unsigned int *)*((void *)v3 + 135);
    if (v12 >= *v13)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v16 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v17 = (*v16 ? *v16 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          int v18 = **((_DWORD **)v3 + 135);
          LODWORD(buf.mSampleTime) = 136315906;
          *(void *)((char *)&buf.mSampleTime + 4) = "vpProcessUplink_v9.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 52;
          WORD1(buf.mRateScalar) = 1024;
          HIDWORD(buf.mRateScalar) = v12;
          LOWORD(buf.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&buf.mWordClockTime + 2) = v18;
          _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&buf, 0x1Eu);
        }
      }
      int v19 = (int *)*((void *)v3 + 1578);
      if (v19 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v19, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessUplink_v9.cpp", 52, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v12, **((_DWORD **)v3 + 135));
      }
      int v14 = *(void **)(*((void *)v3 + 136) + 16);
      int v15 = (const void **)*((void *)v3 + 135);
    }
    else
    {
      int v14 = *(void **)(*((void *)v3 + 136) + 16);
      int v15 = (const void **)&v13[4 * v12];
    }
    memcpy(v14, v15[2], *((unsigned int *)v15 + 3));
    if (*((unsigned char *)v3 + 2085))
    {
      if ((*((unsigned char *)v3 + 4670) & 0x40) != 0 && (*((unsigned char *)v3 + 4686) & 0x40) != 0)
      {
        unint64_t v20 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
        if (v20)
        {
          UInt64 v21 = *((void *)v3 + 500);
          inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
          inInputBufferLists.mHostTime = v21;
          UInt64 v22 = *((void *)v3 + 502);
          v512.mSampleTime = inInputBufferLists.mSampleTime;
          v512.mHostTime = v22;
          long long v23 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v23;
          long long v24 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v24;
          v513.unint64_t mNumberBuffers = 512;
          AudioUnitProcessMultiple(v20, &v513.mNumberBuffers, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 2u, (AudioBufferList **)&v512);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
          }
          if ((*((unsigned char *)v3 + 4672) & 4) != 0 && (*((unsigned char *)v3 + 4688) & 4) != 0 && *((void *)v3 + 413))
          {
            AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v503);
            AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v503, 0);
          }
        }
      }
    }
    goto LABEL_906;
  }
  AudioUnitRenderActionFlags v502 = 0;
  *((void *)v3 + 2143) = 0;
  *((void *)v3 + 2144) = 0;
  *((void *)v3 + 2142) = 0;
  UInt64 v492 = (UInt64)v3 + 17136;
  *((_DWORD *)v3 + 4284) = 1;
  *(_OWORD *)((char *)v3 + 17144) = *(_OWORD *)(*((void *)v3 + 134) + 8);
  if (v25 & 1) != 0 && (*((unsigned char *)v3 + 4680))
  {
    this = *((void *)v3 + 347);
    if (this)
    {
      long long v26 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v26;
      long long v27 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v27;
      AudioUnitRenderActionFlags v502 = 512;
      this = AudioUnitProcess((AudioUnit)this, &v502, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 135));
    }
  }
  MEMORY[0x1F4188790](this);
  uint64_t v30 = (AudioBufferList *)((char *)&v479 - ((v29 + 15) & 0x3FFFFFFFF0));
  uint64_t v31 = (_DWORD *)*((void *)v3 + 135);
  if (*v31)
  {
    unint64_t v32 = 0;
    uint64_t v33 = 2;
    unint64_t v34 = v30;
    do
    {
      *(void *)&v34->unint64_t mNumberBuffers = 0;
      *(void *)&v34->mBuffers[0].mNumberChannels = 0;
      v34->mBuffers[0].mData = 0;
      v34->unint64_t mNumberBuffers = 1;
      v34->mBuffers[0] = *(AudioBuffer *)&v31[v33];
      ++v32;
      v33 += 4;
      ++v34;
    }
    while (v32 < *v31);
  }
  uint64_t v35 = *((void *)v3 + 583);
  if ((v35 & 2) != 0 && (*((unsigned char *)v3 + 4680) & 2) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 348);
    if (Parameter)
    {
      long long v36 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v36;
      long long v37 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v37;
      AudioUnitRenderActionFlags v502 = 512;
      AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), v30);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Bu, *((unsigned int *)v3 + 127), v30, &buf);
      }
      uint64_t Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 138), v30);
      uint64_t v35 = *((void *)v3 + 583);
    }
  }
  if ((v35 & 4) != 0 && (*((unsigned char *)v3 + 4680) & 4) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 349);
    if (Parameter)
    {
      long long v38 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v38;
      long long v39 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v39;
      AudioUnitRenderActionFlags v502 = 512;
      AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), v30 + 1);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Cu, *((unsigned int *)v3 + 127), v30 + 1, &buf);
      }
      uint64_t Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 139), v30 + 1);
      uint64_t v35 = *((void *)v3 + 583);
    }
  }
  if ((v35 & 8) != 0 && (*((unsigned char *)v3 + 4680) & 8) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 350);
    if (Parameter)
    {
      long long v40 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v40;
      long long v41 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v41;
      AudioUnitRenderActionFlags v502 = 512;
      AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), v30 + 2);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Du, *((unsigned int *)v3 + 127), v30 + 2, &buf);
      }
      uint64_t Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 140), v30 + 2);
      uint64_t v35 = *((void *)v3 + 583);
    }
  }
  if ((v35 & 0x10) != 0 && (*((unsigned char *)v3 + 4680) & 0x10) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 351);
    if (Parameter)
    {
      long long v42 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v42;
      long long v43 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v43;
      AudioUnitRenderActionFlags v502 = 512;
      float v44 = v30 + 3;
      AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), v44);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Eu, *((unsigned int *)v3 + 127), v44, &buf);
      }
      uint64_t Parameter = (uint64_t)CADeprecated::CABufferList::CopyDataFrom(*((void **)v3 + 141), v44);
      uint64_t v35 = *((void *)v3 + 583);
    }
  }
  if ((v35 & 0x40) != 0 && (*((unsigned char *)v3 + 4680) & 0x40) != 0 && *((void *)v3 + 353))
  {
    long long v45 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v45;
    long long v46 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v46;
    uint64_t Parameter = VoiceProcessorV6::ApplyGMCoexNoiseMitigation(v3, *((const AudioBufferList **)v3 + 135), *((AudioBufferList **)v3 + 135), &buf, *((_DWORD *)v3 + 127));
  }
  uint64_t v47 = *((void *)v3 + 135);
  unsigned int v48 = *(_DWORD *)v47;
  v490 = &v479;
  if (v48 >= 3)
  {
    unsigned int v49 = *((_DWORD *)v3 + 3114);
    if (v48 != 3)
    {
      if (v49 == 2)
      {
        unsigned int v50 = 0;
        *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v47 + 40);
        *((_OWORD *)v3 + 1064) = *(_OWORD *)(v47 + 56);
        unsigned int v51 = 1;
        unsigned int v52 = 3;
LABEL_119:
        unsigned int v53 = 2;
LABEL_123:
        uint64_t v54 = v47 + 8;
        *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v54 + 16 * v50);
        *((_OWORD *)v3 + 1061) = *(_OWORD *)(v54 + 16 * v51);
        goto LABEL_124;
      }
      unsigned int v49 = *((_DWORD *)v3 + 3114);
      if (v49 <= 0xC && ((0x1028u >> v49) & 1) != 0)
      {
        unsigned int v50 = 0;
        *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v47 + 24);
        *((_OWORD *)v3 + 1064) = *(_OWORD *)(v47 + 40);
        unsigned int v51 = 3;
        unsigned int v52 = 2;
        unsigned int v53 = 1;
        goto LABEL_123;
      }
    }
    if (v49 != 14)
    {
      if (v49 == 9)
      {
        unsigned int v50 = 0;
        *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v47 + 56);
        *((_OWORD *)v3 + 1064) = *(_OWORD *)(v47 + 40);
        unsigned int v51 = 1;
        unsigned int v52 = 2;
        unsigned int v53 = 3;
      }
      else
      {
        unsigned int v53 = 0;
        unsigned int v52 = 0;
        unsigned int v50 = 1;
        unsigned int v51 = 2;
      }
      goto LABEL_123;
    }
    unsigned int v52 = 0;
    unsigned int v50 = 0;
    *(_OWORD *)((char *)v3 + 17000) = *(_OWORD *)(v47 + 40);
    unsigned int v51 = 1;
    goto LABEL_119;
  }
  *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v47 + 8);
  if (*(_DWORD *)v47 < 2u)
  {
    unsigned int v53 = 0;
    unsigned int v52 = 0;
    unsigned int v51 = 0;
    unsigned int v50 = 0;
  }
  else
  {
    unsigned int v53 = 0;
    unsigned int v52 = 0;
    if (*(unsigned char *)(v492 + 64))
    {
      unsigned int v51 = 0;
      *(_OWORD *)((char *)v3 + 16952) = *(_OWORD *)(v47 + 24);
      *((_OWORD *)v3 + 1061) = *(_OWORD *)(v47 + 8);
      unsigned int v50 = 1;
    }
    else
    {
      unsigned int v50 = 0;
      *((_OWORD *)v3 + 1061) = *(_OWORD *)(v47 + 24);
      unsigned int v51 = 1;
    }
  }
LABEL_124:
  uint64_t v55 = *((void *)v3 + 583);
  if ((v55 & 0x80) != 0 && (*((unsigned char *)v3 + 4680) & 0x80) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 354);
    if (Parameter)
    {
      long long v56 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v56;
      long long v57 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v57;
      AudioUnitRenderActionFlags v502 = 512;
      uint64_t Parameter = AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 706);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 6u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 706, &buf);
      }
      uint64_t v55 = *((void *)v3 + 583);
    }
  }
  if (v55 & 0x100) != 0 && (*((unsigned char *)v3 + 4681))
  {
    uint64_t Parameter = *((void *)v3 + 355);
    if (Parameter)
    {
      long long v58 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v58;
      long long v59 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v59;
      AudioUnitRenderActionFlags v502 = 512;
      uint64_t Parameter = AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 707);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 7u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 707, &buf);
      }
      uint64_t v55 = *((void *)v3 + 583);
    }
  }
  if ((v55 & 0x200) != 0)
  {
    uint64_t v60 = *((void *)v3 + 585);
    if ((v60 & 0x200) != 0)
    {
      uint64_t Parameter = *((void *)v3 + 356);
      if (Parameter)
      {
        if ((uint64_t v61 = v55 & v60, (v61 & 0x1000000000000) != 0) && *((void *)v3 + 395)
          || (v61 & 0x1000000000) != 0 && *((void *)v3 + 383)
          || (v61 & 0x10000000) != 0 && *((void *)v3 + 375))
        {
          long long v62 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&buf.mRateScalar = v62;
          long long v63 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&buf.mSMPTETime.mHours = v63;
          AudioUnitRenderActionFlags v502 = 512;
          uint64_t Parameter = AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 708);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 8u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 708, &buf);
          }
          uint64_t v55 = *((void *)v3 + 583);
        }
      }
    }
  }
  if ((v55 & 0x400) != 0 && (*((unsigned char *)v3 + 4681) & 4) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 357);
    if (Parameter)
    {
      long long v64 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v64;
      long long v65 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v65;
      AudioUnitRenderActionFlags v502 = 512;
      uint64_t Parameter = AudioUnitProcess((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), (AudioBufferList *)v3 + 709);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 9u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 709, &buf);
      }
      uint64_t v55 = *((void *)v3 + 583);
    }
  }
  if ((v55 & 0x10000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x10) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 375);
    if (Parameter)
    {
      if (**((unsigned char **)v3 + 176)) {
        float v66 = 1.0;
      }
      else {
        float v66 = 0.0;
      }
      AudioUnitSetParameter((AudioUnit)Parameter, 0x66616331u, 0, 0, v66, 0);
      if (*(unsigned char *)(*((void *)v3 + 176) + 1)) {
        float v67 = 1.0;
      }
      else {
        float v67 = 0.0;
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 375), 0x66616332u, 0, 0, v67, 0);
      if (*(unsigned char *)(*((void *)v3 + 176) + 2)) {
        float v68 = 1.0;
      }
      else {
        float v68 = 0.0;
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 375), 0x66616333u, 0, 0, v68, 0);
      uint64_t v69 = 0;
      qmemcpy(&buf, "1dmr2dmr3dmr", 12);
      do
      {
        AudioUnitSetParameter(*((AudioUnit *)v3 + 375), *(_DWORD *)((char *)&buf.mSampleTime + v69), 0, 0, *((AudioUnitParameterValue *)v3 + 1094), 0);
        v69 += 4;
      }
      while (v69 != 12);
      v513.unint64_t mNumberBuffers = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 1u, 0, 0, (AudioUnitParameterValue *)&v513.mNumberBuffers);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 375), 0x67746479u, 0, 0, *(AudioUnitParameterValue *)&v513.mNumberBuffers, 0);
      LODWORD(v517.realp) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v517);
      if (*((float *)v3 + 572) != *(float *)&v517.realp)
      {
        AudioUnitSetParameter(*((AudioUnit *)v3 + 375), 0x67747067u, 0, 0, *(AudioUnitParameterValue *)&v517.realp, 0);
        *((_DWORD *)v3 + 572) = v517.realp;
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 375), 0x67746467u, 0, 0, *((AudioUnitParameterValue *)v3 + 3133), 0);
      uint64_t v70 = AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x6774706Du, 0, 0, (float)*((int *)v3 + 576), 0);
      MEMORY[0x1F4188790](v70);
      *(&v479 - 8) = 3;
      *(_OWORD *)(&v479 - 7) = *(_OWORD *)((char *)v3 + 16952);
      *(_OWORD *)(&v479 - 5) = *((_OWORD *)v3 + 1061);
      *(_OWORD *)(&v479 - 3) = *(_OWORD *)((char *)v3 + 17000);
      UInt64 v71 = *((void *)v3 + 134);
      *(void *)&inInputBufferLists.mSampleTime = &v479 - 8;
      inInputBufferLists.mHostTime = v71;
      v512.mSampleTime = *((Float64 *)v3 + 136);
      long long v72 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v72;
      long long v73 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v73;
      LODWORD(v516.realp) = 512;
      AudioUnitProcessMultiple(*((AudioUnit *)v3 + 375), (AudioUnitRenderActionFlags *)&v516, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v512);
      AudioUnitGetProperty(*((AudioUnit *)v3 + 375), 0x6E657374u, 0, 0, *(void **)(*((void *)v3 + 2188) + 16), (UInt32 *)(*((void *)v3 + 2188) + 12));
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x20u, (*((_DWORD *)v3 + 127) + 1), *((const AudioBufferList **)v3 + 2188), &buf);
      }
      AudioUnitGetParameter(*((AudioUnit *)v3 + 375), 0x776E6466u, 0, 0, (AudioUnitParameterValue *)v3 + 4386);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 375), 0x67747370u, 0, 0, &v503);
      AudioUnitParameterValue v74 = v503;
      *(AudioUnitParameterValue *)(v492 + 412) = v503;
      AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v74, 0);
      uint64_t Parameter = AudioUnitGetParameter(*((AudioUnit *)v3 + 375), 0x67746774u, 0, 0, (AudioUnitParameterValue *)v3 + 3134);
      uint64_t v55 = *((void *)v3 + 583);
    }
  }
  if ((v55 & 0x400000) != 0 && (*((unsigned char *)v3 + 4682) & 0x40) != 0)
  {
    if (*((void *)v3 + 369))
    {
      uint64_t Parameter = *((void *)v3 + 2205);
      if (Parameter)
      {
        unint64_t v75 = (const float *)*((void *)v3 + 2120);
        UInt64 v76 = *(void *)(*((void *)v3 + 2200) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2200) + 16);
        buf.mHostTime = v76;
        uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v75, (DSPSplitComplex *)&buf);
        uint64_t v55 = *((void *)v3 + 583);
      }
    }
  }
  if ((v55 & 0x800000) != 0 && (*((unsigned char *)v3 + 4682) & 0x80) != 0)
  {
    if (*((void *)v3 + 370))
    {
      uint64_t Parameter = *((void *)v3 + 2206);
      if (Parameter)
      {
        uint64_t v77 = (const float *)*((void *)v3 + 2123);
        UInt64 v78 = *(void *)(*((void *)v3 + 2201) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2201) + 16);
        buf.mHostTime = v78;
        uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v77, (DSPSplitComplex *)&buf);
        uint64_t v55 = *((void *)v3 + 583);
      }
    }
  }
  if (v55 & 0x1000000) != 0 && (*((unsigned char *)v3 + 4683))
  {
    if (*((void *)v3 + 371))
    {
      uint64_t Parameter = *((void *)v3 + 2207);
      if (Parameter)
      {
        uint64_t v79 = (const float *)*((void *)v3 + 2126);
        UInt64 v80 = *(void *)(*((void *)v3 + 2202) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2202) + 16);
        buf.mHostTime = v80;
        uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v79, (DSPSplitComplex *)&buf);
        uint64_t v55 = *((void *)v3 + 583);
      }
    }
  }
  if ((v55 & 0x2000000) != 0 && (*((unsigned char *)v3 + 4683) & 2) != 0)
  {
    if (*((void *)v3 + 372))
    {
      uint64_t Parameter = *((void *)v3 + 2208);
      if (Parameter)
      {
        double v81 = (const float *)*((void *)v3 + 2129);
        UInt64 v82 = *(void *)(*((void *)v3 + 2203) + 16) + 4 * *((unsigned int *)v3 + 127);
        buf.mSampleTime = *(Float64 *)(*((void *)v3 + 2203) + 16);
        buf.mHostTime = v82;
        uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v81, (DSPSplitComplex *)&buf);
        uint64_t v55 = *((void *)v3 + 583);
      }
    }
  }
  if (((v55 & 0x1000000000000) == 0 || (*((unsigned char *)v3 + 4686) & 1) == 0 || !*((void *)v3 + 395))
    && (v55 & 0x800) != 0
    && (*((unsigned char *)v3 + 4681) & 8) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 358);
    if (Parameter)
    {
      MEMORY[0x1F4188790](Parameter);
      *(&v479 - 6) = 2;
      *(_OWORD *)(&v479 - 5) = *(_OWORD *)((char *)v3 + 16952);
      *(_OWORD *)(&v479 - 3) = *((_OWORD *)v3 + 1061);
      *(void *)&v512.mSampleTime = &v479 - 6;
      v512.mHostTime = 0;
      *(void *)&inInputBufferLists.mSampleTime = (char *)v3 + 16944;
      memset(&inInputBufferLists.mHostTime, 0, 24);
      AudioUnitRenderActionFlags v502 = 512;
      long long v83 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v83;
      long long v84 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v84;
      uint64_t Parameter = AudioUnitProcessMultiple(v85, &v502, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v512, 4u, (AudioBufferList **)&inInputBufferLists);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x63u, *((unsigned int *)v3 + 127), (const AudioBufferList *)v3 + 706, &buf);
      }
      uint64_t v55 = *((void *)v3 + 583);
    }
  }
  __int16 v501 = 0;
  long long v86 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&buf.mRateScalar = v86;
  long long v87 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&buf.mSMPTETime.mHours = v87;
  if ((v55 & 0x4000000) != 0 && (*((unsigned char *)v3 + 4683) & 4) != 0 && *((void *)v3 + 373))
  {
    uint64_t v88 = *((void *)v3 + 2115);
    if ((unint64_t)(*((void *)v3 + 2116) - v88) <= 0x20) {
      goto LABEL_989;
    }
    ECApplicator::apply(*(AudioUnitParameterID **)(v88 + 32), &buf, v50, (BOOL *)&v501, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
    uint64_t v89 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x21u, v89, *((const AudioBufferList **)v3 + 136), &buf);
      uint64_t v89 = *((unsigned int *)v3 + 127);
      uint64_t v90 = *((void *)v3 + 423);
      if (*((unsigned char *)v3 + 15961)) {
        goto LABEL_218;
      }
    }
    else
    {
      uint64_t v90 = *((void *)v3 + 423);
    }
    if (!*((unsigned char *)v3 + 15962))
    {
LABEL_219:
      uint64_t Parameter = *((void *)v3 + 2147);
      double v91 = *(const float **)(v90 + 16);
      uint64_t v92 = *((void *)v3 + 508);
      inInputBufferLists.mSampleTime = *(Float64 *)(v92 + 16);
      inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v89;
      if (Parameter)
      {
        uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v91, (DSPSplitComplex *)&inInputBufferLists);
        uint64_t v89 = *((unsigned int *)v3 + 127);
        uint64_t v92 = *((void *)v3 + 508);
      }
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x16u, v89, (const AudioBufferList *)v92, &buf);
      }
      goto LABEL_224;
    }
LABEL_218:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x10u, v89, (const AudioBufferList *)v90, &buf);
    uint64_t v90 = *((void *)v3 + 423);
    uint64_t v89 = *((unsigned int *)v3 + 127);
    goto LABEL_219;
  }
LABEL_224:
  BOOL v500 = 0;
  if ((*((unsigned char *)v3 + 4667) & 8) == 0 || (*((unsigned char *)v3 + 4683) & 8) == 0 || !*((void *)v3 + 374)) {
    goto LABEL_240;
  }
  uint64_t v93 = *((void *)v3 + 2115);
  if ((unint64_t)(*((void *)v3 + 2116) - v93) <= 0x28) {
    goto LABEL_989;
  }
  ECApplicator::apply(*(AudioUnitParameterID **)(v93 + 40), &buf, v51, &v500, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
  uint64_t v94 = *((unsigned int *)v3 + 127);
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x22u, v94, *((const AudioBufferList **)v3 + 136), &buf);
    uint64_t v94 = *((unsigned int *)v3 + 127);
    uint64_t v95 = *((void *)v3 + 2154);
    if (*((unsigned char *)v3 + 15961))
    {
LABEL_234:
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x11u, v94, (const AudioBufferList *)v95, &buf);
      uint64_t v95 = *((void *)v3 + 2154);
      uint64_t v94 = *((unsigned int *)v3 + 127);
      goto LABEL_235;
    }
  }
  else
  {
    uint64_t v95 = *((void *)v3 + 2154);
  }
  if (*((unsigned char *)v3 + 15962)) {
    goto LABEL_234;
  }
LABEL_235:
  uint64_t Parameter = *((void *)v3 + 2162);
  double v96 = *(const float **)(v95 + 16);
  uint64_t v97 = *((void *)v3 + 509);
  inInputBufferLists.mSampleTime = *(Float64 *)(v97 + 16);
  inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v94;
  if (Parameter)
  {
    uint64_t Parameter = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Parameter, v96, (DSPSplitComplex *)&inInputBufferLists);
    uint64_t v94 = *((unsigned int *)v3 + 127);
    uint64_t v97 = *((void *)v3 + 509);
  }
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
    uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x17u, v94, (const AudioBufferList *)v97, &buf);
  }
LABEL_240:
  uint64_t v98 = *((void *)v3 + 583);
  if ((v98 & 0x400000) != 0 && (*((unsigned char *)v3 + 4682) & 0x40) != 0 && *((void *)v3 + 369))
  {
    uint64_t v99 = (AudioUnitParameterID **)*((void *)v3 + 2115);
    if (*((AudioUnitParameterID ***)v3 + 2116) == v99) {
      goto LABEL_989;
    }
    uint64_t Parameter = ECApplicator::apply(*v99, &buf, v50, (BOOL *)&v501 + 1, (float *)v3 + 1048, (float *)v3 + 1052, (float *)v3 + 1056, (float *)v3 + 1060, (float *)v3 + 1064, (float *)v3 + 1068);
    uint64_t v100 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Cu, v100, (const AudioBufferList *)v3 + 706, &buf);
      uint64_t v100 = *((unsigned int *)v3 + 127);
      AudioStreamBasicDescription v101 = (const AudioBufferList *)*((void *)v3 + 419);
      if (*((unsigned char *)v3 + 15961))
      {
LABEL_283:
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xCu, v100, v101, &buf);
        goto LABEL_269;
      }
    }
    else
    {
      AudioStreamBasicDescription v101 = (const AudioBufferList *)*((void *)v3 + 419);
    }
    if (*((unsigned char *)v3 + 15962)) {
      goto LABEL_283;
    }
  }
  else if ((v98 & 0x10000000) == 0 || (*((unsigned char *)v3 + 4683) & 0x10) == 0 || !*((void *)v3 + 375))
  {
    unsigned int v102 = 0;
    while (((*((_DWORD *)v3 + 116) >> v102) & 1) == 0)
    {
      if (++v102 == 32)
      {
        unsigned int v102 = 33;
        break;
      }
    }
    if (v102 >= **((_DWORD **)v3 + 135))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v103 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
      if (v103)
      {
        long long v104 = v103;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          int v105 = **((_DWORD **)v3 + 135);
          LODWORD(inInputBufferLists.mSampleTime) = 136315906;
          *(void *)((char *)&inInputBufferLists.mSampleTime + 4) = "vpProcessUplink_v9.cpp";
          WORD2(inInputBufferLists.mHostTime) = 1024;
          *(_DWORD *)((char *)&inInputBufferLists.mHostTime + 6) = 486;
          WORD1(inInputBufferLists.mRateScalar) = 1024;
          HIDWORD(inInputBufferLists.mRateScalar) = v102;
          LOWORD(inInputBufferLists.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&inInputBufferLists.mWordClockTime + 2) = v105;
          _os_log_impl(&dword_1BB0CE000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", (uint8_t *)&inInputBufferLists, 0x1Eu);
        }
      }
      unint64_t v106 = (int *)*((void *)v3 + 1578);
      if (v106 && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v106, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v9/vpProcessUplink_v9.cpp", 486, "ProcessDSPChain_Uplink", "ERROR: mPrimaryEpMicIndex is %d, but epmic only has %d channels", v102, **((_DWORD **)v3 + 135));
      }
      unsigned int v102 = 0;
    }
    uint64_t v107 = *((void *)v3 + 135) + 16 * v102;
    uint64_t Parameter = (uint64_t)memcpy(*(void **)(*((void *)v3 + 136) + 16), *(const void **)(v107 + 16), *(unsigned int *)(v107 + 12));
  }
LABEL_269:
  if ((*((unsigned char *)v3 + 4672) & 0x40) != 0 && (*((unsigned char *)v3 + 4688) & 0x40) != 0)
  {
    uint64_t Parameter = *((void *)v3 + 417);
    if (Parameter)
    {
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 135);
      inInputBufferLists.mHostTime = v492;
      v512.mSampleTime = *((Float64 *)v3 + 136);
      AudioUnitRenderActionFlags v502 = 512;
      uint64_t Parameter = AudioUnitProcessMultiple((AudioUnit)Parameter, &v502, &buf, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v512);
    }
  }
  BOOL v499 = 0;
  if ((*((unsigned char *)v3 + 4666) & 0x80) != 0 && (*((unsigned char *)v3 + 4682) & 0x80) != 0 && *((void *)v3 + 370))
  {
    uint64_t v108 = *((void *)v3 + 2115);
    if ((unint64_t)(*((void *)v3 + 2116) - v108) <= 8) {
      goto LABEL_989;
    }
    uint64_t Parameter = ECApplicator::apply(*(AudioUnitParameterID **)(v108 + 8), &buf, v51, &v499, (float *)v3 + 1049, (float *)v3 + 1053, (float *)v3 + 1057, (float *)v3 + 1061, (float *)v3 + 1065, (float *)v3 + 1069);
    uint64_t v109 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Du, v109, (const AudioBufferList *)v3 + 707, &buf);
      uint64_t v109 = *((unsigned int *)v3 + 127);
      unint64_t v110 = (const AudioBufferList *)*((void *)v3 + 420);
      if (*((unsigned char *)v3 + 15961))
      {
LABEL_286:
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xDu, v109, v110, &buf);
        goto LABEL_287;
      }
    }
    else
    {
      unint64_t v110 = (const AudioBufferList *)*((void *)v3 + 420);
    }
    if (*((unsigned char *)v3 + 15962)) {
      goto LABEL_286;
    }
  }
LABEL_287:
  BOOL v498 = 0;
  if ((*((unsigned char *)v3 + 4667) & 1) != 0 && (*((unsigned char *)v3 + 4683) & 1) != 0 && *((void *)v3 + 371))
  {
    uint64_t v111 = *((void *)v3 + 2115);
    if ((unint64_t)(*((void *)v3 + 2116) - v111) <= 0x10) {
      goto LABEL_989;
    }
    uint64_t Parameter = ECApplicator::apply(*(AudioUnitParameterID **)(v111 + 16), &buf, v53, &v498, (float *)v3 + 1050, (float *)v3 + 1054, (float *)v3 + 1058, (float *)v3 + 1062, (float *)v3 + 1066, (float *)v3 + 1070);
    uint64_t v112 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Eu, v112, (const AudioBufferList *)v3 + 708, &buf);
      uint64_t v112 = *((unsigned int *)v3 + 127);
      uint64_t v113 = (const AudioBufferList *)*((void *)v3 + 422);
      if (*((unsigned char *)v3 + 15961))
      {
LABEL_297:
        uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xEu, v112, v113, &buf);
        goto LABEL_298;
      }
    }
    else
    {
      uint64_t v113 = (const AudioBufferList *)*((void *)v3 + 422);
    }
    if (*((unsigned char *)v3 + 15962)) {
      goto LABEL_297;
    }
  }
LABEL_298:
  BOOL v497 = 0;
  if ((*((unsigned char *)v3 + 4667) & 2) == 0 || (*((unsigned char *)v3 + 4683) & 2) == 0 || !*((void *)v3 + 372)) {
    goto LABEL_309;
  }
  uint64_t v114 = *((void *)v3 + 2115);
  if ((unint64_t)(*((void *)v3 + 2116) - v114) <= 0x18) {
LABEL_989:
  }
    std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
  uint64_t Parameter = ECApplicator::apply(*(AudioUnitParameterID **)(v114 + 24), &buf, v52, &v497, (float *)v3 + 1051, (float *)v3 + 1055, (float *)v3 + 1059, (float *)v3 + 1063, (float *)v3 + 1067, (float *)v3 + 1071);
  uint64_t v115 = *((unsigned int *)v3 + 127);
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
  {
    uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Fu, v115, (const AudioBufferList *)v3 + 709, &buf);
    uint64_t v115 = *((unsigned int *)v3 + 127);
    unint64_t v116 = (const AudioBufferList *)*((void *)v3 + 421);
    if (*((unsigned char *)v3 + 15961))
    {
LABEL_308:
      uint64_t Parameter = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0xFu, v115, v116, &buf);
      goto LABEL_309;
    }
  }
  else
  {
    unint64_t v116 = (const AudioBufferList *)*((void *)v3 + 421);
  }
  if (*((unsigned char *)v3 + 15962)) {
    goto LABEL_308;
  }
LABEL_309:
  if ((*((unsigned char *)v3 + 8901) & 8) != 0 && (*((unsigned char *)v3 + 8909) & 8) != 0)
  {
    if (*((void *)v3 + 481))
    {
      *(unsigned char *)(v492 + 32) = 0;
      if (*((unsigned char *)v3 + 4667) & 1) != 0 && (*((unsigned char *)v3 + 4683))
      {
        uint64_t Parameter = *((void *)v3 + 371);
        if (Parameter)
        {
          if (*((void *)v3 + 2145))
          {
            LODWORD(inInputBufferLists.mSampleTime) = 0;
            uint64_t Parameter = AudioUnitGetPropertyInfo((AudioUnit)Parameter, 0xF3Cu, 0, 0, (UInt32 *)&inInputBufferLists, 0);
            if (!Parameter && LODWORD(inInputBufferLists.mSampleTime) == 4 * *((unsigned int *)v3 + 127))
            {
              uint64_t v117 = *(void **)(*((void *)v3 + 2145) + 16);
              uint64_t Parameter = AudioUnitGetProperty(*((AudioUnit *)v3 + 371), 0xF3Cu, 0, 0, v117, (UInt32 *)&inInputBufferLists);
              int v118 = Parameter;
              if (*((unsigned char *)v3 + 481)) {
                uint64_t Parameter = AudioUnitSetProperty(*((AudioUnit *)v3 + 481), 0xF3Cu, 0, 0, v117, LODWORD(inInputBufferLists.mSampleTime));
              }
              *(unsigned char *)(v492 + 32) = v118 == 0;
            }
          }
        }
      }
    }
  }
  if ((*((unsigned char *)v3 + 4668) & 0x10) != 0 && (*((unsigned char *)v3 + 4684) & 0x10) != 0 && *((void *)v3 + 383))
  {
    MEMORY[0x1F4188790](Parameter);
    v489 = (AudioBufferList *)(&v479 - 12);
    *((_OWORD *)&v479 - 6) = 0u;
    *((_OWORD *)&v479 - 5) = 0u;
    *((_OWORD *)&v479 - 3) = 0u;
    *((_OWORD *)&v479 - 2) = 0u;
    *((_OWORD *)&v479 - 4) = 0u;
    uint64_t v478 = 0;
    *(_OWORD *)(&v479 - 11) = *(_OWORD *)((char *)v3 + 16952);
    *(_OWORD *)(&v479 - 5) = *((_OWORD *)v3 + 1061);
    long long v119 = *(_OWORD *)((char *)v3 + 17000);
    *((_DWORD *)&v479 - 24) = 5;
    *(_OWORD *)(&v479 - 9) = v119;
    *(_OWORD *)(&v479 - 7) = *((_OWORD *)v3 + 1064);
    v491 = (char *)*((void *)v3 + 2144);
    uint64_t v120 = *(const float **)(*((void *)v3 + 419) + 16);
    v488 = *(const float **)(*((void *)v3 + 420) + 16);
    unint64_t v121 = v488;
    unint64_t v122 = *(const float **)(*((void *)v3 + 422) + 16);
    uint64_t v123 = *(float **)(*((void *)v3 + 421) + 16);
    long long v124 = *(float **)(*((void *)v3 + 2170) + 16);
    LODWORD(v516.realp) = 1048576000;
    vDSP_vadd(v120, 1, v122, 1, v124, 1, *((unsigned int *)v3 + 127));
    vDSP_vadd(v124, 1, v123, 1, v124, 1, *((unsigned int *)v3 + 127));
    vDSP_vadd(v124, 1, v121, 1, v124, 1, *((unsigned int *)v3 + 127));
    std::string v125 = v124;
    uint64_t v126 = v124;
    unint64_t v127 = v122;
    unint64_t v128 = (float *)v120;
    vDSP_vsmul(v125, 1, (const float *)&v516, v126, 1, *((unsigned int *)v3 + 127));
    *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 2170) + 8);
    *(void *)&v513.unint64_t mNumberBuffers = v489;
    v517.realp = (float *)*((void *)v3 + 136);
    AudioUnitRenderActionFlags v502 = 512;
    long long v129 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v129;
    long long v130 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v130;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 383), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v513, 1u, (AudioBufferList **)&v517);
    UInt64 v131 = v492;
    memcpy((void *)(*(void *)(*((void *)v3 + 2166) + 16) + 4 * *(unsigned int *)(v492 + 184)), v491, 4 * *((unsigned int *)v3 + 127));
    memcpy((void *)(*(void *)(*((void *)v3 + 2167) + 16) + 4 * *(unsigned int *)(v131 + 184)), v120, 4 * *((unsigned int *)v3 + 127));
    uint64_t v132 = (void *)(*(void *)(*((void *)v3 + 2168) + 16) + 4 * *(unsigned int *)(v131 + 184));
    size_t v133 = 4 * *((unsigned int *)v3 + 127);
    v489 = (AudioBufferList *)v127;
    memcpy(v132, v127, v133);
    memcpy((void *)(*(void *)(*((void *)v3 + 2220) + 16) + 4 * *(unsigned int *)(v131 + 184)), v123, 4 * *((unsigned int *)v3 + 127));
    unint64_t v134 = (float *)v488;
    memcpy((void *)(*(void *)(*((void *)v3 + 2169) + 16) + 4 * *(unsigned int *)(v131 + 184)), v488, 4 * *((unsigned int *)v3 + 127));
    LODWORD(v510) = 4 * *((_DWORD *)v3 + 127);
    AudioUnitGetProperty(*((AudioUnit *)v3 + 383), 0x9087u, 0, 0, *(void **)(*((void *)v3 + 2171) + 16), (UInt32 *)&v510);
    uint64_t v135 = *((unsigned int *)v3 + 127);
    v512.mSampleTime = *(Float64 *)(*((void *)v3 + 2172) + 16);
    v512.mHostTime = *(void *)&v512.mSampleTime + 4 * v135;
    uint64_t v136 = (VPTimeFreqConverter *)*((void *)v3 + 2173);
    if (v136)
    {
      VPTimeFreqConverter::Analyze(v136, *(const float **)(*((void *)v3 + 136) + 16), (DSPSplitComplex *)&v512);
      uint64_t v135 = *((unsigned int *)v3 + 127);
    }
    memcpy(v491, *(const void **)(*((void *)v3 + 2166) + 16), 4 * v135);
    memcpy(v128, *(const void **)(*((void *)v3 + 2167) + 16), 4 * *((unsigned int *)v3 + 127));
    memcpy(v489, *(const void **)(*((void *)v3 + 2168) + 16), 4 * *((unsigned int *)v3 + 127));
    memcpy(v123, *(const void **)(*((void *)v3 + 2220) + 16), 4 * *((unsigned int *)v3 + 127));
    memcpy(v134, *(const void **)(*((void *)v3 + 2169) + 16), 4 * *((unsigned int *)v3 + 127));
    UInt64 v137 = v492;
    memmove(*(void **)(*((void *)v3 + 2166) + 16), (const void *)(*(void *)(*((void *)v3 + 2166) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v492 + 184));
    memmove(*(void **)(*((void *)v3 + 2167) + 16), (const void *)(*(void *)(*((void *)v3 + 2167) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v137 + 184));
    memmove(*(void **)(*((void *)v3 + 2168) + 16), (const void *)(*(void *)(*((void *)v3 + 2168) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v137 + 184));
    memmove(*(void **)(*((void *)v3 + 2220) + 16), (const void *)(*(void *)(*((void *)v3 + 2220) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v137 + 184));
    memmove(*(void **)(*((void *)v3 + 2169) + 16), (const void *)(*(void *)(*((void *)v3 + 2169) + 16) + 4 * *((unsigned int *)v3 + 127)), 4 * *(unsigned int *)(v137 + 184));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &inInputBufferLists);
    }
  }
  uint64_t Property = *((void *)v3 + 519);
  unint64_t v139 = (const float *)*((void *)v3 + 2144);
  UInt64 v140 = *(void *)(*((void *)v3 + 511) + 16) + 4 * *((unsigned int *)v3 + 127);
  inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 511) + 16);
  inInputBufferLists.mHostTime = v140;
  if (Property) {
    uint64_t Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v139, (DSPSplitComplex *)&inInputBufferLists);
  }
  AudioUnitParameterValue v496 = 0.0;
  if ((*((unsigned char *)v3 + 4666) & 0x40) != 0 && (*((unsigned char *)v3 + 4682) & 0x40) != 0 && *((void *)v3 + 369))
  {
    uint64_t v141 = (VPTimeFreqConverter *)*((void *)v3 + 513);
    uint64_t v142 = (const float *)*((void *)v3 + 2120);
    uint64_t v143 = *((unsigned int *)v3 + 127);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 429) + 16);
    inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v143;
    if (v141)
    {
      VPTimeFreqConverter::Analyze(v141, v142, (DSPSplitComplex *)&inInputBufferLists);
      uint64_t v143 = *((unsigned int *)v3 + 127);
    }
    uint64_t Property = *((void *)v3 + 517);
    uint64_t v144 = *(const float **)(*((void *)v3 + 419) + 16);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 16);
    inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v143;
    if (Property)
    {
      uint64_t Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v144, (DSPSplitComplex *)&inInputBufferLists);
      uint64_t v143 = *((unsigned int *)v3 + 127);
    }
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x12u, v143, *((const AudioBufferList **)v3 + 429), &buf);
    }
  }
  if ((*((unsigned char *)v3 + 4666) & 0x80) != 0 && (*((unsigned char *)v3 + 4682) & 0x80) != 0 && *((void *)v3 + 370))
  {
    unint64_t v145 = (VPTimeFreqConverter *)*((void *)v3 + 514);
    unint64_t v146 = (const float *)*((void *)v3 + 2123);
    uint64_t v147 = *((unsigned int *)v3 + 127);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 506) + 16);
    inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v147;
    if (v145)
    {
      VPTimeFreqConverter::Analyze(v145, v146, (DSPSplitComplex *)&inInputBufferLists);
      uint64_t v147 = *((unsigned int *)v3 + 127);
    }
    uint64_t Property = *((void *)v3 + 518);
    float v148 = *(const float **)(*((void *)v3 + 420) + 16);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 32);
    inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v147;
    if (Property)
    {
      uint64_t Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v148, (DSPSplitComplex *)&inInputBufferLists);
      uint64_t v147 = *((unsigned int *)v3 + 127);
    }
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x13u, v147, *((const AudioBufferList **)v3 + 506), &buf);
    }
  }
  uint64_t v149 = *((void *)v3 + 583);
  if ((v149 & 0x1000000) != 0)
  {
    uint64_t v150 = *((void *)v3 + 585);
    if ((v150 & 0x1000000) != 0)
    {
      if (*((void *)v3 + 371))
      {
        if ((v149 & v150 & 0x80000000000) != 0)
        {
          uint64_t Property = *((void *)v3 + 390);
          if (Property) {
            uint64_t Property = AudioUnitGetParameter((AudioUnit)Property, 0x2Bu, 0, 0, &v496);
          }
        }
        if (v496 != 0.0
          || (*((unsigned char *)v3 + 4670) & 1) != 0 && (*((unsigned char *)v3 + 4686) & 1) != 0 && *((void *)v3 + 395))
        {
          unint64_t v151 = (VPTimeFreqConverter *)*((void *)v3 + 515);
          unint64_t v152 = (const float *)*((void *)v3 + 2126);
          uint64_t v153 = *((unsigned int *)v3 + 127);
          inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 2184) + 16);
          inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v153;
          if (v151)
          {
            VPTimeFreqConverter::Analyze(v151, v152, (DSPSplitComplex *)&inInputBufferLists);
            uint64_t v153 = *((unsigned int *)v3 + 127);
          }
          uint64_t Property = *((void *)v3 + 2149);
          float v154 = *(const float **)(*((void *)v3 + 422) + 16);
          inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 48);
          inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v153;
          if (Property)
          {
            uint64_t Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v154, (DSPSplitComplex *)&inInputBufferLists);
            uint64_t v153 = *((unsigned int *)v3 + 127);
          }
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x14u, v153, *((const AudioBufferList **)v3 + 2184), &buf);
          }
        }
      }
    }
  }
  if ((*((unsigned char *)v3 + 4667) & 2) != 0 && (*((unsigned char *)v3 + 4683) & 2) != 0 && *((void *)v3 + 372))
  {
    float v155 = (VPTimeFreqConverter *)*((void *)v3 + 516);
    uint64_t v156 = (const float *)*((void *)v3 + 2129);
    uint64_t v157 = *((unsigned int *)v3 + 127);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 507) + 16);
    inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v157;
    if (v155)
    {
      VPTimeFreqConverter::Analyze(v155, v156, (DSPSplitComplex *)&inInputBufferLists);
      uint64_t v157 = *((unsigned int *)v3 + 127);
    }
    uint64_t Property = *((void *)v3 + 2113);
    unint64_t v158 = *(const float **)(*((void *)v3 + 421) + 16);
    inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 505) + 64);
    inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v157;
    if (Property)
    {
      uint64_t Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v158, (DSPSplitComplex *)&inInputBufferLists);
      uint64_t v157 = *((unsigned int *)v3 + 127);
    }
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x15u, v157, *((const AudioBufferList **)v3 + 507), &buf);
    }
  }
  uint64_t v159 = *((void *)v3 + 583);
  if ((v159 & 0x1000) != 0 && (*((unsigned char *)v3 + 4681) & 0x10) != 0)
  {
    uint64_t Property = *((void *)v3 + 359);
    if (Property)
    {
      MEMORY[0x1F4188790](Property);
      *(&v479 - 6) = 2;
      *(_OWORD *)(&v479 - 5) = *(_OWORD *)((char *)v3 + 16952);
      *(_OWORD *)(&v479 - 3) = *((_OWORD *)v3 + 1061);
      v517.realp = (float *)(&v479 - 6);
      v517.imagp = 0;
      v512.mSampleTime = *((Float64 *)v3 + 2189);
      memset(&v512.mHostTime, 0, 24);
      AudioUnitRenderActionFlags v502 = 512;
      long long v160 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v160;
      long long v161 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v161;
      AudioUnitProcessMultiple(v162, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v517, 4u, (AudioBufferList **)&v512);
      uint64_t Property = *((void *)v3 + 2192);
      unint64_t v163 = *(const float **)(*((void *)v3 + 2189) + 16);
      uint64_t v164 = *((void *)v3 + 2190);
      uint64_t v165 = *((unsigned int *)v3 + 127);
      *(void *)&v513.unint64_t mNumberBuffers = *(void *)(v164 + 16);
      *(void *)&v513.mBuffers[0].mNumberChannels = *(void *)&v513.mNumberBuffers + 4 * v165;
      if (Property)
      {
        uint64_t Property = VPTimeFreqConverter::Analyze((VPTimeFreqConverter *)Property, v163, (DSPSplitComplex *)&v513);
        uint64_t v165 = *((unsigned int *)v3 + 127);
        uint64_t v164 = *((void *)v3 + 2190);
      }
      if (*(unsigned char *)(v492 + 536))
      {
        *(void *)&v513.unint64_t mNumberBuffers = *(void *)(*((void *)v3 + 429) + 16);
        *(void *)&v513.mBuffers[0].mNumberChannels = *(void *)&v513.mNumberBuffers + 4 * v165;
        v516.realp = *(float **)(v164 + 16);
        v516.imagp = &v516.realp[v165];
        unsigned int v166 = *(float **)(*((void *)v3 + 2191) + 16);
        uint64_t v167 = &v166[v165];
        vDSP_zvabs((const DSPSplitComplex *)&v513, 1, v166, 1, v165);
        vDSP_zvabs(&v516, 1, v167, 1, *((unsigned int *)v3 + 127));
        vDSP_vmin(v166, 1, v167, 1, v166, 1, *((unsigned int *)v3 + 127));
        LODWORD(v510) = 507307272;
        vDSP_vsadd(v167, 1, (const float *)&v510, v167, 1, *((unsigned int *)v3 + 127));
        vDSP_vdiv(v167, 1, v166, 1, v167, 1, *((unsigned int *)v3 + 127));
        vDSP_vmul(v516.realp, 1, v167, 1, v516.realp, 1, *((unsigned int *)v3 + 127));
        vDSP_vmul(v516.imagp, 1, v167, 1, v516.imagp, 1, *((unsigned int *)v3 + 127));
        uint64_t v165 = *((unsigned int *)v3 + 127);
        uint64_t v164 = *((void *)v3 + 2190);
      }
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x5Fu, v165, (const AudioBufferList *)v164, &inInputBufferLists);
      }
      uint64_t v159 = *((void *)v3 + 583);
    }
  }
  if ((v159 & 0x20000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x20) != 0)
  {
    uint64_t Property = *((void *)v3 + 376);
    if (Property)
    {
      v512.mSampleTime = *((Float64 *)v3 + 429);
      *(Float64 *)&v513.unint64_t mNumberBuffers = v512.mSampleTime;
      AudioUnitRenderActionFlags v502 = 512;
      long long v168 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v168;
      long long v169 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v169;
      uint64_t Property = AudioUnitProcessMultiple((AudioUnit)Property, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
      if (!Property)
      {
        uint64_t Property = AudioUnitGetProperty(*((AudioUnit *)v3 + 376), 0x1450u, 0, 0, *(void **)(*((void *)v3 + 2188) + 16), (UInt32 *)(*((void *)v3 + 2188) + 12));
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x20u, (*((_DWORD *)v3 + 127) + 1), *((const AudioBufferList **)v3 + 2188), &inInputBufferLists);
        }
      }
      uint64_t v159 = *((void *)v3 + 583);
    }
  }
  if ((v159 & 0x100000000000) != 0)
  {
    uint64_t v170 = *((void *)v3 + 585);
    if ((v170 & 0x100000000000) != 0)
    {
      uint64_t Property = *((void *)v3 + 391);
      if (Property)
      {
        if ((v159 & v170 & 0x1000000000000) == 0 || !*((void *)v3 + 395))
        {
          float v171 = *((float *)v3 + 1057);
          if (v171 == 0.0)
          {
            float v172 = (VPTimeFreqConverter *)*((void *)v3 + 2114);
            uint64_t v173 = *(const float **)(*((void *)v3 + 425) + 16);
            UInt64 v174 = *(void *)(*((void *)v3 + 436) + 16) + 4 * *((unsigned int *)v3 + 127);
            inInputBufferLists.mSampleTime = *(Float64 *)(*((void *)v3 + 436) + 16);
            inInputBufferLists.mHostTime = v174;
            if (v172)
            {
              VPTimeFreqConverter::Analyze(v172, v173, (DSPSplitComplex *)&inInputBufferLists);
              float v171 = *((float *)v3 + 1057);
              uint64_t Property = *((void *)v3 + 391);
            }
          }
          AudioUnitSetParameter((AudioUnit)Property, 6u, 0, 0, v171, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1061), 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1065), 0);
          memcpy(*(void **)(*((void *)v3 + 434) + 16), *(const void **)(*((void *)v3 + 505) + 32), *((unsigned int *)v3 + 1073));
          UInt64 v175 = *((void *)v3 + 434);
          v512.mSampleTime = *((Float64 *)v3 + 506);
          v512.mHostTime = v175;
          v512.mRateScalar = *((Float64 *)v3 + 512);
          memset(&v512.mWordClockTime, 0, 24);
          *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 432);
          *(void *)&v513.mBuffers[0].mNumberChannels = 0;
          v513.mBuffers[0].mData = (void *)*((void *)v3 + 501);
          long long v176 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&inInputBufferLists.mRateScalar = v176;
          long long v177 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v177;
          AudioUnitRenderActionFlags v502 = 512;
          uint64_t Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 391), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v512, 3u, (AudioBufferList **)&v513);
          uint64_t v178 = *((unsigned int *)v3 + 127);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
          {
            uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v178, *((const AudioBufferList **)v3 + 432), &inInputBufferLists);
            uint64_t v178 = *((unsigned int *)v3 + 127);
            float v179 = (const AudioBufferList *)*((void *)v3 + 501);
            if (*((unsigned char *)v3 + 15961)) {
              goto LABEL_411;
            }
          }
          else
          {
            float v179 = (const AudioBufferList *)*((void *)v3 + 501);
          }
          if (!*((unsigned char *)v3 + 15962))
          {
LABEL_412:
            uint64_t v159 = *((void *)v3 + 583);
            goto LABEL_413;
          }
LABEL_411:
          uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v178, v179, &inInputBufferLists);
          goto LABEL_412;
        }
      }
    }
  }
LABEL_413:
  char v495 = 0;
  if ((v159 & 0x40000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x40) != 0 && *((void *)v3 + 377))
  {
    int v180 = 1;
    int v181 = 1;
  }
  else if ((v159 & 0x200000000) != 0 && (*((unsigned char *)v3 + 4684) & 2) != 0)
  {
    int v180 = 0;
    int v181 = *((void *)v3 + 380) != 0;
  }
  else
  {
    int v180 = 0;
    int v181 = 0;
  }
  uint64_t v182 = v159 & 0x80000000;
  if ((v159 & 0x80000000) != 0 && (*((unsigned char *)v3 + 4683) & 0x80) != 0 && *((void *)v3 + 378))
  {
    BOOL v183 = 1;
    int v180 = 1;
    int v184 = 1;
    if ((v159 & 0x100000000) == 0) {
      goto LABEL_438;
    }
  }
  else
  {
    if ((v159 & 0x100000000) == 0)
    {
      BOOL v183 = 0;
      int v184 = 1;
      goto LABEL_438;
    }
    int v184 = 1;
    if (*((unsigned char *)v3 + 4684))
    {
      uint64_t v185 = *((void *)v3 + 379);
      BOOL v183 = v185 != 0;
      if (v185) {
        int v184 = 2;
      }
      else {
        int v184 = 1;
      }
    }
    else
    {
      BOOL v183 = 0;
    }
  }
  uint64_t v186 = *((void *)v3 + 585);
  if ((v186 & 0x100000000) != 0
    && *((void *)v3 + 379)
    && (v159 & v186 & 0x200000000) != 0
    && *((void *)v3 + 380))
  {
    int v184 = 2;
    int v180 = 2;
  }
LABEL_438:
  if ((v159 & 0x40000000) == 0) {
    goto LABEL_457;
  }
  if ((*((unsigned char *)v3 + 4683) & 0x40) == 0) {
    goto LABEL_457;
  }
  uint64_t Property = *((void *)v3 + 377);
  if (!Property) {
    goto LABEL_457;
  }
  AudioUnitSetProperty((AudioUnit)Property, 0x457u, 0, 0, (char *)v3 + 2316, 4u);
  if ((*((unsigned char *)v3 + 4667) & 0x80) == 0 || (*((unsigned char *)v3 + 4683) & 0x80) == 0)
  {
    uint64_t v187 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
LABEL_444:
    float v188 = 2.0;
    goto LABEL_445;
  }
  uint64_t v187 = (OpaqueAudioComponentInstance *)*((void *)v3 + 377);
  if (!*((void *)v3 + 378)) {
    goto LABEL_444;
  }
  float v188 = (float)*((unsigned int *)v3 + 684);
LABEL_445:
  AudioUnitSetParameter(v187, 0x1Bu, 0, 0, v188, 0);
  uint64_t v189 = *((void *)v3 + 583);
  if ((v189 & 0x400000) != 0)
  {
    uint64_t v190 = *((void *)v3 + 585);
    if ((v190 & 0x400000) != 0
      && *((void *)v3 + 369)
      && (v189 & v190 & 0x800000) != 0
      && *((void *)v3 + 370))
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x3Fu, 0, 0, *((float *)v3 + 1056) * *((float *)v3 + 1057), 0);
    }
  }
  *(void *)&Float64 v191 = *((void *)v3 + 138) + 24;
  *(void *)&Float64 v192 = *((void *)v3 + 139) + 24;
  unsigned int v193 = **((_DWORD **)v3 + 135);
  if (v193 < 3) {
    Float64 v194 = 0.0;
  }
  else {
    *(void *)&Float64 v194 = *((void *)v3 + 140) + 24;
  }
  *(void *)&v512.mSampleTime = *((void *)v3 + 138) + 24;
  *(Float64 *)&v512.mHostTime = v192;
  v512.mRateScalar = v194;
  v512.mWordClockTime = v492;
  *(_OWORD *)&v512.mSMPTETime.mSubframes = *(_OWORD *)((char *)v3 + 3352);
  if (v193 >= 3)
  {
    v512.mSampleTime = v192;
    *(Float64 *)&v512.mHostTime = v194;
    v512.mRateScalar = v191;
  }
  *(void *)&v513.unint64_t mNumberBuffers = 0;
  AudioUnitRenderActionFlags v502 = 512;
  AudioUnitSetParameter(*((AudioUnit *)v3 + 377), 0x2Cu, 0, 0, *((AudioUnitParameterValue *)v3 + 1092), 0);
  long long v195 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v195;
  long long v196 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v196;
  uint64_t Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 377), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
  uint64_t v159 = *((void *)v3 + 583);
  uint64_t v182 = v159 & 0x80000000;
LABEL_457:
  if (!v182 || (*((unsigned char *)v3 + 4683) & 0x80) == 0 || !*((void *)v3 + 378))
  {
    if ((v159 & 0x100000000) == 0 || (*((unsigned char *)v3 + 4684) & 1) == 0 || !*((void *)v3 + 379)) {
      goto LABEL_494;
    }
    memcpy(*(void **)(*((void *)v3 + 435) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * *((unsigned int *)v3 + 127));
    memcpy(*(void **)(*((void *)v3 + 435) + 32), *(const void **)(*((void *)v3 + 507) + 16), 8 * *((unsigned int *)v3 + 127));
    v510 = (const AudioBufferList *)*((void *)v3 + 435);
    float v205 = (float *)*((void *)v3 + 434);
    v517.realp = (float *)*((void *)v3 + 430);
    v517.imagp = v205;
    long long v206 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v206;
    long long v207 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v207;
    uint64_t Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 379), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, &v510, 2u, (AudioBufferList **)&v517);
    uint64_t v208 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x18u, v208, (const AudioBufferList *)v517.realp, &inInputBufferLists);
      uint64_t v208 = *((unsigned int *)v3 + 127);
      imagp = v517.imagp;
      if (*((unsigned char *)v3 + 15961)) {
        goto LABEL_479;
      }
    }
    else
    {
      imagp = v517.imagp;
    }
    if (!*((unsigned char *)v3 + 15962))
    {
LABEL_480:
      if ((*((unsigned char *)v3 + 4668) & 2) == 0 || (*((unsigned char *)v3 + 4684) & 2) == 0 || !*((void *)v3 + 380)) {
        goto LABEL_494;
      }
      memcpy(*(void **)(*((void *)v3 + 436) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
      memcpy(*(void **)(*((void *)v3 + 431) + 16), *(const void **)(*((void *)v3 + 432) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
      LODWORD(v508) = 1092616192;
      uint64_t v210 = *((void *)v3 + 434);
      *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 430);
      *(void *)&v513.mBuffers[0].mNumberChannels = v210;
      uint64_t v211 = (AudioBufferList *)*((void *)v3 + 507);
      v513.mBuffers[0].mData = (void *)*((void *)v3 + 436);
      v514 = v211;
      uint64_t v515 = *((void *)v3 + 431);
      float v212 = (float *)*((void *)v3 + 432);
      AudioUnitParameterValue v213 = 10.0;
      v516.realp = (float *)*((void *)v3 + 429);
      v516.imagp = v212;
      if (*((unsigned char *)v3 + 4671) & 1) != 0 && (*((unsigned char *)v3 + 4687))
      {
        long long v214 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
        if (v214)
        {
          AudioUnitGetParameter(v214, 9u, 0, 0, (AudioUnitParameterValue *)&v508);
          AudioUnitParameterValue v213 = *(float *)&v508;
        }
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0xAu, 0, 0, v213, 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 380), 0x17u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
      long long v215 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&v512.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&v512.mRateScalar = v215;
      long long v216 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&v512.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&v512.mSMPTETime.mHours = v216;
      uint64_t Property = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 380), &v502, &v512, *((_DWORD *)v3 + 127), 5u, (const AudioBufferList **)&v513, 2u, (AudioBufferList **)&v516);
      uint64_t v200 = *((unsigned int *)v3 + 127);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
      {
        uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x1Au, v200, (const AudioBufferList *)v516.realp, &v512);
        uint64_t v200 = *((unsigned int *)v3 + 127);
        DSPSplitComplex v201 = v516.imagp;
        if (*((unsigned char *)v3 + 15961)) {
          goto LABEL_493;
        }
      }
      else
      {
        DSPSplitComplex v201 = v516.imagp;
      }
      if (!*((unsigned char *)v3 + 15962)) {
        goto LABEL_494;
      }
LABEL_493:
      p_AudioTimeStamp inInputBufferLists = &v512;
      uint64_t v203 = (uint64_t)v3;
      unsigned int v204 = 27;
      goto LABEL_466;
    }
LABEL_479:
    uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x19u, v208, (const AudioBufferList *)imagp, &inInputBufferLists);
    goto LABEL_480;
  }
  memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1042) + 16), *(const void **)(*((void *)v3 + 429) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
  memcpy(*(void **)(*((void *)v3 + 435) + 16 * *((unsigned int *)v3 + 1043) + 16), *(const void **)(*((void *)v3 + 506) + 16), 4 * (2 * *((_DWORD *)v3 + 127)));
  if (*((float *)v3 + 1068) == 0.0 && *((float *)v3 + 1069) == 0.0) {
    AudioUnitParameterValue v197 = 0.0;
  }
  else {
    AudioUnitParameterValue v197 = 1.0;
  }
  AudioUnitSetParameter(*((AudioUnit *)v3 + 378), 0x20u, 0, 0, v197, 0);
  v512.mSampleTime = *((Float64 *)v3 + 435);
  *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 430);
  long long v198 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v198;
  long long v199 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v199;
  AudioUnitRenderActionFlags v502 = 512;
  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 378), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
  LODWORD(v517.realp) = 8 * *((_DWORD *)v3 + 127);
  AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE7Au, 0, 0, *(void **)(*((void *)v3 + 538) + 16), (UInt32 *)&v517);
  LODWORD(v517.realp) = 8 * *((_DWORD *)v3 + 127);
  uint64_t Property = AudioUnitGetProperty(*((AudioUnit *)v3 + 378), 0xE79u, 0, 0, *(void **)(*((void *)v3 + 538) + 32), (UInt32 *)&v517);
  uint64_t v200 = *((unsigned int *)v3 + 127);
  DSPSplitComplex v201 = (float *)*((void *)v3 + 430);
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
  {
    p_AudioTimeStamp inInputBufferLists = &inInputBufferLists;
    uint64_t v203 = (uint64_t)v3;
    unsigned int v204 = 10;
LABEL_466:
    uint64_t Property = VoiceProcessorV2::SaveFilesWriteSignal(v203, v204, v200, (const AudioBufferList *)v201, p_inInputBufferLists);
  }
LABEL_494:
  MEMORY[0x1F4188790](Property);
  float v217 = (const AudioBufferList *)(&v479 - 8);
  *((_OWORD *)&v479 - 3) = 0u;
  *((_OWORD *)&v479 - 2) = 0u;
  *((_OWORD *)&v479 - 4) = 0u;
  *((_DWORD *)&v479 - 16) = 3;
  __n128 v220 = MEMORY[0x1F4188790](v218);
  v491 = (char *)(&v479 - 8);
  uint64_t v478 = 0;
  *((__n128 *)&v479 - 3) = v220;
  *((__n128 *)&v479 - 2) = v220;
  *((__n128 *)&v479 - 4) = v220;
  *((_DWORD *)&v479 - 16) = v221;
  uint64_t v222 = *((void *)v3 + 583);
  if ((v222 & 0x400000000) != 0 && (*((unsigned char *)v3 + 4684) & 4) != 0 && *((void *)v3 + 381)
    || (v222 & 0x800000000) != 0 && (*((unsigned char *)v3 + 4684) & 8) != 0 && *((void *)v3 + 382)
    || (v222 & 0x2000000000) != 0 && (*((unsigned char *)v3 + 4684) & 0x20) != 0 && *((void *)v3 + 384))
  {
    *(_OWORD *)(&v479 - 7) = *(_OWORD *)(*((void *)v3 + 429) + 8);
    *(_OWORD *)(&v479 - 5) = *(_OWORD *)(*((void *)v3 + 506) + 8);
    *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 507) + 8);
    uint64_t v223 = *((void *)v3 + 505);
    float v224 = v491;
    *(_OWORD *)(v491 + 8) = *(_OWORD *)(v223 + 8);
    *(_OWORD *)(v224 + 24) = *(_OWORD *)(v223 + 24);
    __n128 v220 = *(__n128 *)(v223 + 56);
    *(__n128 *)(v224 + 40) = v220;
  }
  if ((v222 & 0x400000000) != 0 && (*((unsigned char *)v3 + 4684) & 4) != 0 && *((void *)v3 + 381))
  {
    v489 = (AudioBufferList *)(&v479 - 8);
    int v485 = v184;
    BOOL v486 = v183;
    int v487 = v180;
    LODWORD(v488) = v181;
    uint64_t v225 = 0;
    v517.realp = (float *)*((void *)v3 + 524);
    LODWORD(v517.imagp) = *((_DWORD *)v3 + 1051);
    v516.realp = (float *)*((void *)v3 + 526);
    LODWORD(v516.imagp) = *((_DWORD *)v3 + 1055);
    v510 = (const AudioBufferList *)*((void *)v3 + 528);
    int v511 = *((_DWORD *)v3 + 1059);
    uint64_t v508 = *((void *)v3 + 530);
    int v509 = *((_DWORD *)v3 + 1063);
    uint64_t v506 = *((void *)v3 + 532);
    int v507 = *((_DWORD *)v3 + 1067);
    do
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 9u, 4u, v225, *((AudioUnitParameterValue *)&v517.realp + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xAu, 4u, v225, *((AudioUnitParameterValue *)&v516.realp + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xBu, 4u, v225, *((AudioUnitParameterValue *)&v510 + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xCu, 4u, v225, *((AudioUnitParameterValue *)&v508 + v225), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 381), 0xDu, 4u, v225, *((AudioUnitParameterValue *)&v506 + v225), 0);
      ++v225;
    }
    while (v225 != 3);
    float v217 = v489;
    *(void *)&v512.mSampleTime = v489;
    v512.mHostTime = (UInt64)v491;
    *(void *)&v513.unint64_t mNumberBuffers = v489;
    *(void *)&v513.mBuffers[0].mNumberChannels = v491;
    AudioUnitRenderActionFlags v502 = 512;
    long long v226 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v226;
    long long v227 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v227;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 381), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v512, 2u, (AudioBufferList **)&v513);
    uint64_t v228 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x69u, v228, v217, &inInputBufferLists);
      uint64_t v228 = *((unsigned int *)v3 + 127);
      int v180 = v487;
      int v181 = (int)v488;
      int v184 = v485;
      BOOL v183 = v486;
      if (*((unsigned char *)v3 + 15961)) {
        goto LABEL_515;
      }
    }
    else
    {
      int v180 = v487;
      int v181 = (int)v488;
      int v184 = v485;
      BOOL v183 = v486;
    }
    if (!*((unsigned char *)v3 + 15962))
    {
LABEL_516:
      uint64_t v222 = *((void *)v3 + 583);
      goto LABEL_517;
    }
LABEL_515:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Au, v228, (const AudioBufferList *)v491, &inInputBufferLists);
    goto LABEL_516;
  }
LABEL_517:
  if ((v222 & 0x800000000) != 0 && (*((unsigned char *)v3 + 4684) & 8) != 0 && *((void *)v3 + 382))
  {
    v489 = (AudioBufferList *)v217;
    int v485 = v184;
    BOOL v486 = v183;
    int v487 = v180;
    LODWORD(v488) = v181;
    uint64_t v229 = 0;
    v517.realp = (float *)*((void *)v3 + 524);
    LODWORD(v517.imagp) = *((_DWORD *)v3 + 1051);
    v516.realp = (float *)*((void *)v3 + 526);
    LODWORD(v516.imagp) = *((_DWORD *)v3 + 1055);
    v510 = (const AudioBufferList *)*((void *)v3 + 528);
    int v511 = *((_DWORD *)v3 + 1059);
    uint64_t v508 = *((void *)v3 + 530);
    int v509 = *((_DWORD *)v3 + 1063);
    uint64_t v506 = *((void *)v3 + 532);
    int v507 = *((_DWORD *)v3 + 1067);
    do
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x12u, 4u, v229, *((AudioUnitParameterValue *)&v517.realp + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x13u, 4u, v229, *((AudioUnitParameterValue *)&v516.realp + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x14u, 4u, v229, *((AudioUnitParameterValue *)&v510 + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x15u, 4u, v229, *((AudioUnitParameterValue *)&v508 + v229), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 382), 0x16u, 4u, v229, *((AudioUnitParameterValue *)&v506 + v229), 0);
      ++v229;
    }
    while (v229 != 3);
    float v217 = v489;
    *(void *)&v512.mSampleTime = v489;
    v512.mHostTime = (UInt64)v491;
    *(void *)&v513.unint64_t mNumberBuffers = v489;
    *(void *)&v513.mBuffers[0].mNumberChannels = v491;
    AudioUnitRenderActionFlags v502 = 512;
    long long v230 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v230;
    long long v231 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v231;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 382), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v512, 2u, (AudioBufferList **)&v513);
    uint64_t v232 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Bu, v232, v217, &inInputBufferLists);
      uint64_t v232 = *((unsigned int *)v3 + 127);
      int v180 = v487;
      int v181 = (int)v488;
      int v184 = v485;
      BOOL v183 = v486;
      if (*((unsigned char *)v3 + 15961)) {
        goto LABEL_528;
      }
    }
    else
    {
      int v180 = v487;
      int v181 = (int)v488;
      int v184 = v485;
      BOOL v183 = v486;
    }
    if (!*((unsigned char *)v3 + 15962))
    {
LABEL_529:
      uint64_t v222 = *((void *)v3 + 583);
      goto LABEL_530;
    }
LABEL_528:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Cu, v232, (const AudioBufferList *)v491, &inInputBufferLists);
    goto LABEL_529;
  }
LABEL_530:
  if ((v222 & 0x2000000000) != 0 && (*((unsigned char *)v3 + 4684) & 0x20) != 0 && *((void *)v3 + 384))
  {
    v489 = (AudioBufferList *)v217;
    int v485 = v184;
    BOOL v486 = v183;
    int v487 = v180;
    LODWORD(v488) = v181;
    uint64_t v233 = 0;
    long long v234 = (float *)*((void *)v3 + 524);
    double v481 = (AudioUnitParameterValue *)((char *)v3 + 4192);
    v516.realp = v234;
    LODWORD(v516.imagp) = *((_DWORD *)v3 + 1051);
    double v482 = (AudioUnitParameterValue *)((char *)v3 + 4208);
    v510 = (const AudioBufferList *)*((void *)v3 + 526);
    int v511 = *((_DWORD *)v3 + 1055);
    v483 = (AudioUnitParameterValue *)((char *)v3 + 4224);
    uint64_t v508 = *((void *)v3 + 528);
    int v509 = *((_DWORD *)v3 + 1059);
    v484 = (AudioUnitParameterValue *)((char *)v3 + 4240);
    uint64_t v506 = *((void *)v3 + 530);
    int v507 = *((_DWORD *)v3 + 1063);
    v480 = (AudioUnitParameterValue *)((char *)v3 + 4256);
    uint64_t v504 = *((void *)v3 + 532);
    int v505 = *((_DWORD *)v3 + 1067);
    do
    {
      AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x64u, 4u, v233, *((AudioUnitParameterValue *)&v516.realp + v233), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x65u, 4u, v233, *((AudioUnitParameterValue *)&v510 + v233), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x66u, 4u, v233, *((AudioUnitParameterValue *)&v508 + v233), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x67u, 4u, v233, *((AudioUnitParameterValue *)&v506 + v233), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 384), 0x68u, 4u, v233, *((AudioUnitParameterValue *)&v504 + v233), 0);
      ++v233;
    }
    while (v233 != 3);
    *(void *)&v513.unint64_t mNumberBuffers = 1;
    *(void *)&v513.mBuffers[0].mNumberChannels = 0;
    v513.mBuffers[0].mData = 0;
    v513.mBuffers[0] = *(AudioBuffer *)(*((void *)v3 + 505) + 8);
    v517.realp = (float *)&v489->mNumberBuffers;
    v517.imagp = (float *)v491;
    v512.mSampleTime = *((Float64 *)v3 + 429);
    v512.mHostTime = (UInt64)&v513;
    v512.mRateScalar = 0.0;
    v512.mWordClockTime = 0;
    AudioUnitRenderActionFlags v502 = 512;
    long long v235 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v235;
    long long v236 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v236;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 384), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v517, 4u, (AudioBufferList **)&v512);
    HIDWORD(v494) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0xAu, 0, 0, (AudioUnitParameterValue *)&v494 + 1);
    uint64_t v237 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x64u, v237, *((const AudioBufferList **)v3 + 429), &inInputBufferLists);
      uint64_t v237 = *((unsigned int *)v3 + 127);
      int v180 = v487;
      int v181 = (int)v488;
      int v184 = v485;
      BOOL v183 = v486;
      int v238 = v480;
      if (*((unsigned char *)v3 + 15961)) {
        goto LABEL_541;
      }
    }
    else
    {
      int v180 = v487;
      int v181 = (int)v488;
      int v184 = v485;
      BOOL v183 = v486;
      int v238 = v480;
    }
    if (!*((unsigned char *)v3 + 15962))
    {
LABEL_542:
      AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x64u, 4u, 0, v481);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x65u, 4u, 0, v482);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x66u, 4u, 0, v483);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x67u, 4u, 0, v484);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 384), 0x68u, 4u, 0, v238);
      goto LABEL_543;
    }
LABEL_541:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x65u, v237, &v513, &inInputBufferLists);
    goto LABEL_542;
  }
LABEL_543:
  if (v180 == 2)
  {
    VoiceProcessorV4::SignalParamSwitchMixNF((AudioUnit *)v3, v183, v181, (BOOL *)&v495, v220.n128_f32[0]);
  }
  else if (v180 == 1)
  {
    VoiceProcessorV2::SignalParamSwitchMix((AudioUnit *)v3, v183, v181, &v495, v219);
  }
  if (v184 == 1) {
    VoiceProcessorV2::TimeAlignedReferenceAndOtherHandling(v3, HIBYTE(v501) != 0, v499, v183, v495 != 0);
  }
  else {
    VoiceProcessorV4::TimeAlignedReferenceAndOtherHandlingNF(v3, HIBYTE(v501) != 0, v497, v183, v495 != 0);
  }
  LODWORD(v510) = 0;
  if ((*((void *)v3 + 583) & 0x2000000000000) != 0 && (*((void *)v3 + 585) & 0x2000000000000) != 0)
  {
    uint64_t v239 = *((void *)v3 + 396);
    if (v239)
    {
      MEMORY[0x1F4188790](v239);
      *((_OWORD *)&v479 - 3) = 0u;
      *((_OWORD *)&v479 - 2) = 0u;
      *((_OWORD *)&v479 - 4) = 0u;
      *((_DWORD *)&v479 - 16) = 3;
      __n128 v242 = MEMORY[0x1F4188790](v240);
      uint64_t v478 = 0;
      *((__n128 *)&v479 - 3) = v242;
      *((__n128 *)&v479 - 2) = v242;
      *((__n128 *)&v479 - 4) = v242;
      *((_DWORD *)&v479 - 16) = v243;
      *(_OWORD *)(v244 - 56) = *(_OWORD *)(*((void *)v3 + 429) + 8);
      *(_OWORD *)(v244 - 40) = *(_OWORD *)(*((void *)v3 + 432) + 8);
      *(_OWORD *)(v244 - 24) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
      uint64_t v245 = *((void *)v3 + 505);
      *(_OWORD *)(&v479 - 7) = *(_OWORD *)(v245 + 8);
      *(_OWORD *)(&v479 - 5) = *(_OWORD *)(v245 + 24);
      *(_OWORD *)(&v479 - 3) = *(_OWORD *)(v245 + 40);
      v512.mSampleTime = v246;
      v512.mHostTime = (UInt64)(&v479 - 8);
      *(_OWORD *)&v513.unint64_t mNumberBuffers = *(_OWORD *)(v492 + 344);
      if ((v247 & v248 & 0x800000000000000) != 0)
      {
        BOOL v249 = (OpaqueAudioComponentInstance *)*((void *)v3 + 406);
        if (v249)
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          AudioUnitGetParameter(v249, 0, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 396), 0, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 396), 0xDu, 0, 0, (AudioUnitParameterValue *)&v510);
          float v241 = (OpaqueAudioComponentInstance *)*((void *)v3 + 396);
        }
      }
      long long v250 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v250;
      long long v251 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v251;
      AudioUnitProcessMultiple(v241, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v512, 2u, (AudioBufferList **)&v513);
      uint64_t v252 = *((unsigned int *)v3 + 127);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
      {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Fu, v252, *((const AudioBufferList **)v3 + 2185), &inInputBufferLists);
        uint64_t v252 = *((unsigned int *)v3 + 127);
        unsigned int v253 = (const AudioBufferList *)*((void *)v3 + 2186);
        if (*((unsigned char *)v3 + 15961))
        {
LABEL_562:
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x80u, v252, v253, &inInputBufferLists);
          goto LABEL_563;
        }
      }
      else
      {
        unsigned int v253 = (const AudioBufferList *)*((void *)v3 + 2186);
      }
      if (*((unsigned char *)v3 + 15962)) {
        goto LABEL_562;
      }
    }
  }
LABEL_563:
  float v254 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((void *)v3 + 433) + 16), *(const void **)(*((void *)v3 + 505) + 16), *((unsigned int *)v3 + 1073));
  uint64_t v255 = *((void *)v3 + 583);
  if ((v255 & 0x1000000) != 0 && (*((unsigned char *)v3 + 4683) & 1) != 0 && *((void *)v3 + 371) && v496 == 1.0)
  {
    float v254 = (OpaqueAudioComponentInstance *)memcpy(*(void **)(*((void *)v3 + 2148) + 16), *(const void **)(*((void *)v3 + 505) + 48), *((unsigned int *)v3 + 1073));
    uint64_t v255 = *((void *)v3 + 583);
  }
  if ((v255 & 0x400000000000) != 0)
  {
    uint64_t v256 = *((void *)v3 + 585);
    if ((v256 & 0x400000000000) != 0)
    {
      if (*((void *)v3 + 393))
      {
        LODWORD(v517.realp) = 1092616192;
        if ((v255 & v256 & 0x100000000000000) != 0)
        {
          float v254 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
          if (v254)
          {
            float v254 = (OpaqueAudioComponentInstance *)AudioUnitGetParameter(v254, 9u, 0, 0, (AudioUnitParameterValue *)&v517);
            uint64_t v255 = *((void *)v3 + 583);
          }
        }
        if ((v255 & 0x100000000) != 0 && (*((unsigned char *)v3 + 4684) & 1) != 0 && *((void *)v3 + 379))
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          LODWORD(v512.mSampleTime) = 0;
          v513.unint64_t mNumberBuffers = 0;
          AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 0x18u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 0x19u, 0, 0, (AudioUnitParameterValue *)&v512);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 380), 5u, 0, 0, (AudioUnitParameterValue *)&v513.mNumberBuffers);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 3u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 4u, 0, 0, *(AudioUnitParameterValue *)&v512.mSampleTime, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 5u, 0, 0, *(AudioUnitParameterValue *)&v513.mNumberBuffers, 0);
          float v254 = (OpaqueAudioComponentInstance *)AudioUnitSetParameter(*((AudioUnit *)v3 + 393), 6u, 0, 0, *(AudioUnitParameterValue *)&v517.realp, 0);
        }
        MEMORY[0x1F4188790](v254);
        uint64_t v478 = 0;
        *((_OWORD *)&v479 - 3) = 0u;
        *((_OWORD *)&v479 - 2) = 0u;
        *((_DWORD *)&v479 - 12) = 2;
        uint64_t v257 = *((void *)v3 + 429);
        *(&v479 - 4) = *(void *)(v257 + 16);
        *(&v479 - 5) = *(void *)(v257 + 8);
        uint64_t v258 = *((void *)v3 + 432);
        uint64_t v478 = *(void *)(v258 + 16);
        *(&v479 - 3) = *(void *)(v258 + 8);
        __n128 v260 = MEMORY[0x1F4188790](v259);
        *((__n128 *)&v479 - 3) = v260;
        *((__n128 *)&v479 - 2) = v260;
        *((_DWORD *)&v479 - 12) = v261;
        MEMORY[0x1F4188790](v262);
        *(&v479 - 3) = 0;
        uint64_t v478 = 0;
        *(&v479 - 4) = 0;
        *((_DWORD *)&v479 - 8) = 1;
        uint64_t v263 = *((void *)v3 + 433);
        *(void *)(v264 - 32) = *(void *)(v263 + 16);
        *(void *)(v264 - 40) = *(void *)(v263 + 8);
        uint64_t v265 = *((void *)v3 + 505);
        *(void *)(v264 - 16) = *(void *)(v265 + 32);
        *(void *)(v264 - 24) = *(void *)(v265 + 24);
        uint64_t v478 = *(void *)(v263 + 16);
        *(&v479 - 3) = *(void *)(v263 + 8);
        v512.mSampleTime = v266;
        v512.mHostTime = v267;
        *(Float64 *)&v513.unint64_t mNumberBuffers = v266;
        *(void *)&v513.mBuffers[0].mNumberChannels = &v479 - 4;
        long long v268 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v268;
        long long v269 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v269;
        AudioUnitRenderActionFlags v502 = 512;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 393), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v512, 2u, (AudioBufferList **)&v513);
        uint64_t v270 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x81u, v270, *((const AudioBufferList **)v3 + 429), &inInputBufferLists);
          uint64_t v270 = *((unsigned int *)v3 + 127);
          float v271 = (const AudioBufferList *)*((void *)v3 + 432);
          if (*((unsigned char *)v3 + 15961)) {
            goto LABEL_584;
          }
        }
        else
        {
          float v271 = (const AudioBufferList *)*((void *)v3 + 432);
        }
        if (!*((unsigned char *)v3 + 15962))
        {
LABEL_585:
          uint64_t v255 = *((void *)v3 + 583);
          goto LABEL_586;
        }
LABEL_584:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x82u, v270, v271, &inInputBufferLists);
        goto LABEL_585;
      }
    }
  }
LABEL_586:
  if ((v255 & 0x800000000000) != 0 && (*((void *)v3 + 585) & 0x800000000000) != 0)
  {
    uint64_t v272 = *((void *)v3 + 394);
    if (v272)
    {
      MEMORY[0x1F4188790](v272);
      *((_OWORD *)&v479 - 3) = 0u;
      *((_OWORD *)&v479 - 2) = 0u;
      *((_DWORD *)&v479 - 12) = 2;
      __n128 v274 = MEMORY[0x1F4188790](v273);
      uint64_t v478 = 0;
      *((__n128 *)&v479 - 3) = v274;
      *((__n128 *)&v479 - 2) = v274;
      *((_DWORD *)&v479 - 12) = v275;
      *(_OWORD *)(v276 - 40) = *(_OWORD *)(*((void *)v3 + 429) + 8);
      *(_OWORD *)(v276 - 24) = *(_OWORD *)(*((void *)v3 + 2185) + 8);
      *(_OWORD *)(&v479 - 5) = *(_OWORD *)(*((void *)v3 + 505) + 8);
      *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 2186) + 8);
      __n128 v278 = MEMORY[0x1F4188790](v277);
      *((__n128 *)&v479 - 3) = v278;
      *((__n128 *)&v479 - 2) = v278;
      *((_DWORD *)&v479 - 12) = v279;
      __n128 v282 = MEMORY[0x1F4188790](v280);
      uint64_t v478 = 0;
      *((__n128 *)&v479 - 3) = v282;
      *((__n128 *)&v479 - 2) = v282;
      *((_DWORD *)&v479 - 12) = v283;
      uint64_t v284 = *((void *)v3 + 2187);
      *(_OWORD *)(v285 - 40) = *(_OWORD *)(v284 + 8);
      *(_OWORD *)(v285 - 24) = *(_OWORD *)(v284 + 24);
      *(_OWORD *)(&v479 - 5) = *(_OWORD *)(v284 + 40);
      *(_OWORD *)(&v479 - 3) = *(_OWORD *)(v284 + 56);
      if ((v286 & v287 & 0x2000000000000) != 0)
      {
        uint64_t v288 = (OpaqueAudioComponentInstance *)*((void *)v3 + 396);
        if (v288)
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          AudioUnitGetParameter(v288, 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 394), 0, 4u, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 397), 0, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          uint64_t v281 = (OpaqueAudioComponentInstance *)*((void *)v3 + 394);
        }
      }
      *(void *)&v512.mSampleTime = &v479 - 6;
      v512.mHostTime = (UInt64)(&v479 - 6);
      *(void *)&v513.unint64_t mNumberBuffers = &v479 - 6;
      *(void *)&v513.mBuffers[0].mNumberChannels = &v479 - 6;
      long long v289 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v289;
      long long v290 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v290;
      AudioUnitRenderActionFlags v502 = 512;
      AudioUnitProcessMultiple(v281, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v512, 2u, (AudioBufferList **)&v513);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x83u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2187), &inInputBufferLists);
      }
      uint64_t v255 = *((void *)v3 + 583);
    }
  }
  if ((v255 & 0x4000000000000) != 0)
  {
    uint64_t v291 = *((void *)v3 + 585);
    if ((v291 & 0x4000000000000) != 0)
    {
      uint64_t v292 = *((void *)v3 + 397);
      if (v292)
      {
        if ((v255 & v291 & 0x800000000000) != 0 && *((void *)v3 + 394))
        {
          MEMORY[0x1F4188790](v292);
          uint64_t v478 = 0;
          *((_OWORD *)&v479 - 3) = 0u;
          *((_OWORD *)&v479 - 2) = 0u;
          *((_DWORD *)&v479 - 12) = 2;
          uint64_t v293 = *((void *)v3 + 2187);
          *(_OWORD *)(&v479 - 5) = *(_OWORD *)(v293 + 8);
          *(_OWORD *)(&v479 - 3) = *(_OWORD *)(v293 + 24);
          *(void *)&v512.mSampleTime = &v479 - 6;
          *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 432);
          long long v294 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&inInputBufferLists.mRateScalar = v294;
          long long v295 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v295;
          AudioUnitRenderActionFlags v502 = 512;
          AudioUnitProcessMultiple(v296, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 432), &inInputBufferLists);
          }
          uint64_t v255 = *((void *)v3 + 583);
        }
      }
    }
  }
  if ((v255 & 0x40000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 0x40) != 0 && *((void *)v3 + 401)) {
    BOOL v297 = 1;
  }
  else {
    BOOL v297 = (v255 & 0x100000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 1) != 0 && *((void *)v3 + 403) != 0;
  }
  LODWORD(v508) = 0;
  LODWORD(v506) = 0;
  uint64_t v298 = AudioUnitGetParameter(*((AudioUnit *)v3 + 390), 0x1Du, 0, 0, (AudioUnitParameterValue *)&v508);
  BOOL v299 = *(float *)&v508 < 1.0 && v297;
  if (v297)
  {
    LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
    if (*(float *)&v508 < 1.0) {
      vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((void *)v3 + 502) + 16), 1, *((unsigned int *)v3 + 127));
    }
    vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
    uint64_t v300 = *((void *)v3 + 583);
  }
  else
  {
    uint64_t v300 = *((void *)v3 + 583);
    if ((v300 & 0x80000000000) == 0 || (*((unsigned char *)v3 + 4685) & 8) == 0 || !*((void *)v3 + 390)) {
      goto LABEL_630;
    }
  }
  if ((v300 & 0x1000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 1) != 0 && *((void *)v3 + 395))
  {
LABEL_630:
    LODWORD(v491) = 0;
    goto LABEL_631;
  }
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
  {
    uint64_t v298 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
    uint64_t v300 = *((void *)v3 + 583);
  }
  LODWORD(v491) = 1;
LABEL_631:
  if ((v300 & 0x8000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 8) != 0)
  {
    uint64_t v298 = *((void *)v3 + 398);
    if (v298)
    {
      AudioUnitRenderActionFlags v502 = 512;
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 429);
      v512.mSampleTime = *((Float64 *)v3 + 430);
      uint64_t v298 = AudioUnitProcessMultiple((AudioUnit)v298, &v502, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v512);
      uint64_t v301 = *((void *)v3 + 2161);
      unsigned int v304 = *(_DWORD *)(v301 + 12);
      uint64_t v302 = v301 + 12;
      unsigned int v303 = v304;
      uint64_t v305 = *(void **)(v302 + 4);
      if (v298
        || (uint64_t v298 = AudioUnitGetProperty(*((AudioUnit *)v3 + 398), 0x3ECu, 0, 0, *(void **)(v302 + 4), (UInt32 *)v302),
            v298))
      {
        if (v303 >= 4) {
          memset_pattern16(v305, &unk_1BB873A60, v303 & 0xFFFFFFFC);
        }
      }
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t v298 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x72u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 429), &buf);
      }
      uint64_t v300 = *((void *)v3 + 583);
    }
  }
  v489 = (AudioBufferList *)*((void *)v3 + 2219);
  if ((v300 & 0x40000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 0x40) != 0)
  {
    uint64_t v298 = *((void *)v3 + 401);
    if (v298)
    {
      UInt64 v306 = *((void *)v3 + 500);
      v512.mSampleTime = *((Float64 *)v3 + 429);
      v512.mHostTime = v306;
      *(void *)&v512.mRateScalar = (char *)v3 + 16944;
      uint64_t v307 = *((void *)v3 + 502);
      *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 430);
      *(void *)&v513.mBuffers[0].mNumberChannels = v307;
      v513.mBuffers[0].mData = v489;
      AudioUnitRenderActionFlags v502 = 512;
      long long v308 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v308;
      long long v309 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v309;
      AudioUnitProcessMultiple((AudioUnit)v298, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 3u, (const AudioBufferList **)&v512, 3u, (AudioBufferList **)&v513);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, &v503);
      uint64_t v298 = AudioUnitGetParameter(*((AudioUnit *)v3 + 401), 1u, 0, 0, (AudioUnitParameterValue *)v3 + 4387);
      if ((*((unsigned char *)v3 + 4672) & 4) == 0 || (*((unsigned char *)v3 + 4688) & 4) == 0 || !*((void *)v3 + 413)) {
        goto LABEL_658;
      }
      int v310 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401);
      AudioUnitParameterID v311 = 2;
      goto LABEL_657;
    }
  }
  if ((v300 & 0x100000000000000) == 0 || (*((unsigned char *)v3 + 4687) & 1) == 0)
  {
    int v312 = 1;
    goto LABEL_662;
  }
  uint64_t v298 = *((void *)v3 + 403);
  int v312 = 1;
  if (!v298) {
    goto LABEL_662;
  }
  MEMORY[0x1F4188790](v298);
  *(&v479 - 3) = 0;
  uint64_t v478 = 0;
  *(&v479 - 4) = 0;
  *((_DWORD *)&v479 - 8) = 1;
  *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 2187) + 8);
  AudioUnitSetParameter(v313, 0x14u, 0, 0, *((AudioUnitParameterValue *)v3 + 4206), 0);
  UInt64 v314 = *((void *)v3 + 432);
  *(void *)&v512.mSampleTime = &v479 - 4;
  v512.mHostTime = v314;
  v512.mRateScalar = *((Float64 *)v3 + 500);
  v512.mWordClockTime = (UInt64)v3 + 16944;
  uint64_t v315 = *((void *)v3 + 437);
  *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 430);
  *(void *)&v513.mBuffers[0].mNumberChannels = v315;
  v513.mBuffers[0].mData = (void *)*((void *)v3 + 502);
  v514 = v489;
  long long v316 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v316;
  long long v317 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v317;
  AudioUnitRenderActionFlags v502 = 512;
  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 403), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 4u, (const AudioBufferList **)&v512, 4u, (AudioBufferList **)&v513);
  uint64_t v298 = AudioUnitGetParameter(*((AudioUnit *)v3 + 403), 2u, 0, 0, &v503);
  if ((*((unsigned char *)v3 + 4672) & 4) != 0 && (*((unsigned char *)v3 + 4688) & 4) != 0 && *((void *)v3 + 413))
  {
    int v310 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403);
    AudioUnitParameterID v311 = 9;
LABEL_657:
    AudioUnitGetParameter(v310, v311, 0, 0, (AudioUnitParameterValue *)&v506);
    uint64_t v298 = AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x12u, 0, 0, *(AudioUnitParameterValue *)&v506, 0);
  }
LABEL_658:
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
    uint64_t v298 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x27u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), &inInputBufferLists);
  }
  int v312 = 0;
LABEL_662:
  uint64_t v318 = *((void *)v3 + 583);
  if ((v318 & 0x400000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 4) != 0)
  {
    uint64_t v298 = *((void *)v3 + 405);
    if (v298)
    {
      v512.mSampleTime = *((Float64 *)v3 + 429);
      *(void *)&v513.unint64_t mNumberBuffers = 0;
      long long v319 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v319;
      long long v320 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&inInputBufferLists.mRateScalar = v320;
      AudioUnitRenderActionFlags v502 = 512;
      uint64_t v321 = *((void *)v3 + 503);
      float v322 = *(void **)(v321 + 16);
      unsigned int v323 = *(_DWORD *)(v321 + 12);
      uint64_t v298 = AudioUnitProcessMultiple((AudioUnit)v298, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
      if (v298
        || (uint64_t v298 = AudioUnitGetProperty(*((AudioUnit *)v3 + 405), 0x13EDu, 0, 0, *(void **)(*((void *)v3 + 503) + 16), (UInt32 *)(*((void *)v3 + 503) + 12)), v298))
      {
        if (v323 >= 4) {
          memset_pattern16(v322, &unk_1BB873A60, v323 & 0xFFFFFFFC);
        }
      }
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        uint64_t v298 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x52u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 503), &inInputBufferLists);
      }
      uint64_t v318 = *((void *)v3 + 583);
    }
  }
  if ((v318 & 0x800000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 8) != 0)
  {
    if (*((void *)v3 + 406))
    {
      int v324 = *(_DWORD *)(v492 + 280);
      if (v324)
      {
        if (v324 == 1)
        {
          int v325 = (char *)v3 + 1104;
          int v326 = (uint64_t *)((char *)v3 + 1128);
        }
        else
        {
          int v325 = (char *)v3 + 1112;
          int v326 = (uint64_t *)((char *)v3 + 1120);
        }
        uint64_t v327 = *v326;
        unsigned int v328 = (VPTimeFreqConverter *)*((void *)v3 + 2163);
        float v329 = *(const float **)(*(void *)v325 + 40);
        Float64 v330 = *((double *)v3 + 2159);
        uint64_t v331 = *((unsigned int *)v3 + 127);
        inInputBufferLists.mSampleTime = *(Float64 *)(*(void *)&v330 + 16);
        inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v331;
        if (v328)
        {
          VPTimeFreqConverter::Analyze(v328, v329, (DSPSplitComplex *)&inInputBufferLists);
          Float64 v330 = *((double *)v3 + 2159);
          uint64_t v331 = *((unsigned int *)v3 + 127);
        }
        float v332 = (VPTimeFreqConverter *)*((void *)v3 + 2164);
        uint64_t v333 = *(const float **)(v327 + 40);
        inInputBufferLists.mSampleTime = *(Float64 *)(*(void *)&v330 + 32);
        inInputBufferLists.mHostTime = *(void *)&inInputBufferLists.mSampleTime + 4 * v331;
        if (v332)
        {
          VPTimeFreqConverter::Analyze(v332, v333, (DSPSplitComplex *)&inInputBufferLists);
          Float64 v330 = *((double *)v3 + 2159);
          LODWORD(v331) = *((_DWORD *)v3 + 127);
        }
        v512.mSampleTime = v330;
        *(Float64 *)&v513.unint64_t mNumberBuffers = v330;
        AudioUnitRenderActionFlags v502 = 512;
        long long v334 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v334;
        long long v335 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v335;
        OSStatus v336 = AudioUnitProcessMultiple(*((AudioUnit *)v3 + 406), &v502, &inInputBufferLists, v331, 1u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2159), &inInputBufferLists);
        }
        uint64_t v337 = *((void *)v3 + 2160);
        unsigned int v340 = *(_DWORD *)(v337 + 12);
        uint64_t v338 = v337 + 12;
        unsigned int v339 = v340;
        unint64_t v341 = *(void **)(v338 + 4);
        if ((v336 || AudioUnitGetProperty(*((AudioUnit *)v3 + 406), 0x15FEu, 0, 0, *(void **)(v338 + 4), (UInt32 *)v338))&& v339 >= 4)
        {
          memset_pattern16(v341, &unk_1BB873A60, v339 & 0xFFFFFFFC);
        }
        float v342 = (_DWORD *)(v492 + 408);
        uint64_t v298 = AudioUnitGetParameter(*((AudioUnit *)v3 + 406), 0, 0, 0, (AudioUnitParameterValue *)(v492 + 408));
        if (v298) {
          _DWORD *v342 = 0;
        }
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          uint64_t v298 = VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x6Eu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 2160), &inInputBufferLists);
        }
        uint64_t v318 = *((void *)v3 + 583);
      }
    }
  }
  if ((v318 & 0x80000000000) != 0 && (*((void *)v3 + 585) & 0x80000000000) != 0 && *((void *)v3 + 390))
  {
    MEMORY[0x1F4188790](v298);
    *(&v479 - 4) = 0;
    *(&v479 - 3) = 0;
    *((_DWORD *)&v479 - 8) = 1;
    MEMORY[0x1F4188790](v343);
    *(&v479 - 4) = 0;
    *(&v479 - 3) = 0;
    uint64_t v478 = 0;
    *((_DWORD *)&v479 - 8) = v346;
    if ((v344 & v345 & 0x800000000000) != 0)
    {
      uint64_t v347 = &v479 - 3;
      unsigned int v348 = &v479 - 3;
      if (*((void *)v3 + 394))
      {
        uint64_t v349 = *((void *)v3 + 2187);
        *(_OWORD *)uint64_t v347 = *(_OWORD *)(v349 + 8);
        int v350 = (_OWORD *)(v349 + 40);
LABEL_705:
        *(_OWORD *)unsigned int v348 = *v350;
        AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
        *(void *)&v512.mSampleTime = &v479 - 4;
        v512.mHostTime = (UInt64)(&v479 - 4);
        UInt64 v351 = *((void *)v3 + 502);
        v512.mRateScalar = *((Float64 *)v3 + 512);
        v512.mWordClockTime = v351;
        *(void *)&v512.mSMPTETime.mSubframes = v489;
        *(void *)&v512.mSMPTETime.mType = 0;
        uint64_t v352 = *((void *)v3 + 583);
        if ((v352 & 0x1000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 1) != 0 && *((void *)v3 + 395)) {
          *(void *)&v512.mSMPTETime.mType = *((void *)v3 + 508);
        }
        if (!v299) {
          v512.mWordClockTime = 0;
        }
        uint64_t v353 = *((void *)v3 + 510);
        *(void *)&v513.unint64_t mNumberBuffers = 0;
        *(void *)&v513.mBuffers[0].mNumberChannels = v353;
        v513.mBuffers[0].mData = 0;
        if ((v352 & 0x4000000) != 0
          && (uint64_t v354 = *((void *)v3 + 585), (v354 & 0x4000000) != 0)
          && (float v355 = (OpaqueAudioComponentInstance *)*((void *)v3 + 373)) != 0
          && (v352 & v354 & 0x400000) != 0
          && *((void *)v3 + 369))
        {
          LODWORD(inInputBufferLists.mSampleTime) = 0;
          *(void *)&v512.mSMPTETime.mType = *((void *)v3 + 508);
          AudioUnitGetParameter(v355, 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0x2Au, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x2Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
          AudioUnitSetParameter(*((AudioUnit *)v3 + 390), 0x29u, 0, 0, *(AudioUnitParameterValue *)&inInputBufferLists.mSampleTime, 0);
        }
        else if ((v352 & 0x1000000) != 0 && (*((unsigned char *)v3 + 4683) & 1) != 0 && *((void *)v3 + 371) && v496 == 1.0)
        {
          *(void *)&v512.mSMPTETime.mType = *((void *)v3 + 2148);
        }
        uint64_t v356 = 4016;
        if (v299) {
          uint64_t v356 = 4000;
        }
        v357 = *(void **)((char *)v3 + v356);
        if (v299) {
          uint64_t v358 = 3456;
        }
        else {
          uint64_t v358 = 3440;
        }
        *(void *)&v513.unint64_t mNumberBuffers = *(void *)((char *)v3 + v358);
        v513.mBuffers[0].mData = v357;
        long long v359 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v359;
        long long v360 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v360;
        AudioUnitRenderActionFlags v502 = 512;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 390), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v512, 3u, (AudioBufferList **)&v513);
        if ((v312 | !v299) == 1)
        {
          AudioUnitGetParameter(*((AudioUnit *)v3 + 390), 0x20u, 0, 0, &v503);
          AudioUnitGetParameter(*((AudioUnit *)v3 + 390), 0x20u, 0, 0, (AudioUnitParameterValue *)v3 + 4387);
        }
        uint64_t v361 = *((unsigned int *)v3 + 127);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
        {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x24u, v361, *(const AudioBufferList **)((char *)v3 + v358), &inInputBufferLists);
          uint64_t v361 = *((unsigned int *)v3 + 127);
          float v362 = (const AudioBufferList *)*((void *)v3 + 500);
          if (*((unsigned char *)v3 + 15961)) {
            goto LABEL_735;
          }
        }
        else
        {
          float v362 = (const AudioBufferList *)*((void *)v3 + 500);
        }
        if (!*((unsigned char *)v3 + 15962))
        {
LABEL_736:
          uint64_t v318 = *((void *)v3 + 583);
          goto LABEL_737;
        }
LABEL_735:
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x4Fu, v361, v362, &inInputBufferLists);
        goto LABEL_736;
      }
    }
    else
    {
      uint64_t v347 = &v479 - 3;
      unsigned int v348 = &v479 - 3;
    }
    *(_OWORD *)uint64_t v347 = *(_OWORD *)(*((void *)v3 + 429) + 8);
    int v350 = (_OWORD *)(*((void *)v3 + 433) + 8);
    goto LABEL_705;
  }
LABEL_737:
  if ((v318 & 0x1000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 1) != 0 && *((void *)v3 + 395))
  {
    LODWORD(v504) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x25u, 0, 0, (AudioUnitParameterValue *)&v504);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 395), 0, 4u, 2u, *(AudioUnitParameterValue *)&v504, 0);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 395), 0, 4u, 3u, *(AudioUnitParameterValue *)&v504, 0);
    if ((*((unsigned char *)v3 + 4665) & 0x10) != 0 && (*((unsigned char *)v3 + 4681) & 0x10) != 0)
    {
      if (*((void *)v3 + 359)) {
        float v363 = (char *)v3 + 17520;
      }
      else {
        float v363 = (char *)v3 + 3432;
      }
    }
    else
    {
      float v363 = (char *)v3 + 3432;
    }
    float v364 = memcpy(*(void **)(*((void *)v3 + 2204) + 16), *(const void **)(*(void *)v363 + 16), *(unsigned int *)(*(void *)v363 + 12));
    MEMORY[0x1F4188790](v364);
    uint64_t v478 = 0;
    *((_OWORD *)&v479 - 3) = 0u;
    *((_OWORD *)&v479 - 2) = 0u;
    *((_OWORD *)&v479 - 5) = 0u;
    *((_OWORD *)&v479 - 4) = 0u;
    *((_DWORD *)&v479 - 20) = 4;
    *(_OWORD *)(&v479 - 9) = *(_OWORD *)(*((void *)v3 + 429) + 8);
    *(_OWORD *)(&v479 - 7) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
    *(_OWORD *)(&v479 - 5) = *(_OWORD *)(*((void *)v3 + 507) + 8);
    *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 506) + 8);
    __n128 v366 = MEMORY[0x1F4188790](v365);
    uint64_t v478 = 0;
    *((__n128 *)&v479 - 3) = v366;
    *((__n128 *)&v479 - 2) = v366;
    *((__n128 *)&v479 - 5) = v366;
    *((__n128 *)&v479 - 4) = v366;
    *((_DWORD *)&v479 - 20) = v367;
    *(_OWORD *)(&v479 - 9) = *(_OWORD *)(*((void *)v3 + 2200) + 8);
    *(_OWORD *)(&v479 - 7) = *(_OWORD *)(*((void *)v3 + 2202) + 8);
    *(_OWORD *)(&v479 - 5) = *(_OWORD *)(*((void *)v3 + 2203) + 8);
    *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 2201) + 8);
    *(void *)&v512.mSampleTime = &v479 - 10;
    v512.mHostTime = (UInt64)(&v479 - 10);
    *(void *)&v513.unint64_t mNumberBuffers = &v479 - 10;
    *(void *)&v513.mBuffers[0].mNumberChannels = &v479 - 10;
    long long v368 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v368;
    long long v369 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v369;
    AudioUnitRenderActionFlags v502 = 512;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 395), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 2u, (const AudioBufferList **)&v512, 2u, (AudioBufferList **)&v513);
    vDSP_Length v370 = *((unsigned int *)v3 + 127);
    v517.realp = *(float **)(*((void *)v3 + 2204) + 16);
    v517.imagp = &v517.realp[v370];
    v516.realp = *(float **)(*((void *)v3 + 429) + 16);
    v516.imagp = &v516.realp[v370];
    float v371 = *(float **)(*((void *)v3 + 2191) + 16);
    float v372 = &v371[v370];
    vDSP_zvabs(&v517, 1, v371, 1, v370);
    vDSP_zvabs(&v516, 1, v372, 1, *((unsigned int *)v3 + 127));
    vDSP_vmin(v371, 1, v372, 1, v371, 1, *((unsigned int *)v3 + 127));
    HIDWORD(v494) = 507307272;
    vDSP_vsadd(v372, 1, (const float *)&v494 + 1, v372, 1, *((unsigned int *)v3 + 127));
    vDSP_vdiv(v372, 1, v371, 1, v372, 1, *((unsigned int *)v3 + 127));
    vDSP_vmul(v516.realp, 1, v372, 1, v516.realp, 1, *((unsigned int *)v3 + 127));
    vDSP_vmul(v516.imagp, 1, v372, 1, v516.imagp, 1, *((unsigned int *)v3 + 127));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x84u, *((unsigned int *)v3 + 127), (const AudioBufferList *)(&v479 - 10), &inInputBufferLists);
    }
    uint64_t v318 = *((void *)v3 + 583);
  }
  if ((v318 & 0x4000000000000) != 0)
  {
    uint64_t v373 = *((void *)v3 + 585);
    if ((v373 & 0x4000000000000) != 0)
    {
      uint64_t v374 = *((void *)v3 + 397);
      if (v374)
      {
        if ((v318 & v373 & 0x1000000000000) != 0 && *((void *)v3 + 395))
        {
          MEMORY[0x1F4188790](v374);
          uint64_t v478 = 0;
          *((_OWORD *)&v479 - 3) = 0u;
          *((_OWORD *)&v479 - 2) = 0u;
          *((_DWORD *)&v479 - 12) = 2;
          *(_OWORD *)(&v479 - 5) = *(_OWORD *)(*((void *)v3 + 429) + 8);
          *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
          *(void *)&v512.mSampleTime = &v479 - 6;
          *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 432);
          long long v375 = *(_OWORD *)&a2->mRateScalar;
          *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
          *(_OWORD *)&inInputBufferLists.mRateScalar = v375;
          long long v376 = *(_OWORD *)&a2->mSMPTETime.mHours;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
          *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v376;
          AudioUnitRenderActionFlags v502 = 512;
          AudioUnitProcessMultiple(v377, &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
          if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
            VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x85u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 432), &inInputBufferLists);
          }
          uint64_t v318 = *((void *)v3 + 583);
        }
      }
    }
  }
  if ((v318 & 0x1000000000000) == 0
    || (uint64_t v378 = *((void *)v3 + 585), (v378 & 0x1000000000000) == 0)
    || !*((void *)v3 + 395))
  {
    BOOL v381 = 0;
    if ((v318 & 0x100000000000) == 0) {
      goto LABEL_786;
    }
LABEL_765:
    uint64_t v382 = *((void *)v3 + 585);
    if ((v382 & 0x100000000000) == 0) {
      goto LABEL_786;
    }
    uint64_t v383 = *((void *)v3 + 391);
    if (!v383 || (v318 & v382 & 0x1000000000000) == 0 || !*((void *)v3 + 395)) {
      goto LABEL_786;
    }
    MEMORY[0x1F4188790](v383);
    *(&v479 - 4) = 0;
    *(&v479 - 3) = 0;
    *((_DWORD *)&v479 - 8) = 1;
    MEMORY[0x1F4188790](v384);
    *(&v479 - 3) = 0;
    uint64_t v478 = 0;
    *(&v479 - 4) = 0;
    *((_DWORD *)&v479 - 8) = v385;
    *(_OWORD *)(v386 - 24) = *(_OWORD *)(*((void *)v3 + 429) + 8);
    *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 432) + 8);
    AudioUnitSetParameter(v387, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
    AudioUnitSetParameter(*((AudioUnit *)v3 + 391), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
    *(void *)&v512.mSampleTime = &v479 - 4;
    v512.mHostTime = (UInt64)(&v479 - 4);
    UInt64 v388 = *((void *)v3 + 502);
    *(void *)&v512.mRateScalar = &v479 - 4;
    v512.mWordClockTime = v388;
    *(void *)&v512.mSMPTETime.mSubframes = v489;
    *(void *)&v512.mSMPTETime.mType = 0;
    *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 432);
    *(void *)&v513.mBuffers[0].mNumberChannels = 0;
    v513.mBuffers[0].mData = (void *)*((void *)v3 + 501);
    long long v389 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&inInputBufferLists.mRateScalar = v389;
    long long v390 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v390;
    AudioUnitRenderActionFlags v502 = 512;
    AudioUnitProcessMultiple(*((AudioUnit *)v3 + 391), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v512, 3u, (AudioBufferList **)&v513);
    uint64_t v391 = *((unsigned int *)v3 + 127);
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
    {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x25u, v391, *((const AudioBufferList **)v3 + 432), &inInputBufferLists);
      uint64_t v391 = *((unsigned int *)v3 + 127);
      float v392 = (const AudioBufferList *)*((void *)v3 + 501);
      if (*((unsigned char *)v3 + 15961)) {
        goto LABEL_782;
      }
    }
    else
    {
      float v392 = (const AudioBufferList *)*((void *)v3 + 501);
    }
    if (!*((unsigned char *)v3 + 15962))
    {
LABEL_783:
      if (v381) {
        vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, *(const float **)(*((void *)v3 + 501) + 16), 1, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
      }
      uint64_t v318 = *((void *)v3 + 583);
      goto LABEL_786;
    }
LABEL_782:
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x50u, v391, v392, &inInputBufferLists);
    goto LABEL_783;
  }
  LODWORD(inInputBufferLists.mSampleTime) = 0;
  LODWORD(v512.mSampleTime) = 0;
  float v379 = 0.0;
  if ((v318 & v378 & 0x400000) != 0)
  {
    float v393 = (OpaqueAudioComponentInstance *)*((void *)v3 + 369);
    float v380 = 0.0;
    if (v393)
    {
      AudioUnitGetParameter(v393, 0x43u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
      AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x47u, 0, 0, (AudioUnitParameterValue *)&v512);
      float v380 = *(float *)&inInputBufferLists.mSampleTime;
      float v379 = *(float *)&v512.mSampleTime;
      uint64_t v318 = *((void *)v3 + 583);
    }
  }
  else
  {
    float v380 = 0.0;
  }
  BOOL v381 = v379 != 0.0 && v380 != 0.0;
  if ((v318 & 0x100000000000) != 0) {
    goto LABEL_765;
  }
LABEL_786:
  if ((v318 & 0x200000000000) == 0) {
    goto LABEL_801;
  }
  uint64_t v394 = *((void *)v3 + 585);
  if ((v394 & 0x200000000000) == 0) {
    goto LABEL_801;
  }
  uint64_t v395 = *((void *)v3 + 392);
  if (!v395 || (v318 & v394 & 0x1000000000000) != 0 && *((void *)v3 + 395)) {
    goto LABEL_801;
  }
  MEMORY[0x1F4188790](v395);
  *(&v479 - 4) = 0;
  *(&v479 - 3) = 0;
  *((_DWORD *)&v479 - 8) = 1;
  MEMORY[0x1F4188790](v396);
  *(&v479 - 3) = 0;
  uint64_t v478 = 0;
  *(&v479 - 4) = 0;
  *((_DWORD *)&v479 - 8) = v397;
  *(_OWORD *)(v398 - 24) = *(_OWORD *)(*((void *)v3 + 2184) + 8);
  *(_OWORD *)(&v479 - 3) = *(_OWORD *)(*((void *)v3 + 505) + 40);
  AudioUnitSetParameter(v399, 6u, 0, 0, *((AudioUnitParameterValue *)v3 + 1056), 0);
  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 7u, 0, 0, *((AudioUnitParameterValue *)v3 + 1060), 0);
  AudioUnitSetParameter(*((AudioUnit *)v3 + 392), 0xDu, 0, 0, *((AudioUnitParameterValue *)v3 + 1064), 0);
  *(void *)&v512.mSampleTime = &v479 - 4;
  v512.mHostTime = (UInt64)(&v479 - 4);
  UInt64 v400 = *((void *)v3 + 502);
  v512.mRateScalar = *((Float64 *)v3 + 512);
  v512.mWordClockTime = v400;
  *(void *)&v512.mSMPTETime.mSubframes = v489;
  *(void *)&v512.mSMPTETime.mType = 0;
  *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 432);
  *(void *)&v513.mBuffers[0].mNumberChannels = 0;
  v513.mBuffers[0].mData = (void *)*((void *)v3 + 2196);
  long long v401 = *(_OWORD *)&a2->mRateScalar;
  *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
  *(_OWORD *)&inInputBufferLists.mRateScalar = v401;
  long long v402 = *(_OWORD *)&a2->mSMPTETime.mHours;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v402;
  AudioUnitRenderActionFlags v502 = 512;
  AudioUnitProcessMultiple(*((AudioUnit *)v3 + 392), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v512, 3u, (AudioBufferList **)&v513);
  uint64_t v403 = *((unsigned int *)v3 + 127);
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x26u, v403, *((const AudioBufferList **)v3 + 432), &inInputBufferLists);
    uint64_t v403 = *((unsigned int *)v3 + 127);
    BOOL v404 = (const AudioBufferList *)*((void *)v3 + 2196);
    if (*((unsigned char *)v3 + 15961))
    {
LABEL_797:
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x51u, v403, v404, &inInputBufferLists);
      goto LABEL_798;
    }
  }
  else
  {
    BOOL v404 = (const AudioBufferList *)*((void *)v3 + 2196);
  }
  if (*((unsigned char *)v3 + 15962)) {
    goto LABEL_797;
  }
LABEL_798:
  if (*(float *)&v510 != 0.0) {
    vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, *(const float **)(*((void *)v3 + 2196) + 16), 1, *(float **)(*((void *)v3 + 500) + 16), 1, *((unsigned int *)v3 + 127));
  }
  uint64_t v318 = *((void *)v3 + 583);
LABEL_801:
  if ((v318 & 0x80000000000) != 0 && (*((unsigned char *)v3 + 4685) & 8) != 0 && *((void *)v3 + 390))
  {
    if (!v299)
    {
LABEL_815:
      if ((*((unsigned char *)v3 + 4685) & 8) != 0)
      {
        BOOL v409 = *((void *)v3 + 390) != 0;
LABEL_818:
        BOOL v410 = v409 || v297;
        char v408 = (char)v491;
        if (!v410)
        {
          LODWORD(inInputBufferLists.mSampleTime) = 1065353216;
          unsigned int v411 = *((_DWORD *)v3 + 127);
          vDSP_vfill((const float *)&inInputBufferLists, *(float **)(*((void *)v3 + 502) + 16), 1, v411);
          memcpy(*(void **)(*((void *)v3 + 430) + 16), *(const void **)(*((void *)v3 + 429) + 16), 8 * v411);
        }
        goto LABEL_856;
      }
LABEL_816:
      BOOL v409 = 0;
      goto LABEL_818;
    }
  }
  else if ((v318 & 0x100000000000) == 0 {
         || (*((unsigned char *)v3 + 4685) & 0x10) == 0
  }
         || (*((void *)v3 + 391) ? (BOOL v405 = v299) : (BOOL v405 = 0), !v405))
  {
    if ((v318 & 0x80000000000) == 0) {
      goto LABEL_816;
    }
    goto LABEL_815;
  }
  BOOL v406 = *(float **)(*((void *)v3 + 502) + 16);
  memcpy(*(void **)(*((void *)v3 + 435) + 16), v406, 4 * *((unsigned int *)v3 + 127));
  vDSP_vmin(*(const float **)(*((void *)v3 + 500) + 16), 1, v406, 1, v406, 1, *((unsigned int *)v3 + 127));
  uint64_t v407 = *((void *)v3 + 583);
  if ((v407 & 0x400000000000000) != 0)
  {
    char v408 = (char)v491;
    if ((*((unsigned char *)v3 + 4687) & 4) != 0 && *((void *)v3 + 405))
    {
      vDSP_vmin(*(const float **)(*((void *)v3 + 503) + 16), 1, v406, 1, v406, 1, *((unsigned int *)v3 + 127));
      uint64_t v407 = *((void *)v3 + 583);
    }
  }
  else
  {
    char v408 = (char)v491;
  }
  if ((v407 & 0x800000000000000) != 0 && (*((unsigned char *)v3 + 4687) & 8) != 0 && *((void *)v3 + 406))
  {
    vDSP_vmin(*(const float **)(*((void *)v3 + 2160) + 16), 1, v406, 1, v406, 1, *((unsigned int *)v3 + 127));
    uint64_t v407 = *((void *)v3 + 583);
  }
  if ((v407 & 0x8000000000000) != 0 && (*((unsigned char *)v3 + 4686) & 8) != 0 && *((void *)v3 + 398))
  {
    vDSP_vmin(*(const float **)(*((void *)v3 + 2161) + 16), 1, v406, 1, v406, 1, *((unsigned int *)v3 + 127));
    uint64_t v407 = *((void *)v3 + 583);
  }
  if ((v407 & 0x1000) != 0)
  {
    uint64_t v412 = *((void *)v3 + 585);
    if ((v412 & 0x1000) != 0
      && *((void *)v3 + 359)
      && ((v407 & v412 & 0x1000000000000) == 0 || !*((void *)v3 + 395)))
    {
      uint64_t v413 = *((void *)v3 + 2190);
      goto LABEL_851;
    }
  }
  if ((v407 & 0x800000000000) == 0 || (*((unsigned char *)v3 + 4685) & 0x80) == 0 || !*((void *)v3 + 394))
  {
    if (v407 & 0x1000000000000) != 0 && (*((unsigned char *)v3 + 4686))
    {
      if (*((void *)v3 + 395)) {
        char v416 = v381;
      }
      else {
        char v416 = 1;
      }
      uint64_t v414 = *((unsigned int *)v3 + 127);
      if ((v416 & 1) == 0)
      {
        uint64_t v413 = *((void *)v3 + 2204);
        goto LABEL_844;
      }
    }
    else
    {
      uint64_t v414 = *((unsigned int *)v3 + 127);
    }
    uint64_t v413 = *((void *)v3 + 429);
LABEL_844:
    float v415 = *(const float **)(v413 + 16);
    goto LABEL_852;
  }
  uint64_t v413 = *((void *)v3 + 2187);
LABEL_851:
  float v415 = *(const float **)(v413 + 16);
  uint64_t v414 = *((unsigned int *)v3 + 127);
LABEL_852:
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x61u, v414, (const AudioBufferList *)v413, &buf);
  }
  unsigned int v417 = *(float **)(*((void *)v3 + 430) + 16);
  vDSP_vmul(v415, 1, v406, 1, v417, 1, *((unsigned int *)v3 + 127));
  vDSP_vmul(&v415[*((unsigned int *)v3 + 127) + 1], 1, v406 + 1, 1, &v417[*((unsigned int *)v3 + 127) + 1], 1, (*((_DWORD *)v3 + 127) - 1));
  v415[*((unsigned int *)v3 + 127)] = v415[*((unsigned int *)v3 + 127)] * v406[*((_DWORD *)v3 + 127) - 1];
LABEL_856:
  if (((v408 & 1) != 0 || (*((unsigned char *)v3 + 4669) & 8) != 0 && (*((unsigned char *)v3 + 4685) & 8) != 0 && *((void *)v3 + 390))
    && (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)))
  {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x60u, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 430), &buf);
  }
  if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
  {
    float v418 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
    if (v418)
    {
      if (*((_DWORD *)v3 + 3114) == 12)
      {
        uint64_t v419 = (AudioUnitParameterValue *)*((void *)v3 + 2174);
        *uint64_t v419 = v503;
        unsigned int v420 = *(_DWORD *)(v492 + 184);
        unsigned int v421 = *((_DWORD *)v3 + 127);
        unsigned int v422 = v420 % v421;
        unsigned int v423 = vcvtms_u32_f32((float)v420 / (float)v421);
        if (v422) {
          float v424 = (float)((float)((float)v422 / (float)v421) * v419[v423 + 1])
        }
               + (float)((float)(1.0 - (float)((float)v422 / (float)v421)) * v419[v423]);
        else {
          float v424 = v419[v423];
        }
        AudioUnitParameterValue v503 = v424;
        memmove(v419 + 1, v419, *((void *)v3 + 2175) - (void)v419 - 4);
        float v418 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
      }
      AudioUnitSetParameter(v418, 0, 0, 0, *((AudioUnitParameterValue *)v3 + 3133), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 4u, 0, 0, *((AudioUnitParameterValue *)v3 + 1048), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x13u, 0, 0, *((AudioUnitParameterValue *)v3 + 1052), 0);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 3u, 0, 0, v503, 0);
      LODWORD(v517.realp) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 0x1Cu, 0, 0, (AudioUnitParameterValue *)&v517);
      if (*(float *)&v517.realp == 1.0)
      {
        LODWORD(inInputBufferLists.mSampleTime) = -1082130432;
        AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 0x1Du, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
        BOOL v425 = *(float *)&inInputBufferLists.mSampleTime != 2.0 || *(float *)&inInputBufferLists.mSampleTime == 1.0;
        uint64_t v426 = 176;
        if (!v425) {
          uint64_t v426 = 184;
        }
        v427 = (char *)v3 + v426;
        v428 = (OpaqueAudioComponentInstance *)*((void *)v427 + 347);
        if (v428)
        {
          unsigned int v429 = (AudioUnit *)(v427 + 2776);
          LODWORD(v512.mSampleTime) = 0;
          if (!AudioUnitGetPropertyInfo(v428, 0xED8u, 0, 0, (UInt32 *)&v512, 0))
          {
            float v430 = (void *)*((void *)v3 + 2197);
            if (*((void *)v3 + 2198) - (void)v430 >= (unint64_t)LODWORD(v512.mSampleTime)) {
              AudioUnitGetProperty(*v429, 0xED8u, 0, 0, v430, (UInt32 *)&v512);
            }
          }
          v513.unint64_t mNumberBuffers = 0;
          AudioUnitGetParameter(*v429, 1u, 0, 0, (AudioUnitParameterValue *)&v513.mNumberBuffers);
          AudioUnitSetProperty(*((AudioUnit *)v3 + 408), 0x846u, 0, 0, *((const void **)v3 + 2197), vcvts_n_u32_f32(*(float *)&v513.mNumberBuffers, 2uLL));
        }
      }
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0xEu, 0, 0, (float)*((int *)v3 + 576), 0);
      LODWORD(v516.realp) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 369), 0x2Du, 0, 0, (AudioUnitParameterValue *)&v516);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x23u, 0, 0, *(AudioUnitParameterValue *)&v516.realp, 0);
      LODWORD(v504) = 1120403456;
      uint64_t v431 = *((void *)v3 + 583);
      if ((v431 & 0x20000000) != 0
        && (*((unsigned char *)v3 + 4683) & 0x20) != 0
        && (float v432 = (OpaqueAudioComponentInstance *)*((void *)v3 + 376)) != 0
        || (v431 & 0x20000000000000) != 0
        && (*((unsigned char *)v3 + 4686) & 0x20) != 0
        && (float v432 = (OpaqueAudioComponentInstance *)*((void *)v3 + 400)) != 0
        || (v431 & 0x40000000000000) != 0
        && (*((unsigned char *)v3 + 4686) & 0x40) != 0
        && (float v432 = (OpaqueAudioComponentInstance *)*((void *)v3 + 401)) != 0)
      {
        AudioUnitParameterID v433 = 2;
      }
      else
      {
        if ((v431 & 0x100000000000000) == 0
          || (*((unsigned char *)v3 + 4687) & 1) == 0
          || (float v432 = (OpaqueAudioComponentInstance *)*((void *)v3 + 403)) == 0)
        {
          AudioUnitParameterValue v434 = 100.0;
          goto LABEL_898;
        }
        AudioUnitParameterID v433 = 9;
      }
      AudioUnitGetParameter(v432, v433, 0, 0, (AudioUnitParameterValue *)&v504);
      AudioUnitParameterValue v434 = *(float *)&v504;
LABEL_898:
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x25u, 0, 0, v434, 0);
      if (*((_DWORD *)v3 + 3114) == 12)
      {
        UInt64 v435 = *((void *)v3 + 511);
        v512.mSampleTime = *((Float64 *)v3 + 419);
        v512.mHostTime = v435;
        UInt64 v436 = *((void *)v3 + 433);
        v512.mRateScalar = *((Float64 *)v3 + 2172);
        v512.mWordClockTime = v436;
        uint64_t v437 = *((void *)v3 + 2171);
        *(void *)&v512.mSMPTETime.mSubframes = 0;
        *(void *)&v512.mSMPTETime.mType = v437;
        *(void *)&v513.unint64_t mNumberBuffers = 0;
        AudioUnitRenderActionFlags v502 = 512;
        long long v438 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&inInputBufferLists.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&inInputBufferLists.mRateScalar = v438;
        long long v439 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&inInputBufferLists.mSMPTETime.mHours = v439;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 408), &v502, &inInputBufferLists, *((_DWORD *)v3 + 127), 6u, (const AudioBufferList **)&v512, 1u, (AudioBufferList **)&v513);
        uint64_t v494 = 4;
        AudioUnitGetProperty(*((AudioUnit *)v3 + 408), 0x15u, 0, 0, (char *)&v494 + 4, (UInt32 *)&v494);
        if (!HIDWORD(v494))
        {
          AudioUnitParameterValue v493 = 0.0;
          AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 0xBu, 0, 0, &v493);
          vDSP_vsmul(*(const float **)(*((void *)v3 + 136) + 16), 1, &v493, *(float **)(*((void *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
        }
      }
      else
      {
        UInt64 v440 = *((void *)v3 + 511);
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 419);
        inInputBufferLists.mHostTime = v440;
        UInt64 v441 = *((void *)v3 + 510);
        inInputBufferLists.mRateScalar = *((Float64 *)v3 + 430);
        inInputBufferLists.mWordClockTime = v441;
        uint64_t v442 = *((void *)v3 + 502);
        *(void *)&inInputBufferLists.mSMPTETime.mSubframes = *((void *)v3 + 500);
        *(void *)&inInputBufferLists.mSMPTETime.mType = v442;
        uint64_t v443 = *((void *)v3 + 435);
        *(void *)&inInputBufferLists.mSMPTETime.mHours = v489;
        *(void *)&inInputBufferLists.mFlags = v443;
        *(void *)&v513.unint64_t mNumberBuffers = *((void *)v3 + 136);
        AudioUnitRenderActionFlags v502 = 512;
        long long v444 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&v512.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&v512.mRateScalar = v444;
        long long v445 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&v512.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&v512.mSMPTETime.mHours = v445;
        AudioUnitProcessMultiple(*((AudioUnit *)v3 + 408), &v502, &v512, *((_DWORD *)v3 + 127), 8u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v513);
      }
      LODWORD(inInputBufferLists.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
      *((_DWORD *)v3 + 3134) = LODWORD(inInputBufferLists.mSampleTime);
      if ((*((unsigned char *)v3 + 4672) & 4) != 0 && (*((unsigned char *)v3 + 4688) & 4) != 0 && *((void *)v3 + 413))
      {
        AudioUnitGetParameter(*((AudioUnit *)v3 + 408), 2u, 0, 0, &v503);
        AudioUnitSetParameter(*((AudioUnit *)v3 + 413), 0x23u, 0, 0, v503, 0);
      }
    }
  }
LABEL_906:
  v513.unint64_t mNumberBuffers = 0;
  unsigned int v446 = VoiceProcessorV2::LocalVoiceDuckingForMediaChatEnabled(v3);
  unsigned int v448 = v446;
  if (!*((unsigned char *)v3 + 2080))
  {
    if ((v446 & 1) == 0) {
      goto LABEL_927;
    }
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v447);
LABEL_915:
    uint64_t v450 = *((void *)v3 + 583);
    if ((v450 & 0x4000000000000000) != 0
      && (*((unsigned char *)v3 + 4687) & 0x40) != 0
      && (long long v451 = (OpaqueAudioComponentInstance *)*((void *)v3 + 409)) != 0)
    {
      AudioUnitParameterID v452 = 1936748646;
    }
    else
    {
      if ((v450 & 0x2000000000000000) == 0
        || (*((unsigned char *)v3 + 4687) & 0x20) == 0
        || (long long v451 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408)) == 0)
      {
        *(AudioUnitParameterValue *)&v513.unint64_t mNumberBuffers = v503;
        goto LABEL_925;
      }
      AudioUnitParameterID v452 = 2;
    }
    AudioUnitGetParameter(v451, v452, 0, 0, (AudioUnitParameterValue *)&v513.mNumberBuffers);
    goto LABEL_925;
  }
  if (*((void *)v3 + 2062)) {
    char v449 = 1;
  }
  else {
    char v449 = v446;
  }
  if (v449)
  {
    VoiceProcessorV2::DetectVoiceActivity(v3, a2, v447);
    if (v448) {
      goto LABEL_915;
    }
  }
LABEL_925:
  if (*((unsigned char *)v3 + 2080))
  {
    bzero(*(void **)(*((void *)v3 + 136) + 16), 4 * *((unsigned int *)v3 + 127));
    v513.unint64_t mNumberBuffers = 0;
    goto LABEL_928;
  }
LABEL_927:
  *((_DWORD *)v3 + 4126) = 0;
LABEL_928:
  if ((*((unsigned char *)v3 + 8897) & 0x80) != 0 && (*((unsigned char *)v3 + 8905) & 0x80) != 0)
  {
    v453 = (OpaqueAudioComponentInstance *)*((void *)v3 + 453);
    unsigned int v454 = v453 ? v448 : 0;
    if (v454 == 1) {
      AudioUnitSetParameter(v453, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v513.mNumberBuffers, 0);
    }
  }
  if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
    VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
  }
  if ((*((unsigned char *)v3 + 4671) & 0x10) != 0 && (*((unsigned char *)v3 + 4687) & 0x10) != 0)
  {
    float v455 = (OpaqueAudioComponentInstance *)*((void *)v3 + 407);
    if (v455)
    {
      inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
      v512.mSampleTime = inInputBufferLists.mSampleTime;
      LODWORD(v517.realp) = 512;
      long long v456 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v456;
      long long v457 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v457;
      AudioUnitProcessMultiple(v455, (AudioUnitRenderActionFlags *)&v517, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v512);
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Au, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
    }
  }
  if (*((unsigned char *)v3 + 2085))
  {
    if ((*((unsigned char *)v3 + 4672) & 0x80) != 0 && (*((unsigned char *)v3 + 4688) & 0x80) != 0)
    {
      float v458 = (OpaqueAudioComponentInstance *)*((void *)v3 + 418);
      if (v458)
      {
        inInputBufferLists.mSampleTime = *((Float64 *)v3 + 136);
        v512.mSampleTime = inInputBufferLists.mSampleTime;
        LODWORD(v517.realp) = 512;
        long long v459 = *(_OWORD *)&a2->mRateScalar;
        *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
        *(_OWORD *)&buf.mRateScalar = v459;
        long long v460 = *(_OWORD *)&a2->mSMPTETime.mHours;
        *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
        *(_OWORD *)&buf.mSMPTETime.mHours = v460;
        AudioUnitProcessMultiple(v458, (AudioUnitRenderActionFlags *)&v517, &buf, *((_DWORD *)v3 + 127), 1u, (const AudioBufferList **)&inInputBufferLists, 1u, (AudioBufferList **)&v512);
        if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
          VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x7Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
        }
      }
    }
  }
  uint64_t v461 = *((void *)v3 + 584);
  if (v461 & 1) != 0 && (*((unsigned char *)v3 + 4688))
  {
    vDSP_Length v462 = (OpaqueAudioComponentInstance *)*((void *)v3 + 411);
    if (v462)
    {
      long long v463 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v463;
      long long v464 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v464;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v462, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
        VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Cu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
      }
      uint64_t v461 = *((void *)v3 + 584);
    }
  }
  if ((v461 & 2) != 0 && (*((unsigned char *)v3 + 4688) & 2) != 0)
  {
    int v465 = (OpaqueAudioComponentInstance *)*((void *)v3 + 412);
    if (v465)
    {
      long long v466 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v466;
      long long v467 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v467;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      AudioUnitProcess(v465, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
      uint64_t v461 = *((void *)v3 + 584);
    }
  }
  if ((v461 & 4) != 0
    && (*((unsigned char *)v3 + 4688) & 4) != 0
    && (float v468 = (OpaqueAudioComponentInstance *)*((void *)v3 + 413)) != 0)
  {
    long long v469 = *(_OWORD *)&a2->mRateScalar;
    *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
    *(_OWORD *)&buf.mRateScalar = v469;
    long long v470 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *(_OWORD *)&buf.mSMPTETime.mHours = v470;
    LODWORD(inInputBufferLists.mSampleTime) = 512;
    AudioUnitProcess(v468, (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Du, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), &buf);
    }
    if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0 && *((void *)v3 + 408))
    {
      LODWORD(v512.mSampleTime) = 0;
      AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 1u, 0, 0, (AudioUnitParameterValue *)&v512);
      AudioUnitSetParameter(*((AudioUnit *)v3 + 408), 0x11u, 0, 0, *(AudioUnitParameterValue *)&v512.mSampleTime, 0);
    }
    LODWORD(v512.mSampleTime) = 0;
    AudioUnitGetParameter(*((AudioUnit *)v3 + 413), 0x1Bu, 0, 0, (AudioUnitParameterValue *)&v512);
    int mSampleTime_low = LODWORD(v512.mSampleTime);
    if (*((float *)v3 + 572) != *(float *)&v512.mSampleTime)
    {
      if ((*((unsigned char *)v3 + 4671) & 0x20) != 0 && (*((unsigned char *)v3 + 4687) & 0x20) != 0)
      {
        v472 = (OpaqueAudioComponentInstance *)*((void *)v3 + 408);
        if (v472)
        {
          AudioUnitSetParameter(v472, 0x12u, 0, 0, *(AudioUnitParameterValue *)&v512.mSampleTime, 0);
          int mSampleTime_low = LODWORD(v512.mSampleTime);
        }
      }
      *((_DWORD *)v3 + 572) = mSampleTime_low;
    }
  }
  else if ((*((void *)v3 + 583) & 0x8000000000000000) != 0 {
         && ((*((void *)v3 + 585) & 0x8000000000000000) != 0 || *((unsigned char *)v3 + 472)))
  }
  {
    LODWORD(buf.mSampleTime) = __exp10f(*((float *)v3 + 1093) / 20.0);
    vDSP_vsmul(*(const float **)(*((void *)v3 + 136) + 16), 1, (const float *)&buf, *(float **)(*((void *)v3 + 136) + 16), 1, *((unsigned int *)v3 + 127));
    if (*((unsigned char *)v3 + 15961) || *((unsigned char *)v3 + 15962)) {
      VoiceProcessorV2::SaveFilesWriteSignal((uint64_t)v3, 0x2Bu, *((unsigned int *)v3 + 127), *((const AudioBufferList **)v3 + 136), a2);
    }
  }
  VoiceProcessorV6::ProcessLevelDrivenSuppressor((uint64_t)v3, a2);
  if ((*((unsigned char *)v3 + 4672) & 0x10) != 0 && (*((unsigned char *)v3 + 4688) & 0x10) != 0)
  {
    v473 = (OpaqueAudioComponentInstance *)*((void *)v3 + 415);
    if (v473)
    {
      long long v474 = *(_OWORD *)&a2->mRateScalar;
      *(_OWORD *)&buf.mSampleTime = *(_OWORD *)&a2->mSampleTime;
      *(_OWORD *)&buf.mRateScalar = v474;
      long long v475 = *(_OWORD *)&a2->mSMPTETime.mHours;
      *(_OWORD *)&buf.mSMPTETime.mSubframes = *(_OWORD *)&a2->mSMPTETime.mSubframes;
      *(_OWORD *)&buf.mSMPTETime.mHours = v475;
      LODWORD(inInputBufferLists.mSampleTime) = 512;
      unsigned __int8 v476 = atomic_load(gWirelessChargingMatIsAttached);
      AudioUnitSetParameter(v473, 5u, 0, 0, (float)(v476 & 1), 0);
      AudioUnitProcess(*((AudioUnit *)v3 + 415), (AudioUnitRenderActionFlags *)&inInputBufferLists, &buf, *((_DWORD *)v3 + 127), *((AudioBufferList **)v3 + 136));
    }
  }
  return 0;
}

void std::default_delete<FreqDomainConvolver>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 10));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 6));
  CDSPSplitComplex::~CDSPSplitComplex((CDSPSplitComplex *)(a1 + 2));
  size_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

void CrossCorrelator::~CrossCorrelator(CrossCorrelator *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    std::default_delete<FreqDomainConvolver>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  size_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

void VPStrategyManager::RunUplinkDynamicsDSP(VPStrategyManager *this, AudioBufferList *a2, const AudioTimeStamp *a3)
{
}

void VPStrategyManager::RunUplinkEchoDSP(VPStrategyManager *this, const AudioTimeStamp *a2)
{
}

void VPStrategyManager::RunUplinkHardwareDSP(VPStrategyManager *this, const AudioBufferList *a2, const AudioTimeStamp *a3)
{
}

void VPStrategyManager::WriteBuffer()
{
}

void VPStrategyManager::ReadBuffer()
{
}

void VPStrategyManager::PreflightDownlink(VPStrategyManager *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
}

void VPStrategyManager::PreflightUplink(VPStrategyManager *this, unsigned int a2, unsigned int *a3)
{
}

uint64_t VPStrategyManager::GetPropertyInfo(VPStrategyManager *this, uint64_t a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      unint64_t v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        uint64_t v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          __int16 v20 = 1024;
          int v21 = 482;
          _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v18, *((void *)this + 25) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    long long v10 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v10) {
      goto LABEL_18;
    }
  }
  else
  {
    long long v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v20 = 1024;
    int v21 = 484;
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting property info with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      unsigned int v12 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v12)
      {
        float v13 = v12;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.h";
          __int16 v20 = 1024;
          int v21 = 141;
          _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)buf, *((void *)this + 25) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((void *)this + 25) + 224)))
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, unsigned int *, unsigned __int8 *))(**(void **)(*((void *)this + 25) + 224)
                                                                                        + 152))(*(void *)(*((void *)this + 25) + 224), a2, a3, a4);
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    if (!v14) {
      goto LABEL_39;
    }
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    uint64_t v14 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v15 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v15) {
      goto LABEL_39;
    }
  }
  else
  {
    int v15 = MEMORY[0x1E4F14500];
    id v16 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v20 = 1024;
    int v21 = 486;
    __int16 v22 = 1024;
    int v23 = v14;
    __int16 v24 = 2080;
    uint64_t v25 = "GetPropertyInfo";
    _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_39:
  atomic_fetch_add((atomic_uint *volatile)(v18 + 4), 0xFFFFFFFF);
  return v14;
}

void sub_1BB6EF2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

BOOL VPStrategyManager::CheckHasVP(VPStrategyManager *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      uint64_t v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v2) {
        return this != 0;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      long long v6 = "vpStrategyManager.h";
      __int16 v7 = 1024;
      int v8 = 162;
      _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d vp is nullptr!", (uint8_t *)&v5, 0x12u);
    }
  }
  return this != 0;
}

void ___Z18VPStrategyMgrScopev_block_invoke()
{
}

uint64_t VPStrategyManager::RemovePropertyListenerBlock(VPStrategyManager *this, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      long long v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v6)
      {
        __int16 v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          __int16 v18 = 1024;
          int v19 = 579;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v16, *((void *)this + 25) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v8 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v8) {
      goto LABEL_18;
    }
  }
  else
  {
    int v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v18 = 1024;
    int v19 = 581;
    __int16 v20 = 1024;
    int v21 = a2;
    _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removing listener for property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      long long v10 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v10)
      {
        id v11 = v10;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.h";
          __int16 v18 = 1024;
          int v19 = 141;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)buf, *((void *)this + 25) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((void *)this + 25) + 224)))
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 25) + 224) + 144))(*(void *)(*((void *)this + 25) + 224), a2, a3);
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    if (!v12) {
      goto LABEL_39;
    }
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    uint64_t v12 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    float v13 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v13) {
      goto LABEL_39;
    }
  }
  else
  {
    float v13 = MEMORY[0x1E4F14500];
    id v14 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v18 = 1024;
    int v19 = 583;
    __int16 v20 = 1024;
    int v21 = v12;
    __int16 v22 = 2080;
    int v23 = "RemovePropertyListenerBlock";
    _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_39:
  atomic_fetch_add((atomic_uint *volatile)(v16 + 4), 0xFFFFFFFF);
  return v12;
}

void sub_1BB6EF86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t VPStrategyManager::AddPropertyListenerBlock(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      int v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        id v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          __int16 v20 = 1024;
          int v21 = 569;
          _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v18, *(void *)(a1 + 200) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    long long v10 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v10) {
      goto LABEL_18;
    }
  }
  else
  {
    long long v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v20 = 1024;
    int v21 = 571;
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding listener for property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v12 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v12)
      {
        float v13 = v12;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.h";
          __int16 v20 = 1024;
          int v21 = 141;
          _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)buf, *(void *)(a1 + 200) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*(void *)(a1 + 200) + 224)))
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, id, uint64_t))(**(void **)(*(void *)(a1 + 200) + 224) + 136))(*(void *)(*(void *)(a1 + 200) + 224), a2, v7, a4);
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    if (!v14) {
      goto LABEL_39;
    }
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    uint64_t v14 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v15 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v15) {
      goto LABEL_39;
    }
  }
  else
  {
    int v15 = MEMORY[0x1E4F14500];
    id v16 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v20 = 1024;
    int v21 = 573;
    __int16 v22 = 1024;
    int v23 = v14;
    __int16 v24 = 2080;
    uint64_t v25 = "AddPropertyListenerBlock";
    _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_39:
  atomic_fetch_add((atomic_uint *volatile)(v18 + 4), 0xFFFFFFFF);

  return v14;
}

void sub_1BB6EFC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  atomic_fetch_add((atomic_uint *volatile)(a10 + 4), 0xFFFFFFFF);

  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::AppendReferenceSignal(VPStrategyManager *this, const AudioBufferList *a2, const AudioTimeStamp *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 25);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 324), 1u);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((void *)this + 25) + 224)) && !*(_DWORD *)(v6 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    uint64_t v7 = (*(uint64_t (**)(void, const AudioBufferList *, const AudioTimeStamp *))(**(void **)(*((void *)this + 25) + 224)
                                                                                            + 128))(*(void *)(*((void *)this + 25) + 224), a2, a3);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 324), 0xFFFFFFFF);
    if (!v7) {
      return v7;
    }
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(v6 + 324), 0xFFFFFFFF);
    uint64_t v7 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v8 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v8) {
      return v7;
    }
  }
  else
  {
    int v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    int v11 = 136315906;
    uint64_t v12 = "vpStrategyManager.mm";
    __int16 v13 = 1024;
    int v14 = 563;
    __int16 v15 = 1024;
    int v16 = v7;
    __int16 v17 = 2080;
    uint64_t v18 = "AppendReferenceSignal";
    _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", (uint8_t *)&v11, 0x22u);
  }

  return v7;
}

void sub_1BB6EFEB4(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void VPStrategyManager::CheckRequiredState(unint64_t **this, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = atomic_load(this[25]);
  if ((v3 & a2) == 0)
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      id v13 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v13) {
        return;
      }
    }
    else
    {
      id v13 = (id)MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    int v5 = v13;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      VPStrategyManager::StateAsString((VPStrategyManager *)v21, v3);
      int v15 = v22;
      int v16 = (void **)v21[0];
      VPStrategyManager::StateAsString((VPStrategyManager *)__p, a2);
      __int16 v17 = v21;
      if (v15 < 0) {
        __int16 v17 = v16;
      }
      if (v20 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      __int16 v24 = "vpStrategyManager.h";
      __int16 v25 = 1024;
      int v26 = 153;
      __int16 v27 = 2080;
      unint64_t v28 = v17;
      __int16 v29 = 2080;
      uint64_t v30 = v18;
      long long v10 = "%25s:%-5d Invalid state: %s! At this point, we require state: %s";
      int v11 = v5;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
      goto LABEL_28;
    }
LABEL_32:

    return;
  }
  if (v3 != 8)
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
      {
        id v4 = *(id *)VPStrategyMgrScope(void)::scope;
        if (v4)
        {
          int v5 = v4;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            VPStrategyManager::StateAsString((VPStrategyManager *)v21, v3);
            int v6 = v22;
            uint64_t v7 = (void **)v21[0];
            VPStrategyManager::StateAsString((VPStrategyManager *)__p, a2);
            int v8 = v21;
            if (v6 < 0) {
              int v8 = v7;
            }
            if (v20 >= 0) {
              id v9 = __p;
            }
            else {
              id v9 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            __int16 v24 = "vpStrategyManager.h";
            __int16 v25 = 1024;
            int v26 = 156;
            __int16 v27 = 2080;
            unint64_t v28 = v8;
            __int16 v29 = 2080;
            uint64_t v30 = v9;
            long long v10 = "%25s:%-5d State is: %s which is an acceptable state for this point: {%s}";
            int v11 = v5;
            os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
LABEL_28:
            _os_log_impl(&dword_1BB0CE000, v11, v12, v10, buf, 0x26u);
            if (v20 < 0) {
              operator delete(__p[0]);
            }
            if (v22 < 0) {
              operator delete(v21[0]);
            }
            goto LABEL_32;
          }
          goto LABEL_32;
        }
      }
    }
  }
}

void sub_1BB6F0164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::StateAsString(VPStrategyManager *this, uint64_t a2)
{
  v16[19] = *MEMORY[0x1E4F143B8];
  {
    long long v12 = xmmword_1E6242E58;
    v13[0] = unk_1E6242E68;
    v13[1] = xmmword_1E6242E78;
    std::map<unsigned long long,char const*>::map[abi:ne180100]((uint64_t *)&v12, 3);
    __cxa_atexit((void (*)(void *))std::map<unsigned long long,char const*>::~map[abi:ne180100], &VPStrategyManager::StateAsString(unsigned long long)::stateNames, &dword_1BB0CE000);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v12);
  uint64_t v4 = VPStrategyManager::StateAsString(unsigned long long)::stateNames;
  if ((uint64_t *)VPStrategyManager::StateAsString(unsigned long long)::stateNames == &qword_1E9F80008) {
    goto LABEL_15;
  }
  char v5 = 0;
  do
  {
    if ((*(void *)(v4 + 32) & a2) != 0)
    {
      if (v5) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" OR ", 4);
      }
      size_t v6 = strlen(*(const char **)(v4 + 40));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, *(void *)(v4 + 40), v6);
      char v5 = 1;
    }
    uint64_t v7 = *(uint64_t **)(v4 + 8);
    if (v7)
    {
      do
      {
        int v8 = v7;
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v8 = *(uint64_t **)(v4 + 16);
        BOOL v9 = *v8 == v4;
        uint64_t v4 = (uint64_t)v8;
      }
      while (!v9);
    }
    uint64_t v4 = (uint64_t)v8;
  }
  while (v8 != &qword_1E9F80008);
  if ((v5 & 1) == 0) {
LABEL_15:
  }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"*invalid*", 9);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v13 + 8, this);
  *(void *)&long long v12 = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v13[-1] + *(void *)(v12 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v13[0] = v10;
  *((void *)&v13[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C185D210](v16);
}

void sub_1BB6F0478(_Unwind_Exception *a1)
{
}

uint64_t *std::map<unsigned long long,char const*>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_1E9F80010 = 0;
  qword_1E9F80008 = 0;
  VPStrategyManager::StateAsString(unsigned long long)::stateNames = (uint64_t)&qword_1E9F80008;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = &result[2 * a2];
    char v5 = &qword_1E9F80008;
    while (1)
    {
      if (v5 == &qword_1E9F80008)
      {
        uint64_t v7 = &qword_1E9F80008;
      }
      else
      {
        size_t v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            uint64_t v7 = v6;
            size_t v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          int v8 = &qword_1E9F80008;
          do
          {
            uint64_t v7 = (uint64_t *)v8[2];
            BOOL v9 = *v7 == (void)v8;
            int v8 = v7;
          }
          while (v9);
        }
        unint64_t v10 = *v2;
        if (v7[4] >= (unint64_t)*v2)
        {
          if (v3)
          {
            long long v12 = &qword_1E9F80008;
            while (1)
            {
              while (1)
              {
                int v11 = (uint64_t *)v3;
                unint64_t v14 = *(void *)(v3 + 32);
                if (v10 >= v14) {
                  break;
                }
                uint64_t v3 = *v11;
                long long v12 = v11;
                if (!*v11) {
                  goto LABEL_18;
                }
              }
              if (v14 >= v10) {
                break;
              }
              long long v12 = v11 + 1;
              uint64_t v3 = v11[1];
              if (!v3) {
                goto LABEL_18;
              }
            }
          }
          else
          {
            int v11 = &qword_1E9F80008;
            long long v12 = &qword_1E9F80008;
          }
          goto LABEL_17;
        }
      }
      if (v3) {
        int v11 = v7;
      }
      else {
        int v11 = &qword_1E9F80008;
      }
      if (v3) {
        long long v12 = v7 + 1;
      }
      else {
        long long v12 = &qword_1E9F80008;
      }
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        id v13 = operator new(0x30uLL);
        void v13[2] = *(_OWORD *)v2;
        *(void *)id v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = v11;
        uint64_t *v12 = (uint64_t)v13;
        if (*(void *)VPStrategyManager::StateAsString(unsigned long long)::stateNames)
        {
          VPStrategyManager::StateAsString(unsigned long long)::stateNames = *(void *)VPStrategyManager::StateAsString(unsigned long long)::stateNames;
          id v13 = (_OWORD *)*v12;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E9F80008, (uint64_t *)v13);
        ++qword_1E9F80010;
      }
      v2 += 2;
      if (v2 == v4) {
        return result;
      }
      char v5 = (uint64_t *)VPStrategyManager::StateAsString(unsigned long long)::stateNames;
      uint64_t v3 = qword_1E9F80008;
    }
  }
  return result;
}

void sub_1BB6F0628(_Unwind_Exception *a1)
{
}

uint64_t std::map<unsigned long long,char const*>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void *VPStrategyManager::DumpState(void *this, __sFILE *a2)
{
  uint64_t v2 = (atomic_uint *)(this[25] + 324);
  atomic_fetch_add(v2, 1u);
  if (a2)
  {
    this = *(void **)(this[25] + 224);
    if (this) {
      this = (void *)(*(uint64_t (**)(void *))(*this + 120))(this);
    }
  }
  atomic_fetch_add(v2, 0xFFFFFFFF);
  return this;
}

void sub_1BB6F06D4(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 324), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

NSObject *VPStrategyManager::GetVersion(VPStrategyManager *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (char *)this + 200;
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v6, *((void *)this + 25) + 320, 0);
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112))(v2);
  }
  else
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      uint64_t result = *(id *)VPStrategyMgrScope(void)::scope;
      uint64_t v4 = result;
      if (!result) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v8 = "vpStrategyManager.mm";
      __int16 v9 = 1024;
      int v10 = 466;
      _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Actually the VoiceProcessorInterface* owned by VPStrategyManager the is a nullptr, so we can only report that this VP's version is 0!", buf, 0x12u);
    }

    uint64_t result = 0;
  }
LABEL_12:
  atomic_fetch_add((atomic_uint *volatile)(v6 + 4), 0xFFFFFFFF);
  return result;
}

void sub_1BB6F0848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t VPStrategyManager::GetMaxOutputPacketInfo(unint64_t **this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = a3;
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v11 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v11)
      {
        long long v12 = v11;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          int v16 = "vpStrategyManager.mm";
          __int16 v17 = 1024;
          int v18 = 383;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  return VPStrategyManager::RedirectWrapper_Initializing<AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &,AudioStreamBasicDescription &,AudioChannelLayout *&,unsigned int &,unsigned int &,unsigned int &>(this, (uint64_t (*)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))VoiceProcessorInterface::GetMaxOutputPacketInfo, 0, (uint64_t)a2, &v14, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
}

uint64_t VPStrategyManager::RedirectWrapper_Initializing<AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &,AudioStreamBasicDescription &,AudioChannelLayout *&,unsigned int &,unsigned int &,unsigned int &>(unint64_t **this, uint64_t (*a2)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      int v16 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v16)
      {
        __int16 v17 = v16;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)char v20 = 136315394;
          *(void *)&v20[4] = "vpStrategyManager.h";
          __int16 v21 = 1024;
          int v22 = 130;
          _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v20, 0x12u);
        }
      }
    }
  }
  VPStrategyManager::CheckRequiredState(this, 4);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)v20, (uint64_t)(this[25] + 40), 0);
  if (VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28]))
  {
    int v18 = (void *)(this[25][28] + (a3 >> 1));
    if (a3) {
      a2 = *(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*v18 + a2);
    }
    uint64_t result = a2(v18, a4, *a5, a6, a7, a8);
  }
  else
  {
    uint64_t result = 2;
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)v20 + 4), 0xFFFFFFFF);
  return result;
}

void sub_1BB6F0B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t VoiceProcessorInterface::GetMaxOutputPacketInfo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t VPStrategyManager::SetMode(VPStrategyManager *this, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v4 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v4)
      {
        id v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          int v7 = 136315394;
          int v8 = "vpStrategyManager.mm";
          __int16 v9 = 1024;
          int v10 = 452;
          _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v7, 0x12u);
        }
      }
    }
  }
  int v7 = a2;
  return VPStrategyManager::SetProperty(this, 32787, (const void **)&v7, 4uLL);
}

uint64_t VPStrategyManager::SetProperty(VPStrategyManager *this, uint64_t a2, const void **a3, size_t a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      int v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        __int16 v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 500;
          _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v10 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v10) {
      goto LABEL_18;
    }
  }
  else
  {
    int v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 502;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (a3 && a4)
  {
    uint64_t v12 = *((void *)this + 25);
    uint64_t v13 = *(void *)(v12 + 120);
    uint64_t v62 = v12 + 120;
    char v63 = (*(uint64_t (**)(void))(v13 + 16))();
    uint64_t v14 = *((void *)this + 25);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 208), 1u);
    while (*(_DWORD *)(v14 + 212))
      usleep(0x1F4u);
    CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v61, *((void *)this + 25) + 320, 0);
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 14);
    uint64_t v17 = *((void *)this + 25);
    uint64_t v60 = *(void *)(v17 + 224);
    if (!v60)
    {
      unsigned int v20 = 0;
      goto LABEL_44;
    }
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      int v18 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v18)
      {
LABEL_43:
        unsigned int v20 = (*(uint64_t (**)(void, uint64_t, const void **, size_t))(**(void **)(*((void *)this + 25)
                                                                                              + 224)
                                                                                + 56))(*(void *)(*((void *)this + 25) + 224), a2, a3, a4);
        uint64_t v17 = *((void *)this + 25);
LABEL_44:
        char v22 = v60 != 0;
        uint64_t v23 = (int64x2_t *)(v17 + 96);
        __int16 v24 = std::remove_if[abi:ne180100]<std::__wrap_iter<VPPropertyQueue::QueueEntry *>,VPPropertyQueue::DoErase::{lambda(std::__wrap_iter<VPPropertyQueue::QueueEntry *> &)#1}>(*(VPPropertyItem **)(v17 + 96), *(VPPropertyItem **)(v17 + 104), a2);
        long long v57 = *(VPPropertyItem **)(v17 + 104);
        std::vector<VPPropertyQueue::QueueEntry>::erase(v17 + 96, v24, v57);
        *(_DWORD *)AudioTimeStamp buf = a2;
        uint8_t buf[4] = 0;
        memset(&buf[8], 0, 32);
        unsigned int v59 = v20;
        if ((a2 - 32783) > 1)
        {
          if (a2 != 32798)
          {
            *(_OWORD *)&v64.__r_.__value_.__r.__words[1] = 0uLL;
            v64.__r_.__value_.__r.__words[0] = a2;
            AUPropertyItem::SetData((AUPropertyItem *)&v64, a4, a3);
            long long v36 = (void *)v64.__r_.__value_.__r.__words[2];
            *(void *)&uint8_t buf[8] = v64.__r_.__value_.__r.__words[0];
            *(_DWORD *)&buf[16] = v64.__r_.__value_.__r.__words[1];
            AUPropertyItem::SetData((AUPropertyItem *)&buf[8], HIDWORD(v64.__r_.__value_.__r.__words[1]), (const void *)v64.__r_.__value_.__r.__words[2]);
            if (v36) {
              free(v36);
            }
LABEL_49:
            buf[40] = v60 != 0;
            unint64_t v25 = *(void *)(v17 + 112);
            unint64_t v26 = *(void *)(v17 + 104);
            long long v58 = v24;
            if (v26 >= v25)
            {
              unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - v23->i64[0]) >> 4);
              if (v31 + 1 > 0x555555555555555) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v23->i64[0]) >> 4);
              uint64_t v33 = 2 * v32;
              if (2 * v32 <= v31 + 1) {
                uint64_t v33 = v31 + 1;
              }
              if (v32 >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v34 = 0x555555555555555;
              }
              else {
                unint64_t v34 = v33;
              }
              uint64_t v66 = v17 + 112;
              if (v34)
              {
                if (v34 > 0x555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v35 = operator new(48 * v34);
              }
              else
              {
                uint64_t v35 = 0;
              }
              std::string::size_type v37 = (std::string::size_type)&v35[48 * v31];
              v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
              v64.__r_.__value_.__l.__size_ = v37;
              v64.__r_.__value_.__r.__words[2] = v37;
              long long v65 = &v35[48 * v34];
              *(_DWORD *)std::string::size_type v37 = *(_DWORD *)buf;
              *(unsigned char *)(v37 + 4) = buf[4];
              *(_DWORD *)(v37 + 20) = 0;
              *(void *)(v37 + 24) = 0;
              std::string::size_type size = buf;
              if ((unsigned char *)v37 == buf)
              {
                long long v42 = buf;
              }
              else
              {
                int v40 = *(_DWORD *)&buf[16];
                size_t v39 = *(unsigned int *)&buf[20];
                long long v41 = *(const void **)&buf[24];
                *(void *)(v37 + 8) = *(void *)&buf[8];
                *(_DWORD *)(v37 + 16) = v40;
                AUPropertyItem::SetData((AUPropertyItem *)(v37 + 8), v39, v41);
                char v22 = buf[40];
                long long v42 = (unsigned char *)v64.__r_.__value_.__r.__words[2];
                std::string::size_type size = (unsigned char *)v64.__r_.__value_.__l.__size_;
              }
              uint64_t v30 = v42 + 48;
              *(void *)(v37 + 32) = *(void *)&buf[32];
              *(void *)&buf[32] = 0;
              v35[48 * v31 + 40] = v22;
              v64.__r_.__value_.__r.__words[2] = (std::string::size_type)(v42 + 48);
              uint64_t v44 = *(void *)(v17 + 96);
              unint64_t v43 = *(void *)(v17 + 104);
              if (v43 == v44)
              {
                int64x2_t v47 = vdupq_n_s64(v43);
              }
              else
              {
                uint64_t v45 = 0;
                do
                {
                  long long v46 = &size[v45];
                  *(_DWORD *)&size[v45 - 48] = *(_DWORD *)(v43 + v45 - 48);
                  *(v46 - 44) = 0;
                  *(_OWORD *)&size[v45 - 40] = 0u;
                  *(_OWORD *)(v46 - 24) = 0u;
                  VPPropertyItem::operator=((VPPropertyItem *)&size[v45 - 48], v43 + v45 - 48);
                  *(v46 - 8) = *(unsigned char *)(v43 + v45 - 8);
                  v45 -= 48;
                }
                while (v43 + v45 != v44);
                size += v45;
                int64x2_t v47 = *v23;
                uint64_t v30 = (unsigned char *)v64.__r_.__value_.__r.__words[2];
              }
              *(void *)(v17 + 96) = size;
              *(void *)(v17 + 104) = v30;
              *(int64x2_t *)&v64.__r_.__value_.__r.__words[1] = v47;
              unsigned int v48 = *(char **)(v17 + 112);
              *(void *)(v17 + 112) = v65;
              long long v65 = v48;
              v64.__r_.__value_.__r.__words[0] = v47.i64[0];
              std::__split_buffer<VPPropertyQueue::QueueEntry>::~__split_buffer((uint64_t)&v64);
            }
            else
            {
              *(_DWORD *)unint64_t v26 = *(_DWORD *)buf;
              *(unsigned char *)(v26 + 4) = buf[4];
              *(_DWORD *)(v26 + 20) = 0;
              *(void *)(v26 + 24) = 0;
              if ((unsigned char *)v26 != buf)
              {
                int v28 = *(_DWORD *)&buf[16];
                size_t v27 = *(unsigned int *)&buf[20];
                __int16 v29 = *(const void **)&buf[24];
                *(void *)(v26 + 8) = *(void *)&buf[8];
                *(_DWORD *)(v26 + 16) = v28;
                AUPropertyItem::SetData((AUPropertyItem *)(v26 + 8), v27, v29);
                char v22 = buf[40];
              }
              *(void *)(v26 + 32) = *(void *)&buf[32];
              *(void *)&buf[32] = 0;
              *(unsigned char *)(v26 + 40) = v22;
              uint64_t v30 = (unsigned char *)(v26 + 48);
              *(void *)(v17 + 104) = v26 + 48;
            }
            *(void *)(v17 + 104) = v30;
            VPPropertyItem::~VPPropertyItem((VPPropertyItem *)buf);
            if (VPStrategyMgrScope(void)::once != -1) {
              dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
            }
            uint64_t v15 = v59;
            if (VPStrategyMgrScope(void)::scope)
            {
              id v49 = *(id *)VPStrategyMgrScope(void)::scope;
              if (!v49)
              {
LABEL_95:
                atomic_fetch_add((atomic_uint *volatile)(v61 + 4), 0xFFFFFFFF);
                atomic_fetch_add((atomic_uint *volatile)(v14 + 208), 0xFFFFFFFF);
                CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v62);
                return v15;
              }
            }
            else
            {
              id v49 = (id)MEMORY[0x1E4F14500];
              id v50 = MEMORY[0x1E4F14500];
            }
            unsigned int v51 = v49;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
            {
              if (v57 == v58) {
                unsigned int v52 = "added";
              }
              else {
                unsigned int v52 = "replaced";
              }
              int v53 = bswap32(a2);
              *(_DWORD *)&buf[1] = v53;
              if (((char)v53 - 32) > 0x5E
                || (((__int16)v53 >> 8) - 32) > 0x5E
                || ((v53 << 8 >> 24) - 32) > 0x5E
                || ((v53 >> 24) - 32) > 0x5E)
              {
                std::to_string(&v64, a2);
              }
              else
              {
                strcpy(&buf[5], "'");
                buf[0] = 39;
                std::string::basic_string[abi:ne180100]<0>(&v64, buf);
              }
              uint64_t v54 = &v64;
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v54 = (std::string *)v64.__r_.__value_.__r.__words[0];
              }
              uint64_t v55 = (uint64_t)(*(void *)(v17 + 104) - *(void *)(v17 + 96)) >> 4;
              *(_DWORD *)AudioTimeStamp buf = 136316674;
              *(void *)&uint8_t buf[4] = "vpPropertyQueue.h";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 22;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v52;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = a2;
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = v54;
              __int16 v68 = 1024;
              BOOL v69 = v60 != 0;
              __int16 v70 = 2048;
              unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * v55;
              _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s property 0x%x %s, setOnVP=%d (size=%lu)", buf, 0x3Cu);
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v64.__r_.__value_.__l.__data_);
              }
            }

            goto LABEL_95;
          }
          uint8_t buf[4] = 1;
        }
        else
        {
          uint8_t buf[4] = 1;
          a3 = (const void **)*a3;
        }
        VPPropertyItem::SetCFDictionary((VPPropertyItem *)buf, (CFDictionaryRef)a3);
        goto LABEL_49;
      }
    }
    else
    {
      int v18 = MEMORY[0x1E4F14500];
      id v21 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 512;
      _os_log_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d set on vp", buf, 0x12u);
    }

    goto LABEL_43;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  uint64_t v15 = 1651532146;
  if (VPStrategyMgrScope(void)::scope)
  {
    int v16 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v16) {
      return v15;
    }
  }
  else
  {
    int v16 = MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 519;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = a3;
    *(_WORD *)&unsigned char buf[28] = 1024;
    *(_DWORD *)&buf[30] = a4;
    _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d bad prop CFDataRef data = %p, size = %u", buf, 0x22u);
  }

  return v15;
}

void sub_1BB6F1618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (v26) {
    free(v26);
  }
  if (a26)
  {
    free(a26);
    a26 = 0;
  }
  *size_t v27 = 0;
  v27[1] = 0;
  atomic_fetch_add((atomic_uint *volatile)(a15 + 4), 0xFFFFFFFF);
  atomic_fetch_add((atomic_uint *volatile)(v28 + 208), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a16);
  _Unwind_Resume(a1);
}

VPPropertyItem *std::remove_if[abi:ne180100]<std::__wrap_iter<VPPropertyQueue::QueueEntry *>,VPPropertyQueue::DoErase(unsigned int)::{lambda(std::__wrap_iter<VPPropertyQueue::QueueEntry *> &)#1}>(VPPropertyItem *result, VPPropertyItem *this, int a3)
{
  if (result == this) {
    return this;
  }
  while (*(_DWORD *)result != a3)
  {
    uint64_t result = (VPPropertyItem *)((char *)result + 48);
    if (result == this) {
      return this;
    }
  }
  if (result != this)
  {
    for (unsigned int i = (VPPropertyItem *)((char *)result + 48); i != this; unsigned int i = (VPPropertyItem *)((char *)i + 48))
    {
      if (*(_DWORD *)i != a3)
      {
        uint64_t v6 = VPPropertyItem::operator=(result, (uint64_t)i);
        *((unsigned char *)v6 + 40) = *((unsigned char *)i + 40);
        uint64_t result = (VPPropertyItem *)((char *)v6 + 48);
      }
    }
  }
  return result;
}

void std::vector<VPPropertyQueue::QueueEntry>::erase(uint64_t a1, VPPropertyItem *this, VPPropertyItem *a3)
{
  if (this != a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = this;
    uint64_t v6 = *(VPPropertyItem **)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 16 * ((a3 - this) >> 4);
      do
      {
        VPPropertyItem::operator=(v4, (uint64_t)v4 + v7);
        *((unsigned char *)v4 + 40) = *((unsigned char *)v4 + v7 + 40);
        uint64_t v4 = (VPPropertyItem *)((char *)v4 + 48);
      }
      while ((VPPropertyItem *)((char *)v4 + v7) != v6);
      uint64_t v3 = *(VPPropertyItem **)(a1 + 8);
    }
    while (v3 != v4)
    {
      uint64_t v3 = (VPPropertyItem *)((char *)v3 - 48);
      VPPropertyItem::~VPPropertyItem(v3);
    }
    *(void *)(a1 + 8) = v4;
  }
}

void VPPropertyItem::~VPPropertyItem(VPPropertyItem *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2)
  {
    CFRelease(v2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *((void *)this + 4);
      int v5 = 136315650;
      uint64_t v6 = "vpPropertyItem.h";
      __int16 v7 = 1024;
      int v8 = 51;
      __int16 v9 = 2048;
      uint64_t v10 = v3;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%25s:%-5d released %p", (uint8_t *)&v5, 0x1Cu);
    }
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    free(v4);
    *((void *)this + 3) = 0;
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

void sub_1BB6F1934(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__split_buffer<VPPropertyQueue::QueueEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    VPPropertyItem::~VPPropertyItem((VPPropertyItem *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

VPPropertyItem *VPPropertyItem::operator=(VPPropertyItem *this, uint64_t a2)
{
  if (this != (VPPropertyItem *)a2)
  {
    *(_DWORD *)this = *(_DWORD *)a2;
    *((unsigned char *)this + 4) = *(unsigned char *)(a2 + 4);
    VPPropertyItem::SetCFDictionary(this, *(CFDictionaryRef *)(a2 + 32));
    int v5 = *(_DWORD *)(a2 + 16);
    size_t v4 = *(unsigned int *)(a2 + 20);
    uint64_t v6 = *(const void **)(a2 + 24);
    *((void *)this + 1) = *(void *)(a2 + 8);
    *((_DWORD *)this + 4) = v5;
    AUPropertyItem::SetData((VPPropertyItem *)((char *)this + 8), v4, v6);
  }
  return this;
}

void VPPropertyItem::SetCFDictionary(VPPropertyItem *this, CFDictionaryRef theDict)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  size_t v4 = (const void *)*((void *)this + 4);
  if (v4)
  {
    CFRelease(v4);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      CFDictionaryRef v5 = (const __CFDictionary *)*((void *)this + 4);
      int v7 = 136315650;
      int v8 = "vpPropertyItem.h";
      __int16 v9 = 1024;
      int v10 = 101;
      __int16 v11 = 2048;
      CFDictionaryRef v12 = v5;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%25s:%-5d released %p", (uint8_t *)&v7, 0x1Cu);
    }
  }
  *((void *)this + 4) = 0;
  if (theDict)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theDict);
    *((void *)this + 4) = Copy;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315650;
      int v8 = "vpPropertyItem.h";
      __int16 v9 = 1024;
      int v10 = 106;
      __int16 v11 = 2048;
      CFDictionaryRef v12 = Copy;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "%25s:%-5d copied %p", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

uint64_t VPStrategyManager::SetDownLinkVolume(VPStrategyManager *this, float a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      size_t v4 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v4)
      {
        CFDictionaryRef v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          uint64_t v23 = "vpStrategyManager.mm";
          __int16 v24 = 1024;
          int v25 = 416;
          _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  atomic_store(LODWORD(a2), (unsigned int *)(*((void *)this + 25) + 216));
  uint64_t v6 = *((void *)this + 25);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v20 = v6 + 8;
  __int16 v21 = 0;
  int v8 = (*(uint64_t (**)(void))(v7 + 32))();
  HIBYTE(v21) = v8;
  if (v8)
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      __int16 v9 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v9)
      {
LABEL_24:
        VPStrategyManager::VPSMImplementation::CommitVolumeIfInRunningState(*((atomic_ullong **)this + 25));
        goto LABEL_37;
      }
    }
    else
    {
      __int16 v9 = MEMORY[0x1E4F14500];
      id v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v23 = "vpStrategyManager.mm";
      __int16 v24 = 1024;
      int v25 = 422;
      _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d state lock acquired without contention", buf, 0x12u);
    }

    goto LABEL_24;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (!VPStrategyMgrScope(void)::scope)
  {
    int v10 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
    goto LABEL_26;
  }
  int v10 = *(id *)VPStrategyMgrScope(void)::scope;
  if (v10)
  {
LABEL_26:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v23 = "vpStrategyManager.mm";
      __int16 v24 = 1024;
      int v25 = 426;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d state lock not acquired; deferring", buf, 0x12u);
    }
  }
  uint64_t v14 = *((void *)this + 25);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = dispatch_get_global_queue(0, 0);
  int v16 = v15;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3321888768;
  v18[2] = ___ZN17VPStrategyManager17SetDownLinkVolumeEf_block_invoke;
  v18[3] = &__block_descriptor_48_ea8_32c64_ZTSNSt3__18weak_ptrIN17VPStrategyManager18VPSMImplementationEEE_e5_v8__0l;
  v18[4] = v14;
  id v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v15, v18);

  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_37:
  CADeprecated::CAMutex::Tryer::~Tryer((CADeprecated::CAMutex::Tryer *)&v20);
  return 0;
}

void sub_1BB6F1ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CADeprecated::CAMutex::Tryer::~Tryer((CADeprecated::CAMutex::Tryer *)va);
  _Unwind_Resume(a1);
}

void CADeprecated::CAMutex::Tryer::~Tryer(CADeprecated::CAMutex::Tryer *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void VPStrategyManager::VPSMImplementation::CommitVolumeIfInRunningState(atomic_ullong *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        uint64_t v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          uint64_t v14 = "vpStrategyManager.mm";
          __int16 v15 = 1024;
          int v16 = 400;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  size_t v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)atomic_load_explicit(this + 3, memory_order_acquire)))
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      CFDictionaryRef v5 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v5) {
        goto LABEL_19;
      }
    }
    else
    {
      CFDictionaryRef v5 = MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v14 = "vpStrategyManager.mm";
      __int16 v15 = 1024;
      int v16 = 401;
      _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d stateMutex must be held!", buf, 0x12u);
    }
  }
LABEL_19:
  uint64_t v7 = atomic_load((unint64_t *)this);
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      id v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        __int16 v9 = v8;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          VPStrategyManager::StateAsString((VPStrategyManager *)__p, v7);
          int v10 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v14 = "vpStrategyManager.mm";
          __int16 v15 = 1024;
          int v16 = 403;
          __int16 v17 = 2080;
          int v18 = v10;
          _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d state = %s", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  if (v7 == 8) {
    VPStrategyManager::VPSMImplementation::CommitVolume((VPStrategyManager::VPSMImplementation *)this);
  }
}

void sub_1BB6F2208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN17VPStrategyManager17SetDownLinkVolumeEf_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = *(atomic_ullong **)(a1 + 32);
      if (v4)
      {
        if (VPStrategyMgrScope(void)::once != -1) {
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
        }
        if (VPStrategyMgrScope(void)::scope)
        {
          CFDictionaryRef v5 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v5) {
            goto LABEL_25;
          }
        }
        else
        {
          CFDictionaryRef v5 = MEMORY[0x1E4F14500];
          id v8 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          __int16 v15 = "vpStrategyManager.mm";
          __int16 v16 = 1024;
          int v17 = 431;
          _os_log_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d waiting for locks asynchronously", buf, 0x12u);
        }

LABEL_25:
        atomic_ullong v9 = v4[1];
        char v12 = v4 + 1;
        char v13 = (*(uint64_t (**)(atomic_ullong *))(v9 + 16))(v4 + 1);
        if (VPStrategyMgrScope(void)::once != -1) {
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
        }
        if (VPStrategyMgrScope(void)::scope)
        {
          int v10 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v10)
          {
LABEL_34:
            VPStrategyManager::VPSMImplementation::CommitVolumeIfInRunningState(v4);
            CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v12);
            goto LABEL_35;
          }
        }
        else
        {
          int v10 = MEMORY[0x1E4F14500];
          id v11 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          __int16 v15 = "vpStrategyManager.mm";
          __int16 v16 = 1024;
          int v17 = 433;
          _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d locks acquired", buf, 0x12u);
        }

        goto LABEL_34;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    id v6 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v6) {
      goto LABEL_19;
    }
  }
  else
  {
    id v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    __int16 v15 = "vpStrategyManager.mm";
    __int16 v16 = 1024;
    int v17 = 437;
    _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_INFO, "%25s:%-5d vpsm already destroyed", buf, 0x12u);
  }

LABEL_19:
  if (v3) {
LABEL_35:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BB6F250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c64_ZTSNSt3__18weak_ptrIN17VPStrategyManager18VPSMImplementationEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c64_ZTSNSt3__18weak_ptrIN17VPStrategyManager18VPSMImplementationEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void VPStrategyManager::VPSMImplementation::CommitVolume(VPStrategyManager::VPSMImplementation *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        uint64_t v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          int v15 = 136315394;
          __int16 v16 = "vpStrategyManager.h";
          __int16 v17 = 1024;
          int v18 = 184;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v15, 0x12u);
        }
      }
    }
  }
  if (!*((void *)this + 28))
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      id v7 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v7) {
        return;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v12 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    int v15 = 136315394;
    __int16 v16 = "vpStrategyManager.h";
    __int16 v17 = 1024;
    int v18 = 196;
    atomic_ullong v9 = "%25s:%-5d vp is nullptr";
    int v10 = v7;
    os_log_type_t v11 = OS_LOG_TYPE_ERROR;
    goto LABEL_32;
  }
  float v4 = COERCE_FLOAT(atomic_load((unsigned int *)this + 54));
  if (v4 != -1.0)
  {
    int v5 = (*(uint64_t (**)(void, float))(**((void **)this + 28) + 88))(*((void *)this + 28), v4);
    if (!v5) {
      return;
    }
    int v6 = v5;
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      id v7 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v7) {
        return;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315906;
      __int16 v16 = "vpStrategyManager.h";
      __int16 v17 = 1024;
      int v18 = 189;
      __int16 v19 = 1024;
      int v20 = v6;
      __int16 v21 = 2080;
      char v22 = "CommitVolume";
      atomic_ullong v9 = "%25s:%-5d Error code %i reported at %s";
      int v10 = v7;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v13 = 34;
      goto LABEL_36;
    }
LABEL_37:

    return;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      id v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        id v7 = v8;
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_37;
        }
        int v15 = 136315394;
        __int16 v16 = "vpStrategyManager.h";
        __int16 v17 = 1024;
        int v18 = 192;
        atomic_ullong v9 = "%25s:%-5d no volume to set now";
        int v10 = v7;
        os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
LABEL_32:
        uint32_t v13 = 18;
LABEL_36:
        _os_log_impl(&dword_1BB0CE000, v10, v11, v9, (uint8_t *)&v15, v13);
        goto LABEL_37;
      }
    }
  }
}

uint64_t VPStrategyManager::AppendSpeakerTelemetryData(VPStrategyManager *this, const AudioBufferList *a2, uint64_t a3, const AudioTimeStamp *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)this + 25);
  atomic_fetch_add((atomic_uint *volatile)(v8 + 324), 1u);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((void *)this + 25) + 224)) && !*(_DWORD *)(v8 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    uint64_t v9 = (*(uint64_t (**)(void, const AudioBufferList *, uint64_t, const AudioTimeStamp *))(**(void **)(*((void *)this + 25) + 224) + 80))(*(void *)(*((void *)this + 25) + 224), a2, a3, a4);
    atomic_fetch_add((atomic_uint *volatile)(v8 + 324), 0xFFFFFFFF);
    if (!v9) {
      return v9;
    }
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 324), 0xFFFFFFFF);
    uint64_t v9 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v10 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v10) {
      return v9;
    }
  }
  else
  {
    int v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v13 = 136315906;
    id v14 = "vpStrategyManager.mm";
    __int16 v15 = 1024;
    int v16 = 557;
    __int16 v17 = 1024;
    int v18 = v9;
    __int16 v19 = 2080;
    int v20 = "AppendSpeakerTelemetryData";
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", (uint8_t *)&v13, 0x22u);
  }

  return v9;
}

void sub_1BB6F2A9C(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::ProcessDownlinkAudio(VPStrategyManager *this, AudioBufferList *a2, AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, uint64_t a6, const AudioTimeStamp *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  uint64_t v14 = *((void *)this + 25);
  atomic_fetch_add((atomic_uint *volatile)(v14 + 324), 1u);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((void *)this + 25) + 224)) && !*(_DWORD *)(v14 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    uint64_t v15 = (*(uint64_t (**)(void, AudioBufferList *, AudioBufferList *, AudioBufferList *, AudioBufferList *, uint64_t, const AudioTimeStamp *))(**(void **)(*((void *)this + 25) + 224) + 72))(*(void *)(*((void *)this + 25) + 224), a2, a3, a4, a5, a6, a7);
    atomic_fetch_add((atomic_uint *volatile)(v14 + 324), 0xFFFFFFFF);
    if (!v15) {
      goto LABEL_13;
    }
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 324), 0xFFFFFFFF);
    uint64_t v15 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v16 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v16) {
      goto LABEL_13;
    }
  }
  else
  {
    int v16 = MEMORY[0x1E4F14500];
    id v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    int v19 = 136315906;
    int v20 = "vpStrategyManager.mm";
    __int16 v21 = 1024;
    int v22 = 550;
    __int16 v23 = 1024;
    int v24 = v15;
    __int16 v25 = 2080;
    uint64_t v26 = "ProcessDownlinkAudio";
    _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", (uint8_t *)&v19, 0x22u);
  }

LABEL_13:
  kdebug_trace();
  return v15;
}

void sub_1BB6F2CE4(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::Process(VPStrategyManager *this, const AudioBufferList *a2, const AudioTimeStamp *a3, AudioBufferList *a4, AudioTimeStamp *a5, unsigned int *a6, void *a7, unsigned int *a8, AudioStreamPacketDescription *a9)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  uint64_t v17 = *((void *)this + 25);
  atomic_fetch_add((atomic_uint *volatile)(v17 + 324), 1u);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((void *)this + 25) + 224)) && !*(_DWORD *)(v17 + 320))
  {
    VPStrategyManager::CheckRequiredState((unint64_t **)this, 8);
    uint64_t v18 = (*(uint64_t (**)(void, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, AudioTimeStamp *, unsigned int *, void *, unsigned int *, AudioStreamPacketDescription *))(**(void **)(*((void *)this + 25) + 224) + 64))(*(void *)(*((void *)this + 25) + 224), a2, a3, a4, a5, a6, a7, a8, a9);
    if (!v18) {
      goto LABEL_13;
    }
  }
  else
  {
    a4->mBuffers[0].unsigned int mDataByteSize = 0;
    *a6 = 0;
    uint64_t v18 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v19 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v19) {
      goto LABEL_13;
    }
  }
  else
  {
    int v19 = MEMORY[0x1E4F14500];
    id v20 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v23 = "vpStrategyManager.mm";
    __int16 v24 = 1024;
    int v25 = 542;
    __int16 v26 = 1024;
    int v27 = v18;
    __int16 v28 = 2080;
    __int16 v29 = "Process";
    _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_13:
  kdebug_trace();
  atomic_fetch_add((atomic_uint *volatile)(v17 + 324), 0xFFFFFFFF);
  return v18;
}

void sub_1BB6F2F3C(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::GetProperty(VPStrategyManager *this, uint64_t a2, void *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      int v10 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v10)
      {
        id v11 = v10;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          __int16 v22 = 1024;
          int v23 = 491;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v20, *((void *)this + 25) + 320, 0);
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    id v12 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v12) {
      goto LABEL_18;
    }
  }
  else
  {
    id v12 = MEMORY[0x1E4F14500];
    id v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v22 = 1024;
    int v23 = 493;
    __int16 v24 = 1024;
    int v25 = a2;
    _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting property with ID: %u", buf, 0x18u);
  }

LABEL_18:
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v14 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v14)
      {
        uint64_t v15 = v14;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.h";
          __int16 v22 = 1024;
          int v23 = 141;
          _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)buf, *((void *)this + 25) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*((void *)this + 25) + 224)))
  {
    uint64_t v16 = (*(uint64_t (**)(void, uint64_t, void *, uint64_t, unsigned int *))(**(void **)(*((void *)this + 25) + 224)
                                                                                      + 48))(*(void *)(*((void *)this + 25) + 224), a2, a3, a4, a5);
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    if (!v16) {
      goto LABEL_39;
    }
  }
  else
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
    uint64_t v16 = 2;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    uint64_t v17 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v17) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4F14500];
    id v18 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    __int16 v22 = 1024;
    int v23 = 495;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 2080;
    int v27 = "GetProperty";
    _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
  }

LABEL_39:
  atomic_fetch_add((atomic_uint *volatile)(v20 + 4), 0xFFFFFFFF);
  return v16;
}

void sub_1BB6F3340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t VPStrategyManager::InitializeSpeakerTelemetryInput(unint64_t **this, const AudioStreamBasicDescription *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      int v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v6)
      {
        id v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)id v11 = 136315394;
          *(void *)&v11[4] = "vpStrategyManager.mm";
          __int16 v12 = 1024;
          int v13 = 446;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v11, 0x12u);
        }
      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v8 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v8)
      {
        uint64_t v9 = v8;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)id v11 = 136315394;
          *(void *)&v11[4] = "vpStrategyManager.h";
          __int16 v12 = 1024;
          int v13 = 130;
          _os_log_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v11, 0x12u);
        }
      }
    }
  }
  VPStrategyManager::CheckRequiredState(this, 4);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)v11, (uint64_t)(this[25] + 40), 0);
  if (VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28])) {
    uint64_t result = (*(uint64_t (**)(unint64_t, const AudioStreamBasicDescription *, uint64_t))(*(void *)this[25][28] + 40))(this[25][28], a2, a3);
  }
  else {
    uint64_t result = 2;
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)v11 + 4), 0xFFFFFFFF);
  return result;
}

void sub_1BB6F35A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t VPStrategyManager::InitializeDownlinkProcessing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v9 = a5;
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      int v10 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v10)
      {
        id v11 = v10;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          __int16 v18 = 1024;
          int v19 = 388;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      __int16 v12 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v12)
      {
        int v13 = v12;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.h";
          __int16 v18 = 1024;
          int v19 = 130;
          _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  VPStrategyManager::CheckRequiredState((unint64_t **)a1, 4);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer((uint64_t *)buf, *(void *)(a1 + 200) + 320, 0);
  if (VPStrategyManager::CheckHasVP(*(VPStrategyManager **)(*(void *)(a1 + 200) + 224))) {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, id))(**(void **)(*(void *)(a1 + 200) + 224)
  }
                                                                           + 32))(*(void *)(*(void *)(a1 + 200) + 224), a2, a3, a4, v9);
  else {
    uint64_t v14 = 2;
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)buf + 4), 0xFFFFFFFF);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = ___ZN17VPStrategyManager28InitializeDownlinkProcessingERK27AudioStreamBasicDescriptionjS2_U13block_pointerFiP15AudioBufferListP14AudioTimeStampPjE_block_invoke;
  v16[3] = &__block_descriptor_40_e5_v8__0l;
  v16[4] = a1;
  VPStrategyManager::SetState(a1, 8uLL, v16);

  return v14;
}

void sub_1BB6F3870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  atomic_fetch_add((atomic_uint *volatile)(a15 + 4), 0xFFFFFFFF);

  _Unwind_Resume(a1);
}

void ___ZN17VPStrategyManager28InitializeDownlinkProcessingERK27AudioStreamBasicDescriptionjS2_U13block_pointerFiP15AudioBufferListP14AudioTimeStampPjE_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    uint64_t v2 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    int v5 = "vpStrategyManager.mm";
    __int16 v6 = 1024;
    int v7 = 392;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d updating volume", (uint8_t *)&v4, 0x12u);
  }

LABEL_10:
  VPStrategyManager::VPSMImplementation::CommitVolume(*(VPStrategyManager::VPSMImplementation **)(v1 + 200));
}

void VPStrategyManager::SetState(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      __int16 v6 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v6)
      {
        int v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          __int16 v18 = "vpStrategyManager.h";
          __int16 v19 = 1024;
          int v20 = 169;
          _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 200);
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v15 = v8 + 8;
  char v16 = (*(uint64_t (**)(void))(v9 + 16))();
  v5[2](v5);
  atomic_store(a2, *(unint64_t **)(a1 + 200));
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      id v10 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v10)
      {
        id v11 = v10;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          VPStrategyManager::StateAsString((VPStrategyManager *)__p, a2);
          if (v14 >= 0) {
            __int16 v12 = __p;
          }
          else {
            __int16 v12 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          __int16 v18 = "vpStrategyManager.h";
          __int16 v19 = 1024;
          int v20 = 173;
          __int16 v21 = 2080;
          __int16 v22 = v12;
          _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v15);
}

void sub_1BB6F3C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

uint64_t VPStrategyManager::InitializeOutput(unint64_t **this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  char v14 = a3;
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      id v11 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v11)
      {
        __int16 v12 = v11;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          char v16 = "vpStrategyManager.mm";
          __int16 v17 = 1024;
          int v18 = 378;
          _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  return VPStrategyManager::RedirectWrapper_Initializing<AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &,AudioStreamBasicDescription &,AudioChannelLayout *&,unsigned int &,unsigned int &,unsigned int &>(this, (uint64_t (*)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))VoiceProcessorInterface::InitializeOutput, 0, (uint64_t)a2, &v14, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
}

uint64_t VoiceProcessorInterface::InitializeOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t VPStrategyManager::InitializeHWInput(unint64_t **this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, unsigned int a4, AudioObjectID a5, unsigned int a6, unsigned int *a7, const AudioStreamBasicDescription *a8, const AudioChannelLayout *a9, uint64_t a10, unsigned int a11, unsigned int *a12)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      int v13 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v13)
      {
        char v14 = v13;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 323;
          _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  VPStrategyManager::CheckRequiredState(this, 10);
  VPStrategyManager::SetState((uint64_t)this, 4uLL, &__block_literal_global_14);
  uint64_t v15 = this[25];
  unint64_t v16 = v15[15];
  uint64_t v147 = v15 + 15;
  LOBYTE(v148) = 0;
  LOBYTE(v148) = (*(uint64_t (**)(void))(v16 + 16))();
  __int16 v17 = this[25];
  atomic_fetch_add((atomic_uint *volatile)v17 + 52, 1u);
  while (*((_DWORD *)v17 + 53))
    usleep(0x1F4u);
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v19 = this[25];
    int v20 = VPStrategyManager::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::propertiesToClear[i];
    __int16 v21 = std::remove_if[abi:ne180100]<std::__wrap_iter<VPPropertyQueue::QueueEntry *>,VPPropertyQueue::DoErase::{lambda(std::__wrap_iter<VPPropertyQueue::QueueEntry *> &)#1}>((VPPropertyItem *)v19[12], (VPPropertyItem *)v19[13], v20);
    __int16 v22 = (VPPropertyItem *)v19[13];
    std::vector<VPPropertyQueue::QueueEntry>::erase((uint64_t)(v19 + 12), v21, v22);
    if (v22 == v21) {
      continue;
    }
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      id v23 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v23) {
        continue;
      }
    }
    else
    {
      __int16 v24 = (void *)MEMORY[0x1E4F14500];
      id v25 = MEMORY[0x1E4F14500];
      id v23 = v24;
    }
    __int16 v26 = v23;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      int v27 = bswap32(v20);
      *(_DWORD *)&buf[1] = v27;
      if (((char)v27 - 32) > 0x5E
        || (((__int16)v27 >> 8) - 32) > 0x5E
        || ((v27 << 8 >> 24) - 32) > 0x5E
        || ((v27 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v145, v20);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v145, buf);
      }
      uint64_t v28 = &v145;
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v28 = (std::string *)v145.__r_.__value_.__r.__words[0];
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[13] - v19[12]) >> 4);
      *(_DWORD *)AudioTimeStamp buf = 136316162;
      *(void *)&uint8_t buf[4] = "vpPropertyQueue.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 31;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v20;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = v28;
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v29;
      _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d removed property 0x%x %s (size=%lu)", buf, 0x2Cu);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v17 + 52, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v147);
  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v142, (uint64_t)(this[25] + 26), 0);
  unint64_t v30 = this[25][29];
  uint64_t v140 = (uint64_t)(this[25] + 29);
  char v141 = 0;
  char v141 = (*(uint64_t (**)(void))(v30 + 16))();
  unint64_t v31 = this[25];
  atomic_fetch_add((atomic_uint *volatile)v31 + 80, 1u);
  unint64_t v139 = v31;
  while (*((_DWORD *)v139 + 81))
    usleep(0x1F4u);
  unsigned int v32 = 0;
  if (a6 && a7) {
    unsigned int v32 = *a7;
  }
  unsigned int v33 = 0;
  if (a11 && a12) {
    unsigned int v33 = *a12;
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      unint64_t v34 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v34)
      {
        uint64_t v35 = v34;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 266;
          _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", buf, 0x12u);
        }
      }
    }
  }
  long long v36 = this[25];
  std::string::size_type v37 = pthread_self();
  if (!pthread_equal(v37, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)v36 + 31, memory_order_acquire)))
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      long long v38 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v38) {
        goto LABEL_59;
      }
    }
    else
    {
      long long v38 = MEMORY[0x1E4F14500];
      id v39 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 268;
      _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d vpLock must be held!", buf, 0x12u);
    }
  }
LABEL_59:
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    id v40 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v40) {
      goto LABEL_68;
    }
  }
  else
  {
    id v40 = (id)MEMORY[0x1E4F14500];
    id v41 = MEMORY[0x1E4F14500];
  }
  long long v42 = v40;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)&v145, v32);
    CAX4CCString::CAX4CCString((CAX4CCString *)&v147, v33);
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 270;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = &v145;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = &v147;
    _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d ref port type %s, mic port type %s", buf, 0x26u);
  }

LABEL_68:
  if (!*((unsigned char *)this + 220) || (VoiceProcessorVersiounint64_t n = *((unsigned int *)this + 54), !VoiceProcessorVersion)) {
    VoiceProcessorVersiounint64_t n = GetVoiceProcessorVersion((const vp::Context *)(this + 1), a5, v32, HIDWORD(a10), v33);
  }
  unint64_t v44 = this[25][28];
  if (v44)
  {
    unsigned int v45 = (*(uint64_t (**)(unint64_t))(*(void *)v44 + 112))(v44);
    if (v45 != VoiceProcessorVersion)
    {
      if (VPStrategyMgrScope(void)::once != -1) {
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
      }
      if (VPStrategyMgrScope(void)::scope)
      {
        long long v46 = *(id *)VPStrategyMgrScope(void)::scope;
        if (!v46) {
          goto LABEL_82;
        }
      }
      else
      {
        long long v46 = MEMORY[0x1E4F14500];
        id v47 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 291;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v45;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = VoiceProcessorVersion;
        _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_INFO, "%25s:%-5d Switching from VoiceProcessorV%u to VoiceProcessorV%u", buf, 0x1Eu);
      }

LABEL_82:
      unsigned int v48 = this[25];
      unint64_t v49 = v48[42];
      if (v49)
      {
        unint64_t v50 = v48[42];
        while (1)
        {
          while (1)
          {
            unsigned int v51 = (unint64_t *)v50;
            unsigned int v52 = *(_DWORD *)(v50 + 32);
            if (v45 >= v52) {
              break;
            }
            unint64_t v50 = *v51;
            int v53 = v51;
            if (!*v51) {
              goto LABEL_91;
            }
          }
          if (v52 >= v45) {
            break;
          }
          unint64_t v50 = v51[1];
          if (!v50)
          {
            int v53 = v51 + 1;
            goto LABEL_91;
          }
        }
      }
      else
      {
        int v53 = v48 + 42;
        unsigned int v51 = v48 + 42;
LABEL_91:
        uint64_t v54 = operator new(0x30uLL);
        v54[8] = v45;
        unint64_t v55 = v48[28];
        v48[28] = 0;
        *((void *)v54 + 5) = v55;
        *(void *)uint64_t v54 = 0;
        *((void *)v54 + 1) = 0;
        *((void *)v54 + 2) = v51;
        *int v53 = (unint64_t)v54;
        unint64_t v56 = *(void *)v48[41];
        if (v56)
        {
          v48[41] = v56;
          uint64_t v54 = (_DWORD *)*v53;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v48[42], (uint64_t *)v54);
        ++v48[43];
        unsigned int v48 = this[25];
        unint64_t v49 = v48[42];
      }
      if (v49)
      {
        long long v57 = v48 + 42;
        do
        {
          unsigned int v58 = *(_DWORD *)(v49 + 32);
          BOOL v59 = v58 >= VoiceProcessorVersion;
          if (v58 >= VoiceProcessorVersion) {
            uint64_t v60 = (unint64_t *)v49;
          }
          else {
            uint64_t v60 = (unint64_t *)(v49 + 8);
          }
          if (v59) {
            long long v57 = (unint64_t *)v49;
          }
          unint64_t v49 = *v60;
        }
        while (*v60);
        if (v57 != v48 + 42 && VoiceProcessorVersion >= *((_DWORD *)v57 + 8))
        {
          if (VPStrategyMgrScope(void)::once != -1) {
            dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
          }
          if (VPStrategyMgrScope(void)::scope)
          {
            uint64_t v61 = *(id *)VPStrategyMgrScope(void)::scope;
            if (!v61) {
              goto LABEL_114;
            }
          }
          else
          {
            uint64_t v61 = MEMORY[0x1E4F14500];
            id v62 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 295;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = VoiceProcessorVersion;
            _os_log_impl(&dword_1BB0CE000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a previously cached VoiceProcessorV%u!", buf, 0x18u);
          }

LABEL_114:
          char v63 = this[25];
          unint64_t v64 = v57[5];
          v57[5] = 0;
          unint64_t v65 = v63[28];
          v63[28] = v64;
          if (v65) {
            (*(void (**)(unint64_t))(*(void *)v65 + 8))(v65);
          }
          VPPropertyQueue::AssignIsSetOnVPStateForAllProperties((VPPropertyQueue *)(this[25] + 12), 0);
          uint64_t v66 = this[25];
          float v67 = (unint64_t *)v57[1];
          if (v67)
          {
            do
            {
              __int16 v68 = v67;
              float v67 = (unint64_t *)*v67;
            }
            while (v67);
          }
          else
          {
            BOOL v69 = v57;
            do
            {
              __int16 v68 = (unint64_t *)v69[2];
              BOOL v70 = *v68 == (void)v69;
              BOOL v69 = v68;
            }
            while (!v70);
          }
          if ((unint64_t *)v66[41] == v57) {
            v66[41] = (unint64_t)v68;
          }
          unint64_t v71 = (uint64_t *)v66[42];
          --v66[43];
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v71, (uint64_t *)v57);
          unint64_t v72 = v57[5];
          v57[5] = 0;
          if (v72) {
            (*(void (**)(unint64_t))(*(void *)v72 + 8))(v72);
          }
          operator delete(v57);
        }
      }
    }
    if (this[25][28])
    {
      int v135 = 0;
      goto LABEL_160;
    }
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    long long v73 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v73) {
      goto LABEL_138;
    }
  }
  else
  {
    long long v73 = MEMORY[0x1E4F14500];
    id v74 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 304;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = VoiceProcessorVersion;
    _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating a new VoiceProcessorV%u", buf, 0x18u);
  }

LABEL_138:
  vp::create((vp *)VoiceProcessorVersion, (vp::v3 *)(this + 1), buf);
  unint64_t v75 = this[25];
  unint64_t v76 = *(void *)buf;
  *(void *)AudioTimeStamp buf = 0;
  unint64_t v77 = v75[28];
  v75[28] = v76;
  if (v77)
  {
    (*(void (**)(unint64_t))(*(void *)v77 + 8))(v77);
    uint64_t v78 = *(void *)buf;
    *(void *)AudioTimeStamp buf = 0;
    if (v78) {
      (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
    }
  }
  VPPropertyQueue::AssignIsSetOnVPStateForAllProperties((VPPropertyQueue *)(this[25] + 12), 0);
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    uint64_t v79 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v79) {
      goto LABEL_150;
    }
  }
  else
  {
    uint64_t v79 = MEMORY[0x1E4F14500];
    id v80 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 307;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = VoiceProcessorVersion;
    _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created a new VoiceProcessorV%u", buf, 0x18u);
  }

LABEL_150:
  unint64_t v81 = this[25][28];
  int v135 = 2 * (v81 == 0);
  if (!v81)
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      UInt64 v82 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v82) {
        goto LABEL_160;
      }
    }
    else
    {
      UInt64 v82 = MEMORY[0x1E4F14500];
      id v83 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 354;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v135;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "InitializeHWInput";
      _os_log_impl(&dword_1BB0CE000, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
    }
  }
LABEL_160:
  long long v84 = this[25];
  unint64_t v85 = v84[12];
  unint64_t v86 = v84[13];
  if (v85 == v86)
  {
    long long v87 = 0;
    double v91 = 0;
  }
  else
  {
    long long v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    do
    {
      if (*(unsigned char *)(v85 + 40))
      {
        double v91 = v88;
      }
      else if (v90 >= v89)
      {
        uint64_t v92 = (v90 - v87) >> 3;
        unint64_t v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 61) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if ((v89 - v87) >> 2 > v93) {
          unint64_t v93 = (v89 - v87) >> 2;
        }
        if ((unint64_t)(v89 - v87) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v94 = v93;
        }
        if (v94)
        {
          if (v94 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v95 = (char *)operator new(8 * v94);
        }
        else
        {
          uint64_t v95 = 0;
        }
        double v96 = &v95[8 * v92];
        *(void *)double v96 = v85;
        double v91 = v96 + 8;
        while (v88 != v87)
        {
          uint64_t v97 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v96 - 1) = v97;
          v96 -= 8;
        }
        uint64_t v89 = &v95[8 * v94];
        if (v87) {
          operator delete(v87);
        }
        long long v87 = v96;
        uint64_t v90 = v91;
      }
      else
      {
        *(void *)uint64_t v90 = v85;
        v90 += 8;
        double v91 = v90;
      }
      v85 += 48;
      uint64_t v88 = v91;
    }
    while (v85 != v86);
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    uint64_t v98 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v98) {
      goto LABEL_194;
    }
  }
  else
  {
    uint64_t v98 = MEMORY[0x1E4F14500];
    id v99 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84[13] - v84[12]) >> 4);
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "vpPropertyQueue.h";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 55;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = (v91 - v87) >> 3;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(void *)&buf[30] = v100;
    _os_log_impl(&dword_1BB0CE000, v98, OS_LOG_TYPE_DEBUG, "%25s:%-5d got %lu unset properties (size=%lu)", buf, 0x26u);
  }

LABEL_194:
  if (v91 != v87)
  {
    uint64_t v101 = 0;
    unsigned int v102 = 1;
    do
    {
      uint64_t v103 = *(unsigned int **)&v87[8 * v101];
      {
        int v143 = 1953915762;
        std::vector<unsigned int>::vector[abi:ne180100](&v147, &v143, 1uLL);
        LODWORD(v145.__r_.__value_.__l.__data_) = 1;
        *(void *)unint64_t v146 = 0;
        *(_OWORD *)&v145.__r_.__value_.__r.__words[1] = 0uLL;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v145.__r_.__value_.__l.__size_, v147, (uint64_t)v148, (v148 - (unsigned char *)v147) >> 2);
        std::map<unsigned int,std::vector<unsigned int>>::map[abi:ne180100]((uint64_t *)&v145, 1);
        if (v145.__r_.__value_.__l.__size_)
        {
          v145.__r_.__value_.__r.__words[2] = v145.__r_.__value_.__l.__size_;
          operator delete((void *)v145.__r_.__value_.__l.__size_);
        }
        if (v147)
        {
          float v148 = v147;
          operator delete(v147);
        }
        __cxa_atexit((void (*)(void *))std::map<unsigned int,std::vector<unsigned int>>::~map[abi:ne180100], &VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersion, &dword_1BB0CE000);
      }
      *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&buf[16] = ___ZN17VPStrategyManager13DoSetPropertyEP14VPPropertyItem_block_invoke;
      *(void *)&unsigned char buf[24] = &__block_descriptor_40_e8_B12__0I8l;
      *(void *)&buf[32] = this;
      long long v104 = (unsigned int (**)(void *, void))_Block_copy(buf);
      if (VPStrategyMgrScope(void)::once != -1) {
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
      }
      if (VPStrategyMgrScope(void)::scope)
      {
        if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
        {
          int v105 = *(id *)VPStrategyMgrScope(void)::scope;
          if (v105)
          {
            unint64_t v106 = v105;
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(v145.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
              WORD2(v145.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[1] + 6) = 243;
              _os_log_impl(&dword_1BB0CE000, v106, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v145, 0x12u);
            }
          }
        }
      }
      if (!VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28])) {
        goto LABEL_254;
      }
      if (!v103)
      {
        if (VPStrategyMgrScope(void)::once != -1) {
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
        }
        if (VPStrategyMgrScope(void)::scope)
        {
          uint64_t v107 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v107) {
            goto LABEL_254;
          }
        }
        else
        {
          uint64_t v107 = MEMORY[0x1E4F14500];
          id v109 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v145.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
          WORD2(v145.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[1] + 6) = 260;
          unint64_t v110 = v107;
          os_log_type_t v111 = OS_LOG_TYPE_ERROR;
          uint64_t v112 = "%25s:%-5d null pointer for property!";
          uint32_t v113 = 18;
          goto LABEL_252;
        }
        goto LABEL_253;
      }
      if (v104[2](v104, *v103))
      {
        if (VPStrategyMgrScope(void)::once != -1) {
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
        }
        if (VPStrategyMgrScope(void)::scope)
        {
          uint64_t v107 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v107) {
            goto LABEL_254;
          }
        }
        else
        {
          uint64_t v107 = MEMORY[0x1E4F14500];
          id v114 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
        {
          int v115 = *v103;
          LODWORD(v145.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
          WORD2(v145.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[1] + 6) = 249;
          WORD1(v145.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v145.__r_.__value_.__r.__words[2]) = v115;
          unint64_t v110 = v107;
          os_log_type_t v111 = OS_LOG_TYPE_DEBUG;
          uint64_t v112 = "%25s:%-5d this vp version does not support property 0x%x";
          uint32_t v113 = 24;
          goto LABEL_252;
        }
        goto LABEL_253;
      }
      if (VPStrategyMgrScope(void)::once != -1) {
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
      }
      if (VPStrategyMgrScope(void)::scope)
      {
        uint64_t v108 = *(id *)VPStrategyMgrScope(void)::scope;
        if (!v108) {
          goto LABEL_233;
        }
      }
      else
      {
        uint64_t v108 = MEMORY[0x1E4F14500];
        id v116 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
      {
        int v117 = *v103;
        LODWORD(v145.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
        WORD2(v145.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[1] + 6) = 253;
        WORD1(v145.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v145.__r_.__value_.__r.__words[2]) = v117;
        _os_log_impl(&dword_1BB0CE000, v108, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting property 0x%x", (uint8_t *)&v145, 0x18u);
      }

LABEL_233:
      int v118 = this[25];
      long long v119 = pthread_self();
      if (pthread_equal(v119, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)v118 + 31, memory_order_acquire)))
      {
        goto LABEL_243;
      }
      if (VPStrategyMgrScope(void)::once != -1) {
        dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
      }
      if (VPStrategyMgrScope(void)::scope)
      {
        uint64_t v120 = *(id *)VPStrategyMgrScope(void)::scope;
        if (!v120) {
          goto LABEL_243;
        }
      }
      else
      {
        uint64_t v120 = MEMORY[0x1E4F14500];
        id v121 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v145.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
        WORD2(v145.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[1] + 6) = 254;
        _os_log_impl(&dword_1BB0CE000, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d vpLock must be held!", (uint8_t *)&v145, 0x12u);
      }

LABEL_243:
      int v122 = (*(uint64_t (**)(unint64_t))(*(void *)this[25][28] + 56))(this[25][28]);
      if (v122)
      {
        if (VPStrategyMgrScope(void)::once != -1) {
          dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
        }
        if (VPStrategyMgrScope(void)::scope)
        {
          uint64_t v107 = *(id *)VPStrategyMgrScope(void)::scope;
          if (!v107) {
            goto LABEL_254;
          }
        }
        else
        {
          uint64_t v107 = MEMORY[0x1E4F14500];
          id v123 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v145.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 4) = (std::string::size_type)"vpStrategyManager.mm";
          WORD2(v145.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v145.__r_.__value_.__r.__words[1] + 6) = 256;
          WORD1(v145.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v145.__r_.__value_.__r.__words[2]) = v122;
          *(_WORD *)unint64_t v146 = 2080;
          *(void *)&v146[2] = "DoSetProperty";
          unint64_t v110 = v107;
          os_log_type_t v111 = OS_LOG_TYPE_ERROR;
          uint64_t v112 = "%25s:%-5d Error code %i reported at %s";
          uint32_t v113 = 34;
LABEL_252:
          _os_log_impl(&dword_1BB0CE000, v110, v111, v112, (uint8_t *)&v145, v113);
        }
LABEL_253:
      }
LABEL_254:

      uint64_t v101 = v102;
    }
    while ((v91 - v87) >> 3 > (unint64_t)v102++);
  }
  VPPropertyQueue::AssignIsSetOnVPStateForAllProperties((VPPropertyQueue *)(this[25] + 12), 1);
  if (VPStrategyManager::CheckHasVP((VPStrategyManager *)this[25][28])) {
    int v125 = (*(uint64_t (**)(unint64_t, const AudioStreamBasicDescription *, void, void, void, void, unsigned int *, const AudioStreamBasicDescription *, void, uint64_t, unsigned int, unsigned int *))(*(void *)this[25][28] + 16))(this[25][28], a2, 0, a4, a5, a6, a7, a8, 0, a10, a11, a12);
  }
  else {
    int v125 = 2;
  }
  uint64_t v126 = v125 | v135;
  if (v126)
  {
    if (VPStrategyMgrScope(void)::once != -1) {
      dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
    }
    if (VPStrategyMgrScope(void)::scope)
    {
      unint64_t v127 = *(id *)VPStrategyMgrScope(void)::scope;
      if (!v127) {
        goto LABEL_275;
      }
    }
    else
    {
      unint64_t v127 = MEMORY[0x1E4F14500];
      id v128 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 370;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v126;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "InitializeHWInput";
      _os_log_impl(&dword_1BB0CE000, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d Error code %i reported at %s", buf, 0x22u);
    }
  }
LABEL_275:
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    long long v129 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v129) {
      goto LABEL_284;
    }
  }
  else
  {
    long long v129 = MEMORY[0x1E4F14500];
    id v130 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "vpStrategyManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 372;
    _os_log_impl(&dword_1BB0CE000, v129, OS_LOG_TYPE_DEBUG, "%25s:%-5d Finished initializing the VP using cached data", buf, 0x12u);
  }

LABEL_284:
  if (v87) {
    operator delete(v87);
  }
  atomic_fetch_add((atomic_uint *volatile)v139 + 80, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v140);
  atomic_fetch_add((atomic_uint *volatile)(v142 + 4), 0xFFFFFFFF);
  return v126;
}

void sub_1BB6F55C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35)
{
  long long v38 = *(void **)(v36 - 168);
  if (v38)
  {
    *(void *)(v36 - 160) = v38;
    operator delete(v38);
  }
  id v39 = *(void **)(v36 - 136);
  if (v39)
  {
    *(void *)(v36 - 128) = v39;
    operator delete(v39);
  }
  operator delete(v35);
  atomic_fetch_add((atomic_uint *volatile)(a31 + 320), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a33);
  atomic_fetch_add((atomic_uint *volatile)(a35 + 4), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void VPPropertyQueue::AssignIsSetOnVPStateForAllProperties(VPPropertyQueue *this, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  if (*(void *)this == v5)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      if (*(unsigned __int8 *)(v4 + 40) != a2)
      {
        ++v6;
        *(unsigned char *)(v4 + 40) = a2;
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    int v7 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v7) {
      return;
    }
  }
  else
  {
    int v7 = MEMORY[0x1E4F14500];
    id v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
    int v10 = 136316162;
    id v11 = "vpPropertyQueue.h";
    __int16 v12 = 1024;
    int v13 = 44;
    __int16 v14 = 1024;
    int v15 = a2;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 2048;
    unint64_t v19 = v9;
    _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d setOnVP set to %d. %d items flipped (size=%lu)", (uint8_t *)&v10, 0x28u);
  }
}

uint64_t *std::map<unsigned int,std::vector<unsigned int>>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_1E9F80030 = 0;
  qword_1E9F80028 = 0;
  VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersiounint64_t n = (uint64_t)&qword_1E9F80028;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = &result[4 * a2];
    uint64_t v5 = &qword_1E9F80028;
    while (1)
    {
      if (v5 == &qword_1E9F80028)
      {
        int v7 = &qword_1E9F80028;
      }
      else
      {
        int v6 = (uint64_t *)v3;
        if (v3)
        {
          do
          {
            int v7 = v6;
            int v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          id v8 = &qword_1E9F80028;
          do
          {
            int v7 = (uint64_t *)v8[2];
            BOOL v9 = *v7 == (void)v8;
            id v8 = v7;
          }
          while (v9);
        }
        unsigned int v10 = *(_DWORD *)v2;
        if (*((_DWORD *)v7 + 8) >= *(_DWORD *)v2)
        {
          if (v3)
          {
            __int16 v12 = (uint64_t **)&qword_1E9F80028;
            while (1)
            {
              while (1)
              {
                id v11 = (uint64_t *)v3;
                unsigned int v15 = *(_DWORD *)(v3 + 32);
                if (v10 >= v15) {
                  break;
                }
                uint64_t v3 = *v11;
                __int16 v12 = (uint64_t **)v11;
                if (!*v11) {
                  goto LABEL_18;
                }
              }
              if (v15 >= v10) {
                break;
              }
              __int16 v12 = (uint64_t **)(v11 + 1);
              uint64_t v3 = v11[1];
              if (!v3) {
                goto LABEL_18;
              }
            }
          }
          else
          {
            id v11 = &qword_1E9F80028;
            __int16 v12 = (uint64_t **)&qword_1E9F80028;
          }
          goto LABEL_17;
        }
      }
      if (v3) {
        id v11 = v7;
      }
      else {
        id v11 = &qword_1E9F80028;
      }
      if (v3) {
        __int16 v12 = (uint64_t **)(v7 + 1);
      }
      else {
        __int16 v12 = (uint64_t **)&qword_1E9F80028;
      }
LABEL_17:
      if (!*v12)
      {
LABEL_18:
        int v13 = operator new(0x40uLL);
        unsigned int v14 = *(_DWORD *)v2;
        v13[5] = 0;
        *((_DWORD *)v13 + 8) = v14;
        v13[6] = 0;
        v13[7] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v13 + 5, (const void *)v2[1], v2[2], (v2[2] - v2[1]) >> 2);
        uint64_t result = std::__tree<std::__value_type<double,int>,std::__map_value_compare<double,std::__value_type<double,int>,std::less<double>,true>,std::allocator<std::__value_type<double,int>>>::__insert_node_at((uint64_t **)&VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersion, (uint64_t)v11, v12, v13);
      }
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
      uint64_t v5 = (uint64_t *)VPStrategyManager::DoSetProperty(VPPropertyItem *)::vpUnsupportedPropertiesByVersion;
      uint64_t v3 = qword_1E9F80028;
    }
  }
  return result;
}

void sub_1BB6F59BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy((void *)qword_1E9F80028);
  _Unwind_Resume(a1);
}

BOOL ___ZN17VPStrategyManager13DoSetPropertyEP14VPPropertyItem_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 200) + 224);
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 112))(v3);
  uint64_t v5 = qword_1E9F80028;
  if (!qword_1E9F80028) {
    return 0;
  }
  int v6 = &qword_1E9F80028;
  uint64_t v7 = qword_1E9F80028;
  do
  {
    unsigned int v8 = *(_DWORD *)(v7 + 32);
    BOOL v9 = v8 >= v4;
    if (v8 >= v4) {
      unsigned int v10 = (uint64_t *)v7;
    }
    else {
      unsigned int v10 = (uint64_t *)(v7 + 8);
    }
    if (v9) {
      int v6 = (uint64_t *)v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 == &qword_1E9F80028 || v4 < *((_DWORD *)v6 + 8)) {
    return 0;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v12 = *(_DWORD *)(v5 + 32);
      if (v4 >= v12) {
        break;
      }
      uint64_t v5 = *(void *)v5;
      if (!v5) {
        goto LABEL_18;
      }
    }
    if (v12 >= v4) {
      break;
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
LABEL_18:
    }
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  unsigned int v14 = *(_DWORD **)(v5 + 40);
  int v13 = *(_DWORD **)(v5 + 48);
  if (v14 != v13)
  {
    while (*v14 != a2)
    {
      if (++v14 == v13)
      {
        unsigned int v14 = v13;
        return v14 != v13;
      }
    }
  }
  return v14 != v13;
}

uint64_t std::map<unsigned int,std::vector<unsigned int>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void VPStrategyManager::~VPStrategyManager(std::__shared_weak_count **this)
{
  VPStrategyManager::~VPStrategyManager(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v7;
  __CFNotificationCenter *v8;
  __CFNotificationCenter *v9;
  __CFNotificationCenter *v10;
  __CFNotificationCenter *v11;
  std::__shared_weak_count *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  int v17 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        uint64_t v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          int v13 = 136315394;
          unsigned int v14 = "vpStrategyManager.mm";
          unsigned int v15 = 1024;
          __int16 v16 = 170;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", (uint8_t *)&v13, 0x12u);
        }
      }
    }
  }
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    unsigned int v4 = *(id *)VPStrategyMgrScope(void)::scope;
    if (!v4) {
      goto LABEL_18;
    }
  }
  else
  {
    unsigned int v4 = MEMORY[0x1E4F14500];
    uint64_t v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 136315394;
    unsigned int v14 = "vpStrategyManager.mm";
    unsigned int v15 = 1024;
    __int16 v16 = 171;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyed VPStrategyManager", (uint8_t *)&v13, 0x12u);
  }

LABEL_18:
  if (_os_feature_enabled_impl())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, this, @"AUVoiceIODuckingLevelDefault", 0);
    uint64_t v7 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v7, this, @"AUVoiceIODuckingLevelMin", 0);
    unsigned int v8 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v8, this, @"AUVoiceIODuckingLevelMid", 0);
    BOOL v9 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v9, this, @"AUVoiceIODuckingLevelMax", 0);
    unsigned int v10 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v10, this, @"AUVoiceIOEnableAdvancedDucking", 0);
    id v11 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(v11, this, @"AUVoiceIODisableAdvancedDucking", 0);
  }
  unsigned int v12 = this[26];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  vp::Context::~Context((vp::Context *)(this + 1));
}

void sub_1BB6F5DC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t DisableAdvancedDuckingCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v8 = 0;
  unsigned int v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  LOBYTE(v8) = 0;
  return VPStrategyManager::SetProperty(this, 1868653667, &v8, 8uLL);
}

uint64_t EnableAdvancedDuckingCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  LOBYTE(v8) = 1;
  return VPStrategyManager::SetProperty(this, 1868653667, &v8, 8uLL);
}

uint64_t MaxDuckingLevelCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v8 = 0;
  unsigned int v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 30;
  return VPStrategyManager::SetProperty(this, 1868653667, &v8, 8uLL);
}

uint64_t MidDuckingLevelCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v8 = 0;
  unsigned int v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 20;
  return VPStrategyManager::SetProperty(this, 1868653667, &v8, 8uLL);
}

uint64_t MinDuckingLevelCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v8 = 0;
  unsigned int v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 10;
  return VPStrategyManager::SetProperty(this, 1868653667, &v8, 8uLL);
}

uint64_t DefaultDuckingCallBack(__CFNotificationCenter *a1, VPStrategyManager *this, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v8 = 0;
  unsigned int v7 = 0;
  VPStrategyManager::GetProperty(this, 1868653667, &v8, 8, &v7);
  HIDWORD(v8) = 0;
  return VPStrategyManager::SetProperty(this, 1868653667, &v8, 8uLL);
}

void VPStrategyManager::VPSMImplementation::~VPSMImplementation(VPStrategyManager::VPSMImplementation *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (VPStrategyMgrScope(void)::once != -1) {
    dispatch_once(&VPStrategyMgrScope(void)::once, &__block_literal_global_28323);
  }
  if (VPStrategyMgrScope(void)::scope)
  {
    if (*(unsigned char *)(VPStrategyMgrScope(void)::scope + 8))
    {
      uint64_t v2 = *(id *)VPStrategyMgrScope(void)::scope;
      if (v2)
      {
        uint64_t v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v5 = 136315394;
          *(void *)&v5[4] = "vpStrategyManager.h";
          __int16 v6 = 1024;
          int v7 = 181;
          _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ================", v5, 0x12u);
        }
      }
    }
  }
  std::__tree<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>>>::destroy(*((void **)this + 42));
  CADeprecated::CAMutex::~CAMutex((VPStrategyManager::VPSMImplementation *)((char *)this + 232));
  uint64_t v4 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  CADeprecated::CAMutex::~CAMutex((VPStrategyManager::VPSMImplementation *)((char *)this + 120));
  *(void *)uint64_t v5 = (char *)this + 96;
  std::vector<VPPropertyQueue::QueueEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  CADeprecated::CAMutex::~CAMutex((VPStrategyManager::VPSMImplementation *)((char *)this + 8));
}

void std::__tree<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::unique_ptr<VoiceProcessorBase>>>>::destroy(a1[1]);
    uint64_t v2 = a1[5];
    a1[5] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    operator delete(a1);
  }
}

void std::vector<VPPropertyQueue::QueueEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        VPPropertyItem::~VPPropertyItem((VPPropertyItem *)(v4 - 48));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

VPStrategyManager::VPSMImplementation *std::__shared_ptr_pointer<VPStrategyManager::VPSMImplementation *,std::shared_ptr<VPStrategyManager::VPSMImplementation>::__shared_ptr_default_delete<VPStrategyManager::VPSMImplementation,VPStrategyManager::VPSMImplementation>,std::allocator<VPStrategyManager::VPSMImplementation>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(VPStrategyManager::VPSMImplementation **)(a1 + 24);
  if (result)
  {
    VPStrategyManager::VPSMImplementation::~VPSMImplementation(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_pointer<VPStrategyManager::VPSMImplementation *,std::shared_ptr<VPStrategyManager::VPSMImplementation>::__shared_ptr_default_delete<VPStrategyManager::VPSMImplementation,VPStrategyManager::VPSMImplementation>,std::allocator<VPStrategyManager::VPSMImplementation>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t AUSM::GainParameters::print(AUSM::GainParameters *this, float *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  float v4 = a2[3];
  float v5 = log10f(*a2 * v4) * 20.0;
  float v6 = log10f(v4) * 20.0;
  float v7 = log10f((float)((float)((float)(a2[4] * a2[6]) * a2[8]) * a2[10]) + 0.0) * 20.0;
  float v8 = log10f(v4 * a2[1]) * 20.0;
  float v9 = log10f(a2[5] * a2[7]) * 20.0;
  float v10 = log10f(v4 * a2[2]) * 20.0;
  float v11 = log10f(a2[9] * a2[11]);
  *(float *)unsigned int v14 = v5;
  *(float *)&v14[4] = v6;
  *(float *)&v14[8] = v7;
  *(float *)&v14[12] = v8;
  *(float *)&v14[16] = v9;
  *(float *)&v14[20] = v10;
  uint64_t v15 = 0x25294A529;
  *(float *)&v14[24] = v11 * 20.0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  v13[0] = 7;
  v13[1] = (uint64_t)v14;
  void v13[2] = 0x25294A529;
  return std::__vformat_to[abi:ne180100]<std::back_insert_iterator<std::string>,char,std::back_insert_iterator<std::__format::__output_buffer<char>>>((uint64_t)this, "Gains dB: direct={:.1f}, tuning={:.1f}, dry={:.1f}, reverb={:.1f}, wet={:.1f}, ppReverb={:.1f}, ppWet={:.1f}", 108, v13);
}

void sub_1BB6F64B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUSM::ChannelGeometry::update(float32x4_t **this, int a2)
{
  uint64_t v3 = *this;
  __int32 v4 = (*this)[17].i32[3];
  if (*((unsigned char *)this + 760) || (v4 == *((_DWORD *)this + 191) ? (_ZF = a2 == 0) : (_ZF = 0), !_ZF))
  {
    *((_DWORD *)this + 191) = v4;
    *((unsigned char *)this + 760) = 0;
    __dmb(0xBu);
    unsigned int v6 = atomic_load((unsigned int *)(v3->i64[1] + 80));
    if (v6 == 1
      || !v6 && *(_DWORD *)(v3->i64[0] + 108) > 1u
      || (unsigned int v7 = atomic_load((unsigned int *)(v3->i64[1] + 72)), v7 == 5))
    {
      *((_DWORD *)this + 47) = 0;
      float v8 = *this;
    }
    else
    {
      float v8 = *this;
      *((_DWORD *)this + 47) = (*this)[5].i32[0];
    }
    float32x4_t v9 = v8[6];
    unsigned int v10 = atomic_load((unsigned int *)(v8->i64[1] + 80));
    float32x4_t v387 = v9;
    if (v10 == 1
      || !v10 && *(_DWORD *)(v8->i64[0] + 108) > 1u
      || (unsigned int v11 = atomic_load((unsigned int *)(v8->i64[1] + 72)), v11 == 5))
    {
      *((_OWORD *)this + 4) = 0u;
      long long v12 = xmmword_1BB873F80;
    }
    else
    {
      unsigned int v66 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
      if (v66 != 3)
      {
        float Parameter = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 2u);
        float v101 = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 0x22u);
        float32x4_t v102 = vmulq_f32(v387, (float32x4_t)xmmword_1BB879E20);
        int32x4_t v103 = (int32x4_t)vnegq_f32(v102);
        int8x16_t v104 = (int8x16_t)vtrn2q_s32((int32x4_t)v102, vtrn1q_s32((int32x4_t)v102, v103));
        float32x4_t v105 = vmlaq_n_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v103, 8uLL), (float32x4_t)0), (float32x4_t)vextq_s8(v104, v104, 8uLL), Parameter * v101);
        float32x4_t v106 = (float32x4_t)vrev64q_s32((int32x4_t)v102);
        v106.i32[0] = v103.i32[1];
        v106.i32[3] = v103.i32[2];
        float32x4_t v107 = vmlaq_f32(v105, (float32x4_t)0, v106);
        int32x4_t v108 = (int32x4_t)vnegq_f32(v107);
        int8x16_t v109 = (int8x16_t)vtrn2q_s32((int32x4_t)v107, vtrn1q_s32((int32x4_t)v107, v108));
        float32x4_t v110 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v107, (int8x16_t)v108, 8uLL), *(float32x2_t *)v387.f32, 1), (float32x4_t)vextq_s8(v109, v109, 8uLL), v387.f32[0]);
        float32x4_t v111 = (float32x4_t)vrev64q_s32((int32x4_t)v107);
        v111.i32[0] = v108.i32[1];
        v111.i32[3] = v108.i32[2];
        *((float32x4_t *)this + 4) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v107, v387, 3), v111, v387, 2), v110);
        if (this[1][30].i8[1])
        {
          uint64_t v112 = *this;
          int v113 = (*this)[7].u8[0];
          *((unsigned char *)this + 144) = v113;
          if (v113)
          {
            unsigned int v114 = atomic_load((unsigned int *)(v112->i64[1] + 224));
            int v115 = *this + 8;
            if (v114 == 1)
            {
              float32x4_t v116 = *v115;
            }
            else
            {
              int32x4_t v145 = (int32x4_t)vnegq_f32(*v115);
              int8x16_t v146 = (int8x16_t)vtrn2q_s32(*(int32x4_t *)v115, vtrn1q_s32(*(int32x4_t *)v115, v145));
              float32x4_t v147 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v115, (int8x16_t)v145, 8uLL), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vextq_s8(v146, v146, 8uLL));
              float32x4_t v148 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v115);
              v148.i32[0] = v145.i32[1];
              v148.i32[3] = v145.i32[2];
              float32x4_t v149 = vaddq_f32(vaddq_f32(v148, vmulq_f32(*v115, (float32x4_t)0)), v147);
              int32x4_t v150 = (int32x4_t)vnegq_f32(v149);
              int8x16_t v151 = (int8x16_t)vtrn2q_s32((int32x4_t)v149, vtrn1q_s32((int32x4_t)v149, v150));
              float32x4_t v152 = (float32x4_t)vrev64q_s32((int32x4_t)v149);
              v152.i32[0] = v150.i32[1];
              v152.i32[3] = v150.i32[2];
              float32x4_t v116 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v149, v387, 3), v152, (float32x4_t)vdupq_laneq_s32((int32x4_t)v387, 2)), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v149, (int8x16_t)v150, 8uLL), *(float32x2_t *)v387.f32, 1), (float32x4_t)vextq_s8(v151, v151, 8uLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v387.f32, 0)));
            }
            *((float32x4_t *)this + 10) = v116;
          }
LABEL_19:
          *((unsigned char *)this + 80) = 0;
          float v13 = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 0x1Cu);
          float v14 = v13;
          if (!this[1][30].i8[0]) {
            goto LABEL_52;
          }
          if (v13 <= 0.0) {
            goto LABEL_52;
          }
          uint64_t v15 = *this;
          unsigned int v16 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
          if (v16 == 1 || !v16 && *(_DWORD *)(v15->i64[0] + 108) > 1u) {
            goto LABEL_52;
          }
          unsigned int v17 = atomic_load((unsigned int *)(v15->i64[1] + 72));
          if (v17 == 5) {
            goto LABEL_52;
          }
          float v18 = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 0x1Du);
          unint64_t v19 = *this;
          if (v18 <= 0.0)
          {
            float v117 = ausdk::AUElement::GetParameter((ausdk::AUElement *)v19->i64[0], 0x1Eu);
            if (v117 <= 0.0)
            {
LABEL_52:
              *((float *)this + 21) = v14;
              id v121 = *this;
              int v122 = this[1];
              float32x4_t v123 = (*this)[3];
              *((_DWORD *)this + 45) = 1065353216;
              *((float32x4_t *)this + 8) = v123;
              *((_DWORD *)this + 44) = v121[4].i32[2];
              *((_DWORD *)this + 46) = v122[35].i32[2];
              long long v124 = *((_OWORD *)this + 5);
              *((_OWORD *)this + 12) = *((_OWORD *)this + 4);
              *((_OWORD *)this + 13) = v124;
              long long v125 = *((_OWORD *)this + 7);
              *((_OWORD *)this + 14) = *((_OWORD *)this + 6);
              *((_OWORD *)this + 15) = v125;
              long long v126 = *((_OWORD *)this + 9);
              *((_OWORD *)this + 16) = *((_OWORD *)this + 8);
              *((_OWORD *)this + 17) = v126;
              long long v127 = *((_OWORD *)this + 11);
              *((_OWORD *)this + 18) = *((_OWORD *)this + 10);
              *((_OWORD *)this + 19) = v127;
              *((float *)this + 79) = v122[27].f32[3] * *((float *)this + 79);
              unsigned int v128 = atomic_load((unsigned int *)(v121->i64[1] + 80));
              if (v128 != 1 && (v128 || *(_DWORD *)(v121->i64[0] + 108) <= 1u))
              {
                unsigned int v129 = atomic_load((unsigned int *)(v121->i64[1] + 72));
                if (v129 != 5)
                {
                  float32x4_t v130 = *((float32x4_t *)this + 4);
                  float v131 = *((float *)this + 79);
                  unsigned int v132 = *((_DWORD *)this + 11);
                  if (!*(unsigned char *)(*(void *)((*this)->i64[1] + 232) + 2608))
                  {
                    size_t v133 = this[1];
                    unsigned int v134 = atomic_load(&v133[25].u32[2]);
                    if (v134 || v133[25].i32[3])
                    {
                      float32x4_t v388 = *((float32x4_t *)this + 4);
                      AUSM::SoundStage::warp((uint64_t)this[1], (float32x4_t *)this + 12, (float *)this + 77, (float *)this + 78, *((_DWORD *)this + 11), *((float *)this + 79));
                      float32x4_t v130 = v388;
                    }
                  }
                  if (this[1][69].i8[4])
                  {
                    unsigned __int8 v135 = atomic_load((unsigned __int8 *)(*(void *)((*this)->i64[1] + 232) + 163));
                    if (v135)
                    {
                      float32x4_t v389 = v130;
                      AUSM::SoundStage::warp((uint64_t)&this[1][38], (float32x4_t *)this + 12, (float *)this + 77, (float *)this + 78, v132, v131);
                      float32x4_t v130 = v389;
                    }
                  }
                  if (*((unsigned char *)this + 144))
                  {
                    float32x4_t v136 = vmulq_f32(v130, v130);
                    float32x4_t v137 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1)));
                    if (sqrtf(v137.f32[0]) > 0.001)
                    {
                      float32x4_t v138 = *((float32x4_t *)this + 12);
                      float32x4_t v139 = vmulq_f32(v138, v138);
                      float32x4_t v140 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2), vaddq_f32(v139, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.f32, 1)));
                      if (sqrtf(v140.f32[0]) > 0.001)
                      {
                        float v141 = sqrtf(vmulq_f32(v137, v140).f32[0]);
                        if (v141 <= 0.0001)
                        {
                          v144.i64[0] = 0;
                          v144.i32[2] = 0;
                          float v153 = 1.0;
                        }
                        else
                        {
                          float32x4_t v142 = vmulq_f32(v130, v138);
                          float v143 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0];
                          if ((float)((float)(v143 / v141) + 1.0) >= 0.0001)
                          {
                            int32x4_t v154 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v138, (int32x4_t)v138), (int8x16_t)v138, 0xCuLL), vnegq_f32(v130)), v138, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v130), (int8x16_t)v130, 0xCuLL));
                            float32x4_t v144 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v154, v154), (int8x16_t)v154, 0xCuLL);
                            float v153 = v143 + v141;
                          }
                          else
                          {
                            if (fabsf(v130.f32[0]) <= fabsf(v130.f32[2]))
                            {
                              v144.i32[0] = 0;
                              v144.f32[1] = -v130.f32[2];
                              v144.i32[2] = v130.i32[1];
                            }
                            else
                            {
                              float32x4_t v144 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v130.f32[1]), (int32x4_t)v130);
                            }
                            float v153 = 0.0;
                          }
                        }
                        v144.f32[3] = v153;
                        int8x16_t v155 = (int8x16_t)vmulq_f32(v144, v144);
                        float32x2_t v156 = vadd_f32(*(float32x2_t *)v155.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v155, v155, 8uLL));
                        if (vaddv_f32(v156) == 0.0)
                        {
                          float32x4_t v157 = (float32x4_t)xmmword_1BB875840;
                        }
                        else
                        {
                          unsigned __int32 v158 = vadd_f32(v156, (float32x2_t)vdup_lane_s32((int32x2_t)v156, 1)).u32[0];
                          float32x2_t v159 = vrsqrte_f32((float32x2_t)v158);
                          float32x2_t v160 = vmul_f32(v159, vrsqrts_f32((float32x2_t)v158, vmul_f32(v159, v159)));
                          float32x4_t v157 = vmulq_n_f32(v144, vmul_f32(v160, vrsqrts_f32((float32x2_t)v158, vmul_f32(v160, v160))).f32[0]);
                        }
                        float32x4_t v161 = *((float32x4_t *)this + 18);
                        int32x4_t v162 = (int32x4_t)vnegq_f32(v161);
                        int8x16_t v163 = (int8x16_t)vtrn2q_s32((int32x4_t)v161, vtrn1q_s32((int32x4_t)v161, v162));
                        float32x4_t v164 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v161, (int8x16_t)v162, 8uLL), *(float32x2_t *)v157.f32, 1), (float32x4_t)vextq_s8(v163, v163, 8uLL), v157.f32[0]);
                        float32x4_t v165 = (float32x4_t)vrev64q_s32((int32x4_t)v161);
                        v165.i32[0] = v162.i32[1];
                        v165.i32[3] = v162.i32[2];
                        *((float32x4_t *)this + 18) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v161, v157, 3), v165, v157, 2), v164);
                      }
                    }
                  }
                  if (*((unsigned char *)this + 208))
                  {
                    int v394 = 1065353216;
                    int v395 = 1065353216;
                    float v166 = *((float *)this + 79);
                    unsigned int v167 = *((_DWORD *)this + 11);
                    if (!*(unsigned char *)(*(void *)((*this)->i64[1] + 232) + 2608))
                    {
                      long long v168 = this[1];
                      unsigned int v169 = atomic_load(&v168[25].u32[2]);
                      if (v169 || v168[25].i32[3]) {
                        AUSM::SoundStage::warp((uint64_t)this[1], (float32x4_t *)this + 14, (float *)&v395, (float *)&v394, *((_DWORD *)this + 11), *((float *)this + 79));
                      }
                    }
                    if (this[1][69].i8[4])
                    {
                      unsigned __int8 v170 = atomic_load((unsigned __int8 *)(*(void *)((*this)->i64[1] + 232) + 163));
                      if (v170) {
                        AUSM::SoundStage::warp((uint64_t)&this[1][38], (float32x4_t *)this + 14, (float *)&v395, (float *)&v394, v167, v166);
                      }
                    }
                    float v171 = *((float *)this + 79);
                    unsigned int v172 = *((_DWORD *)this + 11);
                    if (!*(unsigned char *)(*(void *)((*this)->i64[1] + 232) + 2608))
                    {
                      uint64_t v173 = this[1];
                      unsigned int v174 = atomic_load(&v173[25].u32[2]);
                      if (v174 || v173[25].i32[3]) {
                        AUSM::SoundStage::warp((uint64_t)this[1], (float32x4_t *)this + 15, (float *)&v395, (float *)&v394, *((_DWORD *)this + 11), *((float *)this + 79));
                      }
                    }
                    if (this[1][69].i8[4])
                    {
                      unsigned __int8 v175 = atomic_load((unsigned __int8 *)(*(void *)((*this)->i64[1] + 232) + 163));
                      if (v175) {
                        AUSM::SoundStage::warp((uint64_t)&this[1][38], (float32x4_t *)this + 15, (float *)&v395, (float *)&v394, v172, v171);
                      }
                    }
                  }
                }
              }
              uint64_t v3 = *this;
              unint64_t v94 = this[1];
              __int32 v95 = v94[68].i32[0];
              goto LABEL_96;
            }
            LODWORD(v118) = 0;
            *((float *)&v118 + 1) = -v117;
            float32x4_t v119 = *((float32x4_t *)this + 4);
            float32x4_t v120 = vaddq_f32((float32x4_t)v118, v119);
            float32x4_t v65 = vsubq_f32(v119, (float32x4_t)v118);
            *((float32x4_t *)this + 6) = v120;
          }
          else
          {
            unsigned int v20 = atomic_load((unsigned int *)(v19->i64[1] + 80));
            if (v20 == 3)
            {
              float v21 = *((float *)this + 5);
              __float2 v22 = __sincosf_stret((float)(*((float *)this + 4) * 0.017453) * 0.5);
              __float2 v23 = __sincosf_stret((float)(v21 * 0.017453) * 0.5);
              v24.f32[0] = -(float)((float)(v22.__sinval * v23.__sinval)
                                  - (float)((float)(v22.__cosval * v23.__cosval) * 0.0));
              v24.f32[1] = (float)(v22.__sinval * (float)(v23.__cosval * 0.0)) + (float)(v23.__sinval * v22.__cosval);
              v24.f32[2] = (float)(v22.__cosval * (float)(v23.__sinval * -0.0)) + (float)(v23.__cosval * v22.__sinval);
              v24.f32[3] = (float)(v22.__cosval * v23.__cosval) + (float)((float)(v22.__sinval * v23.__sinval) * 0.0);
              int32x4_t v25 = (int32x4_t)vnegq_f32(v24);
              int8x16_t v26 = (int8x16_t)vtrn2q_s32((int32x4_t)v24, vtrn1q_s32((int32x4_t)v24, v25));
              float32x4_t v27 = (float32x4_t)vrev64q_s32((int32x4_t)v24);
              v27.i32[0] = v25.i32[1];
              v27.i32[3] = v25.i32[2];
              float32x4_t v387 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v24, v387, 3), v27, v387, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL), *(float32x2_t *)v387.f32, 1), (float32x4_t)vextq_s8(v26, v26, 8uLL), v387.f32[0]));
            }
            __float2 v28 = __sincosf_stret((float)(v18 * -0.017453) * 0.5);
            int8x16_t v29 = (int8x16_t)vmulq_f32(v387, v387);
            *(float32x2_t *)v29.i8 = vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
            v29.i32[0] = vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1)).u32[0];
            float32x2_t v30 = vrecpe_f32((float32x2_t)v29.u32[0]);
            float32x2_t v31 = vmul_f32(v30, vrecps_f32((float32x2_t)v29.u32[0], v30));
            float32x4_t v32 = vmulq_n_f32(vmulq_f32(v387, (float32x4_t)xmmword_1BB879E20), vmul_f32(v31, vrecps_f32((float32x2_t)v29.u32[0], v31)).f32[0]);
            int32x4_t v33 = (int32x4_t)vnegq_f32(v32);
            int8x16_t v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
            float32x4_t v35 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
            v35.i32[0] = v33.i32[1];
            v35.i32[3] = v33.i32[2];
            float32x4_t v36 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v32, v28.__cosval + (float)((float)(v28.__sinval * 0.0) * 0.0)), v35, v28.__sinval - (float)(v28.__cosval * 0.0)), vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), (float)(v28.__sinval * 0.0) + (float)(v28.__cosval * 0.0)), (float32x4_t)vextq_s8(v34, v34, 8uLL), -(float)((float)(v28.__sinval * 0.0) - (float)(v28.__cosval * 0.0))));
            int32x4_t v37 = (int32x4_t)vnegq_f32(v36);
            int8x16_t v38 = (int8x16_t)vtrn2q_s32((int32x4_t)v36, vtrn1q_s32((int32x4_t)v36, v37));
            float32x4_t v39 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v37, 8uLL), *(float32x2_t *)v387.f32, 1), (float32x4_t)vextq_s8(v38, v38, 8uLL), v387.f32[0]);
            float32x4_t v40 = (float32x4_t)vrev64q_s32((int32x4_t)v36);
            v40.i32[0] = v37.i32[1];
            v40.i32[3] = v37.i32[2];
            float32x4_t v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v36, v387, 3), v40, v387, 2), v39);
            float32x4_t v42 = *((float32x4_t *)this + 4);
            float32x4_t v43 = vmulq_f32(v41, (float32x4_t)xmmword_1BB879E20);
            int32x4_t v44 = (int32x4_t)vnegq_f32(v43);
            int8x16_t v45 = (int8x16_t)vtrn2q_s32((int32x4_t)v43, vtrn1q_s32((int32x4_t)v43, v44));
            float32x4_t v46 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v44, 8uLL), *(float32x2_t *)v42.f32, 1), (float32x4_t)vextq_s8(v45, v45, 8uLL), v42.f32[0]);
            float32x4_t v47 = (float32x4_t)vrev64q_s32((int32x4_t)v43);
            v47.i32[0] = v44.i32[1];
            v47.i32[3] = v44.i32[2];
            float32x4_t v48 = vmlaq_laneq_f32(v46, v47, v42, 2);
            int32x4_t v49 = (int32x4_t)vnegq_f32(v48);
            int8x16_t v50 = (int8x16_t)vtrn2q_s32((int32x4_t)v48, vtrn1q_s32((int32x4_t)v48, v49));
            float32x4_t v51 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v49, 8uLL), *(float32x2_t *)v41.f32, 1), (float32x4_t)vextq_s8(v50, v50, 8uLL), v41.f32[0]);
            float32x4_t v52 = (float32x4_t)vrev64q_s32((int32x4_t)v48);
            v52.i32[0] = v49.i32[1];
            v52.i32[3] = v49.i32[2];
            float32x4_t v53 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v48, v41, 3), v52, v41, 2), v51);
            int8x16_t v54 = (int8x16_t)vmulq_f32(v41, v41);
            *(float32x2_t *)v54.i8 = vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
            v54.i32[0] = vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1)).u32[0];
            *(float32x2_t *)v52.f32 = vrecpe_f32((float32x2_t)v54.u32[0]);
            *(float32x2_t *)v52.f32 = vmul_f32(*(float32x2_t *)v52.f32, vrecps_f32((float32x2_t)v54.u32[0], *(float32x2_t *)v52.f32));
            float32x4_t v55 = vmulq_n_f32(v43, vmul_f32(*(float32x2_t *)v52.f32, vrecps_f32((float32x2_t)v54.u32[0], *(float32x2_t *)v52.f32)).f32[0]);
            float32x4_t v56 = vmulq_f32(v55, (float32x4_t)xmmword_1BB879E20);
            int32x4_t v57 = (int32x4_t)vnegq_f32(v56);
            int8x16_t v58 = (int8x16_t)vtrn2q_s32((int32x4_t)v56, vtrn1q_s32((int32x4_t)v56, v57));
            float32x4_t v59 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v57, 8uLL), *(float32x2_t *)v42.f32, 1), (float32x4_t)vextq_s8(v58, v58, 8uLL), v42.f32[0]);
            float32x4_t v60 = (float32x4_t)vrev64q_s32((int32x4_t)v56);
            v60.i32[0] = v57.i32[1];
            v60.i32[3] = v57.i32[2];
            float32x4_t v61 = vmlaq_laneq_f32(v59, v60, v42, 2);
            int32x4_t v62 = (int32x4_t)vnegq_f32(v61);
            int8x16_t v63 = (int8x16_t)vtrn2q_s32((int32x4_t)v61, vtrn1q_s32((int32x4_t)v61, v62));
            float32x4_t v64 = (float32x4_t)vrev64q_s32((int32x4_t)v61);
            v64.i32[0] = v62.i32[1];
            v64.i32[3] = v62.i32[2];
            float32x4_t v65 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v61, v55, 3), v64, v55, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v62, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v63, v63, 8uLL), v55.f32[0]));
            *((float32x4_t *)this + 6) = v53;
          }
          *((float32x4_t *)this + 7) = v65;
          *((unsigned char *)this + 80) = 1;
          goto LABEL_52;
        }
LABEL_18:
        *((unsigned char *)this + 144) = 0;
        goto LABEL_19;
      }
      float SnappedCoordinates = *((float *)this + 4);
      float v67 = *((float *)this + 5);
      float v69 = *((float *)this + 6);
      unsigned __int8 v70 = atomic_load(&(*this)[17].u8[8]);
      unint64_t v71 = *this;
      if ((v70 & 1) == 0)
      {
        if (v71[11].i8[1])
        {
          float SnappedCoordinates = AUSM::SnapCoordinates::getSnappedCoordinates((uint64_t)&v71[14], 0, 0, *((float *)this + 4), *((float *)this + 5));
          float v67 = v72;
          unint64_t v71 = *this;
          float32x4_t v9 = v387;
        }
        if (v71[11].i8[2])
        {
          float SnappedCoordinates = AUSM::SnapCoordinates::getExcludedCoordinates((uint64_t)&v71[14], (AUSM::ExclusionZone **)v71[2].i64[0], (BOOL)v71, SnappedCoordinates, v67);
          float v67 = v73;
          unint64_t v71 = *this;
          float32x4_t v9 = v387;
        }
      }
      float32x4_t v74 = v71[8];
      int32x4_t v75 = (int32x4_t)vnegq_f32(v74);
      int8x16_t v76 = (int8x16_t)vtrn2q_s32((int32x4_t)v74, vtrn1q_s32((int32x4_t)v74, v75));
      float32x4_t v77 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v75, 8uLL), *(float32x2_t *)v9.f32, 1), (float32x4_t)vextq_s8(v76, v76, 8uLL), v9.f32[0]);
      float32x4_t v78 = (float32x4_t)vrev64q_s32((int32x4_t)v74);
      v78.i32[0] = v75.i32[1];
      v78.i32[3] = v75.i32[2];
      float32x4_t v79 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v74, v9, 3), v78, v9, 2), v77);
      if (v71[9].i8[0])
      {
        int8x16_t v80 = (int8x16_t)vmulq_f32(v79, (float32x4_t)xmmword_1BB875840);
        unint64_t v81 = &_PromotedConst;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL))) >= 0.0) {
          unint64_t v81 = &_PromotedConst_39679;
        }
        _simd_slerp_internal(v79, *(float32x4_t *)v81, this[1][28].f32[1]);
      }
      float32x4_t v387 = v79;
      __float2 v82 = __sincosf_stret(SnappedCoordinates * 0.017453);
      __float2 v83 = __sincosf_stret(v67 * 0.017453);
      float32x4_t v84 = vmulq_f32(v387, (float32x4_t)xmmword_1BB879E20);
      int32x4_t v85 = (int32x4_t)vnegq_f32(v84);
      int8x16_t v86 = (int8x16_t)vtrn2q_s32((int32x4_t)v84, vtrn1q_s32((int32x4_t)v84, v85));
      float32x4_t v87 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v85, 8uLL), (float)(v82.__sinval * v69) * v83.__cosval);
      float32x4_t v88 = (float32x4_t)vrev64q_s32((int32x4_t)v84);
      v88.i32[0] = v85.i32[1];
      v88.i32[3] = v85.i32[2];
      float32x4_t v89 = vmlaq_n_f32(vmlaq_n_f32(v87, (float32x4_t)vextq_s8(v86, v86, 8uLL), (float)(v82.__cosval * v69) * v83.__cosval), v88, -(float)(v69 * v83.__sinval));
      int32x4_t v90 = (int32x4_t)vnegq_f32(v89);
      int8x16_t v91 = (int8x16_t)vtrn2q_s32((int32x4_t)v89, vtrn1q_s32((int32x4_t)v89, v90));
      float32x4_t v92 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v90, 8uLL), *(float32x2_t *)v387.f32, 1), (float32x4_t)vextq_s8(v91, v91, 8uLL), v387.f32[0]);
      float32x4_t v93 = (float32x4_t)vrev64q_s32((int32x4_t)v89);
      v93.i32[0] = v90.i32[1];
      v93.i32[3] = v90.i32[2];
      *((float32x4_t *)this + 4) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v89, v387, 3), v93, v387, 2), v92);
      long long v12 = xmmword_1BB875840;
    }
    *((_OWORD *)this + 10) = v12;
    goto LABEL_18;
  }
  unint64_t v94 = this[1];
  __int32 v95 = v94[68].i32[0];
  if (*((_DWORD *)this + 192) != v95)
  {
LABEL_96:
    *((_DWORD *)this + 192) = v95;
    long long v176 = *((_OWORD *)this + 17);
    *((_OWORD *)this + 24) = *((_OWORD *)this + 16);
    *((_OWORD *)this + 25) = v176;
    long long v177 = *((_OWORD *)this + 19);
    *((_OWORD *)this + 26) = *((_OWORD *)this + 18);
    *((_OWORD *)this + 27) = v177;
    long long v178 = *((_OWORD *)this + 13);
    *((_OWORD *)this + 20) = *((_OWORD *)this + 12);
    *((_OWORD *)this + 21) = v178;
    long long v179 = *((_OWORD *)this + 15);
    *((_OWORD *)this + 22) = *((_OWORD *)this + 14);
    *((_OWORD *)this + 23) = v179;
    float v180 = v94[27].f32[2];
    float v181 = v94[28].f32[1];
    unsigned int v182 = atomic_load((unsigned int *)(v3->i64[1] + 80));
    if (v182 != 1 && (v182 || *(_DWORD *)(v3->i64[0] + 108) <= 1u))
    {
      unsigned int v183 = atomic_load((unsigned int *)(v3->i64[1] + 72));
      if (v183 != 5)
      {
        int v184 = *this;
        if (!(*this)[4].i8[12] || v180 < 0.999)
        {
          uint64_t v185 = this[1];
          float32x4_t v186 = v185[31];
          float v187 = v185[32].f32[1];
          if ((*this)[4].i8[12] && v180 > 0.001)
          {
            int8x16_t v188 = (int8x16_t)vmulq_f32(v186, (float32x4_t)xmmword_1BB875840);
            uint64_t v189 = &_PromotedConst;
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v188.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL))) >= 0.0) {
              uint64_t v189 = &_PromotedConst_39679;
            }
            float v390 = v185[32].f32[1];
            _simd_slerp_internal(v186, *(float32x4_t *)v189, v180);
            float v187 = v180 + (float)((float)(1.0 - v180) * v390);
          }
          if (v184[9].i8[0])
          {
            int8x16_t v190 = (int8x16_t)vmulq_f32(v186, (float32x4_t)xmmword_1BB875840);
            Float64 v191 = &_PromotedConst;
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v190.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v190, v190, 8uLL))) >= 0.0) {
              Float64 v191 = &_PromotedConst_39679;
            }
            float v391 = v187;
            _simd_slerp_internal(v186, *(float32x4_t *)v191, v181);
            float v187 = v391;
          }
          float32x4_t v192 = vmulq_f32(v186, (float32x4_t)xmmword_1BB879E20);
          int32x4_t v193 = (int32x4_t)vnegq_f32(v192);
          int8x16_t v194 = (int8x16_t)vtrn2q_s32((int32x4_t)v192, vtrn1q_s32((int32x4_t)v192, v193));
          float32x4_t v195 = (float32x4_t)vextq_s8(v194, v194, 8uLL);
          float32x4_t v196 = (float32x4_t)vextq_s8((int8x16_t)v192, (int8x16_t)v193, 8uLL);
          float32x4_t v197 = (float32x4_t)vrev64q_s32((int32x4_t)v192);
          v197.i32[0] = v193.i32[1];
          v197.i32[3] = v193.i32[2];
          float32x4_t v198 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v196, (float32x2_t)this[24], 1), v195, COERCE_FLOAT(*((_OWORD *)this + 12))), v197, *((float32x4_t *)this + 12), 2);
          float32x4_t v199 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 0);
          int32x4_t v200 = (int32x4_t)vnegq_f32(v198);
          int8x16_t v201 = (int8x16_t)vtrn2q_s32((int32x4_t)v198, vtrn1q_s32((int32x4_t)v198, v200));
          float32x4_t v202 = (float32x4_t)vextq_s8(v201, v201, 8uLL);
          float32x4_t v203 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v186, 2);
          float32x4_t v204 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v198, (int8x16_t)v200, 8uLL), *(float32x2_t *)v186.f32, 1), v202, v186.f32[0]);
          float32x4_t v205 = (float32x4_t)vrev64q_s32((int32x4_t)v198);
          v205.i32[0] = v200.i32[1];
          v205.i32[3] = v200.i32[2];
          *((float32x4_t *)this + 20) = vmulq_n_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v198, v186, 3), v205, v186, 2), v204), v187);
          if (*((unsigned char *)this + 272))
          {
            float32x4_t v206 = *((float32x4_t *)this + 18);
            int32x4_t v207 = (int32x4_t)vnegq_f32(v206);
            int8x16_t v208 = (int8x16_t)vtrn2q_s32((int32x4_t)v206, vtrn1q_s32((int32x4_t)v206, v207));
            float32x4_t v209 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v206, (int8x16_t)v207, 8uLL), *(float32x2_t *)v186.f32, 1), (float32x4_t)vextq_s8(v208, v208, 8uLL), v199);
            float32x4_t v210 = (float32x4_t)vrev64q_s32((int32x4_t)v206);
            v210.i32[0] = v207.i32[1];
            v210.i32[3] = v207.i32[2];
            *((float32x4_t *)this + 26) = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v206, v186, 3), v210, v203), v209);
          }
          if (*((unsigned char *)this + 208))
          {
            float32x4_t v211 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v196, (float32x2_t)this[28], 1), v195, COERCE_FLOAT(*((_OWORD *)this + 14))), v197, *((float32x4_t *)this + 14), 2);
            int32x4_t v212 = (int32x4_t)vnegq_f32(v211);
            int8x16_t v213 = (int8x16_t)vtrn2q_s32((int32x4_t)v211, vtrn1q_s32((int32x4_t)v211, v212));
            float32x4_t v214 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v211, (int8x16_t)v212, 8uLL), *(float32x2_t *)v186.f32, 1), (float32x4_t)vextq_s8(v213, v213, 8uLL), v199);
            float32x4_t v215 = (float32x4_t)vrev64q_s32((int32x4_t)v211);
            v215.i32[0] = v212.i32[1];
            v215.i32[3] = v212.i32[2];
            float32x4_t v216 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v196, (float32x2_t)this[30], 1), v195, COERCE_FLOAT(*((_OWORD *)this + 15))), v197, *((float32x4_t *)this + 15), 2);
            int32x4_t v217 = (int32x4_t)vnegq_f32(v216);
            int8x16_t v218 = (int8x16_t)vtrn2q_s32((int32x4_t)v216, vtrn1q_s32((int32x4_t)v216, v217));
            float32x4_t v219 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v216, (int8x16_t)v217, 8uLL), *(float32x2_t *)v186.f32, 1), (float32x4_t)vextq_s8(v218, v218, 8uLL), v199);
            float32x4_t v220 = (float32x4_t)vrev64q_s32((int32x4_t)v216);
            v220.i32[0] = v217.i32[1];
            v220.i32[3] = v217.i32[2];
            *((float32x4_t *)this + 22) = vmulq_n_f32(vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v211, v186, 3), v215, v203), v214), v187);
            *((float32x4_t *)this + 23) = vmulq_n_f32(vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v216, v186, 3), v220, v203), v219), v187);
          }
        }
      }
    }
    uint64_t v3 = *this;
    unint64_t v94 = this[1];
    __int32 v96 = v94[68].i32[1];
    goto LABEL_116;
  }
  __int32 v96 = v94[68].i32[1];
  if (*((_DWORD *)this + 193) != v96)
  {
LABEL_116:
    *((_DWORD *)this + 193) = v96;
    long long v221 = *((_OWORD *)this + 25);
    *((_OWORD *)this + 32) = *((_OWORD *)this + 24);
    *((_OWORD *)this + 33) = v221;
    long long v222 = *((_OWORD *)this + 27);
    *((_OWORD *)this + 34) = *((_OWORD *)this + 26);
    *((_OWORD *)this + 35) = v222;
    long long v223 = *((_OWORD *)this + 21);
    *((_OWORD *)this + 28) = *((_OWORD *)this + 20);
    *((_OWORD *)this + 29) = v223;
    long long v224 = *((_OWORD *)this + 23);
    *((_OWORD *)this + 30) = *((_OWORD *)this + 22);
    *((_OWORD *)this + 31) = v224;
    float v225 = v94[27].f32[2];
    float v226 = v94[28].f32[0];
    unsigned int v227 = atomic_load((unsigned int *)(v3->i64[1] + 80));
    if (v227 != 1 && (v227 || *(_DWORD *)(v3->i64[0] + 108) <= 1u))
    {
      unsigned int v228 = atomic_load((unsigned int *)(v3->i64[1] + 72));
      if (v228 != 5)
      {
        float32x4_t v229 = vmulq_f32(this[1][33], this[1][33]);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v229, 2), vaddq_f32(v229, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v229.f32, 1))).f32[0]) > 0.001&& (!(*this)[4].i8[12] || v225 < 0.999))
        {
          unsigned int v230 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
          if (v230 != 3 || v226 > 0.001)
          {
            long long v231 = *this;
            if (!(*this)[9].i8[0])
            {
              float32x4_t v232 = this[1][33];
              if (v231[4].i8[12] && v225 > 0.001) {
                float32x4_t v232 = vmulq_n_f32(v232, 1.0 - v225);
              }
              unsigned int v233 = atomic_load((unsigned int *)(v231->i64[1] + 80));
              if (v233 == 3) {
                float32x4_t v232 = vmulq_n_f32(v232, v226);
              }
              float32x4_t v234 = *((float32x4_t *)this + 20);
              if (*((unsigned char *)this + 336))
              {
                float32x4_t v235 = vsubq_f32(*((float32x4_t *)this + 31), v232);
                *((float32x4_t *)this + 30) = vsubq_f32(*((float32x4_t *)this + 30), v232);
                *((float32x4_t *)this + 31) = v235;
              }
              float32x4_t v392 = vsubq_f32(v234, v232);
              long long v236 = *this;
              float32x4_t v237 = vmulq_f32(v234, v234);
              int v238 = (AUSM::DistanceGain *)&(*this)[12];
              float v239 = AUSM::DistanceGain::calculateDistanceGain(v238, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v237, 2), vaddq_f32(v237, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 1))).f32[0]));
              float32x4_t v240 = v392;
              float v241 = v239;
              if (v239 > 0.000001)
              {
                float32x4_t v242 = vmulq_f32(v392, v392);
                float v243 = AUSM::DistanceGain::calculateDistanceGain(v238, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v242, 2), vaddq_f32(v242, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v242.f32, 1))).f32[0]));
                AUSM::InputGeometry::clampDistanceGain((ausdk::AUElement **)v236, (float)(v243 / v241) * *((float *)this + 108), v236[4].f32[1]);
                *((_DWORD *)this + 140) = v244;
                float32x4_t v240 = v392;
              }
              *((float32x4_t *)this + 28) = v240;
            }
          }
        }
      }
    }
    uint64_t v3 = *this;
    unint64_t v94 = this[1];
    __int32 v97 = v94[68].i32[2];
    goto LABEL_137;
  }
  __int32 v97 = v94[68].i32[2];
  if (*((_DWORD *)this + 194) == v97)
  {
    __int32 v98 = v94[69].i32[0];
    if (v98 == *((_DWORD *)this + 195)) {
      return 0;
    }
    goto LABEL_159;
  }
LABEL_137:
  *((_DWORD *)this + 194) = v97;
  long long v245 = *((_OWORD *)this + 33);
  *((_OWORD *)this + 40) = *((_OWORD *)this + 32);
  *((_OWORD *)this + 41) = v245;
  long long v246 = *((_OWORD *)this + 35);
  *((_OWORD *)this + 42) = *((_OWORD *)this + 34);
  *((_OWORD *)this + 43) = v246;
  long long v247 = *((_OWORD *)this + 29);
  *((_OWORD *)this + 36) = *((_OWORD *)this + 28);
  *((_OWORD *)this + 37) = v247;
  long long v248 = *((_OWORD *)this + 31);
  *((_OWORD *)this + 38) = *((_OWORD *)this + 30);
  *((_OWORD *)this + 39) = v248;
  float v249 = v94[27].f32[2];
  float v250 = v94[28].f32[1];
  unsigned int v251 = atomic_load((unsigned int *)(v3->i64[1] + 80));
  if (v251 != 1 && (v251 || *(_DWORD *)(v3->i64[0] + 108) <= 1u))
  {
    unsigned int v252 = atomic_load((unsigned int *)(v3->i64[1] + 72));
    if (v252 != 5)
    {
      unsigned int v253 = *this;
      if (!(*this)[4].i8[12] || v249 < 0.999)
      {
        float32x4_t v254 = this[1][34];
        if ((*this)[4].i8[12] && v249 > 0.001)
        {
          int8x16_t v255 = (int8x16_t)vmulq_f32(v254, (float32x4_t)xmmword_1BB875840);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v255.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v255, v255, 8uLL))) >= 0.0) {
            uint64_t v256 = &_PromotedConst_39679;
          }
          else {
            uint64_t v256 = &_PromotedConst;
          }
          _simd_slerp_internal(v254, *(float32x4_t *)v256, v249);
        }
        if (v253[9].i8[0])
        {
          int8x16_t v257 = (int8x16_t)vmulq_f32(v254, (float32x4_t)xmmword_1BB875840);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v257.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL))) >= 0.0) {
            uint64_t v258 = &_PromotedConst_39679;
          }
          else {
            uint64_t v258 = &_PromotedConst;
          }
          _simd_slerp_internal(v254, *(float32x4_t *)v258, v250);
        }
        float32x4_t v259 = vmulq_f32(v254, (float32x4_t)xmmword_1BB879E20);
        int32x4_t v260 = (int32x4_t)vnegq_f32(v259);
        int8x16_t v261 = (int8x16_t)vtrn2q_s32((int32x4_t)v259, vtrn1q_s32((int32x4_t)v259, v260));
        float32x4_t v262 = (float32x4_t)vextq_s8(v261, v261, 8uLL);
        float32x4_t v263 = (float32x4_t)vextq_s8((int8x16_t)v259, (int8x16_t)v260, 8uLL);
        float32x4_t v264 = (float32x4_t)vrev64q_s32((int32x4_t)v259);
        v264.i32[0] = v260.i32[1];
        v264.i32[3] = v260.i32[2];
        float32x4_t v265 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v263, (float32x2_t)this[56], 1), v262, COERCE_FLOAT(*((_OWORD *)this + 28))), v264, *((float32x4_t *)this + 28), 2);
        float32x4_t v266 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v254.f32, 0);
        int32x4_t v267 = (int32x4_t)vnegq_f32(v265);
        int8x16_t v268 = (int8x16_t)vtrn2q_s32((int32x4_t)v265, vtrn1q_s32((int32x4_t)v265, v267));
        float32x4_t v269 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v265, (int8x16_t)v267, 8uLL), *(float32x2_t *)v254.f32, 1);
        float32x4_t v270 = (float32x4_t)vrev64q_s32((int32x4_t)v265);
        v270.i32[0] = v267.i32[1];
        v270.i32[3] = v267.i32[2];
        float32x4_t v271 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v254, 2);
        *((float32x4_t *)this + 36) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v265, v254, 3), v270, v254, 2), vmlaq_n_f32(v269, (float32x4_t)vextq_s8(v268, v268, 8uLL), v254.f32[0]));
        if (*((unsigned char *)this + 528))
        {
          float32x4_t v272 = *((float32x4_t *)this + 34);
          int32x4_t v273 = (int32x4_t)vnegq_f32(v272);
          int8x16_t v274 = (int8x16_t)vtrn2q_s32((int32x4_t)v272, vtrn1q_s32((int32x4_t)v272, v273));
          float32x4_t v275 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v272, (int8x16_t)v273, 8uLL), *(float32x2_t *)v254.f32, 1), (float32x4_t)vextq_s8(v274, v274, 8uLL), v266);
          float32x4_t v276 = (float32x4_t)vrev64q_s32((int32x4_t)v272);
          v276.i32[0] = v273.i32[1];
          v276.i32[3] = v273.i32[2];
          *((float32x4_t *)this + 42) = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v272, v254, 3), v276, v271), v275);
        }
        if (*((unsigned char *)this + 464))
        {
          float32x4_t v277 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v263, (float32x2_t)this[60], 1), v262, COERCE_FLOAT(*((_OWORD *)this + 30))), v264, *((float32x4_t *)this + 30), 2);
          int32x4_t v278 = (int32x4_t)vnegq_f32(v277);
          int8x16_t v279 = (int8x16_t)vtrn2q_s32((int32x4_t)v277, vtrn1q_s32((int32x4_t)v277, v278));
          float32x4_t v280 = (float32x4_t)vrev64q_s32((int32x4_t)v277);
          v280.i32[0] = v278.i32[1];
          v280.i32[3] = v278.i32[2];
          float32x4_t v281 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v277, v254, 3), v280, v271), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v277, (int8x16_t)v278, 8uLL), *(float32x2_t *)v254.f32, 1), (float32x4_t)vextq_s8(v279, v279, 8uLL), v266));
          float32x4_t v282 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v263, (float32x2_t)this[62], 1), v262, COERCE_FLOAT(*((_OWORD *)this + 31))), v264, *((float32x4_t *)this + 31), 2);
          int32x4_t v283 = (int32x4_t)vnegq_f32(v282);
          int8x16_t v284 = (int8x16_t)vtrn2q_s32((int32x4_t)v282, vtrn1q_s32((int32x4_t)v282, v283));
          float32x4_t v285 = (float32x4_t)vrev64q_s32((int32x4_t)v282);
          v285.i32[0] = v283.i32[1];
          v285.i32[3] = v283.i32[2];
          *((float32x4_t *)this + 38) = v281;
          *((float32x4_t *)this + 39) = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v282, v254, 3), v285, v271), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v282, (int8x16_t)v283, 8uLL), *(float32x2_t *)v254.f32, 1), (float32x4_t)vextq_s8(v284, v284, 8uLL), v266));
        }
      }
    }
  }
  unint64_t v94 = this[1];
  __int32 v98 = v94[69].i32[0];
  if (v98 != *((_DWORD *)this + 195)) {
LABEL_159:
  }
    *((_DWORD *)this + 195) = v98;
  if (*((unsigned char *)this + 48))
  {
    float v286 = 3.1623;
  }
  else if (*((unsigned char *)this + 49))
  {
    float v287 = COERCE_FLOAT(atomic_load((unsigned int *)(v94[29].i64[1] + 2480)));
    float v286 = __exp10f(v287 * 0.05);
    unint64_t v94 = this[1];
  }
  else
  {
    float v286 = 1.0;
  }
  float v288 = v286 * (*this)[4].f32[1];
  float v289 = COERCE_FLOAT(atomic_load((unsigned int *)&v94[35]));
  float v290 = v288 * v289;
  *((float *)this + 178) = v290;
  uint64_t v291 = this[1];
  float v292 = v290 * v291[32].f32[2];
  *((float *)this + 177) = v292;
  *((float *)this + 176) = v292 * *((float *)this + 172);
  LOBYTE(v291) = atomic_load((unsigned __int8 *)(v291[29].i64[1] + 92));
  if (v291)
  {
    unsigned int v293 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
    if (v293 != 1 && (v293 || *(_DWORD *)((*this)->i64[0] + 108) <= 1u))
    {
      float v294 = COERCE_FLOAT(atomic_load((unsigned int *)&this[1][35]));
      *((float *)this + 177) = (float)(v286 * v294) * this[1][32].f32[2];
    }
  }
  *((_DWORD *)this + 179) = *((_DWORD *)this + 173);
  __asm { FMOV            V0.2S, #1.0 }
  this[94] = _D0;
  unsigned int v299 = atomic_load((unsigned int *)((*this)->i64[1] + 80));
  if (v299 != 1 && (v299 || *(_DWORD *)((*this)->i64[0] + 108) < 2u))
  {
    __int32 v300 = (*this)[4].i32[0];
    if (v300)
    {
      if (v300 == 4)
      {
        unsigned __int8 v301 = atomic_load((unsigned __int8 *)(this[1][29].i64[1] + 85));
        if (v301)
        {
          float v304 = ausdk::AUElement::GetParameter((ausdk::AUElement *)(*this)->i64[0], 8u) * 0.01;
          uint64_t v302 = this[1];
          float v305 = v302[35].f32[1];
          float v306 = 1.0;
          float v307 = 1.0 - v304;
          float v308 = 1.0;
          if (v305 != 1.0)
          {
            float v309 = v305 * v305;
            if ((float)(v305 * v305) < 0.0001) {
              float v309 = 0.0001;
            }
            float v306 = sqrtf(1.0 / (float)(v304 + (float)(v307 * v309)));
            float v308 = v305 * v306;
          }
          *((float *)this + 181) = sqrtf(v304);
          *((float *)this + 180) = sqrtf(v307);
          *((float *)this + 183) = v306;
          *((float *)this + 182) = v308;
        }
        else
        {
          *((_OWORD *)this + 45) = xmmword_1BB876200;
          uint64_t v302 = this[1];
        }
        unsigned __int8 v310 = atomic_load((unsigned __int8 *)(v302[29].i64[1] + 86));
        if (v310)
        {
          AudioUnitParameterID v311 = *this;
          float v312 = (*this)[11].f32[2];
          float v313 = *((float *)this + 142);
          float v314 = 1.0;
          float v315 = 1.0 - v312;
          float v316 = 1.0;
          if (v313 != 1.0)
          {
            float v317 = v313 * v313;
            if ((float)(v313 * v313) < 0.0001) {
              float v317 = 0.0001;
            }
            float v314 = sqrtf(1.0 / (float)(v312 + (float)(v315 * v317)));
            float v316 = v313 * v314;
          }
          *((float *)this + 185) = sqrtf(v312);
          *((float *)this + 184) = sqrtf(v315);
          *((float *)this + 187) = v314;
          *((float *)this + 186) = v316;
        }
        else
        {
          *((_OWORD *)this + 46) = xmmword_1BB876200;
          AudioUnitParameterID v311 = *this;
        }
        unsigned int v318 = atomic_load((unsigned int *)(v311->i64[1] + 72));
        if (v318 == 9 || v318 == 7)
        {
          long long v319 = *this;
          float v320 = COERCE_FLOAT(atomic_load((unsigned int *)(this[1][29].i64[1] + 2556)));
          *(float *)&unsigned int v321 = COERCE_FLOAT(atomic_load((unsigned int *)(this[1][29].i64[1] + 2564)));
          if (v319[12].i32[2] == 4) {
            float v322 = AUSM::DistanceGain::calculateDistanceGain((AUSM::DistanceGain *)&v319[12], v320);
          }
          else {
            float v322 = *(float *)&v321;
          }
          *((float *)this + 188) = v322 * *((float *)this + 188);
          uint64_t v365 = this[1];
          float v366 = COERCE_FLOAT(atomic_load((unsigned int *)(v365[29].i64[1] + 2560)));
          *(float *)&unsigned int v367 = COERCE_FLOAT(atomic_load((unsigned int *)(v365[29].i64[1] + 2568)));
          if (v365[36].i32[3] == 4) {
            float v368 = AUSM::DistanceGain::calculateDistanceGain((AUSM::DistanceGain *)&v365[36].i32[1], v366);
          }
          else {
            float v368 = *(float *)&v367;
          }
          *((float *)this + 189) = v368 * *((float *)this + 189);
        }
        return 1;
      }
      unsigned int v303 = this[1];
    }
    else
    {
      unsigned int v303 = this[1];
      if (*(unsigned char *)(*(void *)((*this)->i64[1] + 232) + 2608)) {
        __int32 v300 = 0;
      }
      else {
        __int32 v300 = v303[25].i32[3] == 1;
      }
    }
    *((_OWORD *)this + 45) = xmmword_1BB876200;
    this[93] = _D0;
    unsigned __int8 v323 = atomic_load((unsigned __int8 *)(v303[29].i64[1] + 86));
    int v324 = this[1];
    unsigned int v325 = atomic_load((unsigned int *)((*this)->i64[1] + 72));
    unsigned int v326 = atomic_load((unsigned int *)(v324[29].i64[1] + 88));
    unsigned int v327 = atomic_load((unsigned int *)((*this)->i64[1] + 212));
    uint64_t v328 = v324[29].i64[1];
    if (!*(unsigned char *)(v328 + 2548)) {
      atomic_load((unsigned __int8 *)(v328 + 2549));
    }
    if (*(unsigned char *)(*(void *)((*this)->i64[1] + 232) + 2608)) {
      BOOL v329 = 0;
    }
    else {
      BOOL v329 = *(_DWORD *)((*this)[1].i64[0] + 412) == 1;
    }
    if (v325 != 7 || v326 != 1) {
      goto LABEL_209;
    }
    if (v327 - 1 < 3) {
      goto LABEL_210;
    }
    if (!v327)
    {
      if (!v329)
      {
LABEL_208:
        this[92] = (float32x4_t *)1065353216;
        return 1;
      }
    }
    else
    {
LABEL_209:
      if ((v323 & 1) == 0) {
        goto LABEL_208;
      }
    }
LABEL_210:
    if (!v300)
    {
      float v363 = 0.0;
      float v364 = 1.0;
LABEL_250:
      *((float *)this + 185) = v363;
      *((float *)this + 184) = v364;
      return 1;
    }
    float32x4_t v330 = vabsq_f32(*((float32x4_t *)this + 32));
    float v393 = fmaxf(fmaxf(v330.f32[0], v330.f32[2]), v330.f32[1]);
    long long v331 = *((_OWORD *)this + 28);
    LODWORD(v332) = HIDWORD(this[56]);
    float v333 = COERCE_FLOAT(this[57]);
    float v334 = -v333;
    if (v333 >= 0.0) {
      LODWORD(v334) = this[57];
    }
    float v335 = fabsf(*(float *)&v331);
    float v336 = fabsf(v332);
    float v337 = fabsf(v333);
    if (v335 < v336) {
      float v335 = v336;
    }
    if (v335 >= v337) {
      float v337 = v335;
    }
    BOOL v338 = v337 <= 1.0;
    float v339 = 1.0 / v337;
    float v340 = *(float *)&v331 * v339;
    float v341 = v332 * v339;
    float v342 = v334 * v339;
    float32x4_t v384 = *((float32x4_t *)this + 28);
    if (v338) {
      LODWORD(v343) = *((_OWORD *)this + 28);
    }
    else {
      float v343 = v340;
    }
    if (v338) {
      LODWORD(v344) = HIDWORD(this[56]);
    }
    else {
      float v344 = v341;
    }
    if (v338) {
      float v345 = v334;
    }
    else {
      float v345 = v342;
    }
    float v346 = cosf(v343 * 2.75);
    float v386 = cosf(v343 * 5.5);
    float v385 = cosf(v343 * 8.25);
    __float2 v347 = __sincosf_stret(v344 * 2.75);
    __float2 v348 = __sincosf_stret(v344 * 5.5);
    __float2 v349 = __sincosf_stret(v344 * 8.25);
    __float2 v350 = __sincosf_stret(v345 * 2.75);
    __float2 v351 = __sincosf_stret(v345 * 5.5);
    __float2 v352 = __sincosf_stret(v345 * 8.25);
    if (v300 == 3)
    {
      float v372 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v351.__cosval * 0.33435) + (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v386 * 0.17333) + 183.54) + (float)(v348.__cosval * 0.090728)) + (float)(v351.__cosval * -1.3577)) + 9.0542) + (float)(v385 * 0.084913)) + (float)(v349.__cosval * 0.07311)) + (float)(v352.__cosval * -0.91029)) + -213.21) + (float)(v386 * -0.0097578)) + (float)(v348.__cosval * -0.20005))) + (float)(v346 * -0.61198)) + (float)(v346 * 0.29473)) + (float)((float)(v348.__cosval * -0.19206) * v346)) + (float)((float)(v351.__cosval * 0.16142) * v346)) + (float)(v346 * 0.1164)) + (float)(v347.__cosval * 0.33558)) + (float)(v347.__cosval * -0.31178)) + (float)((float)(v386 * 0.14679) * v347.__cosval)) + (float)((float)(v351.__cosval * 0.16039) * v347.__cosval)) + (float)(v347.__cosval * -0.13632)) + (float)((float)(v346 * 0.069122) * v347.__cosval))
                                                                                           + (float)((float)(v346 * 0.32307) * v347.__cosval))
                                                                                   + (float)(v350.__cosval * 22.247))
                                                                           + (float)(v350.__cosval * -0.050057))
                                                                   + (float)((float)(v386 * 0.020197) * v350.__cosval))
                                                           + (float)((float)(v348.__cosval * 0.045616) * v350.__cosval))
                                                   + (float)(v350.__cosval * -0.058457))
                                           + (float)((float)(v346 * 0.21741) * v350.__cosval))
                                   + (float)((float)(v346 * 0.081264) * v350.__cosval))
                           + (float)((float)(v347.__cosval * 0.088107) * v350.__cosval))
                   + (float)((float)(v347.__cosval * -0.087962) * v350.__cosval))
           + (float)((float)((float)(v346 * -0.013901) * v347.__cosval) * v350.__cosval);
      float v373 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v372 + 0.0) + (float)((float)(v346 * 0.13318) * 0.0)) + (float)((float)(v347.__cosval * 0.38735) * 0.0)) + (float)((float)(v350.__cosval * 0.097508) * 0.0)) + (float)(v348.__sinval * -0.083309)) + (float)(v348.__sinval * -0.066559)) + (float)((float)(v346 * 0.11499) * v348.__sinval)) + (float)((float)(v350.__cosval * 0.061549) * v348.__sinval)) + (float)(v348.__sinval * -0.0)) + (float)(v351.__sinval * -5.2996)) + (float)(v351.__sinval * -0.047782)) + (float)((float)(v346 * -0.11211) * v351.__sinval)) + (float)((float)(v347.__cosval * -0.025408) * v351.__sinval)) + (float)(v351.__sinval * -0.0)) + (float)((float)(v348.__sinval * 0.037466) * v351.__sinval)) + (float)(v349.__sinval * 0.062533)) + (float)(v352.__sinval * 0.1631)) + 0.0) + (float)((float)(v386 * -0.1941) * 0.0)) + (float)((float)(v348.__cosval * 0.15752) * 0.0)) + (float)((float)(v351.__cosval * 0.18577) * 0.0)) + (float)((float)(v346 * 1.0048) * 0.0)) + (float)((float)(v347.__cosval * -0.5595) * 0.0)) + (float)((float)((float)(v346 * 0.08632) * v347.__cosval) * 0.0)) + (float)((float)(v350.__cosval * 0.15699) * 0.0)) + (float)((float)((float)(v346 * 0.30522) * v350.__cosval) * 0.0)) + (float)((float)((float)(v347.__cosval * 0.12222) * v350.__cosval) * 0.0)) + (float)((float)(v348.__sinval * -0.020659) * 0.0)) + (float)((float)((float)(v346 * -0.16366) * v348.__sinval) * 0.0)) + (float)((float)(v348.__sinval * (float)(v350.__cosval * -0.16716)) * 0.0)) + (float)((float)(v351.__sinval * -0.25181) * 0.0)) + (float)((float)((float)(v346 * -0.1876) * v351.__sinval) * 0.0)) + (float)((float)((float)(v347.__cosval * -0.054207) * v351.__sinval) * 0.0)) + (float)((float)(v349.__sinval * -0.19236) * 0.0))
                                                                                           + (float)((float)(v352.__sinval * 0.20045) * 0.0))
                                                                                   + (float)(v347.__sinval * 3.5834))
                                                                           + (float)(v347.__sinval * -2.7613))
                                                                   + (float)((float)(v386 * -0.023355) * v347.__sinval))
                                                           + (float)((float)(v351.__cosval * -0.15607) * v347.__sinval))
                                                   + (float)(v347.__sinval * 0.045487))
                                           + (float)((float)(v346 * -0.094484) * v347.__sinval))
                                   + (float)((float)(v346 * 0.27048) * v347.__sinval))
                           + (float)((float)(v350.__cosval * -0.014202) * v347.__sinval))
                   + (float)((float)(v350.__cosval * 0.2217) * v347.__sinval))
           + (float)((float)((float)(v346 * 0.14338) * v350.__cosval) * v347.__sinval);
      float v374 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v373 + (float)(v347.__sinval * 0.0)) + (float)((float)((float)(v346 * -0.082677) * 0.0) * v347.__sinval)) + (float)((float)((float)(v350.__cosval * -0.22325) * 0.0) * v347.__sinval)) + (float)((float)(v351.__sinval * -0.10838) * v347.__sinval)) + (float)((float)(v351.__sinval * 0.050254) * v347.__sinval)) + (float)((float)((float)(v346 * -0.11465) * v351.__sinval) * v347.__sinval)) + (float)(v347.__sinval * 0.0)) + (float)((float)(v352.__sinval * 0.016123) * v347.__sinval)) + (float)(v347.__sinval * -0.0)) + (float)((float)((float)(v386 * -0.013051) * 0.0) * v347.__sinval)) + (float)((float)((float)(v351.__cosval * 0.010975) * 0.0) * v347.__sinval)) + (float)((float)((float)(v346 * -0.26384) * 0.0) * v347.__sinval)) + (float)((float)((float)(v350.__cosval * -0.22252) * 0.0) * v347.__sinval)) + (float)((float)((float)((float)(v346 * -0.19312) * v350.__cosval) * 0.0) * v347.__sinval)) + (float)((float)((float)(v351.__sinval * 0.14685) * 0.0) * v347.__sinval)) + (float)(v350.__sinval * -8.3485)) + (float)(v350.__sinval * 4.7303)) + (float)((float)(v386 * -0.23753) * v350.__sinval)) + (float)((float)(v348.__cosval * -0.0048048) * v350.__sinval)) + (float)(v350.__sinval * 1.2158)) + (float)((float)(v346 * 0.38722) * v350.__sinval)) + (float)((float)(v346 * 0.076032) * v350.__sinval)) + (float)((float)(v347.__cosval * 0.39607) * v350.__sinval)) + (float)((float)(v347.__cosval * -0.085921) * v350.__sinval)) + (float)((float)((float)(v346 * -0.40917) * v347.__cosval) * v350.__sinval)) + (float)(v350.__sinval * -0.0)) + (float)((float)((float)(v346 * 0.12526) * 0.0) * v350.__sinval)) + (float)((float)((float)(v347.__cosval * 0.03857) * 0.0) * v350.__sinval))
                                                                                           + (float)((float)(v348.__sinval * 0.21349) * v350.__sinval))
                                                                                   + (float)((float)(v348.__sinval * -0.094448)
                                                                                           * v350.__sinval))
                                                                           + (float)((float)((float)(v346 * -0.13581)
                                                                                           * v348.__sinval)
                                                                                   * v350.__sinval))
                                                                   + (float)(v350.__sinval * -0.0))
                                                           + (float)((float)(v349.__sinval * 0.098125) * v350.__sinval))
                                                   + (float)(v350.__sinval * 0.0))
                                           + (float)((float)((float)(v386 * 0.066185) * 0.0) * v350.__sinval))
                                   + (float)((float)((float)(v348.__cosval * -0.48068) * 0.0) * v350.__sinval))
                           + (float)((float)((float)(v346 * 0.086225) * 0.0) * v350.__sinval))
                   + (float)((float)((float)(v347.__cosval * 0.11973) * 0.0) * v350.__sinval))
           + (float)((float)((float)((float)(v346 * 0.36598) * v347.__cosval) * 0.0) * v350.__sinval);
      float v359 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v374 + (float)((float)((float)(v348.__sinval * -0.099095) * 0.0) * v350.__sinval))
                                                                                           + (float)((float)(v347.__sinval * -0.65276) * v350.__sinval))
                                                                                   + (float)((float)(v347.__sinval * 0.23039)
                                                                                           * v350.__sinval))
                                                                           + (float)((float)((float)(v386 * 0.057517)
                                                                                           * v347.__sinval)
                                                                                   * v350.__sinval))
                                                                   + (float)((float)(v347.__sinval * 0.17273)
                                                                           * v350.__sinval))
                                                           + (float)((float)((float)(v346 * 0.046621) * v347.__sinval)
                                                                   * v350.__sinval))
                                                   + (float)((float)((float)(v346 * -0.1666) * v347.__sinval)
                                                           * v350.__sinval))
                                           + (float)((float)(v347.__sinval * -0.0) * v350.__sinval))
                                   + (float)((float)(v347.__sinval * 0.0) * v350.__sinval))
                           + (float)((float)(v347.__sinval * (float)((float)(v346 * 0.26421) * 0.0)) * v350.__sinval))
                   + (float)(v344 * 0.15403))
           + (float)(v345 * 38.738);
      float v360 = -0.875;
      float v361 = 0.93;
      float v362 = -0.07;
    }
    else if (v300 == 2)
    {
      float v369 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v351.__cosval * 0.41417) + (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v386 * 0.17461) + 232.91) + (float)(v348.__cosval * 0.066905)) + (float)(v351.__cosval * -0.31184)) + 10.677) + (float)(v385 * 0.082731)) + (float)(v349.__cosval * 0.054227)) + (float)(v352.__cosval * -0.087131)) + -247.37) + (float)(v386 * -0.093004)) + (float)(v348.__cosval * -0.20598))) + (float)(v346 * -0.60848)) + (float)(v346 * 0.61058)) + (float)((float)(v348.__cosval * -0.21637) * v346)) + (float)((float)(v351.__cosval * 0.011665) * v346)) + (float)(v346 * 0.10581)) + (float)(v347.__cosval * 0.55623)) + (float)(v347.__cosval * -0.36199)) + (float)((float)(v386 * 0.13962) * v347.__cosval)) + (float)((float)(v351.__cosval * 0.018772) * v347.__cosval)) + (float)(v347.__cosval * -0.2837)) + (float)((float)(v346 * 0.003044) * v347.__cosval))
                                                                                           + (float)((float)(v346 * 0.25944) * v347.__cosval))
                                                                                   + (float)(v350.__cosval * 3.1795))
                                                                           + (float)(v350.__cosval * -0.11151))
                                                                   + (float)((float)(v386 * -0.032848) * v350.__cosval))
                                                           + (float)((float)(v348.__cosval * 0.050326) * v350.__cosval))
                                                   + (float)(v350.__cosval * 0.030527))
                                           + (float)((float)(v346 * 0.055045) * v350.__cosval))
                                   + (float)((float)(v346 * 0.024401) * v350.__cosval))
                           + (float)((float)(v347.__cosval * 0.088024) * v350.__cosval))
                   + (float)((float)(v347.__cosval * -0.10845) * v350.__cosval))
           + (float)((float)((float)(v346 * 0.0074555) * v347.__cosval) * v350.__cosval);
      float v370 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v369 + 0.0) + (float)((float)(v346 * 0.32741) * 0.0)) + (float)((float)(v347.__cosval * 0.45893) * 0.0)) + (float)((float)(v350.__cosval * 0.079655) * 0.0)) + (float)(v348.__sinval * -0.10624)) + (float)(v348.__sinval * 0.062297)) + (float)((float)(v346 * 0.021919) * v348.__sinval)) + (float)((float)(v350.__cosval * 0.061559) * v348.__sinval)) + (float)(v348.__sinval * -0.0)) + (float)(v351.__sinval * -0.47055)) + (float)(v351.__sinval * -0.18341)) + (float)((float)(v346 * -0.038674) * v351.__sinval)) + (float)((float)(v347.__cosval * -0.024865) * v351.__sinval)) + (float)(v351.__sinval * -0.0)) + (float)((float)(v348.__sinval * -0.0075084) * v351.__sinval)) + (float)(v349.__sinval * -0.03551)) + (float)(v352.__sinval * -0.062019)) + 0.0) + (float)((float)(v386 * -0.24293) * 0.0)) + (float)((float)(v348.__cosval * 0.17526) * 0.0)) + (float)((float)(v351.__cosval * 0.096434) * 0.0)) + (float)((float)(v346 * 1.8613) * 0.0)) + (float)((float)(v347.__cosval * -0.58284) * 0.0)) + (float)((float)((float)(v346 * 0.2048) * v347.__cosval) * 0.0)) + (float)((float)(v350.__cosval * -0.011461) * 0.0)) + (float)((float)((float)(v346 * 0.34232) * v350.__cosval) * 0.0)) + (float)((float)((float)(v347.__cosval * 0.048586) * v350.__cosval) * 0.0)) + (float)((float)(v348.__sinval * -0.052365) * 0.0)) + (float)((float)((float)(v346 * -0.14485) * v348.__sinval) * 0.0)) + (float)((float)(v348.__sinval * (float)(v350.__cosval * -0.12912)) * 0.0)) + (float)((float)(v351.__sinval * -0.23337) * 0.0)) + (float)((float)((float)(v346 * -0.13392) * v351.__sinval) * 0.0)) + (float)((float)((float)(v347.__cosval * 0.038507) * v351.__sinval) * 0.0)) + (float)((float)(v349.__sinval * -0.10254) * 0.0))
                                                                                           + (float)((float)(v352.__sinval * 0.17642) * 0.0))
                                                                                   + (float)(v347.__sinval * 2.9382))
                                                                           + (float)(v347.__sinval * -2.3544))
                                                                   + (float)((float)(v386 * -0.056721) * v347.__sinval))
                                                           + (float)((float)(v351.__cosval * 0.0070278) * v347.__sinval))
                                                   + (float)(v347.__sinval * -0.19419))
                                           + (float)((float)(v346 * 0.047898) * v347.__sinval))
                                   + (float)((float)(v346 * 0.25534) * v347.__sinval))
                           + (float)((float)(v350.__cosval * -0.11265) * v347.__sinval))
                   + (float)((float)(v350.__cosval * 0.23681) * v347.__sinval))
           + (float)((float)((float)(v346 * -0.018378) * v350.__cosval) * v347.__sinval);
      float v371 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v370 + (float)(v347.__sinval * 0.0)) + (float)((float)((float)(v346 * -0.14465) * 0.0) * v347.__sinval)) + (float)((float)((float)(v350.__cosval * -0.21084) * 0.0) * v347.__sinval)) + (float)((float)(v351.__sinval * -0.030319) * v347.__sinval)) + (float)((float)(v351.__sinval * 0.035953) * v347.__sinval)) + (float)((float)((float)(v346 * -0.024762) * v351.__sinval) * v347.__sinval)) + (float)(v347.__sinval * 0.0)) + (float)((float)(v352.__sinval * -0.072415) * v347.__sinval)) + (float)(v347.__sinval * -0.0)) + (float)((float)((float)(v386 * -0.033363) * 0.0) * v347.__sinval)) + (float)((float)((float)(v351.__cosval * 0.077159) * 0.0) * v347.__sinval)) + (float)((float)((float)(v346 * -0.40257) * 0.0) * v347.__sinval)) + (float)((float)((float)(v350.__cosval * -0.080058) * 0.0) * v347.__sinval)) + (float)((float)((float)((float)(v346 * -0.10734) * v350.__cosval) * 0.0) * v347.__sinval)) + (float)((float)((float)(v351.__sinval * 0.054466) * 0.0) * v347.__sinval)) + (float)(v350.__sinval * -7.3455)) + (float)(v350.__sinval * 5.6269)) + (float)((float)(v386 * -0.19481) * v350.__sinval)) + (float)((float)(v348.__cosval * 0.016546) * v350.__sinval)) + (float)(v350.__sinval * 1.6462)) + (float)((float)(v346 * -0.082088) * v350.__sinval)) + (float)((float)(v346 * 0.25778) * v350.__sinval)) + (float)((float)(v347.__cosval * 0.076909) * v350.__sinval)) + (float)((float)(v347.__cosval * 0.024849) * v350.__sinval)) + (float)((float)((float)(v346 * -0.22466) * v347.__cosval) * v350.__sinval)) + (float)(v350.__sinval * -0.0)) + (float)((float)((float)(v346 * -0.029441) * 0.0) * v350.__sinval)) + (float)((float)((float)(v347.__cosval * -0.049834) * 0.0) * v350.__sinval))
                                                                                           + (float)((float)(v348.__sinval * 0.18317) * v350.__sinval))
                                                                                   + (float)((float)(v348.__sinval * -0.038101)
                                                                                           * v350.__sinval))
                                                                           + (float)((float)((float)(v346 * 0.017179)
                                                                                           * v348.__sinval)
                                                                                   * v350.__sinval))
                                                                   + (float)(v350.__sinval * -0.0))
                                                           + (float)((float)(v349.__sinval * 0.13989) * v350.__sinval))
                                                   + (float)(v350.__sinval * 0.0))
                                           + (float)((float)((float)(v386 * 0.068949) * 0.0) * v350.__sinval))
                                   + (float)((float)((float)(v348.__cosval * -0.48326) * 0.0) * v350.__sinval))
                           + (float)((float)((float)(v346 * 0.063864) * 0.0) * v350.__sinval))
                   + (float)((float)((float)(v347.__cosval * -0.027074) * 0.0) * v350.__sinval))
           + (float)((float)((float)((float)(v346 * 0.19908) * v347.__cosval) * 0.0) * v350.__sinval);
      float v359 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v371 + (float)((float)((float)(v348.__sinval * 0.02047) * 0.0) * v350.__sinval))
                                                                                           + (float)((float)(v347.__sinval * -0.19467) * v350.__sinval))
                                                                                   + (float)((float)(v347.__sinval * 0.007184)
                                                                                           * v350.__sinval))
                                                                           + (float)((float)((float)(v386 * 0.14602)
                                                                                           * v347.__sinval)
                                                                                   * v350.__sinval))
                                                                   + (float)((float)(v347.__sinval * 0.16463)
                                                                           * v350.__sinval))
                                                           + (float)((float)((float)(v346 * -0.098489) * v347.__sinval)
                                                                   * v350.__sinval))
                                                   + (float)((float)((float)(v346 * -0.10192) * v347.__sinval)
                                                           * v350.__sinval))
                                           + (float)((float)(v347.__sinval * -0.0) * v350.__sinval))
                                   + (float)((float)(v347.__sinval * -0.0) * v350.__sinval))
                           + (float)((float)(v347.__sinval * (float)((float)(v346 * 0.40054) * 0.0)) * v350.__sinval))
                   + (float)(v344 * -0.18001))
           + (float)(v345 * 6.0781);
      float v360 = -0.45;
      float v361 = 0.97;
      float v362 = -0.03;
    }
    else
    {
      float v353 = v345;
      float v354 = 0.0;
      float v355 = 0.0;
      if (v300 != 1)
      {
LABEL_244:
        float v380 = (float)((float)(1.0 - (float)(v393 / 0.4)) * 0.0) + (float)((float)(v393 / 0.4) * 2.0);
        float v381 = v380 / 20.0;
        if (v380 > 2.0) {
          float v381 = 0.1;
        }
        if (v380 >= 0.0) {
          float v382 = v381;
        }
        else {
          float v382 = 0.0;
        }
        float v383 = __exp10f(v382);
        float v363 = v354 * v383;
        float v364 = v355 * v383;
        goto LABEL_250;
      }
      float v356 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v351.__cosval * 0.29667) + (float)((float)((float)(v386 * 0.059607) + (float)((float)((float)((float)((float)((float)((float)((float)((float)(v386 * 0.24398) + 173.55) + (float)(v348.__cosval * 0.0096719)) + (float)(v351.__cosval * -0.57195)) + 7.8244) + (float)(v385 * 0.11108)) + (float)(v349.__cosval * -0.021431)) + (float)(v352.__cosval * 0.12549)) + -180.68)) + (float)(v348.__cosval * -0.2028))) + (float)(v346 * -1.1918)) + (float)(v346 * 0.17543)) + (float)((float)(v348.__cosval * -0.20524) * v346)) + (float)((float)(v351.__cosval * 0.51292) * v346)) + (float)(v346 * 0.1792)) + (float)(v347.__cosval * 0.36118)) + (float)(v347.__cosval * -0.28577)) + (float)((float)(v386 * 0.38705) * v347.__cosval)) + (float)((float)(v351.__cosval * 0.28113) * v347.__cosval)) + (float)(v347.__cosval * -0.14872)) + (float)((float)(v346 * 0.097022) * v347.__cosval))
                                                                                           + (float)((float)(v346 * 0.31446) * v347.__cosval))
                                                                                   + (float)(v350.__cosval * -0.24433))
                                                                           + (float)(v350.__cosval * -0.33416))
                                                                   + (float)((float)(v386 * 0.15078) * v350.__cosval))
                                                           + (float)((float)(v348.__cosval * 0.073363) * v350.__cosval))
                                                   + (float)(v350.__cosval * -0.14233))
                                           + (float)((float)(v346 * 0.75144) * v350.__cosval))
                                   + (float)((float)(v346 * 0.035417) * v350.__cosval))
                           + (float)((float)(v347.__cosval * 0.1548) * v350.__cosval))
                   + (float)((float)(v347.__cosval * -0.12763) * v350.__cosval))
           + (float)((float)((float)(v346 * 0.26234) * v347.__cosval) * v350.__cosval);
      float v357 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v356 + 0.0) + (float)((float)(v346 * 0.02378) * 0.0)) + (float)((float)(v347.__cosval * 0.49363) * 0.0)) + (float)((float)(v350.__cosval * 0.077734) * 0.0)) + (float)(v348.__sinval * 0.0095673)) + (float)(v348.__sinval * -0.015961)) + (float)((float)(v346 * 0.27181) * v348.__sinval)) + (float)((float)(v350.__cosval * 0.072475) * v348.__sinval)) + (float)(v348.__sinval * -0.0)) + (float)(v351.__sinval * 0.43098)) + (float)(v351.__sinval * -0.065936)) + (float)((float)(v346 * -0.32313) * v351.__sinval)) + (float)((float)(v347.__cosval * 0.092138) * v351.__sinval)) + (float)(v351.__sinval * -0.0)) + (float)((float)(v348.__sinval * 0.066843) * v351.__sinval)) + (float)(v349.__sinval * 0.21213)) + (float)(v352.__sinval * 0.14892)) + 0.0) + (float)((float)(v386 * -0.15624) * 0.0)) + (float)((float)(v348.__cosval * 0.11956) * 0.0)) + (float)((float)(v351.__cosval * 0.2128) * 0.0)) + (float)((float)(v346 * 1.213) * 0.0)) + (float)((float)(v347.__cosval * -0.54276) * 0.0)) + (float)((float)((float)(v346 * 0.074559) * v347.__cosval) * 0.0)) + (float)((float)(v350.__cosval * -0.99465) * 0.0)) + (float)((float)((float)(v346 * -0.2155) * v350.__cosval) * 0.0)) + (float)((float)((float)(v347.__cosval * 0.033991) * v350.__cosval) * 0.0)) + (float)((float)(v348.__sinval * -0.062352) * 0.0)) + (float)((float)((float)(v346 * -0.18973) * v348.__sinval) * 0.0)) + (float)((float)(v348.__sinval * (float)(v350.__cosval * -0.13734)) * 0.0)) + (float)((float)(v351.__sinval * 0.047439) * 0.0)) + (float)((float)((float)(v346 * 0.16957) * v351.__sinval) * 0.0)) + (float)((float)((float)(v347.__cosval * -0.044035) * v351.__sinval) * 0.0)) + (float)((float)(v349.__sinval * -0.2711) * 0.0))
                                                                                           + (float)((float)(v352.__sinval * 0.043464) * 0.0))
                                                                                   + (float)(v347.__sinval * 3.1729))
                                                                           + (float)(v347.__sinval * -2.6901))
                                                                   + (float)((float)(v386 * 0.05456) * v347.__sinval))
                                                           + (float)((float)(v351.__cosval * 0.050871) * v347.__sinval))
                                                   + (float)(v347.__sinval * 0.24192))
                                           + (float)((float)(v346 * 0.24811) * v347.__sinval))
                                   + (float)((float)(v346 * 0.22546) * v347.__sinval))
                           + (float)((float)(v350.__cosval * 0.0079627) * v347.__sinval))
                   + (float)((float)(v350.__cosval * 0.23104) * v347.__sinval))
           + (float)((float)((float)(v346 * 0.059493) * v350.__cosval) * v347.__sinval);
      float v358 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v357 + (float)(v347.__sinval * 0.0)) + (float)((float)((float)(v346 * 0.01555) * 0.0) * v347.__sinval)) + (float)((float)((float)(v350.__cosval * -0.15208) * 0.0) * v347.__sinval)) + (float)((float)(v351.__sinval * -0.059359) * v347.__sinval)) + (float)((float)(v351.__sinval * 0.035894) * v347.__sinval)) + (float)((float)((float)(v346 * 0.023372) * v351.__sinval) * v347.__sinval)) + (float)(v347.__sinval * 0.0)) + (float)((float)(v352.__sinval * -0.030964) * v347.__sinval)) + (float)(v347.__sinval * -0.0)) + (float)((float)((float)(v386 * -0.026829) * 0.0) * v347.__sinval)) + (float)((float)((float)(v351.__cosval * 0.14178) * 0.0) * v347.__sinval)) + (float)((float)((float)(v346 * -0.40797) * 0.0) * v347.__sinval)) + (float)((float)((float)(v350.__cosval * -0.047317) * 0.0) * v347.__sinval)) + (float)((float)((float)((float)(v346 * -0.12945) * v350.__cosval) * 0.0) * v347.__sinval)) + (float)((float)((float)(v351.__sinval * 0.020718) * 0.0) * v347.__sinval)) + (float)(v350.__sinval * -3.3461)) + (float)(v350.__sinval * 2.2467)) + (float)((float)(v386 * -0.30843) * v350.__sinval)) + (float)((float)(v348.__cosval * 0.10016) * v350.__sinval)) + (float)(v350.__sinval * 1.0645)) + (float)((float)(v346 * 1.5564) * v350.__sinval)) + (float)((float)(v346 * -0.027271) * v350.__sinval)) + (float)((float)(v347.__cosval * 0.54335) * v350.__sinval)) + (float)((float)(v347.__cosval * -0.0078935) * v350.__sinval)) + (float)((float)((float)(v346 * -0.19994) * v347.__cosval) * v350.__sinval)) + (float)(v350.__sinval * -0.0)) + (float)((float)((float)(v346 * 0.2109) * 0.0) * v350.__sinval)) + (float)((float)((float)(v347.__cosval * -0.08669) * 0.0) * v350.__sinval))
                                                                                           + (float)((float)(v348.__sinval * 0.0784) * v350.__sinval))
                                                                                   + (float)((float)(v348.__sinval * -0.14739)
                                                                                           * v350.__sinval))
                                                                           + (float)((float)((float)(v346 * -0.25634)
                                                                                           * v348.__sinval)
                                                                                   * v350.__sinval))
                                                                   + (float)(v350.__sinval * -0.0))
                                                           + (float)((float)(v349.__sinval * 0.049279) * v350.__sinval))
                                                   + (float)(v350.__sinval * 0.0))
                                           + (float)((float)((float)(v386 * 0.18973) * 0.0) * v350.__sinval))
                                   + (float)((float)((float)(v348.__cosval * -0.45187) * 0.0) * v350.__sinval))
                           + (float)((float)((float)(v346 * -0.51005) * 0.0) * v350.__sinval))
                   + (float)((float)((float)(v347.__cosval * 0.14587) * 0.0) * v350.__sinval))
           + (float)((float)((float)((float)(v346 * 0.36258) * v347.__cosval) * 0.0) * v350.__sinval);
      float v359 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v358 + (float)((float)((float)(v348.__sinval * -0.04268) * 0.0) * v350.__sinval))
                                                                                           + (float)((float)(v347.__sinval * 0.12321) * v350.__sinval))
                                                                                   + (float)((float)(v347.__sinval * -0.030402)
                                                                                           * v350.__sinval))
                                                                           + (float)((float)((float)(v386 * -0.019986)
                                                                                           * v347.__sinval)
                                                                                   * v350.__sinval))
                                                                   + (float)((float)(v347.__sinval * 0.010446)
                                                                           * v350.__sinval))
                                                           + (float)((float)((float)(v346 * -0.27917) * v347.__sinval)
                                                                   * v350.__sinval))
                                                   + (float)((float)((float)(v346 * -0.19801) * v347.__sinval)
                                                           * v350.__sinval))
                                           + (float)((float)(v347.__sinval * 0.0) * v350.__sinval))
                                   + (float)((float)(v347.__sinval * -0.0) * v350.__sinval))
                           + (float)((float)(v347.__sinval * (float)((float)(v346 * 0.44556) * 0.0)) * v350.__sinval))
                   + (float)(v344 * 0.23312))
           + (float)(v353 * -0.97659);
      float v360 = -1.2;
      float v361 = 0.6;
      float v362 = -0.4;
    }
    float32x4_t v375 = vmulq_f32(v384, v384);
    float v376 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v375, 2), vaddq_f32(v375, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v375.f32, 1))).f32[0]);
    float v355 = __exp10f(v359 / 20.0);
    float v377 = 1.0;
    float v378 = (float)((float)(v376 + v362) / v361) + (float)((float)(1.0 - (float)((float)(v376 + v362) / v361)) * 0.0);
    if (v378 <= 1.0) {
      float v377 = (float)((float)(v376 + v362) / v361) + (float)((float)(1.0 - (float)((float)(v376 + v362) / v361)) * 0.0);
    }
    if (v378 >= 0.0) {
      float v379 = v377;
    }
    else {
      float v379 = 0.0;
    }
    float v354 = sqrtf(v379) * __exp10f(v360);
    goto LABEL_244;
  }
  *((_OWORD *)this + 45) = xmmword_1BB876200;
  *((_OWORD *)this + 46) = xmmword_1BB876200;
  return 1;
}

uint64_t AUDistance::GetScopeExtended(AUDistance *this, int a2)
{
  if (a2 == 4) {
    return (uint64_t)this + 552;
  }
  else {
    return 0;
  }
}

uint64_t AUDistance::ChangeStreamFormat(AUDistance *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  int v6 = a3;
  int v7 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  uint64_t v9 = 0;
  if (v7 == 1 && !v6)
  {
    if (ausdk::AUScope::GetElement((AUDistance *)((char *)this + 80), 1u))
    {
      uint64_t Element = ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 80), 1u);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, const AudioStreamBasicDescription *))(*(void *)Element + 56))(Element, a5);
      if (getDistanceLogScope(void)::once != -1) {
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
      }
      if (getDistanceLogScope(void)::scope)
      {
        unsigned int v11 = *(NSObject **)getDistanceLogScope(void)::scope;
        if (!*(void *)getDistanceLogScope(void)::scope) {
          return v9;
        }
      }
      else
      {
        unsigned int v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315394;
        float v14 = "AUDistance.cpp";
        __int16 v15 = 1024;
        int v16 = 679;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the stream format for the second input bus to match the format of the first bus.", (uint8_t *)&v13, 0x12u);
      }
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void ___Z19getDistanceLogScopev_block_invoke()
{
}

uint64_t AUDistance::ValidFormat(AUDistance *this, int a2, unsigned int a3, const AudioStreamBasicDescription *a4)
{
  if (a4->mBitsPerChannel == 64 && a4->mFormatID == 1718773105) {
    uint64_t result = (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    uint64_t result = 0;
  }
  if (a2 == 2 || a2 == 1)
  {
    if (a4->mChannelsPerFrame < 0x11) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AUDistance::SupportedNumChannels(AUDistance *this, const AUChannelInfo **a2)
{
  uint64_t v2 = 0;
  int16x8_t v3 = (int16x8_t)xmmword_1BB87A9B0;
  v4.i64[0] = 0x1000100010001;
  v4.i64[1] = 0x1000100010001;
  v5.i64[0] = 0x8000800080008;
  v5.i64[1] = 0x8000800080008;
  do
  {
    v8.val[0] = vaddq_s16(v3, v4);
    v8.val[1] = v8.val[0];
    int v6 = (__int16 *)((char *)&AUDistance::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs + v2);
    vst2q_s16(v6, v8);
    int16x8_t v3 = vaddq_s16(v3, v5);
    v2 += 32;
  }
  while (v2 != 64);
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUDistance::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 16;
}

BOOL AUDistance::StreamFormatWritable(AUDistance *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUDistance::SupportsTail(AUDistance *this)
{
  return 1;
}

double AUDistance::GetTailTime(AUDistance *this)
{
  return 0.0;
}

double AUDistance::GetLatency(AUDistance *this)
{
  return 0.0;
}

uint64_t AUDistance::GetParameterValueStrings(AUDistance *this, int a2, unsigned int a3, const __CFArray **a4)
{
  if (a4) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  else {
    return 4294956430;
  }
}

uint64_t AUDistance::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result = ausdk::AUBase::RestoreState(this, a2);
  if (!result) {
    this[66] = (OpaqueAudioComponentInstance *)((char *)this[66] + 1);
  }
  return result;
}

UInt8 *AUDistance::SaveExtendedScopes(AUDistance *this, __CFData *a2)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);

  return ausdk::AUScope::SaveState(Scope, a2);
}

uint64_t AUDistance::GetParameterInfo(AUDistance *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = 0;
  buffer->unitName = 0;
  if (a2 == 4) {
    return 4294956418;
  }
  if (a2) {
    return 4294956430;
  }
  switch(a3)
  {
    case 0:
      buffer->cfNameString = @"Number of context frames for NeuralNet";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Number of context frames for NeuralNet", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v6 = 0x4100000000000000;
      goto LABEL_10;
    case 1:
      buffer->cfNameString = @"Forgetting factor for input PSD estimation (time constant in seconds)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Forgetting factor for input PSD estimation (time constant in seconds)", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(void *)&buffer->minCFDictionaryRef Value = 0x4040000000000000;
      AudioUnitParameterValue v7 = 0.5;
      goto LABEL_11;
    case 2:
      buffer->cfNameString = @"Wait time between restarting the estimate smoothing (in frames)";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Wait time between restarting the estimate smoothing (in frames)", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(void *)&buffer->minCFDictionaryRef Value = 0x4348000000000000;
      AudioUnitParameterValue v7 = 50.0;
      goto LABEL_18;
    case 3:
      buffer->cfNameString = @"VAD for the input signal at the current frame";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"VAD for the input signal at the current frame", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      uint64_t v6 = 0x3F80000000000000;
LABEL_10:
      *(void *)&buffer->minCFDictionaryRef Value = v6;
      AudioUnitParameterValue v7 = 1.0;
LABEL_11:
      AudioUnitParameterOptions v8 = buffer->flags | 0x40008000;
      goto LABEL_19;
    case 4:
      CFStringRef v9 = @"Distance estimated at the current frame";
      goto LABEL_15;
    case 5:
      CFStringRef v9 = @"Mean of the distance estimate";
      goto LABEL_15;
    case 6:
      CFStringRef v9 = @"Standard deviation of the distance estimate";
LABEL_15:
      buffer->cfNameString = v9;
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(void *)&buffer->minCFDictionaryRef Value = 0x4120000000000000;
      AudioUnitParameterOptions v10 = buffer->flags | 0x40008000;
      buffer->defaultCFDictionaryRef Value = 0.0;
      buffer->AudioUnitParameterOptions flags = v10;
      return result;
    case 7:
      buffer->cfNameString = @"Kalman filter process standard deviation";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Kalman filter process standard deviation", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(void *)&buffer->minCFDictionaryRef Value = 0x3F0000003C23D70ALL;
      AudioUnitParameterValue v7 = 0.1;
      goto LABEL_18;
    case 8:
      buffer->cfNameString = @"Kalman filter observation standard deviation";
      buffer->AudioUnitParameterOptions flags = 0x8000000;
      CFStringGetCString(@"Kalman filter observation standard deviation", buffer->name, 52, 0x8000100u);
      uint64_t result = 0;
      buffer->unit = kAudioUnitParameterUnit_Meters;
      *(void *)&buffer->minCFDictionaryRef Value = 0x400000003C23D70ALL;
      AudioUnitParameterValue v7 = 0.5;
LABEL_18:
      AudioUnitParameterOptions v8 = buffer->flags | 0xC0000000;
LABEL_19:
      buffer->defaultCFDictionaryRef Value = v7;
      buffer->AudioUnitParameterOptions flags = v8;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUDistance::GetParameterList(AUDistance *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2) {
    return 4294956430;
  }
  if (a3)
  {
    *(_OWORD *)a3 = xmmword_1BB8727D0;
    *((_OWORD *)a3 + 1) = xmmword_1BB879D60;
    a3[8] = 8;
  }
  uint64_t result = 0;
  *a4 = 9;
  return result;
}

uint64_t AUDistance::Render(AUDistance *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  AudioUnitParameterOptions v10 = (AUDistance *)((char *)this + 80);
  for (char i = 1; ; char i = 0)
  {
    char v12 = i;
    uint64_t Element = ausdk::AUScope::GetElement(v10, v8);
    if (!Element || !*(_DWORD *)(Element + 172))
    {
      char v9 = 1;
      goto LABEL_7;
    }
    float v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v10, v8);
    uint64_t v15 = ausdk::AUInputElement::PullInput(v14, a2, a3, v8, a4);
    if (v15) {
      break;
    }
LABEL_7:
    uint64_t v8 = 1;
    if ((v12 & 1) == 0)
    {
      int v16 = (ausdk::AUIOElement *)ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 128), 0);
      uint64_t v17 = 0;
      uint64_t v22 = ausdk::AUIOElement::PrepareBuffer(v16, a4);
      if ((v9 & 1) == 0)
      {
        uint64_t v18 = ausdk::AUScope::SafeGetElement(v10, 0);
        *(void *)AudioTimeStamp buf = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
        uint64_t v19 = ausdk::AUScope::SafeGetElement(v10, 1u);
        *(void *)&uint8_t buf[8] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v19 + 144));
        return (*(uint64_t (**)(AUDistance *, unsigned int *, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 2, buf, 1, &v22);
      }
      return v17;
    }
  }
  uint64_t v17 = v15;
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    unsigned int v20 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      return v17;
    }
  }
  else
  {
    unsigned int v20 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUDistance.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 734;
    __int16 v24 = 1024;
    int v25 = v8;
    _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Pull failed on input (%u)", buf, 0x18u);
  }
  return v17;
}

uint64_t AUDistance::ProcessMultipleBufferLists(AUDistance *this, unsigned int *a2, AudioDSP::Utility *a3, unsigned int a4, const AudioBufferList **a5, unsigned int a6, AudioBufferList **a7)
{
  int v9 = (int)a3;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *((void *)this + 66);
  if (*((void *)this + 67) != v11)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
    *((float *)this + 157) = ausdk::AUElement::GetParameter(Element, 3u);
    int v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
    *((float *)this + 161) = ausdk::AUElement::GetParameter(v13, 7u);
    float v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
    *((float *)this + 162) = ausdk::AUElement::GetParameter(v14, 8u);
    uint64_t v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
    unsigned int Parameter = ausdk::AUElement::GetParameter(v15, 2u);
    *((_DWORD *)this + 156) = Parameter;
    uint64_t v17 = (float32x2_t *)*((void *)this + 82);
    if (v17)
    {
      v17[5].i32[1] = *((_DWORD *)this + 157);
      v17[20] = vmul_f32(*(float32x2_t *)((char *)this + 644), *(float32x2_t *)((char *)this + 644));
      v17[26].i32[0] = Parameter;
    }
    *((void *)this + 67) = v11;
  }
  if (*((_DWORD *)this + 84) != v9) {
    return 4294956422;
  }
  uint64_t v18 = (int *)*a5;
  if (!*a5)
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      int v25 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      int v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v49.unint64_t mNumberBuffers = 136315394;
      *(void *)(&v49.mNumberBuffers + 1) = "AUDistance.cpp";
      LOWORD(v49.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v49.mBuffers[0].mDataByteSize + 2) = 801;
      float32x4_t v27 = "%25s:%-5d MCLPOutSignals cannot be NULL. It is a required input.";
LABEL_49:
      _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&v49, 0x12u);
    }
    return 4294956420;
  }
  int v19 = *v18;
  if (*v18 != *((_DWORD *)this + 154))
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      uint64_t v26 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      uint64_t v26 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    int v28 = *((_DWORD *)this + 154);
    v49.unint64_t mNumberBuffers = 136315650;
    *(void *)(&v49.mNumberBuffers + 1) = "AUDistance.cpp";
    LOWORD(v49.mBuffers[0].mDataByteSize) = 1024;
    *(UInt32 *)((char *)&v49.mBuffers[0].mDataByteSize + 2) = 807;
    WORD1(v49.mBuffers[0].mData) = 1024;
    HIDWORD(v49.mBuffers[0].mData) = v28;
    int8x16_t v29 = "%25s:%-5d Input MCLPOutSignals buffer expected with (%u) channels.";
LABEL_71:
    _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v49, 0x18u);
    return 4294956428;
  }
  unsigned int v20 = a5[1];
  if (!v20)
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      int v25 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        return 4294956420;
      }
    }
    else
    {
      int v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v49.unint64_t mNumberBuffers = 136315394;
      *(void *)(&v49.mNumberBuffers + 1) = "AUDistance.cpp";
      LOWORD(v49.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v49.mBuffers[0].mDataByteSize + 2) = 815;
      float32x4_t v27 = "%25s:%-5d ECOutSignals cannot be NULL. It is a required input.";
      goto LABEL_49;
    }
    return 4294956420;
  }
  if (v20->mNumberBuffers != v19)
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      uint64_t v26 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      uint64_t v26 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      return 4294956428;
    }
    int v30 = *((_DWORD *)this + 154);
    v49.unint64_t mNumberBuffers = 136315650;
    *(void *)(&v49.mNumberBuffers + 1) = "AUDistance.cpp";
    LOWORD(v49.mBuffers[0].mDataByteSize) = 1024;
    *(UInt32 *)((char *)&v49.mBuffers[0].mDataByteSize + 2) = 821;
    WORD1(v49.mBuffers[0].mData) = 1024;
    HIDWORD(v49.mBuffers[0].mData) = v30;
    int8x16_t v29 = "%25s:%-5d Input ECOutSignals buffer expected with (%u) channels.";
    goto LABEL_71;
  }
  if (*a7 && (*a7)->mNumberBuffers != v19)
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      uint64_t v26 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      uint64_t v26 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      int v34 = *((_DWORD *)this + 154);
      v49.unint64_t mNumberBuffers = 136315650;
      *(void *)(&v49.mNumberBuffers + 1) = "AUDistance.cpp";
      LOWORD(v49.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&v49.mBuffers[0].mDataByteSize + 2) = 831;
      WORD1(v49.mBuffers[0].mData) = 1024;
      HIDWORD(v49.mBuffers[0].mData) = v34;
      int8x16_t v29 = "%25s:%-5d Output OutputSignals buffer expected with (%u) channels.";
      goto LABEL_71;
    }
    return 4294956428;
  }
  __int16 v40 = 0;
  unsigned __int8 v39 = 0;
  float v21 = (AudioDSP::Utility *)(2 * *((_DWORD *)this + 151));
  *(void *)&v49.unint64_t mNumberBuffers = *((void *)this + 76);
  v49.mBuffers[0] = (AudioBuffer)xmmword_1BB8727B0;
  int v50 = 4;
  int v51 = v19;
  uint64_t v52 = 32;
  AudioDSP::Utility::DetectNonFinites(v21, v18, &v49, (const AudioStreamBasicDescription *)((char *)&v40 + 1), (BOOL *)a5);
  AudioDSP::Utility::DetectNonFinites(v21, a5[1], &v49, (const AudioStreamBasicDescription *)&v40, v22);
  if (!*((unsigned char *)this + 544) && (!(HIBYTE(v40) | v40) || !*((unsigned char *)this + 620)))
  {
    DistanceEstimator::processBufferList(*((DistanceEstimator **)this + 82), *a5, a5[1], *a7);
    uint64_t v31 = *((void *)this + 82);
    *((void *)this + 79) = *(void *)(v31 + 196);
    *((float *)this + 160) = sqrtf(*(float *)(v31 + 204));
    AudioDSP::Utility::DetectNonFinites(v21, *a7, &v49, (const AudioStreamBasicDescription *)&v39, v32);
    if (!v39 || !*((unsigned char *)this + 620)) {
      goto LABEL_87;
    }
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      int32x4_t v33 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        goto LABEL_80;
      }
    }
    else
    {
      int32x4_t v33 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = 136315650;
      float32x4_t v42 = "AUDistance.cpp";
      __int16 v43 = 1024;
      int v44 = 882;
      __int16 v45 = 1024;
      int v46 = v39;
      _os_log_impl(&dword_1BB0CE000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDistance: (OutputSignals) is NOT finite: (%d)", (uint8_t *)&v41, 0x18u);
      if (getDistanceLogScope(void)::once != -1) {
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
      }
    }
LABEL_80:
    if (getDistanceLogScope(void)::scope)
    {
      float32x4_t v35 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope)
      {
LABEL_86:
        (*(void (**)(AUDistance *))(*(void *)this + 64))(this);
        CopyBufferList(&(*a5)->mNumberBuffers, *a7);
        goto LABEL_87;
      }
    }
    else
    {
      float32x4_t v35 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = 136315394;
      float32x4_t v42 = "AUDistance.cpp";
      __int16 v43 = 1024;
      int v44 = 885;
      _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reseting the distance estimator.\n", (uint8_t *)&v41, 0x12u);
    }
    goto LABEL_86;
  }
  *((void *)this + 79) = 0;
  *((_DWORD *)this + 160) = 0;
  CopyBufferList(&(*a5)->mNumberBuffers, *a7);
  if (HIBYTE(v40) | v40)
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      __float2 v23 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        goto LABEL_87;
      }
    }
    else
    {
      __float2 v23 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = 136315906;
      float32x4_t v42 = "AUDistance.cpp";
      __int16 v43 = 1024;
      int v44 = 860;
      __int16 v45 = 1024;
      int v46 = HIBYTE(v40);
      __int16 v47 = 1024;
      int v48 = v40;
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AUDistance: (MCLPOutSignals, ECOutSignals) is NOT finite: (%d, %d)", (uint8_t *)&v41, 0x1Eu);
    }
  }
LABEL_87:
  float32x4_t v36 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v36, 4u, *((float *)this + 158), 0);
  int32x4_t v37 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v37, 5u, *((float *)this + 159), 0);
  int8x16_t v38 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v38, 6u, *((float *)this + 160), 0);
  return 0;
}

uint64_t AUDistance::CanScheduleParameters(AUDistance *this)
{
  return 0;
}

uint64_t AUDistance::SetParameter(AUDistance *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (a3 == 4)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 552), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    return 0;
  }
  else if (a3)
  {
    return 4294956418;
  }
  else
  {
    uint64_t v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
    ausdk::AUElement::SetParameter(v8, a2, a5, 0);
    uint64_t result = 0;
    ++*((void *)this + 66);
  }
  return result;
}

uint64_t AUDistance::SetProperty(AUDistance *this, int a2, int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return 4294956417;
  }
  if (a2 != 3700)
  {
    if (a2 != 3696)
    {
      if (a2 == 21)
      {
        uint64_t v6 = 0;
        *((unsigned char *)this + 544) = *a5 != 0;
        return v6;
      }
      return 4294956417;
    }
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      AudioUnitParameterOptions v10 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        goto LABEL_20;
      }
    }
    else
    {
      AudioUnitParameterOptions v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v15 = "AUDistance.cpp";
      __int16 v16 = 1024;
      int v17 = 350;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the property PropertyIDs::DistanceEstimatorNeuralNet", buf, 0x12u);
    }
LABEL_20:
    if (a5)
    {
      uint64_t v11 = *(const void **)a5;
      if (v11)
      {
        CFRetain(v11);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v11);
      }
      else
      {
        CFTypeRef cf = 0;
      }
      if (*((void *)this + 82)) {
        std::unique_ptr<DistanceEstimator>::reset[abi:ne180100]((uint64_t *)this + 82, 0);
      }
      if (getDistanceLogScope(void)::once != -1) {
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
      }
      operator new();
    }
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      char v12 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        return 4294956445;
      }
    }
    else
    {
      char v12 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v15 = "AUDistance.cpp";
      __int16 v16 = 1024;
      int v17 = 353;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d The CFDictionaryRef passed to SetProperty is null.\n", buf, 0x12u);
    }
    return 4294956445;
  }
  uint64_t v6 = 4294956445;
  if (a6 >= 4)
  {
    if (*(unsigned char *)a5) {
      return 0;
    }
    else {
      return 4294956445;
    }
  }
  return v6;
}

void sub_1BB6FC0F8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BB6FC11C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, std::exception a11, int a12, const void *a13, uint64_t a14, long long buf, __int16 a16, __int16 a17, int a18)
{
  std::unique_ptr<NeuralNet>::reset[abi:ne180100](v22, 0);
  int v25 = *v21;
  if (*v21)
  {
    v18[29] = v25;
    operator delete(v25);
  }
  uint64_t v26 = *a9;
  if (*a9)
  {
    v18[18] = v26;
    operator delete(v26);
  }
  float32x4_t v27 = *v20;
  if (*v20)
  {
    v18[15] = v27;
    operator delete(v27);
  }
  int v28 = *a10;
  if (*a10)
  {
    v18[12] = v28;
    operator delete(v28);
  }
  int8x16_t v29 = *v19;
  if (*v19)
  {
    v18[9] = v29;
    operator delete(v29);
  }
  MEMORY[0x1C185D370](v18, 0x10E0C407F801DA4);
  if (a2 != 2)
  {
    applesauce::CF::DictionaryRef::~DictionaryRef(&a13);
    JUMPOUT(0x1BB6FC10CLL);
  }
  exception_ptr = __cxa_get_exception_ptr(a1);
  a11.__vftable = (std::exception_vtbl *)&unk_1F14C8B68;
  a12 = exception_ptr[2];
  __cxa_begin_catch(a1);
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    uint64_t v31 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v31 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "AUDistance.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 364;
    a17 = 1024;
    a18 = a12;
    _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not load DistanceEstimator plist, exception (%d).\n", (uint8_t *)&buf, 0x18u);
  }
LABEL_20:
  std::exception::~exception(&a11);
  __cxa_end_catch();
  JUMPOUT(0x1BB6FB9F0);
}

uint64_t *std::unique_ptr<DistanceEstimator>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    int16x8_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      sparse_matrix_destroy(v3);
      *(void *)(v2 + 56) = 0;
    }
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 256), 0);
    std::unique_ptr<NeuralNet>::reset[abi:ne180100]((NeuralNet **)(v2 + 256), 0);
    BOOL v4 = *(void **)(v2 + 224);
    if (v4)
    {
      *(void *)(v2 + 232) = v4;
      operator delete(v4);
    }
    int16x8_t v5 = *(void **)(v2 + 136);
    if (v5)
    {
      *(void *)(v2 + 144) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(v2 + 112);
    if (v6)
    {
      *(void *)(v2 + 120) = v6;
      operator delete(v6);
    }
    AudioUnitParameterValue v7 = *(void **)(v2 + 88);
    if (v7)
    {
      *(void *)(v2 + 96) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(v2 + 64);
    if (v8)
    {
      *(void *)(v2 + 72) = v8;
      operator delete(v8);
    }
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t AUDistance::GetProperty(AUDistance *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 == 3700)
  {
    uint64_t v6 = (unsigned __int8 *)this + 376;
  }
  else
  {
    if (a2 != 21) {
      return 4294956417;
    }
    uint64_t v6 = (unsigned __int8 *)this + 544;
  }
  uint64_t result = 0;
  *a5 = *v6;
  return result;
}

uint64_t AUDistance::GetPropertyInfo(AUDistance *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3 || a2 != 3700 && a2 != 21) {
    return 4294956417;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 4;
  return result;
}

uint64_t AUDistance::Reset(AUDistance *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    uint64_t v1 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      return 0;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315394;
    BOOL v4 = "AUDistance.cpp";
    __int16 v5 = 1024;
    int v6 = 194;
    _os_log_impl(&dword_1BB0CE000, v1, OS_LOG_TYPE_INFO, "%25s:%-5d Resetting the AU.", (uint8_t *)&v3, 0x12u);
  }
  return 0;
}

void AUDistance::Cleanup(AUDistance *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    __int16 v5 = "AUDistance.cpp";
    __int16 v6 = 1024;
    int v7 = 180;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Cleanup.", (uint8_t *)&v4, 0x12u);
  }
LABEL_9:
  if (*((unsigned char *)this + 600))
  {
    uint64_t v3 = *((void *)this + 82);
    (*(void (**)(void))(***(void ***)(v3 + 256) + 48))(**(void **)(v3 + 256));
    vDSP_vclr(*(float **)(v3 + 64), 1, (uint64_t)(*(void *)(v3 + 72) - *(void *)(v3 + 64)) >> 2);
    vDSP_vclr(*(float **)(v3 + 88), 1, (uint64_t)(*(void *)(v3 + 96) - *(void *)(v3 + 88)) >> 2);
    vDSP_vclr(*(float **)(v3 + 112), 1, (uint64_t)(*(void *)(v3 + 120) - *(void *)(v3 + 112)) >> 2);
    vDSP_vclr(*(float **)(v3 + 136), 1, (uint64_t)(*(void *)(v3 + 144) - *(void *)(v3 + 136)) >> 2);
    vDSP_vclr(*(float **)(v3 + 224), 1, (uint64_t)(*(void *)(v3 + 232) - *(void *)(v3 + 224)) >> 2);
    *(_DWORD *)(v3 + 44) = 1065353216;
    *(_DWORD *)(v3 + 196) = 0;
    *(_DWORD *)(v3 + 200) = 0;
    *(_DWORD *)(v3 + 204) = *(_DWORD *)(v3 + 40);
    *(_DWORD *)(v3 + 212) = 0;
    *(_WORD *)(v3 + 216) = 256;
    *(float *)(v3 + 168) = *(float *)(v3 + 164) + *(float *)(v3 + 160);
  }
  *((void *)this + 79) = 0;
  *((_DWORD *)this + 160) = 0;
}

uint64_t AUDistance::Initialize(AUDistance *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (!getDistanceLogScope(void)::scope)
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
LABEL_7:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v28 = 136315394;
      int8x16_t v29 = "AUDistance.cpp";
      __int16 v30 = 1024;
      int v31 = 83;
      _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing.", (uint8_t *)&v28, 0x12u);
    }
    goto LABEL_9;
  }
  uint64_t v2 = *(NSObject **)getDistanceLogScope(void)::scope;
  if (*(void *)getDistanceLogScope(void)::scope) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 80), 0);
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(Element + 80);
  *((_DWORD *)this + 154) = *(_DWORD *)(Element + 108);
  *((void *)this + 76) = v5;
  char v6 = 1;
  do
  {
    char v7 = v6;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 80), v4) + 108) != *((_DWORD *)this + 154))
    {
      if (getDistanceLogScope(void)::once != -1) {
        dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
      }
      if (getDistanceLogScope(void)::scope)
      {
        uint64_t v11 = *(NSObject **)getDistanceLogScope(void)::scope;
        if (!*(void *)getDistanceLogScope(void)::scope) {
          return 4294956421;
        }
      }
      else
      {
        uint64_t v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = *((_DWORD *)this + 154);
        int v28 = 136315650;
        int8x16_t v29 = "AUDistance.cpp";
        __int16 v30 = 1024;
        int v31 = 96;
        __int16 v32 = 1024;
        int v33 = v12;
LABEL_42:
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d The number of input channels not equal to the number of expected channels (%u).", (uint8_t *)&v28, 0x18u);
      }
      return 4294956421;
    }
    char v6 = 0;
    unsigned int v4 = 1;
  }
  while ((v7 & 1) != 0);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDistance *)((char *)this + 128), 0) + 108) != *((_DWORD *)this + 154))
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      uint64_t v11 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        return 4294956421;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = *((_DWORD *)this + 154);
      int v28 = 136315650;
      int8x16_t v29 = "AUDistance.cpp";
      __int16 v30 = 1024;
      int v31 = 105;
      __int16 v32 = 1024;
      int v33 = v14;
      goto LABEL_42;
    }
    return 4294956421;
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, 4u);
  ausdk::AUScope::SetNumberOfElements(Scope, 0x10u);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 84);
  if (!*((unsigned char *)this + 600))
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      int v13 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope)
      {
LABEL_48:
        uint64_t result = 0;
        *((unsigned char *)this + 544) = 1;
        *((void *)this + 79) = 0;
        *((_DWORD *)this + 160) = 0;
        return result;
      }
    }
    else
    {
      int v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 136315394;
      int8x16_t v29 = "AUDistance.cpp";
      __int16 v30 = 1024;
      int v31 = 119;
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initialize called without setting the layers plist! Setting AU in Bypass mode.", (uint8_t *)&v28, 0x12u);
    }
    goto LABEL_48;
  }
  (*(void (**)(AUDistance *))(*(void *)this + 64))(this);
  uint64_t v9 = *((void *)this + 82);
  if (!v9) {
    return 0;
  }
  if (*((double *)this + 76) != *(double *)v9)
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      AudioUnitParameterOptions v10 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        goto LABEL_52;
      }
    }
    else
    {
      AudioUnitParameterOptions v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 136315394;
      int8x16_t v29 = "AUDistance.cpp";
      __int16 v30 = 1024;
      int v31 = 139;
      _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sample rate is not supported! Setting AU in Bypass mode.", (uint8_t *)&v28, 0x12u);
    }
LABEL_52:
    *((unsigned char *)this + 544) = 1;
    uint64_t v9 = *((void *)this + 82);
  }
  if (*((_DWORD *)this + 151) != *(_DWORD *)(v9 + 8))
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      __int16 v16 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        goto LABEL_62;
      }
    }
    else
    {
      __int16 v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 136315394;
      int8x16_t v29 = "AUDistance.cpp";
      __int16 v30 = 1024;
      int v31 = 145;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Block size is not supported! Setting AU in Bypass mode.", (uint8_t *)&v28, 0x12u);
    }
LABEL_62:
    *((unsigned char *)this + 544) = 1;
    uint64_t v9 = *((void *)this + 82);
  }
  if (*((_DWORD *)this + 154) != *(_DWORD *)(v9 + 12))
  {
    if (getDistanceLogScope(void)::once != -1) {
      dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
    }
    if (getDistanceLogScope(void)::scope)
    {
      int v17 = *(NSObject **)getDistanceLogScope(void)::scope;
      if (!*(void *)getDistanceLogScope(void)::scope) {
        goto LABEL_72;
      }
    }
    else
    {
      int v17 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 136315394;
      int8x16_t v29 = "AUDistance.cpp";
      __int16 v30 = 1024;
      int v31 = 151;
      _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Number of microphones is not supported! Setting AU in Bypass mode.", (uint8_t *)&v28, 0x12u);
    }
LABEL_72:
    *((unsigned char *)this + 544) = 1;
  }
  (*(void (**)(AUDistance *, void, void))(*(void *)this + 72))(this, 0, 0);
  uint64_t v18 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v18, 0, (float)*(unsigned int *)(*((void *)this + 82) + 16), 0);
  int v19 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v19, 1u, *(float *)(*((void *)this + 82) + 20), 0);
  unsigned int v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v20, 3u, *(float *)(*((void *)this + 82) + 44), 0);
  float v21 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v21, 4u, *((float *)this + 158), 0);
  uint64_t v22 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v22, 5u, *((float *)this + 159), 0);
  __float2 v23 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v23, 6u, *((float *)this + 160), 0);
  __int16 v24 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v24, 7u, sqrtf(*(float *)(*((void *)this + 82) + 160)), 0);
  int v25 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v25, 8u, sqrtf(*(float *)(*((void *)this + 82) + 164)), 0);
  uint64_t v26 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUDistance *)((char *)this + 32), 0);
  ausdk::AUElement::SetParameter(v26, 2u, (float)*(unsigned int *)(*((void *)this + 82) + 208), 0);
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    float32x4_t v27 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      return 0;
    }
  }
  else
  {
    float32x4_t v27 = MEMORY[0x1E4F14500];
  }
  uint64_t result = os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
  if (result)
  {
    int v28 = 136315394;
    int8x16_t v29 = "AUDistance.cpp";
    __int16 v30 = 1024;
    int v31 = 171;
    _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_INFO, "%25s:%-5d Successfully Initialized.", (uint8_t *)&v28, 0x12u);
    return 0;
  }
  return result;
}

void AUDistance::CreateExtendedElements(AUDistance *this)
{
  uint64_t v1 = (AUDistance *)((char *)this + 552);
  ausdk::AUScope::Initialize((AUDistance *)((char *)this + 552), this, 4, 16);
  for (unsigned int i = 0; i != 16; ++i)
  {
    std::to_string(&v8, i);
    uint64_t v3 = std::string::insert(&v8, 0, "Mic", 3uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    CFStringRef v6 = CFStringCreateWithCString(0, (const char *)v5, 0x8000100u);
    uint64_t Element = ausdk::AUScope::GetElement(v1, i);
    ausdk::Owned<__CFString const*>::operator=((const void **)(Element + 72), v6);
    CFRelease(v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1BB6FCFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AUDistance::~AUDistance(AUDistance *this)
{
  AUDistance::~AUDistance(this);

  JUMPOUT(0x1C185D370);
}

{
  NSObject *v2;
  unsigned char v3[12];
  __int16 v4;
  int v5;
  uint64_t v6;

  CFStringRef v6 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14BFF50;
  if (getDistanceLogScope(void)::once != -1) {
    dispatch_once(&getDistanceLogScope(void)::once, &__block_literal_global_28506);
  }
  if (getDistanceLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)getDistanceLogScope(void)::scope;
    if (!*(void *)getDistanceLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)&v3[4] = "AUDistance.cpp";
    long long v4 = 1024;
    uint64_t v5 = 75;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Destructed.", v3, 0x12u);
  }
LABEL_9:
  std::unique_ptr<DistanceEstimator>::reset[abi:ne180100]((uint64_t *)this + 82, 0);
  std::unique_ptr<DistanceEstimator>::reset[abi:ne180100]((uint64_t *)this + 82, 0);
  *(void *)uint64_t v3 = (char *)this + 568;
  std::vector<std::unique_ptr<ausdk::AUElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
  ausdk::AUBase::~AUBase(this);
}

void EndpointVAD3::~EndpointVAD3(EndpointVAD3 *this)
{
  EndpointVAD3::~EndpointVAD3(this);

  JUMPOUT(0x1C185D370);
}

{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  void **v31;

  *(void *)this = &unk_1F14C01A0;
  *((unsigned char *)this + 8) = 0;
  uint64_t v2 = (void **)((char *)this + 112);
  uint64_t v3 = (void *)*((void *)this + 14);
  long long v4 = (void *)*((void *)this + 15);
  while (v4 != v3)
  {
    CFStringRef v6 = (void *)*--v4;
    uint64_t v5 = v6;
    *long long v4 = 0;
    if (v6) {
      std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](v5);
    }
  }
  *((void *)this + 15) = v3;
  *((void *)this + 64) = *((void *)this + 63);
  char v7 = (const void *)*((void *)this + 21);
  if (v7)
  {
    CFRelease(v7);
    *((void *)this + 21) = 0;
  }
  std::string v8 = (const void *)*((void *)this + 22);
  if (v8)
  {
    CFRelease(v8);
    *((void *)this + 22) = 0;
  }
  uint64_t v9 = (const void *)*((void *)this + 23);
  if (v9)
  {
    CFRelease(v9);
    *((void *)this + 23) = 0;
  }
  int64_t v10 = (const void *)*((void *)this + 24);
  if (v10)
  {
    CFRelease(v10);
    *((void *)this + 24) = 0;
  }
  uint64_t v11 = (const void *)*((void *)this + 25);
  if (v11)
  {
    CFRelease(v11);
    *((void *)this + 25) = 0;
  }
  int v12 = (const void *)*((void *)this + 26);
  if (v12)
  {
    CFRelease(v12);
    *((void *)this + 26) = 0;
  }
  VAD3Configuration::~VAD3Configuration((EndpointVAD3 *)((char *)this + 536));
  int v13 = (void *)*((void *)this + 63);
  if (v13)
  {
    *((void *)this + 64) = v13;
    operator delete(v13);
  }
  int v31 = (void **)((char *)this + 480);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v31);
  int v31 = (void **)((char *)this + 456);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v31);
  int v31 = (void **)((char *)this + 432);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v31);
  int v14 = (void *)*((void *)this + 51);
  if (v14)
  {
    *((void *)this + 52) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 48);
  if (v15)
  {
    *((void *)this + 49) = v15;
    operator delete(v15);
  }
  __int16 v16 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v16) {
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v16);
  }
  int v17 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v17) {
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v17);
  }
  uint64_t v18 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  int v19 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v19) {
    std::default_delete<std::vector<unsigned int>>::operator()[abi:ne180100](v19);
  }
  unsigned int v20 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  float v21 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v21) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v21);
  }
  uint64_t v22 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v22) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v22);
  }
  __float2 v23 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v23) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v23);
  }
  __int16 v24 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v24) {
    std::default_delete<std::vector<float>>::operator()[abi:ne180100](v24);
  }
  int v25 = (void *)*((void *)this + 33);
  if (v25)
  {
    *((void *)this + 34) = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)*((void *)this + 30);
  if (v26)
  {
    *((void *)this + 31) = v26;
    operator delete(v26);
  }
  float32x4_t v27 = (void *)*((void *)this + 27);
  if (v27)
  {
    *((void *)this + 28) = v27;
    operator delete(v27);
  }
  int v31 = v2;
  std::vector<std::unique_ptr<EndpointDecisionLayerVAD3>>::__destroy_vector::operator()[abi:ne180100](&v31);
  std::unique_ptr<MixViterbiProd>::reset[abi:ne180100]((uint64_t *)this + 13, 0);
  int v28 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  int8x16_t v29 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  __int16 v30 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void std::vector<std::unique_ptr<EndpointDecisionLayerVAD3>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    long long v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v7 = (void *)*--v4;
        CFStringRef v6 = v7;
        *long long v4 = 0;
        if (v7) {
          std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (uint64_t *)a1[25];
  a1[25] = 0;
  if (v2) {
    std::default_delete<MRRingBuffer<DataTimeStamp>>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = (uint64_t *)a1[24];
  a1[24] = 0;
  if (v3) {
    std::default_delete<MRRingBuffer<AUEndpointVAD3_Decision>>::operator()[abi:ne180100](v3);
  }
  long long v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }

  JUMPOUT(0x1C185D370);
}

void EndpointVAD3::Initialize(EndpointVAD3 *this, const CAStreamBasicDescription *a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v84, "");
  if (*((void *)this + 21))
  {
    CFDictionaryRef v3 = (const __CFDictionary *)*((void *)this + 22);
    if (v3)
    {
      if (*((void *)this + 23) && *((void *)this + 24) && *((void *)this + 25))
      {
        if (*((unsigned char *)this + 8))
        {
          *((unsigned char *)this + 8) = 0;
          long long v4 = (void *)*((void *)this + 14);
          uint64_t v5 = (void *)*((void *)this + 15);
          if (v5 != v4)
          {
            do
            {
              char v7 = (void *)*--v5;
              CFStringRef v6 = v7;
              *uint64_t v5 = 0;
              if (v7) {
                std::default_delete<EndpointDecisionLayerVAD3>::operator()[abi:ne180100](v6);
              }
            }
            while (v5 != v4);
            CFDictionaryRef v3 = (const __CFDictionary *)*((void *)this + 22);
          }
          *((void *)this + 15) = v4;
          *((void *)this + 64) = *((void *)this + 63);
        }
        *(void *)float v101 = 0;
        float32x4_t v102 = 0;
        uint64_t v103 = 0;
        __int32 v95 = 0;
        __int32 v96 = 0;
        unint64_t v97 = 0;
        memset(&v94, 0, sizeof(v94));
        memset(&v93, 0, sizeof(v93));
        int32x4_t v90 = 0;
        int8x16_t v91 = 0;
        uint64_t v92 = 0;
        float32x4_t v87 = 0;
        float32x4_t v88 = 0;
        uint64_t v89 = 0;
        memset(&v86, 0, sizeof(v86));
        memset(&__p, 0, sizeof(__p));
        long long v99 = 0uLL;
        uint64_t v100 = 0;
        PListReader::GetSerializedFloat32DataFromDict(&v99, v3, @"CategoryNames");
        *(void *)AudioTimeStamp buf = v99;
        StringArrayDecoder::BlobToStringArray_Priv((float **)buf, (uint64_t)v101);
        PListReader::GetSerializedFloat32DataFromDict(&v99, v3, @"CategoryDataMaxes");
        EndpointVAD2::FloatVectorToUIntVector((uint64_t *)&v99, &v94);
        PListReader::GetSerializedFloat32DataFromDict(&v99, v3, @"TimingModelOrders");
        EndpointVAD2::FloatVectorToUIntVector((uint64_t *)&v99, &v93);
        PListReader::GetSerializedFloat32DataFromDict(&v99, v3, @"CategoryValueNames");
        std::string v8 = (float *)v99;
        int64_t v10 = (char *)v95;
        uint64_t v9 = (char *)v96;
        CFDictionaryRef theDict = v3;
        if (v96 != v95)
        {
          do
          {
            v9 -= 24;
            *(void *)AudioTimeStamp buf = v9;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          while (v9 != v10);
          uint64_t v9 = (char *)v95;
        }
        __int32 v96 = (std::string *)v10;
        float v12 = *v8;
        uint64_t v11 = v8 + 1;
        __int32 v98 = v11;
        double v13 = v12 + 0.5;
        unint64_t v14 = (unint64_t)v13;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v9) >> 3) >= (unint64_t)v13)
        {
          if (!v14) {
            goto LABEL_39;
          }
        }
        else
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          float32x4_t v105 = &v97;
          *(void *)AudioTimeStamp buf = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((unint64_t)v13);
          *(void *)&uint8_t buf[8] = *(void *)buf + v10 - v9;
          *(void *)&buf[16] = *(void *)&buf[8];
          *(void *)&unsigned char buf[24] = *(void *)buf + 24 * v15;
          std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v95, buf);
          std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)buf);
        }
        uint64_t v16 = 0;
        do
        {
          long long v82 = 0uLL;
          *(void *)&long long v83 = 0;
          StringArrayDecoder::BlobToStringArray_Priv(&v98, (uint64_t)&v82);
          uint64_t v17 = v82;
          for (uint64_t i = 0; v17 != *((void *)&v82 + 1); v17 += 24)
          {
            if (*(char *)(v17 + 23) < 0) {
              uint64_t v19 = *(void *)(v17 + 8);
            }
            else {
              uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
            }
            i += v19;
          }
          uint64_t v11 = &v11[i + 1 + 0xEAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v82 + 1) - v82) >> 3)];
          __int32 v98 = v11;
          unsigned int v20 = v96;
          if ((unint64_t)v96 >= v97)
          {
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3);
            unint64_t v23 = v22 + 1;
            if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3) > v23) {
              unint64_t v23 = 0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v95) >> 3) >= 0x555555555555555) {
              unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v24 = v23;
            }
            float32x4_t v105 = &v97;
            if (v24) {
              unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v24);
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = (std::string *)(v24 + 24 * v22);
            *(void *)AudioTimeStamp buf = v24;
            *(void *)&uint8_t buf[8] = v26;
            *(void *)&buf[16] = v26;
            *(void *)&unsigned char buf[24] = v24 + 24 * v25;
            v26->__r_.__value_.__r.__words[0] = 0;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, (long long *)v82, *((long long **)&v82 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v82 + 1) - v82) >> 3));
            *(void *)&buf[16] += 24;
            std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v95, buf);
            float v21 = (std::string::__raw *)v96;
            std::__split_buffer<std::vector<std::string>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            v96->__r_.__value_.__r.__words[0] = 0;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, (long long *)v82, *((long long **)&v82 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v82 + 1) - v82) >> 3));
            float v21 = (std::string::__raw *)&v20[1];
          }
          __int32 v96 = (std::string *)v21;
          *(void *)AudioTimeStamp buf = &v82;
          std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          ++v16;
        }
        while (v16 != v14);
LABEL_39:
        PListReader::GetSerializedFloat32DataFromDict(&v99, theDict, @"ULDATFeatureNames");
        *(void *)AudioTimeStamp buf = v99;
        StringArrayDecoder::BlobToStringArray_Priv((float **)buf, (uint64_t)&v90);
        PListReader::GetSerializedFloat32DataFromDict(&v99, theDict, @"ULDATFeatureDataMaxes");
        EndpointVAD2::FloatVectorToUIntVector((uint64_t *)&v99, &v86);
        PListReader::GetSerializedFloat32DataFromDict(&v99, theDict, @"ASASuperFeatureNames");
        *(void *)AudioTimeStamp buf = v99;
        StringArrayDecoder::BlobToStringArray_Priv((float **)buf, (uint64_t)&v87);
        PListReader::GetSerializedFloat32DataFromDict(&v99, theDict, @"ASASuperFeatureDataMaxes");
        EndpointVAD2::FloatVectorToUIntVector((uint64_t *)&v99, &__p);
        if ((void)v99)
        {
          *((void *)&v99 + 1) = v99;
          operator delete((void *)v99);
        }
        if (*((unsigned char *)this + 536))
        {
          if (EndpointVAD3LogScope(void)::once != -1) {
            dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
          }
          if (EndpointVAD3LogScope(void)::scope)
          {
            float32x4_t v27 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
            if (!*(void *)EndpointVAD3LogScope(void)::scope) {
              goto LABEL_50;
            }
          }
          else
          {
            float32x4_t v27 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "VAD3Configuration.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 51;
            _os_log_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d In VAD3Configuration::Initialize, Forcing reinitialization of VAD3Configuration.", buf, 0x12u);
          }
        }
LABEL_50:
        if ((uint8_t *)((char *)this + 544) != v101) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 544), *(std::string **)v101, v102, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v102 - *(void *)v101) >> 3));
        }
        if ((std::vector<unsigned int> *)((char *)this + 568) != &v94) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 568, (char *)v94.__begin_, (uint64_t)v94.__end_, v94.__end_ - v94.__begin_);
        }
        if ((std::vector<unsigned int> *)((char *)this + 616) != &v93) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 616, (char *)v93.__begin_, (uint64_t)v93.__end_, v93.__end_ - v93.__begin_);
        }
        int v28 = (void **)((char *)this + 664);
        if ((std::string **)((char *)this + 664) != &v95)
        {
          __int16 v30 = (long long **)v95;
          int8x16_t v29 = (long long **)v96;
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3);
          uint64_t v32 = *((void *)this + 85);
          uint64_t v33 = *((void *)this + 83);
          if (0xAAAAAAAAAAAAAAABLL * ((v32 - v33) >> 3) < v31)
          {
            if (v33)
            {
              uint64_t v34 = *((void *)this + 84);
              float32x4_t v35 = (void *)*((void *)this + 83);
              if (v34 != v33)
              {
                do
                {
                  v34 -= 24;
                  *(void *)AudioTimeStamp buf = v34;
                  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                }
                while (v34 != v33);
                float32x4_t v35 = *v28;
              }
              *((void *)this + 84) = v33;
              operator delete(v35);
              uint64_t v32 = 0;
              *int v28 = 0;
              *((void *)this + 84) = 0;
              *((void *)this + 85) = 0;
            }
            if (v31 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_136;
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 3);
            uint64_t v37 = 2 * v36;
            if (2 * v36 <= v31) {
              uint64_t v37 = v31;
            }
            unint64_t v38 = v36 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v37;
            if (v38 > 0xAAAAAAAAAAAAAAALL) {
LABEL_136:
            }
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            unsigned __int8 v39 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v38);
            *((void *)this + 83) = v39;
            *((void *)this + 84) = v39;
            *((void *)this + 85) = &v39[v40];
            int v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>((uint64_t)this + 680, v30, v29, v39);
            goto LABEL_73;
          }
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 84) - v33) >> 3) < v31)
          {
            float32x4_t v42 = (long long **)(&v95->__r_.__value_.__l.__data_ + ((*((void *)this + 84) - v33) >> 3));
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((uint64_t)v95, (uint64_t)v42, *((std::vector<std::string> **)this + 83));
            int v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>((uint64_t)this + 680, v42, v29, *((std::string **)this + 84));
LABEL_73:
            *((void *)this + 84) = v41;
            goto LABEL_78;
          }
          __int16 v43 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((uint64_t)v95, (uint64_t)v96, *((std::vector<std::string> **)this + 83));
          int v44 = (std::vector<std::string> *)*((void *)this + 84);
          while (v44 != v43)
          {
            *(void *)AudioTimeStamp buf = --v44;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          *((void *)this + 84) = v43;
        }
LABEL_78:
        if ((std::string **)((char *)this + 752) != &v90) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 752), v90, v91, 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)v90) >> 3));
        }
        if ((std::vector<unsigned int> *)((char *)this + 776) != &v86) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 776, (char *)v86.__begin_, (uint64_t)v86.__end_, v86.__end_ - v86.__begin_);
        }
        if ((std::string **)((char *)this + 800) != &v87) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 800), v87, v88, 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v87) >> 3));
        }
        if ((std::vector<unsigned int> *)((char *)this + 824) != &__p) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 824, (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
        }
        __int16 v45 = (int *)*((void *)this + 72);
        int v46 = (int *)*((void *)this + 71);
        if (v45 == v46)
        {
          int v47 = 1;
        }
        else
        {
          int v49 = *v46;
          int v48 = v46 + 1;
          int v47 = v49;
          while (v48 != v45)
          {
            int v50 = *v48++;
            v47 *= v50;
          }
        }
        *((_DWORD *)this + 184) = v47;
        int v51 = (int *)*((void *)this + 78);
        uint64_t v52 = (int *)*((void *)this + 77);
        if (v51 == v52)
        {
          int v53 = 1;
        }
        else
        {
          int v55 = *v52;
          int8x16_t v54 = v52 + 1;
          int v53 = v55;
          while (v54 != v51)
          {
            int v56 = *v54++;
            v53 *= v56;
          }
        }
        *((_DWORD *)this + 185) = v53;
        *((_DWORD *)this + 186) = v53 * v47;
        VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)this + 71, (std::vector<unsigned int> *)((char *)this + 592));
        VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)this + 77, (std::vector<unsigned int> *)((char *)this + 640));
        std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 688), (uint64_t)(*((void *)this + 72) - *((void *)this + 71)) >> 1);
        int32x4_t v57 = (int *)*((void *)this + 71);
        int8x16_t v58 = (int *)*((void *)this + 72);
        if (v57 != v58)
        {
          float32x4_t v59 = (_DWORD *)*((void *)this + 86);
          float32x4_t v60 = (int *)*((void *)this + 77);
          do
          {
            int v61 = *v57++;
            *float32x4_t v59 = v61;
            int v62 = *v60++;
            v59[1] = v62;
            v59 += 2;
          }
          while (v57 != v58);
        }
        VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)this + 86, (std::vector<unsigned int> *)((char *)this + 712));
        std::vector<std::string>::resize((std::vector<std::string> *)((char *)this + 848), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 95) - *((void *)this + 94)) >> 3)- 0x5555555555555555 * ((uint64_t)(*((void *)this + 101) - *((void *)this + 100)) >> 3));
        int8x16_t v63 = (const std::string *)*((void *)this + 94);
        float32x4_t v64 = (std::string *)*((void *)this + 106);
        while (v63 != *((const std::string **)this + 95))
          std::string::operator=(v64++, v63++);
        for (unint64_t j = (const std::string *)*((void *)this + 100); j != *((const std::string **)this + 101); ++j)
          std::string::operator=(v64++, j);
        std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 872), ((uint64_t)(*((void *)this + 104) - *((void *)this + 103)) >> 2)+ ((uint64_t)(*((void *)this + 98) - *((void *)this + 97)) >> 2));
        unsigned int v66 = (int *)*((void *)this + 97);
        float v67 = (_DWORD *)*((void *)this + 109);
        __int16 v68 = (int *)*((void *)this + 98);
        while (v66 != v68)
        {
          int v69 = *v66++;
          *v67++ = v69;
        }
        unsigned __int8 v70 = (int *)*((void *)this + 103);
        unint64_t v71 = (int *)*((void *)this + 104);
        while (v70 != v71)
        {
          int v72 = *v70++;
          *v67++ = v72;
        }
        VADGenUtils::VectorReverseCumulativeProduct<unsigned int>((uint64_t *)this + 109, (std::vector<unsigned int> *)((char *)this + 896));
        float v73 = (int *)*((void *)this + 110);
        float32x4_t v74 = (int *)*((void *)this + 109);
        if (v73 == v74)
        {
          int v76 = 1;
        }
        else
        {
          int v77 = *v74;
          int32x4_t v75 = v74 + 1;
          int v76 = v77;
          while (v75 != v73)
          {
            int v78 = *v75++;
            v76 *= v78;
          }
        }
        *((_DWORD *)this + 230) = v76;
        *((unsigned char *)this + 536) = 1;
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        if (v86.__begin_)
        {
          v86.__end_ = v86.__begin_;
          operator delete(v86.__begin_);
        }
        *(void *)AudioTimeStamp buf = &v87;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)AudioTimeStamp buf = &v90;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (v93.__begin_)
        {
          v93.__end_ = v93.__begin_;
          operator delete(v93.__begin_);
        }
        if (v94.__begin_)
        {
          v94.__end_ = v94.__begin_;
          operator delete(v94.__begin_);
        }
        *(void *)AudioTimeStamp buf = &v95;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)AudioTimeStamp buf = v101;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        float32x4_t v105 = 0;
        memset(buf, 0, sizeof(buf));
        operator new();
      }
    }
  }
  std::string::__assign_external(&v84, "At least one settings dictionary is null. You must load all settings before initializing.", 0x59uLL);
  if (EndpointVAD3LogScope(void)::once != -1) {
    dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
  }
  if (EndpointVAD3LogScope(void)::scope)
  {
    float32x4_t v79 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
    if (!*(void *)EndpointVAD3LogScope(void)::scope) {
      goto LABEL_135;
    }
  }
  else
  {
    float32x4_t v79 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
  {
    int8x16_t v80 = &v84;
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int8x16_t v80 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "EndpointVAD3.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 331;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v80;
    _os_log_impl(&dword_1BB0CE000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing EndpointVAD3: %s", buf, 0x1Cu);
  }
LABEL_135:
  abort();
}

void sub_1BB6FF1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  *(void *)(v59 + 672) = v60;
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  a19 = &a43;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = &a46;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  a19 = &a55;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)(v61 - 224);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::vector<float>>>::reserve(void *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1BB6FF6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void EndpointVAD3::TranslateFullPosteriorsToMarginalized(uint64_t a1, float ***a2, uint64_t *a3, unsigned int **a4, int **a5)
{
  std::vector<std::vector<std::vector<float>>>::resize(a3, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  for (uint64_t i = (uint64_t *)*a3; i != (uint64_t *)a3[1]; i += 3)
  {
    std::vector<std::vector<float>>::resize(i, a4[1] - *a4);
    uint64_t v11 = *i;
    if (*i != i[1])
    {
      float v12 = *a4;
      do
      {
        unsigned int v13 = *v12++;
        std::vector<float>::resize(v11, v13);
        v11 += 24;
      }
      while (v11 != i[1]);
    }
  }
  uint64_t v15 = *a2;
  unint64_t v14 = a2[1];
  if (v15 != v14)
  {
    uint64_t v16 = (void ***)*a3;
    uint64_t v18 = *a5;
    uint64_t v17 = a5[1];
    if ((unint64_t)(v17 - v18) <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v17 - v18;
    }
    do
    {
      unsigned int v20 = *v16;
      float v21 = v16[1];
      for (unint64_t j = *v16; j != v21; j += 3)
      {
        unint64_t v23 = j[1];
        if (*j != v23) {
          bzero(*j, ((v23 - (unsigned char *)*j - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        }
      }
      unint64_t v24 = *v15;
      uint64_t v25 = v15[1];
      if (*v15 != v25)
      {
        unsigned int v26 = 0;
        do
        {
          if (v17 != v18)
          {
            float32x4_t v27 = *(unsigned int **)(a1 + 592);
            uint64_t v28 = v19;
            unsigned int v29 = v26;
            __int16 v30 = v18;
            do
            {
              unsigned int v31 = *v27++;
              int v32 = v29 / v31;
              v29 %= v31;
              *v30++ = v32;
              --v28;
            }
            while (v28);
            uint64_t v33 = v18;
            uint64_t v34 = (uint64_t *)v20;
            do
            {
              uint64_t v36 = *v34;
              v34 += 3;
              uint64_t v35 = v36;
              LODWORD(v36) = *v33++;
              *(float *)(v35 + 4 * v36) = *v24 + *(float *)(v35 + 4 * v36);
            }
            while (v33 != v17);
          }
          ++v26;
          ++v24;
        }
        while (v24 != v25);
      }
      v16 += 3;
      v15 += 3;
    }
    while (v15 != v14);
  }
}

void EndpointVAD3::UpdateAndDispatchDecisions(uint64_t a1, uint64_t **a2, void *a3, uint64_t *a4, uint64_t a5, unsigned int a6)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  if (*a2 != a2[1])
  {
    unsigned int v7 = a6;
    uint64_t v161 = a5 + 144;
    uint64_t v166 = a5 + 168;
    unint64_t v11 = a6;
    unint64_t v170 = a6;
    uint64_t v171 = *a4;
    do
    {
      uint64_t v12 = *v6;
      unint64_t v13 = (v6[1] - *v6) >> 2;
      if (v13 <= v11) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      if (!*(unsigned char *)(a5 + 224))
      {
        uint64_t v14 = *a4;
        uint64_t v15 = a4[1];
        if (*a4 == v15)
        {
          double v17 = 0.0;
        }
        else
        {
          uint64_t v16 = 0;
          double v17 = 0.0;
          do
          {
            if (v16)
            {
              if (*(double *)(v14 + v16 + 8) < v17) {
                double v17 = *(double *)(v14 + v16 + 8);
              }
            }
            else
            {
              double v17 = *(double *)(v14 + 8);
            }
            v16 += 16;
          }
          while (v14 + v16 != v15);
        }
        double v18 = *(double *)(a5 + 128) * v17;
        *(_DWORD *)(a5 + 144) = 0;
        *(double *)(a5 + 152) = v18;
        *(double *)(a5 + 160) = v17;
        *(void *)(v166 + 16) = *(void *)(v161 + 16);
        *(_OWORD *)uint64_t v166 = *(_OWORD *)v161;
        *(unsigned char *)(a5 + 224) = 1;
        uint64_t v12 = *v6;
        unint64_t v13 = (v6[1] - *v6) >> 2;
      }
      uint64_t v173 = 0;
      if (v13 <= v170) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v170) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v169 = v6;
      ++*(_DWORD *)(a5 + 220);
      *(_DWORD *)AudioTimeStamp buf = *(_DWORD *)(v12 + 4 * v170);
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)v171;
      *(void *)(a5 + 104) = *(void *)(a5 + 96);
      unsigned int v20 = *(char **)(a5 + 16);
      uint64_t v19 = *(char **)(a5 + 24);
      uint64_t v21 = v19 - v20;
      if (v19 == v20)
      {
        unint64_t v23 = *(char **)(a5 + 24);
      }
      else
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
        unint64_t v23 = *(char **)(a5 + 16);
        do
        {
          unint64_t v24 = v22 >> 1;
          uint64_t v25 = &v23[24 * (v22 >> 1)];
          double v26 = *((double *)v25 + 2);
          float32x4_t v27 = v25 + 24;
          v22 += ~(v22 >> 1);
          if (*(double *)&buf[16] > v26) {
            unint64_t v22 = v24;
          }
          else {
            unint64_t v23 = v27;
          }
        }
        while (v22);
      }
      unint64_t v28 = *(void *)(a5 + 32);
      if ((unint64_t)v19 >= v28)
      {
        unint64_t v32 = 1 - 0x5555555555555555 * (v21 >> 3);
        if (v32 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v28 - (void)v20) >> 3) > v32) {
          unint64_t v32 = 0x5555555555555556 * ((uint64_t)(v28 - (void)v20) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v20) >> 3) >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v33);
        }
        else
        {
          uint64_t v35 = 0;
          uint64_t v34 = 0;
        }
        int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v20) >> 3);
        uint64_t v40 = &v35[8 * ((v23 - v20) >> 3)];
        int v41 = &v35[24 * v34];
        if (v39 == v34)
        {
          if (v23 - v20 < 1)
          {
            if (v23 == v20) {
              unint64_t v43 = 1;
            }
            else {
              unint64_t v43 = 0x5555555555555556 * ((v23 - v20) >> 3);
            }
            int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v43);
            uint64_t v40 = &v44[24 * (v43 >> 2)];
            int v41 = &v44[24 * v45];
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            if (v39 >= -1) {
              uint64_t v42 = v39 + 1;
            }
            else {
              uint64_t v42 = v39 + 2;
            }
            v40 -= 24 * (v42 >> 1);
          }
        }
        long long v46 = *(_OWORD *)buf;
        *((void *)v40 + 2) = *(void *)&buf[16];
        *(_OWORD *)uint64_t v40 = v46;
        int v47 = *(char **)(a5 + 16);
        int v48 = v40;
        if (v47 != v23)
        {
          int v49 = v23;
          int v50 = v40;
          do
          {
            long long v51 = *(_OWORD *)(v49 - 24);
            int v48 = v50 - 24;
            *((void *)v50 - 1) = *((void *)v49 - 1);
            *(_OWORD *)(v50 - 24) = v51;
            v49 -= 24;
            v50 -= 24;
          }
          while (v49 != v47);
        }
        uint64_t v52 = *(char **)(a5 + 24);
        int64_t v53 = v52 - v23;
        if (v52 != v23) {
          memmove(v40 + 24, v23, v52 - v23);
        }
        int8x16_t v54 = *(void **)(a5 + 16);
        *(void *)(a5 + 16) = v48;
        *(void *)(a5 + 24) = &v40[v53 + 24];
        *(void *)(a5 + 32) = v41;
        unsigned int v7 = a6;
        if (v54) {
          operator delete(v54);
        }
      }
      else if (v23 == v19)
      {
        long long v38 = *(_OWORD *)buf;
        *((void *)v19 + 2) = *(void *)&buf[16];
        *(_OWORD *)uint64_t v19 = v38;
        *(void *)(a5 + 24) = v19 + 24;
      }
      else
      {
        unsigned int v29 = v19 - 24;
        uint64_t v30 = *(void *)(a5 + 24);
        while (v29 < v19)
        {
          long long v31 = *(_OWORD *)v29;
          *(void *)(v30 + 16) = *((void *)v29 + 2);
          *(_OWORD *)uint64_t v30 = v31;
          v30 += 24;
          v29 += 24;
        }
        *(void *)(a5 + 24) = v30;
        if (v19 != v23 + 24) {
          memmove(v23 + 24, v23, v19 - (v23 + 24));
        }
        uint64_t v36 = buf;
        if (v23 <= buf) {
          uint64_t v36 = &buf[24 * (*(void *)(a5 + 24) > (unint64_t)buf)];
        }
        long long v37 = *(_OWORD *)v36;
        *((void *)v23 + 2) = *((void *)v36 + 2);
        *(_OWORD *)unint64_t v23 = v37;
      }
      double v55 = *(double *)&buf[16];
      double v56 = *(double *)(a5 + 40);
      if (*(double *)&buf[16] > v56)
      {
        *(void *)(a5 + 40) = *(void *)&buf[16];
        double v56 = v55;
      }
      int32x4_t v57 = *(double **)(a5 + 16);
      int8x16_t v58 = *(double **)(a5 + 24);
      unsigned int v59 = -1431655765 * ((unint64_t)((char *)v58 - (char *)v57) >> 3);
      double v60 = *(double *)a5;
      double v61 = v56 - *(double *)a5;
      unsigned int v62 = *(_DWORD *)(a5 + 8);
      double v63 = *(v58 - 1);
      BOOL v64 = v62 < v59 || v63 < v61;
      float32x4_t v65 = *(double **)(a5 + 24);
      if (v64)
      {
        unsigned int v66 = v59 - 1;
        float32x4_t v65 = *(double **)(a5 + 24);
        while (1)
        {
          float v67 = v65;
          v65 -= 3;
          if (v65 == v57) {
            break;
          }
          unsigned int v68 = v66 - 1;
          if (v66-- <= v62)
          {
            unsigned int v66 = v68;
            if (*(v67 - 4) >= v61) {
              goto LABEL_76;
            }
          }
        }
        float32x4_t v65 = *(double **)(a5 + 16);
      }
LABEL_76:
      unint64_t v70 = *(void *)(a5 + 96);
      if (v58 != v65)
      {
        *(void *)(a5 + 104) = v70;
        unint64_t v71 = v65;
        do
        {
          unint64_t v72 = *(void *)(a5 + 112);
          if (v70 >= v72)
          {
            uint64_t v74 = *(void *)(a5 + 96);
            unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v74) >> 3);
            unint64_t v76 = v75 + 1;
            if (v75 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v74) >> 3);
            if (2 * v77 > v76) {
              unint64_t v76 = 2 * v77;
            }
            if (v77 >= 0x555555555555555) {
              unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v78 = v76;
            }
            if (v78) {
              unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v78);
            }
            else {
              uint64_t v79 = 0;
            }
            unint64_t v80 = v78 + 24 * v75;
            long long v81 = *(_OWORD *)v71;
            *(double *)(v80 + 16) = v71[2];
            *(_OWORD *)unint64_t v80 = v81;
            long long v83 = *(char **)(a5 + 96);
            long long v82 = *(char **)(a5 + 104);
            unint64_t v84 = v80;
            if (v82 != v83)
            {
              do
              {
                long long v85 = *(_OWORD *)(v82 - 24);
                *(void *)(v84 - 8) = *((void *)v82 - 1);
                *(_OWORD *)(v84 - 24) = v85;
                v84 -= 24;
                v82 -= 24;
              }
              while (v82 != v83);
              long long v82 = *(char **)(a5 + 96);
            }
            unint64_t v70 = v80 + 24;
            *(void *)(a5 + 96) = v84;
            *(void *)(a5 + 104) = v80 + 24;
            *(void *)(a5 + 112) = v78 + 24 * v79;
            if (v82) {
              operator delete(v82);
            }
          }
          else
          {
            long long v73 = *(_OWORD *)v71;
            *(double *)(v70 + 16) = v71[2];
            *(_OWORD *)unint64_t v70 = v73;
            v70 += 24;
          }
          *(void *)(a5 + 104) = v70;
          v71 += 3;
        }
        while (v71 != v58);
        std::vector<unsigned int> v86 = *(double **)(a5 + 24);
        int64_t v87 = (char *)v86 - (char *)v58;
        if (v86 != v58) {
          memmove(v65, v58, (char *)v86 - (char *)v58);
        }
        int8x16_t v58 = (double *)((char *)v65 + v87);
        *(void *)(a5 + 24) = (char *)v65 + v87;
        double v63 = *(double *)((char *)v65 + v87 - 8);
        double v56 = *(double *)(a5 + 40);
        double v60 = *(double *)a5;
        unint64_t v70 = *(void *)(a5 + 96);
      }
      *(double *)(a5 + 48) = v63;
      uint64_t v88 = *(void *)(a5 + 104);
      if (v70 != v88)
      {
        uint64_t v89 = 0;
        char v90 = 1;
        double v91 = 0.0;
        do
        {
          char v92 = v90 | (*(double *)(v70 + 16) > v91);
          char v90 = 0;
          if (v92)
          {
            uint64_t v89 = (long long *)v70;
            double v91 = *(double *)(v70 + 16);
          }
          v70 += 24;
        }
        while (v70 != v88);
        if (v89)
        {
          *(unsigned char *)(a5 + 136) = 0;
          long long v93 = *v89;
          *(void *)(v166 + 16) = *((void *)v89 + 2);
          *(_OWORD *)uint64_t v166 = v93;
        }
      }
      if (v56 - *(double *)(a5 + 160) <= v60)
      {
        int v94 = *(unsigned __int8 *)(a5 + 136);
      }
      else
      {
        int v94 = 0;
        *(unsigned char *)(a5 + 136) = 0;
      }
      int v95 = *(_DWORD *)(a5 + 120);
      int v96 = v95 == 0;
      uint64_t v97 = 88;
      if (!v95) {
        uint64_t v97 = 92;
      }
      float v98 = *(float *)(a5 + v97);
      int v99 = *(_DWORD *)(a5 + 168);
      uint64_t v100 = *(double **)(a5 + 16);
      if (v58 == v100)
      {
        float v110 = 0.0;
        float v111 = 0.0;
      }
      else
      {
        double v101 = v56 - v60;
        if (v94) {
          double v101 = *(double *)(a5 + 184);
        }
        float v102 = *(v58 - 1) - v101;
        float v103 = v102 + 0.0;
        if (v99 == v96) {
          float v104 = v102 + 0.0;
        }
        else {
          float v104 = 0.0;
        }
        float32x4_t v105 = v58 - 4;
        while (1)
        {
          int v106 = *((_DWORD *)v105 + 2);
          if (v105 + 1 == v100) {
            break;
          }
          double v107 = v105[3];
          double v108 = *v105;
          v105 -= 3;
          float v102 = v108 - v107;
          float v103 = v102 + v103;
          if (v106 == v96) {
            float v109 = v102;
          }
          else {
            float v109 = -0.0;
          }
          float v104 = v104 + v109;
        }
        float v110 = v102 + v103;
        if (v106 != v96) {
          float v102 = -0.0;
        }
        float v111 = v104 + v102;
      }
      float v112 = v60 * v98;
      BOOL v113 = (float)(v111 / v110) >= v98 && v111 > v112;
      if (v113) {
        int v114 = 2;
      }
      else {
        int v114 = 0;
      }
      if (v95) {
        int v115 = v114;
      }
      else {
        int v115 = (float)(v111 / v110) >= v98 && v111 > v112;
      }
      float64x2_t v116 = 0uLL;
      if (v115 == 2)
      {
        if (v99)
        {
          if (v58 != v100)
          {
            float v117 = v58;
            while (1)
            {
              int v118 = *((_DWORD *)v117 - 6);
              v117 -= 3;
              if (!v118) {
                break;
              }
              int8x16_t v58 = v117;
              if (v117 == v100) {
                goto LABEL_149;
              }
            }
            v116.f64[0] = 0.0;
            v116.f64[1] = *(v58 - 1);
          }
        }
        else
        {
          v116.f64[1] = *(float64_t *)(a5 + 184);
        }
LABEL_149:
        int v121 = 0;
        double v122 = *(double *)(a5 + 128);
        double v123 = vmuld_lane_f64(v122, v116, 1);
        double v124 = *(double *)(a5 + 80);
        v125.f64[0] = v122 * v124;
        v116.f64[0] = v123;
      }
      else
      {
        if (v115 != 1) {
          goto LABEL_156;
        }
        if (v99 == 1)
        {
          v116.f64[1] = *(float64_t *)(a5 + 184);
        }
        else if (v58 != v100)
        {
          float32x4_t v119 = v58;
          while (1)
          {
            int v120 = *((_DWORD *)v119 - 6);
            v119 -= 3;
            if (v120 == 1) {
              break;
            }
            int8x16_t v58 = v119;
            if (v119 == v100) {
              goto LABEL_151;
            }
          }
          v116.f64[0] = 0.0;
          v116.f64[1] = *(v58 - 1);
        }
LABEL_151:
        double v126 = *(double *)(a5 + 128);
        double v127 = vmuld_lane_f64(v126, v116, 1);
        double v124 = *(double *)(a5 + 72);
        v125.f64[0] = v126 * v124;
        v116.f64[0] = v127;
        int v121 = 1;
      }
      uint64_t v129 = *(void *)(a5 + 192);
      uint64_t v128 = *(void *)(a5 + 200);
      signed int v130 = *(_DWORD *)(v129 + 8);
      if (v130 != *(_DWORD *)(v128 + 8))
      {
        if (EndpointVAD3LogScope(void)::once != -1) {
          dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
        }
        if (EndpointVAD3LogScope(void)::scope)
        {
          float32x2_t v160 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
          if (*(void *)EndpointVAD3LogScope(void)::scope) {
            goto LABEL_207;
          }
        }
        else
        {
          float32x2_t v160 = MEMORY[0x1E4F14500];
LABEL_207:
          if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "EndpointDecisionLayerVAD3.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 281;
            _os_log_impl(&dword_1BB0CE000, v160, OS_LOG_TYPE_ERROR, "%25s:%-5d Internal decision history buffers must have the same size", buf, 0x12u);
          }
        }
        abort();
      }
      v125.f64[1] = v124;
      float64x2_t v116 = vaddq_f64(v116, v125);
      uint64_t v131 = *(int *)(v129 + 12);
      *(_DWORD *)(*(void *)v129 + 4 * v131) = v115;
      *(_DWORD *)(v129 + 12) = ((int)v131 + 1) % v130;
      uint64_t v132 = *(int *)(v128 + 12);
      *(float64x2_t *)(*(void *)v128 + 16 * v132) = v116;
      *(_DWORD *)(v128 + 12) = ((int)v132 + 1) % v130;
      int v133 = *(_DWORD *)(a5 + 208);
      if (v133 + 1 < v130) {
        signed int v130 = v133 + 1;
      }
      *(_DWORD *)(a5 + 208) = v130;
      *(_DWORD *)(a5 + 120) = v121;
LABEL_156:
      LODWORD(v173) = 0;
      HIDWORD(v173) = v115;
      float64_t v134 = v116.f64[1];
      int v135 = *(_DWORD *)(a5 + 212);
      float64_t v136 = 0.0;
      if (v135 == 1)
      {
        int v163 = v115;
        float32x4_t v164 = a3;
        float32x4_t v139 = *(uint64_t **)(a5 + 192);
        uint64_t v140 = *(void *)(a5 + 200);
        uint64_t v141 = *v139;
        int v142 = *((_DWORD *)v139 + 2);
        int v143 = v142 - *((_DWORD *)v139 + 3);
        int v144 = *(_DWORD *)(v141 + 4 * (v142 + ~(v143 % v142)));
        unsigned int v145 = *(_DWORD *)(a5 + 208);
        long long v172 = *(_OWORD *)(*(void *)v140
                         + 16
                         * (*(_DWORD *)(v140 + 8)
                          + ~((*(_DWORD *)(v140 + 8) - *(_DWORD *)(v140 + 12)) % *(_DWORD *)(v140 + 8))));
        unsigned int v165 = v145;
        if (v145 >= 2)
        {
          int v146 = v143 + 1;
          int v147 = -v145;
          int v148 = -1;
          do
          {
            MRRingBuffer<DataTimeStamp>::GetSample(v140, --v148);
            if (v149 > *((double *)&v172 + 1))
            {
              int v144 = *(_DWORD *)(v141 + 4 * (v142 + ~(v146 % v142)));
              *((double *)&v172 + 1) = v149;
            }
            ++v146;
          }
          while (v147 != v148);
        }
        int v138 = 0;
        if (v165)
        {
          a3 = v164;
          float32x4_t v137 = v169;
          unint64_t v150 = v170;
          int v115 = v163;
          if (v144 == 2)
          {
            double v151 = *(double *)(v171 + 8);
            unsigned int v7 = a6;
            if (v151 - *(double *)(a5 + 160) >= *(double *)(a5 + 56)
              && v151 - *((double *)&v172 + 1) >= *(double *)(a5 + 64))
            {
              *(_DWORD *)(a5 + 212) = 2;
              int v138 = 4;
              LODWORD(v173) = 4;
              float64_t v136 = *((double *)&v172 + 1);
            }
            else
            {
              int v138 = 0;
            }
          }
          else
          {
            unsigned int v7 = a6;
          }
        }
        else
        {
          a3 = v164;
          unsigned int v7 = a6;
          float32x4_t v137 = v169;
          unint64_t v150 = v170;
          int v115 = v163;
        }
      }
      else if (v135)
      {
        int v138 = 0;
        float32x4_t v137 = v169;
        unint64_t v150 = v170;
      }
      else
      {
        float32x4_t v137 = v169;
        if (v95 != 0 || !v113)
        {
          int v138 = 0;
        }
        else
        {
          *(_DWORD *)(a5 + 212) = 1;
          int v138 = 3;
          LODWORD(v173) = 3;
          float64_t v136 = v116.f64[1];
        }
        unint64_t v150 = v170;
      }
      if ((v115 - 1) <= 1)
      {
        *(void *)AudioTimeStamp buf = &unk_1F14BD040;
        *(_DWORD *)&uint8_t buf[8] = 0;
        *(_DWORD *)&unsigned char buf[12] = v7;
        *(float64_t *)&buf[16] = v134;
        unsigned __int8 v175 = (char *)&v173 + 4;
        float32x4_t v152 = *(void **)(a1 + 504);
        if (v152 != *(void **)(a1 + 512))
        {
          do
          {
            (*(void (**)(void, unsigned char *))(*(void *)*v152 + 16))(*v152, buf);
            ++v152;
          }
          while (v152 != *(void **)(a1 + 512));
          int v138 = v173;
          unint64_t v150 = v170;
        }
      }
      if ((v138 - 3) <= 1)
      {
        *(void *)AudioTimeStamp buf = &unk_1F14BD040;
        *(_DWORD *)&uint8_t buf[8] = 1;
        *(_DWORD *)&unsigned char buf[12] = v7;
        *(float64_t *)&buf[16] = v136;
        unsigned __int8 v175 = (char *)&v173;
        for (uint64_t i = *(void **)(a1 + 504); i != *(void **)(a1 + 512); ++i)
          (*(void (**)(void, unsigned char *))(*(void *)*i + 16))(*i, buf);
        unint64_t v150 = v170;
      }
      uint64_t v154 = *v137;
      if (v150 >= (v137[1] - *v137) >> 2) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v155 = *(void *)(v171 + 8);
      *(void *)AudioTimeStamp buf = &unk_1F14BD040;
      *(_DWORD *)&uint8_t buf[8] = 2;
      *(_DWORD *)&unsigned char buf[12] = v7;
      *(void *)&buf[16] = v155;
      unsigned __int8 v175 = (char *)(v154 + 4 * v150);
      for (unint64_t j = *(void **)(a1 + 504); j != *(void **)(a1 + 512); ++j)
        (*(void (**)(void, unsigned char *))(*(void *)*j + 16))(*j, buf);
      uint64_t v157 = *a3;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v170) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v158 = *(void *)(v171 + 8);
      *(void *)AudioTimeStamp buf = &unk_1F14BD040;
      *(_DWORD *)&uint8_t buf[8] = 3;
      *(_DWORD *)&unsigned char buf[12] = v7;
      *(void *)&buf[16] = v158;
      unsigned __int8 v175 = (char *)(v157 + 24 * v170);
      float32x2_t v159 = *(void **)(a1 + 504);
      if (v159 != j)
      {
        do
        {
          (*(void (**)(void, unsigned char *))(*(void *)*v159 + 16))(*v159, buf);
          ++v159;
        }
        while (v159 != *(void **)(a1 + 512));
      }
      unint64_t v11 = v170;
      v171 += 16;
      a3 += 3;
      uint64_t v6 = v137 + 3;
    }
    while (v6 != a2[1]);
  }
}

void sub_1BB7006A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

float FeaturesDSPWrapper::GetCurrentProcessedFeatures(uint64_t a1, float **a2)
{
  std::vector<float>::resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6)
  {
    uint64_t v8 = v5 + 24;
    unsigned int v7 = *(float **)(v5 + 24);
    uint64_t v9 = (uint64_t)(*(void *)(v8 + 8) - (void)v7) >> 2;
    int64_t v10 = *a2;
    uint64_t v11 = a2[1] - *a2;
    do
    {
      if (!v9) {
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      }
      if (!v11) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      float v12 = *v7++;
      float result = v12;
      *v10++ = v12;
      --v11;
      --v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

float FeaturesDSPWrapper::GetCurrentProcessedSuperFeatures(void *a1, float **a2)
{
  std::vector<float>::resize((uint64_t)a2, ((a1[8] - a1[7]) >> 2));
  uint64_t v5 = (unsigned int *)a1[7];
  uint64_t v6 = a1[8] - (void)v5;
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v7 = v6 >> 2;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1] - *a2;
    uint64_t v10 = ((unint64_t)v6 >> 2);
    do
    {
      if (!v7) {
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 84, "index < mArray.size()");
      }
      unint64_t v11 = *v5;
      uint64_t v12 = *(void *)(a1[2] + 24);
      if (v11 >= (*(void *)(a1[2] + 32) - v12) >> 2) {
        __assert_rtn("ElementAt", "FeatureTimeSeries.h", 77, "index < mArray.size()");
      }
      if (!v9) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      float result = *(float *)(v12 + 4 * v11);
      *v8++ = result;
      ++v5;
      --v9;
      --v7;
      --v10;
    }
    while (v10);
  }
  return result;
}

void EndpointVAD3::DoneProcessingAudio(EndpointVAD3 *this, double a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  if (*((_DWORD *)this + 6) != 1)
  {
    std::string::__assign_external(&v16, "DoneProcessingAudio() should not be called with real time operation mode or on the real time thread.", 0x64uLL);
    if (EndpointVAD3LogScope(void)::once != -1) {
      dispatch_once(&EndpointVAD3LogScope(void)::once, &__block_literal_global_10);
    }
    if (EndpointVAD3LogScope(void)::scope)
    {
      uint64_t v14 = *(NSObject **)EndpointVAD3LogScope(void)::scope;
      if (!*(void *)EndpointVAD3LogScope(void)::scope) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = &v16;
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v15 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "EndpointVAD3.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 490;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v15;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    }
LABEL_26:
    abort();
  }
  unint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  std::vector<unsigned int> __p = 0;
  double v18 = 0;
  uint64_t v19 = 0;
  unint64_t v3 = *(unsigned int *)(*((void *)this + 13) + 236);
  std::vector<std::vector<unsigned int>>::resize(&v22, v3);
  std::vector<std::vector<float>>::resize((uint64_t *)v21, v3);
  std::vector<std::vector<std::vector<float>>>::resize(v20, v3);
  std::vector<std::span<float,18446744073709551615ul>>::resize((char **)&__p, v3);
  uint64_t v4 = *((void *)this + 13);
  memset(buf, 0, 24);
  MixViterbiProd::decodeRaw_Post(v4, v3, (std::vector<unsigned int> *)buf, (uint64_t *)v21);
  uint64_t v5 = *(int **)buf;
  uint64_t v6 = *(int **)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    uint64_t v7 = *(uint64_t **)(v4 + 184);
    uint64_t v8 = *v7;
    int v9 = *((_DWORD *)v7 + 3);
    do
    {
      int v10 = *v5++;
      *(_DWORD *)(v8 + 4 * v9) = v10;
      int v9 = (*((_DWORD *)v7 + 3) + 1) % *((_DWORD *)v7 + 2);
      *((_DWORD *)v7 + 3) = v9;
    }
    while (v5 != v6);
  }
  MixViterbiProd::convertRawStateSequenceToProd(v4, buf, &v22);
  MixViterbiProd::retrieveTimeStamps(v4, 1 - v3, 0, (char **)&__p);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  EndpointVAD3::TranslateFullPosteriorsToMarginalized((uint64_t)this, v21, v20, *((unsigned int ***)this + 47), (int **)this + 48);
  unint64_t v11 = __p;
  if (v23 != v22 && v18 != __p)
  {
    uint64_t v12 = *((void *)this + 14);
    if (*((void *)this + 15) != v12)
    {
      unint64_t v13 = 0;
      do
      {
        EndpointVAD3::UpdateAndDispatchDecisions((uint64_t)this, &v22, (void *)v20[0], (uint64_t *)&__p, *(void *)(v12 + 8 * v13), v13);
        ++v13;
        uint64_t v12 = *((void *)this + 14);
      }
      while (v13 < (*((void *)this + 15) - v12) >> 3);
    }
  }
  if (v11) {
    operator delete(v11);
  }
  *(void *)AudioTimeStamp buf = v20;
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioTimeStamp buf = v21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioTimeStamp buf = &v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1BB700B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessorV2::InitializeHWInput(VoiceProcessorV2 *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int *a7, const AudioStreamBasicDescription *a8, const AudioChannelLayout *a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int *a13)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  uint64_t v157 = (char *)this + 2392;
  char v158 = (*(uint64_t (**)(void))(*((void *)this + 299) + 16))();
  atomic_fetch_add((atomic_uint *volatile)this + 620, 1u);
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  if (*((unsigned char *)this + 15961))
  {
    if (*((unsigned char *)this + 1688))
    {
      LODWORD(v17) = *((_DWORD *)this + 123);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 212) - (double)v17, *((double *)this + 212) - (double)v17, 0);
    }
    if (*((unsigned char *)this + 1689) && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      LODWORD(v17) = *((_DWORD *)this + 124);
      VoiceProcessorV2::WriteTSOverload((std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this, *((double *)this + 213) - (double)v17, *((double *)this + 213) - (double)v17, 1);
    }
  }
  *((_WORD *)this + 844) = 0;
  if (*((unsigned char *)this + 1856)) {
    *((unsigned char *)this + 1856) = 0;
  }
  *((_DWORD *)this + 284) = a5;
  *((_DWORD *)this + 285) = a11;
  ++VoiceProcessorV2::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::InitHWCallCount;
  float v153 = (char *)this + 12524;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v18 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
  uint64_t v19 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    unsigned int v20 = (*v19 ? *v19 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 58;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = VoiceProcessorV2::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::InitHWCallCount;
      _os_log_impl(&dword_1BB0CE000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> call num %u", buf, 0x18u);
    }
  }
  uint64_t v21 = (int *)*((void *)this + 1578);
  if (v21 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v21, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 58, "InitializeHWInput", "call num %u", VoiceProcessorV2::InitializeHWInput(AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*,AudioStreamBasicDescription const&,AudioChannelLayout const*,unsigned int,unsigned int,unsigned int,unsigned int const*)::InitHWCallCount);
  }
  unsigned int v152 = 0;
  if (a6 && a7) {
    unsigned int v152 = *a7;
  }
  unsigned int v151 = 0;
  if (a12 && a13) {
    unsigned int v151 = *a13;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v22 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    unint64_t v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
      CAX4CCString::CAX4CCString((CAX4CCString *)v159, v152);
      CAFormatter::CAFormatter((CAFormatter *)&v156, a2);
      uint64_t v25 = v156;
      CAX4CCString::CAX4CCString((CAX4CCString *)v161, v151);
      CAFormatter::CAFormatter((CAFormatter *)&v155, a8);
      *(_DWORD *)AudioTimeStamp buf = 136317186;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = v159;
      *(_WORD *)&buf[34] = 2080;
      *(void *)&buf[36] = v25;
      __int16 v163 = 2048;
      uint64_t v164 = a4;
      __int16 v165 = 2080;
      uint64_t v166 = v161;
      __int16 v167 = 2080;
      long long v168 = v155;
      __int16 v169 = 2048;
      uint64_t v170 = a10;
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> VPV%u REF %s %s (blksz %lu) MIC %s %s (blksz %lu)", buf, 0x54u);
      if (v155) {
        free(v155);
      }
      if (v156) {
        free(v156);
      }
    }
  }
  uint64_t v26 = (int *)*((void *)this + 1578);
  if (v26 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v27 = VPLogScope(void)::scope;
    int v28 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 112))(this);
    CAX4CCString::CAX4CCString((CAX4CCString *)buf, v152);
    CAFormatter::CAFormatter((CAFormatter *)v161, a2);
    unsigned int v29 = (const char *)v161[0];
    CAX4CCString::CAX4CCString((CAX4CCString *)v159, v151);
    CAFormatter::CAFormatter((CAFormatter *)&v156, a8);
    CALegacyLog::log(v26, 4, v27, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 63, "InitializeHWInput", "VPV%u REF %s %s (blksz %lu) MIC %s %s (blksz %lu)", v28, buf, v29, a4, v159, (const char *)v156, a10);
    double v18 = &VPStrategyManager::StateAsString(unsigned long long)::stateNames;
    if (v156) {
      free(v156);
    }
    if (v161[0]) {
      free(v161[0]);
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v30 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    long long v31 = (*v30 ? *v30 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 65;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a5;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = a11;
      _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ref audiodeviceid = %lu      mic audiodeviceid = %lu", buf, 0x26u);
    }
  }
  unint64_t v32 = (int *)*((void *)this + 1578);
  if (v32 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v32, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 65, "InitializeHWInput", "ref audiodeviceid = %lu      mic audiodeviceid = %lu", a5, a11);
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v33 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    uint64_t v34 = (*v33 ? *v33 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)v159, a2);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = *(void *)v159;
      _os_log_impl(&dword_1BB0CE000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> inRefASBD passed iunint64_t n = %s", buf, 0x1Cu);
      if (*(void *)v159) {
        free(*(void **)v159);
      }
    }
  }
  uint64_t v35 = (int *)*((void *)this + 1578);
  if (v35 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v36 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, a2);
    CALegacyLog::log(v35, 5, v36, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 71, "InitializeHWInput", "inRefASBD passed iunint64_t n = %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  long long v37 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    long long v38 = (*v37 ? *v37 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)v159, a8);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 72;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = *(void *)v159;
      _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> inMicASBD passed iunint64_t n = %s", buf, 0x1Cu);
      if (*(void *)v159) {
        free(*(void **)v159);
      }
    }
  }
  int64_t v39 = (int *)*((void *)this + 1578);
  if (v39 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v40 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, a8);
    CALegacyLog::log(v39, 5, v40, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 72, "InitializeHWInput", "inMicASBD passed iunint64_t n = %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int v41 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    uint64_t v42 = (*v41 ? *v41 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 73;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a4;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = a10;
      _os_log_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> hw io blocksizes passed in REF = %lu MIC = %lu", buf, 0x26u);
    }
  }
  unint64_t v43 = (int *)*((void *)this + 1578);
  if (v43 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v43, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 73, "InitializeHWInput", "hw io blocksizes passed in REF = %lu MIC = %lu", a4, a10);
  }
  double mSampleRate = a2->mSampleRate;
  AudioFormatID mFormatID = a2->mFormatID;
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  UInt32 mBytesPerPacket = a2->mBytesPerPacket;
  UInt32 mFramesPerPacket = a2->mFramesPerPacket;
  UInt32 mBytesPerFrame = a2->mBytesPerFrame;
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  double v52 = a8->mSampleRate;
  AudioFormatID v54 = a8->mFormatID;
  AudioFormatFlags v53 = a8->mFormatFlags;
  UInt32 v55 = a8->mBytesPerPacket;
  UInt32 v56 = a8->mFramesPerPacket;
  UInt32 v57 = a8->mBytesPerFrame;
  UInt32 v58 = a8->mChannelsPerFrame;
  UInt32 v59 = mBitsPerChannel >> 3;
  UInt32 v60 = a8->mBitsPerChannel;
  if (mFormatID != 1819304813) {
    goto LABEL_120;
  }
  if (mFramesPerPacket != 1) {
    goto LABEL_120;
  }
  if (mBytesPerFrame != mBytesPerPacket) {
    goto LABEL_120;
  }
  if (v59 > mBytesPerFrame) {
    goto LABEL_120;
  }
  if (!mChannelsPerFrame) {
    goto LABEL_120;
  }
  UInt32 v63 = a2->mBytesPerPacket;
  if ((mFormatFlags & 0x20) == 0)
  {
    UInt32 v63 = mBytesPerPacket / mChannelsPerFrame;
    if (mBytesPerPacket % mChannelsPerFrame) {
      goto LABEL_120;
    }
  }
  uint64_t v61 = mFormatFlags & 1;
  if ((mFormatFlags & 2) == 0 && 8 * v63 == mBitsPerChannel && (mFormatFlags & 1) == 0 && (mFormatFlags & 4) != 0)
  {
    int v64 = (mFormatFlags >> 7) & 0x3F;
    if ((v64 != 24 || v63 != 4) && !v64 && v63 == 2) {
      goto LABEL_158;
    }
  }
  if ((mFormatFlags & 0x20) != 0)
  {
    AudioFormatFlags v66 = a2->mFormatFlags & 2;
    UInt32 v65 = a2->mBytesPerPacket;
  }
  else
  {
    UInt32 v65 = mBytesPerPacket / mChannelsPerFrame;
    if (mBytesPerPacket % mChannelsPerFrame) {
      goto LABEL_120;
    }
    AudioFormatFlags v66 = a2->mFormatFlags & 2;
    LODWORD(v61) = a2->mFormatFlags & 1;
  }
  if (!v66 && 8 * v65 == mBitsPerChannel)
  {
    if (v61)
    {
      uint64_t v61 = 8068;
      if ((mFormatFlags & 0x1F84) == 0 && v65 == 4)
      {
LABEL_158:
        int v67 = 1;
        goto LABEL_166;
      }
    }
  }
LABEL_120:
  uint64_t v61 = 0;
  if (mFormatID == 1819304813 && mFramesPerPacket == 1 && mBytesPerFrame == mBytesPerPacket && v59 <= mBytesPerFrame)
  {
    BOOL v62 = 0;
    if (mChannelsPerFrame)
    {
      if ((mFormatFlags & 0x20) != 0
        || (BOOL v68 = mBytesPerPacket == mBytesPerPacket / mChannelsPerFrame * mChannelsPerFrame,
            mBytesPerPacket /= mChannelsPerFrame,
            v68))
      {
        uint64_t v61 = 0;
        BOOL v62 = 1;
        if ((mFormatFlags & 2) == 0 && 8 * mBytesPerPacket == mBitsPerChannel)
        {
          if (mFormatFlags)
          {
            uint64_t v61 = 0;
            BOOL v62 = (a2->mFormatFlags & 0x1F84) == 0;
          }
          else if ((mFormatFlags & 4) != 0)
          {
            BOOL v68 = (a2->mFormatFlags & 0x1F80) == 0xC00 && mBytesPerPacket == 4;
            uint64_t v61 = v68;
          }
          else
          {
            uint64_t v61 = 0;
          }
        }
      }
      else
      {
        uint64_t v61 = 0;
        BOOL v62 = 0;
      }
    }
  }
  else
  {
    BOOL v62 = 0;
  }
  int v67 = v61 & v62;
LABEL_166:
  UInt32 v69 = v60 >> 3;
  if (v54 != 1819304813) {
    goto LABEL_167;
  }
  if (v56 != 1) {
    goto LABEL_167;
  }
  if (v57 != v55) {
    goto LABEL_167;
  }
  if (v69 > v57) {
    goto LABEL_167;
  }
  if (!v58) {
    goto LABEL_167;
  }
  UInt32 v72 = a8->mBytesPerPacket;
  if ((v53 & 0x20) == 0)
  {
    UInt32 v72 = v55 / v58;
    if (v55 % v58) {
      goto LABEL_167;
    }
  }
  AudioFormatFlags v73 = a8->mFormatFlags & 1;
  if ((v53 & 2) == 0 && 8 * v72 == v60 && (v53 & 1) == 0 && (v53 & 4) != 0)
  {
    int v74 = (v53 >> 7) & 0x3F;
    if ((v74 != 24 || v72 != 4) && !v74 && v72 == 2) {
      goto LABEL_205;
    }
  }
  if ((v53 & 0x20) != 0)
  {
    AudioFormatFlags v76 = a8->mFormatFlags & 2;
    UInt32 v75 = a8->mBytesPerPacket;
  }
  else
  {
    UInt32 v75 = v55 / v58;
    if (v55 % v58) {
      goto LABEL_167;
    }
    AudioFormatFlags v76 = a8->mFormatFlags & 2;
    AudioFormatFlags v73 = a8->mFormatFlags & 1;
  }
  if (!v76 && 8 * v75 == v60 && v73 && (v53 & 0x1F84) == 0 && v75 == 4)
  {
LABEL_205:
    int v77 = 1;
    goto LABEL_213;
  }
LABEL_167:
  BOOL v70 = 0;
  if (v54 == 1819304813 && v56 == 1 && v57 == v55 && v69 <= v57)
  {
    BOOL v71 = 0;
    if (v58)
    {
      if ((v53 & 0x20) != 0 || (BOOL v68 = v55 == v55 / v58 * v58, v55 /= v58, v68))
      {
        BOOL v70 = 0;
        BOOL v71 = 1;
        if ((v53 & 2) == 0 && 8 * v55 == v60)
        {
          if (v53)
          {
            BOOL v70 = 0;
            BOOL v71 = (a8->mFormatFlags & 0x1F84) == 0;
          }
          else
          {
            BOOL v70 = (v53 & 4) != 0 && (a8->mFormatFlags & 0x1F80) == 0xC00 && v55 == 4;
          }
        }
      }
      else
      {
        BOOL v70 = 0;
        BOOL v71 = 0;
      }
    }
  }
  else
  {
    BOOL v71 = 0;
  }
  int v77 = v70 && v71;
LABEL_213:
  LOBYTE(v155) = 0;
  VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_allow_multi_ch_ref", 0, (float *)&v155, (unsigned __int8 *)v61);
  LOBYTE(v155) = v155 | (v152 == 1886745455);
  if (_os_feature_enabled_impl())
  {
    char v80 = v155 | (v152 == 1885889645);
    LOBYTE(v155) = v80;
  }
  else
  {
    char v80 = (char)v155;
  }
  if (!v80 && mChannelsPerFrame >= 9) {
    int v67 = 0;
  }
  char v154 = 0;
  VoiceProcessorV2::ReadAndApplyDefaultsOverride(this, @"vp_allow_multi_ch_mic", 0, (float *)&v154, v79);
  v154 |= v151 == 1886745449;
  if (!v154 && v58 >= 6) {
    int v77 = 0;
  }
  if (v67 & v77)
  {
    if (mSampleRate == 0.0)
    {
      uint64_t v81 = 1852008051;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 118;
        long long v82 = MEMORY[0x1E4F14500];
        long long v83 = "%25s:%-5d  unsupported Ref sample rate";
LABEL_228:
        _os_log_impl(&dword_1BB0CE000, v82, OS_LOG_TYPE_ERROR, v83, buf, 0x12u);
        goto LABEL_229;
      }
      goto LABEL_229;
    }
    if (v52 == 0.0)
    {
      uint64_t v81 = 1852008051;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_229;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 119;
      long long v82 = MEMORY[0x1E4F14500];
      long long v83 = "%25s:%-5d  unsupported Mic sample rate";
      goto LABEL_228;
    }
    if (!a6 || !a7)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v99 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        uint64_t v100 = (*v99 ? *v99 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 123;
          _os_log_impl(&dword_1BB0CE000, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to initialize - no reference ports", buf, 0x12u);
        }
      }
      uint64_t v81 = *((void *)this + 1578);
      if (!v81) {
        goto LABEL_229;
      }
      if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log((int *)v81, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 123, "InitializeHWInput", "failed to initialize - no reference ports");
      }
LABEL_297:
      uint64_t v81 = 0;
      goto LABEL_229;
    }
    memset(buf, 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(buf, a7, (uint64_t)&a7[a6], a6);
    long long v85 = (void *)*((void *)this + 292);
    if (v85)
    {
      *((void *)this + 293) = v85;
      operator delete(v85);
      *((void *)this + 292) = 0;
      *((void *)this + 293) = 0;
      *((void *)this + 294) = 0;
    }
    *((_OWORD *)this + 146) = *(_OWORD *)buf;
    *((void *)this + 294) = *(void *)&buf[16];
    if (a12 && a13)
    {
      memset(buf, 0, 24);
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(buf, a13, (uint64_t)&a13[a12], a12);
      std::vector<unsigned int> v86 = (void *)((char *)this + 2360);
      int64_t v87 = (void *)*((void *)this + 295);
      if (v87)
      {
        *((void *)this + 296) = v87;
        operator delete(v87);
        *std::vector<unsigned int> v86 = 0;
        *((void *)this + 296) = 0;
        *((void *)this + 297) = 0;
      }
      *(_OWORD *)std::vector<unsigned int> v86 = *(_OWORD *)buf;
      *((void *)this + 297) = *(void *)&buf[16];
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v88 = CALog::LogObjIfEnabled(5, VPLogScope(void)::scope);
      if (v88)
      {
        uint64_t v89 = v88;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 142;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = a6;
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = a12;
          _os_log_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> inNumRefPorts = %u  inNumMicPorts = %u ", buf, 0x1Eu);
        }
      }
      char v90 = (int *)*((void *)this + 1578);
      if (v90 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v90, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 142, "InitializeHWInput", "inNumRefPorts = %u  inNumMicPorts = %u ", a6, a12);
      }
      if (*((void *)this + 293) != *((void *)this + 292))
      {
        unint64_t v91 = 0;
        do
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          char v92 = (void *)v18[82];
          if (v92 && CALegacyLog::LogEnabled(5, v18[82], 0))
          {
            long long v93 = (*v92 ? *v92 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v94 = a7[v91];
              CAX4CCString::CAX4CCString((CAX4CCString *)v159, v94);
              *(_DWORD *)AudioTimeStamp buf = 136316162;
              *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 146;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(void *)&buf[20] = v91;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = v94;
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = v159;
              _os_log_impl(&dword_1BB0CE000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> refPortType %lu = %u = %s", buf, 0x2Cu);
            }
          }
          int v95 = (int *)*((void *)this + 1578);
          if (v95 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            int v96 = v18;
            uint64_t v97 = v18[82];
            unsigned int v98 = a7[v91];
            CAX4CCString::CAX4CCString((CAX4CCString *)buf, v98);
            CALegacyLog::log(v95, 5, v97, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 146, "InitializeHWInput", "refPortType %lu = %u = %s", v91, v98, buf);
            double v18 = v96;
          }
          ++v91;
        }
        while (v91 < (uint64_t)(*((void *)this + 293) - *((void *)this + 292)) >> 2);
      }
      if (*((void *)this + 296) != *((void *)this + 295))
      {
        unint64_t v103 = 0;
        do
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float v104 = (void *)v18[82];
          if (v104 && CALegacyLog::LogEnabled(5, v18[82], 0))
          {
            float32x4_t v105 = (*v104 ? *v104 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
            {
              int v106 = v18;
              unsigned int v107 = a13[v103];
              CAX4CCString::CAX4CCString((CAX4CCString *)v159, v107);
              *(_DWORD *)AudioTimeStamp buf = 136316162;
              *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 150;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(void *)&buf[20] = v103;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = v107;
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = v159;
              _os_log_impl(&dword_1BB0CE000, v105, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> micPortType %lu = %u = %s", buf, 0x2Cu);
              double v18 = v106;
            }
          }
          double v108 = (int *)*((void *)this + 1578);
          if (v108 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float v109 = v18;
            uint64_t v110 = v18[82];
            unsigned int v111 = a13[v103];
            CAX4CCString::CAX4CCString((CAX4CCString *)buf, v111);
            CALegacyLog::log(v108, 5, v110, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 150, "InitializeHWInput", "micPortType %lu = %u = %s", v103, v111, buf);
            double v18 = v109;
          }
          ++v103;
        }
        while (v103 < (uint64_t)(*((void *)this + 296) - *((void *)this + 295)) >> 2);
      }
      if (!*((unsigned char *)this + 16241))
      {
        *((_DWORD *)this + 596) = 0;
        float v112 = (int *)*((void *)this + 292);
        BOOL v113 = (unsigned int *)*v112;
        if ((v113 - 1885892674) <= 0x35
          && ((1 << (v113 - 66)) & 0x20000100000001) != 0)
        {
          VoiceProcessorV2::GetAndPrintPortSubtype(*((_DWORD *)this + 284), v113, (unsigned int *)this + 596);
          float v112 = (int *)*((void *)this + 292);
        }
        *((_DWORD *)this + 597) = 0;
        GetAndPrintPortTypeProperty(0x6F757470u, *v112, *((_DWORD *)this + 284), 0x70657074u, "end point", (unsigned int *)this + 597);
      }
      long long v115 = *(_OWORD *)&a8->mSampleRate;
      long long v116 = *(_OWORD *)&a8->mBytesPerPacket;
      *((void *)this + 82) = *(void *)&a8->mBitsPerChannel;
      *((_OWORD *)this + 39) = v115;
      *((_OWORD *)this + 40) = v116;
      *((_DWORD *)this + 124) = a10;
      long long v117 = *(_OWORD *)&a2->mSampleRate;
      long long v118 = *(_OWORD *)&a2->mBytesPerPacket;
      *((void *)this + 72) = *(void *)&a2->mBitsPerChannel;
      *((_OWORD *)this + 34) = v117;
      *((_OWORD *)this + 35) = v118;
      *((_DWORD *)this + 122) = a4;
      if (VoiceProcessorV2::ShouldGenerateReferenceSignalInternally(this))
      {
        UInt32 v119 = a2->mChannelsPerFrame;
        *(Float64 *)float32x2_t v159 = a2->mSampleRate;
        *(_OWORD *)&v159[8] = xmmword_1BB8727B0;
        *(_DWORD *)&v159[24] = 4;
        *(_DWORD *)&v159[28] = v119;
        uint64_t v160 = 32;
        if (CAStreamBasicDescription::IsEqual((CAStreamBasicDescription *)v159, (const AudioStreamBasicDescription *)((char *)this + 584))&& *((_DWORD *)this + 123) == a4)
        {
          if (*v153)
          {
            if (*((_DWORD *)this + 121) == a4
              && CAStreamBasicDescription::IsEqual((VoiceProcessorV2 *)((char *)this + 328), (const AudioStreamBasicDescription *)((char *)this + 584)))
            {
              *float v153 = 0;
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              int v120 = CALog::LogObjIfEnabled(5, v18[82]);
              if (v120)
              {
                int v121 = v120;
                if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioTimeStamp buf = 136315394;
                  *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 199;
                  _os_log_impl(&dword_1BB0CE000, v121, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ul-dl config no longer out of sync", buf, 0x12u);
                }
              }
              double v122 = (int *)*((void *)this + 1578);
              if (v122 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v122, 5, v18[82], "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 199, "InitializeHWInput", "ul-dl config no longer out of sync");
              }
            }
            else
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              unsigned int v145 = CALog::LogObjIfEnabled(1, v18[82]);
              if (v145)
              {
                int v146 = v145;
                if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioTimeStamp buf = 136315394;
                  *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 201;
                  _os_log_impl(&dword_1BB0CE000, v146, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ul-dl config still out of sync ?!", buf, 0x12u);
                }
              }
              int v147 = (int *)*((void *)this + 1578);
              if (v147 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                CALegacyLog::log(v147, 1, v18[82], "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 201, "InitializeHWInput", "ul-dl config still out of sync ?!");
              }
            }
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          double v124 = CALog::LogObjIfEnabled(5, v18[82]);
          if (v124)
          {
            float64x2_t v125 = v124;
            if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
            {
              CAFormatter::CAFormatter((CAFormatter *)v161, (const AudioStreamBasicDescription *)((char *)this + 584));
              double v126 = v161[0];
              int v127 = *((_DWORD *)this + 123);
              CAFormatter::CAFormatter((CAFormatter *)&v156, a8);
              *(_DWORD *)AudioTimeStamp buf = 136316418;
              *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 190;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v126;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = v127;
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = v156;
              __int16 v163 = 1024;
              LODWORD(v164) = a10;
              _os_log_impl(&dword_1BB0CE000, v125, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> ul-dl config out of sync mHwRefASBD = %s, %d\t inMicASBD = %s %d", buf, 0x32u);
              if (v156) {
                free(v156);
              }
              if (v161[0]) {
                free(v161[0]);
              }
            }
          }
          uint64_t v128 = (int *)*((void *)this + 1578);
          if (v128 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v129 = v18[82];
            CAFormatter::CAFormatter((CAFormatter *)buf, (const AudioStreamBasicDescription *)((char *)this + 584));
            signed int v130 = *(const char **)buf;
            int v131 = *((_DWORD *)this + 123);
            CAFormatter::CAFormatter((CAFormatter *)v161, a8);
            CALegacyLog::log(v128, 5, v129, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 190, "InitializeHWInput", "ul-dl config out of sync mHwRefASBD = %s, %d\t inMicASBD = %s %d", v130, v131, (const char *)v161[0], a10);
            if (v161[0]) {
              free(v161[0]);
            }
            if (*(void *)buf) {
              free(*(void **)buf);
            }
          }
          long long v132 = *(_OWORD *)&v159[16];
          *(_OWORD *)((char *)this + 584) = *(_OWORD *)v159;
          *(_OWORD *)((char *)this + 600) = v132;
          *((void *)this + 77) = v160;
          *((_DWORD *)this + 123) = a4;
          *float v153 = 1;
        }
      }
      else
      {
        *((_DWORD *)this + 123) = *((_DWORD *)this + 122);
        long long v123 = *((_OWORD *)this + 35);
        *(_OWORD *)((char *)this + 584) = *((_OWORD *)this + 34);
        *(_OWORD *)((char *)this + 600) = v123;
        *((void *)this + 77) = *((void *)this + 72);
      }
      if (*((double *)this + 78) != *((double *)this + 73))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v133 = CALog::LogObjIfEnabled(1, v18[82]);
        if (v133)
        {
          float64_t v134 = v133;
          if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
          {
            uint64_t v135 = *((void *)this + 73);
            uint64_t v136 = *((void *)this + 78);
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 208;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v135;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v136;
            _os_log_impl(&dword_1BB0CE000, v134, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> fs mismatched! REF=%fHz, MIC=%fHz", buf, 0x26u);
          }
        }
        float32x4_t v137 = (int *)*((void *)this + 1578);
        if (v137 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v137, 1, v18[82], "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 208, "InitializeHWInput", "fs mismatched! REF=%fHz, MIC=%fHz", *((double *)this + 73), *((double *)this + 78));
        }
      }
      *((void *)this + 263) = *((void *)this + 262);
      *((void *)this + 267) = *((void *)this + 266);
      applesauce::CF::ArrayRef::operator=((const void **)this + 269);
      int v138 = (void *)*((void *)this + 273);
      if (v138)
      {
        free(v138);
        *((void *)this + 273) = 0;
      }
      *((_DWORD *)this + 548) = 0;
      float32x4_t v139 = (const void *)*((void *)this + 276);
      if (v139)
      {
        CFRelease(v139);
        *((void *)this + 276) = 0;
      }
      uint64_t v140 = (const void *)*((void *)this + 277);
      if (v140)
      {
        CFRelease(v140);
        *((void *)this + 277) = 0;
      }
      *((unsigned char *)this + 474) = 1;
      if (*((unsigned char *)this + 475)) {
        uint64_t v81 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
      }
      else {
        uint64_t v81 = 0;
      }
      if (*((unsigned char *)this + 15880)) {
        fflush((FILE *)*MEMORY[0x1E4F143C8]);
      }
      if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
      {
        VoiceProcessorV2::PListWriteInitializeHwInputParameters(this);
        if (*((unsigned char *)this + 15961)) {
          VoiceProcessorV2::LoopBackInitialize(this, v141, v142, v143, v144);
        }
      }
      goto LABEL_229;
    }
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    double v101 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
    if (v101)
    {
      float v102 = v101;
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 133;
        _os_log_impl(&dword_1BB0CE000, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> failed to initialize - no microphone ports", buf, 0x12u);
      }
    }
    uint64_t v81 = *((void *)this + 1578);
    if (v81)
    {
      if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log((int *)v81, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 133, "InitializeHWInput", "failed to initialize - no microphone ports");
      }
      goto LABEL_297;
    }
  }
  else
  {
    uint64_t v81 = 1650879860;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 117;
      long long v82 = MEMORY[0x1E4F14500];
      long long v83 = "%25s:%-5d  unsupported stream format";
      goto LABEL_228;
    }
  }
LABEL_229:
  atomic_fetch_add((atomic_uint *volatile)this + 620, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v157);
  return v81;
}

void sub_1BB702B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  atomic_fetch_add((atomic_uint *volatile)(v37 + 2480), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a30);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ArrayRef::operator=(const void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t VoiceProcessorV2::InitializeOutput(VoiceProcessorV2 *this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  UInt32 v57 = (char *)this + 2392;
  char v58 = (*(uint64_t (**)(void))(*((void *)this + 299) + 16))();
  atomic_fetch_add((atomic_uint *volatile)this + 620, 1u);
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  ++VoiceProcessorV2::InitializeOutput(AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &)::InitOutputCallCount;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unint64_t v13 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    uint64_t v14 = (*v13 ? *v13 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.mSampleRate) = 136315650;
      *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 247;
      HIWORD(buf.mBytesPerPacket) = 1024;
      buf.UInt32 mFramesPerPacket = VoiceProcessorV2::InitializeOutput(AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &)::InitOutputCallCount;
      _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> call num %u", (uint8_t *)&buf, 0x18u);
    }
  }
  uint64_t v15 = (int *)*((void *)this + 1578);
  if (v15 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v15, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 247, "InitializeOutput", "call num %u", VoiceProcessorV2::InitializeOutput(AudioStreamBasicDescription &,AudioChannelLayout *,unsigned int &,unsigned int &,unsigned int &)::InitOutputCallCount);
  }
  if (!*((unsigned char *)this + 475)) {
    goto LABEL_41;
  }
  long long v16 = *(_OWORD *)&a2->mBytesPerPacket;
  *(_OWORD *)&buf.Float64 mSampleRate = *(_OWORD *)&a2->mSampleRate;
  *(_OWORD *)&buf.UInt32 mBytesPerPacket = v16;
  *(void *)&buf.UInt32 mBitsPerChannel = *(void *)&a2->mBitsPerChannel;
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&buf, (const AudioStreamBasicDescription *)((char *)this + 984), v12))goto LABEL_41; {
  if (!a3)
  }
    goto LABEL_41;
  unint64_t v17 = (_DWORD *)*((void *)this + 287);
  AudioChannelLayoutTag mChannelLayoutTag = a3->mChannelLayoutTag;
  if (a3->mChannelLayoutTag != v17[4]) {
    goto LABEL_41;
  }
  if (mChannelLayoutTag == 0x10000)
  {
    if (a3->mChannelBitmap != v17[5]) {
      goto LABEL_41;
    }
LABEL_125:
    *((unsigned char *)this + 475) = 1;
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (VPLogScope(void)::scope && *(int *)(VPLogScope(void)::scope + 8) >= 6)
    {
      int v50 = *(void *)VPLogScope(void)::scope ? *(NSObject **)VPLogScope(void)::scope : MEMORY[0x1E4F14500];
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        CAFormatter::CAFormatter((CAFormatter *)v59, a2);
        LODWORD(buf.mSampleRate) = 136315650;
        *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 316;
        HIWORD(buf.mBytesPerPacket) = 2080;
        *(void *)&buf.UInt32 mFramesPerPacket = *(void *)v59;
        _os_log_impl(&dword_1BB0CE000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initialize output: ioOutASBD passed OUT = %s", (uint8_t *)&buf, 0x1Cu);
        if (*(void *)v59) {
          free(*(void **)v59);
        }
      }
    }
    long long v51 = (int *)*((void *)this + 1578);
    if (v51 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v52 = VPLogScope(void)::scope;
      CAFormatter::CAFormatter((CAFormatter *)&buf, a2);
      CALegacyLog::log(v51, 6, v52, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 316, "InitializeOutput", "initialize output: ioOutASBD passed OUT = %s", *(const char **)&buf.mSampleRate);
      if (*(void *)&buf.mSampleRate) {
        free(*(void **)&buf.mSampleRate);
      }
    }
    if (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962))
    {
      VoiceProcessorV2::PListWriteInitializeOutputParameters(this);
      if (*((unsigned char *)this + 15961)) {
        VoiceProcessorV2::LoopBackInitialize(this, v53, v54, v55, v56);
      }
    }
    uint64_t v28 = 0;
    goto LABEL_102;
  }
  if (mChannelLayoutTag) {
    goto LABEL_125;
  }
  uint64_t mNumberChannelDescriptions = a3->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions != v17[6]) {
    goto LABEL_41;
  }
  if (!mNumberChannelDescriptions) {
    goto LABEL_125;
  }
  unsigned int v20 = v17 + 7;
  mChannelDescriptions = a3->mChannelDescriptions;
  while (mChannelDescriptions->mChannelLabel == *v20)
  {
    if (mChannelDescriptions->mChannelLabel == 100)
    {
      BOOL v22 = *(void *)&mChannelDescriptions->mChannelLabel == *(void *)v20
         && *(void *)mChannelDescriptions->mCoordinates == *((void *)v20 + 1);
      if (!v22 || LODWORD(mChannelDescriptions->mCoordinates[2]) != (unint64_t)v20[4]) {
        break;
      }
    }
    v20 += 5;
    ++mChannelDescriptions;
    if (!--mNumberChannelDescriptions) {
      goto LABEL_125;
    }
  }
LABEL_41:
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int v24 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(4, VPLogScope(void)::scope, 0))
  {
    uint64_t v25 = (*v24 ? *v24 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      CAFormatter::CAFormatter((CAFormatter *)v59, a2);
      LODWORD(buf.mSampleRate) = 136315650;
      *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 254;
      HIWORD(buf.mBytesPerPacket) = 2080;
      *(void *)&buf.UInt32 mFramesPerPacket = *(void *)v59;
      _os_log_impl(&dword_1BB0CE000, v25, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> ioOutASBD passed iunint64_t n = %s", (uint8_t *)&buf, 0x1Cu);
      if (*(void *)v59) {
        free(*(void **)v59);
      }
    }
  }
  uint64_t v26 = (int *)*((void *)this + 1578);
  if (v26 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v27 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)&buf, a2);
    CALegacyLog::log(v26, 4, v27, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 254, "InitializeOutput", "ioOutASBD passed iunint64_t n = %s", *(const char **)&buf.mSampleRate);
    if (*(void *)&buf.mSampleRate) {
      free(*(void **)&buf.mSampleRate);
    }
  }
  if (a2->mSampleRate == 0.0)
  {
    uint64_t v28 = 1852008051;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_102;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 257;
    unsigned int v29 = MEMORY[0x1E4F14500];
    uint64_t v30 = "%25s:%-5d  unsupported Out sample rate";
    goto LABEL_101;
  }
  if (a2->mFormatID != 1819304813)
  {
    uint64_t v28 = 1852008051;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_102;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 258;
    unsigned int v29 = MEMORY[0x1E4F14500];
    uint64_t v30 = "%25s:%-5d  unsupported out format";
    goto LABEL_101;
  }
  if (a2->mChannelsPerFrame != 1)
  {
    UInt32 v31 = a2->mBitsPerChannel >> 3;
    a2->UInt32 mBytesPerFrame = v31;
    a2->UInt32 mChannelsPerFrame = 1;
    a2->UInt32 mBytesPerPacket = v31;
    a2->UInt32 mFramesPerPacket = 1;
  }
  if (!a3)
  {
    Float64 mSampleRate = COERCE_DOUBLE(CAAudioChannelLayout::RefCountedLayout::operator new((CAAudioChannelLayout::RefCountedLayout *)0xC));
    **(void **)&Float64 mSampleRate = &unk_1F14C8B90;
    *(void *)(*(void *)&mSampleRate + 8) = 0xC00000001;
    *(void *)(*(void *)&mSampleRate + 16) = 0;
    *(_DWORD *)(*(void *)&mSampleRate + 24) = 0;
    *(_DWORD *)(*(void *)&mSampleRate + 16) = 6553601;
    buf.Float64 mSampleRate = mSampleRate;
    unint64_t v33 = (atomic_uint *)*((void *)this + 287);
    if (v33 != *(atomic_uint **)&mSampleRate)
    {
      if (v33)
      {
        if (atomic_fetch_add(v33 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v33 + 16))(v33);
        }
        Float64 mSampleRate = buf.mSampleRate;
        *((void *)this + 287) = *(void *)&buf.mSampleRate;
        if (mSampleRate == 0.0) {
          goto LABEL_79;
        }
      }
      else
      {
        *((Float64 *)this + 287) = mSampleRate;
      }
      atomic_fetch_add((atomic_uint *volatile)(*(void *)&mSampleRate + 8), 1u);
    }
LABEL_79:
    CAAudioChannelLayout::~CAAudioChannelLayout((atomic_uint **)&buf);
    goto LABEL_80;
  }
  if (LOWORD(a3->mChannelLayoutTag) != 1)
  {
    uint64_t v28 = 593717363;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_102;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 274;
    unsigned int v29 = MEMORY[0x1E4F14500];
    uint64_t v30 = "%25s:%-5d  number of channels mismatches";
    goto LABEL_101;
  }
  CAAudioChannelLayout::operator=((atomic_uint **)this + 287, (atomic_uint *)a3);
LABEL_80:
  long long v34 = *(_OWORD *)&a2->mSampleRate;
  long long v35 = *(_OWORD *)&a2->mBytesPerPacket;
  *((void *)this + 127) = *(void *)&a2->mBitsPerChannel;
  *(_OWORD *)((char *)this + 984) = v34;
  *(_OWORD *)((char *)this + 1000) = v35;
  if (*((unsigned char *)this + 474))
  {
    uint64_t v28 = (*(uint64_t (**)(VoiceProcessorV2 *))(*(void *)this + 240))(this);
    if (v28)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_102;
      }
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 284;
      unsigned int v29 = MEMORY[0x1E4F14500];
      uint64_t v30 = "%25s:%-5d  could not initialize EC/ES";
      goto LABEL_101;
    }
    *a4 = *((_DWORD *)this + 420);
    *a5 = *((_DWORD *)this + 421);
    *a6 = 0;
    if (!*((void *)this + 158))
    {
      LODWORD(v36) = *((_DWORD *)this + 124);
      unsigned int v41 = vcvtpd_u64_f64(*((double *)this + 123) * (double)v36 / *((double *)this + 78));
      if (v41 <= *((_DWORD *)this + 420)) {
        unsigned int v41 = *((_DWORD *)this + 420);
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      long long v43 = *(_OWORD *)((char *)this + 1000);
      *(_OWORD *)&buf.Float64 mSampleRate = *(_OWORD *)((char *)this + 984);
      *(_OWORD *)&buf.UInt32 mBytesPerPacket = v43;
      *(void *)&buf.UInt32 mBitsPerChannel = *((void *)this + 127);
      buf.UInt32 mChannelsPerFrame = 2;
      myAllocABLDynamic(&buf, v42, (AudioBufferList **)this + 158);
      int v44 = (_DWORD *)*((void *)this + 158);
      if (*v44)
      {
        unint64_t v45 = 0;
        long long v46 = (void **)(v44 + 4);
        do
        {
          bzero(*v46, *((unsigned int *)v46 - 1));
          ++v45;
          v46 += 2;
        }
        while (v45 < *v44);
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v47 = CALog::LogObjIfEnabled(4, VPLogScope(void)::scope);
      if (v47)
      {
        int v48 = v47;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)UInt32 v59 = 136315650;
          *(void *)&v59[4] = "vpInitializeUplink.cpp";
          __int16 v60 = 1024;
          int v61 = 310;
          __int16 v62 = 1024;
          int v63 = v42;
          _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_INFO, "%25s:%-5d  <vp> UL fade data std::string::size_type size = %u", v59, 0x18u);
        }
      }
      int v49 = (int *)*((void *)this + 1578);
      if (v49 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v49, 4, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 310, "InitializeOutput", "UL fade data std::string::size_type size = %u", v42);
      }
    }
    goto LABEL_125;
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v37 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    long long v38 = (*v37 ? *v37 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 289;
      _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> ERROR: Initialize output called before Initialize hw input was called!", (uint8_t *)&buf, 0x12u);
    }
  }
  int64_t v39 = (int *)*((void *)this + 1578);
  if (v39 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v39, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 289, "InitializeOutput", "ERROR: Initialize output called before Initialize hw input was called!");
  }
  uint64_t v28 = 1768843636;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "vpInitializeUplink.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 290;
    unsigned int v29 = MEMORY[0x1E4F14500];
    uint64_t v30 = "%25s:%-5d  Initialize output called before init hw was called";
LABEL_101:
    _os_log_impl(&dword_1BB0CE000, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&buf, 0x12u);
  }
LABEL_102:
  if (*((unsigned char *)this + 15880)) {
    fflush((FILE *)*MEMORY[0x1E4F143C8]);
  }
  atomic_fetch_add((atomic_uint *volatile)this + 620, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v57);
  return v28;
}

void sub_1BB7038EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  atomic_fetch_add((atomic_uint *volatile)(v17 + 2480), 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a11);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::GetMaxOutputPacketInfo(VoiceProcessorV2 *this, AudioStreamBasicDescription *a2, AudioChannelLayout *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unsigned int v20 = (char *)this + 2392;
  char v21 = (*(uint64_t (**)(void))(*((void *)this + 299) + 16))();
  atomic_fetch_add((atomic_uint *volatile)this + 620, 1u);
  while (*((_DWORD *)this + 621))
    usleep(0x1F4u);
  uint64_t v12 = (char *)this + 15961;
  if (*((unsigned char *)this + 475))
  {
    *a4 = *((_DWORD *)this + 420);
    *a5 = *((_DWORD *)this + 421);
    *a6 = 0;
    if (*v12)
    {
      if (*((void *)this + 1892))
      {
        *(void *)AudioStreamBasicDescription buf = 0;
        VoiceProcessorV2::PListCopyDictionaryForWrite(this, (__CFDictionary **)buf);
        unint64_t v13 = *(const void **)buf;
        if (*(void *)buf)
        {
          VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&cf, 55);
          WriteItemToDictionary((__CFDictionary **)buf, &cf, 1, 4uLL, (const char *)this + 1680);
          if (cf) {
            CFRelease(cf);
          }
          VPGetPropsPListStringForKey((applesauce::CF::StringRef *)&cf, 56);
          WriteItemToDictionary((__CFDictionary **)buf, &cf, 1, 4uLL, (const char *)this + 1684);
          if (cf) {
            CFRelease(cf);
          }
          CFRelease(v13);
        }
      }
    }
    uint64_t v14 = 0;
  }
  else
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v15 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
    {
      long long v16 = (*v15 ? *v15 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
        __int16 v24 = 1024;
        int v25 = 342;
        _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> GetMaxOutputPacketInfo : InitializeOutput hasn't been called yet!", buf, 0x12u);
      }
    }
    uint64_t v17 = (int *)*((void *)this + 1578);
    if (v17 && (*v12 || *((unsigned char *)this + 15962)))
    {
      if (VPLogScope(void)::once != -1)
      {
        uint64_t v19 = (int *)*((void *)this + 1578);
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        uint64_t v17 = v19;
      }
      CALegacyLog::log(v17, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 342, "GetMaxOutputPacketInfo", "GetMaxOutputPacketInfo : InitializeOutput hasn't been called yet!");
    }
    uint64_t v14 = (*(uint64_t (**)(VoiceProcessorV2 *, AudioStreamBasicDescription *, AudioChannelLayout *, unsigned int *, unsigned int *, unsigned int *))(*(void *)this + 24))(this, a2, a3, a4, a5, a6);
  }
  atomic_fetch_add((atomic_uint *volatile)this + 620, 0xFFFFFFFF);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v20);
  return v14;
}

void sub_1BB703C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      uint64_t v5 = *(void **)(a1 + 8);
      uint64_t v6 = *(void **)a1;
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = *--v5;
          *uint64_t v5 = 0;
          if (v7) {
            std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
          }
        }
        while (v5 != v4);
        uint64_t v6 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v4;
      operator delete(v6);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t VoiceProcessorV2::Initialize(VoiceProcessorV2 *this)
{
  v224[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (VoiceProcessorV2 *)((char *)this + 2576);
  CADeprecated::CAMutex::Lock((VoiceProcessorV2 *)((char *)this + 2576));
  *((_DWORD *)this + 3128) = 0;
  CADeprecated::CAMutex::Unlock(v2);
  *((_DWORD *)this + 3129) = 0;
  uint64_t v3 = (atomic_uint **)((char *)this + 2296);
  CAAudioChannelLayout::operator=((atomic_uint **)this + 287, 0);
  v4.i32[0] = *((_DWORD *)this + 100);
  v4.i32[1] = *((_DWORD *)this + 112);
  int32x2_t v5 = vceqz_s32(v4);
  *((int32x2_t *)this + 51) = vsub_s32((int32x2_t)vbic_s8((int8x8_t)vpaddl_u16(vpaddl_u8((uint8x8_t)vcnt_s8((int8x8_t)v4))), (int8x8_t)v5), v5);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)this + 101));
  v6.i16[0] = vaddlv_u8(v6);
  int v7 = v6.i32[0];
  if (!*((_DWORD *)this + 101)) {
    int v7 = 1;
  }
  *((_DWORD *)this + 104) = v7;
  float32x4_t v215 = this;
  if (VoiceProcessorV2::ShouldInteractWithControlCenter(this))
  {
    long long v222 = this;
    if (atomic_load_explicit((atomic_ullong *volatile)this + 2074, memory_order_acquire) != -1)
    {
      *(void *)AudioStreamBasicDescription buf = &v222;
      *(void *)ioDataSize = buf;
      std::__call_once((std::once_flag::_State_type *)this + 2074, ioDataSize, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::Initialize(void)::$_0 &&>>);
    }
  }
  (*(void (**)(VoiceProcessorV2 *))(*(void *)this + 568))(this);
  float32x4_t v214 = (char *)this + 15197;
  if (!*((unsigned char *)this + 16241) || (float v9 = *((float *)this + 4069), v9 == 0.0))
  {
    if (!*((unsigned char *)this + 15961)
      || (LOBYTE(ioDataSize[0]) = 0,
          *(_DWORD *)AudioStreamBasicDescription buf = 0,
          VoiceProcessorV2::ReadDefaultsOverride(@"vp_epio_samplerate", (const __CFString *)2, buf, (BOOL *)ioDataSize, v8), !LOBYTE(ioDataSize[0]))|| (float v9 = *(float *)buf, *(float *)buf == 0.0))
    {
      double v10 = *((double *)this + 123);
      unsigned int v11 = *((_DWORD *)this + 19);
      if (v11 - 5 <= 1)
      {
        double v12 = COERCE_DOUBLE(GetVPPreferredClientSampleRate(*((_DWORD *)this + 17), v11));
        if (v13) {
          double v10 = v12;
        }
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v14 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v15 = (*v14 ? *v14 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 489;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(double *)&buf[20] = v10;
          _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> preferredClientSampleRate: %g", buf, 0x1Cu);
        }
      }
      long long v16 = (int *)*((void *)this + 1578);
      if (v16 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v16, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 489, "CalcEpIoSampleRate", "preferredClientSampleRate: %g", v10);
      }
      double v17 = *((double *)this + 78);
      double v18 = 32000.0;
      HIDWORD(v19) = 1088784512;
      if (v17 == 44100.0 && *((double *)this + 123) == 44100.0)
      {
        LODWORD(v19) = *((_DWORD *)this + 124);
        if (fmod((double)v19 * 0.5, 1.0) == 0.0) {
          double v18 = 22050.0;
        }
      }
      if (v17 == 48000.0 && *((_DWORD *)this + 19) == 1 && *((double *)this + 123) == 48000.0)
      {
        unsigned int v20 = (_DWORD *)*((void *)this + 295);
        if (v20 != *((_DWORD **)this + 296) && *v20 != 1886614633)
        {
          float v21 = *((float *)this + 550);
          if (v21 == 0.0)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            BOOL v22 = CALog::LogObjIfEnabled(1, VPLogScope(void)::scope);
            if (v22)
            {
              unint64_t v23 = v22;
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 516;
                _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> calcasbds: mPrimaryCodecSampleRate should be used to determin epio sample rate, but it is zero! setting the max epio sample rate to 16000", buf, 0x12u);
              }
            }
            __int16 v24 = (int *)*((void *)this + 1578);
            double v18 = 16000.0;
            if (v24 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v24, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 516, "CalcEpIoSampleRate", "calcasbds: mPrimaryCodecSampleRate should be used to determin epio sample rate, but it is zero! setting the max epio sample rate to 16000");
            }
          }
          else
          {
            double v18 = fmax(v21, 16000.0);
          }
        }
      }
      float v25 = *((float *)this + 550);
      if (v25 > 0.0
        && v25 <= 16000.0
        && (*(unsigned int (**)(VoiceProcessorV2 *))(*(void *)this + 232))(this)
        && v18 > 16000.0)
      {
        double v18 = 16000.0;
      }
      *(_DWORD *)&uint8_t buf[8] = 1186693120;
      *(void *)AudioStreamBasicDescription buf = 0x467A000045FA0000;
      int v26 = *((_DWORD *)this + 18);
      if (v26 != 52 && v26 != 49) {
        goto LABEL_65;
      }
      uint64_t v27 = 0;
      uint64_t v28 = &buf[12];
      while (v10 != *(float *)&buf[4 * v27])
      {
        if (++v27 == 3) {
          goto LABEL_63;
        }
      }
      uint64_t v28 = &buf[4 * v27];
LABEL_63:
      if (v28 - buf == 12 && !*((_DWORD *)this + 19))
      {
        float v9 = 24000.0;
      }
      else
      {
LABEL_65:
        double v29 = *((double *)this + 78);
        if (v29 >= v10) {
          double v29 = v10;
        }
        if (v18 >= v29) {
          double v30 = v29;
        }
        else {
          double v30 = v18;
        }
        if (VoiceProcessorV2::GetChatFlavor(this) == 2 && (*((unsigned char *)this + 16608) & 4) != 0) {
          double v30 = 24000.0;
        }
        float v9 = v30;
      }
    }
  }
  int v31 = *((_DWORD *)this + 102);
  double v32 = v9;
  *((double *)this + 98) = v32;
  *(_OWORD *)((char *)this + 792) = xmmword_1BB8727B0;
  *((_DWORD *)this + 202) = 4;
  *((_DWORD *)this + 203) = v31;
  *((void *)this + 102) = 32;
  int v33 = *((_DWORD *)this + 103);
  *((double *)this + 103) = v32;
  *((_OWORD *)this + 52) = xmmword_1BB8727B0;
  *((_DWORD *)this + 212) = 4;
  *((_DWORD *)this + 213) = v33;
  *((void *)this + 107) = 32;
  int v34 = *((_DWORD *)this + 104);
  *((double *)this + 113) = v32;
  *((_OWORD *)this + 57) = xmmword_1BB8727B0;
  *((_DWORD *)this + 232) = 4;
  *((_DWORD *)this + 233) = v34;
  *((void *)this + 117) = 32;
  long long v35 = *((_OWORD *)this + 49);
  long long v36 = *((_OWORD *)this + 50);
  *((void *)this + 92) = *((void *)this + 102);
  *((_OWORD *)this + 44) = v35;
  *((_OWORD *)this + 45) = v36;
  *((void *)this + 88) = *((void *)this + 73);
  long long v37 = *(_OWORD *)((char *)this + 824);
  long long v38 = *(_OWORD *)((char *)this + 840);
  float32x4_t v209 = (AudioStreamBasicDescription *)((char *)this + 824);
  *((void *)this + 97) = *((void *)this + 107);
  *(_OWORD *)((char *)this + 744) = v37;
  *(_OWORD *)((char *)this + 760) = v38;
  int8x16_t v213 = (const AudioStreamBasicDescription *)((char *)this + 744);
  *((void *)this + 93) = *((void *)this + 78);
  long long v39 = *(_OWORD *)((char *)this + 984);
  long long v40 = *(_OWORD *)((char *)this + 1000);
  int32x4_t v207 = (AudioStreamBasicDescription *)((char *)this + 984);
  *((void *)this + 122) = *((void *)this + 127);
  *((_OWORD *)this + 59) = v39;
  *((_OWORD *)this + 60) = v40;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  unsigned int v41 = (const AudioStreamBasicDescription *)((char *)this + 784);
  int v42 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    long long v43 = (*v42 ? *v42 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v41);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 594;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = *(void *)ioDataSize;
      _os_log_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> calcasbds: mEpRefASBD format: %s", buf, 0x1Cu);
      if (*(void *)ioDataSize) {
        free(*(void **)ioDataSize);
      }
    }
  }
  int v44 = (int *)*((void *)this + 1578);
  if (v44 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v45 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v41);
    CALegacyLog::log(v44, 5, v45, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 594, "CalcASBDs", "calcasbds: mEpRefASBD format: %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  long long v46 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    int v47 = (*v46 ? *v46 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v209);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 595;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = *(void *)ioDataSize;
      _os_log_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcasbds: mEpMicASBD (ignore the # of channels) format: %s", buf, 0x1Cu);
      if (*(void *)ioDataSize) {
        free(*(void **)ioDataSize);
      }
    }
  }
  int v48 = (int *)*((void *)this + 1578);
  if (v48 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v49 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v209);
    CALegacyLog::log(v48, 3, v49, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 595, "CalcASBDs", "calcasbds: mEpMicASBD (ignore the # of channels) format: %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  int32x4_t v212 = (AudioStreamBasicDescription *)((char *)this + 904);
  int v50 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    long long v51 = (*v50 ? *v50 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v212);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 596;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = *(void *)ioDataSize;
      _os_log_impl(&dword_1BB0CE000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcasbds: mEpOutASBD format: %s", buf, 0x1Cu);
      if (*(void *)ioDataSize) {
        free(*(void **)ioDataSize);
      }
    }
  }
  uint64_t v52 = (int *)*((void *)this + 1578);
  if (v52 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v53 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v212);
    CALegacyLog::log(v52, 3, v53, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 596, "CalcASBDs", "calcasbds: mEpOutASBD format: %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  int8x16_t v208 = (AudioStreamBasicDescription *)((char *)this + 944);
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  uint64_t v54 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
  {
    uint64_t v55 = (*v54 ? *v54 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v208);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 597;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = *(void *)ioDataSize;
      _os_log_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcasbds: mUsOutASBD format: %s", buf, 0x1Cu);
      if (*(void *)ioDataSize) {
        free(*(void **)ioDataSize);
      }
    }
  }
  UInt32 v56 = (int *)*((void *)this + 1578);
  if (v56 && (*((unsigned char *)this + 15961) || *((unsigned char *)this + 15962)))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v57 = VPLogScope(void)::scope;
    CAFormatter::CAFormatter((CAFormatter *)buf, v208);
    CALegacyLog::log(v56, 3, v57, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 597, "CalcASBDs", "calcasbds: mUsOutASBD format: %s", *(const char **)buf);
    if (*(void *)buf) {
      free(*(void **)buf);
    }
  }
  std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)this + 2005);
  uint64_t v58 = *((void *)this + 2012);
  uint64_t v59 = *((void *)this + 2011);
  while (v58 != v59)
  {
    v58 -= 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v58);
  }
  *((void *)v215 + 2012) = v59;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)v215 + 4624);
  VoiceProcessorV2::InitializeVPParams(v215);
  __int16 v62 = v215;
  if ((*((unsigned char *)v215 + 4667) & 0x10) != 0)
  {
    (*(void (**)(VoiceProcessorV2 *))(*(void *)v215 + 384))(v215);
    __int16 v62 = v215;
  }
  if ((*((unsigned char *)v62 + 4672) & 0x80) != 0)
  {
    (*(void (**)(VoiceProcessorV2 *))(*(void *)v62 + 392))(v62);
    __int16 v62 = v215;
  }
  uint8x8_t v63 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v62 + 112));
  v63.i16[0] = vaddlv_u8(v63);
  int v64 = v63.i32[0];
  if (!*((_DWORD *)v62 + 112)) {
    int v64 = 1;
  }
  *((_DWORD *)v62 + 103) = v64;
  *((_DWORD *)v62 + 213) = v64;
  *((_DWORD *)v62 + 193) = v64;
  uint64_t v65 = (uint64_t)v62 + 1928;
  if (*((unsigned char *)v62 + 1952))
  {
    *(void *)AudioStreamBasicDescription buf = (char *)v62 + 1928;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)v62 + 1952) = 0;
  }
  uint64_t v66 = (uint64_t)v62 + 1960;
  if (*((unsigned char *)v62 + 1984))
  {
    *(void *)AudioStreamBasicDescription buf = (char *)v62 + 1960;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)v62 + 1984) = 0;
  }
  uint64_t v67 = (uint64_t)v62 + 1368;
  if (*((unsigned char *)v62 + 1392))
  {
    *(void *)AudioStreamBasicDescription buf = (char *)v62 + 1368;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)v62 + 1392) = 0;
  }
  unint64_t v68 = *((void *)v62 + 249);
  *((void *)v62 + 249) = 0;
  if (v68) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  if (*((double *)v62 + 73) == v41->mSampleRate)
  {
LABEL_177:
    if (*((double *)v215 + 78) != v209->mSampleRate)
    {
      float32x4_t v211 = v3;
      memset(ioDataSize, 0, sizeof(ioDataSize));
      *(void *)&long long v217 = 0;
      long long v222 = 0;
      long long v223 = 0;
      v224[0] = 0;
      uint64_t v79 = (double *)v215;
      if (*((_DWORD *)v215 + 213))
      {
        unsigned int v80 = 0;
        while (1)
        {
          VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)&outData, v79[78], v79[103], (VoiceProcessorV2 *)v79, 1, v60, v61);
          uint64_t v83 = outData;
          if (!outData)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_236;
            }
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 728;
            float32x4_t v105 = MEMORY[0x1E4F14500];
            int v106 = "%25s:%-5d  ERROR: can't create mic src";
            goto LABEL_235;
          }
          uint64_t v84 = *(void *)&ioDataSize[2];
          if (*(void *)&ioDataSize[2] >= (unint64_t)v217)
          {
            uint64_t v86 = (uint64_t)(*(void *)&ioDataSize[2] - *(void *)ioDataSize) >> 3;
            if ((unint64_t)(v86 + 1) >> 61) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v87 = (uint64_t)(v217 - *(void *)ioDataSize) >> 2;
            if (v87 <= v86 + 1) {
              unint64_t v87 = v86 + 1;
            }
            uint64_t v88 = (char *)((void)v217 - *(void *)ioDataSize >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v87);
            *(void *)&uint8_t buf[32] = &v217;
            if (v88) {
              uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>((unint64_t)v88);
            }
            else {
              uint64_t v89 = 0;
            }
            char v90 = &v88[8 * v86];
            *(void *)AudioStreamBasicDescription buf = v88;
            *(void *)&uint8_t buf[8] = v90;
            *(void *)&unsigned char buf[24] = &v88[8 * v89];
            uint64_t outData = 0;
            *(void *)char v90 = v83;
            *(void *)&buf[16] = v90 + 8;
            std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(ioDataSize, buf);
            uint64_t v85 = *(void *)&ioDataSize[2];
            std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            uint64_t outData = 0;
            **(void **)&ioDataSize[2] = v83;
            uint64_t v85 = v84 + 8;
          }
          *(void *)&ioDataSize[2] = v85;
          VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)v219, *((double *)v215 + 78), *((double *)v215 + 103), v215, 1, v81, v82);
          uint64_t v91 = *(void *)v219;
          if (!*(void *)v219) {
            break;
          }
          char v92 = v223;
          if ((unint64_t)v223 >= v224[0])
          {
            uint64_t v94 = (v223 - (char *)v222) >> 3;
            if ((unint64_t)(v94 + 1) >> 61) {
              std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v95 = (uint64_t)(v224[0] - (void)v222) >> 2;
            if (v95 <= v94 + 1) {
              unint64_t v95 = v94 + 1;
            }
            if (v224[0] - (void)v222 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v96 = v95;
            }
            *(void *)&uint8_t buf[32] = v224;
            if (v96) {
              unint64_t v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v96);
            }
            else {
              uint64_t v97 = 0;
            }
            unsigned int v98 = (void *)(v96 + 8 * v94);
            *(void *)AudioStreamBasicDescription buf = v96;
            *(void *)&uint8_t buf[8] = v98;
            *(void *)&unsigned char buf[24] = v96 + 8 * v97;
            *(void *)float32x4_t v219 = 0;
            *unsigned int v98 = v91;
            *(void *)&buf[16] = v98 + 1;
            std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(&v222, buf);
            long long v93 = v223;
            std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(void *)float32x4_t v219 = 0;
            *(void *)long long v223 = v91;
            long long v93 = v92 + 8;
          }
          long long v223 = v93;
          ++v80;
          uint64_t v79 = (double *)v215;
          if (v80 >= *((_DWORD *)v215 + 213)) {
            goto LABEL_207;
          }
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_236;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 732;
        float32x4_t v105 = MEMORY[0x1E4F14500];
        int v106 = "%25s:%-5d  ERROR: can't create mic clip src";
LABEL_235:
        _os_log_impl(&dword_1BB0CE000, v105, OS_LOG_TYPE_ERROR, v106, buf, 0x12u);
LABEL_236:
        uint64_t v100 = 1651532146;
        *(void *)AudioStreamBasicDescription buf = &v222;
        std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)AudioStreamBasicDescription buf = ioDataSize;
        std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        goto LABEL_237;
      }
LABEL_207:
      std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(v66, (uint64_t)ioDataSize);
      std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(v67, (uint64_t)&v222);
      *(void *)AudioStreamBasicDescription buf = &v222;
      std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)AudioStreamBasicDescription buf = ioDataSize;
      std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      uint64_t v3 = v211;
    }
    double mSampleRate = v207->mSampleRate;
    if (v212->mSampleRate != v207->mSampleRate)
    {
      VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)ioDataSize, v212->mSampleRate, mSampleRate, v215, 1, v60, v61);
      if (!*(void *)ioDataSize)
      {
        uint64_t v100 = 1651532146;
        unint64_t v68 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (v68)
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 743;
          _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ERROR: can't create output src", buf, 0x12u);
        }
LABEL_213:
        if (v100) {
          goto LABEL_237;
        }
        unsigned int v101 = *((_DWORD *)v215 + 123);
        *((_DWORD *)v215 + 125) = v101;
        unsigned int v102 = *((_DWORD *)v215 + 124);
        *((_DWORD *)v215 + 126) = v102;
        if (*((unsigned char *)v215 + 1952))
        {
          double mSampleRate = *((double *)v215 + 73);
          *((_DWORD *)v215 + 125) = vcvtpd_u64_f64(*((double *)v215 + 98) * (float)v101 / mSampleRate);
        }
        if (*((unsigned char *)v215 + 1984))
        {
          double mSampleRate = *((double *)v215 + 78);
          *((_DWORD *)v215 + 126) = vcvtpd_u64_f64(*((double *)v215 + 103) * (float)v102 / mSampleRate);
        }
        if (!v214[1044] || (unsigned int v103 = *((_DWORD *)v215 + 4068)) == 0)
        {
          if (v214[764])
          {
            LOBYTE(v222) = 0;
            *(_DWORD *)AudioStreamBasicDescription buf = 0;
            VoiceProcessorV2::ReadDefaultsOverride(@"vp_epio_blksz", (const __CFString *)1, buf, (BOOL *)&v222, v61);
            if ((_BYTE)v222)
            {
              unsigned int v103 = *(_DWORD *)buf;
              if (*(_DWORD *)buf) {
                goto LABEL_263;
              }
            }
            LOBYTE(outData) = 0;
            ioDataSize[0] = 0;
            VoiceProcessorV2::ReadDefaultsOverride(@"vp_epio_blksz_ms", (const __CFString *)2, (BOOL *)ioDataSize, (BOOL *)&outData, v104);
            if ((_BYTE)outData && *(float *)ioDataSize != 0.0)
            {
              unsigned int v103 = (v209->mSampleRate * *(float *)ioDataSize * 0.001);
              goto LABEL_263;
            }
          }
          int v111 = *((_DWORD *)v215 + 19);
          if ((v111 - 2) < 5) {
            goto LABEL_261;
          }
          if (v111 == 1)
          {
            unint64_t ShouldUseOptimizedBlockSizeForFacePlant = VoiceProcessorV2::ShouldUseOptimizedBlockSizeForFacePlant(v215);
            double v188 = 0.012;
            if (ShouldUseOptimizedBlockSizeForFacePlant) {
              double v188 = 0.01;
            }
            LODWORD(ShouldUseOptimizedBlockSizeForFacePlant) = vcvtpd_u64_f64(v188 * *((double *)v215 + 103));
            unsigned int NextFFTFriendlyBlkSz = BlockSizeHelper::GetNextFFTFriendlyBlkSz(ShouldUseOptimizedBlockSizeForFacePlant);
            goto LABEL_262;
          }
          if (v111 == 8
            || ((double v184 = *((double *)v215 + 103), !*((unsigned char *)v215 + 1984))
              ? (float v185 = (float)*((unsigned int *)v215 + 124))
              : (LODWORD(mSampleRate) = *((_DWORD *)v215 + 124),
                 float v185 = v184 / *((double *)v215 + 78) * (double)*(unint64_t *)&mSampleRate),
                fmodf(v185, 1.0) != 0.0))
          {
LABEL_261:
            LODWORD(v68) = vcvtpd_u64_f64(v209->mSampleRate * 0.01);
            unsigned int NextFFTFriendlyBlkSz = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v68);
LABEL_262:
            unsigned int v103 = NextFFTFriendlyBlkSz;
            goto LABEL_263;
          }
          float v189 = (float)vcvtpd_u64_f64(v184 * 0.008);
          float v190 = (float)vcvtmd_u64_f64(v184 * 0.02);
          BOOL v191 = v185 < v189 || v185 > v190;
          if (v191)
          {
            float v192 = (float)vcvtpd_u64_f64(v184 * 0.01);
            unsigned int v193 = -1;
            float v194 = 0.0;
            for (int i = 2; i != 8; ++i)
            {
              if (v185 < v189) {
                float v196 = v185 * (float)i;
              }
              else {
                float v196 = v185 / (float)i;
              }
              float v197 = fmodf(v196, 1.0);
              if (v196 < v189
                || (v197 == 0.0 ? (BOOL v198 = v196 > v190) : (BOOL v198 = 1),
                    v198
                 || (unint64_t v68 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v196), v196 != (float)v68)))
              {
                float v196 = v194;
              }
              else
              {
                unsigned int v199 = vabds_f32(v196, v192);
                BOOL v191 = v193 > v199;
                unsigned int v193 = v199;
                if (!v191) {
                  break;
                }
              }
              float v194 = v196;
            }
            if (v194 == 0.0) {
              goto LABEL_261;
            }
            unsigned int v103 = v194;
          }
          else
          {
            unsigned int v103 = v185;
            unint64_t v68 = BlockSizeHelper::GetNextFFTFriendlyBlkSz(v185);
            if (v185 != (float)v68) {
              goto LABEL_261;
            }
          }
        }
LABEL_263:
        *((_DWORD *)v215 + 127) = v103;
        *((_DWORD *)v215 + 131) = v103;
        if (*((void *)v215 + 249)) {
          *((_DWORD *)v215 + 131) = vcvtpd_u64_f64(*((double *)v215 + 123) * (float)v103 / *((double *)v215 + 113));
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        BOOL v113 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          int v114 = (*v113 ? *v113 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v115 = *((unsigned int *)v215 + 123);
            uint64_t v116 = *((unsigned int *)v215 + 124);
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 568;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v115;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v116;
            _os_log_impl(&dword_1BB0CE000, v114, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcblkzsizes: mHwRefBlkSz = %lu, mHwMicBlkSz = %lu", buf, 0x26u);
          }
        }
        long long v117 = (int *)*((void *)v215 + 1578);
        if (v117 && (v214[764] || v214[765]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v117, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 568, "CalcBlkSzs", "calcblkzsizes: mHwRefBlkSz = %lu, mHwMicBlkSz = %lu", *((unsigned int *)v215 + 123), *((unsigned int *)v215 + 124));
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        long long v118 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          UInt32 v119 = (*v118 ? *v118 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v120 = *((unsigned int *)v215 + 125);
            uint64_t v121 = *((unsigned int *)v215 + 126);
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 569;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v120;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v121;
            _os_log_impl(&dword_1BB0CE000, v119, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcblkzsizes: mDsRefBlkSz = %lu, mDsMicBlkSz = %lu", buf, 0x26u);
          }
        }
        double v122 = (int *)*((void *)v215 + 1578);
        if (v122 && (v214[764] || v214[765]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v122, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 569, "CalcBlkSzs", "calcblkzsizes: mDsRefBlkSz = %lu, mDsMicBlkSz = %lu", *((unsigned int *)v215 + 125), *((unsigned int *)v215 + 126));
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        long long v123 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
        {
          double v124 = (*v123 ? *v123 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v125 = *((unsigned int *)v215 + 127);
            uint64_t v126 = *((unsigned int *)v215 + 131);
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 570;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v125;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v126;
            _os_log_impl(&dword_1BB0CE000, v124, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> calcblkzsizes: mEpIoBlkSz  = %lu, mUsOutBlkSz = %lu", buf, 0x26u);
          }
        }
        int v127 = (int *)*((void *)v215 + 1578);
        if (v127 && (v214[764] || v214[765]))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          CALegacyLog::log(v127, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 570, "CalcBlkSzs", "calcblkzsizes: mEpIoBlkSz  = %lu, mUsOutBlkSz = %lu", *((unsigned int *)v215 + 127), *((unsigned int *)v215 + 131));
        }
        uint64_t v128 = v215;
        if (*((_DWORD *)v215 + 248) == 1819304813)
        {
          unsigned int v129 = *((_DWORD *)v215 + 253);
          if (v129 >= 2)
          {
            *((_DWORD *)v215 + 250) /= v129;
            *((_DWORD *)v215 + 252) /= v129;
            *((_DWORD *)v215 + 253) = 1;
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          signed int v130 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            int v131 = (*v130 ? *v130 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
            {
              CAFormatter::CAFormatter((CAFormatter *)ioDataSize, v207);
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1024;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = *(void *)ioDataSize;
              _os_log_impl(&dword_1BB0CE000, v131, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> initialize: mOutASBD computed = %s", buf, 0x1Cu);
              if (*(void *)ioDataSize) {
                free(*(void **)ioDataSize);
              }
            }
          }
          uint64_t v128 = v215;
          long long v132 = (int *)*((void *)v215 + 1578);
          if (v132 && (v214[764] || v214[765]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v133 = VPLogScope(void)::scope;
            CAFormatter::CAFormatter((CAFormatter *)buf, v207);
            CALegacyLog::log(v132, 5, v133, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 1024, "Initialize", "initialize: mOutASBD computed = %s", *(const char **)buf);
            if (*(void *)buf) {
              free(*(void **)buf);
            }
            uint64_t v128 = v215;
          }
        }
        float32x4_t v206 = (AudioStreamBasicDescription *)((char *)v128 + 704);
        myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)v128 + 704), *((_DWORD *)v128 + 123), (AudioBufferList **)v128 + 128);
        myAllocABLDynamic(v213, *((_DWORD *)v215 + 124), (AudioBufferList **)v215 + 129);
        myAllocABLDynamic(v206, *((_DWORD *)v215 + 123), (AudioBufferList **)v215 + 130);
        myAllocABLDynamic(v213, *((_DWORD *)v215 + 124), (AudioBufferList **)v215 + 131);
        myAllocABLDynamic(v41, *((_DWORD *)v215 + 125), (AudioBufferList **)v215 + 132);
        myAllocABLDynamic(v209, *((_DWORD *)v215 + 126), (AudioBufferList **)v215 + 133);
        myAllocABLDynamic(v41, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 134);
        myAllocABLDynamic(v209, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 135);
        myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 136);
        myAllocABLDynamic(v208, *((_DWORD *)v215 + 131), (AudioBufferList **)v215 + 137);
        float64_t v134 = v215;
        if (*((unsigned char *)v215 + 2244) && *((_DWORD *)v215 + 18) == 22)
        {
          myAllocABLDynamic(v41, *((_DWORD *)v215 + 418), (AudioBufferList **)v215 + 207);
          uint64_t v135 = (_DWORD *)*((void *)v215 + 207);
          if (*v135)
          {
            unint64_t v136 = 0;
            float32x4_t v137 = (void **)(v135 + 4);
            do
            {
              bzero(*v137, *((unsigned int *)v137 - 1));
              ++v136;
              v137 += 2;
            }
            while (v136 < *v135);
          }
          uint64_t v138 = *((unsigned int *)v215 + 418);
          float32x4_t v139 = malloc_type_malloc(4 * v138, 0x2C8E6D5CuLL);
          uint64_t v140 = v139;
          if (v138 && !v139)
          {
            exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            float32x4_t v203 = std::bad_alloc::bad_alloc(exception);
          }
          bzero(v139, 4 * v138);
          float64_t v134 = v215;
          *((void *)v215 + 208) = v140;
        }
        uint64_t v141 = (void *)*((void *)v134 + 176);
        if (v141)
        {
          free(v141);
          *((void *)v134 + 176) = 0;
        }
        size_t v142 = **((unsigned int **)v215 + 131);
        uint64_t v143 = malloc_type_malloc(v142, 0x7C51E058uLL);
        if (v142) {
          BOOL v144 = v143 == 0;
        }
        else {
          BOOL v144 = 0;
        }
        if (!v144)
        {
          *((void *)v215 + 176) = v143;
          myAllocABLDynamic(v209, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 177);
          myAllocABLDynamic(v213, *((_DWORD *)v215 + 124), (AudioBufferList **)v215 + 178);
          myAllocABLDynamic(v209, *((_DWORD *)v215 + 126), (AudioBufferList **)v215 + 179);
          unsigned int v145 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)v215 + 138, v145);
          CADeprecated::CABufferList::AllocateBuffers(*((void *)v215 + 138), *((_DWORD *)v215 + 212) * *((_DWORD *)v215 + 127));
          int v146 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)v215 + 139, v146);
          CADeprecated::CABufferList::AllocateBuffers(*((void *)v215 + 139), *((_DWORD *)v215 + 212) * *((_DWORD *)v215 + 127));
          int v147 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)v215 + 140, v147);
          CADeprecated::CABufferList::AllocateBuffers(*((void *)v215 + 140), *((_DWORD *)v215 + 212) * *((_DWORD *)v215 + 127));
          int v148 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)0x29, (const CAStreamBasicDescription *)1);
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((void **)v215 + 141, v148);
          CADeprecated::CABufferList::AllocateBuffers(*((void *)v215 + 141), *((_DWORD *)v215 + 212) * *((_DWORD *)v215 + 127));
          double v149 = v215;
          if (*((_DWORD *)v215 + 248) == 1819304813)
          {
            *((_DWORD *)v215 + 133) = *((_DWORD *)v215 + 131);
            CAAudioChannelLayout::operator=(v3, 0);
            double v149 = v215;
            LODWORD(v150) = *((_DWORD *)v215 + 126);
            LODWORD(v151) = *((_DWORD *)v215 + 127);
            *((_DWORD *)v215 + 420) = *((_DWORD *)v215 + 131) * vcvtpd_u64_f64((double)v150 / (double)v151);
            *((_DWORD *)v215 + 421) = *((_DWORD *)v215 + 250);
          }
          myAllocABLDynamic(v206, *((_DWORD *)v149 + 123), (AudioBufferList **)v149 + 151);
          *((_DWORD *)v215 + 288) = 0;
          *((_DWORD *)v215 + 294) = 0;
          *((_DWORD *)v215 + 293) = 0;
          AudioObjectID v152 = *((_DWORD *)v215 + 285);
          strcpy(buf, "tfastpni");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          ioDataSize[0] = 4;
          float32x4_t v205 = (_DWORD *)((char *)v215 + 1172);
          OSStatus PropertyData = AudioObjectGetPropertyData(v152, (const AudioObjectPropertyAddress *)buf, 0, 0, ioDataSize, (char *)v215 + 1172);
          if (PropertyData)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            char v154 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              uint64_t v155 = (*v154 ? *v154 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1610;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = PropertyData;
                _os_log_impl(&dword_1BB0CE000, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting input safety offset", buf, 0x18u);
              }
            }
            float32x2_t v156 = (int *)*((void *)v215 + 1578);
            if (v156 && (v214[764] || v214[765]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v156, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1610, "GetHardwareSafetyOffsets", "error %d getting input safety offset", PropertyData);
            }
          }
          AudioObjectID v157 = *((_DWORD *)v215 + 284);
          strcpy(buf, "tfasptuo");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          ioDataSize[0] = 4;
          float32x4_t v204 = (_DWORD *)((char *)v215 + 1176);
          OSStatus v158 = AudioObjectGetPropertyData(v157, (const AudioObjectPropertyAddress *)buf, 0, 0, ioDataSize, (char *)v215 + 1176);
          if (v158)
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            float32x2_t v159 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
            {
              uint64_t v160 = (*v159 ? *v159 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1613;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v158;
                _os_log_impl(&dword_1BB0CE000, v160, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d getting output safety offset", buf, 0x18u);
              }
            }
            uint64_t v161 = (int *)*((void *)v215 + 1578);
            if (v161 && (v214[764] || v214[765]))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              CALegacyLog::log(v161, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1613, "GetHardwareSafetyOffsets", "error %d getting output safety offset", v158);
            }
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int32x4_t v162 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            __int16 v163 = (*v162 ? *v162 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
            {
              int v164 = *v205;
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1615;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v164;
              _os_log_impl(&dword_1BB0CE000, v163, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Input safety offset of the aggregate device is %u", buf, 0x18u);
            }
          }
          __int16 v165 = (int *)*((void *)v215 + 1578);
          if (v165 && (v214[764] || v214[765]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v165, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1615, "GetHardwareSafetyOffsets", "Input safety offset of the aggregate device is %u", *v205);
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v166 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            __int16 v167 = (*v166 ? *v166 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
            {
              int v168 = *v204;
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "VoiceProcessor_v2.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1616;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v168;
              _os_log_impl(&dword_1BB0CE000, v167, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> Output safety offset of the aggregate device is %u", buf, 0x18u);
            }
          }
          __int16 v169 = (int *)*((void *)v215 + 1578);
          if (v169 && (v214[764] || v214[765]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v169, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/VoiceProcessor_v2.cpp", 1616, "GetHardwareSafetyOffsets", "Output safety offset of the aggregate device is %u", *v204);
          }
          (*(void (**)(VoiceProcessorV2 *))(*(void *)v215 + 264))(v215);
          *((unsigned char *)v215 + 476) = 1;
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 419);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 420);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 422);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 421);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 423);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 424);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 425);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 426);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 427);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 428);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 437);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 2064);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 429);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 430);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 431);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 432);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 434);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 436);
          myAllocABLDynamic(v209, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 435);
          myAllocABLDynamic(v209, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 433);
          unsigned int v170 = *((_DWORD *)v215 + 127);
          *((uint32x2_t *)v215 + 536) = vshl_u32((uint32x2_t)vdup_n_s32(v170), (uint32x2_t)0x300000002);
          float v171 = *((double *)v215 + 103);
          unsigned int v172 = (float)((float)((float)v170 * 1000.0) / v171);
          if (v170 <= v172) {
            unsigned int v172 = 1;
          }
          *((_DWORD *)v215 + 1074) = v172;
          myAllocABLDynamic(v209, 2 * v170, (AudioBufferList **)v215 + 538);
          uint64_t v173 = *((void *)v215 + 538);
          unsigned int v174 = *(char **)(v173 + 16);
          uint64_t v175 = *((unsigned int *)v215 + 127);
          if (v175)
          {
            memset_pattern16(v174, &unk_1BB87C230, 4 * v175);
            bzero(&v174[4 * (v175 - 1) + 4], 4 * v175);
          }
          if (*((_DWORD *)v215 + 103) >= 2u)
          {
            memcpy(*(void **)(v173 + 32), v174, 8 * v175);
            LODWORD(v175) = *((_DWORD *)v215 + 127);
          }
          myAllocABLDynamic(v212, v175, (AudioBufferList **)v215 + 500);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 501);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 502);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 503);
          myAllocABLDynamic(v212, *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 504);
          float __A = 1.0;
          vDSP_vfill(&__A, *(float **)(*((void *)v215 + 500) + 16), 1, *((unsigned int *)v215 + 127));
          vDSP_vfill(&__A, *(float **)(*((void *)v215 + 501) + 16), 1, *((unsigned int *)v215 + 127));
          vDSP_vfill(&__A, *(float **)(*((void *)v215 + 502) + 16), 1, *((unsigned int *)v215 + 127));
          vDSP_vfill(&__A, *(float **)(*((void *)v215 + 503) + 16), 1, *((unsigned int *)v215 + 127));
          vDSP_vfill(&__A, *(float **)(*((void *)v215 + 504) + 16), 1, *((unsigned int *)v215 + 127));
          myAllocABLDynamic(v209, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 505);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 506);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 507);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 511);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 512);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 508);
          myAllocABLDynamic(v212, 2 * *((_DWORD *)v215 + 127), (AudioBufferList **)v215 + 510);
          uint64_t v176 = (VPTimeFreqConverter *)*((void *)v215 + 513);
          if (v176)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v176);
            MEMORY[0x1C185D370]();
          }
          long long v177 = (VPTimeFreqConverter *)*((void *)v215 + 514);
          if (v177)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v177);
            MEMORY[0x1C185D370]();
          }
          long long v178 = (VPTimeFreqConverter *)*((void *)v215 + 515);
          if (v178)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v178);
            MEMORY[0x1C185D370]();
          }
          long long v179 = (VPTimeFreqConverter *)*((void *)v215 + 516);
          if (v179)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v179);
            MEMORY[0x1C185D370]();
          }
          float v180 = (VPTimeFreqConverter *)*((void *)v215 + 517);
          if (v180)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v180);
            MEMORY[0x1C185D370]();
          }
          float v181 = (VPTimeFreqConverter *)*((void *)v215 + 518);
          if (v181)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v181);
            MEMORY[0x1C185D370]();
          }
          unsigned int v182 = (VPTimeFreqConverter *)*((void *)v215 + 519);
          if (v182)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v182);
            MEMORY[0x1C185D370]();
          }
          unsigned int v183 = (VPTimeFreqConverter *)*((void *)v215 + 520);
          if (v183)
          {
            VPTimeFreqConverter::~VPTimeFreqConverter(v183);
            MEMORY[0x1C185D370]();
          }
          VPTimeFreqConverter_Create();
        }
        int32x4_t v200 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        int8x16_t v201 = std::bad_alloc::bad_alloc(v200);
      }
      unint64_t v68 = *((void *)v215 + 249);
      *((void *)v215 + 249) = *(void *)ioDataSize;
      if (v68) {
        std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
      }
    }
    uint64_t v100 = 0;
    goto LABEL_213;
  }
  uint64_t v210 = (uint64_t)v62 + 1368;
  memset(ioDataSize, 0, sizeof(ioDataSize));
  *(void *)&long long v217 = 0;
  UInt32 v69 = (double *)v215;
  if (!*((_DWORD *)v215 + 203))
  {
LABEL_176:
    std::optional<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>>::operator=[abi:ne180100]<std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>,void>(v65, (uint64_t)ioDataSize);
    *(void *)AudioStreamBasicDescription buf = ioDataSize;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    uint64_t v67 = v210;
    goto LABEL_177;
  }
  unsigned int v70 = 0;
  while (1)
  {
    VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)&v222, v69[73], v69[98], (VoiceProcessorV2 *)v69, 1, v60, v61);
    BOOL v71 = v222;
    if (!v222) {
      break;
    }
    uint64_t v72 = *(void *)&ioDataSize[2];
    if (*(void *)&ioDataSize[2] >= (unint64_t)v217)
    {
      uint64_t v74 = (uint64_t)(*(void *)&ioDataSize[2] - *(void *)ioDataSize) >> 3;
      if ((unint64_t)(v74 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v75 = (uint64_t)(v217 - *(void *)ioDataSize) >> 2;
      if (v75 <= v74 + 1) {
        unint64_t v75 = v74 + 1;
      }
      if ((void)v217 - *(void *)ioDataSize >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v76 = v75;
      }
      *(void *)&uint8_t buf[32] = &v217;
      if (v76) {
        unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v76);
      }
      else {
        uint64_t v77 = 0;
      }
      unint64_t v78 = (VoiceProcessorV2 **)(v76 + 8 * v74);
      *(void *)AudioStreamBasicDescription buf = v76;
      *(void *)&uint8_t buf[8] = v78;
      *(void *)&unsigned char buf[24] = v76 + 8 * v77;
      long long v222 = 0;
      *unint64_t v78 = v71;
      *(void *)&buf[16] = v78 + 1;
      std::vector<std::unique_ptr<AllPassComb>>::__swap_out_circular_buffer(ioDataSize, buf);
      uint64_t v73 = *(void *)&ioDataSize[2];
      std::__split_buffer<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      **(void **)&ioDataSize[2] = v222;
      uint64_t v73 = v72 + 8;
    }
    *(void *)&ioDataSize[2] = v73;
    ++v70;
    UInt32 v69 = (double *)v215;
    if (v70 >= *((_DWORD *)v215 + 203)) {
      goto LABEL_176;
    }
  }
  uint64_t v100 = 1651532146;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 714;
    _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ERROR: can't create ref src", buf, 0x12u);
  }
  *(void *)AudioStreamBasicDescription buf = ioDataSize;
  std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  uint64_t v67 = v210;
LABEL_237:
  if (*((unsigned char *)v215 + 1952))
  {
    *(void *)AudioStreamBasicDescription buf = v65;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)v215 + 1952) = 0;
  }
  if (*((unsigned char *)v215 + 1984))
  {
    *(void *)AudioStreamBasicDescription buf = v66;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)v215 + 1984) = 0;
  }
  if (*((unsigned char *)v215 + 1392))
  {
    *(void *)AudioStreamBasicDescription buf = v67;
    std::vector<std::unique_ptr<VoiceProcessor::SampleRateConverter>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *((unsigned char *)v215 + 1392) = 0;
  }
  uint64_t v107 = *((void *)v215 + 249);
  *((void *)v215 + 249) = 0;
  if (v107) {
    std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
  }
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  double v108 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
  {
    float v109 = (*v108 ? *v108 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1010;
      _os_log_impl(&dword_1BB0CE000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> initialize: error initializing sample rate converters", buf, 0x12u);
    }
  }
  uint64_t v110 = (int *)*((void *)v215 + 1578);
  if (v110 && (v214[764] || v214[765]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CALegacyLog::log(v110, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 1010, "Initialize", "initialize: error initializing sample rate converters");
  }
  return v100;
}

void sub_1BB70AA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::Initialize(void)::$_1::operator()(CFStringRef *a1, VoiceProcessorV2 *a2, const __CFString *a3)
{
  if (a3)
  {
    applesauce::CF::convert_to<std::string,0>(a3, (uint64_t)&v28);
    memset(&v27, 0, sizeof(v27));
    if (*((unsigned char *)a2 + 2244))
    {
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v27.__end_cap_, 1uLL);
      __v.__begin_ = __v.__first_;
      __v.__end_ = __v.__first_;
      __v.__end_cap_.__value_ = &__v.__first_[v5];
      std::string::basic_string[abi:ne180100]<0>(__v.__first_->__r_.__value_.__r.__words, "media");
      ++__v.__end_;
      std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
      end = v27.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v27.__end_ = end;
    }
    else
    {
      end = 0;
    }
    if (*((unsigned char *)a2 + 2245))
    {
      FarEndVoiceMixChannelint Count = VoiceProcessorV2::GetFarEndVoiceMixChannelCount(a2);
      end = v27.__end_;
      if (FarEndVoiceMixChannelCount >= 2)
      {
        if (v27.__end_ >= v27.__end_cap_.__value_)
        {
          unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_ - (char *)v27.__begin_) >> 3);
          if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v9 = 0x5555555555555556 * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3);
          if (v9 <= v8 + 1) {
            unint64_t v9 = v8 + 1;
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v27.__end_cap_.__value_ - (char *)v27.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v10 = v9;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v27.__end_cap_;
          if (v10) {
            unsigned int v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((uint64_t)&v27.__end_cap_, v10);
          }
          else {
            unsigned int v11 = 0;
          }
          __v.__first_ = v11;
          __v.__begin_ = v11 + v8;
          __v.__end_ = __v.__begin_;
          __v.__end_cap_.__value_ = &v11[v10];
          std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, "spatial");
          ++__v.__end_;
          std::vector<std::string>::__swap_out_circular_buffer(&v27, &__v);
          end = v27.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v27.__end_->__r_.__value_.__r.__words, "spatial");
          ++end;
        }
        v27.__end_ = end;
      }
    }
    if (v27.__begin_ != end)
    {
      std::string::append(&v28, " (", 2uLL);
      std::vector<std::string>::pointer begin = v27.__begin_;
      for (std::vector<std::string>::pointer i = v27.__end_; begin != i; ++begin)
      {
        if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = begin->__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__v, size + 2);
        if (SHIBYTE(__v.__end_) >= 0) {
          p_v = &__v;
        }
        else {
          p_v = __v.__first_;
        }
        if (size)
        {
          if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::vector<std::string>::pointer v16 = begin;
          }
          else {
            std::vector<std::string>::pointer v16 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
          }
          memmove(p_v, v16, size);
        }
        strcpy((char *)p_v + size, ", ");
        if (SHIBYTE(__v.__end_) >= 0) {
          first = (const std::string::value_type *)&__v;
        }
        else {
          first = (const std::string::value_type *)__v.__first_;
        }
        if (SHIBYTE(__v.__end_) >= 0) {
          std::string::size_type end_high = HIBYTE(__v.__end_);
        }
        else {
          std::string::size_type end_high = (std::string::size_type)__v.__begin_;
        }
        std::string::append(&v28, first, end_high);
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        unsigned int v20 = (std::string *)v28.__r_.__value_.__r.__words[0];
        uint64_t v19 = --v28.__r_.__value_.__l.__size_;
      }
      else
      {
        uint64_t v19 = HIBYTE(v28.__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&v28.__r_.__value_.__s + 23) = v19 & 0x7F;
        unsigned int v20 = &v28;
      }
      v20->__r_.__value_.__s.__data_[v19] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
        uint64_t v21 = --v28.__r_.__value_.__l.__size_;
      }
      else
      {
        uint64_t v21 = HIBYTE(v28.__r_.__value_.__r.__words[2]) - 1;
        *((unsigned char *)&v28.__r_.__value_.__s + 23) = v21 & 0x7F;
        BOOL v22 = &v28;
      }
      v22->__r_.__value_.__s.__data_[v21] = 0;
      std::string::append(&v28, ")", 1uLL);
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v23 = &v28;
    }
    else {
      unint64_t v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if (v23)
    {
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v24 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v24 = v28.__r_.__value_.__l.__size_;
      }
      CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
      *a1 = v25;
      if (!v25)
      {
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    else
    {
      *a1 = 0;
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v27;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a1 = 0;
  }
}

void sub_1BB70AF98(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, std::__split_buffer<std::string> *a13, void *__pa, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a11;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (a19 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke_28854()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0) {
    goto LABEL_5;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    uint64_t v3 = dlerror();
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v1 = dlerror();
    int v2 = 136315138;
    uint64_t v3 = v1;
    _os_log_error_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_28883()
{
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t (*)(float))dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSyunint64_t m = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  float result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    float result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<VoiceProcessorV2::Initialize(void)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ***a1;
  int v2 = *(_DWORD *)(v1 + 76);
  int v3 = *(_DWORD *)(v1 + 64);
  if (v2 == 1 && v3 == 1)
  {
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.mobilephone", 21, 0x8000100u, 0);
    if (!v6)
    {
      exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else if (v2)
  {
    if (v2 == 4 || v2 == 2)
    {
      CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.facetime", 18, 0x8000100u, 0);
      if (!v6)
      {
        int v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v7, "Could not construct");
      }
    }
    else if ((v2 - 5) > 1)
    {
      CFStringRef v6 = 0;
    }
    else if (v3 == 1)
    {
      CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.mobilephone", 21, 0x8000100u, 0);
      if (!v6)
      {
        int v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v33, "Could not construct");
      }
    }
    else
    {
      CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.facetime", 18, 0x8000100u, 0);
      if (!v6)
      {
        int v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "Could not construct");
      }
    }
  }
  else
  {
    CFStringRef v6 = *(CFStringRef *)(v1 + 2176);
    if (v6) {
      CFRetain(*(CFTypeRef *)(v1 + 2176));
    }
  }
  unint64_t v8 = (const __CFString **)(v1 + 16616);
  unint64_t v9 = *(const void **)(v1 + 16616);
  *(void *)(v1 + 16616) = v6;
  if (v9)
  {
    CFRelease(v9);
    CFStringRef v6 = *v8;
  }
  if (v6)
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    unint64_t v10 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      unsigned int v11 = (*v10 ? *v10 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        applesauce::CF::convert_to<std::string,0>(*v8, (uint64_t)__p);
        double v12 = v37 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
        __int16 v39 = 1024;
        int v40 = 945;
        __int16 v41 = 2080;
        int v42 = v12;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> The bundleID for AVFoundationSPI is %s", buf, 0x1Cu);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    char v13 = (unsigned char *)(v1 + 15961);
    uint64_t v14 = *(int **)(v1 + 12624);
    if (v14 && (*v13 || *(unsigned char *)(v1 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      uint64_t v15 = VPLogScope(void)::scope;
      applesauce::CF::convert_to<std::string,0>(*v8, (uint64_t)buf);
      if (SBYTE3(v42) >= 0) {
        std::vector<std::string>::pointer v16 = buf;
      }
      else {
        std::vector<std::string>::pointer v16 = *(const char **)buf;
      }
      CALegacyLog::log(v14, 3, v15, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 945, "operator()", "The bundleID for AVFoundationSPI is %s", v16);
      if (SBYTE3(v42) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (*v8)
    {
      AVAUVoiceIOInitializeListenersForBundleID();
    }
    else {
      double v18 = {;
    }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)AudioStreamBasicDescription buf = 0;
        _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "AUVoiceIO can't initialize listener for null bundleID", buf, 2u);
      }
    }
    uint64_t v19 = (_DWORD *)(v1 + 16600);
    *(_DWORD *)(v1 + 16600) = vp::GetRequestedChatFlavorForBundleID(*(vp **)(v1 + 16616), v17);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    uint64_t v21 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      BOOL v22 = (*v21 ? *v21 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *v19;
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
        __int16 v39 = 1024;
        int v40 = 950;
        __int16 v41 = 1024;
        LODWORD(v42) = v23;
        _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> At VP's first time init, the chat flavor is selected as %d", buf, 0x18u);
      }
    }
    CFIndex v24 = *(int **)(v1 + 12624);
    if (v24 && (*v13 || *(unsigned char *)(v1 + 15962)))
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v24, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 950, "operator()", "At VP's first time init, the chat flavor is selected as %d", *v19);
    }
    if (*v13) {
      VoiceProcessorV2::PListWriteSetPropertyParameters((VoiceProcessorV2 *)v1, 1718384242);
    }
    *(unsigned char *)(v1 + 2268) = vp::IsAutomaticChatFlavorEnabledForBundleID((vp *)(v1 + 16616), v20);
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    CFStringRef v25 = (void *)VPLogScope(void)::scope;
    if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
    {
      int v26 = (*v25 ? *v25 : MEMORY[0x1E4F14500]);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = *(unsigned __int8 *)(v1 + 2268);
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
        __int16 v39 = 1024;
        int v40 = 954;
        __int16 v41 = 1024;
        LODWORD(v42) = v27;
        _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> At VP's first time init, automatic chat flavor enabled is selected as %d", buf, 0x18u);
      }
    }
    std::string v28 = *(int **)(v1 + 12624);
    int v29 = *v13;
    if (v28)
    {
      if (!*v13 && !*(unsigned char *)(v1 + 15962))
      {
LABEL_79:
        if (*v19)
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          double v30 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(3, VPLogScope(void)::scope, 0))
          {
            int v31 = (*v30 ? *v30 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "vpInitializeUplink.cpp";
              __int16 v39 = 1024;
              int v40 = 959;
              _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  <vp> Forcing bypass to false due to chat flavor", buf, 0x12u);
            }
          }
          double v32 = *(int **)(v1 + 12624);
          if (v32 && (*v13 || *(unsigned char *)(v1 + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v32, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 959, "operator()", "Forcing bypass to false due to chat flavor");
          }
          *(unsigned char *)(v1 + 472) = 0;
        }
        (*(void (**)(uint64_t))(*(void *)v1 + 600))(v1);
        (*(void (**)(uint64_t))(*(void *)v1 + 608))(v1);
        return;
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      CALegacyLog::log(v28, 3, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpInitialize/vpInitializeUplink.cpp", 954, "operator()", "At VP's first time init, automatic chat flavor enabled is selected as %d", *(unsigned __int8 *)(v1 + 2268));
      int v29 = *v13;
    }
    if (v29) {
      VoiceProcessorV2::PListWriteSetPropertyParameters((VoiceProcessorV2 *)v1, 1635085677);
    }
    goto LABEL_79;
  }
}

void sub_1BB70BD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void VoiceProcessorV2::OpenSignalInjectionFiles(VoiceProcessorV2 *this, uint64_t a2)
{
  v170[2] = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v165 = 0;
  v162[0] = 0;
  v162[1] = 0;
  uint64_t v163 = 0;
  memset(&v161, 0, sizeof(v161));
  std::string::append[abi:ne180100]<char const*,0>(&v161, "/tmp/", "");
  unint64_t v4 = 0;
  OSStatus v150 = 0;
  uint64_t v5 = (char *)this + 15961;
  do
  {
    uint64_t v6 = 1 << v4;
    if (((1 << v4) & *((unsigned int *)this + 3804)) != 0 || (v6 & *((_DWORD *)this + 3878)) != 0)
    {
      if (a2)
      {
        if (v4 <= 0xB && ((1 << v4) & 0xC07) != 0) {
          goto LABEL_388;
        }
      }
      else
      {
        int v7 = *((_DWORD *)this + 1129);
        if (v7 == 1)
        {
          if (v4 >= 4 && (v4 & 0xE) != 0xA) {
            goto LABEL_388;
          }
        }
        else if (!v7 && (v4 > 0xB || ((1 << v4) & 0xC07) == 0))
        {
          goto LABEL_388;
        }
      }
      if (((1 << v4) & *((unsigned int *)this + 3804)) != 0)
      {
        vp::Audio_File::Audio_File(&inExtAudioFile);
        VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)&v159, (uint64_t)this, v4);
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)v168, **((_DWORD **)this + 292));
        std::string::basic_string[abi:ne180100]<0>(&v153, v168);
        unint64_t v8 = std::string::insert(&v153, 0, "vp.inject.", 0xAuLL);
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        unint64_t v10 = std::string::append(&v154, ".", 1uLL);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        CAX4CCStringNoQuote::CAX4CCStringNoQuote((CAX4CCStringNoQuote *)__s, **((_DWORD **)this + 295));
        size_t v13 = strlen(v12);
        uint64_t v14 = std::string::append(&v155, __s, v13);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v169.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer v16 = std::string::append(&v169, ".", 1uLL);
        uint64_t v17 = 0;
        long long v18 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v156.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v18;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        uint64_t v19 = kVPInjectionAndAdditionFileIndexToCodeArray;
        while (1)
        {
          int v20 = *v19;
          v19 += 4;
          if (v4 == v20) {
            break;
          }
          if (++v17 == 12)
          {
            uint64_t v21 = "badinjectionfile";
            goto LABEL_21;
          }
        }
        uint64_t v21 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v17 + 2];
LABEL_21:
        std::string::basic_string[abi:ne180100]<0>(v151, v21);
        if ((v152 & 0x80u) == 0) {
          BOOL v22 = v151;
        }
        else {
          BOOL v22 = (void **)v151[0];
        }
        if ((v152 & 0x80u) == 0) {
          std::string::size_type v23 = v152;
        }
        else {
          std::string::size_type v23 = (std::string::size_type)v151[1];
        }
        CFIndex v24 = std::string::append(&v156, (const std::string::value_type *)v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        int v26 = std::string::append(&v157, ".wav", 4uLL);
        std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
        v170[0] = v26->__r_.__value_.__l.__size_;
        *(void *)((char *)v170 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
        char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v27;
        *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v170 + 7);
        ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v170[0];
        *((unsigned char *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v28;
        v170[0] = 0;
        *(void *)((char *)v170 + 7) = 0;
        std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
        if (SHIBYTE(v165) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::vector<unsigned int> __p = *(_OWORD *)buf;
        uint64_t v165 = *(void *)&buf[16];
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        if ((char)v152 < 0) {
          operator delete(v151[0]);
        }
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v156.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v169.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        int v29 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
        {
          double v30 = (*v29 ? *v29 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            int v31 = __p;
            if (v165 < 0) {
              int v31 = (void **)__p[0];
            }
            *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
            *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 264;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v31;
            _os_log_impl(&dword_1BB0CE000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening route-specific injection file %s", buf, 0x1Cu);
          }
        }
        double v32 = (int *)*((void *)this + 1578);
        if (v32 && (*v5 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v33 = __p;
          if (v165 < 0) {
            int v33 = (void **)__p[0];
          }
          CALegacyLog::log(v32, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 264, "OpenSignalInjectionFiles", "opening route-specific injection file %s", (const char *)v33);
        }
        vp::Audio_File::open_for_reading((uint64_t)__p, &v159, (std::string::size_type *)buf);
        vp::Audio_File::operator=((uint64_t *)&inExtAudioFile, (uint64_t *)buf);
        vp::Audio_File::~Audio_File((vp::Audio_File *)buf);
        if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v34 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            long long v35 = (*v34 ? *v34 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              long long v36 = __p;
              if (v165 < 0) {
                long long v36 = (void **)__p[0];
              }
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 267;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v36;
              _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error opening injection file %s", buf, 0x1Cu);
            }
          }
          char v37 = (int *)*((void *)this + 1578);
          if (v37 && (*v5 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            long long v38 = __p;
            if (v165 < 0) {
              long long v38 = (void **)__p[0];
            }
            CALegacyLog::log(v37, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 267, "OpenSignalInjectionFiles", "error opening injection file %s", (const char *)v38);
          }
        }
        if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          uint64_t v39 = 0;
          int v40 = kVPInjectionAndAdditionFileIndexToCodeArray;
          while (1)
          {
            int v41 = *v40;
            v40 += 4;
            if (v4 == v41) {
              break;
            }
            if (++v39 == 12)
            {
              int v42 = "badinjectionfile";
              goto LABEL_90;
            }
          }
          int v42 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v39 + 2];
LABEL_90:
          std::string::basic_string[abi:ne180100]<0>(&v156, v42);
          uint64_t v43 = std::string::insert(&v156, 0, "vp.inject.", 0xAuLL);
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          uint64_t v45 = std::string::append(&v157, ".wav", 4uLL);
          std::string::size_type v46 = v45->__r_.__value_.__r.__words[0];
          v169.__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
          char v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v46;
          *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
          ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v169.__r_.__value_.__r.__words[0];
          *((unsigned char *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v47;
          std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
          if (SHIBYTE(v165) < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)std::vector<unsigned int> __p = *(_OWORD *)buf;
          uint64_t v165 = *(void *)&buf[16];
          buf[23] = 0;
          buf[0] = 0;
          if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v157.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v156.__r_.__value_.__l.__data_);
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          int v48 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            uint64_t v49 = (*v48 ? *v48 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
            {
              int v50 = __p;
              if (v165 < 0) {
                int v50 = (void **)__p[0];
              }
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 287;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v50;
              _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening generic injection file %s", buf, 0x1Cu);
            }
          }
          long long v51 = (int *)*((void *)this + 1578);
          if (v51 && (*v5 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v52 = __p;
            if (v165 < 0) {
              uint64_t v52 = (void **)__p[0];
            }
            CALegacyLog::log(v51, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 287, "OpenSignalInjectionFiles", "opening generic injection file %s", (const char *)v52);
          }
          vp::Audio_File::open_for_reading((uint64_t)__p, &v159, (std::string::size_type *)buf);
          vp::Audio_File::operator=((uint64_t *)&inExtAudioFile, (uint64_t *)buf);
          vp::Audio_File::~Audio_File((vp::Audio_File *)buf);
          if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v53 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              uint64_t v54 = (*v53 ? *v53 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v55 = __p;
                if (v165 < 0) {
                  uint64_t v55 = (void **)__p[0];
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 290;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v55;
                _os_log_impl(&dword_1BB0CE000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error opening injection file %s", buf, 0x1Cu);
              }
            }
            UInt32 v56 = (int *)*((void *)this + 1578);
            if (v56 && (*v5 || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v57 = __p;
              if (v165 < 0) {
                uint64_t v57 = (void **)__p[0];
              }
              CALegacyLog::log(v56, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 290, "OpenSignalInjectionFiles", "error opening injection file %s", (const char *)v57);
            }
          }
        }
        if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          uint64_t v58 = 0;
          uint64_t v59 = kVPInjectionAndAdditionFileIndexToCodeArray;
          while (1)
          {
            int v60 = *v59;
            v59 += 4;
            if (v4 == v60) {
              break;
            }
            if (++v58 == 12)
            {
              int v61 = "badinjectionfile";
              goto LABEL_143;
            }
          }
          int v61 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v58 + 2];
LABEL_143:
          std::string::basic_string[abi:ne180100]<0>(&v156, v61);
          __int16 v62 = std::string::insert(&v156, 0, "iiii.000.", 9uLL);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          int v64 = std::string::append(&v157, ".wav", 4uLL);
          std::string::size_type v65 = v64->__r_.__value_.__r.__words[0];
          v169.__r_.__value_.__r.__words[0] = v64->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7);
          char v66 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v65;
          *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
          ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v169.__r_.__value_.__r.__words[0];
          *((unsigned char *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v66;
          std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
          if (SHIBYTE(v165) < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)std::vector<unsigned int> __p = *(_OWORD *)buf;
          uint64_t v165 = *(void *)&buf[16];
          buf[23] = 0;
          buf[0] = 0;
          if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v157.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v156.__r_.__value_.__l.__data_);
          }
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v67 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            unint64_t v68 = (*v67 ? *v67 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
            {
              UInt32 v69 = __p;
              if (v165 < 0) {
                UInt32 v69 = (void **)__p[0];
              }
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 311;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v69;
              _os_log_impl(&dword_1BB0CE000, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening injection file %s", buf, 0x1Cu);
            }
          }
          unsigned int v70 = (int *)*((void *)this + 1578);
          if (v70 && (*v5 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            BOOL v71 = __p;
            if (v165 < 0) {
              BOOL v71 = (void **)__p[0];
            }
            CALegacyLog::log(v70, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 311, "OpenSignalInjectionFiles", "opening injection file %s", (const char *)v71);
          }
          vp::Audio_File::open_for_reading((uint64_t)__p, &v159, (std::string::size_type *)buf);
          vp::Audio_File::operator=((uint64_t *)&inExtAudioFile, (uint64_t *)buf);
          vp::Audio_File::~Audio_File((vp::Audio_File *)buf);
          if (!vp::Audio_File::operator BOOL(&inExtAudioFile))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v72 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              uint64_t v73 = (*v72 ? *v72 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v74 = __p;
                if (v165 < 0) {
                  uint64_t v74 = (void **)__p[0];
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 314;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v74;
                _os_log_impl(&dword_1BB0CE000, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error opening injection file %s", buf, 0x1Cu);
              }
            }
            unint64_t v75 = (int *)*((void *)this + 1578);
            if (v75 && (*v5 || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              unint64_t v76 = __p;
              if (v165 < 0) {
                unint64_t v76 = (void **)__p[0];
              }
              CALegacyLog::log(v75, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 314, "OpenSignalInjectionFiles", "error opening injection file %s", (const char *)v76);
            }
          }
        }
        if (vp::Audio_File::operator BOOL(&inExtAudioFile))
        {
          vp::Audio_File::get_property<CA::StreamDescription,(decltype(nullptr))0>(&inExtAudioFile, 0x66666D74u, (uint64_t)buf);
          caulk::expected<CA::StreamDescription,int>::value((uint64_t)buf);
          double v77 = *(double *)buf;
          unint64_t v78 = vp::Audio_File::get_property<long long,(decltype(nullptr))0>(&inExtAudioFile, 0x2366726Du);
          if (v79) {
            uint64_t v80 = v78;
          }
          else {
            uint64_t v80 = 0;
          }
          if (v159.mSampleRate == v77)
          {
            *((void *)this + 3 * v4 + 1905) = v80;
          }
          else
          {
            *((void *)this + 3 * v4 + 1905) = vcvtmd_s64_f64(v159.mSampleRate * (double)v80 / v77);
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            uint64_t v81 = (void *)VPLogScope(void)::scope;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              long long v82 = (*v81 ? *v81 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v83 = __p;
                if (v165 < 0) {
                  uint64_t v83 = (void **)__p[0];
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
                *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 325;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v83;
                *(_WORD *)&unsigned char buf[28] = 2048;
                *(double *)&buf[30] = v77;
                *(_WORD *)&buf[38] = 2048;
                *(Float64 *)&unsigned char buf[40] = v159.mSampleRate;
                _os_log_impl(&dword_1BB0CE000, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> injection file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", buf, 0x30u);
              }
            }
            uint64_t v84 = (int *)*((void *)this + 1578);
            if (v84 && (*v5 || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v85 = __p;
              if (v165 < 0) {
                uint64_t v85 = (void **)__p[0];
              }
              CALegacyLog::log(v84, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 325, "OpenSignalInjectionFiles", "injection file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", (const char *)v85, v77, v159.mSampleRate);
            }
          }
          uint64_t v94 = a2;
          if (v150 || (v101 = (char *)this + 24 * v4, uint64_t v102 = *((void *)v101 + 1905), v102 < 1))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            unint64_t v95 = (void *)VPLogScope(void)::scope;
            a2 = v94;
            if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
            {
              unint64_t v96 = (*v95 ? *v95 : MEMORY[0x1E4F14500]);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v97 = __p;
                if (v165 < 0) {
                  uint64_t v97 = (void **)__p[0];
                }
                uint64_t v98 = *((void *)this + 3 * v4 + 1905);
                *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
                *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 339;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v150;
                *(_WORD *)&unsigned char buf[24] = 2080;
                *(void *)&buf[26] = v97;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v98;
                _os_log_impl(&dword_1BB0CE000, v96, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> error %d getting length of injection file %s, length %d", buf, 0x28u);
              }
            }
            int v99 = (int *)*((void *)this + 1578);
            if (v99 && (*v5 || *((unsigned char *)this + 15962)))
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              uint64_t v100 = __p;
              if (v165 < 0) {
                uint64_t v100 = (void **)__p[0];
              }
              CALegacyLog::log(v99, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 339, "OpenSignalInjectionFiles", "error %d getting length of injection file %s, length %d", v150, (const char *)v100, *((void *)this + 3 * v4 + 1905));
            }
          }
          else
          {
            LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_) = *((void *)v101 + 1905);
            myAllocABLDynamic(&v159, v102, (AudioBufferList **)v101 + 1903);
            OSStatus v150 = ExtAudioFileRead(inExtAudioFile, (UInt32 *)&ioNumberFrames, *((AudioBufferList **)v101 + 1903));
            unsigned int v103 = v101 + 15240;
            if (v150 || LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_) != *(_DWORD *)v103)
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              float v104 = (void *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                float32x4_t v105 = (*v104 ? *v104 : MEMORY[0x1E4F14500]);
                if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                {
                  int v106 = __p;
                  if (v165 < 0) {
                    int v106 = (void **)__p[0];
                  }
                  uint64_t v107 = *v103;
                  *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
                  *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 335;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v106;
                  *(_WORD *)&unsigned char buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v150;
                  *(_WORD *)&buf[34] = 2048;
                  *(void *)&buf[36] = v107;
                  *(_WORD *)&unsigned char buf[44] = 1024;
                  *(_DWORD *)&buf[46] = ioNumberFrames.__pn_.__r_.__value_.__l.__data_;
                  _os_log_impl(&dword_1BB0CE000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", buf, 0x32u);
                }
              }
              double v108 = (int *)*((void *)this + 1578);
              if (v108 && (*v5 || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                float v109 = __p;
                if (v165 < 0) {
                  float v109 = (void **)__p[0];
                }
                CALegacyLog::log(v108, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 335, "OpenSignalInjectionFiles", "error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", (const char *)v109, v150, *v103, LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_));
              }
              *unsigned int v103 = LODWORD(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
            }
            a2 = v94;
          }
        }
        else
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v86 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
          {
            unint64_t v87 = (*v86 ? *v86 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
            {
              uint64_t v88 = __p;
              if (v165 < 0) {
                uint64_t v88 = (void **)__p[0];
              }
              *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
              *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 341;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v150;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = v88;
              _os_log_impl(&dword_1BB0CE000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error %d opening injection file %s, will use original (not injected) signal", buf, 0x22u);
            }
          }
          uint64_t v89 = (int *)*((void *)this + 1578);
          if (v89 && (*v5 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            char v90 = __p;
            if (v165 < 0) {
              char v90 = (void **)__p[0];
            }
            CALegacyLog::log(v89, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 341, "OpenSignalInjectionFiles", "error %d opening injection file %s, will use original (not injected) signal", v150, (const char *)v90);
          }
          uint64_t v91 = (char *)this + 24 * v4;
          if (*((void *)v91 + 1903))
          {
            char v92 = v91 + 15224;
            myFreeABLDynamic((AudioBufferList **)v91 + 1903);
            *char v92 = 0;
          }
          long long v93 = (char *)this + 24 * v4;
          *((void *)v93 + 1905) = 0;
          *((void *)v93 + 1904) = 0;
        }
        vp::Audio_File::~Audio_File((vp::Audio_File *)&inExtAudioFile);
      }
    }
    if ((v6 & *((_DWORD *)this + 3878)) != 0)
    {
      VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)&v159, (uint64_t)this, v4);
      uint64_t v110 = 0;
      int v111 = kVPInjectionAndAdditionFileIndexToCodeArray;
      while (1)
      {
        int v112 = *v111;
        v111 += 4;
        if (v4 == v112) {
          break;
        }
        if (++v110 == 12)
        {
          BOOL v113 = "badinjectionfile";
          goto LABEL_288;
        }
      }
      BOOL v113 = *(char **)&kVPInjectionAndAdditionFileIndexToCodeArray[4 * v110 + 2];
LABEL_288:
      std::string::basic_string[abi:ne180100]<0>(&v156, v113);
      int v114 = std::string::insert(&v156, 0, "aaaa.000.", 9uLL);
      long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      uint64_t v116 = std::string::append(&v157, ".wav", 4uLL);
      std::string::size_type v117 = v116->__r_.__value_.__r.__words[0];
      v169.__r_.__value_.__r.__words[0] = v116->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v116->__r_.__value_.__r.__words[1] + 7);
      char v118 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      ioNumberFrames.__pn_.__r_.__value_.__r.__words[0] = v117;
      *(std::string::size_type *)((char *)&ioNumberFrames.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
      ioNumberFrames.__pn_.__r_.__value_.__l.__size_ = v169.__r_.__value_.__r.__words[0];
      *((unsigned char *)&ioNumberFrames.__pn_.__r_.__value_.__s + 23) = v118;
      std::__fs::filesystem::operator/[abi:ne180100](&ioNumberFrames, (uint64_t)&v161, (std::__fs::filesystem::path *)buf);
      if (SHIBYTE(v163) < 0) {
        operator delete(v162[0]);
      }
      *(_OWORD *)int32x4_t v162 = *(_OWORD *)buf;
      uint64_t v163 = *(void *)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
      if (SHIBYTE(ioNumberFrames.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(ioNumberFrames.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v156.__r_.__value_.__l.__data_);
      }
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      UInt32 v119 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
      {
        uint64_t v120 = (*v119 ? *v119 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v121 = v162;
          if (v163 < 0) {
            uint64_t v121 = (void **)v162[0];
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 367;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v121;
          _os_log_impl(&dword_1BB0CE000, v120, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> opening addition file %s", buf, 0x1Cu);
        }
      }
      double v122 = (int *)*((void *)this + 1578);
      if (v122 && (*v5 || *((unsigned char *)this + 15962)))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        long long v123 = v162;
        if (v163 < 0) {
          long long v123 = (void **)v162[0];
        }
        CALegacyLog::log(v122, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 367, "OpenSignalInjectionFiles", "opening addition file %s", (const char *)v123);
      }
      vp::Audio_File::open_for_reading((uint64_t)v162, &v159, (std::string::size_type *)&ioNumberFrames);
      if (vp::Audio_File::operator BOOL(&ioNumberFrames))
      {
        vp::Audio_File::get_property<CA::StreamDescription,(decltype(nullptr))0>((ExtAudioFileRef *)&ioNumberFrames, 0x66666D74u, (uint64_t)buf);
        caulk::expected<CA::StreamDescription,int>::value((uint64_t)buf);
        double v124 = *(double *)buf;
        unint64_t v125 = vp::Audio_File::get_property<long long,(decltype(nullptr))0>((ExtAudioFileRef *)&ioNumberFrames, 0x2366726Du);
        if (v126) {
          uint64_t v127 = v125;
        }
        else {
          uint64_t v127 = 0;
        }
        if (v159.mSampleRate == v124)
        {
          *((void *)this + 3 * v4 + 1942) = v127;
        }
        else
        {
          *((void *)this + 3 * v4 + 1942) = vcvtmd_s64_f64(v159.mSampleRate * (double)v127 / v124);
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          uint64_t v128 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            unsigned int v129 = (*v128 ? *v128 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
            {
              signed int v130 = v162;
              if (v163 < 0) {
                signed int v130 = (void **)v162[0];
              }
              *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
              *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 378;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v130;
              *(_WORD *)&unsigned char buf[28] = 2048;
              *(double *)&buf[30] = v124;
              *(_WORD *)&buf[38] = 2048;
              *(Float64 *)&unsigned char buf[40] = v159.mSampleRate;
              _os_log_impl(&dword_1BB0CE000, v129, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> addition file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", buf, 0x30u);
            }
          }
          int v131 = (int *)*((void *)this + 1578);
          if (v131 && (*v5 || *((unsigned char *)this + 15962)))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            long long v132 = v162;
            if (v163 < 0) {
              long long v132 = (void **)v162[0];
            }
            CALegacyLog::log(v131, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 378, "OpenSignalInjectionFiles", "addition file %s format (%.0f Hz) is not as expected (%.0f Hz), will use SRC!", (const char *)v132, v124, v159.mSampleRate);
          }
        }
        if (!v150)
        {
          uint64_t v141 = (char *)this + 24 * v4;
          uint64_t v142 = *((void *)v141 + 1942);
          if (v142 < 1)
          {
            OSStatus v150 = 0;
          }
          else
          {
            LODWORD(v157.__r_.__value_.__l.__data_) = *((void *)v141 + 1942);
            myAllocABLDynamic(&v159, v142, (AudioBufferList **)v141 + 1940);
            OSStatus v150 = ExtAudioFileRead((ExtAudioFileRef)ioNumberFrames.__pn_.__r_.__value_.__l.__data_, (UInt32 *)&v157, *((AudioBufferList **)v141 + 1940));
            uint64_t v143 = v141 + 15536;
            if (v150 || LODWORD(v157.__r_.__value_.__l.__data_) != *(_DWORD *)v143)
            {
              if (VPLogScope(void)::once != -1) {
                dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
              }
              BOOL v144 = (void *)VPLogScope(void)::scope;
              if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
              {
                unsigned int v145 = (*v144 ? *v144 : MEMORY[0x1E4F14500]);
                if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                {
                  int v146 = v162;
                  if (v163 < 0) {
                    int v146 = (void **)v162[0];
                  }
                  uint64_t v147 = *v143;
                  *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
                  *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 388;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v146;
                  *(_WORD *)&unsigned char buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v150;
                  *(_WORD *)&buf[34] = 2048;
                  *(void *)&buf[36] = v147;
                  *(_WORD *)&unsigned char buf[44] = 1024;
                  *(_DWORD *)&buf[46] = v157.__r_.__value_.__l.__data_;
                  _os_log_impl(&dword_1BB0CE000, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", buf, 0x32u);
                }
              }
              int v148 = (int *)*((void *)this + 1578);
              if (v148 && (*v5 || *((unsigned char *)this + 15962)))
              {
                if (VPLogScope(void)::once != -1) {
                  dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
                }
                double v149 = v162;
                if (v163 < 0) {
                  double v149 = (void **)v162[0];
                }
                CALegacyLog::log(v148, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 388, "OpenSignalInjectionFiles", "error reading file %s [err=%d, frames to read=%lld, num frames read=%d]", (const char *)v149, v150, *v143, LODWORD(v157.__r_.__value_.__l.__data_));
              }
              *uint64_t v143 = LODWORD(v157.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      else
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        uint64_t v133 = (void *)VPLogScope(void)::scope;
        if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
        {
          float64_t v134 = (*v133 ? *v133 : MEMORY[0x1E4F14500]);
          if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
          {
            uint64_t v135 = v162;
            if (v163 < 0) {
              uint64_t v135 = (void **)v162[0];
            }
            *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "vpDebug_FileInjection.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 393;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v150;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = v135;
            _os_log_impl(&dword_1BB0CE000, v134, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> error-%d opening addition file %s, will use original (not added) signal", buf, 0x22u);
          }
        }
        unint64_t v136 = (int *)*((void *)this + 1578);
        if (v136 && (*v5 || *((unsigned char *)this + 15962)))
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          float32x4_t v137 = v162;
          if (v163 < 0) {
            float32x4_t v137 = (void **)v162[0];
          }
          CALegacyLog::log(v136, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_FileInjection.cpp", 393, "OpenSignalInjectionFiles", "error-%d opening addition file %s, will use original (not added) signal", v150, (const char *)v137);
        }
        uint64_t v138 = (char *)this + 24 * v4;
        if (*((void *)v138 + 1940))
        {
          float32x4_t v139 = v138 + 15520;
          myFreeABLDynamic((AudioBufferList **)v138 + 1940);
          *float32x4_t v139 = 0;
        }
        uint64_t v140 = (char *)this + 24 * v4;
        *((void *)v140 + 1942) = 0;
        *((void *)v140 + 1941) = 0;
      }
      vp::Audio_File::~Audio_File((vp::Audio_File *)&ioNumberFrames);
    }
LABEL_388:
    ++v4;
  }
  while (v4 != 12);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v163) < 0) {
    operator delete(v162[0]);
  }
  if (SHIBYTE(v165) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BB70DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex(uint64_t this, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 0:
      long long v5 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)this = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(this + 16) = v5;
      uint64_t v6 = *(void *)(a2 + 240);
      goto LABEL_10;
    case 1:
    case 2:
    case 11:
      int v3 = (_OWORD *)(a2 + 328);
      uint64_t v4 = *(void *)(a2 + 360);
      goto LABEL_13;
    case 3:
      int v3 = (_OWORD *)(a2 + 584);
      uint64_t v4 = *(void *)(a2 + 616);
      goto LABEL_13;
    case 4:
      long long v7 = *(_OWORD *)(a2 + 640);
      *(_OWORD *)this = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(this + 16) = v7;
      uint64_t v6 = *(void *)(a2 + 656);
      goto LABEL_10;
    case 5:
      long long v8 = *(_OWORD *)(a2 + 720);
      *(_OWORD *)this = *(_OWORD *)(a2 + 704);
      *(_OWORD *)(this + 16) = v8;
      uint64_t v6 = *(void *)(a2 + 736);
      goto LABEL_10;
    case 6:
      int v3 = (_OWORD *)(a2 + 744);
      uint64_t v4 = *(void *)(a2 + 776);
      goto LABEL_13;
    case 7:
      long long v9 = *(_OWORD *)(a2 + 800);
      *(_OWORD *)this = *(_OWORD *)(a2 + 784);
      *(_OWORD *)(this + 16) = v9;
      uint64_t v6 = *(void *)(a2 + 816);
LABEL_10:
      *(void *)(this + 32) = v6;
      return this;
    case 8:
      int v3 = (_OWORD *)(a2 + 824);
      uint64_t v4 = *(void *)(a2 + 856);
      goto LABEL_13;
    case 9:
      int v3 = (_OWORD *)(a2 + 984);
      uint64_t v4 = *(void *)(a2 + 1016);
LABEL_13:
      *(void *)(this + 32) = v4;
      long long v10 = v3[1];
      *(_OWORD *)this = *v3;
      *(_OWORD *)(this + 16) = v10;
      return this;
    case 10:
      int v11 = *(_DWORD *)(a2 + 340);
      unsigned int v12 = *(_DWORD *)(a2 + 356);
      uint64_t v13 = *(void *)(a2 + 360);
      if (v12 >= 2) {
        int v14 = 2;
      }
      else {
        int v14 = *(_DWORD *)(a2 + 356);
      }
      if ((v11 & 0x20) != 0)
      {
        unsigned int v12 = 1;
      }
      else if (!v12)
      {
        unsigned int v15 = (v13 + 7) >> 3;
        goto LABEL_22;
      }
      unsigned int v15 = *(_DWORD *)(a2 + 352) / v12;
LABEL_22:
      if ((v11 & 0x20) != 0) {
        int v16 = 1;
      }
      else {
        int v16 = v14;
      }
      int v17 = v15 * v16;
      *(void *)this = *(void *)(a2 + 328);
      *(_DWORD *)(this + 8) = *(_DWORD *)(a2 + 336);
      *(_DWORD *)(this + 12) = v11;
      *(_DWORD *)(this + 16) = v17;
      *(_DWORD *)(this + 20) = 1;
      *(_DWORD *)(this + 24) = v17;
      *(_DWORD *)(this + 28) = v14;
      *(void *)(this + 32) = v13;
      return this;
    default:
      *(void *)(this + 32) = 0;
      *(_OWORD *)this = 0u;
      *(_OWORD *)(this + 16) = 0u;
      return this;
  }
}

uint64_t caulk::expected<CA::StreamDescription,int>::value(uint64_t result)
{
  if (!*(unsigned char *)(result + 40))
  {
    uint64_t v1 = (int *)result;
    exceptiounint64_t n = __cxa_allocate_exception(0x10uLL);
    int v3 = *v1;
    *(void *)exceptiounint64_t n = &unk_1F14937A0;
    exception[2] = v3;
  }
  return result;
}

void VoiceProcessorV2::InjectionOrAdditionFilesCopyPreInjectionABL(VoiceProcessorV2 *this, AudioBufferList *a2, const AudioBufferList *a3)
{
  uint64_t v5 = *(unsigned int *)this;
  if (v5 != a2->mNumberBuffers)
  {
    BOOL v12 = 1;
    if (!v5) {
      return;
    }
    goto LABEL_11;
  }
  if (v5)
  {
    uint64_t v6 = 0;
    p_size_t mDataByteSize = &a2->mBuffers[0].mDataByteSize;
    long long v8 = (UInt32 *)((char *)this + 12);
    while (1)
    {
      UInt32 v10 = *v8;
      v8 += 4;
      UInt32 v9 = v10;
      UInt32 v11 = *p_mDataByteSize;
      p_mDataByteSize += 4;
      if (v9 < v11) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)this;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  BOOL v12 = v6 != v5;
  if (v5)
  {
LABEL_11:
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      if (!v12
        && (mData = a2->mBuffers[v13].mData) != 0
        && (size_t mDataByteSize = a2->mBuffers[v13].mDataByteSize, mDataByteSize))
      {
        memcpy(*(void **)((char *)this + v13 * 16 + 16), mData, mDataByteSize);
      }
      else
      {
        bzero(*(void **)((char *)this + v13 * 16 + 16), *(unsigned int *)((char *)this + v13 * 16 + 12));
      }
      ++v14;
      ++v13;
    }
    while (v14 < *(unsigned int *)this);
  }
}

void VoiceProcessorV2::InjectionFilesReadSignal(VoiceProcessorV2 *this, uint64_t a2, unsigned int a3, AudioBufferList *a4)
{
  uint64_t v8 = 1 << a2;
  if (((1 << a2) & *((unsigned int *)this + 3804)) != 0)
  {
    UInt32 v9 = (char *)this + 24 * a2;
    UInt32 v10 = (int *)*((void *)v9 + 1903);
    if (v10)
    {
      int v11 = *v10;
      if (*v10 == a4->mNumberBuffers)
      {
        VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)v53, (uint64_t)this, a2);
        unint64_t v12 = v54;
        size_t v13 = v54 * a3;
        if (a4->mBuffers[0].mDataByteSize >= v13)
        {
          unsigned int v52 = a3;
          unint64_t v14 = v9 + 15224;
          unsigned int v15 = (char *)this + 24 * a2;
          int v16 = (CAStreamBasicDescription *)(v15 + 15232);
          uint64_t v17 = *((void *)v15 + 1904);
          uint64_t v18 = *((void *)v15 + 1905);
          if (v17 >= v18)
          {
            uint64_t v17 = 0;
            *(void *)int v16 = 0;
          }
          uint64_t v19 = (v12 * v17);
          size_t v20 = (v12 * (v18 - v17));
          size_t v21 = (v13 - v20);
          if (v13 <= v20)
          {
            if (v11)
            {
              long long v25 = v16;
              unint64_t v26 = 0;
              uint64_t v27 = 16;
              do
              {
                memcpy(*(void **)((char *)&a4->mNumberBuffers + v27), (const void *)(*(void *)(*v14 + v27) + v19), v13);
                ++v26;
                v27 += 16;
              }
              while (v26 < a4->mNumberBuffers);
              int v16 = v25;
              uint64_t v17 = *(void *)v25;
            }
            a3 = v52;
            uint64_t v24 = v17 + v52;
          }
          else
          {
            long long v51 = v16;
            if (v11)
            {
              unsigned int v50 = v12;
              unint64_t v22 = 0;
              uint64_t v23 = 16;
              do
              {
                memcpy(*(void **)((char *)&a4->mNumberBuffers + v23), (const void *)(*(void *)(*v14 + v23) + v19), v20);
                memcpy((void *)(*(void *)((char *)&a4->mNumberBuffers + v23) + v20), *(const void **)(*v14 + v23), v21);
                ++v22;
                v23 += 16;
              }
              while (v22 < a4->mNumberBuffers);
              unint64_t v12 = v50;
            }
            uint64_t v24 = CAStreamBasicDescription::BytesToFrames((CAStreamBasicDescription *)v12, v21);
            a3 = v52;
            int v16 = v51;
          }
          *(void *)int v16 = v24;
        }
      }
    }
  }
  if ((v8 & *((_DWORD *)this + 3878)) != 0)
  {
    char v28 = (char *)this + 24 * a2;
    int v29 = (int *)*((void *)v28 + 1940);
    if (v29)
    {
      int v30 = *v29;
      if (*v29 == a4->mNumberBuffers)
      {
        VoiceProcessorV2::GetSignalInjectionOrAdditionClientFormatForIndex((uint64_t)v53, (uint64_t)this, a2);
        int v31 = (CAStreamBasicDescription *)v54;
        unsigned int v32 = v54 * a3;
        if (a4->mBuffers[0].mDataByteSize >= v54 * a3)
        {
          int v33 = v28 + 15520;
          int v34 = (char *)this + 24 * a2;
          long long v35 = (uint64_t *)(v34 + 15528);
          uint64_t v36 = *((void *)v34 + 1941);
          uint64_t v37 = *((void *)v34 + 1942);
          if (v36 >= v37)
          {
            uint64_t v36 = 0;
            uint64_t *v35 = 0;
          }
          unsigned int v38 = v37 - v36;
          unsigned int v39 = v32 - v31 * v38;
          if (v32 <= v31 * v38)
          {
            if (v30)
            {
              unint64_t v46 = 0;
              uint64_t v47 = v36;
              uint64_t v48 = 16;
              uint64_t v49 = a3;
              do
              {
                vDSP_vadd((const float *)(*(void *)(*v33 + v48) + 4 * v47), 1, *(const float **)((char *)&a4->mNumberBuffers + v48), 1, *(float **)((char *)&a4->mNumberBuffers + v48), 1, a3);
                ++v46;
                v48 += 16;
              }
              while (v46 < a4->mNumberBuffers);
              uint64_t v36 = *v35;
            }
            else
            {
              uint64_t v49 = a3;
            }
            uint64_t v45 = v36 + v49;
          }
          else
          {
            if (v30)
            {
              unint64_t v40 = 0;
              uint64_t v41 = v36;
              vDSP_Length v42 = v38;
              vDSP_Length v43 = a3 - v38;
              uint64_t v44 = 16;
              do
              {
                vDSP_vadd((const float *)(*(void *)(*v33 + v44) + 4 * v41), 1, *(const float **)((char *)&a4->mNumberBuffers + v44), 1, *(float **)((char *)&a4->mNumberBuffers + v44), 1, v42);
                vDSP_vadd((const float *)(*(void *)(*v33 + v44) + 4 * *v35), 1, (const float *)(*(void *)((char *)&a4->mNumberBuffers + v44) + 4 * v42), 1, *(float **)((char *)&a4->mNumberBuffers + v44), 1, v43);
                ++v40;
                v44 += 16;
              }
              while (v40 < a4->mNumberBuffers);
            }
            uint64_t v45 = CAStreamBasicDescription::BytesToFrames(v31, v39);
          }
          uint64_t *v35 = v45;
        }
      }
    }
  }
}

uint64_t CAStreamBasicDescription::BytesToFrames(CAStreamBasicDescription *this, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "CAStreamBasicDescription.h";
      __int16 v5 = 1024;
      int v6 = 273;
      _os_log_impl(&dword_1BB0CE000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  bytesPerFrame must be > 0 in BytesToFrames", (uint8_t *)&v3, 0x12u);
    }
    __break(1u);
  }
  return a2 / this;
}

uint64_t AUFIREngine::HasCustomViewInDSPAUBundle(AUFIREngine *this)
{
  return 1;
}

uint64_t AUFIREngine::PresetWasSet(uint64_t this)
{
  *(unsigned char *)(this + 632) = 1;
  return this;
}

void *AUFIREngine::GetValidChannelCounts@<X0>(void *a1@<X8>)
{
  int v3 = -65537;
  return std::vector<AUChannelInfo>::vector(a1, &v3);
}

double AUFIREngine::GetLatency(AUFIREngine *this)
{
  return 0.0;
}

uint64_t AUFIREngine::GetParameterInfo(AUFIREngine *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  buffer->AudioUnitParameterOptions flags = -1073741824;
  if (a2) {
    return 4294956418;
  }
  unsigned int v7 = a3 - 1000000;
  if (a3 - 1000000 < 0xF4240)
  {
    uint64_t v8 = (AUFIREngine *)((char *)this + 80);
    uint64_t v9 = v7 / *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108) + 1;
    uint64_t v10 = v7 % *(_DWORD *)(ausdk::AUScope::SafeGetElement(v8, 0) + 108) + 1;
    CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Mute: In %u Out %u", v10, v9);
LABEL_7:
    buffer->cfNameString = v11;
    buffer->flags |= 0x8000010u;
    CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 2;
    uint64_t v16 = 1065353216;
    goto LABEL_8;
  }
  unsigned int v12 = a3 - 2000000;
  if (a3 - 2000000 < 0xF4240)
  {
    size_t v13 = (AUFIREngine *)((char *)this + 80);
    uint64_t v14 = v12 / *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108) + 1;
    uint64_t v15 = v12 % *(_DWORD *)(ausdk::AUScope::SafeGetElement(v13, 0) + 108) + 1;
    CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Bypass: In %u Out %u", v15, v14);
    goto LABEL_7;
  }
  if (a3 >= 0x2DC6C0)
  {
    unsigned int v17 = a3 - 3000000;
    uint64_t v18 = (AUFIREngine *)((char *)this + 80);
    uint64_t v19 = (a3 - 3000000) / *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108) + 1;
    uint64_t Element = ausdk::AUScope::SafeGetElement(v18, 0);
    CFStringRef v21 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Gain: In %u Out %u", v17 % *(_DWORD *)(Element + 108) + 1, v19);
    buffer->cfNameString = v21;
    AudioUnitParameterOptions v22 = buffer->flags | 0x8000010;
LABEL_18:
    buffer->AudioUnitParameterOptions flags = v22;
    CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 0xC2C000000000000DLL;
    uint64_t v16 = 1103101952;
    goto LABEL_8;
  }
  if (a3 == 2)
  {
    CFStringRef v21 = @"Global Gain";
    buffer->cfNameString = @"Global Gain";
    AudioUnitParameterOptions v22 = -939524096;
    goto LABEL_18;
  }
  if (a3 == 1)
  {
    buffer->cfNameString = @"Blend Time";
    buffer->AudioUnitParameterOptions flags = -939524096;
    CFStringGetCString(@"Blend Time", buffer->name, 52, 0x8000100u);
    *(void *)&buffer->unit = 0x3F80000000000018;
    uint64_t v16 = 0x41A00000461C4000;
  }
  else
  {
    if (a3) {
      return 4294956418;
    }
    buffer->cfNameString = @"FIR Matrix";
    buffer->AudioUnitParameterOptions flags = -939524096;
    CFStringGetCString(@"FIR Matrix", buffer->name, 52, 0x8000100u);
    uint64_t v24 = *((void *)this + 81) - *((void *)this + 80);
    BOOL v23 = *((void *)this + 81) == *((void *)this + 80);
    *(void *)&buffer->unit = 1;
    float v25 = 1000.0;
    if (!v23) {
      float v25 = (float)(0xAAAAAAAAAAAAAAABLL * (v24 >> 3) - 1);
    }
    uint64_t v16 = LODWORD(v25);
  }
LABEL_8:
  uint64_t result = 0;
  *(void *)&buffer->maxCFDictionaryRef Value = v16;
  return result;
}

uint64_t AUFIREngine::ProcessMultipleBufferLists(AUFIREngine *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  if (a4 != 1 || a6 != 1) {
    __assert_rtn("ProcessMultipleBufferLists", "AUFIREngine.mm", 479, "inNumberInputBufferLists == 1 && inNumberOutputBufferLists == 1");
  }
  char v11 = 0;
  unsigned int v12 = (AUFIREngineKernel **)((char *)this + 664);
  size_t v13 = (char *)this + 768;
  do
  {
    char v14 = v11;
    BOOL v15 = ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::pop((uint64_t)v13, v12);
    char v11 = 1;
  }
  while (v15);
  if (v14)
  {
    (*(void (**)(AUFIREngine *, void, void, void, void, double))(*(void *)this + 152))(this, 0, 0, 0, 0, 0.0);
    (*(void (**)(AUFIREngine *, uint64_t, void, void))(*(void *)this + 432))(this, 1668179559, 0, 0);
  }
  if (*((unsigned char *)this + 632))
  {
    uint64_t v16 = *v12;
    if (!*((_DWORD *)*v12 + 597))
    {
      *((unsigned char *)this + 632) = 0;
      AUFIREngine::ForwardParamsToKernel(this, v16, (v14 & 1) == 0);
    }
  }
  unint64_t v17 = 0;
  uint64_t v18 = 16;
  while (v17 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108))
  {
    *(void *)(*((void *)this + 352) + 8 * v17++) = *(void *)((char *)&(*a5)->mNumberBuffers + v18);
    v18 += 16;
  }
  unint64_t v19 = 0;
  uint64_t v20 = 16;
  while (v19 < *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 108))
  {
    *(void *)(*((void *)this + 355) + 8 * v19++) = *(void *)((char *)&(*a7)->mNumberBuffers + v20);
    v20 += 16;
  }
  CFStringRef v21 = *v12;
  if (*((_DWORD *)*v12 + 2) != a3)
  {
    uint64_t v24 = (float **)*((void *)this + 355);
    goto LABEL_44;
  }
  uint64_t v22 = (uint64_t)(*((void *)this + 353) - *((void *)this + 352)) >> 3;
  uint64_t v23 = *(unsigned int *)v21;
  uint64_t v24 = (float **)*((void *)this + 355);
  if (v22 != v23
    || (uint64_t v25 = (uint64_t)(*((void *)this + 356) - (void)v24) >> 3, v26 = *((unsigned int *)v21 + 1), v25 != v26))
  {
LABEL_44:
    unsigned int v52 = (float **)*((void *)this + 356);
    while (v24 != v52)
    {
      uint64_t v53 = *v24++;
      vDSP_vclr(v53, 1, a3);
    }
    return 0;
  }
  if (v23)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    do
    {
      int v29 = (void *)(*((void *)v21 + 4) + v27);
      *int v29 = *(void *)(*((void *)this + 352) + 8 * v28);
      v29[1] = a3;
      ++v28;
      v27 += 16;
    }
    while (v22 != v28);
  }
  if (v26)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    do
    {
      unsigned int v32 = (void *)(*((void *)v21 + 7) + v30);
      void *v32 = *(void *)(*((void *)this + 355) + 8 * v31);
      v32[1] = a3;
      ++v31;
      v30 += 16;
    }
    while (v25 != v31);
  }
  unsigned int v84 = *((_DWORD *)v21 + 597);
  if (v84)
  {
    unsigned int v33 = *((_DWORD *)v21 + 676);
    int v34 = v33 ^ 1;
    long long v35 = (const float *)*((void *)v21 + 19 * (v33 ^ 1) + 306);
    uint64_t v36 = (float *)*((void *)v21 + 19 * v33 + 306);
    float __B = -1.0;
    float __C = 1.0;
    if (a3)
    {
      uint64_t v37 = (const float *)((char *)v21 + 2396);
      unsigned int v38 = *((_DWORD *)v21 + 598);
      vDSP_Length v39 = a3;
      if (v84 <= v38 + 1) {
        unsigned int v40 = v38 + 1;
      }
      else {
        unsigned int v40 = v84;
      }
      unint64_t v41 = v40 + ~v38;
      if ((unint64_t)a3 - 1 < v41) {
        unint64_t v41 = a3 - 1;
      }
      if (v41 >= 0xC && ((char *)v21 + 2400 > (char *)v35 ? (BOOL v42 = v37 >= &v35[v41 + 1]) : (BOOL v42 = 1), v42))
      {
        uint64_t v43 = (v41 + 1) & 7;
        if (!v43) {
          uint64_t v43 = 8;
        }
        unint64_t v44 = v41 + 1 - v43;
        int32x4_t v45 = vaddq_s32(vdupq_n_s32(v38), (int32x4_t)xmmword_1BB8727D0);
        float32x4_t v46 = vld1q_dup_f32(v37);
        unint64_t v47 = ~v41 + v43;
        uint64_t v48 = (float32x4_t *)(v35 + 4);
        v49.i64[0] = 0x100000001;
        v49.i64[1] = 0x100000001;
        v50.i64[0] = 0x500000005;
        v50.i64[1] = 0x500000005;
        v51.i64[0] = 0x800000008;
        v51.i64[1] = 0x800000008;
        do
        {
          v48[-1] = vmulq_f32(v46, vcvtq_f32_u32((uint32x4_t)vaddq_s32(v45, v49)));
          *uint64_t v48 = vmulq_f32(v46, vcvtq_f32_u32((uint32x4_t)vaddq_s32(v45, v50)));
          int32x4_t v45 = vaddq_s32(v45, v51);
          v48 += 2;
          v47 += 8;
        }
        while (v47);
        v38 += v44;
      }
      else
      {
        unint64_t v44 = 0;
      }
      while (1)
      {
        v35[v44] = *v37 * (float)++v38;
        if (v38 >= v84) {
          break;
        }
        if (a3 == ++v44)
        {
          *((_DWORD *)v21 + 598) = v38;
          goto LABEL_52;
        }
      }
      *((_DWORD *)v21 + 598) = v38;
      *((_DWORD *)v21 + 597) = 0;
      vDSP_vfill(&__C, (float *)&v35[v44], 1, a3 - v44);
    }
    else
    {
      vDSP_Length v39 = 0;
    }
LABEL_52:
    vDSP_vsmsa(v35, 1, &__B, &__C, v36, 1, v39);
    if (!*((_DWORD *)v21 + 597))
    {
      *((_DWORD *)v21 + 597) = 0;
      *((_DWORD *)v21 + 676) = v34;
    }
  }
  if (*(_DWORD *)v21)
  {
    uint64_t v55 = 0;
    while (1)
    {
      uint64_t v56 = *((void *)v21 + 19);
      uint64_t v57 = v56 + 56 * v55;
      uint64_t v58 = *((void *)v21 + 4);
      uint64_t v59 = *((unsigned int *)v21 + 2);
      if (v59) {
        memmove(*(void **)v57, (const void *)(*(void *)v57 + 4 * v59), 4 * v59);
      }
      uint64_t v60 = v58 + 16 * v55;
      uint64_t v61 = *(void *)(v60 + 8);
      if (v61) {
        memmove((void *)(*(void *)v57 + 4 * v59), *(const void **)v60, 4 * v61);
      }
      __int16 v62 = *(DSPComplex **)v57;
      long long v63 = (void *)(*(void *)v57 + 4 * v59 + 4 * *((unsigned int *)v21 + 2));
      uint64_t v64 = *(void *)(v57 + 8) - (void)v63;
      if (v64 >= 1) {
        bzero(v63, 4 * (((unint64_t)v64 >> 2) - ((unint64_t)v64 > 3)) + 4);
      }
      uint64_t v65 = v56 + 56 * v55;
      uint64_t v68 = *(void *)(v65 + 24);
      uint64_t v67 = (void *)(v65 + 24);
      uint64_t v66 = v68;
      if (v68 == v67[1]) {
        goto LABEL_70;
      }
      if (*((_DWORD *)v21 + 597)) {
        break;
      }
      uint64_t v73 = v56 + 56 * v55;
      unsigned int v74 = *(_DWORD *)(v73 + 48);
      unsigned int v70 = (_DWORD *)(v73 + 48);
      uint64_t v72 = (DSPSplitComplex *)(v66 + 32 * v74);
      if (!*((unsigned char *)v21 + 152 * *((unsigned int *)v21 + 676) + 2544)) {
        goto LABEL_65;
      }
      vDSP_vclr(v72->realp, 1, *((unsigned int *)v21 + 5));
      vDSP_vclr(v72->imagp, 1, *((unsigned int *)v21 + 5));
LABEL_68:
      unint64_t v75 = (*v70 + 1);
      *unsigned int v70 = v75;
      if (v75 >= (uint64_t)(v67[1] - *v67) >> 5) {
        *unsigned int v70 = 0;
      }
LABEL_70:
      if (v84)
      {
        AUFIREngineKernel::ProcessXfadeChannel((uint64_t)v21, (uint64_t)v21 + 2400, v55, *((void *)v21 + 303), (uint64_t)(*((void *)v21 + 304) - *((void *)v21 + 303)) >> 4, 0);
        AUFIREngineKernel::ProcessXfadeChannel((uint64_t)v21, (uint64_t)v21 + 2552, v55, *((void *)v21 + 322), (uint64_t)(*((void *)v21 + 323) - *((void *)v21 + 322)) >> 4, 0);
        if (*((_DWORD *)v21 + 1))
        {
          unint64_t v76 = 0;
          do
          {
            uint64_t v77 = 0;
            char v78 = 1;
            do
            {
              char v79 = v78;
              uint64_t v80 = (char *)v21 + 152 * v77;
              uint64_t v81 = *(const float **)(*((void *)v80 + 300) + 24 * v76);
              long long v82 = (const float *)*((void *)v80 + 306);
              uint64_t v83 = *(float **)(*((void *)v21 + 7) + 16 * v76);
              if (v77 | v55) {
                vDSP_vma(v81, 1, v82, 1, v83, 1, v83, 1, *((unsigned int *)v21 + 2));
              }
              else {
                vDSP_vmul(v81, 1, v82, 1, v83, 1, *((unsigned int *)v21 + 2));
              }
              char v78 = 0;
              uint64_t v77 = 1;
            }
            while ((v79 & 1) != 0);
            ++v76;
          }
          while (v76 < *((unsigned int *)v21 + 1));
        }
      }
      else
      {
        AUFIREngineKernel::ProcessXfadeChannel((uint64_t)v21, (uint64_t)v21 + 152 * *((unsigned int *)v21 + 676) + 2400, v55, *((void *)v21 + 7), (uint64_t)(*((void *)v21 + 8) - *((void *)v21 + 7)) >> 4, v55 != 0);
      }
      if (++v55 >= (unint64_t)*(unsigned int *)v21) {
        return 0;
      }
    }
    uint64_t v69 = v56 + 56 * v55;
    unsigned int v71 = *(_DWORD *)(v69 + 48);
    unsigned int v70 = (_DWORD *)(v69 + 48);
    uint64_t v72 = (DSPSplitComplex *)(v66 + 32 * v71);
LABEL_65:
    MultiRadixRealFFT::RealOutOfPlaceForwardTransform((AUFIREngineKernel *)((char *)v21 + 136), v62, v72, 1.0);
    goto LABEL_68;
  }
  return 0;
}

BOOL ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::pop(uint64_t a1, AUFIREngineKernel **a2)
{
  uint64_t v10 = 0;
  BOOL v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v10);
  if (v4)
  {
    __int16 v5 = v10;
    if (!v10) {
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    }
    int v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      uint64_t v9 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v9))
      {
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
    }
    std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](a2, v5);
  }
  return v4;
}

void sub_1BB70F008(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AUFIREngine::ForwardParamsToKernel(AUFIREngine *this, AUFIREngineKernel *a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 80), 0) + 108);
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0);
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v25 = *(unsigned int *)(Element + 108);
    int v26 = 3000000;
    int v8 = 2000000;
    int v9 = 1000000;
    do
    {
      if (v25)
      {
        int v10 = 0;
        for (unint64_t i = 0; i != v25; ++i)
        {
          float v27 = 0.0;
          (*(void (**)(AUFIREngine *, void, void, void, float *))(*(void *)this + 144))(this, (v9 + v10), 0, 0, &v27);
          v12.n128_f32[0] = v27;
          uint64_t v13 = *(void *)(*((void *)a2 + 295) + 24 * v7);
          unint64_t v14 = i >> 6;
          uint64_t v15 = 1 << i;
          if (v27 == 0.0) {
            uint64_t v16 = *(void *)(v13 + 8 * v14) & ~v15;
          }
          else {
            uint64_t v16 = *(void *)(v13 + 8 * v14) | v15;
          }
          *(void *)(v13 + 8 * v14) = v16;
          float v27 = 0.0;
          (*(void (**)(AUFIREngine *, void, void, void, float *, __n128))(*(void *)this + 144))(this, (v8 + v10), 0, 0, &v27, v12);
          v17.n128_f32[0] = v27;
          uint64_t v18 = *(void *)(*((void *)a2 + 292) + 24 * v7);
          if (v27 == 0.0) {
            uint64_t v19 = *(void *)(v18 + 8 * v14) & ~v15;
          }
          else {
            uint64_t v19 = *(void *)(v18 + 8 * v14) | v15;
          }
          *(void *)(v18 + 8 * v14) = v19;
          float v27 = 0.0;
          (*(void (**)(AUFIREngine *, void, void, void, float *, __n128))(*(void *)this + 144))(this, (v26 + v10), 0, 0, &v27, v17);
          *(float *)(*(void *)(*((void *)a2 + 289) + 24 * v7) + 4 * i) = __exp10f(v27 * 0.05);
          v10 += v5;
        }
      }
      ++v7;
      ++v26;
      ++v8;
      ++v9;
    }
    while (v7 != v5);
  }
  float v27 = 0.0;
  (*(void (**)(AUFIREngine *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 2, 0, 0, &v27);
  *((float *)a2 + 577) = __exp10f(v27 * 0.05);
  float v27 = 0.0;
  (*(void (**)(AUFIREngine *, void, void, void, float *))(*(void *)this + 144))(this, 0, 0, 0, &v27);
  if (*((_DWORD *)a2 + 3) > v27) {
    *((_DWORD *)a2 + 576) = v27;
  }
  float v27 = 0.0;
  (*(void (**)(AUFIREngine *, uint64_t, void, void, float *))(*(void *)this + 144))(this, 1, 0, 0, &v27);
  double v20 = (float)(v27 / 1000.0);
  unsigned int v21 = (*(double *)(ausdk::AUScope::SafeGetElement((AUFIREngine *)((char *)this + 128), 0) + 80) * v20);
  *((_DWORD *)a2 + 596) = v21;
  if (a3)
  {
    if (*((_DWORD *)a2 + 597)) {
      __assert_rtn("CommitChanges", "AUFIREngineKernel.cpp", 541, "!IsFading()");
    }
    int v22 = *((_DWORD *)a2 + 676);
    int v23 = v22 ^ 1;
    *((_DWORD *)a2 + 597) = v21;
    *((_DWORD *)a2 + 598) = 0;
    if (v21 <= 1) {
      unsigned int v21 = 1;
    }
    *((float *)a2 + 599) = 1.0 / (float)v21;
    AUFIREngineKernel::PrepareXfadeChannel(a2, v22 ^ 1);
    if (!*((_DWORD *)a2 + 597))
    {
      *((_DWORD *)a2 + 597) = 0;
      *((_DWORD *)a2 + 676) = v23;
    }
  }
  else
  {
    *((_DWORD *)a2 + 597) = 0;
    *((_DWORD *)a2 + 676) = 0;
    AUFIREngineKernel::PrepareXfadeChannel(a2, 0);
  }
}

AUFIREngineKernel *std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](AUFIREngineKernel **a1, AUFIREngineKernel *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    AUFIREngineKernel::~AUFIREngineKernel(result);
    JUMPOUT(0x1C185D360);
  }
  return result;
}

void AUFIREngineKernel::~AUFIREngineKernel(AUFIREngineKernel *this)
{
  MEMORY[0x1C185C240]((char *)this + 2712);
  for (uint64_t i = 0; i != -304; i -= 152)
  {
    int v3 = (char *)this + i;
    char v11 = (void **)((char *)this + i + 2672);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
    char v11 = (void **)((char *)this + i + 2640);
    std::vector<std::vector<AUFIREngineKernel::FilterInfo>>::__destroy_vector::operator()[abi:ne180100](&v11);
    BOOL v4 = *(std::__shared_weak_count **)((char *)this + i + 2632);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = (void *)*((void *)v3 + 325);
    if (v5)
    {
      *(void *)((char *)this + i + 2608) = v5;
      operator delete(v5);
    }
    int v6 = *(void **)((char *)this + i + 2576);
    if (v6)
    {
      *(void *)((char *)this + i + 2584) = v6;
      operator delete(v6);
    }
    char v11 = (void **)(v3 + 2552);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  }
  char v11 = (void **)((char *)this + 2360);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v11);
  char v11 = (void **)((char *)this + 2336);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&v11);
  char v11 = (void **)((char *)this + 2312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  *((void *)this + 24) = &unk_1F14C0640;
  ca::concurrent::deferred_deletion_queue<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>,10ul,std::default_delete<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>>::~deferred_deletion_queue((uint64_t)this + 256);
  std::unique_ptr<std::vector<std::shared_ptr<AUFIREngineKernel::FilterBank>>>::reset[abi:ne180100]((void ***)this + 22, 0);
  char v11 = (void **)((char *)this + 152);
  std::vector<AUFIREngineKernel::InputChannel>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  CDSPSplitComplex::~CDSPSplitComplex((AUFIREngineKernel *)((char *)this + 104));
  int v8 = (void *)*((void *)this + 10);
  if (v8)
  {
    *((void *)this + 11) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 7);
  if (v9)
  {
    *((void *)this + 8) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 4);
  if (v10)
  {
    *((void *)this + 5) = v10;
    operator delete(v10);
  }
}

uint64_t AUFIREngine::SetParameter(AUFIREngine *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5 = a4;
  int v6 = a3;
  int v7 = a2;
  AUJBase::SetParameter(this, a2, a3, a4, a5);
  if (v7 != 1 && !(v5 | v6)) {
    *((unsigned char *)this + 632) = 1;
  }
  return 0;
}

uint64_t AUFIREngine::GetParameter(AUFIREngine *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  *a5 = ausdk::AUElement::GetParameter(Element, a2);
  return 0;
}

uint64_t AUFIREngine::SetProperty(void ***this, int a2, int a3, int a4, CFTypeRef *a5, int a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 4294956417;
  if (a4 | a3 || !a5) {
    return v6;
  }
  if (a2 == 1668179559)
  {
    if (AUJBase::AUJBaseLogScope(void)::once != -1) {
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
    }
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      __n128 v12 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v12) {
        goto LABEL_43;
      }
    }
    else
    {
      __n128 v12 = MEMORY[0x1E4F14500];
      id v17 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUFIREngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 355;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property ConfigPlist", buf, 0x12u);
    }

LABEL_43:
    if (a6 != 8) {
      return 4294956445;
    }
    CFTypeRef v18 = *a5;
    if (v18)
    {
      CFRetain(v18);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v44, v18);
    }
    else
    {
      CFTypeRef v44 = 0;
    }
    if (!*((unsigned char *)this + 17))
    {
      GetFilterMatrix((const applesauce::CF::DictionaryRef *)buf, (CFDictionaryRef *)&v44);
      std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate(this + 80);
      *((_OWORD *)this + 40) = *(_OWORD *)buf;
      this[82] = *(void ***)&buf[16];
      memset(buf, 0, 24);
      *(void *)&long long v47 = buf;
      goto LABEL_97;
    }
    GetFilterMatrix((const applesauce::CF::DictionaryRef *)buf, (CFDictionaryRef *)&v44);
    int v23 = this[81];
    uint64_t v24 = this[80];
    uint64_t v25 = *(void *)buf;
    if ((char *)v23 - (char *)v24 == *(void *)&buf[8] - *(void *)buf)
    {
      while (v24 != v23)
      {
        float v27 = (float ***)*v24;
        int v26 = (char *)v24[1];
        uint64_t v28 = *(uint64_t **)v25;
        if (v26 - (unsigned char *)*v24 != *(void *)(v25 + 8) - *(void *)v25) {
          goto LABEL_72;
        }
        while (v27 != (float ***)v26)
        {
          uint64_t v30 = *v27;
          int v29 = v27[1];
          uint64_t v31 = *v28;
          if ((char *)v29 - (char *)*v27 != v28[1] - *v28) {
            goto LABEL_72;
          }
          while (v30 != v29)
          {
            unsigned int v32 = *v30;
            unsigned int v33 = v30[1];
            int v34 = *(float **)v31;
            if ((char *)v33 - (char *)*v30 != *(void *)(v31 + 8) - *(void *)v31) {
              goto LABEL_72;
            }
            while (v32 != v33)
            {
              if (*v32 != *v34) {
                goto LABEL_72;
              }
              ++v32;
              ++v34;
            }
            v30 += 3;
            v31 += 24;
          }
          v27 += 3;
          v28 += 3;
        }
        v24 += 3;
        v25 += 24;
      }
      *(void *)&long long v47 = buf;
LABEL_97:
      std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      *((unsigned char *)this + 633) = 1;
      ((void (*)(void ***, uint64_t, void, void))(*this)[54])(this, 1668179559, 0, 0);
      uint64_t v6 = 0;
      CFTypeRef v38 = v44;
      if (!v44) {
        return v6;
      }
      goto LABEL_91;
    }
LABEL_72:
    std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate(this + 80);
    *((_OWORD *)this + 40) = *(_OWORD *)buf;
    this[82] = *(void ***)&buf[16];
    memset(buf, 0, 24);
    *(void *)&long long v47 = buf;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    if (AUJBase::AUJBaseLogScope(void)::once != -1) {
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
    }
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      long long v35 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v35) {
        goto LABEL_95;
      }
    }
    else
    {
      long long v35 = MEMORY[0x1E4F14500];
      id v39 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUFIREngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 380;
      _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting new FIR matrix", buf, 0x12u);
    }
LABEL_95:

    AUFIREngineKernel::SetMatrixFIRs(this[83], (uint64_t *)this + 80);
  }
  if (a2 == 1717924720)
  {
    if (AUJBase::AUJBaseLogScope(void)::once != -1) {
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
    }
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      char v11 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v11) {
        goto LABEL_25;
      }
    }
    else
    {
      char v11 = MEMORY[0x1E4F14500];
      id v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUFIREngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 413;
      _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property SetParameters", buf, 0x12u);
    }

LABEL_25:
    if (a6 == 8)
    {
      CFTypeRef v14 = *a5;
      if (v14)
      {
        CFRetain(v14);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)buf, v14);
        if (*(void *)buf)
        {
          if (CFDictionaryGetCount(*(CFDictionaryRef *)buf))
          {
            CFDictionaryApplyFunction(*(CFDictionaryRef *)buf, (CFDictionaryApplierFunction)AUFIREngine::ParseSetParameters, this);
            LODWORD(v44) = 1;
            CFNumberRef v15 = CFNumberCreate(0, kCFNumberIntType, &v44);
            *(void *)&long long v47 = v15;
            if (!v15)
            {
              exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            if (!*(void *)buf)
            {
              uint64_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v43, "Could not construct");
            }
            if (!CFDictionaryContainsKey(*(CFDictionaryRef *)buf, v15)
              || (CFDictionaryRef v16 = (const __CFDictionary *)*applesauce::CF::DictionaryRef::operator->(buf)) != 0
              && (unint64_t)CFDictionaryGetCount(v16) >= 2)
            {
              *((unsigned char *)this + 632) = 1;
            }
            ((void (*)(void ***, uint64_t, void, void))(*this)[54])(this, 1717924720, 0, 0);
            CFRelease(v15);
          }
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
          return 0;
        }
      }
      else
      {
        *(void *)AudioStreamBasicDescription buf = 0;
      }
      unsigned int v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
    }
    return 4294956445;
  }
  if (a2 != 1718186611) {
    return v6;
  }
  if (AUJBase::AUJBaseLogScope(void)::once != -1) {
    dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
  }
  if (AUJBase::AUJBaseLogScope(void)::scope)
  {
    int v10 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
    if (!v10) {
      goto LABEL_50;
    }
  }
  else
  {
    int v10 = MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUFIREngine.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 331;
    _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property FIRMatrices", buf, 0x12u);
  }

LABEL_50:
  CFTypeID v20 = CFGetTypeID(*a5);
  if (v20 != CFArrayGetTypeID()) {
    return 4294956445;
  }
  CFTypeRef v21 = *a5;
  if (!v21)
  {
    CFTypeRef cf = 0;
LABEL_102:
    unint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
  }
  CFRetain(v21);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v21);
  if (!cf) {
    goto LABEL_102;
  }
  CFTypeRef v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  applesauce::CF::convert_as<std::vector<std::vector<std::vector<std::vector<float>>>>,0>((uint64_t)buf, (const __CFArray *)cf);
  uint64_t v48 = 0;
  long long v47 = 0uLL;
  if (buf[24])
  {
    std::vector<std::vector<std::vector<std::vector<float>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<float>>>*,std::vector<std::vector<std::vector<float>>>*>(&v47, *(uint64_t ***)buf, *(uint64_t ***)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3));
    int32x4_t v50 = buf;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  }
  else
  {
    CFTypeRef v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
  }
  std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate(this + 80);
  *((_OWORD *)this + 40) = v47;
  this[82] = v48;
  uint64_t v48 = 0;
  long long v47 = 0uLL;
  *(void *)AudioStreamBasicDescription buf = &v47;
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioStreamBasicDescription buf = &v44;
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *((unsigned char *)this + 633) = 1;
  if (*((unsigned char *)this + 17))
  {
    if (AUJBase::AUJBaseLogScope(void)::once != -1) {
      dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
    }
    if (AUJBase::AUJBaseLogScope(void)::scope)
    {
      uint64_t v36 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
      if (!v36) {
        goto LABEL_89;
      }
    }
    else
    {
      uint64_t v36 = MEMORY[0x1E4F14500];
      id v37 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "AUFIREngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 342;
      _os_log_impl(&dword_1BB0CE000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting new FIR matrix", buf, 0x12u);
    }

LABEL_89:
    AUFIREngineKernel::SetMatrixFIRs(this[83], (uint64_t *)this + 80);
  }
  ((void (*)(void ***, uint64_t, void, void))(*this)[54])(this, 1718186611, 0, 0);
  uint64_t v6 = 0;
  CFTypeRef v38 = cf;
  if (cf) {
LABEL_91:
  }
    CFRelease(v38);
  return v6;
}

void sub_1BB70FFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, int buf, uint64_t a20,__int16 a21,int a22,__int16 a23,uint64_t a24,__int16 a25,int a26)
{
}

void GetFilterMatrix(const applesauce::CF::DictionaryRef *a1, CFDictionaryRef *a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  if (!*a2)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (applesauce::CF::details::has_key<__CFString const* const&>(*a2, @"FIR_Matrices"))
  {
    CFDictionaryRef v4 = *a2;
    if (!*a2)
    {
      uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v53, "Could not construct");
    }
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    CFArrayRef v5 = (const __CFArray *)applesauce::CF::details::at_key<__CFString const* const&>(v4, @"FIR_Matrices");
    if (v5)
    {
      applesauce::CF::convert_as<std::vector<std::vector<std::vector<std::vector<float>>>>,0>((uint64_t)&v76, v5);
      unint64_t v75 = 0;
      long long v74 = 0uLL;
      if ((_BYTE)v79)
      {
        std::vector<std::vector<std::vector<std::vector<float>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<float>>>*,std::vector<std::vector<std::vector<float>>>*>(&v74, (uint64_t **)v76, (uint64_t **)v77, 0xAAAAAAAAAAAAAAABLL * (v77 - v76));
        if ((_BYTE)v79)
        {
          __p[0] = &v76;
          std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        goto LABEL_18;
      }
    }
    else
    {
      LOBYTE(v76) = 0;
      LOBYTE(v79) = 0;
      unint64_t v75 = 0;
      long long v74 = 0uLL;
    }
    long long v72 = 0uLL;
    uint64_t v73 = 0;
LABEL_18:
    std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate((void ***)a1);
    *(_OWORD *)a1 = v74;
    *((void *)a1 + 2) = v75;
    unint64_t v75 = 0;
    long long v74 = 0uLL;
    unint64_t v76 = (void **)&v74;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v76);
    unint64_t v76 = (void **)&v72;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v76);
    return;
  }
  if (!*a2)
  {
    uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>(*a2, @"FIR_NamedMatrices")) {
    return;
  }
  if (!*a2)
  {
    uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>(*a2, @"FIR_Table")) {
    return;
  }
  if (!*a2)
  {
    uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
  }
  uint64_t v6 = applesauce::CF::details::at_key<__CFString const* const&>(*a2, @"FIR_Table");
  if (v6)
  {
    int v7 = v6;
    CFRetain(v6);
    CFTypeID v8 = CFGetTypeID(v7);
    if (v8 == CFDictionaryGetTypeID())
    {
      unint64_t v76 = (void **)v7;
      LOBYTE(v77) = 1;
      CFRetain(v7);
      unsigned int v71 = v7;
      int v9 = (unsigned char *)std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
      goto LABEL_22;
    }
    CFRelease(v7);
  }
  LOBYTE(v76) = 0;
  LOBYTE(v77) = 0;
  unsigned int v71 = 0;
  int v9 = (unsigned char *)std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
  int v7 = 0;
LABEL_22:
  if (!*a2)
  {
    uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(v9, *a2, @"FIR_NamedMatrices");
  if (!(_BYTE)v77)
  {
    CFArrayRef v70 = 0;
    goto LABEL_104;
  }
  CFArrayRef v10 = (const __CFArray *)v76;
  if (!v76)
  {
    CFArrayRef v70 = 0;
LABEL_104:
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
    uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
  }
  CFRetain(v76);
  CFArrayRef v70 = v10;
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
  CFIndex Count = CFArrayGetCount(v10);
  if (Count)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    unint64_t v59 = Count;
    CFArrayRef v60 = v10;
    while (1)
    {
      long long v74 = 0uLL;
      unint64_t v75 = 0;
      unint64_t v76 = 0;
      applesauce::CF::at_or<applesauce::CF::ArrayRef>(&theArray, v10, v12, &v76);
      if (v76) {
        CFRelease(v76);
      }
      int v61 = v13;
      CFArrayRef v14 = theArray;
      if (!theArray)
      {
        int32x4_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
      }
      unint64_t v15 = 0;
      int v16 = 0;
LABEL_31:
      if (CFArrayGetCount(v14) > v15) {
        break;
      }
      id v37 = a1;
      CFTypeRef v38 = (void *)*((void *)a1 + 1);
      unint64_t v39 = *((void *)a1 + 2);
      if ((unint64_t)v38 >= v39)
      {
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v38 - *(void *)a1) >> 3);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(void *)a1) >> 3);
        if (2 * v43 > v42) {
          unint64_t v42 = 2 * v43;
        }
        if (v43 >= 0x555555555555555) {
          unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v44 = v42;
        }
        uint64_t v80 = (void **)((char *)a1 + 16);
        uint64_t v45 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v44);
        uint64_t v46 = &v45[3 * v41];
        unint64_t v76 = v45;
        uint64_t v77 = v46;
        char v79 = &v45[3 * v47];
        void *v46 = 0;
        v46[1] = 0;
        v46[2] = 0;
        *(_OWORD *)uint64_t v46 = v74;
        v46[2] = v75;
        long long v74 = 0uLL;
        unint64_t v75 = 0;
        char v78 = v46 + 3;
        id v37 = a1;
        std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v76);
        unsigned int v40 = (void *)*((void *)a1 + 1);
        std::__split_buffer<std::vector<std::vector<std::vector<float>>>>::~__split_buffer((uint64_t)&v76);
      }
      else
      {
        void *v38 = 0;
        v38[1] = 0;
        v38[2] = 0;
        *(_OWORD *)CFTypeRef v38 = v74;
        v38[2] = v75;
        long long v74 = 0uLL;
        unint64_t v75 = 0;
        unsigned int v40 = v38 + 3;
        *((void *)a1 + 1) = v38 + 3;
      }
      *((void *)v37 + 1) = v40;
      CFRelease(v14);
      unint64_t v76 = (void **)&v74;
      std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v76);
      unint64_t v12 = (v61 + 1);
      int v13 = v61 + 1;
      CFArrayRef v10 = v60;
      if (v59 <= v12) {
        goto LABEL_88;
      }
    }
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    unint64_t v76 = 0;
    applesauce::CF::at_or<applesauce::CF::ArrayRef>(&v68, v14, v15, &v76);
    if (v76) {
      CFRelease(v76);
    }
    CFArrayRef v17 = v68;
    if (!v68)
    {
      int32x4_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v50, "Could not construct");
    }
    unint64_t v18 = 0;
    for (unsigned int i = 1; ; ++i)
    {
      if (CFArrayGetCount(v17) <= v18)
      {
        uint64_t v29 = *((void *)&v74 + 1);
        if (*((void *)&v74 + 1) >= (unint64_t)v75)
        {
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v74 + 1) - v74) >> 3);
          unint64_t v32 = v31 + 1;
          if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((uint64_t)v75 - (uint64_t)v74) >> 3) > v32) {
            unint64_t v32 = 0x5555555555555556 * (((uint64_t)v75 - (uint64_t)v74) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v75 - (uint64_t)v74) >> 3) >= 0x555555555555555) {
            unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v33 = v32;
          }
          uint64_t v80 = &v75;
          int v34 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v33);
          long long v35 = &v34[3 * v31];
          unint64_t v76 = v34;
          uint64_t v77 = v35;
          char v79 = &v34[3 * v36];
          NSObject *v35 = 0;
          v35[1] = 0;
          v35[2] = 0;
          *(_OWORD *)long long v35 = v72;
          v35[2] = v73;
          long long v72 = 0uLL;
          uint64_t v73 = 0;
          char v78 = v35 + 3;
          std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v74, &v76);
          uint64_t v30 = *((void *)&v74 + 1);
          std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v76);
        }
        else
        {
          **((void **)&v74 + 1) = 0;
          *(void *)(v29 + 8) = 0;
          *(void *)(v29 + 16) = 0;
          *(_OWORD *)uint64_t v29 = v72;
          *(void *)(v29 + 16) = v73;
          long long v72 = 0uLL;
          uint64_t v73 = 0;
          uint64_t v30 = v29 + 24;
        }
        *((void *)&v74 + 1) = v30;
        CFRelease(v17);
        unint64_t v76 = (void **)&v72;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v76);
        unint64_t v15 = ++v16;
        goto LABEL_31;
      }
      applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&cf, v17, v18);
      if (!v67) {
        break;
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v65 = 0;
LABEL_49:
      if (!cf)
      {
        uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v48, "Could not construct");
      }
      applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v76, (const __CFArray *)cf);
      uint64_t v63 = 0;
      long long v62 = 0uLL;
      if ((_BYTE)v79)
      {
        float v27 = v76;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v62, v76, (uint64_t)v77, ((char *)v77 - (char *)v76) >> 2);
        if (v27) {
          operator delete(v27);
        }
      }
      *(_OWORD *)std::vector<unsigned int> __p = v62;
      uint64_t v65 = v63;
LABEL_54:
      std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)&v72, (uint64_t)__p);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      unint64_t v18 = i;
    }
    if (CFArrayGetCount(v17) > v18)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v17, v18);
      CFTypeRef v21 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFRetain(ValueAtIndex);
        CFTypeID v22 = CFGetTypeID(v21);
        if (v22 == CFStringGetTypeID())
        {
          unint64_t v76 = (void **)v21;
          LOBYTE(v77) = 1;
          if (!v7)
          {
            int32x4_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v49, "Could not construct");
          }
          CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)v7, v21);
          uint64_t v24 = Value;
          if (Value)
          {
            CFRetain(Value);
            CFTypeID v25 = CFGetTypeID(v24);
            if (v25 == CFArrayGetTypeID())
            {
              __p[0] = (void *)v24;
              int v26 = 1;
LABEL_59:
              LOBYTE(__p[1]) = v26;
              if (v67 == v26)
              {
                if (v67)
                {
                  CFTypeRef v28 = cf;
                  CFTypeRef cf = __p[0];
                  __p[0] = (void *)v28;
                }
              }
              else if (v67)
              {
                if (cf) {
                  CFRelease(cf);
                }
                unsigned __int8 v67 = 0;
              }
              else
              {
                CFTypeRef cf = __p[0];
                __p[0] = 0;
                unsigned __int8 v67 = 1;
              }
              std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
LABEL_48:
              std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v65 = 0;
              if (!v67) {
                goto LABEL_54;
              }
              goto LABEL_49;
            }
            CFRelease(v24);
          }
          int v26 = 0;
          LOBYTE(__p[0]) = 0;
          goto LABEL_59;
        }
        CFRelease(v21);
      }
    }
    LOBYTE(v76) = 0;
    LOBYTE(v77) = 0;
    goto LABEL_48;
  }
LABEL_88:
  CFRelease(v10);
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1BB710E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,const void *a35,uint64_t a36)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a35);
  *(void *)(v36 - 160) = a12;
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 160));
  _Unwind_Resume(a1);
}

uint64_t AUFIREngine::ValidateConfiguration(uint64_t this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(this + 640);
  if (v1 != *(void **)(this + 648))
  {
    uint64_t v2 = v1[1] - *v1;
    if (!v2
      || (uint64_t v3 = this,
          0xAAAAAAAAAAAAAAABLL * (v2 >> 3) != *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 128), 0)+ 108)))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v8, 0xFFFFFFFF);
        *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
        CFArrayRef v10 = "AUFIREngine.mm";
        __int16 v11 = 1024;
        int v12 = 58;
        __int16 v13 = 2080;
        CFArrayRef v14 = v8;
        __int16 v15 = 2080;
        int v16 = "Matrix outputs to AU output format validation";
        _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exceptiounint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Matrix outputs to AU output format validation", -1);
    }
    uint64_t v4 = *(void *)(*v1 + 8) - *(void *)*v1;
    if (!v4
      || (unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3),
          this = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v3 + 80), 0),
          v5 != *(_DWORD *)(this + 108)))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v8, 0xFFFFFFFF);
        *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
        CFArrayRef v10 = "AUFIREngine.mm";
        __int16 v11 = 1024;
        int v12 = 60;
        __int16 v13 = 2080;
        CFArrayRef v14 = v8;
        __int16 v15 = 2080;
        int v16 = "Matrix inputs to AU input format validation";
        _os_log_impl(&dword_1BB0CE000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      int v7 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v7, "Matrix inputs to AU input format validation", -1);
    }
  }
  return this;
}

void sub_1BB711250(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<AUFIREngineKernel,unsigned int,unsigned int,unsigned int,std::vector<std::vector<std::vector<std::vector<float>>>> &>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  int v9 = operator new(0xAC0uLL, (std::align_val_t)0x40uLL);
  AUFIREngineKernel::AUFIREngineKernel((uint64_t)v9, a2, a3, a4, a5);
}

void sub_1BB7112D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D360](v1, 64);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_stash<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::store(uint64_t a1, uint64_t *a2)
{
  int v7 = 0;
  uint64_t v4 = a1 + 64;
  while (ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::pop(v4, &v7));
  if (!*a2) {
    __assert_rtn("push", "deferred_deletion_queue.h", 71, "ioObject");
  }
  atomic_exchange((atomic_uchar *volatile)(a1 + 2049), 1u);
  uint64_t v8 = *a2;
  BOOL v5 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 128, &v8);
  if (v5) {
    *a2 = 0;
  }
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::drain_trash(v4);
  if (v7)
  {
    AUFIREngineKernel::~AUFIREngineKernel(v7);
    MEMORY[0x1C185D360]();
  }
  return v5;
}

void sub_1BB7113B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, AUFIREngineKernel *a9)
{
}

void AUFIREngine::ParseSetParameters(AUFIREngine *this, const void *a2, AUJBase *a3, void *a4)
{
  if (!this)
  {
    CFTypeRef v12 = 0;
LABEL_12:
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(this);
  applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&v12, this);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v7 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v12);
  if (a2) {
    CFRetain(a2);
  }
  applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&cf, a2);
  if (!cf)
  {
    CFArrayRef v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }
  float v8 = applesauce::CF::convert_to<float,0>((const __CFNumber *)cf);
  AUJBase::SetParameter(a3, v7, 0, 0, v8);
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
}

void sub_1BB7114FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::NumberRef::~NumberRef((const void **)&a9);
  applesauce::CF::NumberRef::~NumberRef(&a10);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::drain_trash(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v1 = (atomic_uint *)(a1 + 1024);
  while (1)
  {
    BOOL result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v3);
    if (!result) {
      break;
    }
    if (!v3) {
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    }
    AUFIREngineKernel::~AUFIREngineKernel(v3);
    MEMORY[0x1C185D360]();
  }
  return result;
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef>(void *a1, const __CFArray *a2, unint64_t a3, void *a4)
{
  applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(unsigned char *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3) {
    goto LABEL_6;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  uint64_t v7 = ValueAtIndex;
  if (!ValueAtIndex) {
    goto LABEL_6;
  }
  CFRetain(ValueAtIndex);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFArrayGetTypeID())
  {
    CFRelease(v7);
LABEL_6:
    char v9 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(void *)a1 = v7;
  char v9 = 1;
LABEL_7:
  a1[8] = v9;
}

void applesauce::CF::convert_as<std::vector<std::vector<std::vector<std::vector<float>>>>,0>(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    CFIndex Count = CFArrayGetCount(a2);
    int v5 = Count;
    long long v39 = 0uLL;
    v40[0] = 0;
    if (Count << 32)
    {
      if (Count << 32 < 0) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v52 = (void **)v40;
      uint64_t v48 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>((int)Count);
      int32x4_t v49 = v48;
      int32x4_t v50 = v48;
      int32x4_t v51 = &v48[3 * v6];
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v39, &v48);
      std::__split_buffer<std::vector<std::vector<std::vector<float>>>>::~__split_buffer((uint64_t)&v48);
    }
    if (v5 < 1)
    {
LABEL_50:
      *(_OWORD *)a1 = v39;
      *(void *)(a1 + 16) = v40[0];
      v40[0] = 0;
      long long v39 = 0uLL;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      CFIndex v7 = 0;
      uint64_t v35 = v5;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
        if (!ValueAtIndex) {
          break;
        }
        CFTypeID v9 = CFArrayGetTypeID();
        if (v9 != CFGetTypeID(ValueAtIndex)) {
          break;
        }
        int v10 = CFArrayGetCount((CFArrayRef)ValueAtIndex);
        long long v44 = 0uLL;
        uint64_t v45 = 0;
        std::vector<std::vector<std::vector<float>>>::reserve(&v44, v10);
        if (v10 < 1)
        {
LABEL_35:
          long long v36 = v44;
          id v37 = v45;
          uint64_t v45 = 0;
          long long v44 = 0uLL;
          char v38 = 1;
        }
        else
        {
          CFIndex v11 = 0;
          uint64_t v12 = v10;
          while (1)
          {
            __int16 v13 = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, v11);
            if (!v13) {
              break;
            }
            CFTypeID v14 = CFArrayGetTypeID();
            if (v14 != CFGetTypeID(v13)) {
              break;
            }
            int v15 = CFArrayGetCount((CFArrayRef)v13);
            long long v46 = 0uLL;
            uint64_t v47 = 0;
            std::vector<std::vector<float>>::reserve((uint64_t *)&v46, v15);
            if (v15 < 1)
            {
LABEL_20:
              long long v41 = v46;
              unint64_t v42 = v47;
              uint64_t v47 = 0;
              long long v46 = 0uLL;
              char v43 = 1;
            }
            else
            {
              CFIndex v16 = 0;
              while (1)
              {
                CFArrayRef v17 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v13, v16);
                applesauce::CF::convert_as<std::vector<float>,0>((uint64_t)&v48, v17);
                if (!(_BYTE)v51) {
                  break;
                }
                std::vector<std::vector<float>>::emplace_back<std::vector<float>>((uint64_t *)&v46, (uint64_t)&v48);
                if ((_BYTE)v51 && v48) {
                  operator delete(v48);
                }
                if (v15 == ++v16) {
                  goto LABEL_20;
                }
              }
              LOBYTE(v41) = 0;
              char v43 = 0;
            }
            uint64_t v48 = (void **)&v46;
            std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v48);
            if (!v43) {
              break;
            }
            uint64_t v18 = *((void *)&v44 + 1);
            if (*((void *)&v44 + 1) >= (unint64_t)v45)
            {
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v44 + 1) - v44) >> 3);
              unint64_t v21 = v20 + 1;
              if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((uint64_t)v45 - (uint64_t)v44) >> 3) > v21) {
                unint64_t v21 = 0x5555555555555556 * (((uint64_t)v45 - (uint64_t)v44) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v45 - (uint64_t)v44) >> 3) >= 0x555555555555555) {
                unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v22 = v21;
              }
              uint64_t v52 = &v45;
              int v23 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v22);
              uint64_t v24 = &v23[3 * v20];
              uint64_t v48 = v23;
              int32x4_t v49 = v24;
              int32x4_t v51 = &v23[3 * v25];
              *uint64_t v24 = 0;
              v24[1] = 0;
              v24[2] = 0;
              *(_OWORD *)uint64_t v24 = v41;
              v24[2] = v42;
              long long v41 = 0uLL;
              unint64_t v42 = 0;
              int32x4_t v50 = v24 + 3;
              std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v44, &v48);
              uint64_t v19 = *((void *)&v44 + 1);
              std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((uint64_t)&v48);
            }
            else
            {
              **((void **)&v44 + 1) = 0;
              *(void *)(v18 + 8) = 0;
              *(void *)(v18 + 16) = 0;
              *(_OWORD *)uint64_t v18 = v41;
              *(void *)(v18 + 16) = v42;
              long long v41 = 0uLL;
              unint64_t v42 = 0;
              uint64_t v19 = v18 + 24;
            }
            *((void *)&v44 + 1) = v19;
            if (v43)
            {
              uint64_t v48 = (void **)&v41;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v48);
            }
            if (++v11 == v12) {
              goto LABEL_35;
            }
          }
          LOBYTE(v36) = 0;
          char v38 = 0;
        }
        uint64_t v48 = (void **)&v44;
        std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v48);
        if (!v38) {
          break;
        }
        uint64_t v26 = *((void *)&v39 + 1);
        if (*((void *)&v39 + 1) >= v40[0])
        {
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v39 + 1) - v39) >> 3);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v40[0] - v39) >> 3) > v29) {
            unint64_t v29 = 0x5555555555555556 * ((uint64_t)(v40[0] - v39) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40[0] - v39) >> 3) >= 0x555555555555555) {
            unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v30 = v29;
          }
          uint64_t v52 = (void **)v40;
          unint64_t v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUPropertyItem>>(v30);
          unint64_t v32 = &v31[3 * v28];
          uint64_t v48 = v31;
          int32x4_t v49 = v32;
          int32x4_t v51 = &v31[3 * v33];
          float *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          *(_OWORD *)unint64_t v32 = v36;
          v32[2] = v37;
          long long v36 = 0uLL;
          id v37 = 0;
          int32x4_t v50 = v32 + 3;
          std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(&v39, &v48);
          uint64_t v27 = *((void *)&v39 + 1);
          std::__split_buffer<std::vector<std::vector<std::vector<float>>>>::~__split_buffer((uint64_t)&v48);
        }
        else
        {
          **((void **)&v39 + 1) = 0;
          *(void *)(v26 + 8) = 0;
          *(void *)(v26 + 16) = 0;
          *(_OWORD *)uint64_t v26 = v36;
          *(void *)(v26 + 16) = v37;
          long long v36 = 0uLL;
          id v37 = 0;
          uint64_t v27 = v26 + 24;
        }
        *((void *)&v39 + 1) = v27;
        if (v38)
        {
          uint64_t v48 = (void **)&v36;
          std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v48);
        }
        if (++v7 == v35) {
          goto LABEL_50;
        }
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
    }
    uint64_t v48 = (void **)&v39;
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v48);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

uint64_t AUFIREngine::GetProperty(uint64_t ***this, int a2, int a3, unsigned int a4, __CFDictionary **a5)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 1717924719)
  {
    if (a2 == 1717924720)
    {
      v12[0] = 0;
      v12[1] = 0;
      CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v12);
    }
    else
    {
      if (a2 != 1718186611) {
        return result;
      }
      CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<std::vector<float>>>>(this + 80);
    }
    CFDictionaryRef v11 = CFDictionaryRef;
    uint64_t result = 0;
    *a5 = v11;
    return result;
  }
  if (a2 == 21)
  {
    if (((unsigned int (*)(uint64_t ***))(*this)[75])(this))
    {
      uint64_t result = 0;
      *(_DWORD *)a5 = *((unsigned __int8 *)this + 552);
      return result;
    }
    return 4294956417;
  }
  if (a2 == 1668179559)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (this[80] != this[81])
    {
      CFArrayRef v9 = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<std::vector<float>>>>(this + 80);
      v12[0] = v9;
      CFDictionaryAddValue(Mutable, @"FIR_Matrices", v9);
      if (v9) {
        CFRelease(v9);
      }
    }
    uint64_t result = 0;
    *a5 = Mutable;
  }
  return result;
}

void sub_1BB711D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<std::vector<float>>>>(uint64_t ***a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  int64x2_t v20 = 0uLL;
  unint64_t v21 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve(&v20, v2);
  uint64_t v4 = *a1;
  for (unsigned int i = a1[1]; v4 != i; v4 += 3)
  {
    memset(v19, 0, sizeof(v19));
    std::vector<std::vector<std::vector<float>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>(v19, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (v4[1] - *v4));
    int v5 = (CFArrayRef *)v20.i64[1];
    if (v20.i64[1] >= v21)
    {
      uint64_t v7 = (v20.i64[1] - v20.i64[0]) >> 3;
      if ((unint64_t)(v7 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = (uint64_t)(v21 - v20.i64[0]) >> 2;
      if (v8 <= v7 + 1) {
        unint64_t v8 = v7 + 1;
      }
      if (v21 - v20.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      uint64_t v25 = &v21;
      if (v9) {
        unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v22 = (int64x2_t *)v9;
      v23.i64[0] = v9 + 8 * v7;
      v23.i64[1] = v23.i64[0];
      unint64_t v24 = v9 + 8 * v10;
      *(void *)v23.i64[0] = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(v19);
      uint64_t v11 = v23.i64[0];
      uint64_t v6 = v23.i64[1] + 8;
      v23.i64[1] += 8;
      uint64_t v12 = (void *)v20.i64[1];
      __int16 v13 = (void *)v20.i64[0];
      if (v20.i64[1] == v20.i64[0])
      {
        int64x2_t v15 = vdupq_n_s64(v20.u64[1]);
      }
      else
      {
        do
        {
          uint64_t v14 = *--v12;
          *(void *)(v11 - 8) = v14;
          v11 -= 8;
          void *v12 = 0;
        }
        while (v12 != v13);
        int64x2_t v15 = v20;
        uint64_t v6 = v23.i64[1];
      }
      v20.i64[0] = v11;
      v20.i64[1] = v6;
      int64x2_t v23 = v15;
      unint64_t v16 = v21;
      unint64_t v21 = v24;
      unint64_t v24 = v16;
      unint64_t v22 = (int64x2_t *)v15.i64[0];
      std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *int v5 = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(v19);
      uint64_t v6 = (uint64_t)(v5 + 1);
    }
    v20.i64[1] = v6;
    unint64_t v22 = (int64x2_t *)v19;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  }
  CFArrayRef v17 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>((uint64_t **)&v20);
  unint64_t v22 = &v20;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return v17;
}

void sub_1BB711F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::vector<applesauce::CF::ArrayRef>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    int64x2_t v15 = result + 2;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(a2);
    uint64_t v7 = *v2;
    uint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      unint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      unint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
        *(void *)uint64_t v6 = 0;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    CADeprecated::CAMutex *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    uint64_t v11 = v2[2];
    v2[2] = &v4[8 * v5];
    uint64_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(uint64_t **a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  int64x2_t v20 = 0uLL;
  unint64_t v21 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve(&v20, v2);
  uint64_t v4 = *a1;
  for (unsigned int i = a1[1]; v4 != i; v4 += 3)
  {
    memset(v19, 0, sizeof(v19));
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v19, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 3));
    uint64_t v5 = (CFArrayRef *)v20.i64[1];
    if (v20.i64[1] >= v21)
    {
      uint64_t v7 = (v20.i64[1] - v20.i64[0]) >> 3;
      if ((unint64_t)(v7 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = (uint64_t)(v21 - v20.i64[0]) >> 2;
      if (v8 <= v7 + 1) {
        unint64_t v8 = v7 + 1;
      }
      if (v21 - v20.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      uint64_t v25 = &v21;
      if (v9) {
        unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v22 = (int64x2_t *)v9;
      v23.i64[0] = v9 + 8 * v7;
      v23.i64[1] = v23.i64[0];
      unint64_t v24 = v9 + 8 * v10;
      *(void *)v23.i64[0] = applesauce::CF::details::make_CFArrayRef<std::vector<float>>(v19);
      uint64_t v11 = v23.i64[0];
      uint64_t v6 = v23.i64[1] + 8;
      v23.i64[1] += 8;
      uint64_t v12 = (void *)v20.i64[1];
      int64x2_t v13 = (void *)v20.i64[0];
      if (v20.i64[1] == v20.i64[0])
      {
        int64x2_t v15 = vdupq_n_s64(v20.u64[1]);
      }
      else
      {
        do
        {
          uint64_t v14 = *--v12;
          *(void *)(v11 - 8) = v14;
          v11 -= 8;
          void *v12 = 0;
        }
        while (v12 != v13);
        int64x2_t v15 = v20;
        uint64_t v6 = v23.i64[1];
      }
      v20.i64[0] = v11;
      v20.i64[1] = v6;
      int64x2_t v23 = v15;
      unint64_t v16 = v21;
      unint64_t v21 = v24;
      unint64_t v24 = v16;
      unint64_t v22 = (int64x2_t *)v15.i64[0];
      std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *uint64_t v5 = applesauce::CF::details::make_CFArrayRef<std::vector<float>>(v19);
      uint64_t v6 = (uint64_t)(v5 + 1);
    }
    v20.i64[1] = v6;
    unint64_t v22 = (int64x2_t *)v19;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  }
  CFArrayRef v17 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>((uint64_t **)&v20);
  unint64_t v22 = &v20;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return v17;
}

void sub_1BB712230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<float>>(uint64_t *a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  int64x2_t v22 = 0uLL;
  unint64_t v23 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve(&v22, v2);
  uint64_t v4 = *a1;
  for (uint64_t i = a1[1]; v4 != i; v4 += 24)
  {
    std::vector<unsigned int> __p = 0;
    int64x2_t v20 = 0;
    uint64_t v21 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
    uint64_t v5 = (CFArrayRef *)v22.i64[1];
    if (v22.i64[1] >= v23)
    {
      uint64_t v7 = (v22.i64[1] - v22.i64[0]) >> 3;
      if ((unint64_t)(v7 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = (uint64_t)(v23 - v22.i64[0]) >> 2;
      if (v8 <= v7 + 1) {
        unint64_t v8 = v7 + 1;
      }
      if (v23 - v22.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      uint64_t v27 = &v23;
      if (v9) {
        unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v9);
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v24 = (int64x2_t *)v9;
      v25.i64[0] = v9 + 8 * v7;
      v25.i64[1] = v25.i64[0];
      unint64_t v26 = v9 + 8 * v10;
      *(void *)v25.i64[0] = applesauce::CF::details::make_CFArrayRef<float>(&__p);
      uint64_t v11 = v25.i64[0];
      uint64_t v6 = v25.i64[1] + 8;
      v25.i64[1] += 8;
      uint64_t v12 = (void *)v22.i64[1];
      int64x2_t v13 = (void *)v22.i64[0];
      if (v22.i64[1] == v22.i64[0])
      {
        int64x2_t v15 = vdupq_n_s64(v22.u64[1]);
      }
      else
      {
        do
        {
          uint64_t v14 = *--v12;
          *(void *)(v11 - 8) = v14;
          v11 -= 8;
          void *v12 = 0;
        }
        while (v12 != v13);
        int64x2_t v15 = v22;
        uint64_t v6 = v25.i64[1];
      }
      v22.i64[0] = v11;
      v22.i64[1] = v6;
      int64x2_t v25 = v15;
      unint64_t v16 = v23;
      unint64_t v23 = v26;
      unint64_t v26 = v16;
      unint64_t v24 = (int64x2_t *)v15.i64[0];
      std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v24);
    }
    else
    {
      *uint64_t v5 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
      uint64_t v6 = (uint64_t)(v5 + 1);
    }
    v22.i64[1] = v6;
    if (__p)
    {
      int64x2_t v20 = __p;
      operator delete(__p);
    }
  }
  CFArrayRef v17 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>((uint64_t **)&v22);
  unint64_t v24 = &v22;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  return v17;
}

void sub_1BB712444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  std::vector<unsigned int> __p = &a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t AUFIREngine::GetPropertyInfo(AUFIREngine *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  unsigned int v10 = 8;
  uint64_t result = 4294956417;
  if (a2 > 1717924719)
  {
    if (a2 != 1717924720)
    {
      int v11 = 1718186611;
LABEL_8:
      if (a2 != v11) {
        return result;
      }
    }
  }
  else
  {
    if (a2 != 21)
    {
      int v11 = 1668179559;
      goto LABEL_8;
    }
    if (!(*(unsigned int (**)(AUFIREngine *))(*(void *)this + 600))(this)) {
      return 4294956417;
    }
    unsigned int v10 = 4;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = v10;
  return result;
}

uint64_t AUFIREngine::Reset(AUFIREngine *this)
{
  uint64_t v1 = *((void *)this + 83);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 152);
    uint64_t v3 = *(void *)(v1 + 160);
    while (v2 != v3)
    {
      vDSP_vclr(*(float **)v2, 1, (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 2);
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t v5 = *(void *)(v2 + 32);
      while (v4 != v5)
      {
        uint64_t v6 = *(void **)(v4 + 16);
        uint64_t v7 = *(void *)(v4 + 24) - (void)v6;
        if (v7 >= 1) {
          bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
        }
        v4 += 32;
      }
      *(_DWORD *)(v2 + 48) = 0;
      v2 += 56;
    }
  }
  return 0;
}

uint64_t AUFIREngine::Initialize(void ***this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AUJBase::Initialize((AUJBase *)this);
  if (!v2)
  {
    for (unsigned int i = 0; ; unsigned int i = v11 - 2999999)
    {
      int v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0) + 108);
      if (i >= *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0) + 108) * v6) {
        break;
      }
      uint64_t v8 = i + 1000000;
      AUFIREngine::AddParameter((AUFIREngine *)this, v8, v7);
      uint64_t v9 = (v8 + 1000000);
      AUFIREngine::AddParameter((AUFIREngine *)this, v9, v10);
      uint64_t v11 = (v9 + 1000000);
      AUFIREngine::AddParameter((AUFIREngine *)this, v11, v12);
    }
    if (!*((unsigned char *)this + 633))
    {
      unint64_t v13 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0) + 108);
      unint64_t v14 = *(unsigned int *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0) + 108);
      std::vector<float>::vector(&__p, 1uLL);
      std::vector<std::vector<float>>::vector(v33, v13, (uint64_t)&__p);
      if (__p)
      {
        *(void *)&long long v32 = __p;
        operator delete(__p);
      }
      std::vector<std::vector<std::vector<float>>>::vector(&__p, v14, v33);
      int64x2_t v15 = (uint64_t *)__p;
      if (v14)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if (v13)
          {
            uint64_t v17 = 0;
            uint64_t v18 = (float **)v15[3 * j];
            do
            {
              if (j == v17) {
                float v19 = 1.0;
              }
              else {
                float v19 = 0.0;
              }
              int64x2_t v20 = *v18;
              v18 += 3;
              *int64x2_t v20 = v19;
              ++v17;
            }
            while (v13 != v17);
          }
        }
        int64x2_t v15 = (uint64_t *)__p;
      }
      long long v39 = v15;
      long long v40 = v32;
      long long v32 = 0uLL;
      std::vector<unsigned int> __p = 0;
      unint64_t v30 = 0;
      long long v29 = 0uLL;
      v33[3] = (uint64_t)&v29;
      char v34 = 0;
      uint64_t v21 = operator new(0x18uLL);
      *(void *)&long long v29 = v21;
      *((void *)&v29 + 1) = v21;
      unint64_t v30 = (void **)(v21 + 3);
      uint64_t v35 = v21;
      long long v36 = v21;
      *(void *)AudioStreamBasicDescription buf = &v30;
      *(void *)&uint8_t buf[8] = &v35;
      *(void *)&buf[16] = &v36;
      char v38 = 0;
      v21[1] = 0;
      v21[2] = 0;
      void *v21 = 0;
      std::vector<std::vector<std::vector<float>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<float>>*,std::vector<std::vector<float>>*>(v21, v39, (uint64_t *)v40, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v39) >> 3));
      v36 += 3;
      int64x2_t v22 = v36;
      char v38 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<float>>>>,std::vector<std::vector<std::vector<float>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
      *((void *)&v29 + 1) = v22;
      *(void *)AudioStreamBasicDescription buf = &v39;
      std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)AudioStreamBasicDescription buf = &__p;
      std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)AudioStreamBasicDescription buf = v33;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      std::vector<std::vector<std::vector<std::vector<float>>>>::__vdeallocate(this + 80);
      *((_OWORD *)this + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v29;
      this[82] = v30;
      unint64_t v30 = 0;
      long long v29 = 0uLL;
      *(void *)AudioStreamBasicDescription buf = &v29;
      std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    AUFIREngine::ValidateConfiguration((uint64_t)this);
    if (this[81] != this[80])
    {
      unsigned int v23 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 10), 0) + 108);
      unsigned int v24 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0) + 108);
      unsigned int v25 = *((_DWORD *)this + 84);
      unint64_t v26 = operator new(0xAC0uLL, (std::align_val_t)0x40uLL);
      AUFIREngineKernel::AUFIREngineKernel((uint64_t)v26, v23, v24, v25, (uint64_t *)this + 80);
    }
    __assert_rtn("Initialize", "AUFIREngine.mm", 106, "mFIRMatrix.size()");
  }
  uint64_t v3 = v2;
  if (AUJBase::AUJBaseLogScope(void)::once != -1) {
    dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
  }
  if (AUJBase::AUJBaseLogScope(void)::scope)
  {
    uint64_t v4 = *(id *)AUJBase::AUJBaseLogScope(void)::scope;
    if (!v4) {
      return v3;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v27 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUFIREngine.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 138;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v3;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d AUJBase init failed: %d\n", buf, 0x18u);
  }

  return v3;
}

void sub_1BB712AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,long long buf,__int16 a24,__int16 a25,int a26,int a27,int a28)
{
  if (a2)
  {
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<float>>>>,std::vector<std::vector<std::vector<float>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&buf);
    std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&a19);
    *(void *)&AudioStreamBasicDescription buf = v29 - 112;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    *(void *)&AudioStreamBasicDescription buf = &__p;
    std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    *(void *)&AudioStreamBasicDescription buf = &a16;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    long long v32 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v33 = v32;
      if (AUJBase::AUJBaseLogScope(void)::once != -1) {
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
      }
      char v34 = CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
      uint64_t v35 = v34;
      if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        int v36 = v33[66];
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "AUFIREngine.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 119;
        a25 = 2080;
        *(void *)(v28 + 2std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v33 + 2;
        LOWORD(a28) = 1024;
        *(_DWORD *)(v28 + 3std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v36;
        _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d FIREngine Exception: %s (Err=%d)\n", (uint8_t *)&buf, 0x22u);
      }
    }
    else
    {
      if (AUJBase::AUJBaseLogScope(void)::once != -1) {
        dispatch_once(&AUJBase::AUJBaseLogScope(void)::once, &__block_literal_global_32178);
      }
      id v37 = CALog::LogObjIfEnabled((id *)AUJBase::AUJBaseLogScope(void)::scope);
      uint64_t v35 = v37;
      if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "AUFIREngine.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 134;
        _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Threw an unknown exception\n", (uint8_t *)&buf, 0x12u);
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB712A2CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUFIREngine::AddParameter(AUFIREngine *this, uint64_t a2, float a3)
{
  uint64_t result = (*(uint64_t (**)(AUFIREngine *, uint64_t, void, void, float))(*(void *)this + 576))(this, a2, 0, 0, a3);
  if (!result)
  {
    float v7 = *(uint64_t (**)(AUFIREngine *, uint64_t, void, void, void, __n128))(*(void *)this + 152);
    v6.n128_u64[0] = 0;
    return v7(this, a2, 0, 0, 0, v6);
  }
  return result;
}

void AUFIREngine::~AUFIREngine(AUFIREngine *this)
{
  AUFIREngine::~AUFIREngine(this);

  JUMPOUT(0x1C185D360);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t vars8;

  *(void *)this = &unk_1F14C0360;
  uint64_t v2 = (void *)*((void *)this + 355);
  if (v2)
  {
    *((void *)this + 356) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 352);
  if (v3)
  {
    *((void *)this + 353) = v3;
    operator delete(v3);
  }
  *((void *)this + 88) = &unk_1F14C0600;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue((uint64_t)this + 768);
  std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100]((AUFIREngineKernel **)this + 83, 0);
  float v7 = (void **)((char *)this + 640);
  std::vector<std::vector<std::vector<std::vector<float>>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(void *)this = &unk_1F14C2A10;
  uint64_t v4 = (void *)*((void *)this + 76);
  if (v4)
  {
    *((void *)this + 77) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 73);
  if (v5)
  {
    *((void *)this + 74) = v5;
    operator delete(v5);
  }
  __n128 v6 = (void *)*((void *)this + 70);
  if (v6)
  {
    *((void *)this + 71) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 551) < 0) {
    operator delete(*((void **)this + 66));
  }

  ausdk::AUBase::~AUBase(this);
}

uint64_t ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  *(void *)a1 = &unk_1F14C0620;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::drain_trash(a1);
  uint64_t v3 = 0;
  while (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v3))
  {
    if (v3)
    {
      AUFIREngineKernel::~AUFIREngineKernel(v3);
      MEMORY[0x1C185D360]();
    }
  }
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 1024);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 64);
  return a1;
}

void ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue(a1);

  JUMPOUT(0x1C185D360);
}

void ca::concurrent::deferred_deletion_stash<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14C0600;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));

  JUMPOUT(0x1C185D360);
}

void *ca::concurrent::deferred_deletion_stash<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14C0600;
  ca::concurrent::deferred_deletion_queue<AUFIREngineKernel,10ul,std::default_delete<AUFIREngineKernel>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void VoiceProcessorV5::SetupECApplicator(VoiceProcessorV5 *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (ECApplicator **)*((void *)this + 2116);
  uint64_t v3 = (ECApplicator **)*((void *)this + 2115);
  while (v2 != v3)
    std::unique_ptr<ECApplicator>::reset[abi:ne180100](--v2);
  *((void *)this + 2116) = v3;
  operator new();
}

void sub_1BB7138D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::unique_ptr<ECApplicator>::reset[abi:ne180100]((ECApplicator **)va);
  _Unwind_Resume(a1);
}

void VoiceProcessorV5::ApplyCustomTelephonyDSPOverrides(VoiceProcessorV5 *this, CFDictionaryRef theDict, int a3)
{
  if (theDict && CFDictionaryGetCount(theDict))
  {
    if (a3)
    {
      if (CFDictionaryContainsKey(theDict, @"noise suppression"))
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"noise suppression");
        if (Value)
        {
          CFNumberRef v7 = Value;
          CFRetain(Value);
          float valuePtr = 0.0;
          CFNumberGetValue(v7, kCFNumberFloat32Type, &valuePtr);
          CFRelease(v7);
          uint64_t v8 = *((void *)this + 583);
          *((void *)this + 584) |= 0x20uLL;
          *((void *)this + 583) = v8 & 0xFEBFFFFFFFFFFFFFLL | 0x40000000000000;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 5992, 0, valuePtr);
        }
      }
      if (CFDictionaryContainsKey(theDict, @"agc"))
      {
        CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"agc");
        if (v9)
        {
          CFNumberRef v10 = v9;
          CFRetain(v9);
          float valuePtr = 0.0;
          CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
          CFRelease(v10);
          uint64_t v11 = *((void *)this + 584);
          unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFBLL;
          uint64_t v13 = v11 | 0x24;
          if (LODWORD(valuePtr) == 1) {
            unint64_t v14 = v13;
          }
          else {
            unint64_t v14 = v12;
          }
          *((void *)this + 584) = v14;
        }
      }
    }
    if (CFDictionaryContainsKey(theDict, @"gain"))
    {
      CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"gain");
      if (v15)
      {
        CFNumberRef v16 = v15;
        CFRetain(v15);
        float valuePtr = 0.0;
        CFNumberGetValue(v16, kCFNumberFloat32Type, &valuePtr);
        CFRelease(v16);
        if (a3)
        {
          *(int8x16_t *)((char *)this + 4664) = vorrq_s8(*(int8x16_t *)((char *)this + 4664), (int8x16_t)xmmword_1BB879C80);
          uint64_t v17 = (char *)this + 7024;
          float v18 = valuePtr;
          int v19 = 1;
        }
        else
        {
          *((void *)this + 1112) |= 0x800800000000000uLL;
          AUPropAndParamHelper::AddItemToAUParamList((uint64_t)this + 10920, 0, valuePtr);
          float v18 = valuePtr;
          uint64_t v17 = (char *)this + 10920;
          int v19 = 8;
        }
        AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v17, v19, v18);
      }
    }
    if (CFDictionaryContainsKey(theDict, @"eq"))
    {
      CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(theDict, @"eq");
      if (v20)
      {
        CFArrayRef v21 = v20;
        CFRetain(v20);
        unsigned int Count = CFArrayGetCount(v21);
        BOOL v23 = a3 == 0;
        if (a3) {
          unsigned int v24 = (char *)this + 6232;
        }
        else {
          unsigned int v24 = (char *)this + 9704;
        }
        uint64_t v25 = 8896;
        if (!v23) {
          uint64_t v25 = 4672;
        }
        uint64_t v26 = 33;
        if (v23) {
          uint64_t v26 = 0x800200000000;
        }
        *(void *)((char *)this + v25) |= v26;
        if (Count >= 0xA) {
          uint64_t v27 = 10;
        }
        else {
          uint64_t v27 = Count;
        }
        if (v27)
        {
          for (CFIndex i = 0; i != v27; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, i);
            if (ValueAtIndex)
            {
              CFDictionaryRef v30 = ValueAtIndex;
              CFRetain(ValueAtIndex);
              if (CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterType")
                && CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterFrequency"))
              {
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 1000, 0.0);
                CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v30, @"AUNBandEQ_FilterType");
                if (v31)
                {
                  CFNumberRef v32 = v31;
                  CFRetain(v31);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
                  CFRelease(v32);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 2000, (float)LODWORD(valuePtr));
                }
                CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(v30, @"AUNBandEQ_FilterFrequency");
                if (v33)
                {
                  CFNumberRef v34 = v33;
                  CFRetain(v33);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v34, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v34);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 3000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterGain"))
              {
                CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(v30, @"AUNBandEQ_FilterGain");
                if (v35)
                {
                  CFNumberRef v36 = v35;
                  CFRetain(v35);
                  float valuePtr = 0.0;
                  CFNumberGetValue(v36, kCFNumberFloat32Type, &valuePtr);
                  CFRelease(v36);
                  AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 4000, valuePtr);
                }
              }
              if (CFDictionaryContainsKey(v30, @"AUNBandEQ_FilterBandwidth"))
              {
                id v37 = CFDictionaryGetValue(v30, @"AUNBandEQ_FilterBandwidth");
                CFRetain(v37);
                float valuePtr = 0.0;
                CFNumberGetValue((CFNumberRef)v37, kCFNumberFloat32Type, &valuePtr);
                CFRelease(v37);
                AUPropAndParamHelper::AddItemToAUParamList((uint64_t)v24, i + 5000, valuePtr);
              }
              CFRelease(v30);
            }
          }
        }
        CFRelease(v21);
      }
    }
  }
}

void VoiceProcessorV5::SetupDownlinkBasicAUChain(VoiceProcessorV5 *this)
{
  *((void *)this + 1112) = *((void *)this + 1112) & 0xEFFF7FFFFFFFFFFFLL | 0x800000000000;
}

uint64_t VoiceProcessorV5::SetupUplink_SCLP_PMWF_BeamIt(uint64_t this, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)(this + 4664) = *(void *)(this + 4664) & 0xFBFFFFD3FFEBFAFFLL | 0x2C00140500;
    *(_DWORD *)(this + 12456) = 9;
  }
  return this;
}

uint64_t VoiceProcessorV5::SetupUplink_MS(uint64_t this, unsigned int a2)
{
  if (a2 != 1)
  {
    uint64_t v2 = *(void *)(this + 4664);
    uint64_t v3 = 1074004255;
    if (a2 == 3) {
      uint64_t v3 = 1074004239;
    }
    uint64_t v4 = v2 | v3;
    if (a2 < 3) {
      uint64_t v4 = v2 | 0x40040107;
    }
    if (!a2) {
      uint64_t v4 = v2 | 0x40040101;
    }
    *(void *)(this + 4664) = v4 & 0xFBFFFFBFBFDFF7FFLL | 0x400004000200800;
  }
  return this;
}

uint64_t VoiceProcessorV5::SetupUplink_BF_MS(uint64_t this, unsigned int a2, char a3)
{
  if (a2 < 2)
  {
    if (a2 && (a3 & 1) == 0)
    {
      uint64_t v4 = *(void *)(this + 4664) | 2;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(this + 4664);
    *(void *)(this + 4664) = v3 | 0xC0040101;
    if ((a3 & 1) == 0)
    {
      *(void *)(this + 4664) = v3 | 0xC0040107;
      if (a2 != 2)
      {
        *(void *)(this + 4664) = v3 | 0xC004010FLL;
        if (a2 >= 4)
        {
          uint64_t v4 = v3 | 0xC004011FLL;
LABEL_9:
          *(void *)(this + 4664) = v4;
        }
      }
    }
  }
  return this;
}

uint64_t VoiceProcessorV5::SetupUplink_MMNS(uint64_t this, unsigned int a2)
{
  if (a2 != 1)
  {
    unint64_t v2 = *(void *)(this + 4664) & 0xFABFAFFFFFFBFEFFLL;
    *(void *)(this + 4664) = v2 + 0x100500000040100;
    if (a2)
    {
      *(void *)(this + 4664) = v2 | 0x100500000040106;
      if (a2 >= 3)
      {
        *(void *)(this + 4664) = v2 | 0x10050000004010ELL;
        if (a2 != 3) {
          *(void *)(this + 4664) = v2 | 0x1005003001C051ELL;
        }
      }
    }
  }
  return this;
}

void VoiceProcessorV5::SetupUplinkLiteAUChain(VoiceProcessorV5 *this)
{
  unint64_t v2 = (unint64_t *)((char *)this + 4664);
  CFNumberRef v7 = (char *)this + 4664;
  int v8 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,72ul>>((uint64_t)&v7);
  uint64_t v3 = *((void *)this + 583);
  *((void *)this + 583) = v3 | 0x8000080000020080;
  uint64_t v4 = *((void *)this + 584);
  *((void *)this + 584) = v4 | 0x21;
  if (*((unsigned char *)this + 1676)) {
    unint64_t *v2 = v3 | 0xA000080000020080;
  }
  int v5 = *((_DWORD *)this + 571);
  if (v5 == 1 || v5 == -1) {
    *((void *)this + 584) = v4 | 0x25;
  }
}

void VoiceProcessorV5::SetupUplinkBasicAUChain(VoiceProcessorV5 *this)
{
  unint64_t v2 = (unint64_t *)((char *)this + 4664);
  CFNumberRef v7 = (char *)this + 4664;
  int v8 = 0;
  std::__fill_n[abi:ne180100]<false,std::__bitset<2ul,72ul>>((uint64_t)&v7);
  uint64_t v3 = *((void *)this + 583);
  uint64_t v4 = *((void *)this + 584);
  *((void *)this + 583) = v3 | 0x8440080000020080;
  *((void *)this + 584) = v4 | 0x23;
  if (*((unsigned char *)this + 1676)) {
    unint64_t *v2 = v3 | 0xA440080000020080;
  }
  int v5 = *((_DWORD *)this + 571);
  if (v5 == 1 || v5 == -1) {
    *((void *)this + 584) = v4 | 0x27;
  }
}

uint64_t VoiceProcessorV5::Initialize(VoiceProcessorV5 *this)
{
  *((_DWORD *)this + 10std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
  int v2 = *((_DWORD *)this + 153);
  if (v2)
  {
    int v3 = 0;
    do
    {
      int v3 = (2 * v3) | 1;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 10std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v3;
  }
  uint64_t result = VoiceProcessorV2::Initialize(this);
  if (!result) {
    VoiceProcessorV4::InitializeV4Specifics(this);
  }
  return result;
}

void VoiceProcessorV5::InitializeV5Specifics(VoiceProcessorV5 *this)
{
  myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 824), 2 * *((_DWORD *)this + 127), (AudioBufferList **)this + 2148);
  int v2 = (VPTimeFreqConverter *)*((void *)this + 2147);
  if (v2)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v2);
    MEMORY[0x1C185D370]();
  }
  int v3 = (VPTimeFreqConverter *)*((void *)this + 2149);
  if (v3)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v3);
    MEMORY[0x1C185D370]();
  }
  VPTimeFreqConverter_Create();
}

uint64_t VoiceProcessorV5::GetVersion(VoiceProcessorV5 *this)
{
  return 5;
}

void VoiceProcessorV5::~VoiceProcessorV5(AudioBufferList **this)
{
  VoiceProcessorV5::~VoiceProcessorV5(this);

  JUMPOUT(0x1C185D370);
}

{
  VPTimeFreqConverter *v2;
  VPTimeFreqConverter *v3;
  uint64_t vars8;

  *this = (AudioBufferList *)&unk_1F14C0680;
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::invalidate((uint64_t)(this + 2087));
  myFreeABLDynamic(this + 2148);
  int v2 = (VPTimeFreqConverter *)this[2147];
  if (v2)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v2);
    MEMORY[0x1C185D370]();
    this[2147] = 0;
  }
  int v3 = (VPTimeFreqConverter *)this[2149];
  if (v3)
  {
    VPTimeFreqConverter::~VPTimeFreqConverter(v3);
    MEMORY[0x1C185D370]();
    this[2149] = 0;
  }

  VoiceProcessorV4::~VoiceProcessorV4((VoiceProcessorV4 *)this);
}

void vp::v5::create(vp::v5 *this, const vp::Context *a2)
{
}

void sub_1BB71435C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10F3C40B3D63CEBLL);
  _Unwind_Resume(a1);
}

void AUSpeechLevelEstimator::UpdateKernParams(AUSpeechLevelEstimator *this)
{
}

void AUSpeechLevelEstimator::RefreshKernelParamValue(uint64_t a1, unsigned int a2)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  float Parameter = ausdk::AUElement::GetParameter(Element, a2);
  if (a2 == 7)
  {
    __n128 v6 = *(float **)(a1 + 608);
    if (v6)
    {
      float v7 = 5.0;
      if (Parameter <= 5.0) {
        float v7 = Parameter;
      }
      BOOL v8 = Parameter < 0.0;
      float v9 = 0.0;
      if (!v8) {
        float v9 = v7;
      }
      v6[70] = expf(-1.0 / (float)(*v6 * v9));
    }
  }
}

void AUSpeechLevelEstimator::UpdateDynamicParams(AUSpeechLevelEstimator *this)
{
  int v2 = (AUSpeechLevelEstimator *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeechLevelEstimator *)((char *)this + 32), 0);
  if (ausdk::AUElement::GetParameter(Element, 0xAu) == 0.0) {
    float v4 = 0.0;
  }
  else {
    float v4 = 1.0;
  }
  *((float *)this + 14std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v4;
  int v5 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  if (ausdk::AUElement::GetParameter(v5, 0xBu) == 0.0) {
    float v6 = 0.0;
  }
  else {
    float v6 = 1.0;
  }
  *((float *)this + 142) = v6;
}

float AUSpeechLevelEstimator::UpdateStaticParams(AUSpeechLevelEstimator *this)
{
  int v2 = (AUSpeechLevelEstimator *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUSpeechLevelEstimator *)((char *)this + 32), 0);
  ausdk::AUElement::GetParameter(Element, 0);
  *((_DWORD *)this + 138) = 0;
  float v4 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float Parameter = ausdk::AUElement::GetParameter(v4, 1u);
  float v6 = Parameter / 10.0;
  if (Parameter > 200.0) {
    float v6 = 20.0;
  }
  BOOL v7 = Parameter < -100.0;
  float v8 = -10.0;
  if (!v7) {
    float v8 = v6;
  }
  *((float *)this + 182) = __exp10f(v8);
  float v9 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v10 = ausdk::AUElement::GetParameter(v9, 6u);
  float v11 = 5.0;
  if (v10 <= 5.0) {
    float v11 = v10;
  }
  BOOL v7 = v10 < 0.0;
  float v12 = 0.0;
  if (!v7) {
    float v12 = v11;
  }
  *((float *)this + 133) = expf(-1.0 / (float)(*((float *)this + 132) * v12));
  uint64_t v13 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 556) = ausdk::AUElement::GetParameter(v13, 2u) != 0.0;
  unint64_t v14 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 557) = ausdk::AUElement::GetParameter(v14, 3u) != 0.0;
  CFNumberRef v15 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 558) = ausdk::AUElement::GetParameter(v15, 4u) != 0.0;
  CFNumberRef v16 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  *((unsigned char *)this + 559) = ausdk::AUElement::GetParameter(v16, 5u) != 0.0;
  uint64_t v17 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v18 = ausdk::AUElement::GetParameter(v17, 8u);
  int v19 = (float *)((char *)this + 564);
  *((float *)this + 141) = v18;
  if (v18 > 1.0) {
    int v19 = &AUSpeechLevelEstimator::kVAD_Max;
  }
  if (v18 < 0.0) {
    int v19 = &AUSpeechLevelEstimator::kVAD_Min;
  }
  *((float *)this + 141) = *v19;
  CFArrayRef v20 = (ausdk::AUElement *)ausdk::AUScope::GetElement(v2, 0);
  float v21 = ausdk::AUElement::GetParameter(v20, 9u);
  int64x2_t v22 = (float *)((char *)this + 572);
  *((float *)this + 143) = v21;
  if (v21 > 200.0) {
    int64x2_t v22 = (float *)&AUSpeechLevelEstimator::kEchoLevel_dB_Max;
  }
  if (v21 < -100.0) {
    int64x2_t v22 = (float *)&AUSpeechLevelEstimator::kEchoLevel_dB_Min;
  }
  float result = *v22;
  *((float *)this + 143) = *v22;
  return result;
}

uint64_t AUSpeechLevelEstimator::Version(AUSpeechLevelEstimator *this)
{
  return 67072;
}

BOOL AUSpeechLevelEstimator::ValidFormat(AUSpeechLevelEstimator *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5 = (int)a2;
  BOOL result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if (result) {
    BOOL result = (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  }
  if (v5 == 2)
  {
    AudioFormatID mFormatID = a4->mFormatID;
    UInt32 mBytesPerFrame = a4->mBytesPerFrame;
    UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
    if (mBytesPerFrame == 8 && mFormatID == 1718773105 && mChannelsPerFrame == 1) {
      return 1;
    }
    return mBytesPerFrame == 4 && mFormatID == 1819304813 && mChannelsPerFrame == 1;
  }
  if (v5 == 1)
  {
    BOOL result = 0;
    if (a4->mBytesPerFrame == 8 && a4->mFormatID == 1718773105) {
      return a4->mChannelsPerFrame == 1;
    }
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::SupportedNumChannels(AUSpeechLevelEstimator *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUSpeechLevelEstimator::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  }
  return 1;
}

BOOL AUSpeechLevelEstimator::StreamFormatWritable(AUSpeechLevelEstimator *this)
{
  return *((unsigned char *)this + 17) == 0;
}

uint64_t AUSpeechLevelEstimator::SupportsTail(AUSpeechLevelEstimator *this)
{
  return 1;
}

double AUSpeechLevelEstimator::GetTailTime(AUSpeechLevelEstimator *this)
{
  return 0.0;
}

double AUSpeechLevelEstimator::GetLatency(AUSpeechLevelEstimator *this)
{
  return 0.0;
}

uint64_t AUSpeechLevelEstimator::GetParameterValueStrings(AUSpeechLevelEstimator *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result = 0;
  v7[1] = *(const void **)MEMORY[0x1E4F143B8];
  if (!a2 && a4)
  {
    if (a3)
    {
      return 4294956417;
    }
    else
    {
      v7[0] = @"Basic";
      CFArrayRef v6 = CFArrayCreate(0, v7, 1, 0);
      uint64_t result = 0;
      *a4 = v6;
    }
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!v3)
  {
    (*((void (**)(OpaqueAudioComponentInstance **))*this + 73))(this);
    (*((void (**)(OpaqueAudioComponentInstance **))*this + 74))(this);
    (*((void (**)(OpaqueAudioComponentInstance **))*this + 75))(this);
  }
  return v3;
}

uint64_t AUSpeechLevelEstimator::GetParameterInfo(AUSpeechLevelEstimator *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a2) {
    return 4294956430;
  }
  buffer->unitName = 0;
  buffer->AudioUnitParameterOptions flags = 0x40000000;
  if (a3 > 0xF) {
    return 4294956418;
  }
  CFStringRef v6 = off_1E6242FE8[a3];
  AudioUnitParameterUnit v7 = dword_1BB8D2B60[a3];
  AudioUnitParameterValue v8 = flt_1BB8D2BA0[a3];
  AudioUnitParameterValue v9 = flt_1BB8D2BE0[a3];
  AudioUnitParameterValue v10 = flt_1BB8D2C20[a3];
  int v11 = dword_1BB8D2C60[a3];
  buffer->cfNameString = v6;
  buffer->AudioUnitParameterOptions flags = 1207959552;
  CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
  uint64_t result = 0;
  buffer->unit = v7;
  buffer->minCFNumberRef Value = v8;
  buffer->maxCFNumberRef Value = v9;
  buffer->defaultCFNumberRef Value = v10;
  buffer->flags |= v11;
  return result;
}

uint64_t AUSpeechLevelEstimator::GetParameterList(AUSpeechLevelEstimator *this, int a2, unsigned int *a3, unsigned int *a4)
{
  *a4 = 0;
  if (a2) {
    return 4294956418;
  }
  uint64_t result = 0;
  if (a3)
  {
    *a3 = 0;
    ++*a4;
    a3[1] = 1;
    ++*a4;
    a3[2] = 2;
    ++*a4;
    a3[3] = 3;
    ++*a4;
    a3[4] = 4;
    ++*a4;
    a3[5] = 5;
    ++*a4;
    a3[6] = 6;
    ++*a4;
    a3[7] = 7;
    ++*a4;
    a3[8] = 8;
    ++*a4;
    a3[9] = 9;
    ++*a4;
    a3[10] = 10;
    ++*a4;
    a3[11] = 11;
    ++*a4;
    a3[12] = 12;
    ++*a4;
    a3[13] = 13;
    ++*a4;
    a3[14] = 14;
    ++*a4;
    a3[15] = 15;
    ++*a4;
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::Render(AUSpeechLevelEstimator *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = 0;
  AudioUnitParameterValue v8 = (AUSpeechLevelEstimator *)((char *)this + 80);
  uint64_t Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 80), 0);
  uint64_t result = ausdk::AUInputElement::PullInput(Element, &v13, a3, 0, a4);
  if (!result)
  {
    uint64_t v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    v15[0] = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    uint64_t v12 = ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 128), 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUSpeechLevelEstimator *, unsigned int *, uint64_t, uint64_t, void *, uint64_t, uint64_t *))(*(void *)this + 184))(this, a2, a4, 1, v15, 1, &BufferList);
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::ProcessMultipleBufferLists(AUSpeechLevelEstimator *this, unsigned int *a2, int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  if (*((_DWORD *)this + 136) != a3) {
    return 4294956422;
  }
  uint64_t result = 4294956428;
  if (a4 == 1 && a6 == 1)
  {
    if (*((unsigned char *)this + 540) && 2 * a3) {
      memmove((*a7)->mBuffers[0].mData, (*a5)->mBuffers[0].mData, 4 * (2 * a3));
    }
    int v11 = *((_DWORD *)this + 144);
    if (v11 != *((_DWORD *)this + 145))
    {
      (*(void (**)(AUSpeechLevelEstimator *, unsigned int *))(*(void *)this + 584))(this, a2);
      *((_DWORD *)this + 145) = v11;
    }
    int v12 = *((_DWORD *)this + 146);
    if (v12 != *((_DWORD *)this + 147))
    {
      (*(void (**)(AUSpeechLevelEstimator *))(*(void *)this + 592))(this);
      *((_DWORD *)this + 147) = v12;
    }
    int v13 = *((_DWORD *)this + 148);
    if (v13 != *((_DWORD *)this + 149))
    {
      (*(void (**)(AUSpeechLevelEstimator *))(*(void *)this + 600))(this);
      *((_DWORD *)this + 149) = v13;
    }
    if (*((_DWORD *)this + 134))
    {
      if (!*((unsigned char *)this + 601))
      {
        unint64_t v14 = (uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 2;
        LODWORD(__A.realp) = 0;
        std::vector<float>::assign((char **)this + 82, v14, &__A);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, double))(*(void *)this
                                                                                                  + 152))(this, 12, 0, 0, 0, 0.0);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, double))(*(void *)this
                                                                                                  + 152))(this, 13, 0, 0, 0, 0.0);
        *((unsigned char *)this + 601) = 1;
      }
      if (!*((unsigned char *)this + 600))
      {
        unint64_t v15 = (uint64_t)(*((void *)this + 80) - *((void *)this + 79)) >> 2;
        LODWORD(__A.realp) = 0;
        std::vector<float>::assign((char **)this + 79, v15, &__A);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, double))(*(void *)this
                                                                                                  + 152))(this, 14, 0, 0, 0, 0.0);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, double))(*(void *)this
                                                                                                  + 152))(this, 15, 0, 0, 0, 0.0);
        *((unsigned char *)this + 60std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      }
      if (!*((unsigned char *)this + 540)) {
        vDSP_vclr((float *)(*a7)->mBuffers[0].mData, 1, *((unsigned int *)this + 136));
      }
      return 0;
    }
    vDSP_Length v16 = *((unsigned int *)this + 136);
    __A.realp = (float *)(*a5)->mBuffers[0].mData;
    __A.imagp = &__A.realp[v16];
    vDSP_zvmags(&__A, 1, *((float **)this + 88), 1, v16);
    **((float **)this + 88) = *__A.realp * *__A.realp;
    *(float *)(*((void *)this + 89) - 4) = *__A.imagp * *__A.imagp;
    uint64_t v17 = *((void *)this + 76);
    if (v17)
    {
      float v18 = (const void **)SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>::process<std::vector<float>>(*((void *)this + 76));
      if (*((float *)this + 182) == 1.0) {
        memcpy(*((void **)this + 79), *v18, 4 * *((unsigned int *)this + 137));
      }
      else {
        vDSP_vsmul((const float *)*v18, 1, (const float *)this + 182, *((float **)this + 79), 1, (uint64_t)(*((void *)this + 80) - *((void *)this + 79)) >> 2);
      }
      *((unsigned char *)this + 60std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
    }
    else if (!*((unsigned char *)this + 600))
    {
      vDSP_vclr(*((float **)this + 79), 1, (uint64_t)(*((void *)this + 80) - *((void *)this + 79)) >> 2);
    }
    if (*((unsigned char *)this + 558)) {
      BOOL v19 = *((float *)this + 140) > *((float *)this + 141);
    }
    else {
      BOOL v19 = 1;
    }
    if (*((unsigned char *)this + 559) && v19)
    {
      if (*((float *)this + 142) < *((float *)this + 143)) {
        goto LABEL_34;
      }
    }
    else
    {
      if (*((unsigned char *)this + 559)) {
        BOOL v19 = 0;
      }
      if (v19)
      {
LABEL_34:
        if (*((float *)this + 182) == 1.0) {
          memcpy(*((void **)this + 85), *((const void **)this + 88), 4 * *((unsigned int *)this + 137));
        }
        else {
          vDSP_vsmul(*((const float **)this + 88), 1, (const float *)this + 182, *((float **)this + 85), 1, (uint64_t)(*((void *)this + 89) - *((void *)this + 88)) >> 2);
        }
        if (*((unsigned char *)this + 557))
        {
          vDSP_vsub(*((const float **)this + 79), 1, *((const float **)this + 85), 1, *((float **)this + 85), 1, *((unsigned int *)this + 137));
          float __B = 0.0;
          vDSP_vthr(*((const float **)this + 85), 1, &__B, *((float **)this + 85), 1, (uint64_t)(*((void *)this + 86) - *((void *)this + 85)) >> 2);
        }
        AddMultiplyRVectorRScalarMultiplyRVectorRScalar<std::vector<float>,std::vector<float>,std::vector<float>>((uint64_t)this + 656, *((const float **)this + 82), *((void *)this + 83), *((const float **)this + 85), *((void *)this + 86), *((float *)this + 133), 1.0 - *((float *)this + 133));
        *((unsigned char *)this + 601) = 0;
        char v20 = 1;
        if (!v17) {
          goto LABEL_45;
        }
        goto LABEL_40;
      }
    }
    char v20 = 0;
    if (!v17)
    {
LABEL_45:
      if (!*((unsigned char *)this + 600))
      {
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, double))(*(void *)this
                                                                                                  + 152))(this, 14, 0, 0, 0, 0.0);
        (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, double))(*(void *)this
                                                                                                  + 152))(this, 15, 0, 0, 0, 0.0);
        *((unsigned char *)this + 60std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      }
      goto LABEL_47;
    }
LABEL_40:
    float v21 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((void *)this + 77), *((const float **)this + 79), *((void *)this + 80));
    (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 14, 0, 0, 0, v21);
    float v22 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((void *)this + 78), *((const float **)this + 79), *((void *)this + 80));
    (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 15, 0, 0, 0, v22);
LABEL_47:
    if ((v20 & 1) != 0 || !*((unsigned char *)this + 601))
    {
      float v23 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((void *)this + 77), *((const float **)this + 82), *((void *)this + 83));
      (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 12, 0, 0, 0, v23);
      float v24 = SPLMeter<float,AWeight>::process<std::vector<float>>(*((void *)this + 78), *((const float **)this + 82), *((void *)this + 83));
      (*(void (**)(AUSpeechLevelEstimator *, uint64_t, void, void, void, float))(*(void *)this + 152))(this, 13, 0, 0, 0, v24);
      *((unsigned char *)this + 601) = 1;
    }
    if (!*((unsigned char *)this + 540)) {
      memcpy((*a7)->mBuffers[0].mData, *((const void **)this + 82), 4 * *((unsigned int *)this + 136));
    }
    return 0;
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::CanScheduleParameters(AUSpeechLevelEstimator *this)
{
  return 0;
}

uint64_t AUSpeechLevelEstimator::SetParameter(AUSpeechLevelEstimator *this, unsigned int a2, int a3, unsigned int a4, float a5)
{
  if (!a3)
  {
    uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 32), a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
    if ((a2 & 0xFFFFFFFE) == 0xA)
    {
      ++*((_DWORD *)this + 146);
    }
    else if (a2 > 7)
    {
      if ((a2 & 0xFFFFFFFE) == 8) {
        ++*((_DWORD *)this + 144);
      }
    }
    else if (*((void *)this + 76))
    {
      AUSpeechLevelEstimator::RefreshKernelParamValue((uint64_t)this, a2);
    }
  }
  return 0;
}

uint64_t AUSpeechLevelEstimator::SetProperty(AUSpeechLevelEstimator *this, int a2, int a3, unsigned int a4, _DWORD *__src, size_t __n)
{
  if (a3) {
    return 4294956417;
  }
  if (a2 != 5200)
  {
    if (a2 == 21)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 134) = *__src;
      return result;
    }
    return 4294956417;
  }
  if (!*((unsigned char *)this + 17)) {
    return 4294956429;
  }
  if (__n != 4 * *((unsigned int *)this + 137)) {
    return 4294956445;
  }
  memcpy(*((void **)this + 79), __src, __n);
  return 0;
}

uint64_t AUSpeechLevelEstimator::GetProperty(AUSpeechLevelEstimator *this, int a2, int a3, unsigned int a4, _DWORD *__dst)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 5199)
  {
    if (a2 == 5200)
    {
      if (*((unsigned char *)this + 17))
      {
        AudioUnitParameterValue v8 = (unsigned char *)*((void *)this + 79);
        AudioUnitParameterValue v9 = (unsigned char *)*((void *)this + 80);
        goto LABEL_16;
      }
    }
    else
    {
      if (a2 != 5300) {
        return result;
      }
      if (*((unsigned char *)this + 17))
      {
        AudioUnitParameterValue v8 = (unsigned char *)*((void *)this + 82);
        AudioUnitParameterValue v9 = (unsigned char *)*((void *)this + 83);
LABEL_16:
        if (v9 != v8) {
          memmove(__dst, v8, v9 - v8);
        }
        return 0;
      }
    }
    return 4294956429;
  }
  if (a2 == 21)
  {
    uint64_t result = 0;
    int v7 = *((_DWORD *)this + 134);
    goto LABEL_13;
  }
  if (a2 == 3700)
  {
    uint64_t result = 0;
    int v7 = *((unsigned __int8 *)this + 376);
LABEL_13:
    *__dst = v7;
  }
  return result;
}

uint64_t AUSpeechLevelEstimator::GetPropertyInfo(AUSpeechLevelEstimator *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a3) {
    return 4294956417;
  }
  uint64_t result = 4294956417;
  if (a2 > 5199)
  {
    if (a2 == 5200)
    {
      *a6 = 1;
    }
    else
    {
      if (a2 != 5300) {
        return result;
      }
      *a6 = 0;
    }
    int v8 = 4 * *((_DWORD *)this + 137);
  }
  else
  {
    if (a2 == 21)
    {
      *a6 = 1;
    }
    else
    {
      if (a2 != 3700) {
        return result;
      }
      *a6 = 0;
    }
    int v8 = 4;
  }
  uint64_t result = 0;
  *a5 = v8;
  return result;
}

uint64_t AUSpeechLevelEstimator::Reset(AUSpeechLevelEstimator *this)
{
  *((_OWORD *)this + 36) = xmmword_1BB873AA0;
  *((void *)this + 74) = 1;
  *((_WORD *)this + 30std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
  return 0;
}

uint64_t AUSpeechLevelEstimator::Initialize(AUSpeechLevelEstimator *this)
{
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 80), 0);
  if (*(_DWORD *)(Element + 88) == 1718773105 && *(_DWORD *)(Element + 108) == 1 && *(_DWORD *)(Element + 104) == 8)
  {
    float v5 = *(double *)(Element + 80);
    int v6 = *((_DWORD *)this + 84);
    *((_DWORD *)this + 136) = v6;
    *((_DWORD *)this + 137) = v6 + 1;
    *((float *)this + 132) = v5;
    int v7 = (_DWORD *)ausdk::AUScope::SafeGetElement((AUSpeechLevelEstimator *)((char *)this + 128), 0);
    if (v7[27] == 1)
    {
      int v8 = v7[26];
      if (v8 == 8 || v8 == 4)
      {
        int v10 = v7[22];
        if (v10 == 1718773105)
        {
          char v11 = 1;
        }
        else
        {
          if (v10 != 1819304813) {
            goto LABEL_21;
          }
          char v11 = 0;
        }
        *((unsigned char *)this + 54std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v11;
LABEL_21:
        (*(void (**)(AUSpeechLevelEstimator *))(*(void *)this + 584))(this);
        (*(void (**)(AUSpeechLevelEstimator *))(*(void *)this + 592))(this);
        *((_WORD *)this + 30std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
        *((_OWORD *)this + 36) = 0u;
        int v13 = (void *)*((void *)this + 76);
        *((void *)this + 76) = 0;
        if (v13) {
          std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v13);
        }
        if (*((unsigned char *)this + 556)) {
          operator new();
        }
        operator new();
      }
    }
  }
  return 4294956428;
}

void sub_1BB715820(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1090C40C1A4C78ELL);
  _Unwind_Resume(a1);
}

void std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *CWeight<float>::Generate(void *a1, unint64_t a2, float a3)
{
  uint64_t result = std::vector<float>::vector(a1, a2);
  if (a2)
  {
    uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(a2 - 1);
    unint64_t v7 = (a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v8 = (int64x2_t)xmmword_1BB872EC0;
    int64x2_t v9 = (int64x2_t)xmmword_1BB872720;
    int v10 = (_DWORD *)(*result + 8);
    float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x43D428CAu);
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x4D0DCF73u);
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x4D0ED319u);
    int64x2_t v14 = vdupq_n_s64(4uLL);
    do
    {
      int32x4_t v15 = (int32x4_t)vcgeq_u64(v6, (uint64x2_t)v9);
      *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v15);
      int32x2_t v16 = (int32x2_t)vmovn_s32(v15);
      v17.i64[0] = v8.i64[0] * v8.i64[0];
      v17.i64[1] = v8.i64[1] * v8.i64[1];
      v18.i64[0] = v9.i64[0] * v9.i64[0];
      v18.i64[1] = v9.i64[1] * v9.i64[1];
      float32x4_t v19 = vmulq_n_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v18)), vcvtq_f64_u64(v17)), a3 / (float)(2 * a2 - 2)), a3 / (float)(2 * a2 - 2));
      float32x4_t v20 = vmulq_f32(vdivq_f32(v19, vaddq_f32(v19, v11)), vdivq_f32(v13, vaddq_f32(v19, v12)));
      if (v16.i8[0])
      {
        int32x2_t v16 = (int32x2_t)vmulq_f32(v20, v20).u64[0];
        *(v10 - 2) = v16.i32[0];
      }
      if (vmovn_s32(v15).i8[2]) {
        *(v10 - 1) = vmulq_f32(v20, v20).i32[1];
      }
      int64x2_t v21 = (int64x2_t)vcgeq_u64(v6, (uint64x2_t)v8);
      if (vmovn_s32(vmovn_hight_s64(v16, v21)).i32[1]) {
        *int v10 = vmulq_f32(v20, v20).i32[2];
      }
      if (vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v21, v21)).i8[6]) {
        v10[1] = vmulq_f32(v20, v20).i32[3];
      }
      int64x2_t v8 = vaddq_s64(v8, v14);
      int64x2_t v9 = vaddq_s64(v9, v14);
      v10 += 4;
      v7 -= 4;
    }
    while (v7);
  }
  return result;
}

void AUSpeechLevelEstimator::~AUSpeechLevelEstimator(AUSpeechLevelEstimator *this)
{
  AUSpeechLevelEstimator::~AUSpeechLevelEstimator(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t vars8;

  *(void *)this = &unk_1F14C0960;
  int v2 = (void *)*((void *)this + 88);
  if (v2)
  {
    *((void *)this + 89) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 85);
  if (v3)
  {
    *((void *)this + 86) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 82);
  if (v4)
  {
    *((void *)this + 83) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 79);
  if (v5)
  {
    *((void *)this + 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v5;
    operator delete(v5);
  }
  uint64x2_t v6 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v6) {
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v6);
  }
  unint64_t v7 = *((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v7) {
    std::default_delete<SPLMeter<float,AWeight>>::operator()[abi:ne180100](v7);
  }
  int64x2_t v8 = (void *)*((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v8) {
    std::default_delete<SmoothedNoiseEstimator<float,NoiseSuppression::Noise::HendriksSPP>>::operator()[abi:ne180100](v8);
  }

  ausdk::AUBase::~AUBase(this);
}

os_log_t ___Z25getParametricProcessorLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "ParametricProcessor");
  getParametricProcessorLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t EndpointVAD::Uninitialize(EndpointVAD *this)
{
  if (*(unsigned char *)this)
  {
    uint64_t v2 = *((void *)this + 24);
    if (v2)
    {
      EndpointVADDSPChain::Uninitialize(*((void *)this + 24));
      AudioComponentInstanceDispose(*(AudioComponentInstance *)(v2 + 64));
      *(void *)(v2 + 64) = 0;
      AudioComponentInstanceDispose(*(AudioComponentInstance *)(v2 + 56));
      *(void *)(v2 + 56) = 0;
      MEMORY[0x1C185D370](v2, 0x1020C40CAB7616CLL);
    }
    if (*((void *)this + 25)) {
      myFreeABLDynamic((AudioBufferList **)this + 25);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      MEMORY[0x1C185D340](v3, 0x1000C8052888210);
    }
    float v4 = (uint64_t *)*((void *)this + 28);
    if (v4)
    {
      uint64_t v5 = *v4;
      if (*v4)
      {
        uint64x2_t v18 = (void **)(v5 + 72);
        std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v18);
        uint64x2_t v18 = (void **)(v5 + 48);
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
        uint64x2_t v18 = (void **)(v5 + 24);
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v18);
        uint64x2_t v6 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v6;
          operator delete(v6);
        }
        MEMORY[0x1C185D370](v5, 0xA0C400E294FEBLL);
      }
      uint64_t v7 = v4[1];
      if (v7) {
        MEMORY[0x1C185D370](v7, 0x1000C40451B5BE8);
      }
      int64x2_t v8 = (void *)v4[15];
      if (v8)
      {
        v4[16] = (uint64_t)v8;
        operator delete(v8);
      }
      int64x2_t v9 = (void *)v4[12];
      if (v9)
      {
        v4[13] = (uint64_t)v9;
        operator delete(v9);
      }
      int v10 = (void *)v4[9];
      if (v10)
      {
        v4[10] = (uint64_t)v10;
        operator delete(v10);
      }
      float32x4_t v11 = (void *)v4[6];
      if (v11)
      {
        v4[7] = (uint64_t)v11;
        operator delete(v11);
      }
      float32x4_t v12 = (void *)v4[3];
      if (v12)
      {
        v4[4] = (uint64_t)v12;
        operator delete(v12);
      }
      MEMORY[0x1C185D370](v4, 0x1070C40333FFEABLL);
    }
    uint64_t v13 = *((void *)this + 27);
    if (v13)
    {
      int64x2_t v14 = *(void **)(v13 + 24);
      if (v14)
      {
        *(void *)(v13 + 32) = v14;
        operator delete(v14);
      }
      int32x4_t v15 = *(void **)v13;
      if (*(void *)v13)
      {
        *(void *)(v13 + 8) = v15;
        operator delete(v15);
      }
      MEMORY[0x1C185D370](v13, 0x10C407BD0BEC4);
    }
    uint64_t v16 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    std::__optional_destruct_base<BlockProcessor,false>::reset[abi:ne180100]((unsigned char *)this + 56);
    *((void *)this + 24) = 0;
    *((void *)this + 3) = 0;
    *(unsigned char *)this = 0;
    *((void *)this + 27) = 0;
    *((void *)this + 28) = 0;
  }
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    uint64_t result = MEMORY[0x1C185D370](result, 0xC400A2AC0F1);
    *((void *)this + 1) = 0;
  }
  return result;
}

unsigned char *std::__optional_destruct_base<BlockProcessor,false>::~__optional_destruct_base[abi:ne180100](unsigned char *a1)
{
  if (a1[64])
  {
    BlockBuffer::~BlockBuffer((BlockBuffer *)(a1 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)a1);
  }
  return a1;
}

void std::__optional_destruct_base<BlockProcessor,false>::reset[abi:ne180100](unsigned char *a1)
{
  if (a1[64])
  {
    BlockBuffer::~BlockBuffer((BlockBuffer *)(a1 + 24));
    BlockBuffer::~BlockBuffer((BlockBuffer *)a1);
    a1[64] = 0;
  }
}

void EndpointVADViterbiModel::~EndpointVADViterbiModel(EndpointVADViterbiModel *this)
{
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::vector<std::vector<DspLib::Biquad::Section>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

float64_t EndpointVAD::BlockProcessFunc(EndpointVAD *this, void *a2, uint64_t a3, AudioBufferList **a4, AudioBufferList **a5)
{
  UInt32 v5 = a2;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const AudioTimeStamp *)((char *)this + 128);
  int64x2_t v8 = *a4;
  uint64_t v9 = *((void *)this + 24);
  Biquad::Process_Float32(*(Biquad **)(v9 + 48), *(float **)(*(void *)a3 + 16), (float *)(*a4)->mBuffers[0].mData, (int)a2);
  LODWORD(v128) = 512;
  AudioTimeStamp inInputBufferLists = v8;
  DSPSplitComplex ioOutputBufferLists = v8;
  if (AudioUnitProcessMultiple(*(AudioUnit *)(v9 + 56), (AudioUnitRenderActionFlags *)&v128, v7, v5, 1u, (const AudioBufferList **)&inInputBufferLists, 1u, &ioOutputBufferLists))
  {
    goto LABEL_140;
  }
  OSStatus v11 = AudioUnitProcess(*(AudioUnit *)(v9 + 64), (AudioUnitRenderActionFlags *)&v128, v7, v5, v8);
  ++*(_DWORD *)(v9 + 4);
  if (v11) {
    goto LABEL_140;
  }
  float32x4_t v12 = (AudioUnit *)*((void *)this + 24);
  AudioUnitGetParameter(v12[7], 1u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists);
  AudioUnitGetParameter(v12[7], 2u, 0, 0, (AudioUnitParameterValue *)&inInputBufferLists + 1);
  uint64_t v13 = v12[8];
  v12 += 8;
  AudioUnitGetParameter(v13, 0x3Du, 0, 0, (AudioUnitParameterValue *)&v134);
  AudioUnitGetParameter(*v12, 0x3Cu, 0, 0, (AudioUnitParameterValue *)&v134 + 1);
  int v137 = 1056964608;
  AudioUnitGetParameter(*v12, 0x3Bu, 0, 0, (AudioUnitParameterValue *)&v138);
  AudioUnitGetParameter(*v12, 0x37u, 0, 0, (AudioUnitParameterValue *)&v138 + 1);
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  float v16 = 0.0;
  if (*(float *)&inInputBufferLists > 0.5) {
    float v16 = 1.0;
  }
  float v135 = v16;
  __asm { FMOV            V2.2S, #1.0 }
  int8x8_t v21 = (int8x8_t)vcgt_f32(v134, v138);
  int8x8_t v136 = vand_s8(v21, _D2);
  BOOL v131 = *(float *)&inInputBufferLists > 0.5;
  *(int32x2_t *)&v10.f64[0] = vrev64_s32((int32x2_t)vand_s8(v21, (int8x8_t)0x100000001));
  float64_t v132 = v10.f64[0];
  uint64_t v22 = *((void *)this + 27);
  uint64_t v23 = *(void *)(v22 + 24);
  unsigned int v24 = **(_DWORD **)v22;
  uint64_t v25 = v23 + 4;
  do
  {
    int v26 = *(BOOL *)((char *)&v131 + v14);
    if (v26 + 1 > v24) {
      break;
    }
    v15 += *(_DWORD *)(v25 + v14) * v26;
    v14 += 4;
  }
  while (v14 != 12);
  uint64_t v27 = *((void *)this + 28);
  unsigned int v28 = *(_DWORD *)(v27 + 144);
  if (v28 >= *(_DWORD *)(*(void *)(v27 + 8) + 12))
  {
    int v34 = *(_DWORD *)(v27 + 152);
    if (v34 < *(_DWORD *)(v27 + 148)) {
      *(_DWORD *)(v27 + 152) = v34 + 1;
    }
  }
  else
  {
    int v29 = *(_DWORD *)(v27 + 148) + 1;
    *(_DWORD *)(v27 + 144) = v28 + 1;
    *(_DWORD *)(v27 + 148) = v29;
    CFDictionaryRef v30 = (_OWORD *)(v27 + 168);
    CFNumberRef v32 = *(_OWORD **)(v27 + 80);
    unint64_t v31 = *(void *)(v27 + 88);
    if ((unint64_t)v32 >= v31)
    {
      uint64_t v35 = *(void *)(v27 + 72);
      uint64_t v36 = ((uint64_t)v32 - v35) >> 4;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = v31 - v35;
      if (v38 >> 3 > v37) {
        unint64_t v37 = v38 >> 3;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39) {
        unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float (ASAFeatures::*)(ASAFrontEndInputState const*)>>(v39);
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = (_OWORD *)(v39 + 16 * v36);
      unint64_t v42 = v39 + 16 * v40;
      *uint64_t v41 = *v30;
      CFNumberRef v33 = v41 + 1;
      long long v44 = *(char **)(v27 + 72);
      char v43 = *(char **)(v27 + 80);
      if (v43 != v44)
      {
        do
        {
          *--uint64_t v41 = *((_OWORD *)v43 - 1);
          v43 -= 16;
        }
        while (v43 != v44);
        char v43 = *(char **)(v27 + 72);
      }
      *(void *)(v27 + 72) = v41;
      *(void *)(v27 + 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v33;
      *(void *)(v27 + 88) = v42;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      _OWORD *v32 = *v30;
      CFNumberRef v33 = v32 + 1;
    }
    *(void *)(v27 + 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v33;
    long long v46 = *(void **)(v27 + 128);
    unint64_t v45 = *(void *)(v27 + 136);
    if ((unint64_t)v46 >= v45)
    {
      uint64_t v48 = *(void *)(v27 + 120);
      uint64_t v49 = ((uint64_t)v46 - v48) >> 3;
      if ((unint64_t)(v49 + 1) >> 61) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v50 = v45 - v48;
      uint64_t v51 = v50 >> 2;
      if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
        uint64_t v51 = v49 + 1;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52) {
        unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SlidingWindowDTFT<float> *>>(v52);
      }
      else {
        uint64_t v53 = 0;
      }
      uint64_t v54 = (void *)(v52 + 8 * v49);
      unint64_t v55 = v52 + 8 * v53;
      *uint64_t v54 = *(void *)(v27 + 184);
      uint64_t v47 = v54 + 1;
      uint64_t v57 = *(char **)(v27 + 120);
      uint64_t v56 = *(char **)(v27 + 128);
      if (v56 != v57)
      {
        do
        {
          uint64_t v58 = *((void *)v56 - 1);
          v56 -= 8;
          *--uint64_t v54 = v58;
        }
        while (v56 != v57);
        uint64_t v56 = *(char **)(v27 + 120);
      }
      *(void *)(v27 + 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v54;
      *(void *)(v27 + 128) = v47;
      *(void *)(v27 + 136) = v55;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      void *v46 = *(void *)(v27 + 184);
      uint64_t v47 = v46 + 1;
    }
    unint64_t v59 = *(void *)(v27 + 40);
    *(void *)(v27 + 128) = v47;
    CFArrayRef v60 = *(char **)(v27 + 32);
    if ((unint64_t)v60 >= v59)
    {
      long long v62 = *(char **)(v27 + 24);
      uint64_t v63 = (v60 - v62) >> 2;
      if ((unint64_t)(v63 + 1) >> 62) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v64 = v59 - (void)v62;
      unint64_t v65 = (uint64_t)(v59 - (void)v62) >> 1;
      if (v65 <= v63 + 1) {
        unint64_t v65 = v63 + 1;
      }
      if (v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66)
      {
        unsigned __int8 v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27 + 40, v66);
        long long v62 = *(char **)(v27 + 24);
        CFArrayRef v60 = *(char **)(v27 + 32);
      }
      else
      {
        unsigned __int8 v67 = 0;
      }
      CFArrayRef v68 = &v67[4 * v63];
      uint64_t v69 = &v67[4 * v66];
      *(_DWORD *)CFArrayRef v68 = 0;
      int v61 = v68 + 4;
      while (v60 != v62)
      {
        int v70 = *((_DWORD *)v60 - 1);
        v60 -= 4;
        *((_DWORD *)v68 - 1) = v70;
        v68 -= 4;
      }
      *(void *)(v27 + 24) = v68;
      *(void *)(v27 + 32) = v61;
      *(void *)(v27 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v69;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *(_DWORD *)CFArrayRef v60 = 0;
      int v61 = v60 + 4;
    }
    *(void *)(v27 + 32) = v61;
    uint64_t v71 = *(int *)(v27 + 144);
    if (v71 == 1)
    {
      uint64_t v72 = *(void *)(*(void *)v27 + 48);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)v27 + 56) - v72) >> 3) <= v15) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v73 = *(void *)(v27 + 128);
      float64x2_t v10 = vcvtq_f64_f32(vmul_f32(**(float32x2_t **)(v72 + 24 * v15), (float32x2_t)0x3C23D7003F7D70A4));
      *(float64x2_t *)(*(void *)(v27 + 80) - 16) = v10;
      *(void *)(v73 - 8) = 0;
    }
    else
    {
      long long v74 = *(void **)v27;
      *(_DWORD *)(v27 + 152) = *(_DWORD *)(v27 + 148) - *(_DWORD *)(*(void *)(v27 + 8) + 8);
      uint64_t v75 = *(void *)(v27 + 96);
      uint64_t v76 = *(void *)(v27 + 104);
      if (v75 != v76)
      {
        unint64_t v77 = v71 - 2;
        uint64_t v78 = *(void *)(v27 + 72);
        if (v77 >= (*(void *)(v27 + 80) - v78) >> 4) {
          std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v79 = v78 + 16 * v77;
        uint64_t v80 = (uint64_t *)v74[3];
        uint64_t v81 = *(void *)(v27 + 96);
        do
        {
          uint64_t v82 = 0;
          uint64_t v83 = *v80;
          do
          {
            *(double *)(v81 + 8 * v82) = *(double *)(v79 + 8 * v82) * *(float *)(v83 + 4 * v82);
            ++v82;
          }
          while (v82 != 2);
          v80 += 3;
          v81 += 16;
        }
        while (v81 != v76);
      }
      uint64_t v84 = v74[9];
      if (0xAAAAAAAAAAAAAAABLL * ((v74[10] - v84) >> 3) <= v15) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v85 = (void *)(v84 + 24 * v15);
      unint64_t v86 = *(int *)(v27 + 160);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85[1] - *v85) >> 3) <= v86) {
        std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v87 = *(float **)(*v85 + 24 * (int)v86);
      uint64_t v88 = (_DWORD *)(*(void *)(v27 + 128) - 8);
      uint64_t v89 = *(void **)(v27 + 80);
      char v90 = v89 - 2;
      do
      {
        uint64_t v91 = 0;
        int v92 = 0;
        double v93 = 0.0;
        do
        {
          if (*(double *)(v75 + 8 * v91) >= v93)
          {
            double v93 = *(double *)(v75 + 8 * v91);
            int v92 = v91;
          }
          ++v91;
        }
        while (v91 != 2);
        float v94 = *v87++;
        v10.f64[0] = v93 * v94;
        *v90++ = *(void *)&v10.f64[0];
        *v88++ = v92;
        v75 += 16;
      }
      while (v90 != v89);
      *(_DWORD *)(v27 + 16std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v15;
    }
  }
  unint64_t v95 = *(unsigned int *)(v27 + 152);
  if ((v95 & 0x80000000) != 0) {
    goto LABEL_133;
  }
  int v96 = *(_DWORD *)(v27 + 156);
  if ((int)v95 <= v96)
  {
    uint64_t v117 = *(void *)(v27 + 48);
    if (v95 >= (*(void *)(v27 + 56) - v117) >> 2) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v118 = *(void *)(v27 + 24);
    if (v95 >= (*(void *)(v27 + 32) - v118) >> 2) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    *(_DWORD *)(v118 + 4 * v95) = *(_DWORD *)(v117 + 4 * v95);
    goto LABEL_133;
  }
  uint64_t v97 = *(unsigned int *)(v27 + 148);
  unsigned int v98 = v97 - 1;
  if ((v96 & 0x80000000) == 0 && v98 <= v96) {
    goto LABEL_128;
  }
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  DSPSplitComplex ioOutputBufferLists = (AudioBufferList *)&v140;
  if (*(_DWORD *)(v27 + 20))
  {
    unsigned int v99 = 0;
    do
    {
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&ioOutputBufferLists, v99, v99);
      ++v99;
    }
    while (v99 < *(_DWORD *)(v27 + 20));
  }
  uint64_t v100 = 0;
  int v101 = 0;
  unsigned int v129 = 0;
  uint64_t v130 = 0;
  uint64_t v128 = (AudioBufferList *)&v129;
  uint64_t v102 = *(void *)(v27 + 128) + 8 * (v97 - ((*(void *)(v27 + 128) - *(void *)(v27 + 120)) >> 3)) + 8;
  do
  {
    while (1)
    {
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v100);
      unsigned int v129 = 0;
      uint64_t v130 = 0;
      uint64_t v128 = (AudioBufferList *)&v129;
      unsigned int v103 = ioOutputBufferLists;
      if (ioOutputBufferLists == (AudioBufferList *)&v140)
      {
        uint64_t v107 = 0;
        double v108 = (AudioBufferList *)&v129;
      }
      else
      {
        do
        {
          uint64_t v104 = *(&v103[1].mNumberBuffers + 1);
          if (v104 >= 2) {
            std::__throw_out_of_range[abi:ne180100]("array::at");
          }
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v128, *(_DWORD *)(v102 - 8 + 4 * v104), *(_DWORD *)(v102 - 8 + 4 * v104));
          float32x4_t v105 = *(AudioBufferList **)&v103->mBuffers[0].mNumberChannels;
          if (v105)
          {
            do
            {
              mData = (AudioBufferList **)v105;
              float32x4_t v105 = *(AudioBufferList **)&v105->mNumberBuffers;
            }
            while (v105);
          }
          else
          {
            do
            {
              mData = (AudioBufferList **)v103->mBuffers[0].mData;
              _ZF = *mData == v103;
              unsigned int v103 = (AudioBufferList *)mData;
            }
            while (!_ZF);
          }
          unsigned int v103 = (AudioBufferList *)mData;
        }
        while (mData != (AudioBufferList **)&v140);
        uint64_t v107 = v130;
        double v108 = v128;
        if (v130 == 1)
        {
          int v101 = *(&v128[1].mNumberBuffers + 1);
          int v109 = 1;
          goto LABEL_97;
        }
      }
      int v109 = 0;
      --v98;
LABEL_97:
      uint64_t v110 = ioOutputBufferLists;
      uint64_t v100 = v140;
      int v111 = v129;
      DSPSplitComplex ioOutputBufferLists = v108;
      uint64_t v140 = v129;
      uint64_t v128 = v110;
      unsigned int v129 = v100;
      uint64_t v112 = v141;
      uint64_t v141 = v107;
      uint64_t v130 = v112;
      if (v107)
      {
        v111[2] = &v140;
        BOOL v113 = v100 + 2;
        if (!v112) {
          BOOL v113 = (uint64_t *)&v128;
        }
        *BOOL v113 = (uint64_t)&v129;
        v102 -= 8;
        if (v109)
        {
          LOBYTE(v107) = 0;
        }
        else
        {
          _ZF = v102 == *(void *)(v27 + 120) || v98 == 0;
          LOBYTE(v107) = !_ZF;
        }
      }
      else
      {
        DSPSplitComplex ioOutputBufferLists = (AudioBufferList *)&v140;
        int v114 = v112 ? v100 + 2 : (uint64_t *)&v128;
        *int v114 = (uint64_t)&v129;
        v102 -= 8;
      }
      unsigned int v116 = *(_DWORD *)(v27 + 156);
      if ((v116 & 0x80000000) == 0) {
        break;
      }
      if ((v107 & 1) == 0)
      {
        if (!v109) {
          goto LABEL_127;
        }
        goto LABEL_126;
      }
    }
    if (v98 <= v116) {
      LOBYTE(v107) = 0;
    }
  }
  while ((v107 & 1) != 0);
  if (v98 <= v116) {
    LOBYTE(v109) = 0;
  }
  if (v109)
  {
LABEL_126:
    EndpointVADRTViterbi::expandWithZerosIfNecessary((char **)(v27 + 48), v98);
    EndpointVADRTViterbi::backtraceBackpointerArray(v27, *(_DWORD **)(v27 + 48), *(void *)(v27 + 56), v98, *(_DWORD *)(v27 + 156) + 1, v101);
    *(_DWORD *)(v27 + 156) = v98;
    uint64_t v100 = v129;
  }
LABEL_127:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v100);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v140);
  LODWORD(v95) = *(_DWORD *)(v27 + 152);
  int v96 = *(_DWORD *)(v27 + 156);
LABEL_128:
  if ((int)v95 <= v96)
  {
    uint64_t v119 = *(void *)(v27 + 48);
    if ((int)v95 >= (unint64_t)((*(void *)(v27 + 56) - v119) >> 2)) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v120 = *(void *)(v27 + 24);
    if ((int)v95 >= (unint64_t)((*(void *)(v27 + 32) - v120) >> 2)) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    *(_DWORD *)(v120 + 4 * (int)v95) = *(_DWORD *)(v119 + 4 * (int)v95);
  }
  else
  {
    EndpointVADRTViterbi::decodeStateSequence((char **)v27, *(_DWORD *)(v27 + 148), v95);
  }
LABEL_133:
  if (!(*(_DWORD *)(v27 + 144) % **(_DWORD **)(v27 + 8)))
  {
    uint64_t v121 = *(void *)(v27 + 80);
    double v122 = 0.0;
    uint64_t v123 = -16;
    do
    {
      double v122 = v122 + *(double *)(v121 + v123);
      v123 += 8;
    }
    while (v123);
    float64x2_t v10 = vmulq_n_f64(*(float64x2_t *)(v121 - 16), 1.0 / v122);
    *(float64x2_t *)(v121 - 16) = v10;
  }
  uint64_t v124 = 0;
  uint64_t v125 = *((void *)this + 3);
  int v126 = *((_DWORD *)this + 8);
  do
  {
    *(_DWORD *)(v125 + 4 * (v126 + v124)) = *((_DWORD *)&inInputBufferLists + v124);
    ++v124;
  }
  while (v124 != 10);
  *((_DWORD *)this + 8) = v126 + 10;
LABEL_140:
  LODWORD(v10.f64[0]) = *((_DWORD *)this + 11);
  v10.f64[0] = *((double *)this + 16) + (double)*(unint64_t *)&v10.f64[0];
  *((void *)this + 16) = *(void *)&v10.f64[0];
  return v10.f64[0];
}

void sub_1BB716810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void AUPeakPowerGuard::newDspLibAlgorithm(AUPeakPowerGuard *this)
{
}

void sub_1BB716884(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E1C409EFF3986);
  _Unwind_Resume(a1);
}

uint64_t AUPeakPowerGuard::Version(AUPeakPowerGuard *this)
{
  return 66563;
}

uint64_t AUPeakPowerGuard::SetProperty(AUPeakPowerGuard *this, int a2, int a3, unsigned int a4, CFDictionaryRef *a5, void *a6, int *a7)
{
  if (a2 == 6611 && a3 == 0)
  {
    OSStatus v11 = (const void *)*((void *)this + 271);
    if (v11) {
      CFRelease(v11);
    }
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, *a5);
    *((void *)this + 271) = Copy;
    uint64_t v13 = (DspLib::PeakPowerGuard::Algorithm *)*((void *)this + 66);
    if (v13 && !DspLib::PeakPowerGuard::Algorithm::setAdmittanceFilterCoeffSet(v13, Copy)) {
      return 4294956429;
    }
    else {
      return 0;
    }
  }
  else
  {
    return AUDspLib::SetProperty(this, a2, a3, a4, (int *)a5, a6, a7);
  }
}

uint64_t AUPeakPowerGuard::GetProperty(AUPeakPowerGuard *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  if (a2 == 6611 && a3 == 0)
  {
    uint64_t v9 = (const void *)*((void *)this + 271);
    if (v9)
    {
      CFRetain(*((CFTypeRef *)this + 271));
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v10, v9);
      uint64_t result = 0;
      *a5 = v10;
    }
    else
    {
      return 4294956445;
    }
  }
  else
  {
    return AUDspLib::GetProperty(this, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t AUPeakPowerGuard::GetPropertyInfo(AUPeakPowerGuard *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 6611 || a3 != 0) {
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  *a6 = 0;
  *a5 = 8;
  return 0;
}

uint64_t AUPeakPowerGuard::Initialize(DspLib::PeakPowerGuard::Algorithm **this)
{
  uint64_t v2 = AUDspLib::Initialize((AUDspLib *)this);
  CFDictionaryRef v3 = this[271];
  if (v3)
  {
    float v4 = this[66];
    if (v4) {
      DspLib::PeakPowerGuard::Algorithm::setAdmittanceFilterCoeffSet(v4, v3);
    }
  }
  return v2;
}

void AUPeakPowerGuard::~AUPeakPowerGuard(AUPeakPowerGuard *this)
{
  AUPeakPowerGuard::~AUPeakPowerGuard(this);

  JUMPOUT(0x1C185D370);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14C0BF0;
  uint64_t v2 = (const void *)*((void *)this + 271);
  if (v2) {
    CFRelease(v2);
  }

  AUDspLib::~AUDspLib(this);
}

const __CFString *applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[17]>(unsigned char *a1, const __CFDictionary *a2, char *__s)
{
  CFStringRef result = (const __CFString *)applesauce::CF::details::at_key<char const(&)[17]>(a2, __s);
  if (result)
  {
    return (const __CFString *)applesauce::CF::convert_as<std::string,0>((uint64_t)a1, result);
  }
  else
  {
    *a1 = 0;
    a1[24] = 0;
  }
  return result;
}

BOOL std::operator==[abi:ne180100]<std::string,char [1]>(const void **a1, char *__s)
{
  if (!*((unsigned char *)a1 + 24)) {
    return 0;
  }
  int v4 = *((char *)a1 + 23);
  size_t v5 = v4 >= 0 ? *((unsigned __int8 *)a1 + 23) : (size_t)a1[1];
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64x2_t v6 = a1;
  }
  else {
    uint64x2_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

void std::make_unique[abi:ne180100]<NeuralNet,__CFDictionary const*,CALog::Scope *>()
{
}

void sub_1BB716C14(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1060C4046203C0ELL);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[10]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>(a1, a2);
  if (!v4) {
    return *a3;
  }
  uint64_t result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0) {
    return result;
  }
  else {
    return *a3;
  }
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[22]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[22]>(a1, a2);
  if (!v4) {
    return *a3;
  }
  uint64_t result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0) {
    return result;
  }
  else {
    return *a3;
  }
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[23]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  CFNumberRef v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[23]>(a1, a2);
  if (!v4) {
    return *a3;
  }
  uint64_t result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0) {
    return result;
  }
  else {
    return *a3;
  }
}

void std::make_unique[abi:ne180100]<IR::FixedIntegerDelay,unsigned int &,BOOL>()
{
}

void sub_1BB716D54(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x1080C40C92309C1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ParametricFilters,float &,unsigned int &,BOOL,int const&,std::string &>()
{
}

void sub_1BB716E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x1C185D370](v14, 0x10B2C40677E12FCLL);
  _Unwind_Resume(a1);
}

void ___ZL27getNeuralTranscoderLogScopev_block_invoke()
{
}

uint64_t NeuralTranscoder::NeuralTranscoder(uint64_t a1, CFURLRef *a2, int a3, int a4, const void **a5, float a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0x10000000200;
  *(void *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 12451844;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 193) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  CFDictionaryRef v10 = (void **)(a1 + 160);
  *(_DWORD *)(a1 + 244) = 1195081728;
  *(_DWORD *)(a1 + 256) = 1132068864;
  *(unsigned char *)(a1 + 26std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
  *(float *)(a1 + 24std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = a6;
  *(_DWORD *)(a1 + 112) = a4;
  if (*((char *)a5 + 23) >= 0) {
    size_t v11 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v11 = (size_t)a5[1];
  }
  float32x4_t v12 = buffer;
  std::string::basic_string[abi:ne180100]((uint64_t)buffer, v11 + 17);
  if ((buffer[23] & 0x80u) != 0) {
    float32x4_t v12 = *(UInt8 **)buffer;
  }
  if (v11)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v13 = a5;
    }
    else {
      uint64_t v13 = *a5;
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)&v12[v11], "|NeuralTranscoder");
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)CFDictionaryRef v10 = *(_OWORD *)buffer;
  v10[2] = *(void **)&buffer[16];
  if (!ChannelLayoutTagIsSupportedHOA(a3))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v19 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return a1;
    }
    if (*(char *)(a1 + 183) < 0) {
      CFDictionaryRef v10 = (void **)*v10;
    }
    *(_DWORD *)buffer = 136315394;
    *(void *)&buffer[4] = v10;
    *(_WORD *)&buffer[12] = 2080;
    *(void *)&buffer[14] = "NeuralTranscoder";
    unsigned int v15 = "[%s|%s] Error creating neural network - input tag is not FOA/HOA";
LABEL_34:
    float v16 = buffer;
    uint64x2_t v17 = v19;
    uint32_t v18 = 22;
LABEL_35:
    _os_log_error_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, v15, v16, v18);
    return a1;
  }
  if (!*a2)
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v19 = getAUSMV2Log(void)::gLog;
    if (!os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR)) {
      return a1;
    }
    if (*(char *)(a1 + 183) < 0) {
      CFDictionaryRef v10 = (void **)*v10;
    }
    *(_DWORD *)buffer = 136315394;
    *(void *)&buffer[4] = v10;
    *(_WORD *)&buffer[12] = 2080;
    *(void *)&buffer[14] = "NeuralTranscoder";
    unsigned int v15 = "[%s|%s] Error creating neural network - neural transcoder plist was not provided";
    goto LABEL_34;
  }
  CFURLGetFileSystemRepresentation(*a2, 1u, buffer, 1024);
  if (stat((const char *)buffer, &v34))
  {
    if (getAUSMV2Log(void)::onceToken != -1) {
      dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
    }
    uint64_t v14 = getAUSMV2Log(void)::gLog;
    if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 183) < 0) {
        CFDictionaryRef v10 = (void **)*v10;
      }
      *(_DWORD *)std::vector<unsigned int> __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v36 = 2080;
      unint64_t v37 = "NeuralTranscoder";
      __int16 v38 = 2080;
      unint64_t v39 = buffer;
      unsigned int v15 = "[%s|%s] Error creating neural network - neural transcoder plist does not exist: %s";
      float v16 = __p;
      uint64x2_t v17 = v14;
      uint32_t v18 = 32;
      goto LABEL_35;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 128) = a3;
    CFURLGetFileSystemRepresentation(*a2, 1u, buffer, 1024);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)buffer);
    applesauce::CF::make_DataRef(__p, &data);
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)__p);
    }
    if (data)
    {
      CFPropertyListRef v20 = CFPropertyListCreateWithData(0, data, 0, 0, 0);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&theDict, v20);
      if (theDict)
      {
        if (applesauce::CF::details::has_key<char const(&)[17]>((BOOL)theDict, "ModelNetPathBase"))
        {
          if (!theDict)
          {
            exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          if (!applesauce::CF::details::has_key<char const(&)[17]>((BOOL)theDict, "ModelNetPathBase")) {
            goto LABEL_66;
          }
          if (!theDict)
          {
            unint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v31, "Could not construct");
          }
          applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[17]>(__p, theDict, "ModelNetPathBase");
          BOOL v21 = std::operator==[abi:ne180100]<std::string,char [1]>((const void **)__p, "");
          if ((_BYTE)v39 && SHIBYTE(v38) < 0) {
            operator delete(*(void **)__p);
          }
          if (!v21)
          {
LABEL_66:
            if (getNeuralTranscoderLogScope(void)::once != -1) {
              dispatch_once(&getNeuralTranscoderLogScope(void)::once, &__block_literal_global_29624);
            }
            operator new();
          }
        }
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDict);
        if (*a2)
        {
          uint64_t v23 = MutableCopy;
          CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *a2);
          applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)__p, PathComponent);
          CFStringRef v25 = CFURLCopyPath(*(CFURLRef *)__p);
          if (*(void *)__p) {
            CFRelease(*(CFTypeRef *)__p);
          }
          CFDictionarySetValue(v23, @"ModelNetPathBase", v25);
          CFRelease(v25);
          if (getNeuralTranscoderLogScope(void)::once != -1) {
            dispatch_once(&getNeuralTranscoderLogScope(void)::once, &__block_literal_global_29624);
          }
          operator new();
        }
        int v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Could not construct");
      }
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      uint64_t v27 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 183) < 0) {
          CFDictionaryRef v10 = (void **)*v10;
        }
        *(_DWORD *)std::vector<unsigned int> __p = 136315394;
        *(void *)&__p[4] = v10;
        __int16 v36 = 2080;
        unint64_t v37 = "NeuralTranscoder";
        _os_log_error_impl(&dword_1BB0CE000, v27, OS_LOG_TYPE_ERROR, "[%s|%s] Error creating neural network - error creating plist object", __p, 0x16u);
      }
      if (theDict) {
        CFRelease(theDict);
      }
    }
    else
    {
      if (getAUSMV2Log(void)::onceToken != -1) {
        dispatch_once(&getAUSMV2Log(void)::onceToken, &__block_literal_global_8539);
      }
      int v26 = getAUSMV2Log(void)::gLog;
      if (os_log_type_enabled((os_log_t)getAUSMV2Log(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 183) < 0) {
          CFDictionaryRef v10 = (void **)*v10;
        }
        *(_DWORD *)std::vector<unsigned int> __p = 136315650;
        *(void *)&__p[4] = v10;
        __int16 v36 = 2080;
        unint64_t v37 = "NeuralTranscoder";
        __int16 v38 = 2080;
        unint64_t v39 = buffer;
        _os_log_error_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, "[%s|%s] Error creating neural network - error loading plist file: %s", __p, 0x20u);
      }
    }
    if (data) {
      CFRelease(data);
    }
  }
  return a1;
}

void sub_1BB718754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf,CFTypeRef a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,__int16 a54,int a55,__int16 a56,uint64_t a57,uint64_t a58)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void NeuralTranscoder::process(void **a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (*a1 && *((unsigned char *)a1 + 124))
  {
    unsigned int v5 = *((_DWORD *)a1 + 28);
    if (v5 >= a3) {
      unsigned int v5 = a3;
    }
    unsigned int v89 = v5;
    if (*((_DWORD *)a1 + 16))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        int64x2_t v8 = (void **)&a1[9][v6];
        uint64_t v9 = (char *)*v8 + 4 * *((unsigned int *)a1 + 29);
        memmove(*v8, v9, ((unsigned char *)v8[1] - v9) & 0xFFFFFFFFFFFFFFFCLL);
        ++v7;
        v6 += 3;
      }
      while (v7 < *((unsigned int *)a1 + 16));
    }
    if (v89)
    {
      unint64_t v87 = (uint64_t *)(a1 + 1);
      uint64_t v88 = (uint64_t *)(a1 + 4);
      unsigned int v10 = *((_DWORD *)a1 + 26);
      unsigned int v11 = *((_DWORD *)a1 + 24);
      uint64_t v12 = v89;
      do
      {
        uint64_t v13 = v10 - v11;
        if (*((unsigned char *)a1 + 216))
        {
          uint64_t RequiredNumberOfInputFrames = AudioSampleRateConverterGetRequiredNumberOfInputFrames();
          uint64_t v15 = RequiredNumberOfInputFrames;
          if (RequiredNumberOfInputFrames > v12)
          {
            uint64_t RequiredNumberOfInputFrames = CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames((CA::AudioSampleRateConverter *)a1[26]);
            uint64_t v13 = RequiredNumberOfInputFrames;
            uint64_t v15 = v12;
          }
          char v90 = &v86;
          MEMORY[0x1F4188790](RequiredNumberOfInputFrames);
          uint64x2_t v17 = (const float *const *)((char *)&v86 - ((v16 + 15) & 0xFFFFFFFF0));
          if (v16 >= 0x200) {
            size_t v18 = 512;
          }
          else {
            size_t v18 = v16;
          }
          bzero((char *)&v86 - ((v16 + 15) & 0xFFFFFFFF0), v18);
          uint64_t v19 = *((unsigned int *)a1 + 14);
          MEMORY[0x1F4188790](v20);
          uint64_t v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFF0);
          if (v21 >= 0x200) {
            size_t v23 = 512;
          }
          else {
            size_t v23 = v21;
          }
          bzero((char *)&v86 - ((v21 + 15) & 0xFFFFFFFF0), v23);
          if (v19)
          {
            uint64_t v24 = 0;
            int v25 = *((_DWORD *)a1 + 32);
            uint64_t v26 = *a2;
            uint64_t v27 = v89 - v12;
            int v28 = *((_DWORD *)a1 + 26);
            unsigned int v29 = *((_DWORD *)a1 + 24);
            CFDictionaryRef v30 = a1[1];
            do
            {
              if (v25 == 7012356) {
                uint64_t v31 = kFuMa2ACNMapping[v24];
              }
              else {
                uint64_t v31 = v24;
              }
              v17[v24] = (const float *const)(*(void *)(v26 + 32 * v31) + 4 * v27);
              *(void *)&v22[8 * v24++] = (char *)v30 + 4 * v29;
              v29 += v28;
            }
            while (v19 != v24);
          }
          CFNumberRef v32 = v17;
          uint64_t v33 = v15;
          CA::AudioSampleRateConverter::Process((CA::AudioSampleRateConverter *)a1[26], v32, v15, v22, (float *const *)v13);
          *((_DWORD *)a1 + 24) += v13;
          unsigned int v11 = *((_DWORD *)a1 + 24);
        }
        else
        {
          if (v13 >= v12) {
            uint64_t v33 = v12;
          }
          else {
            uint64_t v33 = v13;
          }
          if (*((_DWORD *)a1 + 14))
          {
            unint64_t v34 = 0;
            uint64_t v35 = v33;
            uint64_t v36 = v89 - v12;
            unint64_t v37 = (void *)v35;
            size_t v38 = 4 * v35;
            do
            {
              if (*((_DWORD *)a1 + 32) == 7012356) {
                uint64_t v39 = kFuMa2ACNMapping[v34];
              }
              else {
                uint64_t v39 = v34;
              }
              memcpy((char *)a1[1] + 4 * (*((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 26) * v34++), (const void *)(*(void *)(*a2 + 32 * v39) + 4 * v36), v38);
            }
            while (v34 < *((unsigned int *)a1 + 14));
            unsigned int v11 = *((_DWORD *)a1 + 24);
            uint64_t v33 = (uint64_t)v37;
          }
          v11 += v33;
          *((_DWORD *)a1 + 24) = v11;
        }
        unsigned int v10 = *((_DWORD *)a1 + 26);
        if (v11 >= v10)
        {
          char v90 = (uint64_t *)v33;
          if (a1[18] != a1[17] && *((_DWORD *)a1 + 14))
          {
            uint64_t v40 = 0;
            unint64_t v41 = 0;
            do
            {
              vDSP_Length v42 = *((unsigned int *)a1 + 26);
              char v43 = (float *)a1[1] + (v42 * v41);
              vDSP_vsmul(v43, 1, (const float *)((char *)a1[17] + v40), v43, 1, v42);
              ++v41;
              v40 += 4;
            }
            while (v41 < *((unsigned int *)a1 + 14));
          }
          if (*((unsigned char *)a1 + 260))
          {
            long long v44 = memcpy(a1[4], a1[1], (char *)a1[2] - (char *)a1[1]);
            MEMORY[0x1F4188790](v44);
            long long v46 = (float *const *)((char *)&v86 - ((v45 + 15) & 0xFFFFFFFF0));
            if (v45 >= 0x200) {
              size_t v47 = 512;
            }
            else {
              size_t v47 = v45;
            }
            bzero((char *)&v86 - ((v45 + 15) & 0xFFFFFFFF0), v47);
            uint64_t v48 = *((unsigned int *)a1 + 14);
            MEMORY[0x1F4188790](v49);
            uint64_t v51 = (float *const *)((char *)&v86 - ((v50 + 15) & 0xFFFFFFFF0));
            if (v50 >= 0x200) {
              size_t v52 = 512;
            }
            else {
              size_t v52 = v50;
            }
            bzero((char *)&v86 - ((v50 + 15) & 0xFFFFFFFF0), v52);
            vDSP_Length v53 = *((unsigned int *)a1 + 26);
            if (v48)
            {
              unsigned int v54 = 0;
              uint64_t v55 = *v88;
              uint64_t v56 = *v87;
              uint64_t v57 = (float **)v46;
              uint64_t v58 = (float **)v51;
              do
              {
                *v57++ = (float *)(v55 + 4 * v54);
                *v58++ = (float *)(v56 + 4 * v54);
                v54 += v53;
                --v48;
              }
              while (v48);
            }
            ParametricFilters::process((uint64_t)a1[31], v51, v46, v53, 0);
            (*(void (**)(void, uint64_t *))(*(void *)**a1 + 72))(**a1, v88);
          }
          else
          {
            (*(void (**)(void, uint64_t *))(*(void *)**a1 + 72))(**a1, v87);
          }
          LODWORD(ExpectedNumberOfOutputFrames) = *((_DWORD *)a1 + 26);
          if (*((unsigned char *)a1 + 232))
          {
            uint64_t ExpectedNumberOfOutputFrames = (float *const *)CA::AudioSampleRateConverter::GetExpectedNumberOfOutputFrames((CA::AudioSampleRateConverter *)a1[28]);
            MEMORY[0x1F4188790](ExpectedNumberOfOutputFrames);
            int v61 = (const float *const *)((char *)&v86 - ((v60 + 15) & 0xFFFFFFFF0));
            if (v60 >= 0x200) {
              size_t v62 = 512;
            }
            else {
              size_t v62 = v60;
            }
            bzero((char *)&v86 - ((v60 + 15) & 0xFFFFFFFF0), v62);
            if (*((unsigned char *)a1 + 125) && *((_DWORD *)a1 + 30))
            {
              unint64_t v64 = 0;
              unsigned int v65 = *((_DWORD *)a1 + 26);
              unint64_t v66 = (float *)a1[1];
              do
              {
                IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)a1[23][v64], &v66[v65 * v64], &v66[v65 * v64], v65);
                unsigned int v65 = *((_DWORD *)a1 + 26);
                unint64_t v66 = (float *)a1[1];
                v61[v64] = &v66[v65 * v64];
                ++v64;
              }
              while (v64 < *((unsigned int *)a1 + 30));
            }
            if (*((_DWORD *)a1 + 15))
            {
              unsigned int v67 = 0;
              do
              {
                uint64_t v63 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 40))(**a1);
                (&v61[v67])[*((_DWORD *)a1 + 30)] = (const float *const)(*v63 + 4 * *((_DWORD *)a1 + 26) * v67);
                ++v67;
              }
              while (v67 < *((_DWORD *)a1 + 15));
            }
            uint64_t v68 = *((unsigned int *)a1 + 16);
            MEMORY[0x1F4188790](v63);
            int v70 = (char *)&v86 - ((v69 + 15) & 0xFFFFFFFF0);
            if (v69 >= 0x200) {
              size_t v71 = 512;
            }
            else {
              size_t v71 = v69;
            }
            bzero((char *)&v86 - ((v69 + 15) & 0xFFFFFFFF0), v71);
            if (v68)
            {
              uint64_t v72 = a1[9];
              uint64_t v73 = *((unsigned int *)a1 + 25);
              long long v74 = v70;
              do
              {
                uint64_t v75 = *v72;
                v72 += 3;
                *v74++ = v75 + 4 * v73;
                --v68;
              }
              while (v68);
            }
            CA::AudioSampleRateConverter::Process((CA::AudioSampleRateConverter *)a1[28], v61, *((_DWORD *)a1 + 26), v70, ExpectedNumberOfOutputFrames);
          }
          else
          {
            if (*((unsigned char *)a1 + 125) && *((_DWORD *)a1 + 30))
            {
              uint64_t v76 = 0;
              unint64_t v77 = 0;
              do
              {
                IR::FixedIntegerDelay::process((IR::FixedIntegerDelay *)a1[23][v77], (float *)a1[1] + (*((_DWORD *)a1 + 26) * v77), (float *)(a1[9][v76] + 4 * *((unsigned int *)a1 + 25)), ExpectedNumberOfOutputFrames);
                ++v77;
                v76 += 3;
              }
              while (v77 < *((unsigned int *)a1 + 30));
            }
            if (*((_DWORD *)a1 + 15))
            {
              unsigned int v78 = 0;
              do
              {
                uint64_t v79 = *((unsigned int *)a1 + 25);
                uint64_t v80 = a1[9][3 * v78 + 3 * *((_DWORD *)a1 + 30)];
                uint64_t v81 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 40))(**a1);
                memcpy((void *)(v80 + 4 * v79), (const void *)(*v81 + 4 * *((_DWORD *)a1 + 26) * v78++), 4 * *((unsigned int *)a1 + 26));
              }
              while (v78 < *((_DWORD *)a1 + 15));
            }
          }
          unsigned int v10 = *((_DWORD *)a1 + 26);
          unsigned int v11 = *((_DWORD *)a1 + 24) - v10;
          int v82 = *((_DWORD *)a1 + 25) + ExpectedNumberOfOutputFrames;
          *((_DWORD *)a1 + 24) = v11;
          *((_DWORD *)a1 + 25) = v82;
          LODWORD(v33) = v90;
        }
        uint64_t v12 = (v12 - v33);
      }
      while (v12);
    }
    unsigned int v83 = *((_DWORD *)a1 + 25);
    BOOL v84 = v83 >= v89;
    unsigned int v85 = v83 - v89;
    if (v84) {
      *((_DWORD *)a1 + 25) = v85;
    }
    *((_DWORD *)a1 + 29) = v89;
  }
}

void sub_1BB71975C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void covarianceBasedAdaptiveFilter::calculateSharpeningFilter(covarianceBasedAdaptiveFilter *this, CLiteMatrix *a2, const float **a3, CLiteMatrix *a4, CLiteMatrix *a5, char a6, float a7)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  int v109 = *(void *)a5;
  uint64_t v14 = (covarianceBasedAdaptiveFilter *)((char *)this + 144);
  CLiteMatrix::SetWithOther((uint64_t)this + 144, (uint64_t *)a5);
  uint64_t v15 = (void *)((char *)this + 1672);
  __uplo[0] = 76;
  int v16 = *((_DWORD *)this + 36);
  LODWORD(__n.realp) = v16;
  if (v16 <= 1) {
    int v16 = 1;
  }
  __CLPK_integer __info = 0;
  LODWORD(__lda.realp) = v16;
  CLiteMatrix::ToCLPKComplex(v14, (void *)this + 209);
  cpotrf_(__uplo, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 209), (__CLPK_integer *)&__lda, &__info);
  int v106 = (char *)a2;
  char v107 = a6;
  if (__uplo[0] == 76)
  {
    uint64_t v26 = *((void *)this + 18);
    unint64_t v27 = *((void *)this + 19);
    if (v26 * v27 == (uint64_t)(*((void *)this + 210) - *((void *)this + 209)) >> 3)
    {
      if (v27)
      {
        uint64_t v28 = 0;
        for (unint64_t i = 0; i < v27; ++i)
        {
          if (v26)
          {
            unint64_t v30 = 0;
            uint64_t v31 = 8 * v28;
            do
            {
              if (i <= v30)
              {
                int v33 = *(_DWORD *)(*v15 + v31);
                *(_DWORD *)CLiteMatrix::Get(v14, v30, i) = v33;
                int v32 = *(_DWORD *)(*v15 + v31 + 4);
              }
              else
              {
                *(_DWORD *)CLiteMatrix::Get(v14, v30, i) = 0;
                int v32 = 0;
              }
              CLiteMatrix::Get(v14, v30, i);
              _DWORD *v34 = v32;
              ++v30;
              uint64_t v26 = *(void *)v14;
              v31 += 8;
            }
            while (v30 < *(void *)v14);
            v28 += v30;
            unint64_t v27 = *((void *)this + 19);
          }
        }
      }
      goto LABEL_28;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__unint64_t m = 136315394;
      *(void *)&__m[4] = "LiteMatrix.h";
      *(_WORD *)&__m[12] = 1024;
      *(_DWORD *)&__m[14] = 390;
      uint64_t v104 = MEMORY[0x1E4F14500];
      goto LABEL_108;
    }
LABEL_109:
    __break(1u);
    return;
  }
  if (__uplo[0] == 85)
  {
    uint64_t v17 = *((void *)this + 18);
    unint64_t v18 = *((void *)this + 19);
    if (v17 * v18 == (uint64_t)(*((void *)this + 210) - *((void *)this + 209)) >> 3)
    {
      if (v18)
      {
        uint64_t v19 = 0;
        for (unint64_t j = 0; j < v18; ++j)
        {
          if (v17)
          {
            unint64_t v21 = 0;
            uint64_t v22 = 8 * v19;
            do
            {
              if (j >= v21)
              {
                int v24 = *(_DWORD *)(*v15 + v22);
                *(_DWORD *)CLiteMatrix::Get(v14, v21, j) = v24;
                int v23 = *(_DWORD *)(*v15 + v22 + 4);
              }
              else
              {
                *(_DWORD *)CLiteMatrix::Get(v14, v21, j) = 0;
                int v23 = 0;
              }
              CLiteMatrix::Get(v14, v21, j);
              *int v25 = v23;
              ++v21;
              uint64_t v17 = *(void *)v14;
              v22 += 8;
            }
            while (v21 < *(void *)v14);
            v19 += v21;
            unint64_t v18 = *((void *)this + 19);
          }
        }
      }
      goto LABEL_28;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__unint64_t m = 136315394;
      *(void *)&__m[4] = "LiteMatrix.h";
      *(_WORD *)&__m[12] = 1024;
      *(_DWORD *)&__m[14] = 362;
      uint64_t v104 = MEMORY[0x1E4F14500];
LABEL_108:
      _os_log_impl(&dword_1BB0CE000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d  bad argument size", __m, 0x12u);
      goto LABEL_109;
    }
    goto LABEL_109;
  }
LABEL_28:
  uint64_t v35 = *(void *)a4;
  if (*(void *)a4 != *((void *)a4 + 1)) {
    __assert_rtn("singularValueDecompositionOnlyUandS", "MatrixDecompositions.cpp", 82, "Cx.NumRows()==Cx.NumCols()");
  }
  if (*((void *)this + 63) != v35) {
    __assert_rtn("singularValueDecompositionOnlyUandS", "MatrixDecompositions.cpp", 85, "U.NumRows()==Cx.NumRows()");
  }
  if (*((void *)this + 64) != v35) {
    __assert_rtn("singularValueDecompositionOnlyUandS", "MatrixDecompositions.cpp", 86, "U.NumCols()==Cx.NumRows()");
  }
  *(_DWORD *)__unint64_t m = *(void *)a4;
  LODWORD(__n.realp) = v35;
  CLiteMatrix::ToCLPKComplex(a4, (void *)this + 209);
  __CLPK_integer __info = 0;
  LODWORD(__lda.realp) = 3 * v35;
  __uplo[0] = 83;
  char __jobvt = 78;
  cgesvd_(__uplo, &__jobvt, (__CLPK_integer *)__m, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 209), (__CLPK_integer *)__m, *((__CLPK_real **)this + 73), *((__CLPK_complex **)this + 215), (__CLPK_integer *)__m, 0, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 221), (__CLPK_integer *)&__lda, *((__CLPK_real **)this + 224), &__info);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 63, (void *)this + 215);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 544), (covarianceBasedAdaptiveFilter *)((char *)this + 504));
  vvsqrtf(*((float **)this + 73), *((const float **)this + 73), &v109);
  CLiteMatrix::SetWithOther((uint64_t)this + 184, (uint64_t *)this + 63);
  CLiteMatrix::ScaleCols((covarianceBasedAdaptiveFilter *)((char *)this + 184), (const float **)this + 73);
  unint64_t v37 = (float *)*((void *)this + 73);
  size_t v38 = (float *)*((void *)this + 74);
  if (v37 != v38)
  {
    uint64_t v39 = v37 + 1;
    if (v37 + 1 != v38)
    {
      float v40 = *v37;
      unint64_t v41 = v37 + 1;
      do
      {
        float v42 = *v41++;
        float v43 = v42;
        if (v40 < v42)
        {
          float v40 = v43;
          unint64_t v37 = v39;
        }
        uint64_t v39 = v41;
      }
      while (v41 != v38);
    }
  }
  if (v109 >= 1)
  {
    int64_t v44 = 0;
    float v45 = (float)(*v37 * a7) + 0.00000011921;
    do
    {
      float v46 = *(float *)(*((void *)this + 73) + 4 * v44);
      if (v46 < v45) {
        float v46 = v45;
      }
      *(float *)CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 608), v44, v44) = 1.0 / v46;
      ++v44;
    }
    while (v44 < v109);
  }
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 76, (covarianceBasedAdaptiveFilter *)((char *)this + 544), (covarianceBasedAdaptiveFilter *)((char *)this + 672), v36);
  if (v109 < 1)
  {
    uint64_t v49 = (const float *)*((void *)this + 89);
  }
  else
  {
    for (int64_t k = 0; k < v109; v49[k++] = *v48)
    {
      uint64_t v48 = (const float *)CLiteMatrix::Get(a4, k, k);
      uint64_t v49 = (const float *)*((void *)this + 89);
    }
  }
  vvsqrtf(*((float **)this + 203), v49, &v109);
  unint64_t v50 = (float *)*((void *)this + 203);
  uint64_t v51 = (float *)*((void *)this + 204);
  size_t v52 = v50 + 1;
  BOOL v53 = v50 == v51 || v52 == v51;
  unsigned int v54 = (float *)*((void *)this + 203);
  if (!v53)
  {
    float v55 = *v50;
    unsigned int v54 = (float *)*((void *)this + 203);
    uint64_t v56 = v50 + 1;
    do
    {
      float v57 = *v56++;
      float v58 = v57;
      if (v55 < v57)
      {
        float v55 = v58;
        unsigned int v54 = v52;
      }
      size_t v52 = v56;
    }
    while (v56 != v51);
  }
  uint64_t v59 = v109;
  if (v109 < 1)
  {
    unsigned int v67 = (float *)*((void *)this + 92);
  }
  else
  {
    int64_t v60 = (char *)v54 - (char *)v50;
    int v61 = (float *)*((void *)this + 89);
    float v62 = (float)(*(float *)((char *)v61 + v60) * 0.001) + 0.00000011921;
    uint64_t v63 = (float *)*((void *)this + 206);
    do
    {
      float v64 = v62;
      if (*v50 >= v62) {
        float v64 = *v61;
      }
      *v63++ = v64;
      ++v61;
      ++v50;
      --v59;
    }
    while (v59);
    int64_t v65 = 0;
    do
    {
      float v66 = (float)(*(float *)CLiteMatrix::Get(a5, v65, v65)
                  / (float)(*(float *)(*((void *)this + 206) + 4 * v65) + 0.00000011921))
          + 0.00001;
      unsigned int v67 = (float *)*((void *)this + 92);
      v67[v65++] = v66;
    }
    while (v65 < v109);
  }
  vvsqrtf(v67, v67, &v109);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 920), (covarianceBasedAdaptiveFilter *)((char *)this + 184));
  CLiteMatrix::ScaleCols((covarianceBasedAdaptiveFilter *)((char *)this + 920), (const float **)this + 92);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 115, v14, (covarianceBasedAdaptiveFilter *)((char *)this + 960), v68);
  uint64_t v69 = *((void *)this + 120);
  if (v69 != *((void *)this + 121)) {
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 105, "Cx.NumRows()==Cx.NumCols()");
  }
  if (*((void *)this + 130) != v69) {
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 108, "U.NumRows()==Cx.NumRows()");
  }
  if (*((void *)this + 131) != v69) {
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 109, "U.NumCols()==Cx.NumRows()");
  }
  if (*((void *)this + 140) != v69) {
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 110, "VH.NumRows()==Cx.NumCols()");
  }
  if (*((void *)this + 141) != v69) {
    __assert_rtn("singularValueDecompositionOnlyUandVH", "MatrixDecompositions.cpp", 111, "VH.NumCols()==Cx.NumCols()");
  }
  *(_DWORD *)__unint64_t m = *((void *)this + 120);
  LODWORD(__n.realp) = v69;
  CLiteMatrix::ToCLPKComplex((covarianceBasedAdaptiveFilter *)((char *)this + 960), (void *)this + 209);
  __CLPK_integer __info = 0;
  LODWORD(__lda.realp) = 3 * v69;
  __uplo[0] = 83;
  char __jobvt = 65;
  cgesvd_(__uplo, &__jobvt, (__CLPK_integer *)__m, (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 209), (__CLPK_integer *)__m, *((__CLPK_real **)this + 212), *((__CLPK_complex **)this + 215), (__CLPK_integer *)__m, *((__CLPK_complex **)this + 218), (__CLPK_integer *)&__n, *((__CLPK_complex **)this + 221), (__CLPK_integer *)&__lda, *((__CLPK_real **)this + 224), &__info);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 130, (void *)this + 215);
  CLiteMatrix::FromCLPKComplex((unint64_t *)this + 140, (void *)this + 218);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 130, (covarianceBasedAdaptiveFilter *)((char *)this + 1120), (covarianceBasedAdaptiveFilter *)((char *)this + 1200), v70);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 1160), (covarianceBasedAdaptiveFilter *)((char *)this + 1200));
  CLiteMatrix::MatrixMultiply((vDSP_Length *)v14, (covarianceBasedAdaptiveFilter *)((char *)this + 1160), (covarianceBasedAdaptiveFilter *)((char *)this + 1240), v71);
  uint64_t v72 = (char *)this + 1400;
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 155, (covarianceBasedAdaptiveFilter *)((char *)this + 672), (covarianceBasedAdaptiveFilter *)((char *)this + 1400), v73);
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 175, a4, (covarianceBasedAdaptiveFilter *)((char *)this + 1320), v74);
  CLiteMatrix::SetWithConjugateTranposeOfOther((covarianceBasedAdaptiveFilter *)((char *)this + 1440), (covarianceBasedAdaptiveFilter *)((char *)this + 1400));
  CLiteMatrix::MatrixMultiply((vDSP_Length *)this + 165, (covarianceBasedAdaptiveFilter *)((char *)this + 1440), (covarianceBasedAdaptiveFilter *)((char *)this + 1360), v75);
  if (v107)
  {
    uint64_t v76 = *((void *)a5 + 2) + 4 * ((uint64_t)(*((void *)a5 + 3) - *((void *)a5 + 2)) >> 3);
    *(void *)__unint64_t m = *((void *)a5 + 2);
    *(void *)&__m[8] = v76;
    unint64_t v77 = (float *)*((void *)this + 172);
    unsigned int v78 = &v77[(uint64_t)(*((void *)this + 173) - (void)v77) >> 3];
    __n.realp = v77;
    __n.imagp = v78;
    uint64_t v79 = (float *)(*((void *)this + 187) + 4 * ((uint64_t)(*((void *)this + 188) - *((void *)this + 187)) >> 3));
    __lda.realp = (float *)*((void *)this + 187);
    __lda.imagp = v79;
    *(_DWORD *)__uplo = -1518338048;
    __CLPK_integer __info = 629145600;
    vDSP_viclip(v77, 1, (const float *)__uplo, (const float *)&__info, v77, 1, *(void *)a5 * *((void *)a5 + 1));
    vDSP_viclip(v78, 1, (const float *)__uplo, (const float *)&__info, v78, 1, *(void *)a5 * *((void *)a5 + 1));
    vDSP_zvdiv(&__n, 1, (const DSPSplitComplex *)__m, 1, &__lda, 1, *(void *)a5 * *((void *)a5 + 1));
    vDSP_vclr(*((float **)this + 192), 1, (uint64_t)(*((void *)this + 193) - *((void *)this + 192)) >> 2);
    unint64_t v81 = *((void *)this + 190);
    if (v81 != *((void *)this + 186)) {
      __assert_rtn("Diag", "LiteMatrix.cpp", 418, "outputMatrix.NumRows()==inputMatrix.NumCols()");
    }
    if (*((void *)this + 191) != v81) {
      __assert_rtn("Diag", "LiteMatrix.cpp", 419, "outputMatrix.NumCols()==inputMatrix.NumCols()");
    }
    int v82 = (unint64_t *)((char *)this + 1520);
    unint64_t v83 = *((void *)this + 185);
    if (v81 < v83) {
      unint64_t v83 = *((void *)this + 190);
    }
    float32x4_t v105 = (covarianceBasedAdaptiveFilter *)((char *)this + 1400);
    if (v83)
    {
      for (unint64_t m = 0; m < v89; ++m)
      {
        float v85 = CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1480), m, m);
        *(float *)CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1520), m, m) = v85;
        CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1480), m, m);
        int v87 = v86;
        CLiteMatrix::Get((covarianceBasedAdaptiveFilter *)((char *)this + 1520), m, m);
        *uint64_t v88 = v87;
        unint64_t v89 = *((void *)this + 185);
        if (*((void *)this + 186) < v89) {
          unint64_t v89 = *((void *)this + 186);
        }
      }
      unint64_t v81 = *((void *)this + 191);
    }
    double v108 = (vDSP_Length *)((char *)this + 1560);
    if (v81)
    {
      unint64_t v90 = 0;
      int v91 = 0;
      uint64_t v92 = *((void *)this + 192);
      uint64_t v93 = v92 + 4 * ((*((void *)this + 193) - v92) >> 3);
      uint64_t v94 = *((void *)this + 197);
      uint64_t v95 = v94 + 4 * ((*((void *)this + 198) - v94) >> 3);
      unint64_t v96 = *v82;
      if (v96 <= 1) {
        uint64_t v97 = 1;
      }
      else {
        uint64_t v97 = v96;
      }
      unint64_t v98 = v96;
      do
      {
        if (v98)
        {
          uint64_t v99 = v91;
          uint64_t v100 = v97;
          do
          {
            float v101 = std::sqrt[abi:ne180100]<double>(*(float *)(v92 + 4 * v99), *(float *)(v93 + 4 * v99));
            *(float *)(v94 + 4 * v99) = v101;
            float v103 = v102;
            *(float *)(v95 + 4 * v99++) = v103;
            --v100;
          }
          while (v100);
          unint64_t v98 = v96;
          int v91 = v99;
        }
        ++v90;
      }
      while (v81 > v90);
    }
    CLiteMatrix::MatrixMultiply(v108, v105, (const CLiteMatrix *)v106, v80);
  }
  else
  {
    CLiteMatrix::SetWithOther((uint64_t)a3, (uint64_t *)a5);
    LiteMatrixBase<float>::operator-=(a3, (void *)this + 170);
    *(_DWORD *)__unint64_t m = -1082130432;
    vDSP_vsmul(a3[2], 1, (const float *)__m, (float *)a3[2], 1, a3[3] - a3[2]);
    *(_OWORD *)int v106 = *(_OWORD *)v72;
    if (v72 != v106) {
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(v106 + 16, *((char **)this + 177), *((void *)this + 178), (uint64_t)(*((void *)this + 178) - *((void *)this + 177)) >> 2);
    }
  }
}

uint64_t VoiceProcessor::SampleRateConverter::GetNumberOfSourceFrames(VoiceProcessor::SampleRateConverter *this)
{
  return AudioSampleRateConverterGetRequiredNumberOfInputFrames();
}

uint64_t VoiceProcessor::SampleRateConverter::Convert(CA::AudioSampleRateConverter **this, unsigned int *a2, unsigned int *a3, const AudioBufferList *a4, const AudioBufferList *a5)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t NumberOfChannels = AudioSampleRateConverterGetNumberOfChannels();
  UInt32 v11 = NumberOfChannels;
  MEMORY[0x1F4188790](NumberOfChannels);
  uint64_t v14 = (const float *const *)((char *)v30 - v13);
  if (v12 >= 0x200) {
    size_t v15 = 512;
  }
  else {
    size_t v15 = v12;
  }
  bzero((char *)v30 - v13, v15);
  LODWORD(v17) = a4->mNumberBuffers;
  if (v11 >= a4->mNumberBuffers) {
    uint64_t v17 = v17;
  }
  else {
    uint64_t v17 = v11;
  }
  if (v17)
  {
    p_mData = &a4->mBuffers[0].mData;
    uint64_t v19 = (const float **)v14;
    do
    {
      uint64_t v20 = (const float *)*p_mData;
      p_mData += 2;
      *v19++ = v20;
      --v17;
    }
    while (v17);
  }
  MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFF0);
  bzero(v22, v15);
  LODWORD(v23) = a5->mNumberBuffers;
  if (v11 >= a5->mNumberBuffers) {
    uint64_t v23 = v23;
  }
  else {
    uint64_t v23 = v11;
  }
  if (v23)
  {
    int v24 = &a5->mBuffers[0].mData;
    int v25 = v22;
    do
    {
      uint64_t v26 = *v24;
      v24 += 2;
      *v25++ = v26;
      --v23;
    }
    while (v23);
  }
  unsigned int v27 = *a2;
  unsigned int v28 = *a3;
  uint64_t result = CA::AudioSampleRateConverter::Process(*this, v14, *a2, v22, (float *const *)*a3);
  *a2 = v27;
  *a3 = v28;
  return result;
}

void sub_1BB71A4C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AUXTC::newDspLibAlgorithm(AUXTC *this)
{
  return (uint64_t)this + 2168;
}

uint64_t AUXTC::deleteAlgorithms(AUXTC *this)
{
  *((void *)this + 66) = 0;
  AUDspLib::deleteAlgorithms(this);
  return 0;
}

uint64_t AUXTC::Version(AUXTC *this)
{
  return 197890;
}

uint64_t AUXTC::SupportedNumChannels(AUXTC *this, const AUChannelInfo **a2)
{
  if (a2) {
    *a2 = (const AUChannelInfo *)&AUXTC::SupportedNumChannels(AUChannelInfo const**)::sChannels;
  }
  return 1;
}

uint64_t AUXTC::GetParameterValueStrings(AUXTC *this, unsigned int a2, unsigned int a3, const __CFArray **a4)
{
  if (a3 == 1869769061) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a3 == 1937141612) {
    unsigned int v4 = 16;
  }
  if (v4 > 0x3F) {
    return 4294956418;
  }
  if (!a4) {
    return 0;
  }
  int v6 = *(_DWORD *)(*((void *)this + 211) + 4 * v4);
  if (v6 == 1)
  {
    unint64_t v7 = DspLib::XTC::DeviceOrientations::kNames;
    CFIndex v8 = 7;
  }
  else if ((v6 - 23) > 6)
  {
    if (v6 == 15)
    {
      unint64_t v7 = DspLib::XTC::TestNoiseGeneratorModes::kNames;
    }
    else
    {
      if (v6) {
        return 4294956418;
      }
      unint64_t v7 = DspLib::XTC::BypassModes::kNames;
    }
    CFIndex v8 = 3;
  }
  else
  {
    unint64_t v7 = DspLib::XTC::Setups::kNames;
    CFIndex v8 = 4;
  }
  CFArrayRef v10 = CFArrayCreate(0, (const void **)v7, v8, 0);
  uint64_t result = 0;
  *a4 = v10;
  return result;
}

uint64_t AUXTC::RestoreState(AUXTC *this, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v29 = [a2 objectForKey:@"DspLibXTC_customFilterDictionary"];
  *((unsigned char *)this + 2768) = 0;
  if (!v29) {
    goto LABEL_23;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v4 = v29;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v35 objects:v40 count:16];
  if (!v5)
  {

LABEL_12:
    DeepCFDictionaryRef Copy = CFPropertyListCreateDeepCopy(0, v4, 2uLL);
    uint64_t v13 = (void *)*((void *)this + 337);
    *((void *)this + 337) = DeepCopy;

    uint64_t v14 = (NSDictionary *)*((void *)this + 337);
    if (v14 && load_W_filters(v14, (AUXTC *)((char *)this + 2168)))
    {
      *((unsigned char *)this + 2768) = 1;
      AUXTC::newFIRMatrix((AUXTC *)&v34);
    }
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v15 = *((id *)this + 337);
    uint64_t v16 = [v15 countByEnumeratingWithState:&v30 objects:v39 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v31 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v19 = [*((id *)this + 337) objectForKey:*(void *)(*((void *)&v30 + 1) + 8 * i)];
          [v19 removeObjectForKey:@"W"];
        }
        uint64_t v16 = [v15 countByEnumeratingWithState:&v30 objects:v39 count:16];
      }
      while (v16);
    }

    goto LABEL_23;
  }
  uint64_t v6 = *(void *)v36;
  char v7 = 1;
  do
  {
    for (uint64_t j = 0; j != v5; ++j)
    {
      if (*(void *)v36 != v6) {
        objc_enumerationMutation(v4);
      }
      uint64_t v9 = [v4 objectForKey:*(void *)(*((void *)&v35 + 1) + 8 * j)];
      CFArrayRef v10 = [v9 objectForKey:@"W"];
      BOOL v11 = v10 != 0;

      v7 &= v11;
    }
    uint64_t v5 = [v4 countByEnumeratingWithState:&v35 objects:v40 count:16];
  }
  while (v5);

  if (v7) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v20 = AUDspLib::RestoreState((OpaqueAudioComponentInstance **)this, a2);
  float v21 = *((float *)this + 1236);
  uint64_t v22 = (AUXTC *)((char *)this + 32);
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v22, 0);
  ausdk::AUElement::SetParameter(Element, 0x10u, v21, 0);
  unsigned int v24 = AUXTC::mDeviceOrientationCachedPrevious;
  int v25 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v22, 0);
  ausdk::AUElement::SetParameter(v25, 1u, (float)v24, 0);
  unsigned int v26 = AUXTC::mDeviceOrientationCachedCurrent;
  unsigned int v27 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v22, 0);
  ausdk::AUElement::SetParameter(v27, 1u, (float)v26, 0);

  return v20;
}

void sub_1BB71A91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21 = a20;
  a20 = 0;
  if (v21) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&a20, v21);
  }

  _Unwind_Resume(a1);
}

uint64_t load_W_filters(NSDictionary *a1, DspLib::XTC::Algorithm *a2)
{
  CFDictionaryRef v3 = a1;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = [(NSDictionary *)v3 count];
    uint64_t v6 = 0;
    if (a2 && v5)
    {
      uint64_t v7 = [(NSDictionary *)v4 objectForKey:@"CoefficientsLandscape"];

      if (v7)
      {
        uint64_t v8 = DspLib::XTC::Algorithm::wFilters(a2, 0);
        LOBYTE(v7) = read_W_dictionary(v4, v8, @"CoefficientsLandscape");
        char v9 = v7 ^ 1;
      }
      else
      {
        char v9 = 0;
      }
      CFArrayRef v10 = [(NSDictionary *)v4 objectForKey:@"CoefficientsPortrait"];

      if (v10)
      {
        uint64_t v11 = DspLib::XTC::Algorithm::wFilters(a2, 1);
        if (read_W_dictionary(v4, v11, @"CoefficientsPortrait")) {
          LOBYTE(v7) = 1;
        }
        else {
          char v9 = 1;
        }
      }
      uint64_t v12 = 0;
      char v13 = 1;
      do
      {
        char v14 = v13;
        id v15 = objc_msgSend(NSString, "stringWithFormat:", @"Setup_%d", v12);
        uint64_t v16 = [(NSDictionary *)v4 objectForKey:v15];

        if (v16)
        {
          uint64_t v17 = DspLib::XTC::Algorithm::wFilters(a2, v12);
          if (read_W_dictionary(v4, v17, v15)) {
            LOBYTE(v7) = 1;
          }
          else {
            char v9 = 1;
          }
        }

        char v13 = 0;
        uint64_t v12 = 1;
      }
      while ((v14 & 1) != 0);
      uint64_t v6 = v7 & ((v9 & 1) == 0);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1BB71AB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUXTC::newFIRMatrix(AUXTC *this)
{
}

void sub_1BB71ABF0(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10A0C40A4A4A4D4);
  _Unwind_Resume(a1);
}

void ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::store(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = 0;
  uint64_t v4 = a1 + 64;
  while (ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::pop(v4, &v6));
  if (!*a2) {
    __assert_rtn("push", "deferred_deletion_queue.h", 71, "ioObject");
  }
  atomic_exchange((atomic_uchar *volatile)(a1 + 2049), 1u);
  uint64_t v7 = *a2;
  if (boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 128, &v7))
  {
    *a2 = 0;
  }
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::drain_trash(v4);
  uint64_t v5 = v6;
  uint64_t v6 = 0;
  if (v5) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&v6, v5);
  }
}

void sub_1BB71ACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10 = a9;
  a9 = 0;
  if (v10) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&a9, v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::pop(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  BOOL v4 = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &v11);
  if (v4)
  {
    uint64_t v5 = v11;
    if (!v11) {
      __assert_rtn("pop", "deferred_deletion_queue.h", 113, "pendingObject");
    }
    uint64_t v6 = *a2;
    if (*a2)
    {
      *a2 = 0;
      uint64_t v10 = v6;
      if (!boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::do_push<false>(a1 + 1024, &v10))
      {
        exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "trash queue exceeded capacity, object memory leaked");
      }
      uint64_t v7 = *a2;
      *a2 = v5;
      if (v7) {
        std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)a2, v7);
      }
    }
    else
    {
      *a2 = v11;
    }
  }
  return v4;
}

void sub_1BB71ADF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::drain_trash(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = (atomic_uint *)(a1 + 1024);
  for (uint64_t i = a1 + 1984; ; std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100](i, v4))
  {
    BOOL result = boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>(v1, &v4);
    if (!result) {
      break;
    }
    if (!v4) {
      __assert_rtn("drain_trash", "deferred_deletion_queue.h", 146, "trashObject");
    }
  }
  return result;
}

uint64_t read_W_dictionary(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = [v5 objectForKey:v6];
  uint64_t v8 = v7;
  if (v7)
  {
    char v9 = [v7 objectForKey:@"SampleRate"];
    uint64_t v10 = v9;
    if (!v9 || ([v9 floatValue], !a2))
    {
      uint64_t v44 = 0;
LABEL_54:

      goto LABEL_55;
    }
    *(_DWORD *)(a2 + 8) = v11;
    id v12 = [v8 objectForKey:@"W"];
    char v13 = v12;
    if (v12)
    {
      char v14 = [v12 objectForKey:@"W11real"];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        id v16 = v13;
        unsigned int v67 = [v16 objectForKey:@"W11real"];
        if (v67)
        {
          float v66 = [v16 objectForKey:@"W11imag"];
          if (v66)
          {
            int64_t v65 = [v16 objectForKey:@"W21real"];
            if (v65)
            {
              float v64 = [v16 objectForKey:@"W21imag"];
              if (v64)
              {
                uint64_t v63 = [v16 objectForKey:@"W12real"];
                if (v63)
                {
                  float v62 = [v16 objectForKey:@"W12imag"];
                  if (v62)
                  {
                    uint64_t v17 = [v16 objectForKey:@"W22real"];
                    if (v17)
                    {
                      int v61 = [v16 objectForKey:@"W22imag"];
                      if (v61)
                      {
                        float v55 = v17;
                        unsigned int v18 = [v67 count];
                        *(void *)a2 = v18;
                        BOOL v53 = (DspLib::ComplexSpan *)(a2 + 16);
                        uint64_t v54 = v18;
                        for (uint64_t i = 16; i != 336; i += 80)
                          DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a2 + i), *(void *)a2);
                        uint64_t v17 = v55;
                        if (v54)
                        {
                          unint64_t v20 = 0;
                          uint64_t v51 = (DspLib::ComplexSpan *)(a2 + 96);
                          size_t v52 = (DspLib::ComplexSpan *)(a2 + 176);
                          unint64_t v50 = (DspLib::ComplexSpan *)(a2 + 256);
                          while (1)
                          {
                            int64_t v60 = [v67 objectAtIndex:v20];
                            if (!v60) {
                              goto LABEL_44;
                            }
                            uint64_t v59 = [v66 objectAtIndex:v20];
                            if (!v59) {
                              goto LABEL_43;
                            }
                            float v58 = [v65 objectAtIndex:v20];
                            if (!v58) {
                              goto LABEL_42;
                            }
                            float v57 = [v64 objectAtIndex:v20];
                            if (!v57) {
                              break;
                            }
                            uint64_t v56 = [v63 objectAtIndex:v20];
                            if (!v56)
                            {
                              uint64_t v48 = 0;
                              goto LABEL_40;
                            }
                            uint64_t v21 = [v62 objectAtIndex:v20];
                            if (!v21) {
                              goto LABEL_39;
                            }
                            uint64_t v22 = [v17 objectAtIndex:v20];
                            if (!v22)
                            {
                              uint64_t v17 = v55;
LABEL_39:
                              uint64_t v48 = v56;

LABEL_40:
LABEL_41:

LABEL_42:
LABEL_43:

                              goto LABEL_44;
                            }
                            uint64_t v23 = [v61 objectAtIndex:v20];

                            uint64_t v17 = v55;
                            if (!v23) {
                              goto LABEL_44;
                            }
                            unsigned int v24 = [v67 objectAtIndex:v20];
                            [v24 floatValue];
                            float v26 = v25;
                            unsigned int v27 = [v66 objectAtIndex:v20];
                            [v27 floatValue];
                            v68.imag = v28;
                            v68.real = v26;
                            DspLib::ComplexSpan::setElement(v53, v20, v68);

                            unsigned int v29 = [v65 objectAtIndex:v20];
                            [v29 floatValue];
                            float v31 = v30;
                            long long v32 = [v64 objectAtIndex:v20];
                            [v32 floatValue];
                            v69.imag = v33;
                            v69.real = v31;
                            DspLib::ComplexSpan::setElement(v52, v20, v69);

                            uint64_t v34 = [v63 objectAtIndex:v20];
                            [v34 floatValue];
                            float v36 = v35;
                            long long v37 = [v62 objectAtIndex:v20];
                            [v37 floatValue];
                            v70.imag = v38;
                            v70.real = v36;
                            DspLib::ComplexSpan::setElement(v51, v20, v70);

                            uint64_t v39 = [v55 objectAtIndex:v20];
                            [v39 floatValue];
                            float v41 = v40;
                            float v42 = [v61 objectAtIndex:v20];
                            [v42 floatValue];
                            v71.imag = v43;
                            v71.real = v41;
                            DspLib::ComplexSpan::setElement(v50, v20, v71);

                            if (v54 == ++v20) {
                              goto LABEL_27;
                            }
                          }

                          goto LABEL_41;
                        }
LABEL_27:

                        goto LABEL_35;
                      }
LABEL_44:
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        float v46 = [v13 objectForKey:@"W11real"];
        objc_opt_class();
        char v47 = objc_opt_isKindOfClass();

        if (v47 & 1) != 0 && (parseCoefficientsData(v13, (unint64_t *)a2))
        {
LABEL_35:
          uint64_t v44 = 1;
LABEL_53:

          goto LABEL_54;
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      for (uint64_t j = 16; j != 336; j += 80)
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a2 + j), *(void *)a2);
    }
    uint64_t v44 = 0;
    goto LABEL_53;
  }
  uint64_t v44 = 0;
LABEL_55:

  return v44;
}

void sub_1BB71B474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t parseCoefficientsData(void *a1, unint64_t *a2)
{
  v71[1] = *(id *)MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = [v3 objectForKey:@"W11real"];
  if (v4)
  {
    id v5 = [v3 objectForKey:@"W11imag"];
    if (!v5)
    {
      id v10 = 0;
      uint64_t v14 = 0;
LABEL_41:

      goto LABEL_42;
    }
    id v6 = [v3 objectForKey:@"W21real"];
    if (!v6)
    {
      id v10 = 0;
      uint64_t v14 = 0;
LABEL_40:

      goto LABEL_41;
    }
    id v7 = [v3 objectForKey:@"W21imag"];
    if (!v7)
    {
      id v10 = 0;
      uint64_t v14 = 0;
LABEL_39:

      goto LABEL_40;
    }
    id v8 = [v3 objectForKey:@"W12real"];
    if (!v8)
    {
      id v10 = 0;
      uint64_t v14 = 0;
LABEL_38:

      goto LABEL_39;
    }
    id v56 = v7;
    id v9 = [v3 objectForKey:@"W12imag"];
    if (!v9)
    {
      id v10 = 0;
      uint64_t v14 = 0;
LABEL_37:

      id v7 = v56;
      goto LABEL_38;
    }
    id v10 = [v3 objectForKey:@"W22real"];
    if (!v10)
    {
      uint64_t v14 = 0;
LABEL_36:

      goto LABEL_37;
    }
    id v53 = v9;
    id v54 = v8;
    id v52 = v6;
    id v55 = v10;
    int v11 = [v3 objectForKey:@"W22imag"];
    if (!v11)
    {
      id v15 = 0;
      id v10 = 0;
      uint64_t v14 = 0;
      id v6 = v52;
      id v9 = v53;
      id v8 = v54;
LABEL_35:

      goto LABEL_36;
    }
    uint64_t v51 = v11;
    id v12 = [v3 objectForKey:@"WDataIsCompressed"];
    int v13 = [v12 BOOLValue];

    if (v13)
    {
      v71[0] = 0;
      uint64_t v63 = [v4 decompressedDataUsingAlgorithm:3 error:v71];
      id v10 = v71[0];

      id v6 = v52;
      id v9 = v53;
      id v8 = v54;
      if (v10)
      {
        uint64_t v14 = 0;
LABEL_33:
        uint64_t v4 = v63;
LABEL_34:
        id v15 = v51;
        goto LABEL_35;
      }
      id v70 = 0;
      float v62 = [v5 decompressedDataUsingAlgorithm:3 error:&v70];
      id v10 = v70;

      id v6 = v52;
      id v9 = v53;
      id v8 = v54;
      if (v10) {
        goto LABEL_31;
      }
      id v69 = 0;
      id v8 = [v54 decompressedDataUsingAlgorithm:3 error:&v69];
      id v10 = v69;

      id v6 = v52;
      id v9 = v53;
      if (v10) {
        goto LABEL_31;
      }
      id v68 = 0;
      id v54 = v8;
      id v9 = [v53 decompressedDataUsingAlgorithm:3 error:&v68];
      id v10 = v68;

      id v6 = v52;
      if (v10
        || (id v67 = 0,
            id v53 = v9,
            id v54 = v8,
            [v52 decompressedDataUsingAlgorithm:3 error:&v67],
            id v6 = (id)objc_claimAutoreleasedReturnValue(),
            id v10 = v67,
            v52,
            v10))
      {
LABEL_31:
        uint64_t v14 = 0;
LABEL_32:
        id v5 = v62;
        goto LABEL_33;
      }
      id v66 = 0;
      id v53 = v9;
      id v54 = v8;
      id v52 = v6;
      uint64_t v48 = [v56 decompressedDataUsingAlgorithm:3 error:&v66];
      id v10 = v66;

      if (v10)
      {
        uint64_t v14 = 0;
LABEL_47:
        id v56 = v48;
        goto LABEL_32;
      }
      id v65 = 0;
      id v53 = v9;
      id v54 = v8;
      id v56 = v48;
      id v52 = v6;
      uint64_t v49 = [v55 decompressedDataUsingAlgorithm:3 error:&v65];
      id v10 = v65;

      if (v10)
      {
        uint64_t v14 = 0;
        id v55 = v49;
        goto LABEL_47;
      }
      id v64 = 0;
      id v53 = v9;
      id v54 = v8;
      id v56 = v48;
      id v52 = v6;
      int v61 = [v51 decompressedDataUsingAlgorithm:3 error:&v64];
      id v10 = v64;

      if (v10)
      {
        uint64_t v14 = 0;
        id v15 = v61;
        id v5 = v62;
        id v55 = v49;
        id v56 = v48;
        uint64_t v4 = v63;
        goto LABEL_35;
      }
      uint64_t v51 = v61;
      id v54 = v8;
      id v55 = v49;
      id v53 = v9;
      id v56 = v48;
      id v5 = v62;
      uint64_t v4 = v63;
    }
    else
    {
      id v6 = v52;
    }
    id v16 = v56;
    id v52 = v6;
    unint64_t v17 = [v4 length];
    unint64_t v60 = (v17 >> 2);
    *a2 = v60;
    float v57 = a2 + 2;
    for (uint64_t i = 2; i != 42; i += 10)
      DspLib::ComplexVector::setLength((DspLib::ComplexVector *)&a2[i], *a2);
    uint64_t v50 = (uint64_t)&v50;
    uint64_t v20 = 4 * v60;
    *(void *)&double v21 = MEMORY[0x1F4188790](v19).n128_u64[0];
    uint64_t v63 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    uint64_t v22 = objc_msgSend(v4, "length", v21);
    uint64_t v23 = [v4 getBytes:v63 length:v22];
    *(void *)&double v24 = MEMORY[0x1F4188790](v23).n128_u64[0];
    float v62 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    uint64_t v25 = objc_msgSend(v5, "length", v24);
    uint64_t v26 = [v5 getBytes:v62 length:v25];
    *(void *)&double v27 = MEMORY[0x1F4188790](v26).n128_u64[0];
    uint64_t v59 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    uint64_t v28 = objc_msgSend(v54, "length", v27);
    uint64_t v29 = [v54 getBytes:v59 length:v28];
    *(void *)&double v30 = MEMORY[0x1F4188790](v29).n128_u64[0];
    float v58 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    uint64_t v31 = objc_msgSend(v53, "length", v30);
    uint64_t v32 = [v53 getBytes:v58 length:v31];
    *(void *)&double v33 = MEMORY[0x1F4188790](v32).n128_u64[0];
    int v61 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    uint64_t v34 = objc_msgSend(v6, "length", v33);
    uint64_t v35 = [v6 getBytes:v61 length:v34];
    float v36 = (char *)&v50 - ((v20 + 15) & 0x7FFFFFFF0);
    uint64_t v37 = objc_msgSend(v16, "getBytes:length:", v36, objc_msgSend(v16, "length", MEMORY[0x1F4188790](v35).n128_f64[0]));
    *(void *)&double v38 = MEMORY[0x1F4188790](v37).n128_u64[0];
    uint64_t v39 = objc_msgSend(v55, "length", v38);
    uint64_t v40 = [v55 getBytes:v36 length:v39];
    *(void *)&double v41 = MEMORY[0x1F4188790](v40).n128_u64[0];
    uint64_t v42 = objc_msgSend(v51, "length", v41);
    [v51 getBytes:v36 length:v42];
    if ((v17 & 0x3FFFFFFFCLL) != 0)
    {
      unint64_t v43 = 0;
      uint64_t v44 = a2 + 22;
      float v45 = a2 + 12;
      float v46 = a2 + 32;
      do
      {
        v72.real = *(float *)&v63[4 * v43];
        v72.imag = *(float *)&v62[4 * v43];
        DspLib::ComplexSpan::setElement(v57, v43, v72);
        v73.real = *(float *)&v61[4 * v43];
        v73.imag = *(float *)&v36[4 * v43];
        DspLib::ComplexSpan::setElement(v44, v43, v73);
        v74.real = *(float *)&v59[4 * v43];
        v74.imag = *(float *)&v58[4 * v43];
        DspLib::ComplexSpan::setElement(v45, v43, v74);
        v75.real = *(float *)&v36[4 * v43];
        v75.imag = v75.real;
        DspLib::ComplexSpan::setElement(v46, v43++, v75);
      }
      while (v60 != v43);
    }
    id v10 = 0;
    uint64_t v14 = 1;
    id v6 = v52;
    id v9 = v53;
    id v8 = v54;
    goto LABEL_34;
  }
  uint64_t v14 = 0;
LABEL_42:

  return v14;
}

void sub_1BB71BDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUXTC::SaveState(CFPropertyListRef *this, ausdk **a2)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  AUDspLib::SaveState((AUDspLib *)this, a2);
  DeepCFDictionaryRef Copy = (void *)CFPropertyListCreateDeepCopy(0, this[337], 2uLL);
  if (DeepCopy)
  {
    DSPComplex v75 = (id *)a2;
    uint64_t v4 = 0;
    unsigned int v78 = this;
    uint64_t v76 = (DspLib::XTC::Algorithm *)(this + 271);
    char v5 = 1;
    do
    {
      char v81 = v5;
      uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"Setup_%d", v4);
      id v7 = (float *)v78[68];
      if (v4 == vcvtas_u32_f32(fmaxf(v7[23], 0.0)))
      {
LABEL_4:
        unint64_t v77 = (void *)v6;
        uint64_t v79 = [DeepCopy objectForKey:v6];
        id v8 = [v79 objectForKey:@"W"];
        if (!v8)
        {
          id v9 = [MEMORY[0x1E4F1CA60] dictionary];
          uint64_t v10 = DspLib::XTC::Algorithm::wFilters(v76, v4);
          id v8 = v9;
          unint64_t v11 = *(void *)(v10 + 32);
          unint64_t v89 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          obuint64_t j = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          int v86 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          float v85 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          BOOL v84 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          int v82 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          unint64_t v83 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          id v12 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v11];
          if (v11)
          {
            unint64_t v13 = 0;
            uint64_t v14 = (void *)(v10 + 16);
            id v15 = (void *)(v10 + 96);
            id v16 = (void *)(v10 + 176);
            unint64_t v17 = (void *)(v10 + 256);
            unsigned int v18 = 1;
            do
            {
              uint64_t v19 = NSNumber;
              *(float *)&double v20 = DspLib::ComplexSpan::operator[](v14, v13);
              double v21 = [v19 numberWithFloat:v20];
              [v89 setObject:v21 atIndexedSubscript:v13];

              uint64_t v22 = NSNumber;
              DspLib::ComplexSpan::operator[](v14, v13);
              LODWORD(v24) = v23;
              uint64_t v25 = [v22 numberWithFloat:v24];
              [obj setObject:v25 atIndexedSubscript:v13];

              uint64_t v26 = NSNumber;
              *(float *)&double v27 = DspLib::ComplexSpan::operator[](v15, v13);
              uint64_t v28 = [v26 numberWithFloat:v27];
              [v86 setObject:v28 atIndexedSubscript:v13];

              uint64_t v29 = NSNumber;
              DspLib::ComplexSpan::operator[](v15, v13);
              LODWORD(v31) = v30;
              uint64_t v32 = [v29 numberWithFloat:v31];
              [v85 setObject:v32 atIndexedSubscript:v13];

              double v33 = NSNumber;
              *(float *)&double v34 = DspLib::ComplexSpan::operator[](v16, v13);
              uint64_t v35 = [v33 numberWithFloat:v34];
              [v84 setObject:v35 atIndexedSubscript:v13];

              float v36 = NSNumber;
              DspLib::ComplexSpan::operator[](v16, v13);
              LODWORD(v38) = v37;
              uint64_t v39 = [v36 numberWithFloat:v38];
              [v82 setObject:v39 atIndexedSubscript:v13];

              uint64_t v40 = NSNumber;
              *(float *)&double v41 = DspLib::ComplexSpan::operator[](v17, v13);
              uint64_t v42 = [v40 numberWithFloat:v41];
              [v83 setObject:v42 atIndexedSubscript:v13];

              unint64_t v43 = NSNumber;
              DspLib::ComplexSpan::operator[](v17, v13);
              LODWORD(v45) = v44;
              float v46 = [v43 numberWithFloat:v45];
              [v12 setObject:v46 atIndexedSubscript:v13];

              unint64_t v13 = v18;
            }
            while (v11 > v18++);
          }
          [v8 setObject:v89 forKey:@"W11real"];
          [v8 setObject:obj forKey:@"W11imag"];
          [v8 setObject:v86 forKey:@"W12real"];
          [v8 setObject:v85 forKey:@"W12imag"];
          [v8 setObject:v84 forKey:@"W21real"];
          [v8 setObject:v82 forKey:@"W21imag"];
          [v8 setObject:v83 forKey:@"W22real"];
          [v8 setObject:v12 forKey:@"W22imag"];

          [v79 setObject:v8 forKey:@"W"];
        }
        unint64_t v90 = v8;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        uint64_t v48 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"W11real", @"W11imag", @"W12real", @"W12imag", @"W21real", @"W21imag", @"W22real", @"W22imag", 0, v75);
        id obja = v48;
        uint64_t v49 = [v48 countByEnumeratingWithState:&v91 objects:v101 count:16];
        if (v49)
        {
          uint64_t v50 = *(void *)v92;
          do
          {
            for (uint64_t i = 0; i != v49; ++i)
            {
              if (*(void *)v92 != v50) {
                objc_enumerationMutation(obja);
              }
              id v52 = *(void **)(*((void *)&v91 + 1) + 8 * i);
              id v53 = v90;
              id v54 = v52;
              id v55 = [v53 objectForKey:v54];
              std::vector<float>::vector(__p, [v55 count]);
              long long v98 = 0u;
              long long v99 = 0u;
              long long v96 = 0u;
              long long v97 = 0u;
              id v56 = v55;
              uint64_t v57 = [v56 countByEnumeratingWithState:&v96 objects:buf count:16];
              if (v57)
              {
                LODWORD(v58) = 0;
                uint64_t v59 = *(void *)v97;
                do
                {
                  uint64_t v60 = 0;
                  uint64_t v58 = (int)v58;
                  do
                  {
                    if (*(void *)v97 != v59) {
                      objc_enumerationMutation(v56);
                    }
                    [*(id *)(*((void *)&v96 + 1) + 8 * v60) floatValue];
                    *((_DWORD *)__p[0] + v58++) = v61;
                    ++v60;
                  }
                  while (v57 != v60);
                  uint64_t v57 = [v56 countByEnumeratingWithState:&v96 objects:buf count:16];
                }
                while (v57);
              }

              float v62 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", __p[0], 4 * objc_msgSend(v56, "count"));
              id v95 = 0;
              uint64_t v63 = [v62 compressedDataUsingAlgorithm:3 error:&v95];
              id v64 = v95;

              if (!v64)
              {
                id v65 = [NSNumber numberWithBool:1];
                [v53 setObject:v65 forKey:@"WDataIsCompressed"];

                [v53 setObject:v63 forKey:v54];
              }

              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            uint64_t v48 = obja;
            uint64_t v49 = [obja countByEnumeratingWithState:&v91 objects:v101 count:16];
          }
          while (v49);
        }

        id v66 = v77;
      }
      else
      {
        uint64_t v67 = 0;
        id v68 = (char *)(v7 + 24);
        while (v67 != 6)
        {
          uint64_t v69 = v67;
          unsigned int v70 = vcvtas_u32_f32(fmaxf(*(float *)&v68[4 * v67++], 0.0));
          if (v4 == v70)
          {
            if ((unint64_t)(v69 + 23) <= 0x1C) {
              goto LABEL_4;
            }
            break;
          }
        }
        id v66 = (void *)v6;
        [DeepCopy removeObjectForKey:v6];
      }

      char v5 = 0;
      uint64_t v4 = 1;
    }
    while ((v81 & 1) != 0);
    DSPComplex v71 = *v75;
    [v71 setObject:DeepCopy forKey:@"DspLibXTC_customFilterDictionary"];
    uint64_t v72 = 0;
    goto LABEL_44;
  }
  if (AUXTCLogScope(void)::once != -1) {
    dispatch_once(&AUXTCLogScope(void)::once, &__block_literal_global_29854);
  }
  if (!AUXTCLogScope(void)::scope)
  {
    DSPComplex v71 = MEMORY[0x1E4F14500];
    id v73 = MEMORY[0x1E4F14500];
    goto LABEL_41;
  }
  DSPComplex v71 = *(id *)AUXTCLogScope(void)::scope;
  if (v71)
  {
LABEL_41:
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      float v103 = "AUXTC.mm";
      __int16 v104 = 1024;
      int v105 = 339;
      _os_log_impl(&dword_1BB0CE000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d Error encountered while creating deep copy of filter dictionary", buf, 0x12u);
    }
    uint64_t v72 = 4294956421;
LABEL_44:

    goto LABEL_45;
  }
  uint64_t v72 = 4294956421;
LABEL_45:

  return v72;
}

void sub_1BB71C764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  _Unwind_Resume(a1);
}

void ___ZL13AUXTCLogScopev_block_invoke()
{
}

uint64_t AUXTC::GetParameterInfo(AUXTC *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  if (a3 == 1869769061) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = a3;
  }
  if (a3 == 1937141612) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = v4;
  }
  BOOL v6 = a3 == 1937141612 || a3 == 1869769061;
  if ((a2 & 0xFFFFFFFB) != 0 || v5 >= *((_DWORD *)this + 439)) {
    return 4294956418;
  }
  uint64_t v9 = *(unsigned int *)(*((void *)this + 211) + 4 * v5);
  buffer->unit = *(_DWORD *)(*((void *)this + 201) + 4 * v9);
  int v10 = *(_DWORD *)(*((void *)this + 203) + 4 * v9);
  buffer->minCFNumberRef Value = *(AudioUnitParameterValue *)(*((void *)this + 205) + 4 * v9);
  buffer->maxCFNumberRef Value = *(AudioUnitParameterValue *)(*((void *)this + 207) + 4 * v9);
  buffer->defaultCFNumberRef Value = *(AudioUnitParameterValue *)(*((void *)this + 213) + 4 * v5);
  CFStringRef v11 = *(const __CFString **)(*((void *)this + 199) + 8 * v9);
  buffer->cfNameString = v11;
  buffer->AudioUnitParameterOptions flags = v10 | 0xC8800000;
  CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
  if (*((void *)this + 216))
  {
    buffer->clumpID = *(_DWORD *)(*((void *)this + 215) + 4 * v5);
    buffer->flags |= 0x100000u;
  }
  uint64_t result = 0;
  if (v6) {
    buffer->flags |= 0x10000000u;
  }
  return result;
}

uint64_t AUXTC::ProcessBufferLists(AUXTC *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  v33[3] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 17)) {
    return 4294956429;
  }
  uint64_t v9 = (char *)this + 2168;
  if (*((float *)this + 604) >= 1.0)
  {
    char v10 = 0;
    do
    {
      char v11 = v10;
      BOOL v12 = ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::pop((uint64_t)this + 2880, (uint64_t *)this + 617);
      char v10 = 1;
    }
    while (v12);
    if (v11)
    {
      uint64_t v13 = *((void *)this + 616);
      uint64_t v14 = *((void *)this + 617);
      *((void *)this + 616) = v14;
      *((void *)this + 617) = v13;
      DspLib::XTC::Algorithm::setFIRMatrixAndTriggerCrossFade((uint64_t)v9, v14);
    }
  }
  uint64_t result = SimpleMeters::ProcessInputBufferList((AUXTC *)((char *)this + 1832), a5, a3);
  if (!result)
  {
    if (a3 != a4)
    {
      unint64_t v16 = 0;
      p_mData = &a3->mBuffers[0].mData;
      for (uint64_t i = &a4->mBuffers[0].mData; ; i += 2)
      {
        uint64_t v19 = (unsigned int *)*((void *)this + 268);
        unint64_t v20 = v19 == *((unsigned int **)this + 269) ? 0 : *v19;
        if (v16 >= v20) {
          break;
        }
        uint64_t result = (uint64_t)*i;
        if (*p_mData != *i) {
          uint64_t result = (uint64_t)memcpy((void *)result, *p_mData, 4 * a5);
        }
        ++v16;
        p_mData += 2;
      }
    }
    if (!*((unsigned char *)this + 2113) && !*((unsigned char *)this + 1584) && *((unsigned char *)this + 2768))
    {
      MEMORY[0x1F4188790](result);
      uint64_t v22 = &v31[-((v21 + 15) & 0xFFFFFFFF0) - 8];
      if (v21 >= 0x200) {
        size_t v23 = 512;
      }
      else {
        size_t v23 = v21;
      }
      bzero(&v31[-((v21 + 15) & 0xFFFFFFFF0) - 8], v23);
      double v24 = (unsigned int *)*((void *)this + 268);
      if (v24 == *((unsigned int **)this + 269))
      {
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = *v24;
        if (v25)
        {
          uint64_t v26 = &a4->mBuffers[0].mData;
          double v27 = v22;
          uint64_t v28 = v25;
          do
          {
            uint64_t v29 = *v26;
            v26 += 2;
            *v27++ = v29;
            --v28;
          }
          while (v28);
        }
      }
      v33[0] = v22;
      v33[1] = v25;
      v33[2] = a5;
      v32[0] = v22;
      v32[1] = v25;
      v32[2] = a5;
      v31[0] = 0;
      v31[24] = 0;
      (*(void (**)(char *, void *, void *, unsigned char *))(*((void *)this + 271) + 144))(v9, v33, v32, v31);
      AUDspLib::enqueueStatusForInstance(this, 0, *((DspLib::AlgorithmBase **)this + 66), a5);
    }
    SimpleMeters::ProcessOutputBufferList((AUXTC *)((char *)this + 1832), a5, a4);
    return 0;
  }
  return result;
}

DspLib *AUXTC::SetParameter(AUXTC *this, unsigned int a2, uint64_t a3, uint64_t a4, float a5, uint64_t a6)
{
  BOOL v12 = (DspLib *)AUDspLib::SetParameter(this, a2, a3, a4, a5);
  uint64_t v13 = v12;
  unsigned int v14 = *((_DWORD *)this + 439) - 1;
  if (v14 >= a2) {
    unsigned int v14 = a2;
  }
  int v15 = *(_DWORD *)(*((void *)this + 211) + 4 * v14);
  if (v15 == 1)
  {
    AUXTC::mDeviceOrientationCachedPrevious = AUXTC::mDeviceOrientationCachedCurrent;
    AUXTC::mDeviceOrientationCachedCurrent = vcvtas_u32_f32(a5);
  }
  else if (v15 == 16)
  {
    if (DspLib::isEqual(v12, *((float *)this + 1236), a5, 1.0e-20)) {
      return v13;
    }
    *((float *)this + 1236) = a5;
  }
  else if (a2 == 1869769061)
  {
    (*(void (**)(AUXTC *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)this + 152))(this, 1, a3, a4, a6, a5);
  }
  else if (a2 == 1937141612)
  {
    (*(void (**)(AUXTC *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)this + 152))(this, 16, a3, a4, a6, a5);
  }
  if (!v13) {
    AUXTC::enqueueNewFIRMatrix((uint64_t)this);
  }
  return v13;
}

uint64_t AUXTC::enqueueNewFIRMatrix(uint64_t this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(this + 2769));
  if (v1)
  {
    uint64_t v2 = this;
    if (*(unsigned char *)(this + 17))
    {
      id v3 = *(caulk::concurrent::messenger **)(this + 2776);
      uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 40, 8);
      *(_DWORD *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = v2;
      *(void *)uint64_t v4 = &unk_1F14C1190;
      *(void *)(v4 + 8) = 0;
      return caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v4);
    }
  }
  return this;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::perform(caulk::concurrent::message *a1)
{
  id v3 = a1;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)a1 + 3) + 2769));
  if (v1) {
    AUXTC::newFIRMatrix((AUXTC *)&v4);
  }
  return caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::rt_cleanup::~rt_cleanup(&v3);
}

void sub_1BB71CFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::rt_cleanup::~rt_cleanup(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 40, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUXTC::enqueueNewFIRMatrix(void)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t AUXTC::SetProperty(AUXTC *this, int a2, int a3, unsigned int a4, id *a5, void *a6, int *a7)
{
  if (a2 == 6620)
  {
    if (a3)
    {
      return 4294956430;
    }
    else if (a6 == 8)
    {
      id v9 = *a5;
      applesauce::dispatch::v1::queue::get(*a5);
      objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        std::mutex::lock((std::mutex *)((char *)this + 2704));
        [*((id *)this + 337) addEntriesFromDictionary:v9];
        if (load_W_filters(*((NSDictionary **)this + 337), (AUXTC *)((char *)this + 2168)))
        {
          AUXTC::enqueueNewFIRMatrix((uint64_t)this);
          *((unsigned char *)this + 2768) = 1;
        }
        std::mutex::unlock((std::mutex *)((char *)this + 2704));
      }

      return 0;
    }
    else
    {
      return 4294956445;
    }
  }
  else
  {
    return AUDspLib::SetProperty(this, a2, a3, a4, (int *)a5, a6, a7);
  }
}

void sub_1BB71D184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUXTC::GetProperty(id *this, int a2, unsigned int a3, unsigned int a4, CFDictionaryRef *a5, int *a6)
{
  if (a2 == 6620)
  {
    if (a3)
    {
      return 4294956430;
    }
    else
    {
      CFDictionaryRef v8 = (const __CFDictionary *)this[337];
      uint64_t result = 0;
      *a5 = v8;
    }
  }
  else
  {
    return AUDspLib::GetProperty((AUDspLib *)this, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t AUXTC::GetPropertyInfo(AUXTC *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 6620) {
    return AUDspLib::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  if (a3) {
    return 4294956430;
  }
  uint64_t result = 0;
  *a6 = 1;
  *a5 = 8;
  return result;
}

void AUXTC::Cleanup(AUXTC *this)
{
  uint64_t v2 = (unsigned __int8 *)this + 2769;
  atomic_store(0, (unsigned __int8 *)this + 2769);
  caulk::concurrent::messenger::drain(*((caulk::concurrent::messenger **)this + 347));
  atomic_store(1u, v2);

  AUDspLib::Cleanup(this);
}

void AUXTC::~AUXTC(AUXTC *this)
{
  AUXTC::~AUXTC(this);

  JUMPOUT(0x1C185D360);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F14C0EA0;
  uint64_t v2 = *((void *)this + 617);
  *((void *)this + 617) = 0;
  if (v2) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 4936, v2);
  }
  id v3 = *((void *)this + 616);
  *((void *)this + 616) = 0;
  if (v3) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 4928, v3);
  }
  *((void *)this + 352) = &unk_1F14C1130;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue((uint64_t)this + 2880);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 348);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 2704));

  DspLib::XTC::Algorithm::~Algorithm((AUXTC *)((char *)this + 2168));

  AUDspLib::~AUDspLib(this);
}

uint64_t ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue(uint64_t a1)
{
  *(void *)a1 = &unk_1F14C1150;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::drain_trash(a1);
  for (uint64_t i = 0;
        boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::pop<std::vector<std::vector<float>> *>((atomic_uint *)(a1 + 64), &i);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 1024);
  boost::lockfree::queue<std::vector<std::vector<float>> *,boost::lockfree::capacity<10ul>>::~queue(a1 + 64);
  return a1;
}

void ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue(uint64_t a1)
{
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue(a1);

  JUMPOUT(0x1C185D360);
}

void ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14C1130;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue((uint64_t)(a1 + 8));

  JUMPOUT(0x1C185D360);
}

void *ca::concurrent::deferred_deletion_stash<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_stash(void *a1)
{
  *a1 = &unk_1F14C1130;
  ca::concurrent::deferred_deletion_queue<DspLib::XTC::FIRMatrix,10ul,std::default_delete<DspLib::XTC::FIRMatrix>>::~deferred_deletion_queue((uint64_t)(a1 + 8));
  return a1;
}

void iPMWF_HRLS_vDSP::InitializeFilter(iPMWF_HRLS_vDSP *this)
{
  if (*((_DWORD *)this + 24) == 1)
  {
    memcpy(*((void **)this + 18), *((const void **)this + 99), 4 * *((unsigned int *)this + 10));
    uint64_t v2 = *((unsigned int *)this + 10);
    id v3 = (void *)(*((void *)this + 18) + 4 * v2);
    uint64_t v4 = (const void *)*((void *)this + 102);
    memcpy(v3, v4, 4 * v2);
  }
  else if (*((_DWORD *)this + 8))
  {
    unsigned int v5 = 0;
    do
      vDSP_vfill((const float *)this + 18, (float *)(*((void *)this + 18) + 4 * (*((_DWORD *)this + 9) + *((_DWORD *)this + 10)) * v5++), 1, *((unsigned int *)this + 9));
    while (v5 < *((_DWORD *)this + 8));
  }
}

void ___ZL17AUDenoiseLogScopev_block_invoke_29991()
{
}

void iPMWF_HRLS_vDSP::FilterToCommonUsingSteering(uint64_t a1, void *a2, float **a3)
{
  vDSP_vclr(*a3, 1, (2 * *(_DWORD *)(a1 + 36)));
  int v6 = *(_DWORD *)(a1 + 32);
  id v7 = &(*a3)[*(unsigned int *)(a1 + 36)];
  __D.realp = *a3;
  __D.imagp = v7;
  if (v6)
  {
    unsigned int v8 = 0;
    do
    {
      vDSP_Length __N = *(unsigned int *)(a1 + 36);
      uint64_t v10 = *(void *)(a1 + 144);
      unsigned int v11 = *(_DWORD *)(a1 + 40) + __N * v8;
      __A.realp = (float *)(v10 + 4 * __N * v8);
      __A.imagp = (float *)(v10 + 4 * v11);
      BOOL v12 = (float *)(*a2 + 4 * v11);
      __B.realp = (float *)(*a2 + 4 * __N * v8);
      __B.imagp = v12;
      vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 32));
  }
}

void iPMWF_HRLS_vDSP::FilterSignal(uint64_t a1, void *a2, float **a3)
{
  vDSP_vclr(*a3, 1, (2 * *(_DWORD *)(a1 + 40)));
  if (*(_DWORD *)(a1 + 32))
  {
    unsigned int v6 = 0;
    do
    {
      unsigned int v7 = 0;
      unsigned int v8 = *(_DWORD *)(a1 + 36) * v6;
      id v9 = &(*a3)[v8];
      uint64_t v10 = &(*a3)[*(_DWORD *)(a1 + 40) + v8];
      __D.realp = v9;
      __D.imagp = v10;
      do
      {
        vDSP_Length __N = *(unsigned int *)(a1 + 36);
        int v11 = *(_DWORD *)(a1 + 40);
        unsigned int v13 = __N * v7 + v11 * v6;
        uint64_t v14 = *(void *)(a1 + 144);
        unsigned int v15 = *(_DWORD *)(a1 + 44) + v13;
        __A.realp = (float *)(v14 + 4 * v13);
        __A.imagp = (float *)(v14 + 4 * v15);
        unint64_t v16 = (float *)(*a2 + 4 * (__N * v7 + v11));
        __B.realp = (float *)(*a2 + 4 * __N * v7);
        __B.imagp = v16;
        vDSP_zvma(&__A, 1, &__B, 1, &__D, 1, &__D, 1, __N);
        ++v7;
        unsigned int v17 = *(_DWORD *)(a1 + 32);
      }
      while (v7 < v17);
      ++v6;
    }
    while (v6 < v17);
  }
}

void iPMWF_HRLS_vDSP::FilterCommonToFinalUsingSteering(uint64_t a1, float *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 32);
  uint64_t v4 = &a2[*(unsigned int *)(a1 + 36)];
  __A.realp = a2;
  __A.imagp = v4;
  if (v3)
  {
    unsigned int v7 = 0;
    do
    {
      vDSP_Length v8 = *(unsigned int *)(a1 + 36);
      id v9 = (float *)(*a3 + 4 * (*(_DWORD *)(a1 + 40) + v8 * v7));
      __C.realp = (float *)(*a3 + 4 * v8 * v7);
      __C.imagp = v9;
      uint64_t v10 = (float *)(*(void *)(a1 + 816) + 4 * v8 * v7);
      v11.realp = (float *)(*(void *)(a1 + 792) + 4 * v8 * v7);
      v11.imagp = v10;
      vDSP_zvmul(&__A, 1, &v11, 1, &__C, 1, v8, 1);
      ++v7;
    }
    while (v7 < *(_DWORD *)(a1 + 32));
  }
}

void iPMWF_HRLS_vDSP::ProcessEchoOneInformedFrame(iPMWF_HRLS_vDSP *this)
{
  uint64_t v2 = (void *)((char *)this + 384);
  int v3 = (float **)((char *)this + 528);
  if (*((_DWORD *)this + 24) == 1)
  {
    iPMWF_HRLS_vDSP::FilterToCommonUsingSteering((uint64_t)this, (void *)this + 48, v3);
    uint64_t v4 = (float *)*((void *)this + 66);
    iPMWF_HRLS_vDSP::FilterCommonToFinalUsingSteering((uint64_t)this, v4, v2);
  }
  else
  {
    iPMWF_HRLS_vDSP::FilterSignal((uint64_t)this, (void *)this + 48, v3);
    unsigned int v5 = (void *)*((void *)this + 48);
    unsigned int v6 = (const void *)*((void *)this + 66);
    size_t v7 = 4 * (2 * *((_DWORD *)this + 10));
    memcpy(v5, v6, v7);
  }
}

void iPMWF_HRLS_vDSP::ProcessBufferList(iPMWF_HRLS_vDSP *this, const AudioBufferList *a2, const AudioBufferList *a3, AudioBufferList *a4, AudioBufferList *a5, int a6, int a7)
{
  LODWORD(v14) = *((_DWORD *)this + 8);
  if (v14)
  {
    unint64_t v15 = 0;
    p_mData = &a2->mBuffers[0].mData;
    float v17 = 0.0;
    do
    {
      unsigned int v18 = (const float *)*p_mData;
      p_mData += 2;
      float v17 = cblas_sdsdot(2 * *((_DWORD *)this + 9) - 2, v17, v18, 1, v18, 1);
      ++v15;
      unint64_t v14 = *((unsigned int *)this + 8);
    }
    while (v15 < v14);
  }
  else
  {
    float v17 = 0.0;
  }
  if (v17 <= *((float *)this + 7) || (LODWORD(v17) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if (v14)
    {
      unint64_t v20 = 0;
      unint64_t v21 = &a2->mBuffers[0].mData;
      uint64_t v22 = &a4->mBuffers[0].mData;
      do
      {
        double v24 = *v22;
        v22 += 2;
        size_t v23 = v24;
        uint64_t v25 = *v21;
        v21 += 2;
        memcpy(v23, v25, 4 * (2 * *((_DWORD *)this + 9) - 2));
        ++v20;
        unint64_t v26 = *((unsigned int *)this + 8);
      }
      while (v20 < v26);
      if (v26 && a6 != 0)
      {
        unint64_t v28 = 0;
        uint64_t v29 = &a3->mBuffers[0].mData;
        int v30 = &a5->mBuffers[0].mData;
        do
        {
          uint64_t v32 = *v30;
          v30 += 2;
          double v31 = v32;
          double v33 = *v29;
          v29 += 2;
          memcpy(v31, v33, 4 * (2 * *((_DWORD *)this + 9) - 2));
          ++v28;
        }
        while (v28 < *((unsigned int *)this + 8));
      }
    }
    return;
  }
  DSPSplitComplex __A = (float *)((char *)this + 28);
  float32x4_t v235 = a3;
  if (v14)
  {
    unint64_t v34 = 0;
    uint64_t v35 = &a2->mBuffers[0].mData;
    do
    {
      memcpy((void *)(*((void *)this + 45) + 4 * (*((_DWORD *)this + 9) * v34)), *v35, 4 * *((unsigned int *)this + 9));
      float v36 = (char *)*v35;
      v35 += 2;
      memcpy((void *)(*((void *)this + 45)+ 4 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 9) * v34++ + 1)), &v36[4 * *((unsigned int *)this + 9)], 4 * (*((_DWORD *)this + 9) - 2));
    }
    while (v34 < *((unsigned int *)this + 8));
  }
  int v37 = (void *)((char *)this + 360);
  vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 33, *((float **)this + 45), 1, (2 * *((_DWORD *)this + 10)));
  if (!a6) {
    goto LABEL_28;
  }
  if (*((_DWORD *)this + 8))
  {
    unint64_t v38 = 0;
    uint64_t v39 = (const void **)&v235->mBuffers[0].mData;
    do
    {
      memcpy((void *)(*((void *)this + 48) + 4 * (*((_DWORD *)this + 9) * v38)), *v39, 4 * *((unsigned int *)this + 9));
      uint64_t v40 = (char *)*v39;
      v39 += 2;
      memcpy((void *)(*((void *)this + 48)+ 4 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 9) * v38++ + 1)), &v40[4 * *((unsigned int *)this + 9)], 4 * (*((_DWORD *)this + 9) - 2));
    }
    while (v38 < *((unsigned int *)this + 8));
  }
  vDSP_vsmul(*((const float **)this + 48), 1, (const float *)this + 33, *((float **)this + 48), 1, (2 * *((_DWORD *)this + 10)));
  if (*((unsigned char *)this + 101))
  {
LABEL_28:
    if (a7) {
      goto LABEL_29;
    }
LABEL_36:
    uint64_t v42 = (float **)((char *)this + 528);
    unint64_t v43 = v235;
    int v44 = this;
    if (*((_DWORD *)this + 24) == 1) {
      goto LABEL_93;
    }
    double v45 = (void *)((char *)this + 360);
    goto LABEL_136;
  }
  iPMWF_HRLS_vDSP::ProcessEchoOneInformedFrame(this);
  vDSP_vsmul(*((const float **)this + 48), 1, (const float *)this + 34, *((float **)this + 48), 1, (2 * *((_DWORD *)this + 10)));
  if (!a7) {
    goto LABEL_36;
  }
LABEL_29:
  if (*((_DWORD *)this + 21) >= *((_DWORD *)this + 22))
  {
    memcpy(*((void **)this + 27), *((const void **)this + 72), 4 * *((unsigned int *)this + 9));
  }
  else
  {
    vDSP_vfill(__A, *((float **)this + 27), 1, *((unsigned int *)this + 9));
    ++*((_DWORD *)this + 21);
  }
  LODWORD(__C.realp) = *((_DWORD *)this + 9);
  vDSP_vsmsa(*((const float **)this + 27), 1, (const float *)this + 20, (const float *)this + 3, *((float **)this + 30), 1, LODWORD(__C.realp));
  unsigned int v41 = *((_DWORD *)this + 26);
  if (v41 == 2)
  {
    *(float *)&v239.realp = *((float *)this + 3) + (float)(*((float *)this + 20) * *((float *)this + 31));
    vDSP_vfill((const float *)&v239, *((float **)this + 30), 1, *((unsigned int *)this + 9));
  }
  else if (v41 <= 1)
  {
    vDSP_vsmsa(*((const float **)this + 27), 1, (const float *)this + 20, (const float *)this + 3, *((float **)this + 30), 1, *((unsigned int *)this + 9));
  }
  vDSP_vneg(*((const float **)this + 30), 1, *((float **)this + 33), 1, *((unsigned int *)this + 9));
  vDSP_vsadd(*((const float **)this + 33), 1, (const float *)this + 18, *((float **)this + 33), 1, *((unsigned int *)this + 9));
  vvsqrtf(*((float **)this + 42), *((const float **)this + 33), (const int *)&__C);
  vvsqrtf(*((float **)this + 39), *((const float **)this + 30), (const int *)&__C);
  vDSP_svdiv((const float *)this + 18, *((const float **)this + 39), 1, *((float **)this + 39), 1, *((unsigned int *)this + 9));
  unint64_t v43 = v235;
  if (!*((unsigned char *)this + 101) || *((_DWORD *)this + 26) == 1)
  {
    float v46 = (float **)((char *)this + 528);
    char v47 = (void *)((char *)this + 360);
    if (*((_DWORD *)this + 24) == 1)
    {
      iPMWF_HRLS_vDSP::FilterToCommonUsingSteering((uint64_t)this, v47, v46);
      if (*((_DWORD *)this + 26) != 1) {
        goto LABEL_51;
      }
      uint64_t v48 = *((void *)this + 66);
      uint64_t v49 = *((unsigned int *)this + 27);
      vDSP_Length v50 = (*((_DWORD *)this + 28) - v49);
      LODWORD(__C.realp) = 0;
      LODWORD(v239.realp) = 0;
      uint64_t v51 = (const float *)(v48 + 4 * v49);
      vDSP_svesq(v51, 1, (float *)&__C, v50);
      vDSP_Length v52 = v50;
      unint64_t v43 = v235;
      vDSP_svesq(&v51[*((unsigned int *)this + 9)], 1, (float *)&v239, v52);
      float v53 = (float)(*(float *)&__C.realp + *(float *)&v239.realp) / (float)*((unsigned int *)this + 8);
    }
    else
    {
      iPMWF_HRLS_vDSP::FilterSignal((uint64_t)this, v47, v46);
      if (*((_DWORD *)this + 26) != 1) {
        goto LABEL_51;
      }
      if (*((_DWORD *)this + 8))
      {
        unsigned int v54 = 0;
        uint64_t v55 = *((unsigned int *)this + 27);
        vDSP_Length v56 = (*((_DWORD *)this + 28) - v55);
        uint64_t v57 = *((void *)this + 66) + 4 * v55;
        float v58 = 0.0;
        do
        {
          LODWORD(__C.realp) = 0;
          LODWORD(v239.realp) = 0;
          vDSP_svesq((const float *)(v57 + 4 * *((_DWORD *)this + 9) * v54), 1, (float *)&__C, v56);
          vDSP_svesq((const float *)(v57 + 4 * (*((_DWORD *)this + 10) + *((_DWORD *)this + 9) * v54)), 1, (float *)&v239, v56);
          float v58 = (float)(v58 + *(float *)&__C.realp) + *(float *)&v239.realp;
          ++v54;
          unsigned int v59 = *((_DWORD *)this + 8);
        }
        while (v54 < v59);
        float v53 = v58 / (float)v59;
        unint64_t v43 = v235;
        int v37 = (void *)((char *)this + 360);
      }
      else
      {
        float v53 = NAN;
      }
    }
    *(float *)&__C.realp = 1.0 / fmaxf(*((float *)this + 30), powf(v53, *((float *)this + 29)));
    vDSP_vfill((const float *)&__C, *((float **)this + 69), 1, *((unsigned int *)this + 9));
    vDSP_vmul(*((const float **)this + 42), 1, *((const float **)this + 69), 1, *((float **)this + 42), 1, *((unsigned int *)this + 9));
  }
LABEL_51:
  float32x4_t v232 = v37;
  if ((*((_DWORD *)this + 8) & 0x7FFFFFFF) != 0)
  {
    unsigned int v60 = 0;
    do
    {
      vDSP_vmul(*((const float **)this + 42), 1, (const float *)(*((void *)this + 45) + 4 * *((_DWORD *)this + 9) * v60), 1, (float *)(*((void *)this + 78) + 4 * *((_DWORD *)this + 9) * v60), 1, *((unsigned int *)this + 9));
      ++v60;
    }
    while (v60 < 2 * *((_DWORD *)this + 8));
  }
  vDSP_vclr(*((float **)this + 60), 1, (2 * *((_DWORD *)this + 10)));
  vDSP_vneg((const float *)(*((void *)this + 21) + 4 * *((unsigned int *)this + 11)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 11));
  if (*((_DWORD *)this + 8))
  {
    unsigned int v61 = 0;
    do
    {
      unsigned int v62 = 0;
      unsigned int v63 = *((_DWORD *)this + 9) * v61;
      uint64_t v64 = *((void *)this + 60);
      id v65 = (float *)(v64 + 4 * v63);
      id v66 = (float *)(v64 + 4 * (*((_DWORD *)this + 10) + v63));
      __C.realp = v65;
      __C.imagp = v66;
      do
      {
        vDSP_Length __N = *((unsigned int *)this + 9);
        int v67 = *((_DWORD *)this + 10);
        unsigned int v69 = v67 * v62 + __N * v61;
        unsigned int v70 = (float *)(*((void *)this + 21) + 4 * v69);
        DSPComplex v71 = (float *)(*((void *)this + 57) + 4 * v69);
        v239.realp = v70;
        v239.imagp = v71;
        uint64_t v72 = *((void *)this + 78);
        __B.realp = (float *)(v72 + 4 * __N * v62);
        __B.imagp = (float *)(v72 + 4 * (__N * v62 + v67));
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, __N);
        ++v62;
      }
      while (v62 < *((_DWORD *)this + 8));
      vDSP_zrvmul(&__C, 1, *((const float **)this + 39), 1, &__C, 1, *((unsigned int *)this + 9));
      ++v61;
    }
    while (v61 < *((_DWORD *)this + 8));
  }
  vDSP_vclr(*((float **)this + 81), 1, *((unsigned int *)this + 9));
  if (*((_DWORD *)this + 8))
  {
    unsigned int v73 = 0;
    do
    {
      vDSP_Length v74 = *((unsigned int *)this + 9);
      uint64_t v75 = *((void *)this + 60);
      uint64_t v76 = (float *)(v75 + 4 * (*((_DWORD *)this + 10) + v74 * v73));
      __C.realp = (float *)(v75 + 4 * v74 * v73);
      __C.imagp = v76;
      vDSP_zvmgsa(&__C, 1, *((const float **)this + 81), 1, *((float **)this + 81), 1, v74);
      ++v73;
    }
    while (v73 < *((_DWORD *)this + 8));
  }
  vDSP_vsadd(*((const float **)this + 81), 1, (const float *)this + 18, *((float **)this + 81), 1, *((unsigned int *)this + 9));
  LODWORD(__D.realp) = *((_DWORD *)this + 9);
  vvsqrtf(*((float **)this + 81), *((const float **)this + 81), (const int *)&__D);
  vDSP_vdiv(*((const float **)this + 81), 1, *((const float **)this + 39), 1, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_vneg(*((const float **)this + 54), 1, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_vclr(*((float **)this + 51), 1, (2 * *((_DWORD *)this + 10)));
  if (*((_DWORD *)this + 8))
  {
    unsigned int v77 = 0;
    do
    {
      unsigned int v78 = 0;
      unsigned int v79 = *((_DWORD *)this + 9) * v77;
      uint64_t v80 = *((void *)this + 51);
      char v81 = (float *)(v80 + 4 * v79);
      int v82 = (float *)(v80 + 4 * (*((_DWORD *)this + 10) + v79));
      __C.realp = v81;
      __C.imagp = v82;
      do
      {
        vDSP_Length v84 = *((unsigned int *)this + 9);
        int v83 = *((_DWORD *)this + 10);
        unsigned int v85 = v84 * v78 + v83 * v77;
        uint64_t v86 = *((void *)this + 21);
        unsigned int v87 = *((_DWORD *)this + 11) + v85;
        v239.realp = (float *)(v86 + 4 * v85);
        v239.imagp = (float *)(v86 + 4 * v87);
        uint64_t v88 = *((void *)this + 60);
        __B.realp = (float *)(v88 + 4 * v84 * v78);
        __B.imagp = (float *)(v88 + 4 * (v84 * v78 + v83));
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v84);
        ++v78;
      }
      while (v78 < *((_DWORD *)this + 8));
      vDSP_zrvmul(&__C, 1, *((const float **)this + 54), 1, &__C, 1, *((unsigned int *)this + 9));
      ++v77;
    }
    while (v77 < *((_DWORD *)this + 8));
  }
  if ((*((_DWORD *)this + 13) & 0x7FFFFFFF) != 0)
  {
    unsigned int v89 = 0;
    do
    {
      vDSP_Length v90 = *((unsigned int *)this + 9);
      long long v91 = (float *)(*((void *)this + 21) + 4 * v90 * v89);
      vDSP_vmul(v91, 1, *((const float **)this + 39), 1, v91, 1, v90);
      ++v89;
    }
    while (v89 < 2 * *((_DWORD *)this + 13));
  }
  vDSP_vsadd(*((const float **)this + 81), 1, (const float *)this + 18, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_svdiv((const float *)this + 18, *((const float **)this + 54), 1, *((float **)this + 54), 1, *((unsigned int *)this + 9));
  vDSP_vneg((const float *)(*((void *)this + 60) + 4 * *((unsigned int *)this + 10)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 10));
  unsigned int v92 = *((_DWORD *)this + 8);
  if (v92)
  {
    for (unsigned int i = 0; i < v92; ++i)
    {
      vDSP_Length v94 = *((unsigned int *)this + 9);
      int v95 = *((_DWORD *)this + 10);
      uint64_t v96 = *((void *)this + 51);
      __C.realp = (float *)(v96 + 4 * v94 * i);
      __C.imagp = (float *)(v96 + 4 * (v94 * i + v95));
      vDSP_zrvmul(&__C, 1, *((const float **)this + 54), 1, &__C, 1, v94);
      unsigned int v92 = *((_DWORD *)this + 8);
      if (!v92) {
        break;
      }
      unsigned int v97 = 0;
      int v98 = v95 * i;
      do
      {
        vDSP_Length v99 = *((unsigned int *)this + 9);
        uint64_t v100 = (float *)(*((void *)this + 57) + 4 * v99 * v97);
        v239.realp = (float *)(*((void *)this + 60) + 4 * v99 * v97);
        v239.imagp = v100;
        unsigned int v101 = v99 * v97 + v98;
        uint64_t v102 = *((void *)this + 21);
        LODWORD(v10std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)this + 11) + v101;
        __B.realp = (float *)(v102 + 4 * v101);
        __B.imagp = (float *)(v102 + 4 * v100);
        vDSP_zvma(&v239, 1, &__C, 1, &__B, 1, &__B, 1, v99);
        ++v97;
        unsigned int v92 = *((_DWORD *)this + 8);
      }
      while (v97 < v92);
    }
  }
  int v103 = *((_DWORD *)this + 24);
  unsigned int v233 = (float *)((char *)this + 72);
  if (!v103)
  {
    vDSP_vsmul(*((const float **)this + 93), 1, (const float *)this + 2, *((float **)this + 93), 1, (2 * *((_DWORD *)this + 11)));
    vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 19, *((float **)this + 78), 1, (2 * *((_DWORD *)this + 10)));
    if ((*((_DWORD *)this + 13) & 0x7FFFFFFF) != 0)
    {
      unsigned int v134 = 0;
      do
      {
        vDSP_Length v135 = *((unsigned int *)this + 9);
        int8x8_t v136 = (float *)(*((void *)this + 87) + 4 * v135 * v134);
        vDSP_vmul(v136, 1, *((const float **)this + 30), 1, v136, 1, v135);
        ++v134;
      }
      while (v134 < 2 * *((_DWORD *)this + 13));
    }
    if ((*((_DWORD *)this + 8) & 0x7FFFFFFF) != 0)
    {
      unsigned int v137 = 0;
      do
      {
        vDSP_vmul((const float *)(*((void *)this + 45) + 4 * *((_DWORD *)this + 9) * v137), 1, *((const float **)this + 33), 1, (float *)(*((void *)this + 63) + 4 * *((_DWORD *)this + 9) * v137), 1, *((unsigned int *)this + 9));
        ++v137;
      }
      while (v137 < 2 * *((_DWORD *)this + 8));
    }
    vDSP_vneg((const float *)(*((void *)this + 45) + 4 * *((unsigned int *)this + 10)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 10));
    if (*((_DWORD *)this + 8))
    {
      unsigned int v138 = 0;
      do
      {
        unsigned int v139 = 0;
        unsigned int v140 = *((_DWORD *)this + 9) * v138;
        uint64_t v141 = *((void *)this + 78);
        unsigned int v142 = *((_DWORD *)this + 10) + v140;
        __C.realp = (float *)(v141 + 4 * v140);
        __C.imagp = (float *)(v141 + 4 * v142);
        uint64_t v143 = *((void *)this + 63);
        v239.realp = (float *)(v143 + 4 * v140);
        v239.imagp = (float *)(v143 + 4 * v142);
        do
        {
          vDSP_Length v144 = *((unsigned int *)this + 9);
          int v145 = *((_DWORD *)this + 10);
          int v146 = (float *)(*((void *)this + 57) + 4 * v144 * v139);
          __B.realp = (float *)(*((void *)this + 45) + 4 * v144 * v139);
          __B.imagp = v146;
          unsigned int v147 = v144 * v139 + v145 * v138;
          uint64_t v148 = *((void *)this + 93);
          LODWORD(v146) = *((_DWORD *)this + 11) + v147;
          __D.realp = (float *)(v148 + 4 * v147);
          __D.imagp = (float *)(v148 + 4 * v146);
          uint64_t v149 = *((void *)this + 87);
          v236.realp = (float *)(v149 + 4 * v147);
          v236.imagp = (float *)(v149 + 4 * v146);
          vDSP_zvma(&__B, 1, &__C, 1, &__D, 1, &__D, 1, v144);
          vDSP_zvma(&__B, 1, &v239, 1, &v236, 1, &v236, 1, *((unsigned int *)this + 9));
          ++v139;
          unsigned int v150 = *((_DWORD *)this + 8);
        }
        while (v139 < v150);
        ++v138;
      }
      while (v138 < v150);
    }
    vDSP_vsub(*((const float **)this + 87), 1, *((const float **)this + 93), 1, *((float **)this + 90), 1, (2 * *((_DWORD *)this + 11)));
    goto LABEL_112;
  }
  if (v103 != 1)
  {
    if (v92)
    {
      for (unsigned int j = 0; j < v164; ++j)
      {
        unsigned int v152 = 0;
        unsigned int v153 = *((_DWORD *)this + 9) * j;
        uint64_t v154 = *((void *)this + 99);
        std::string v155 = (float *)(v154 + 4 * v153);
        std::string v156 = (float *)(v154 + 4 * (*((_DWORD *)this + 10) + v153));
        __C.realp = v155;
        __C.imagp = v156;
        do
        {
          vDSP_Length v157 = *((unsigned int *)this + 9);
          int v158 = *((_DWORD *)this + 10);
          uint64_t v159 = *((void *)this + 99);
          v239.realp = (float *)(v159 + 4 * v157 * v152);
          v239.imagp = (float *)(v159 + 4 * (v158 + v157 * v152));
          unsigned int v160 = v157 * v152 + v158 * j;
          uint64_t v161 = *((void *)this + 90);
          int32x4_t v162 = (float *)(v161 + 4 * v160);
          uint64_t v163 = (float *)(v161 + 4 * (*((_DWORD *)this + 11) + v160));
          __B.realp = v162;
          __B.imagp = v163;
          vDSP_zvmul(&__C, 1, &v239, 1, &__B, 1, v157, -1);
          ++v152;
          unsigned int v164 = *((_DWORD *)this + 8);
        }
        while (v152 < v164);
      }
    }
LABEL_112:
    vDSP_vneg((const float *)(*((void *)this + 21) + 4 * *((unsigned int *)this + 11)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 11));
    vDSP_vclr(*((float **)this + 84), 1, (2 * *((_DWORD *)this + 11)));
    if (*((_DWORD *)this + 8))
    {
      unsigned int v165 = 0;
      do
      {
        unsigned int v166 = 0;
        int v167 = *((_DWORD *)this + 10) * v165;
        do
        {
          unsigned int v168 = 0;
          int v169 = *((_DWORD *)this + 10) * v166;
          unsigned int v170 = v167 + *((_DWORD *)this + 9) * v166;
          uint64_t v171 = *((void *)this + 84);
          unsigned int v172 = (float *)(v171 + 4 * v170);
          uint64_t v173 = (float *)(v171 + 4 * (*((_DWORD *)this + 11) + v170));
          __C.realp = v172;
          __C.imagp = v173;
          do
          {
            vDSP_Length v174 = *((unsigned int *)this + 9);
            unsigned int v175 = v174 * v168 + v167;
            uint64_t v176 = *((void *)this + 21);
            long long v177 = (float *)(v176 + 4 * (*((_DWORD *)this + 11) + v175));
            v239.realp = (float *)(v176 + 4 * v175);
            v239.imagp = v177;
            unsigned int v178 = v174 * v168 + v169;
            long long v179 = (float *)(v176 + 4 * v178);
            float v180 = (float *)(*((void *)this + 57) + 4 * v178);
            __B.realp = v179;
            __B.imagp = v180;
            vDSP_zvma(&__B, 1, &v239, 1, &__C, 1, &__C, 1, v174);
            ++v168;
            unsigned int v181 = *((_DWORD *)this + 8);
          }
          while (v168 < v181);
          ++v166;
        }
        while (v166 < v181);
        ++v165;
      }
      while (v165 < v181);
    }
    vDSP_vclr(*((float **)this + 18), 1, (2 * *((_DWORD *)this + 11)));
    if (*((_DWORD *)this + 8))
    {
      unsigned int v182 = 0;
      do
      {
        unsigned int v183 = 0;
        do
        {
          unsigned int v184 = 0;
          unsigned int v185 = *((_DWORD *)this + 10) * v182 + *((_DWORD *)this + 9) * v183;
          uint64_t v186 = *((void *)this + 18);
          float v187 = (float *)(v186 + 4 * v185);
          double v188 = (float *)(v186 + 4 * (*((_DWORD *)this + 11) + v185));
          __C.realp = v187;
          __C.imagp = v188;
          do
          {
            vDSP_Length v190 = *((unsigned int *)this + 9);
            int v189 = *((_DWORD *)this + 10);
            unsigned int v191 = v189 * v182 + v190 * v184;
            uint64_t v192 = *((void *)this + 90);
            int v193 = *((_DWORD *)this + 11);
            v239.realp = (float *)(v192 + 4 * v191);
            v239.imagp = (float *)(v192 + 4 * (v193 + v191));
            unsigned int v194 = v189 * v184 + v190 * v183;
            uint64_t v195 = *((void *)this + 84);
            __B.realp = (float *)(v195 + 4 * v194);
            __B.imagp = (float *)(v195 + 4 * (v193 + v194));
            vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v190);
            ++v184;
            unsigned int v196 = *((_DWORD *)this + 8);
          }
          while (v184 < v196);
          ++v183;
        }
        while (v183 < v196);
        ++v182;
      }
      while (v182 < v196);
    }
    vDSP_vclr(*((float **)this + 24), 1, *((unsigned int *)this + 9));
    uint64_t v197 = *((unsigned int *)this + 9);
    __C.realp = (float *)*((void *)this + 54);
    __C.imagp = &__C.realp[v197];
    vDSP_vclr(__C.realp, 1, (2 * v197));
    if (*((_DWORD *)this + 8))
    {
      unsigned int v198 = 0;
      do
      {
        vDSP_Length v199 = *((unsigned int *)this + 9);
        unsigned int v200 = (v199 + *((_DWORD *)this + 10)) * v198;
        uint64_t v201 = *((void *)this + 18);
        float32x4_t v202 = (float *)(v201 + 4 * v200);
        float32x4_t v203 = (float *)(v201 + 4 * (*((_DWORD *)this + 11) + v200));
        v239.realp = v202;
        v239.imagp = v203;
        vDSP_zvadd(&v239, 1, &__C, 1, &__C, 1, v199);
        ++v198;
      }
      while (v198 < *((_DWORD *)this + 8));
    }
    vDSP_zvabs(&__C, 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    vDSP_vthr(*((const float **)this + 24), 1, __A, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    unint64_t v43 = v235;
    if (*((_DWORD *)this + 24) != 1) {
      vDSP_vsadd(*((const float **)this + 24), 1, (const float *)this + 5, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    }
    vDSP_svdiv(v233, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
    if ((*((_DWORD *)this + 13) & 0x7FFFFFFF) != 0)
    {
      unsigned int v204 = 0;
      do
      {
        vDSP_Length v205 = *((unsigned int *)this + 9);
        float32x4_t v206 = (float *)(*((void *)this + 18) + 4 * v205 * v204);
        vDSP_vmul(v206, 1, *((const float **)this + 24), 1, v206, 1, v205);
        ++v204;
      }
      while (v204 < 2 * *((_DWORD *)this + 13));
    }
    if (!*((unsigned char *)this + 101)) {
      goto LABEL_137;
    }
    uint64_t v42 = (float **)((char *)this + 528);
    int v44 = this;
    double v45 = v232;
LABEL_136:
    iPMWF_HRLS_vDSP::FilterSignal((uint64_t)v44, v45, v42);
LABEL_137:
    memcpy(*((void **)this + 45), *((const void **)this + 66), 4 * (2 * *((_DWORD *)this + 10)));
    goto LABEL_138;
  }
  vDSP_vclr(*((float **)this + 60), 1, (2 * *((_DWORD *)this + 10)));
  vDSP_vclr(*((float **)this + 24), 1, *((unsigned int *)this + 9));
  vDSP_vneg((const float *)(*((void *)this + 21) + 4 * *((unsigned int *)this + 11)), 1, *((float **)this + 57), 1, *((unsigned int *)this + 11));
  if (*((_DWORD *)this + 8))
  {
    unsigned int v104 = 0;
    do
    {
      unsigned int v105 = 0;
      unsigned int v106 = *((_DWORD *)this + 9) * v104;
      uint64_t v107 = *((void *)this + 60);
      double v108 = (float *)(v107 + 4 * v106);
      int v109 = (float *)(v107 + 4 * (*((_DWORD *)this + 10) + v106));
      __C.realp = v108;
      __C.imagp = v109;
      do
      {
        vDSP_Length v110 = *((unsigned int *)this + 9);
        unsigned int v111 = v106 + *((_DWORD *)this + 10) * v105;
        uint64_t v112 = (float *)(*((void *)this + 21) + 4 * v111);
        BOOL v113 = (float *)(*((void *)this + 57) + 4 * v111);
        v239.realp = v112;
        v239.imagp = v113;
        int v114 = (float *)(*((void *)this + 102) + 4 * v110 * v105);
        __B.realp = (float *)(*((void *)this + 99) + 4 * v110 * v105);
        __B.imagp = v114;
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v110);
        ++v105;
      }
      while (v105 < *((_DWORD *)this + 8));
      vDSP_zvmgsa(&__C, 1, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
      ++v104;
    }
    while (v104 < *((_DWORD *)this + 8));
  }
  vDSP_vclr(*((float **)this + 18), 1, (2 * *((_DWORD *)this + 10)));
  if (*((_DWORD *)this + 8))
  {
    unsigned int v115 = 0;
    do
    {
      unsigned int v116 = 0;
      int v117 = *((_DWORD *)this + 10);
      unsigned int v118 = *((_DWORD *)this + 9) * v115;
      int v119 = v117 * v115;
      uint64_t v120 = *((void *)this + 18);
      __C.realp = (float *)(v120 + 4 * v118);
      __C.imagp = (float *)(v120 + 4 * (v118 + v117));
      do
      {
        vDSP_Length v121 = *((unsigned int *)this + 9);
        int v122 = *((_DWORD *)this + 10);
        uint64_t v123 = *((void *)this + 21);
        unsigned int v124 = v121 * v116 + v119 + *((_DWORD *)this + 11);
        v239.realp = (float *)(v123 + 4 * (v121 * v116 + v119));
        v239.imagp = (float *)(v123 + 4 * v124);
        uint64_t v125 = *((void *)this + 60);
        __B.realp = (float *)(v125 + 4 * v121 * v116);
        __B.imagp = (float *)(v125 + 4 * (v122 + v121 * v116));
        vDSP_zvma(&v239, 1, &__B, 1, &__C, 1, &__C, 1, v121);
        ++v116;
        unsigned int v126 = *((_DWORD *)this + 8);
      }
      while (v116 < v126);
      ++v115;
    }
    while (v115 < v126);
  }
  vDSP_vthr(*((const float **)this + 24), 1, __A, *((float **)this + 24), 1, *((unsigned int *)this + 9));
  vDSP_svdiv(v233, *((const float **)this + 24), 1, *((float **)this + 24), 1, *((unsigned int *)this + 9));
  if ((*((_DWORD *)this + 8) & 0x7FFFFFFF) != 0)
  {
    unsigned int v127 = 0;
    do
    {
      vDSP_Length v128 = *((unsigned int *)this + 9);
      unsigned int v129 = (float *)(*((void *)this + 18) + 4 * v128 * v127);
      vDSP_vmul(v129, 1, *((const float **)this + 24), 1, v129, 1, v128);
      ++v127;
    }
    while (v127 < 2 * *((_DWORD *)this + 8));
  }
  vDSP_Length v130 = *((unsigned int *)this + 10);
  __C.realp = (float *)*((void *)this + 18);
  __C.imagp = &__C.realp[v130];
  DSPSplitComplex v239 = __C;
  vDSP_zvconj(&__C, 1, &v239, 1, v130);
  if (!*((unsigned char *)this + 101))
  {
    BOOL v131 = (float *)*((void *)this + 66);
    float64_t v132 = this;
    uint64_t v133 = v232;
    goto LABEL_94;
  }
  uint64_t v42 = (float **)((char *)this + 528);
  int v44 = this;
  int v37 = v232;
LABEL_93:
  iPMWF_HRLS_vDSP::FilterToCommonUsingSteering((uint64_t)v44, v37, v42);
  BOOL v131 = (float *)*((void *)this + 66);
  float64_t v132 = this;
  uint64_t v133 = v37;
LABEL_94:
  iPMWF_HRLS_vDSP::FilterCommonToFinalUsingSteering((uint64_t)v132, v131, v133);
LABEL_138:
  vDSP_vsmul(*((const float **)this + 45), 1, (const float *)this + 34, *((float **)this + 45), 1, (2 * *((_DWORD *)this + 10)));
  if (a6 && *((unsigned char *)this + 101))
  {
    iPMWF_HRLS_vDSP::ProcessEchoOneInformedFrame(this);
    vDSP_vsmul(*((const float **)this + 48), 1, (const float *)this + 34, *((float **)this + 48), 1, (2 * *((_DWORD *)this + 10)));
  }
  if (*((_DWORD *)this + 8))
  {
    uint64_t v207 = 0;
    while (1)
    {
      int8x16_t v208 = (char *)a4 + 16 * v207;
      float32x4_t v211 = (float *)*((void *)v208 + 2);
      uint64_t v210 = v208 + 16;
      float32x4_t v209 = v211;
      int32x4_t v212 = (char *)a5 + 16 * v207;
      uint64_t v215 = *((void *)v212 + 2);
      float32x4_t v214 = (const float **)(v212 + 16);
      uint64_t v213 = v215;
      vDSP_Length v216 = *((unsigned int *)this + 9);
      if (v216) {
        break;
      }
      vDSP_Length v216 = 0;
LABEL_162:
      vDSP_vmul(*((const float **)this + 75), 1, v209, 1, v209, 1, v216);
      vDSP_vmul((const float *)(*((void *)this + 75) + 4), 1, (const float *)(*v210 + 4 * *((unsigned int *)this + 9)), 1, (float *)(*v210 + 4 * *((unsigned int *)this + 9)), 1, (*((_DWORD *)this + 9) - 2));
      if (a6)
      {
        vDSP_vmul(*((const float **)this + 75), 1, *v214, 1, (float *)*v214, 1, *((unsigned int *)this + 9));
        vDSP_vmul((const float *)(*((void *)this + 75) + 4), 1, &(*v214)[*((unsigned int *)this + 9)], 1, (float *)&(*v214)[*((unsigned int *)this + 9)], 1, (*((_DWORD *)this + 9) - 2));
      }
      if (++v207 >= (unint64_t)*((unsigned int *)this + 8)) {
        return;
      }
    }
    uint64_t v217 = 0;
    mData = (float *)a2->mBuffers[v207].mData;
    float32x4_t v219 = (float *)v43->mBuffers[v207].mData;
    uint64_t v220 = (v216 - 1);
    int v221 = v216 * v207;
    while (1)
    {
      unsigned int v222 = v221 + v217;
      if (!v217 || v220 == v217)
      {
        float v229 = *(float *)(*((void *)this + 45) + 4 * v222);
        float v230 = mData[v217];
        if ((float)(v229 * v229) <= (float)(v230 * (float)(*((float *)this + 32) * v230)))
        {
          v209[v217] = (float)(v230 * *((float *)this + 4)) + (float)((float)(1.0 - *((float *)this + 4)) * v229);
          if (a6)
          {
            float v228 = (float)(*((float *)this + 4) * v219[v217])
                 + (float)((float)(1.0 - *((float *)this + 4))
                         * *(float *)(*((void *)this + 48) + 4 * (v221 + v217)));
LABEL_157:
            uint64_t v226 = v217;
LABEL_158:
            *(float *)(v213 + 4 * v226) = v228;
          }
        }
        else
        {
          v209[v217] = v230;
          if (a6)
          {
            float v228 = v219[v217];
            goto LABEL_157;
          }
        }
      }
      else
      {
        uint64_t v223 = *((void *)this + 45);
        float v224 = *(float *)(v223 + 4 * v222);
        uint64_t v225 = (v221 + v217 + *((_DWORD *)this + 10));
        uint64_t v226 = (v220 + v217);
        float v227 = mData[v217];
        if ((float)((float)(*(float *)(v223 + 4 * v225) * *(float *)(v223 + 4 * v225))
                   + (float)(v224 * v224)) <= (float)(*((float *)this + 32)
                                                    * (float)((float)(mData[v226]
                                                                    * mData[v226])
                                                            + (float)(v227 * v227))))
        {
          v209[v217] = (float)(v227 * *((float *)this + 4)) + (float)((float)(1.0 - *((float *)this + 4)) * v224);
          v209[v226] = (float)(*((float *)this + 4) * mData[v226])
                     + (float)((float)(1.0 - *((float *)this + 4)) * *(float *)(v223 + 4 * v225));
          if (a6)
          {
            uint64_t v231 = *((void *)this + 48);
            *(float *)(v213 + 4 * v217) = (float)(*((float *)this + 4) * v219[v217])
                                        + (float)((float)(1.0 - *((float *)this + 4))
                                                * *(float *)(v231 + 4 * (v221 + v217)));
            float v228 = (float)(*((float *)this + 4) * v219[v226])
                 + (float)((float)(1.0 - *((float *)this + 4)) * *(float *)(v231 + 4 * v225));
            goto LABEL_158;
          }
        }
        else
        {
          v209[v217] = v227;
          v209[v226] = mData[v226];
          if (a6)
          {
            *(float *)(v213 + 4 * v217) = v219[v217];
            float v228 = v219[v226];
            goto LABEL_158;
          }
        }
      }
      if (v216 == ++v217) {
        goto LABEL_162;
      }
    }
  }
}

_DWORD *CmhBEAMprocOpt::deallocate_memory(_DWORD *this)
{
  if (*this)
  {
    unsigned __int8 v1 = this;
    *this = 0;
    int v2 = this[14];
    if (v2 >= 1)
    {
      for (uint64_t i = 0; i < v2; ++i)
      {
        uint64_t v4 = *(void *)(*((void *)v1 + 17) + 8 * i);
        if (v4)
        {
          MEMORY[0x1C185D340](v4, 0x1000C8052888210);
          int v2 = v1[14];
        }
      }
    }
    uint64_t v5 = *((void *)v1 + 17);
    if (v5) {
      MEMORY[0x1C185D340](v5, 0x80C80B8603338);
    }
    uint64_t v6 = *((void *)v1 + 20);
    if (v6) {
      MEMORY[0x1C185D340](v6, 0x1000C8052888210);
    }
    uint64_t v7 = *((void *)v1 + 21);
    if (v7) {
      MEMORY[0x1C185D340](v7, 0x1000C8052888210);
    }
    if (*((void *)v1 + 16))
    {
      int v8 = v1[3];
      if (v8 < 1) {
        goto LABEL_20;
      }
      for (uint64_t j = 0; j < v8; ++j)
      {
        uint64_t v10 = *(void *)(*((void *)v1 + 16) + 8 * j);
        if (v10)
        {
          MEMORY[0x1C185D340](v10, 0x1000C8052888210);
          int v8 = v1[3];
        }
      }
      if (*((void *)v1 + 16)) {
LABEL_20:
      }
        MEMORY[0x1C185D340]();
      *((void *)v1 + 16) = 0;
    }
    if (*((void *)v1 + 19))
    {
      int v11 = v1[14];
      if (v11 < 0) {
        goto LABEL_29;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -1;
      do
      {
        uint64_t v14 = *(void *)(*((void *)v1 + 19) + v12);
        if (v14)
        {
          MEMORY[0x1C185D340](v14, 0x1000C8052888210);
          int v11 = v1[14];
        }
        ++v13;
        v12 += 16;
      }
      while (v13 < v11);
      if (*((void *)v1 + 19)) {
LABEL_29:
      }
        MEMORY[0x1C185D370]();
      *((void *)v1 + 19) = 0;
    }
    if (*((void *)v1 + 18))
    {
      int v15 = v1[3];
      if (v15 < 1) {
        goto LABEL_38;
      }
      uint64_t v16 = 0;
      for (uint64_t k = 0; k < v15; ++k)
      {
        uint64_t v18 = *(void *)(*((void *)v1 + 18) + v16);
        if (v18)
        {
          MEMORY[0x1C185D340](v18, 0x1000C8052888210);
          int v15 = v1[3];
        }
        v16 += 16;
      }
      if (*((void *)v1 + 18)) {
LABEL_38:
      }
        MEMORY[0x1C185D370]();
      *((void *)v1 + 18) = 0;
    }
    uint64_t v19 = *((void *)v1 + 22);
    if (v19) {
      MEMORY[0x1C185D340](v19, 0x1000C8052888210);
    }
    if (*((void *)v1 + 14))
    {
      int v20 = v1[14];
      if (v20 < 0) {
        goto LABEL_49;
      }
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = *(void *)(*((void *)v1 + 14) + 8 * v21);
        if (v22)
        {
          MEMORY[0x1C185D340](v22, 0x1000C8052888210);
          int v20 = v1[14];
        }
      }
      while (v21++ < v20);
      if (*((void *)v1 + 14)) {
LABEL_49:
      }
        MEMORY[0x1C185D340]();
      *((void *)v1 + 14) = 0;
    }
    uint64_t v24 = *((void *)v1 + 12);
    if (v24) {
      MEMORY[0x1C185D340](v24, 0x80C80B8603338);
    }
    this = (_DWORD *)*((void *)v1 + 13);
    if (this)
    {
      JUMPOUT(0x1C185D340);
    }
  }
  return this;
}

uint64_t CmhBEAMprocOpt::initialize(int32x2_t *this, int a2)
{
  LODWORD(v2) = a2;
  int v4 = this[2].i32[1];
  if (v4 >= 0) {
    int v5 = this[2].i32[1];
  }
  else {
    int v5 = v4 + 1;
  }
  this[6] = vadd_s32(vdup_n_s32(v5 >> 1), (int32x2_t)0x1FFFFFFFFLL);
  int v6 = -1;
  LOWORD(v7) = v4;
  do
  {
    int v7 = (unsigned __int16)v7 >> 1;
    ++v6;
  }
  while (v7);
  this[3].i32[0] = v6;
  this[5].i32[1] = this[5].i32[0] * v4;
  CmhBEAMprocOpt::deallocate_memory(this);
  this[1].i32[1] = v2;
  int v8 = this[3].i32[0];
  if (v8 < 1)
  {
    int v10 = 1;
  }
  else
  {
    unsigned __int16 v9 = 1;
    do
    {
      v9 *= 2;
      --v8;
    }
    while (v8);
    int v10 = v9;
  }
  signed int v11 = this[2].i32[1];
  this[11].i32[0] = v11 != v10;
  if (!this->i32[0])
  {
    this->i32[0] = 1;
    uint64_t v12 = this[7].i32[0];
    if ((int)v12 < 0) {
      size_t v18 = -1;
    }
    else {
      size_t v18 = 8 * v12;
    }
    uint64_t v19 = operator new[](v18, MEMORY[0x1E4FBA2D0]);
    this[17] = (int32x2_t)v19;
    if (v19)
    {
      bzero(v19, 8 * (int)v12);
      if ((int)v12 < 1)
      {
LABEL_32:
        size_t v26 = 4 * v11;
        if (v11 < 0) {
          size_t v27 = -1;
        }
        else {
          size_t v27 = 4 * v11;
        }
        unint64_t v28 = operator new[](v27, MEMORY[0x1E4FBA2D0]);
        this[20] = (int32x2_t)v28;
        if (v28)
        {
          bzero(v28, v26);
          uint64_t v29 = operator new[](v27, MEMORY[0x1E4FBA2D0]);
          this[21] = (int32x2_t)v29;
          if (v29)
          {
            bzero(v29, v26);
            uint64_t v2 = this[1].i32[1];
            size_t v30 = (int)v2 < 0 ? -1 : 8 * v2;
            double v31 = operator new[](v30, MEMORY[0x1E4FBA2D0]);
            this[16] = (int32x2_t)v31;
            if (v31)
            {
              bzero(v31, 8 * (int)v2);
              if ((int)v2 < 1)
              {
LABEL_49:
                int v38 = v12 + 1;
                if ((int)v12 < -1) {
                  size_t v39 = -1;
                }
                else {
                  size_t v39 = 16 * v38;
                }
                uint64_t v40 = (char *)operator new[](v39, MEMORY[0x1E4FBA2D0]);
                this[19] = (int32x2_t)v40;
                if (v40)
                {
                  uint64_t v41 = v38;
                  if ((v12 & 0x80000000) != 0)
                  {
LABEL_60:
                    if ((int)v2 < 0) {
                      size_t v49 = -1;
                    }
                    else {
                      size_t v49 = 16 * (int)v2;
                    }
                    vDSP_Length v50 = (char *)operator new[](v49, MEMORY[0x1E4FBA2D0]);
                    this[18] = (int32x2_t)v50;
                    if (v50)
                    {
                      int v51 = this[2].i32[1];
                      if ((int)v2 <= 0)
                      {
                        size_t v52 = 4 * v51;
LABEL_76:
                        if (v51 < 0) {
                          size_t v60 = -1;
                        }
                        else {
                          size_t v60 = v52;
                        }
                        unsigned int v61 = operator new[](v60, MEMORY[0x1E4FBA2D0]);
                        this[22] = (int32x2_t)v61;
                        if (v61)
                        {
                          bzero(v61, v52);
                          size_t v62 = (int)v12 < -1 ? -1 : 8 * v41;
                          unsigned int v63 = operator new[](v62, MEMORY[0x1E4FBA2D0]);
                          this[12] = (int32x2_t)v63;
                          if (v63)
                          {
                            size_t v64 = 8 * (int)v12 + 8;
                            bzero(v63, v64);
                            id v65 = operator new[](v62, MEMORY[0x1E4FBA2D0]);
                            this[13] = (int32x2_t)v65;
                            if (v65)
                            {
                              bzero(v65, v64);
                              if ((v12 & 0x80000000) == 0)
                              {
                                uint64_t v66 = 0;
                                do
                                {
                                  *(void *)(*(void *)&this[12] + v66) = 0;
                                  *(void *)(*(void *)&this[13] + v66) = 0;
                                  v66 += 8;
                                }
                                while (8 * v41 != v66);
                              }
                              int v67 = operator new[](v62, MEMORY[0x1E4FBA2D0]);
                              this[14] = (int32x2_t)v67;
                              if (v67)
                              {
                                bzero(v67, v64);
                                if ((v12 & 0x80000000) != 0)
                                {
                                  signed int v11 = v51;
                                  goto LABEL_13;
                                }
                                uint64_t v68 = 0;
                                unsigned int v69 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                                while (1)
                                {
                                  uint64_t v70 = this[2].i32[1];
                                  size_t v71 = 4 * v70;
                                  size_t v72 = (int)v70 < 0 ? -1 : 4 * v70;
                                  *(void *)(*(void *)&this[14] + 8 * v68) = operator new[](v72, v69);
                                  unsigned int v73 = *(void **)(*(void *)&this[14] + 8 * v68);
                                  if (!v73) {
                                    break;
                                  }
                                  bzero(v73, v71);
                                  uint64_t v12 = this[7].i32[0];
                                  if (v68++ >= v12)
                                  {
                                    LODWORD(v2) = this[1].i32[1];
                                    signed int v11 = this[2].i32[1];
                                    goto LABEL_13;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        uint64_t v75 = v41;
                        size_t v52 = 4 * v51;
                        if (v51 < 0) {
                          size_t v53 = -1;
                        }
                        else {
                          size_t v53 = 4 * v51;
                        }
                        if (v51 >= 0) {
                          int v54 = this[2].i32[1];
                        }
                        else {
                          int v54 = v51 + 1;
                        }
                        uint64_t v55 = (uint64_t)v54 >> 1;
                        uint64_t v56 = v2;
                        uint64_t v57 = v50 + 8;
                        float v58 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                        while (1)
                        {
                          unsigned int v59 = (char *)operator new[](v53, v58);
                          *(v57 - 1) = v59;
                          if (!v59) {
                            break;
                          }
                          *uint64_t v57 = &v59[4 * v55];
                          v57 += 2;
                          if (!--v56)
                          {
                            uint64_t v41 = v75;
                            goto LABEL_76;
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v42 = this[2].i32[1];
                    if ((int)v42 < 0) {
                      size_t v43 = -1;
                    }
                    else {
                      size_t v43 = 4 * v42;
                    }
                    uint64_t v44 = (uint64_t)(int)(v42 + ((int)v42 < 0)) >> 1;
                    uint64_t v45 = v41;
                    float v46 = v40 + 8;
                    char v47 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                    while (1)
                    {
                      uint64_t v48 = (char *)operator new[](v43, v47);
                      *(v46 - 1) = v48;
                      if (!v48) {
                        break;
                      }
                      void *v46 = &v48[4 * v44];
                      v46 += 2;
                      if (!--v45) {
                        goto LABEL_60;
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v32 = 0;
                double v33 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
                while (1)
                {
                  uint64_t v34 = this[2].i32[1];
                  size_t v35 = 4 * v34;
                  size_t v36 = (int)v34 < 0 ? -1 : 4 * v34;
                  *(void *)(*(void *)&this[16] + 8 * v32) = operator new[](v36, v33);
                  int v37 = *(void **)(*(void *)&this[16] + 8 * v32);
                  if (!v37) {
                    break;
                  }
                  bzero(v37, v35);
                  if (++v32 >= this[1].i32[1])
                  {
                    LODWORD(v12) = this[7].i32[0];
                    LODWORD(v2) = this[1].i32[1];
                    goto LABEL_49;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
        while (1)
        {
          uint64_t v22 = this[2].i32[1];
          size_t v23 = 4 * v22;
          size_t v24 = (int)v22 < 0 ? -1 : 4 * v22;
          *(void *)(*(void *)&this[17] + 8 * v2std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = operator new[](v24, v21);
          uint64_t v25 = *(void **)(*(void *)&this[17] + 8 * v20);
          if (!v25) {
            break;
          }
          bzero(v25, v23);
          ++v20;
          uint64_t v12 = this[7].i32[0];
          if (v20 >= v12)
          {
            signed int v11 = this[2].i32[1];
            goto LABEL_32;
          }
        }
      }
    }
    return 4294967294;
  }
  LODWORD(v12) = this[7].i32[0];
LABEL_13:
  uint64_t result = LPFilterBank::Initialize((LPFilterBank *)&this[174], (int)v12 + 1, v2, v11, this[3].i32[1], this[5].i32[0]);
  if (!result)
  {
    uint64_t result = CmhBEAM2NOpt::initialize((CmhBEAM2NOpt *)&this[23], this[2].i32[0], this[2].i32[1], this[3].i32[1], this[7].i32[1], this[1].i32[1]);
    if (!result)
    {
      __int32 v14 = this[1].i32[1];
      Cns::deallocate_memory((uint64_t)&this[132]);
      this[135].i32[1] = v14;
      uint64_t result = Cns::init((Cns *)&this[132]);
      if (!result)
      {
        __int32 v15 = this[3].i32[1];
        Cns::deallocate_memory((uint64_t)&this[132]);
        this[134].i32[1] = v15;
        uint64_t result = Cns::init((Cns *)&this[132]);
        if (!result)
        {
          float v16 = (float)this[2].i32[0];
          Cns::deallocate_memory((uint64_t)&this[132]);
          *(float *)this[134].i32 = v16;
          uint64_t result = Cns::init((Cns *)&this[132]);
          if (!result)
          {
            __int32 v17 = this[2].i32[1];
            Cns::deallocate_memory((uint64_t)&this[132]);
            this[135].i32[0] = v17;
            uint64_t result = Cns::init((Cns *)&this[132]);
            if (!result)
            {
              CmhBEAMprocOpt::init_dc_block((uint64_t)this);
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CmhBEAMprocOpt::init_dc_block(uint64_t this)
{
  float v1 = 628.318531 / (float)*(int *)(this + 16);
  double v2 = (float)(1.0 - v1) + (float)(v1 * v1) * 0.5;
  BOOL v3 = v2 <= -0.9999;
  BOOL v4 = v2 < 0.9999 || v2 <= -0.9999;
  if (v2 >= 0.9999) {
    BOOL v3 = 1;
  }
  float v5 = 0.9999;
  if (v4) {
    float v5 = -0.9999;
  }
  float v6 = v2;
  if (v3) {
    float v6 = v5;
  }
  *(float *)(this + 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v6;
  *(float *)(this + 84) = (float)(v6 + 1.0) * 0.5;
  *(void *)(this + 64) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

uint64_t CmhBEAMprocOpt::process(CmhBEAMprocOpt *this, float **a2, float **a3, float **a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)this) {
    return 1;
  }
  if (*((_DWORD *)this + 30) == 1)
  {
    if (*((int *)this + 14) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        LPFilterBank::Analysis((CmhBEAMprocOpt *)((char *)this + 1392), v8, a2[v8], (DSPSplitComplex *)(*((void *)this + 19) + v7));
        ++v8;
        v7 += 16;
      }
      while (v8 < *((int *)this + 14));
    }
    if (*((_DWORD *)this + 3) == 2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        memcpy(*(void **)(*((void *)this + 18) + v9), *(const void **)(*((void *)this + 19) + v9), 4 * *((int *)this + 5));
        ++v10;
        v9 += 16;
      }
      while (v10 < *((int *)this + 3));
    }
    else
    {
      memcpy(**((void ***)this + 18), *(const void **)(*((void *)this + 19) + 16 * *((int *)this + 1)), 4 * *((int *)this + 5));
    }
    goto LABEL_61;
  }
  int v12 = *((_DWORD *)this + 7);
  if (v12 >= 1)
  {
    int v13 = 0;
    __int32 v14 = *a2;
    do
    {
      float v15 = (float)(*((float *)this + 21) * (float)(*v14 - *((float *)this + 16)))
          + (float)(*((float *)this + 20) * *((float *)this + 17));
      *((float *)this + 17) = v15;
      *((float *)this + 16) = *v14;
      *v14++ = v15;
      ++v13;
    }
    while (v12 > (unsigned __int16)v13);
    int v16 = 0;
    __int32 v17 = a2[1];
    do
    {
      float v18 = (float)(*((float *)this + 21) * (float)(*v17 - *((float *)this + 18)))
          + (float)(*((float *)this + 20) * *((float *)this + 19));
      *((float *)this + 19) = v18;
      *((float *)this + 18) = *v17;
      *v17++ = v18;
      ++v16;
    }
    while (v12 > (unsigned __int16)v16);
  }
  if (*((int *)this + 14) >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      LPFilterBank::Analysis((CmhBEAMprocOpt *)((char *)this + 1392), v20, a2[v20], (DSPSplitComplex *)(*((void *)this + 19) + v19));
      ++v20;
      v19 += 16;
    }
    while (v20 < *((int *)this + 14));
  }
  CmhBEAM2NOpt::process((CmhBEAMprocOpt *)((char *)this + 184), *((const DSPSplitComplex **)this + 19), *((DSPSplitComplex **)this + 18));
  uint64_t v21 = (*((_DWORD *)this + 265) + *((_DWORD *)this + 271));
  uint64_t v22 = *((void *)this + 133);
  if ((int)v21 < 1)
  {
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v23 = 0;
    int v24 = 0;
    do
    {
      if (*(_DWORD *)(v22 + 4 * v23) == 1) {
        int v24 = v23;
      }
      ++v23;
    }
    while (v21 != v23);
    uint64_t v25 = v24;
  }
  if (*(_DWORD *)(v22 + 4 * v25))
  {
    if (*((int *)this + 3) >= 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      do
      {
        vDSP_ztoc((const DSPSplitComplex *)(*((void *)this + 18) + v26), 1, *(DSPComplex **)(*((void *)this + 16) + 8 * v27++), 2, (uint64_t)(*((_DWORD *)this + 5) + (*((int *)this + 5) < 0)) >> 1);
        v26 += 16;
      }
      while (v27 < *((int *)this + 3));
    }
    Cns::process((uint64_t)this + 1056, *((float ***)this + 16));
    if (*((int *)this + 3) >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      do
      {
        vDSP_ctoz(*(const DSPComplex **)(*((void *)this + 16) + 8 * v29++), 2, (const DSPSplitComplex *)(*((void *)this + 18) + v28), 1, (uint64_t)(*((_DWORD *)this + 5) + (*((int *)this + 5) < 0)) >> 1);
        v28 += 16;
      }
      while (v29 < *((int *)this + 3));
    }
  }
  if (*((_DWORD *)this + 2))
  {
    CmhBEAMprocOpt::post_res_ns_proc(this);
    *((_DWORD *)this + 76) = *((_DWORD *)this + 23);
  }
  else
  {
    int v30 = *((_DWORD *)this + 3);
    if (v30 >= 1)
    {
      for (uint64_t i = 0; i < v30; ++i)
      {
        int v32 = *((_DWORD *)this + 271) + *((_DWORD *)this + 265) - 1;
        if (v32 >= (int)i) {
          int v32 = i;
        }
        if (*(_DWORD *)(*((void *)this + 133) + 4 * v32))
        {
          double v33 = (const float *)*((void *)this + 22);
          uint64_t v34 = *((unsigned int *)this + 272);
          if ((int)v34 >= 1)
          {
            uint64_t v35 = *(void *)(*((void *)this + 173) + 112 * (int)i + 16);
            size_t v36 = (int *)*((void *)this + 161);
            int v37 = (_DWORD *)*((void *)this + 22);
            do
            {
              uint64_t v38 = *v36++;
              *v37++ = *(_DWORD *)(v35 + 4 * v38);
              --v34;
            }
            while (v34);
          }
          size_t v39 = (float *)(*(void *)(*((void *)this + 18) + 16 * i) + 4);
          vDSP_vmul(v39, 1, v33, 1, v39, 1, *((int *)this + 12));
          uint64_t v40 = (float *)(*(void *)(*((void *)this + 18) + 16 * i + 8) + 4);
          vDSP_vmul(v40, 1, v33, 1, v40, 1, *((int *)this + 12));
          int v30 = *((_DWORD *)this + 3);
        }
      }
    }
  }
  if (*((_DWORD *)this + 77)) {
    goto LABEL_61;
  }
  int v41 = *((_DWORD *)this + 48);
  if (v41 >= 1) {
    int v42 = 1;
  }
  else {
    int v42 = *((_DWORD *)this + 48);
  }
  uint64_t v43 = *((void *)this + 74);
  v54[0] = *(_DWORD *)(v43 + 136 * v42 - 28);
  int v44 = *((_DWORD *)this + 3);
  if (v44 == 2)
  {
    if (v41 >= 2) {
      int v41 = 2;
    }
    v54[1] = *(_DWORD *)(v43 + 136 * v41 - 28);
    goto LABEL_55;
  }
  if (v44 >= 1)
  {
LABEL_55:
    uint64_t v45 = 0;
    for (uint64_t j = 0; j < v44; ++j)
    {
      if (v54[j] == 1)
      {
        int v47 = *((_DWORD *)this + 48) - 1;
        if (v47 >= (int)j) {
          int v47 = j;
        }
        uint64_t v48 = *(const float **)(*((void *)this + 74) + 136 * v47 + 120);
        size_t v49 = (float *)(*(void *)(*((void *)this + 18) + v45) + 4);
        vDSP_vmul(v49, 1, v48, 1, v49, 1, *((int *)this + 12));
        vDSP_Length v50 = (float *)(*(void *)(*((void *)this + 18) + v45 + 8) + 4);
        vDSP_vmul(v50, 1, v48, 1, v50, 1, *((int *)this + 12));
        int v44 = *((_DWORD *)this + 3);
      }
      v45 += 16;
    }
  }
LABEL_61:
  if (*((int *)this + 3) >= 1)
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    do
    {
      uint64_t v53 = *((void *)this + 18) + v51;
      **(_DWORD **)(v53 + 8) = 0;
      **(_DWORD **)uint64_t v53 = 0;
      LPFilterBank::Synthesis((CmhBEAMprocOpt *)((char *)this + 1392), v52, (const DSPSplitComplex *)v53, a3[v52]);
      ++v52;
      v51 += 16;
    }
    while (v52 < *((int *)this + 3));
  }
  return 0;
}

void CmhBEAMprocOpt::post_res_ns_proc(CmhBEAMprocOpt *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*((_DWORD *)this + 265) + *((_DWORD *)this + 271));
  uint64_t v3 = *((void *)this + 133);
  if ((int)v2 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 0;
    do
    {
      if (*(_DWORD *)(v3 + 4 * v4) == 1) {
        int v5 = v4;
      }
      ++v4;
    }
    while (v2 != v4);
    uint64_t v6 = v5;
  }
  uint64_t v7 = *((void *)this + 14);
  if (*(_DWORD *)(v3 + 4 * v6))
  {
    Cns::comf_noise(*(float **)v7, (float *)*((unsigned int *)this + 5));
    uint64_t v7 = *((void *)this + 14);
  }
  else
  {
    uint64_t v8 = *((unsigned int *)this + 5);
    if ((int)v8 >= 1) {
      bzero(*(void **)v7, 4 * v8);
    }
  }
  uint64_t v9 = *((unsigned int *)this + 12);
  if ((int)v9 >= 1) {
    memset_pattern16(*(void **)(v7 + 8), &unk_1BB873A60, 4 * v9);
  }
  if (*((int *)this + 3) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      int v11 = *((_DWORD *)this + 271) + *((_DWORD *)this + 265) - 1;
      if (v11 >= (int)v10) {
        int v11 = v10;
      }
      int v12 = (float *)*((void *)this + 22);
      if (*(_DWORD *)(*((void *)this + 133) + 4 * v11) == 1)
      {
        uint64_t v13 = *((unsigned int *)this + 272);
        if ((int)v13 >= 1)
        {
          uint64_t v14 = *(void *)(*((void *)this + 173) + 112 * (int)v10 + 16);
          float v15 = (int *)*((void *)this + 161);
          int v16 = (_DWORD *)*((void *)this + 22);
          do
          {
            uint64_t v17 = *v15++;
            *v16++ = *(_DWORD *)(v14 + 4 * v17);
            --v13;
          }
          while (v13);
        }
        LODWORD(v18) = *((_DWORD *)this + 12);
      }
      else
      {
        uint64_t v18 = *((unsigned int *)this + 12);
        if ((int)v18 >= 1) {
          memset_pattern16(*((void **)this + 22), &unk_1BB873A60, 4 * v18);
        }
      }
      vDSP_vmul(v12, 1, *(const float **)(*((void *)this + 14) + 8), 1, v12, 1, (int)v18);
      uint64_t v19 = (float *)(*(void *)(*((void *)this + 18) + 16 * v10) + 4);
      vDSP_vmul(v19, 1, v12, 1, v19, 1, *((int *)this + 12));
      uint64_t v20 = (float *)(*(void *)(*((void *)this + 18) + 16 * v10 + 8) + 4);
      vDSP_vmul(v20, 1, v12, 1, v20, 1, *((int *)this + 12));
      MEMORY[0x1F4188790](v21);
      uint64_t v22 = *((int *)this + 5);
      __Z.realp = (float *)((char *)&v25 - v23);
      __Z.imagp = (float *)((char *)&v25 + 4 * v22 - v23);
      if ((int)v22 >= 0) {
        int v24 = v22;
      }
      else {
        int v24 = v22 + 1;
      }
      vDSP_ctoz(**((const DSPComplex ***)this + 14), 2, &__Z, 1, (uint64_t)v24 >> 1);
      Cns::add_comf_noise((uint64_t)this + 1056, *(DSPSplitComplex **)(*((void *)this + 18) + 16 * v10), *(const DSPSplitComplex **)(*((void *)this + 18) + 16 * v10 + 8), __Z.realp, __Z.imagp, v12, v10);
      ++v10;
    }
    while (v10 < *((int *)this + 3));
  }
}

uint64_t CmhBEAMprocOpt::setModelFreqEQVector(CmhBEAMprocOpt *this, CmhBEAM2NOpt *a2)
{
  CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, **((void **)this + 37), 93.75, (float *)*((unsigned int *)this + 53), (float)*((int *)this + 49) / (float)*((int *)this + 50));
  uint64_t v4 = *(void *)(*((void *)this + 37) + 8);
  int v5 = (float *)*((unsigned int *)this + 53);
  float v6 = (float)*((int *)this + 49) / (float)*((int *)this + 50);

  return CmhBEAM2NOpt::interpolateFrequencyVector((uint64_t)a2, (float *)0x101, v4, 93.75, v5, v6);
}

float CmhBEAMprocOpt::setModelFreqCompVector(CmhBEAMprocOpt *this, CmhBEAM2NOpt *a2)
{
  uint64_t v3 = (CmhBEAMprocOpt *)((char *)this + 184);
  CmhBEAM2NOpt::setModelFreqCompVector((CmhBEAMprocOpt *)((char *)this + 184), a2, 0);

  return CmhBEAM2NOpt::setModelFreqCompVector(v3, a2, 1u);
}

void CmhBEAMprocOpt::setWNG(CmhBEAMprocOpt *this, float a2)
{
  uint64_t v3 = (void **)((char *)this + 184);
  float v4 = __exp10(a2 * 0.1);
  *((float *)this + 116) = v4;

  CmhBEAM2NOpt::calc_wng_beta_bound(v3, v4);
}

void lmsfilt_v4::initLmsFilter(int a1, int a2, int a3, uint64_t a4, float ***a5, int a6)
{
  float __A = 0.0;
  int v11 = *(_DWORD *)(a4 + 16);
  int v12 = *(_DWORD *)(a4 + 44);
  uint64_t v13 = malloc_type_malloc(0x60uLL, 0x2C8E6D5CuLL);
  if (!v13) {
    goto LABEL_32;
  }
  v13[10] = 0;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *a5 = (float **)v13;
  *((_DWORD *)v13 + 8) = v12;
  *((_DWORD *)v13 + 9) = v12 * v11;
  int v14 = v12 * v11 * a6;
  *((_DWORD *)v13 + 22) = v14;
  *((_DWORD *)v13 + 23) = a6;
  int v15 = 4 * v14;
  int v16 = 4 * v14;
  uint64_t v17 = (float *)malloc_type_malloc(4 * v14, 0x2C8E6D5CuLL);
  if (4 * v14 && v17 == 0) {
    goto LABEL_32;
  }
  uint64_t v19 = v17;
  bzero(v17, v15);
  **a5 = v19;
  uint64_t v20 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL);
  if (v16 && v20 == 0) {
    goto LABEL_32;
  }
  uint64_t v22 = v20;
  bzero(v20, v15);
  (*a5)[1] = v22;
  uint64_t v23 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL);
  if (v16 && v23 == 0) {
    goto LABEL_32;
  }
  uint64_t v25 = v23;
  bzero(v23, v15);
  (*a5)[2] = v25;
  uint64_t v26 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL);
  BOOL v27 = v16 && v26 == 0;
  if (v27
    || ((uint64_t v28 = v26, bzero(v26, v15), (*a5)[3] = v28, v29 = (float *)malloc_type_malloc(v15, 0x2C8E6D5CuLL), v16)
      ? (BOOL v30 = v29 == 0)
      : (BOOL v30 = 0),
        v30))
  {
LABEL_32:
    exceptiounint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v37 = std::bad_alloc::bad_alloc(exception);
  }
  double v31 = v29;
  bzero(v29, v15);
  (*a5)[6] = v31;
  vDSP_vfill(&__A, **a5, 1, v14);
  vDSP_vfill(&__A, (*a5)[1], 1, v14);
  vDSP_vfill(&__A, (*a5)[2], 1, v14);
  vDSP_vfill(&__A, (*a5)[3], 1, v14);
  vDSP_vfill(&__A, (*a5)[6], 1, v14);
  int v32 = *a5;
  *((float *)v32 + 1std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = (float)(1.0 - *(float *)(a4 + 92)) + (float)(1.0 - *(float *)(a4 + 92));
  *((_DWORD *)v32 + 11) = 1;
  v32[7] = 0;
  *((_DWORD *)v32 + 16) = 0;
  *((_DWORD *)v32 + 17) = a1;
  *((_DWORD *)v32 + 18) = 0;
  *((_DWORD *)v32 + 19) = v12 - 1;
  int v33 = a3 / v11;
  if (a3 / v11 >= v12) {
    int v33 = v12;
  }
  int v34 = (a3 - a2) / v11;
  *((_DWORD *)v32 + 2std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v34;
  *((_DWORD *)v32 + 21) = v33;
  if (v33 - v34 <= 1)
  {
    if (v12 == 4) {
      int v35 = -1;
    }
    else {
      int v35 = 0;
    }
    if (v12 > 4) {
      int v35 = -2;
    }
    *((_DWORD *)v32 + 2std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v33 + v35;
  }
}

void lmsfilt_v4::runLmsFilter_v4(DSPSplitComplex *this, DSPSplitComplex *a2, DSPSplitComplex *a3, uint64_t a4, int *a5, uint64_t a6, float *a7, float *a8, float *a9, float *a10, int *a11, unsigned __int8 *a12, int a13, int a14, int a15, int a16, const BOOL *a17)
{
  uint64_t v38 = a5;
  uint64_t v21 = a3;
  uint64_t v24 = a10;
  vDSP_Length v25 = (int)a3;
  vDSP_vclr(a2->realp, 1, (int)a3);
  vDSP_vclr(a2->imagp, 1, v25);
  if ((int)a10 < 2)
  {
    LODWORD(v37) = HIDWORD(a9);
    lmsfilt_v3::runLmsFilter_v3(this, v21, a4, (uint64_t)v38, a6, a7, a8, (float *)a9, v37, v38, v39[0], v39[1]);
    size_t v34 = 4 * v25;
    memcpy(a2->realp, this->realp, v34);
    imagp = a2->imagp;
    size_t v36 = this->imagp;
    memcpy(imagp, v36, v34);
  }
  else
  {
    uint64_t v41 = a6;
    int v42 = a7;
    uint64_t v43 = a8;
    int v44 = a2;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v45 = (float *)v25;
    uint64_t v46 = 4 * v25;
    uint64_t v29 = v38;
    int v30 = HIDWORD(a9);
    *(void *)uint64_t v40 = v21;
    do
    {
      int v31 = *a12++;
      int v32 = (float *)((char *)this->realp + v26);
      int v33 = (float *)((char *)this->imagp + v26);
      if (v31)
      {
        v48.realp = (float *)((char *)this->realp + v26);
        v48.imagp = v33;
        LODWORD(v37) = v30;
        lmsfilt_v3::runLmsFilter_v3(&v48, v21, a4 + v27 * 4, (uint64_t)&v29[v27], v41 + v28 * 4, &v42[v28], v43, (float *)a9, v37, v38, v40[0], v40[1]);
        vDSP_vadd(v32, 1, v44->realp, 1, v44->realp, 1, (vDSP_Length)v45);
        uint64_t v21 = *(DSPSplitComplex **)v40;
        vDSP_vadd(v33, 1, v44->imagp, 1, v44->imagp, 1, (vDSP_Length)v45);
      }
      else
      {
        vDSP_vclr((float *)((char *)this->realp + v26), 1, (vDSP_Length)v45);
        vDSP_vclr(v33, 1, (vDSP_Length)v45);
      }
      int v30 = HIDWORD(a9);
      v28 += SHIDWORD(a10);
      v27 += (int)a11;
      v26 += v46;
      --v24;
    }
    while (v24);
  }
}

uint64_t VoiceProcessor_SetProperty_Private(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (a1)
  {
    if (a3)
    {
      unsigned int v9 = a2;
      *(void *)AudioStreamBasicDescription buf = a3;
      unsigned int v7 = a4;
      unint64_t v4 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v9, buf, &v7);
      if (v4 >= 0x100000000) {
        unint64_t v4 = 0x100000000;
      }
      return ErrorFromOSStatus(v4);
    }
    else
    {
      return 1650553447;
    }
  }
  else
  {
    float v6 = vp::log(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_FAULT, "failed to set property due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

id vp::log(vp *this)
{
  if (vp::log(void)::onceToken != -1) {
    dispatch_once(&vp::log(void)::onceToken, &__block_literal_global_7);
  }
  float v1 = (void *)vp::log(void)::g_log;

  return v1;
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(uint64_t a1, unsigned int *a2, void *a3, unsigned int *a4)
{
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  int v8 = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), *a2, *a3, *a4);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 24) = v8;
    *(void *)(v9 + 32) = "SetProperty";
    *(void *)(v9 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>"
                           "::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty, Arg"
                           "TypeList = <unsigned int &, const void *&, unsigned int &>]";
    *(void *)uint64_t v9 = &unk_1F14C1518;
    *(void *)(v9 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v9);
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
  return 0x1626C6300;
}

void sub_1BB720858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
  {
    int v37 = (vp *)__cxa_begin_catch(a1);
    uint64_t v38 = vp::log(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)7>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 144, (uint64_t)&a27, 2, 1, 2);
      *(void *)(v36 - 128) = v36 - 144;
      *(unsigned char *)(v36 - 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[246],char [246],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty, ArgTypeList = <unsigned int &, const void *&, unsigned int &>]");
      a24 = &a22;
      a25 = 1;
      *(void *)(v36 - 96) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 112, (uint64_t)&a18, 2, 1, 2);
      *(unsigned char *)(v36 - 88) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 144, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v36 - 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 136315138;
      *(void *)(v36 - 76) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 80), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 144 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB720818);
  }
  _Unwind_Resume(a1);
}

uint64_t ErrorFromOSStatus(uint64_t result)
{
  if ((int)result <= 1651270506)
  {
    if ((int)result > 1650681446)
    {
      if (result == 1650681447) {
        return result;
      }
      int v1 = 1651076964;
    }
    else
    {
      if (!result) {
        return result;
      }
      int v1 = 1650553447;
    }
  }
  else if ((int)result > 1651733600)
  {
    if (result == 1651733601) {
      return result;
    }
    int v1 = 2004186175;
  }
  else
  {
    if ((result - 1651270507) < 2) {
      return result;
    }
    int v1 = 1651664230;
  }
  if (result != v1) {
    return 2004186175;
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "call_signature");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB720B3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[246],char [246],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB720BB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  int v15 = *(char **)(a1 + 40);
  int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    int v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    uint64_t v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB720EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "call_status");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB7210C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjRPKvS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t ___ZN2vpL3logEv_block_invoke()
{
  vp::log(void)::g_log = (uint64_t)os_log_create("com.apple.coreaudio", "voice_processor_spi");

  return MEMORY[0x1F41817F8]();
}

uint64_t VoiceProcessor_GetProperty_Private(std::__shared_mutex_base *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t result = 1650553447;
    if (a3 && a4)
    {
      unint64_t v9 = 1651270507;
      if (std::__shared_mutex_base::try_lock_shared(this))
      {
        int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *))(*(void *)this[1].__mut_.__m_.__sig
                                                                                           + 48))(this[1].__mut_.__m_.__sig, a2, a3, *a4, a4);
        unint64_t v9 = 0x1626C6300;
        if (v10)
        {
          uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = v10;
          *(void *)(v11 + 32) = "GetProperty";
          *(void *)(v11 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcess"
                                  "orBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Ge"
                                  "tProperty, ArgTypeList = <unsigned int &, void *&, unsigned int &, unsigned int *&>]";
          *(void *)uint64_t v11 = &unk_1F14C14F0;
          *(void *)(v11 + 8) = 0;
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)this[1].__mut_.__m_.__opaque, (caulk::concurrent::message *)v11);
        }
        std::__shared_mutex_base::unlock_shared(this);
      }
      if (v9 >= 0x100000000) {
        uint64_t v12 = 0x100000000;
      }
      else {
        uint64_t v12 = v9;
      }
      return ErrorFromOSStatus(v12);
    }
  }
  else
  {
    uint64_t v13 = vp::log(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_FAULT, "failed to get property due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
  return result;
}

void sub_1BB72132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
  {
    char v37 = (vp *)__cxa_begin_catch(a1);
    uint64_t v38 = vp::log(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, vp::call_traits<(vp::call_type)6>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(void *)(v36 - 144) = v36 - 160;
      *(unsigned char *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[257],char [257],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetProperty, ArgTypeList = <unsigned int &, void *&, unsigned int &, unsigned int *&>]");
      a24 = &a22;
      a25 = 1;
      *(void *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(unsigned char *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v36 - 96) = 136315138;
      *(void *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB721288);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[257],char [257],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB721568(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  uint64_t v15 = *(char **)(a1 + 40);
  int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    int v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    uint64_t v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB72187C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPvS9_RPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA257_SM_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VoiceProcessor_SetParameter_Private(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v9[0] = a3;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
    int v5 = (*(uint64_t (**)(void, uint64_t, float *, uint64_t))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), a2, v9, 4);
    if (v5)
    {
      uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 24) = v5;
      *(void *)(v6 + 32) = "SetProperty";
      *(void *)(v6 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBas"
                             "e>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty,"
                             " ArgTypeList = <unsigned int &, float *, const unsigned int &>]";
      *(void *)uint64_t v6 = &unk_1F14C14C8;
      *(void *)(v6 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v6);
    }
    std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
    return ErrorFromOSStatus(0x100000000);
  }
  else
  {
    int v8 = vp::log(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_FAULT, "failed to set parameter due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1BB721BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,long long a45)
{
  if (a2)
  {
    uint64_t v46 = (vp *)__cxa_begin_catch(a1);
    int v47 = vp::log(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, &vp::call_traits<(vp::call_type)7>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v45 - 144, (uint64_t)&a27, 2, 1, 2);
      a39 = v45 - 144;
      *(unsigned char *)(v45 - 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[246],char [246],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::SetProperty, ArgTypeList = <unsigned int &, float *, const unsigned int &>]");
      a24 = &a22;
      a25 = 1;
      a43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v45 - 112, (uint64_t)&a18, 2, 1, 2);
      *(unsigned char *)(v45 - 88) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v45 - 144, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      p_p = __p;
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      *(_DWORD *)(v45 - 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 136315138;
      *(void *)((char *)&a45 + 4) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v45 - 80), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v45 - 144 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB721B5CLL);
  }
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  uint64_t v15 = *(char **)(a1 + 40);
  int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    int v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    uint64_t v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB7220E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE7EJRjPfRKjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VoiceProcessor_GetParameter_Private(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a3)
    {
      v12[0] = 4;
      unint64_t v6 = 1651270507;
      if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
      {
        int v7 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, int *))(**(void **)(a1 + 168) + 48))(*(void *)(a1 + 168), a2, a3, 4, v12);
        unint64_t v6 = 0x1626C6300;
        if (v7)
        {
          uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = v7;
          *(void *)(v8 + 32) = "GetProperty";
          *(void *)(v8 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcesso"
                                 "rBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetP"
                                 "roperty, ArgTypeList = <unsigned int &, float *&, unsigned int &, unsigned int *>]";
          *(void *)uint64_t v8 = &unk_1F14C14A0;
          *(void *)(v8 + 8) = 0;
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v8);
        }
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
      }
      if (v6 >= 0x100000000) {
        uint64_t v9 = 0x100000000;
      }
      else {
        uint64_t v9 = v6;
      }
      return ErrorFromOSStatus(v9);
    }
    else
    {
      return 1650553447;
    }
  }
  else
  {
    uint64_t v11 = vp::log(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_FAULT, "failed to get parameter due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1BB72249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
  {
    uint64_t v38 = (vp *)__cxa_begin_catch(a1);
    char v39 = vp::log(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      v36[6] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, vp::call_traits<(vp::call_type)6>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v37 - 160, (uint64_t)&a27, 2, 1, 2);
      v36[10] = v37 - 160;
      *(unsigned char *)(v37 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[257],char [257],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetProperty, ArgTypeList = <unsigned int &, float *&, unsigned int &, unsigned int *>]");
      a24 = &a22;
      a25 = 1;
      v36[14] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v37 - 128, (uint64_t)&a18, 2, 1, 2);
      *(unsigned char *)(v37 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v37 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v37 - 96) = 136315138;
      *(void *)((char *)v36 + 132) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v37 - 96), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v37 - 160 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB7223ECLL);
  }
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  uint64_t v15 = *(char **)(a1 + 40);
  int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    int v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    uint64_t v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB722978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE6EJRjRPfS9_PjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA257_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VoiceProcessor_SetBaseFactory_Private(const void *a1)
{
  if (!a1) {
    a1 = &__block_literal_global_30175;
  }
  uint64_t v1 = _Block_copy(a1);
  uint64_t v2 = gVoiceProcessorBaseFactory;
  gVoiceProcessorBaseFactory = v1;

  return 0;
}

uint64_t VoiceProcessor_GetBaseFactory_Private(void *a1)
{
  if (a1)
  {
    uint64_t v2 = _Block_copy(gVoiceProcessorBaseFactory);
    uint64_t result = 0;
    *a1 = v2;
  }
  else
  {
    unint64_t v4 = vp::log(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v5 = 0;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "VoiceProcessor_GetBaseFactory_Private BadArgument (outFactory)", v5, 2u);
    }

    return 1650553447;
  }
  return result;
}

uint64_t VoiceProcessor_ProcessDownlink(uint64_t a1, int *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      uint64_t v48 = a1 + 192;
      int v5 = (vp *)caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
      char v49 = (char)v5;
      if (v5)
      {
        if (*(unsigned char *)(a1 + 1304))
        {
          if (*(unsigned char *)(a1 + 2320))
          {
            uint64_t v6 = *(unsigned int *)(a1 + 1316);
            if (v6)
            {
              uint64_t v7 = 0;
              uint64_t v8 = a1 + 1312;
              int v9 = *a2;
              uint64_t v10 = 1320;
              while (*(_DWORD *)(a1 + v10) != v9)
              {
                ++v7;
                v10 += 280;
                if (v6 == v7) {
                  goto LABEL_10;
                }
              }
              if (!*(_DWORD *)(v8 + 280 * v7 + 12))
              {
                if (!*(unsigned char *)(a1 + 2312))
                {
                  uint64_t v11 = 1651733601;
                  uint64_t v12 = vp::log(v5);
                  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_64;
                  }
                  *(_WORD *)AudioStreamBasicDescription buf = 0;
                  uint64_t v13 = "ProcessDownlink BadState (preflight)";
                  goto LABEL_26;
                }
                *(unsigned char *)(a1 + 2312) = 0;
              }
              if (v9 != 1)
              {
                if (!v9)
                {
                  uint64_t result = _os_crash();
                  __break(1u);
                  return result;
                }
                uint64_t v11 = 1650553447;
                uint64_t v12 = vp::log(v5);
                if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_64;
                }
                *(_WORD *)AudioStreamBasicDescription buf = 0;
                uint64_t v13 = "ProcessDownlink BadArgument (nodeType)";
                goto LABEL_26;
              }
              uint64_t v18 = 0;
              uint64_t v19 = 1320;
              while (*(_DWORD *)(a1 + v19) != 1)
              {
                ++v18;
                v19 += 280;
                if (v6 == v18)
                {
                  _os_crash();
                  __break(1u);
                  break;
                }
              }
              uint64_t v20 = *(unsigned int *)(v8 + 280 * v18 + 16);
              if (v20)
              {
                uint64_t v21 = 0;
                uint64_t v22 = v19 + 12;
                uint64_t v23 = v19 + 236;
                while (*(_DWORD *)(a1 + v22))
                {
                  ++v21;
                  v22 += 4;
                  if (v20 == v21) {
                    goto LABEL_42;
                  }
                }
              }
              else
              {
LABEL_42:
                _os_crash();
                __break(1u);
              }
              uint64_t v24 = *(unsigned int **)&a2[2 * v21 + 2];
              if (v24)
              {
                if (*(void *)&a2[2 * v21 + 12])
                {
                  uint64_t v25 = *(unsigned int *)(v8 + 280 * v18 + 240);
                  if (v25)
                  {
                    uint64_t v26 = 0;
                    uint64_t v2 = (AudioBufferList *)a2[v21 + 22];
                    while (*(_DWORD *)(a1 + v23) != 5)
                    {
                      ++v26;
                      v23 += 4;
                      if (v25 == v26) {
                        goto LABEL_49;
                      }
                    }
                  }
                  else
                  {
LABEL_49:
                    _os_crash();
                    __break(1u);
                  }
                  uint64_t v27 = *(unsigned int **)&a2[2 * v26 + 28];
                  if (v27)
                  {
                    char v28 = *(double **)&a2[2 * v26 + 30];
                    if (v28)
                    {
                      if (*(_DWORD *)(a1 + 2304) == v2)
                      {
                        if (*(_DWORD *)(a1 + 2296))
                        {
                          audio_buffer_list = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2248));
                          int v30 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
                          util::make_abl_view(audio_buffer_list, v30, *(unsigned int *)(a1 + 2296) | 0x100000000, (*(_DWORD *)(a1 + 2300) + *(_DWORD *)(a1 + 2296)) | 0x100000000);
                          char v31 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
                          int v32 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2248));
                          util::copy_abl_data(v31, v32, (AudioBufferList *)*(unsigned int *)(a1 + 2300));
                          *(_DWORD *)(a1 + 2296) = 0;
                        }
                        int v33 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2248));
                        uint64_t v34 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
                        util::make_abl_view(v33, v34, *(unsigned int *)(a1 + 2300) | 0x100000000, (*(_DWORD *)(a1 + 2300) + v2) | 0x100000000);
                        int v35 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2256));
                        util::copy_abl_data(v24, v35, v2);
                        *(_DWORD *)(a1 + 2300) += v2;
                        if (*(_DWORD *)(a1 + 2240) <= *(_DWORD *)(a1 + 2308))
                        {
                          unsigned int v36 = 0;
                          while (1)
                          {
                            char v37 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2288));
                            int v38 = *(_DWORD *)(a1 + 2240);
                            uint64_t v39 = v38 * v36++;
                            util::make_abl_view(v27, v37, v39 | 0x100000000, (v38 * v36) | 0x100000000);
                            if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1)) {
                              break;
                            }
                            uint64_t v41 = *(void *)(a1 + 168);
                            vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 2288));
                            int v42 = VoiceProcessorInterface::ProcessDownlinkAudio(v41);
                            if (v42)
                            {
                              uint64_t v43 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                        + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
                              *(_DWORD *)(v43 + 16) = 0;
                              *(_DWORD *)(v43 + 24) = v42;
                              *(void *)(v43 + 32) = "ProcessDownlinkAudio";
                              *(void *)(v43 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synch"
                                                      "ronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoicePro"
                                                      "cessorBase, CallType = vp::call_type::ProcessDownlinkAudio, ArgTyp"
                                                      "eList = <std::nullptr_t, std::nullptr_t, std::nullptr_t, vp::Audio"
                                                      "_Buffer &, const unsigned int &, AudioTimeStamp &>]";
                              *(void *)uint64_t v43 = &unk_1F14C1478;
                              *(void *)(v43 + 8) = 0;
                              caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v43);
                            }
                            std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
                            uint64_t v11 = 0;
                            unsigned int v44 = *(_DWORD *)(a1 + 2240);
                            *char v28 = *v28 + (double)v44;
                            if (v36 >= *(_DWORD *)(a1 + 2308) / v44) {
                              goto LABEL_65;
                            }
                          }
                          uint64_t v11 = 1651270507;
                          unint64_t v45 = a2[27];
                          if (v45)
                          {
                            for (unint64_t i = 0; i < v45; ++i)
                            {
                              int v47 = *(util **)&a2[2 * i + 28];
                              if (v47)
                              {
                                util::zero_fill_abl(v47, v40);
                                unint64_t v45 = a2[27];
                              }
                            }
                          }
                        }
                        else
                        {
                          uint64_t v11 = 0;
                        }
                        goto LABEL_65;
                      }
LABEL_79:
                      _os_assert_log();
                      _os_crash();
                      __break(1u);
                    }
LABEL_78:
                    _os_assert_log();
                    _os_crash();
                    __break(1u);
                    goto LABEL_79;
                  }
LABEL_77:
                  _os_assert_log();
                  _os_crash();
                  __break(1u);
                  goto LABEL_78;
                }
              }
              else
              {
                _os_assert_log();
                _os_crash();
                __break(1u);
              }
              _os_assert_log();
              _os_crash();
              __break(1u);
              goto LABEL_77;
            }
LABEL_10:
            uint64_t v11 = 1651076964;
            uint64_t v12 = vp::log(v5);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)AudioStreamBasicDescription buf = 0;
              uint64_t v13 = "ProcessDownlink BadIOData";
LABEL_26:
              _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, v13, buf, 2u);
              goto LABEL_64;
            }
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v17 = vp::log(v5);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)AudioStreamBasicDescription buf = 0;
            _os_log_error_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "ProcessDownlink BadState (uplink)", buf, 2u);
          }

          if (*(unsigned char *)(a1 + 2320))
          {
            uint64_t v11 = 1651733601;
LABEL_65:
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v48);
            return ErrorFromOSStatus(v11);
          }
        }
        uint64_t v11 = 1651733601;
        uint64_t v12 = vp::log(v5);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)AudioStreamBasicDescription buf = 0;
          uint64_t v13 = "ProcessDownlink BadState (downlink)";
          goto LABEL_26;
        }
        goto LABEL_64;
      }
      uint64_t v11 = 1651270507;
      uint64_t v12 = vp::log(v5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)AudioStreamBasicDescription buf = 0;
        uint64_t v13 = "ProcessDownlink BadLock";
        goto LABEL_26;
      }
LABEL_64:

      goto LABEL_65;
    }
    int v16 = vp::log((vp *)a1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_ProcessDownlink BadArgument (ioData)", buf, 2u);
    }

    return 1650553447;
  }
  else
  {
    char v14 = vp::log(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_FAULT, "failed to process downlink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1BB72357C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BB7235A0(_Unwind_Exception *a1)
{
}

unsigned int *util::make_abl_view(unsigned int *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!result)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  if (!a2)
  {
LABEL_18:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v4 = *result;
  if (v4 != *a2)
  {
LABEL_19:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_20;
  }
  if (!v4) {
    return result;
  }
  if ((a3 & 0xFF00000000) != 0) {
    unsigned int v5 = a3;
  }
  else {
    unsigned int v5 = 0;
  }
  uint64_t v6 = result + 2;
  for (unint64_t i = a2 + 4; ; i += 2)
  {
    unsigned int v9 = *v6;
    unint64_t v8 = v6[1];
    uint64_t v10 = *v6 * v5;
    if (4 * v10 > v8) {
      break;
    }
    void *i = *((void *)v6 + 1) + 4 * v10;
    *((_DWORD *)i - 2) = v9;
    if ((a4 & 0xFF00000000) != 0)
    {
      if (v5 > a4) {
        goto LABEL_21;
      }
      unsigned int v11 = *v6 * a4;
      if (v8 < 4 * (unint64_t)v11) {
        goto LABEL_22;
      }
      int v12 = 4 * (v11 - v10);
    }
    else
    {
      int v12 = v8 - 4 * v10;
    }
    *((_DWORD *)i - 1) = v12;
    v6 += 4;
    if (!--v4) {
      return result;
    }
  }
LABEL_20:
  _os_crash();
  __break(1u);
LABEL_21:
  _os_crash();
  __break(1u);
LABEL_22:
  uint64_t result = (unsigned int *)_os_crash();
  __break(1u);
  return result;
}

unsigned int *util::copy_abl_data(unsigned int *this, const AudioBufferList *a2, AudioBufferList *a3)
{
  if (!this)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_11:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = this;
  if (*this != a2->mNumberBuffers)
  {
LABEL_12:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (!*this) {
    return this;
  }
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  size_t v7 = 4 * a3;
  while (v4[v5 + 3] >= v7)
  {
    if (a2->mBuffers[v5 / 4].mDataByteSize < v7) {
      goto LABEL_14;
    }
    this = (unsigned int *)memcpy(a2->mBuffers[v5 / 4].mData, *(const void **)&v4[v5 + 4], v7);
    ++v6;
    v5 += 4;
    if (v6 >= *v4) {
      return this;
    }
  }
LABEL_13:
  _os_crash();
  __break(1u);
LABEL_14:
  this = (unsigned int *)_os_crash();
  __break(1u);
  return this;
}

void util::zero_fill_abl(util *this, AudioBufferList *a2)
{
  if (*(_DWORD *)this)
  {
    uint64_t v3 = 0;
    for (unint64_t i = (void **)((char *)this + 16); *i; i += 2)
    {
      bzero(*i, *((unsigned int *)i - 1));
      if (++v3 >= (unint64_t)*(unsigned int *)this) {
        return;
      }
    }
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[316],char [316],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::ProcessDownlinkAudio, ArgTypeList = <std::nullptr_t, std::nullptr_t, std::nullptr_t, vp::Audio_Buffer &, const unsigned int &, AudioTimeStamp &>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB723874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  uint64_t v15 = *(char **)(a1 + 40);
  int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    int v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    unsigned int v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    uint64_t v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      unint64_t v5 = __p;
    }
    else {
      unint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB723B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE16EJDnDnDnRNS3_12Audio_BufferERKjR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA316_SN_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VoiceProcessorInterface::ProcessDownlinkAudio(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t VoiceProcessor_PreflightDownlink(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        uint64_t v20 = a1 + 192;
        unsigned int v9 = (vp *)caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
        char v21 = (char)v9;
        if ((v9 & 1) == 0)
        {
          uint64_t v17 = vp::log(v9);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)AudioStreamBasicDescription buf = 0;
            _os_log_error_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "PreflightDownlink BadLock", buf, 2u);
          }

          uint64_t v13 = 1651270507;
          goto LABEL_34;
        }
        if (*(unsigned char *)(a1 + 1304))
        {
          if (*(unsigned char *)(a1 + 2320))
          {
            int v10 = *(_DWORD *)(a1 + 2300);
            if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
            {
              uint64_t v13 = 1651270507;
              goto LABEL_34;
            }
            int v11 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 168))(*(void *)(a1 + 168), (v10 + a3), a1 + 2304, a1 + 2308);
            if (v11)
            {
              uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
              *(_DWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = v11;
              *(void *)(v12 + 32) = "PreflightDownlink";
              *(void *)(v12 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoicePro"
                                      "cessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_"
                                      "type::PreflightDownlink, ArgTypeList = <unsigned int, unsigned int *, unsigned int *>]";
              *(void *)uint64_t v12 = &unk_1F14C1450;
              *(void *)(v12 + 8) = 0;
              caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v12);
            }
            std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
            if (*(_DWORD *)(a1 + 2304) > (*(_DWORD *)(a1 + 2300) + a3))
            {
              _os_assert_log();
              _os_crash();
              __break(1u);
            }
            else if (!(*(_DWORD *)(a1 + 2308) % *(_DWORD *)(a1 + 2240)))
            {
              uint64_t v13 = 0;
              *(_DWORD *)(a1 + 2304) = a3;
              *a4 = a3;
              *a5 = *(_DWORD *)(a1 + 2308);
              *(unsigned char *)(a1 + 2312) = 1;
LABEL_34:
              std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v20);
              return ErrorFromOSStatus(v13);
            }
            _os_assert_log();
            _os_crash();
            __break(1u);
          }
        }
        else
        {
          uint64_t v18 = vp::log(v9);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)AudioStreamBasicDescription buf = 0;
            _os_log_error_impl(&dword_1BB0CE000, v18, OS_LOG_TYPE_ERROR, "PreflightDownlink BadState (uplink)", buf, 2u);
          }

          if (*(unsigned char *)(a1 + 2320)) {
            goto LABEL_32;
          }
        }
        char v19 = vp::log(v9);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)AudioStreamBasicDescription buf = 0;
          _os_log_error_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "PreflightDownlink BadState (downlink)", buf, 2u);
        }

LABEL_32:
        uint64_t v13 = 1651733601;
        goto LABEL_34;
      }
      int v16 = vp::log((vp *)a1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)AudioStreamBasicDescription buf = 0;
        _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_PreflightDownlink BadArgument (outNumProducesDownlinkOutputSamples)", buf, 2u);
      }
    }
    else
    {
      int v16 = vp::log((vp *)a1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)AudioStreamBasicDescription buf = 0;
        _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_PreflightDownlink BadArgument (outNumConsumedDownlinkInputSamples)", buf, 2u);
      }
    }

    return 1650553447;
  }
  char v14 = vp::log(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)AudioStreamBasicDescription buf = 0;
    _os_log_fault_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_FAULT, "failed to preflight downlink due to bad reference", buf, 2u);
  }

  return 1651664230;
}

void sub_1BB7241C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t *a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 *a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2)
  {
    char v39 = (vp *)__cxa_begin_catch(exception_object);
    uint64_t v40 = vp::log(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a29, "call_name");
      a33 = &a29;
      a34 = 1;
      a37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a35, vp::call_traits<(vp::call_type)15>::name);
      a38 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 176, (uint64_t)&a29, 2, 1, 2);
      *(void *)(v38 - 16std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v38 - 176;
      *(unsigned char *)(v38 - 152) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a20);
      a22 = &a20;
      a23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[251],char [251],0>((uint64_t)&a24);
      a26 = &a24;
      a27 = 1;
      *(void *)(v38 - 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 144, (uint64_t)&a20, 2, 1, 2);
      *(unsigned char *)(v38 - 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a12, v38 - 176, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a12, 4, 0x20u, 0, 0, &__p);
      if (a19 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v38 - 112) = 136315138;
      *(void *)(v38 - 108) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v38 - 112), 0xCu);
      if (a19 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a12);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v38 - 176 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a20 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a29 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB723ED0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[251],char [251],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::PreflightDownlink, ArgTypeList = <unsigned int, unsigned int *, unsigned int *>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB724420(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  uint64_t v15 = *(char **)(a1 + 40);
  int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    int v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    unsigned int v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    uint64_t v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      unint64_t v5 = __p;
    }
    else {
      unint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB724734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE15EJjPjS9_EEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA251_SI_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VoiceProcessor_ProcessUplink(uint64_t a1, int *a2)
{
  if (!a1)
  {
    uint64_t v12 = vp::log(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_FAULT, "failed to process uplink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
  if (!a2)
  {
    char v14 = vp::log((vp *)a1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_error_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "VoiceProcessor_ProcessUplink BadArgument (ioData)", buf, 2u);
    }
    uint64_t v13 = 1650553447;

    return v13;
  }
  *(void *)AudioStreamBasicDescription buf = a1 + 192;
  uint64_t v4 = (vp *)caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
  char v20 = (char)v4;
  if ((v4 & 1) == 0)
  {
    uint64_t v9 = 1651270507;
    int v10 = vp::log(v4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v18 = 0;
      int v11 = "ProcessUplink BadLock";
      goto LABEL_27;
    }
LABEL_28:

    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 1304))
  {
    if (*(unsigned char *)(a1 + 2320))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 204);
      if (v5)
      {
        uint64_t v6 = 0;
        int v7 = *a2;
        uint64_t v8 = 208;
        while (*(_DWORD *)(a1 + v8) != v7)
        {
          ++v6;
          v8 += 280;
          if (v5 == v6) {
            goto LABEL_10;
          }
        }
        if (*(_DWORD *)(a1 + 200 + 280 * v6 + 12)) {
          goto LABEL_35;
        }
        if (*(unsigned char *)(a1 + 1300))
        {
          *(unsigned char *)(a1 + 130std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
LABEL_35:
          switch(v7)
          {
            case 0:
              uint64_t v17 = VoiceProcessorImplementation::ProcessAllOfULDSP(a1, (uint64_t)a2);
              break;
            case 1:
              uint64_t v17 = VoiceProcessorImplementation::ProcessULHardwareDSP(a1, (uint64_t)a2);
              break;
            case 2:
              uint64_t v17 = VoiceProcessorImplementation::ProcessULEchoDSP(a1, (uint64_t)a2);
              break;
            case 3:
              uint64_t v17 = VoiceProcessorImplementation::ProcessULDynamicsDSP(a1, (uint64_t)a2);
              break;
            default:
              uint64_t v9 = 1650553447;
              int v10 = vp::log(v4);
              if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
                goto LABEL_28;
              }
              *(_WORD *)uint64_t v18 = 0;
              int v11 = "ProcessUplink BadArgument (nodeType)";
              goto LABEL_27;
          }
          uint64_t v9 = v17;
          goto LABEL_29;
        }
        uint64_t v9 = 1651733601;
        int v10 = vp::log(v4);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        *(_WORD *)uint64_t v18 = 0;
        int v11 = "ProcessUplink BadState preflight";
        goto LABEL_27;
      }
LABEL_10:
      uint64_t v9 = 1651076964;
      int v10 = vp::log(v4);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v18 = 0;
        int v11 = "ProcessUplink BadIOData";
LABEL_27:
        _os_log_error_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_ERROR, v11, v18, 2u);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
LABEL_25:
    uint64_t v9 = 1651733601;
    int v10 = vp::log(v4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v18 = 0;
      int v11 = "ProcessUplink BadState (downlink)";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  int v16 = vp::log(v4);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v18 = 0;
    _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "ProcessUplink BadState (uplink)", v18, 2u);
  }

  if (!*(unsigned char *)(a1 + 2320)) {
    goto LABEL_25;
  }
  uint64_t v9 = 1651733601;
LABEL_29:
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);

  return ErrorFromOSStatus(v9);
}

void sub_1BB724C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::ProcessAllOfULDSP(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 0);
  unsigned int v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0);
  uint64_t v6 = *(unsigned int **)(a2 + 8 * v5 + 8);
  if (!v6) {
    goto LABEL_38;
  }
  uint64_t v7 = v5;
  size_t v60 = *(long long **)(a2 + 8 * v5 + 32);
  if (!v60)
  {
LABEL_39:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_40;
  }
  unsigned int v8 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2);
  unsigned int v61 = *(unsigned int **)(a2 + 8 * v8 + 8);
  if (!v61)
  {
LABEL_40:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v9 = v8;
  int v10 = *(long long **)(a2 + 8 * v8 + 32);
  if (!v10)
  {
LABEL_41:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_42;
  }
  unsigned int v11 = util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3);
  size_t v64 = *(AudioBufferList **)(a2 + 8 * v11 + 72);
  if (!v64)
  {
LABEL_42:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_43;
  }
  unsigned int v63 = *(double **)(a2 + 8 * v11 + 96);
  if (!v63)
  {
LABEL_43:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_44;
  }
  unsigned int v12 = *(_DWORD *)(a2 + 4 * v7 + 56);
  if (v12 != *(_DWORD *)(a1 + 1292))
  {
LABEL_44:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_45;
  }
  if (*(_DWORD *)(a2 + 4 * v9 + 56) != v12)
  {
LABEL_45:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_46:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  if (v12 % *(_DWORD *)(a1 + 1236)) {
    goto LABEL_46;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 1288);
  if (v13)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 1296);
    audio_buffer_list = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(a1 + 1280));
    if (v13 >= v14)
    {
      util::copy_abl_data(audio_buffer_list, v64, (AudioBufferList *)*(unsigned int *)(a1 + 1296));
      unsigned int v13 = *(_DWORD *)(a1 + 1296);
      *(_DWORD *)(a1 + 1288) -= v13;
      *unsigned int v63 = *v63 + (double)v13;
      unsigned int v12 = *(_DWORD *)(a1 + 1292);
      if (v12)
      {
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
    }
    else
    {
      util::copy_abl_data(audio_buffer_list, v64, (AudioBufferList *)*(unsigned int *)(a1 + 1288));
      unsigned int v13 = *(_DWORD *)(a1 + 1288);
      *(_DWORD *)(a1 + 1288) = 0;
      *unsigned int v63 = *v63 + (double)v13;
      unsigned int v12 = *(_DWORD *)(a1 + 1292);
    }
  }
  unsigned int v16 = *(_DWORD *)(a1 + 1236);
  if (v16 > v12) {
    return 0;
  }
  uint64_t v57 = a2;
  int v18 = 0;
  unsigned int v19 = v12 / v16;
  uint64_t v66 = (vp::Audio_Buffer *)(a1 + 1256);
  int v67 = (vp::Audio_Buffer *)(a1 + 1264);
  uint64_t v68 = (vp::Audio_Buffer *)(a1 + 1272);
  id v65 = (vp::Audio_Buffer *)(a1 + 1280);
  unsigned int v20 = v19 - 1;
  unsigned int v56 = v19;
  if (v19 <= 1) {
    unsigned int v19 = 1;
  }
  unsigned int v58 = v20;
  unsigned int v59 = v19;
  size_t v62 = (caulk::concurrent::messenger *)(a1 + 176);
  while (1)
  {
    uint64_t v21 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v66);
    int v22 = v18 + 1;
    util::make_abl_view(v6, v21, (*(_DWORD *)(a1 + 1236) * v18) | 0x100000000, (*(_DWORD *)(a1 + 1236) * (v18 + 1)) | 0x100000000);
    uint64_t v23 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v67);
    util::make_abl_view(v61, v23, (*(_DWORD *)(a1 + 1236) * v18) | 0x100000000, (*(_DWORD *)(a1 + 1236) * (v18 + 1)) | 0x100000000);
    if (*(_DWORD *)(a1 + 1296) - v13 >= *(_DWORD *)(a1 + 1248))
    {
      uint64_t v26 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      util::make_abl_view(&v64->mNumberBuffers, v26, v13 | 0x100000000, 0);
    }
    else
    {
      uint64_t v24 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v65);
      char v25 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      util::make_abl_view(v24, v25, 0, 0);
      if (*(_DWORD *)(a1 + 1288))
      {
        _os_assert_log();
        _os_crash();
        __break(1u);
LABEL_38:
        _os_assert_log();
        _os_crash();
        __break(1u);
        goto LABEL_39;
      }
    }
    long long v27 = v10[3];
    long long v29 = *v10;
    long long v28 = v10[1];
    v74[2] = v10[2];
    v74[3] = v27;
    v74[0] = v29;
    v74[1] = v28;
    *(double *)vDSP_Length v74 = *(double *)&v29 + (double)(*(_DWORD *)(a1 + 1236) * v18);
    uint64_t v30 = vp::Audio_Buffer::get_audio_buffer_list(v67);
    if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1)) {
      break;
    }
    int v32 = (*(uint64_t (**)(void, uint64_t, _OWORD *))(**(void **)(a1 + 168) + 128))(*(void *)(a1 + 168), v30, v74);
    if (v32)
    {
      uint64_t v33 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v33 + 16) = 0;
      *(_DWORD *)(v33 + 24) = v32;
      *(void *)(v33 + 32) = "AppendReferenceSignal";
      *(void *)(v33 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBa"
                              "se>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::AppendRefe"
                              "renceSignal, ArgTypeList = <AudioBufferList &, CA::TimeStamp &>]";
      *(void *)uint64_t v33 = &unk_1F14C1310;
      *(void *)(v33 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v62, (caulk::concurrent::message *)v33);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
    unsigned int v73 = 0;
    long long v34 = v60[3];
    long long v36 = *v60;
    long long v35 = v60[1];
    long long v71 = v60[2];
    long long v72 = v34;
    *(_OWORD *)unsigned int v69 = v36;
    long long v70 = v35;
    *(double *)unsigned int v69 = *(double *)&v36 + (double)(*(_DWORD *)(a1 + 1236) * v18);
    uint64_t v37 = vp::Audio_Buffer::get_audio_buffer_list(v66);
    uint64_t v38 = vp::Audio_Buffer::get_audio_buffer_list(v68);
    if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1)) {
      break;
    }
    int v39 = (*(uint64_t (**)(void, uint64_t, void **, uint64_t, double *, unsigned int *, void, void, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), v37, v69, v38, v63, &v73, 0, 0, 0);
    if (v39)
    {
      uint64_t v40 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v40 + 16) = 0;
      *(_DWORD *)(v40 + 24) = v39;
      *(void *)(v40 + 32) = "Process";
      *(void *)(v40 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBa"
                              "se>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Process, A"
                              "rgTypeList = <AudioBufferList &, CA::TimeStamp &, AudioBufferList &, AudioTimeStamp &, uns"
                              "igned int &, std::nullptr_t, std::nullptr_t, std::nullptr_t>]";
      *(void *)uint64_t v40 = &unk_1F14C1338;
      *(void *)(v40 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v62, (caulk::concurrent::message *)v40);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
    if (*(_DWORD *)(a1 + 1296) - v13 >= *(_DWORD *)(a1 + 1248))
    {
      v13 += v73;
    }
    else
    {
      uint64_t v41 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      util::make_abl_view(&v64->mNumberBuffers, v41, v13 | 0x100000000, 0);
      unsigned int v42 = *(_DWORD *)(a1 + 1296);
      uint64_t v43 = v42 - v13;
      unsigned int v44 = v73;
      uint64_t v45 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v65);
      uint64_t v46 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v68);
      if (v43 <= v44)
      {
        util::copy_abl_data(v45, v46, (AudioBufferList *)(v42 - v13));
        uint64_t v47 = v73;
        uint64_t v48 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v65);
        char v49 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list(v68);
        util::make_abl_view(v48, v49, v43 | 0x100000000, v47 | 0x100000000);
        vDSP_Length v50 = (AudioBufferList *)(v47 - v43);
        uint64_t v51 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list(v68);
        uint64_t v52 = (const AudioBufferList *)vp::Audio_Buffer::get_audio_buffer_list(v65);
        uint64_t v53 = util::copy_abl_data(v51, v52, v50);
        *(_DWORD *)(a1 + 1288) = v50;
        unsigned int v13 = v42;
        if (v18 != v58)
        {
          uint64_t v55 = vp::log((vp *)v53);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 67109376;
            int v76 = v18;
            __int16 v77 = 1024;
            unsigned int v78 = v56;
            _os_log_fault_impl(&dword_1BB0CE000, v55, OS_LOG_TYPE_FAULT, "I/O rate mismatch has occurred on I/O cycle %u out of %d", buf, 0xEu);
          }

          std::terminate();
        }
      }
      else
      {
        util::copy_abl_data(v45, v46, (AudioBufferList *)v73);
        v13 += v73;
        *(_DWORD *)(a1 + 1288) = 0;
      }
    }
    ++v18;
    if (v22 == v59) {
      return 0;
    }
  }
  uint64_t v17 = 1651270507;
  VoiceProcessorImplementation::ZeroOut(v57, v31);
  return v17;
}

void sub_1BB725810(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::ProcessULHardwareDSP(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 1);
  unsigned int v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0);
  uint64_t v6 = *(void *)(a2 + 8 * v5 + 8);
  if (!v6)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(a2 + 8 * v5 + 32);
  if (!v7)
  {
LABEL_26:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  unsigned int v8 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2);
  uint64_t v9 = *(void *)(a2 + 8 * v8 + 8);
  if (!v9)
  {
LABEL_27:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v10 = *(void *)(a2 + 8 * v8 + 32);
  if (!v10)
  {
LABEL_28:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_29;
  }
  v25[0] = *(void *)(a2
                     + 8
                     * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0)+ 72);
  if (!v25[0])
  {
LABEL_29:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v24 = *(void *)(a2
                  + 8
                  * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 1)+ 72);
  if (!v24)
  {
LABEL_30:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_31:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  uint64_t v23 = *(void *)(a2
                  + 8
                  * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2)+ 72);
  if (!v23) {
    goto LABEL_31;
  }
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    uint64_t v14 = 1651270507;
LABEL_13:
    VoiceProcessorImplementation::ZeroOut(a2, v11);
    return v14;
  }
  int v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 128))(*(void *)(a1 + 168), v9, v10);
  if (v12)
  {
    uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 24) = v12;
    *(void *)(v13 + 32) = "AppendReferenceSignal";
    *(void *)(v13 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase"
                            ">::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::AppendReferenc"
                            "eSignal, ArgTypeList = <AudioBufferList &, AudioTimeStamp &>]";
    *(void *)uint64_t v13 = &unk_1F14C1360;
    *(void *)(v13 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v13);
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    VoiceProcessorImplementation::ZeroOut(a2, v17);
    return 1651270507;
  }
  int v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 192))(*(void *)(a1 + 168), v6, v7);
  if (v18)
  {
    uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v19 + 16) = 0;
    *(_DWORD *)(v19 + 24) = v18;
    *(void *)(v19 + 32) = "RunUplinkHardwareDSP";
    *(void *)(v19 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase"
                            ">::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkHardw"
                            "areDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&>]";
    *(void *)uint64_t v19 = &unk_1F14C1388;
    *(void *)(v19 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v19);
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  v26[0] = 0;
  unint64_t v20 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v26, v25);
  if (!HIDWORD(v20))
  {
    uint64_t v14 = v20;
    goto LABEL_13;
  }
  v26[0] = 1;
  unint64_t v21 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v26, &v23);
  if (HIDWORD(v21))
  {
    v26[0] = 2;
    unint64_t v21 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v26, &v24);
    if (HIDWORD(v21)) {
      return 0;
    }
  }
  uint64_t v14 = v21;
  VoiceProcessorImplementation::ZeroOut(a2, v22);
  return v14;
}

void sub_1BB725C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 *a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,__int16 *a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a2)
  {
    uint64_t v51 = (vp *)__cxa_begin_catch(a1);
    uint64_t v52 = vp::log(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a29, "call_name");
      a33 = &a29;
      a34 = 1;
      a37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a35, vp::call_traits<(vp::call_type)9>::name);
      a38 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a40, (uint64_t)&a29, 2, 1, 2);
      a44 = &a40;
      a45 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a20);
      a22 = &a20;
      a23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[247],char [247],0>((uint64_t)&a24);
      a26 = &a24;
      a27 = 1;
      a48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a46, (uint64_t)&a20, 2, 1, 2);
      a49 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a12, (uint64_t)&a40, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a12, 4, 0x20u, 0, 0, &__p);
      if (a19 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v50 - 128) = 136315138;
      *(void *)(v49 + 4) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v50 - 128), 0xCu);
      if (a19 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a12);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a40 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a20 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a29 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB725B18);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::ProcessULEchoDSP(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 2);
  unsigned int v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 0);
  v23[0] = *(void *)(a2 + 8 * v5 + 8);
  if (!v23[0])
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)(a2 + 8 * v5 + 32);
  if (!v6)
  {
LABEL_26:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  unsigned int v7 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 2);
  unsigned int v8 = *(_DWORD **)(a2 + 8 * v7 + 8);
  int v22 = v8;
  if (!v8)
  {
LABEL_27:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_28;
  }
  if (!*(void *)(a2 + 8 * v7 + 32))
  {
LABEL_28:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_29;
  }
  unsigned int v9 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 1);
  uint64_t v21 = *(void *)(a2 + 8 * v9 + 8);
  if (!v21)
  {
LABEL_29:
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_30;
  }
  if (!*(void *)(a2 + 8 * v9 + 32))
  {
LABEL_30:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_31:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  uint64_t v20 = *(void *)(a2
                  + 8
                  * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3)+ 72);
  if (!v20) {
    goto LABEL_31;
  }
  v24[0] = 3;
  unint64_t v10 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(a1, v24, v23);
  if (HIDWORD(v10))
  {
    if (*v8)
    {
      unint64_t v13 = 0;
      uint64_t v14 = (void **)(v8 + 4);
      do
      {
        bzero(*v14, *((unsigned int *)v14 - 1));
        ++v13;
        v14 += 2;
      }
      while (v13 < *v8);
    }
    v24[0] = 4;
    unint64_t v15 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(a1, v24, &v22);
    if (HIDWORD(v15))
    {
      v24[0] = 5;
      unint64_t v15 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(a1, v24, &v21);
      if (HIDWORD(v15))
      {
        uint64_t v12 = 1651270400;
        if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
        {
          uint64_t v12 = 1651270507;
          goto LABEL_10;
        }
        int v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 168) + 200))(*(void *)(a1 + 168), v6);
        if (v18)
        {
          uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v19 + 16) = 0;
          *(_DWORD *)(v19 + 24) = v18;
          *(void *)(v19 + 32) = "RunUplinkHardwareDSP";
          *(void *)(v19 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcess"
                                  "orBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Ru"
                                  "nUplinkEchoDSP, ArgTypeList = <AudioTimeStamp *&>]";
          *(void *)uint64_t v19 = &unk_1F14C1400;
          *(void *)(v19 + 8) = 0;
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v19);
          int v18 = 0;
        }
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
        if (v18) {
          goto LABEL_10;
        }
        v24[0] = 6;
        unint64_t v15 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(a1, v24, &v20);
        if (HIDWORD(v15)) {
          return 0;
        }
      }
    }
    uint64_t v12 = v15;
    VoiceProcessorImplementation::ZeroOut(a2, v16);
    return v12;
  }
  uint64_t v12 = v10;
LABEL_10:
  VoiceProcessorImplementation::ZeroOut(a2, v11);
  return v12;
}

void sub_1BB726318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,uint64_t *a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,__int16 *a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a2)
  {
    uint64_t v41 = (vp *)__cxa_begin_catch(a1);
    unsigned int v42 = vp::log(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a31, "call_name");
      a35 = &a31;
      a36 = 1;
      a39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a37, vp::call_traits<(vp::call_type)10>::name);
      a40 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v40 - 160, (uint64_t)&a31, 2, 1, 2);
      *(void *)(v40 - 144) = v40 - 160;
      *(unsigned char *)(v40 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a22);
      a24 = &a22;
      a25 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[223],char [223],0>((uint64_t)&a26);
      a28 = &a26;
      a29 = 1;
      *(void *)(v40 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v40 - 128, (uint64_t)&a22, 2, 1, 2);
      *(unsigned char *)(v40 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a14, v40 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a14, 4, 0x20u, 0, 0, &__p);
      if (a21 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v40 - 96) = 136315138;
      *(void *)(v40 - 92) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v42, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v40 - 96), 0xCu);
      if (a21 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a14);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v40 - 160 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a22 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a31 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB726264);
  }
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorImplementation::ProcessULDynamicsDSP(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(a1 + 200, 3);
  unsigned int v5 = util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3);
  uint64_t v6 = *(unsigned int **)(a2 + 8 * v5 + 8);
  if (!v6)
  {
    _os_assert_log();
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(a2 + 8 * v5 + 32);
  if (!v7)
  {
LABEL_13:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_14:
    _os_assert_log();
    _os_crash();
    __break(1u);
  }
  unsigned int v8 = (AudioBufferList *)*(unsigned int *)(a2 + 4 * v5 + 56);
  uint64_t v9 = a2
     + 8
     * util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v4, 3);
  uint64_t v10 = *(void *)(v9 + 72);
  if (!v10) {
    goto LABEL_14;
  }
  util::copy_abl_data(v6, *(const AudioBufferList **)(v9 + 72), v8);
  unint64_t v12 = 1651270507;
  if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    int v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, AudioBufferList *))(**(void **)(a1 + 168) + 208))(*(void *)(a1 + 168), v10, v7, v8);
    unint64_t v12 = 0x1626C6300;
    if (v13)
    {
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v14 + 16) = 0;
      *(_DWORD *)(v14 + 24) = v13;
      *(void *)(v14 + 32) = "RunUplinkDynamicsDSP";
      *(void *)(v14 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBa"
                              "se>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkD"
                              "ynamicsDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&, unsigned int &>]";
      *(void *)uint64_t v14 = &unk_1F14C1428;
      *(void *)(v14 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v14);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }
  else
  {
    VoiceProcessorImplementation::ZeroOut(a2, v11);
  }
  if (v12 >= 0x100000000) {
    return 0x100000000;
  }
  else {
    return v12;
  }
}

void sub_1BB7266E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
  {
    uint64_t v37 = (vp *)__cxa_begin_catch(a1);
    uint64_t v38 = vp::log(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, vp::call_traits<(vp::call_type)11>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(void *)(v36 - 144) = v36 - 160;
      *(unsigned char *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[263],char [263],0>((uint64_t)&a22);
      a24 = &a22;
      a25 = 1;
      *(void *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(unsigned char *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v36 - 96) = 136315138;
      *(void *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB726660);
  }
  _Unwind_Resume(a1);
}

_DWORD *util::get_node_configuration<VoiceProcessorImplementation::Uplink,VoiceProcessorUplinkNodeType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if (v2)
  {
    uint64_t result = (_DWORD *)(a1 + 8);
    while (*result != a2)
    {
      result += 70;
      if (!--v2) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t util::get_input_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v5 = a1 + 12;
    while (*(_DWORD *)(v5 + 4 * result) != a2)
    {
      if (v2 == ++result) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t util::get_output_index<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 144);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v5 = a1 + 148;
    while (*(_DWORD *)(v5 + 4 * result) != a2)
    {
      if (v2 == ++result) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void VoiceProcessorImplementation::ZeroOut(uint64_t a1, AudioBufferList *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 68);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 72;
    do
    {
      uint64_t v6 = *(util **)(v5 + 8 * v4);
      if (v6)
      {
        util::zero_fill_abl(v6, a2);
        unint64_t v2 = *(unsigned int *)(a1 + 68);
      }
      ++v4;
    }
    while (v4 < v2);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[263],char [263],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkDynamicsDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&, unsigned int &>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB726A60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB726D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE11EJRP15AudioBufferListRP14AudioTimeStampRjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSH_EUlT_PKcSP_E_JRiRKSP_RA263_SO_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)13,vp::BufferID,AudioBufferList *&>(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v6 = 1651270507;
  if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    int v7 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 168) + 184))(*(void *)(a1 + 168), *a2, *a3);
    uint64_t v6 = 0x1626C6300;
    if (v7)
    {
      uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = v7;
      *(void *)(v8 + 32) = "WriteBuffer";
      *(void *)(v8 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBas"
                             "e>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::WriteBuffer,"
                             " ArgTypeList = <vp::BufferID, AudioBufferList *&>]";
      *(void *)uint64_t v8 = &unk_1F14C13D8;
      *(void *)(v8 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v8);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }
  return v6;
}

void sub_1BB7270A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
  {
    char v37 = (vp *)__cxa_begin_catch(a1);
    uint64_t v38 = vp::log(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, vp::call_traits<(vp::call_type)13>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(void *)(v36 - 144) = v36 - 160;
      *(unsigned char *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[233],char [233],0>((uint64_t)&a22, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::WriteBuffer, ArgTypeList = <vp::BufferID, AudioBufferList *&>]");
      a24 = &a22;
      a25 = 1;
      *(void *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(unsigned char *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v36 - 96) = 136315138;
      *(void *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB72705CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)12,vp::BufferID,AudioBufferList *&>(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v6 = 1651270507;
  if (std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
  {
    int v7 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 168) + 176))(*(void *)(a1 + 168), *a2, *a3);
    uint64_t v6 = 0x1626C6300;
    if (v7)
    {
      uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = v7;
      *(void *)(v8 + 32) = "ReadBuffer";
      *(void *)(v8 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBas"
                             "e>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::ReadBuffer, "
                             "ArgTypeList = <vp::BufferID, AudioBufferList *&>]";
      *(void *)uint64_t v8 = &unk_1F14C13B0;
      *(void *)(v8 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v8);
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }
  return v6;
}

void sub_1BB7273C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t *a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,__int16 *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
  {
    char v37 = (vp *)__cxa_begin_catch(a1);
    uint64_t v38 = vp::log(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a27, "call_name");
      a31 = &a27;
      a32 = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a33, vp::call_traits<(vp::call_type)12>::name);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 160, (uint64_t)&a27, 2, 1, 2);
      *(void *)(v36 - 144) = v36 - 160;
      *(unsigned char *)(v36 - 136) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[232],char [232],0>((uint64_t)&a22);
      a24 = &a22;
      a25 = 1;
      *(void *)(v36 - 112) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v36 - 128, (uint64_t)&a18, 2, 1, 2);
      *(unsigned char *)(v36 - 104) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v36 - 160, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v36 - 96) = 136315138;
      *(void *)(v36 - 92) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 96), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 160 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a18 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a27 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB727384);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[232],char [232],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::ReadBuffer, ArgTypeList = <vp::BufferID, AudioBufferList *&>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB7275F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB727908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE12EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA232_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[223],char [223],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkEchoDSP, ArgTypeList = <AudioTimeStamp *&>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB727B40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB727E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE10EJRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSD_EUlT_PKcSL_E_JRiRKSL_RA223_SK_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[233],char [233],0>(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(void *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB728094(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB7283A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE13EJNS3_8BufferIDERP15AudioBufferListEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA233_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[247],char [247],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::RunUplinkHardwareDSP, ArgTypeList = <AudioBufferList *&, AudioTimeStamp *&>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB7285E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB7288F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE9EJRP15AudioBufferListRP14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSG_EUlT_PKcSO_E_JRiRKSO_RA247_SN_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB728DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListR14AudioTimeStampEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSE_EUlT_PKcSM_E_JRiRKSM_RA246_SL_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[332],char [332],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::Process, ArgTypeList = <AudioBufferList &, CA::TimeStamp &, AudioBufferList &, AudioTimeStamp &, unsigned int &, std::nullptr_t, std::nullptr_t, std::nullptr_t>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB729008(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB72931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE8EJR15AudioBufferListRN2CA9TimeStampESA_R14AudioTimeStampRjDnDnDnEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSI_EUlT_PKcSQ_E_JRiRKSQ_RA332_SP_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[245],char [245],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::AppendReferenceSignal, ArgTypeList = <AudioBufferList &, CA::TimeStamp &>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB729554(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    int v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB729868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE17EJR15AudioBufferListRN2CA9TimeStampEEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSF_EUlT_PKcSN_E_JRiRKSN_RA245_SM_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VoiceProcessor_PreflightUplink(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a4)
    {
      uint64_t v18 = a1 + 192;
      int v7 = (vp *)caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
      char v19 = (char)v7;
      if (v7)
      {
        if (!*(unsigned char *)(a1 + 1304) || !*(unsigned char *)(a1 + 2320))
        {
          uint64_t v17 = vp::log(v7);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)AudioStreamBasicDescription buf = 0;
            _os_log_error_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "PreflightUplink BadState", buf, 2u);
          }

          uint64_t v13 = 1651733601;
          goto LABEL_23;
        }
        int v8 = 0;
        *(_DWORD *)(a1 + 1292) = 0;
        *(_DWORD *)(a1 + 1296) = a3;
        unsigned int v9 = *(_DWORD *)(a1 + 1288);
        uint64_t v10 = a3 - v9;
        if (a3 > v9)
        {
          if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)a1))
          {
            uint64_t v13 = 1651270507;
            goto LABEL_23;
          }
          int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 160))(*(void *)(a1 + 168), v10, a1 + 1292);
          if (v11)
          {
            uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
            *(_DWORD *)(v12 + 16) = 0;
            *(_DWORD *)(v12 + 24) = v11;
            *(void *)(v12 + 32) = "PreflightUplink";
            *(void *)(v12 + 4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProce"
                                    "ssorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type"
                                    "::PreflightUplink, ArgTypeList = <unsigned int, unsigned int *>]";
            *(void *)uint64_t v12 = &unk_1F14C12E8;
            *(void *)(v12 + 8) = 0;
            caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 176), (caulk::concurrent::message *)v12);
          }
          std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
          int v8 = *(_DWORD *)(a1 + 1292);
        }
        uint64_t v13 = 0;
        *a4 = v8;
        *(unsigned char *)(a1 + 130std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      }
      else
      {
        uint64_t v13 = 1651270507;
      }
LABEL_23:
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
      return ErrorFromOSStatus(v13);
    }
    unsigned int v16 = vp::log((vp *)a1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_error_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "VoiceProcessor_PreflightUplink BadArgument (outNumRequiredUplinkInputSamples)", buf, 2u);
    }

    return 1650553447;
  }
  else
  {
    char v14 = vp::log(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_FAULT, "failed to preflight uplink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1BB729D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t *a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,__int16 *a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2)
  {
    char v39 = (vp *)__cxa_begin_catch(a1);
    uint64_t v40 = vp::log(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a29, "call_name");
      a33 = &a29;
      a34 = 1;
      a37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a35, vp::call_traits<(vp::call_type)14>::name);
      a38 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 176, (uint64_t)&a29, 2, 1, 2);
      *(void *)(v38 - 16std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v38 - 176;
      *(unsigned char *)(v38 - 152) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a20);
      a22 = &a20;
      a23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[233],char [233],0>((uint64_t)&a24, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::PreflightUplink, ArgTypeList = <unsigned int, unsigned int *>]");
      a26 = &a24;
      a27 = 1;
      *(void *)(v38 - 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v38 - 144, (uint64_t)&a20, 2, 1, 2);
      *(unsigned char *)(v38 - 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a12, v38 - 176, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a12, 4, 0x20u, 0, 0, &__p);
      if (a19 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v38 - 112) = 136315138;
      *(void *)(v38 - 108) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v40, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v38 - 112), 0xCu);
      if (a19 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a12);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v38 - 176 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a20 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)((char *)&a29 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB729B98);
  }
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE7performEv(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (caulk::concurrent::message *)a1;
  uint64_t v1 = *(int *)(a1 + 24);
  unint64_t v2 = *(char **)(a1 + 32);
  unint64_t v15 = *(char **)(a1 + 40);
  unsigned int v16 = v2;
  uint64_t v3 = vp::log((vp *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v29);
    uint64_t v30 = v29;
    char v31 = 1;
    v32[0] = 5;
    v33[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
    v33[1] = v32;
    char v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v29, 2, 1, 2);
    uint64_t v36 = v35;
    char v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v23, "call_name");
    uint64_t v24 = v23;
    char v25 = 1;
    uint64_t v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v26, &v16);
    char v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v23, 2, 1, 2);
    v38[2] = v38;
    char v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v17);
    uint64_t v18 = v17;
    char v19 = 1;
    uint64_t v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v20, &v15);
    char v22 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v40, (uint64_t)v17, 2, 1, 2);
    uint64_t v41 = v40;
    char v42 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v35, 3, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v11, 4, 0x20u, 0, 0, __p);
    if (v14 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    unsigned int v44 = v5;
    _os_log_error_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (uint64_t i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v40[i + 8], v40[i]);
    }
    for (uint64_t j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v20[j]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v20[j + 8], v20[j]);
    }
    for (uint64_t k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v26[k + 8], v26[k]);
    }
    for (uint64_t m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[m * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33[m], v32[m * 8]);
    }
  }

  return _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE10rt_cleanupD2Ev(&v10);
}

void sub_1BB72A22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::concurrent::message *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (uint64_t i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v34 - 192 + i));
  for (uint64_t j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a17 + j));
  for (uint64_t k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a25 + k));
  for (uint64_t m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a33 + m));

  _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE10rt_cleanupD2Ev(&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **_ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EE10rt_cleanupD2Ev(caulk::concurrent::message **a1)
{
  unint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void _ZN5caulk10concurrent7details15rt_message_callIZN2vp17call_synchronizerI18VoiceProcessorBaseE4callILNS3_9call_typeE14EJjPjEEENS3_11call_resultIXT_ES5_JDpT0_EE13expected_typeEDpOSB_EUlT_PKcSJ_E_JRiRKSJ_RA233_SI_EED0Ev(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t VoiceProcessor_GetDownlinkPropertyList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        uint64_t v5 = 0;
        *a5 = 0;
        return v5;
      }
      int v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        uint64_t v5 = 1650553447;

        return v5;
      }
      __int16 v11 = 0;
      int v8 = "VoiceProcessor_GetDownlinkPropertyList BadArgument (ioPropertyCount)";
      unsigned int v9 = (uint8_t *)&v11;
    }
    else
    {
      int v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_11;
      }
      __int16 v12 = 0;
      int v8 = "VoiceProcessor_GetDownlinkPropertyList BadArgument (outPropertyList)";
      unsigned int v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  uint64_t v6 = vp::log(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)AudioStreamBasicDescription buf = 0;
    _os_log_fault_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_FAULT, "failed to get downlink property list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_GetUplinkPropertyList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        uint64_t v5 = 0;
        *a5 = 0;
        return v5;
      }
      int v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        uint64_t v5 = 1650553447;

        return v5;
      }
      __int16 v11 = 0;
      int v8 = "VoiceProcessor_GetUplinkPropertyList BadArgument (ioPropertyCount)";
      unsigned int v9 = (uint8_t *)&v11;
    }
    else
    {
      int v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_11;
      }
      __int16 v12 = 0;
      int v8 = "VoiceProcessor_GetUplinkPropertyList BadArgument (outPropertyList)";
      unsigned int v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  uint64_t v6 = vp::log(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)AudioStreamBasicDescription buf = 0;
    _os_log_fault_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_FAULT, "failed to get uplink property list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_SetProperty(vp *a1, int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = vp::log(a1);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (a3)
    {
      uint64_t v7 = 1651536498;
      if (v6)
      {
        v12[0] = 67109120;
        v12[1] = a2;
        int v8 = "VoiceProcessor_SetProperty BadPropertyID (%d)";
        unsigned int v9 = v5;
        uint32_t v10 = 8;
LABEL_10:
        _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)v12, v10);
      }
    }
    else
    {
      uint64_t v7 = 1650553447;
      if (v6)
      {
        LOWORD(v12[0]) = 0;
        int v8 = "VoiceProcessor_SetProperty BadArgument (inPropertyData)";
        unsigned int v9 = v5;
        uint32_t v10 = 2;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = 1651664230;
    uint64_t v5 = vp::log(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v12[0]) = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_FAULT, "failed to set property due to bad reference", (uint8_t *)v12, 2u);
    }
  }

  return v7;
}

uint64_t VoiceProcessor_GetProperty(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v4 = 1651664230;
    uint64_t v5 = vp::log(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_FAULT, "failed to get property due to bad reference", buf, 2u);
    }
    goto LABEL_10;
  }
  if (!a3)
  {
    uint64_t v4 = 1650553447;
    uint64_t v5 = vp::log(a1);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_10:

      return v4;
    }
    __int16 v10 = 0;
    BOOL v6 = "VoiceProcessor_GetProperty BadArgument (outPropertyData)";
    uint64_t v7 = (uint8_t *)&v10;
LABEL_13:
    _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    goto LABEL_10;
  }
  if (!a4)
  {
    uint64_t v4 = 1650553447;
    uint64_t v5 = vp::log(a1);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    __int16 v9 = 0;
    BOOL v6 = "VoiceProcessor_GetProperty BadArgument (outPropertySize)";
    uint64_t v7 = (uint8_t *)&v9;
    goto LABEL_13;
  }
  return 1651536498;
}

uint64_t VoiceProcessor_GetDownlinkParameterList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        uint64_t v5 = 0;
        *a5 = 0;
        return v5;
      }
      uint64_t v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        uint64_t v5 = 1650553447;

        return v5;
      }
      __int16 v11 = 0;
      int v8 = "VoiceProcessor_GetDownlinkParameterList BadArgument (ioParameterCount)";
      __int16 v9 = (uint8_t *)&v11;
    }
    else
    {
      uint64_t v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_11;
      }
      __int16 v12 = 0;
      int v8 = "VoiceProcessor_GetDownlinkParameterList BadArgument (outParameterList)";
      __int16 v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  BOOL v6 = vp::log(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)AudioStreamBasicDescription buf = 0;
    _os_log_fault_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_FAULT, "failed to get downlink parameter list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_GetUplinkParameterList(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        uint64_t v5 = 0;
        *a5 = 0;
        return v5;
      }
      uint64_t v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        uint64_t v5 = 1650553447;

        return v5;
      }
      __int16 v11 = 0;
      int v8 = "VoiceProcessor_GetUplinkParameterList BadArgument (ioParameterCount)";
      __int16 v9 = (uint8_t *)&v11;
    }
    else
    {
      uint64_t v7 = vp::log(a1);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_11;
      }
      __int16 v12 = 0;
      int v8 = "VoiceProcessor_GetUplinkParameterList BadArgument (outParameterList)";
      __int16 v9 = (uint8_t *)&v12;
    }
    _os_log_error_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_11;
  }
  BOOL v6 = vp::log(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)AudioStreamBasicDescription buf = 0;
    _os_log_fault_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_FAULT, "failed to get uplink parameter list due to bad reference", buf, 2u);
  }

  return 1651664230;
}

uint64_t VoiceProcessor_SetParameter(vp *a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = vp::log(a1);
  uint64_t v5 = v4;
  if (a1)
  {
    uint64_t v6 = 1651532146;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "VoiceProcessor_SetParameter BadParameterID (%d)", (uint8_t *)v8, 8u);
    }
  }
  else
  {
    uint64_t v6 = 1651664230;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_FAULT, "failed to set parameter due to bad reference", (uint8_t *)v8, 2u);
    }
  }

  return v6;
}

uint64_t VoiceProcessor_GetParameter(vp *a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v3 = 1651664230;
    uint64_t v4 = vp::log(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_FAULT, "failed to get parameter due to bad reference", buf, 2u);
    }
    goto LABEL_8;
  }
  if (!a3)
  {
    uint64_t v3 = 1650553447;
    uint64_t v4 = vp::log(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "VoiceProcessor_GetParameter BadArgument (outParameterValue)", v6, 2u);
    }
LABEL_8:

    return v3;
  }
  return 1651532146;
}

uint64_t VoiceProcessor_GetPropertyInfo(vp *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v4 = 1651664230;
    uint64_t v5 = vp::log(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_FAULT, "failed to get property info due to bad reference", buf, 2u);
    }
    goto LABEL_10;
  }
  if (!a3)
  {
    uint64_t v4 = 1650553447;
    uint64_t v5 = vp::log(a1);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_10:

      return v4;
    }
    __int16 v10 = 0;
    uint64_t v6 = "VoiceProcessor_GetPropertyInfo BadArgument (outPropertySize)";
    uint64_t v7 = (uint8_t *)&v10;
LABEL_13:
    _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    goto LABEL_10;
  }
  if (!a4)
  {
    uint64_t v4 = 1650553447;
    uint64_t v5 = vp::log(a1);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    __int16 v9 = 0;
    uint64_t v6 = "VoiceProcessor_GetPropertyInfo BadArgument (outPropertyIsWritable)";
    uint64_t v7 = (uint8_t *)&v9;
    goto LABEL_13;
  }
  return 1651536498;
}

uint64_t VoiceProcessor_InitializeDownlink(uint64_t a1, unsigned int *a2)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      uint64_t v7 = buf;
      int v8 = vp::log((vp *)a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        log = v8;
        v106[0] = 0;
        uint64_t v107 = 0;
        __int16 v9 = (uint64_t *)*a2;
        v110[0] = 5;
        unsigned int v111 = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v110);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v110);
        __int16 v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v106, "topology");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v110);
        unsigned __int8 v11 = *(unsigned char *)v10;
        *(unsigned char *)__int16 v10 = v110[0];
        v110[0] = v11;
        __int16 v12 = (uint64_t *)v10[1];
        v10[1] = (uint64_t)v111;
        unsigned int v111 = v12;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v110);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v111, v110[0]);
        uint64_t v13 = a2[1];
        v108[0] = 0;
        int v109 = 0;
        if (v13)
        {
          unint64_t v2 = &v142[8];
          uint64_t v3 = (char *)&v138 + 8;
          uint64_t v4 = (char *)&v132 + 8;
          char v14 = a2 + 62;
          do
          {
            v112[0] = 0;
            BOOL v113 = 0;
            uint64_t v15 = *(v14 - 60);
            v142[0] = 5;
            *(void *)&v142[8] = v15;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
            unsigned int v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "type");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
            uint8_t v17 = *(unsigned char *)v16;
            *(unsigned char *)unsigned int v16 = v142[0];
            v142[0] = v17;
            uint64_t v18 = v16[1];
            v16[1] = *(void *)&v142[8];
            *(void *)&v142[8] = v18;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v142[8], v142[0]);
            uint64_t v19 = *(v14 - 59);
            LOBYTE(v138) = 6;
            *((void *)&v138 + 1) = v19;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v138);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v138);
            uint64_t v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "io_block_size");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v138);
            char v21 = *(unsigned char *)v20;
            *(unsigned char *)uint64_t v20 = v138;
            LOBYTE(v138) = v21;
            uint64_t v22 = v20[1];
            v20[1] = *((void *)&v138 + 1);
            *((void *)&v138 + 1) = v22;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v138);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v138 + 1, v138);
            LODWORD(aBlock) = *(v14 - 58);
            uint64_t v102 = (uint64_t)(v14 - 57);
            LOBYTE(v132) = 0;
            *((void *)&v132 + 1) = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorDownlinkTerminalType>>((uint64_t)&v132, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v132);
            uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "input_types");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v132);
            char v24 = *(unsigned char *)v23;
            *(unsigned char *)uint64_t v23 = v132;
            LOBYTE(v132) = v24;
            uint64_t v25 = v23[1];
            v23[1] = *((void *)&v132 + 1);
            *((void *)&v132 + 1) = v25;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v132);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v132 + 1, v132);
            LODWORD(aBlock) = *(v14 - 58);
            uint64_t v102 = (uint64_t)(v14 - 52);
            LOBYTE(v114) = 0;
            unsigned int v115 = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)&v114, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v114);
            uint64_t v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "input_formats");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v114);
            char v27 = *(unsigned char *)v26;
            *(unsigned char *)uint64_t v26 = (_BYTE)v114;
            LOBYTE(v114) = v27;
            char v28 = (uint64_t *)v26[1];
            v26[1] = (uint64_t)v115;
            unsigned int v115 = v28;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v114);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v115, v114);
            LODWORD(aBlock) = *(v14 - 2);
            uint64_t v102 = (uint64_t)(v14 - 1);
            v136[0] = 0;
            unsigned int v137 = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorDownlinkTerminalType>>((uint64_t)v136, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v136);
            long long v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "output_types");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v136);
            unsigned __int8 v30 = *(unsigned char *)v29;
            *(unsigned char *)long long v29 = v136[0];
            v136[0] = v30;
            char v31 = (uint64_t *)v29[1];
            v29[1] = (uint64_t)v137;
            unsigned int v137 = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v136);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v137, v136[0]);
            LODWORD(aBlock) = *(v14 - 2);
            uint64_t v102 = (uint64_t)v14;
            v130[0] = 0;
            *(void *)&v131[4] = 0;
            nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)v130, (unsigned int *)&aBlock);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v130);
            int v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "output_formats");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v130);
            uint8_t v33 = *(unsigned char *)v32;
            *(unsigned char *)int v32 = v130[0];
            v130[0] = v33;
            uint64_t v34 = v32[1];
            v32[1] = *(void *)&v131[4];
            *(void *)&v131[4] = v34;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v130);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v131[4], v130[0]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v112);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back((uint64_t)v108, (uint64_t)v112);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v112);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v113, v112[0]);
            v14 += 70;
            --v13;
          }
          while (v13);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
        long long v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v106, "node_configurations");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
        unsigned __int8 v36 = *(unsigned char *)v35;
        *(unsigned char *)long long v35 = v108[0];
        v108[0] = v36;
        char v37 = (uint64_t *)v35[1];
        v35[1] = (uint64_t)v109;
        int v109 = v37;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v109, v108[0]);
        uint64_t v38 = a2[229];
        v142[0] = 6;
        *(void *)&v142[8] = v38;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
        uint64_t v7 = buf;
        char v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v106, "client_io_block_size");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
        uint8_t v40 = *(unsigned char *)v39;
        *(unsigned char *)char v39 = v142[0];
        v142[0] = v40;
        uint64_t v41 = v39[1];
        v39[1] = *(void *)&v142[8];
        *(void *)&v142[8] = v41;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v142[8], v142[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v106, 4, 0x20u, 0, 0, __p);
        if (SHIBYTE(__p[2]) >= 0) {
          char v42 = __p;
        }
        else {
          char v42 = (void **)__p[0];
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
        unsigned int v129 = v42;
        int v8 = log;
        _os_log_impl(&dword_1BB0CE000, log, OS_LOG_TYPE_DEFAULT, "initializing downlink with configuration: %s", buf, 0xCu);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v107, v106[0]);
      }

      if (*a2 == 1)
      {
        if (a2[1] == 1)
        {
          if (a2[2] == 1)
          {
            uint64_t v44 = a2[4];
            if ((v44 - 3) <= 0xFFFFFFFD)
            {
              uint64_t v45 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has wrong number of inputs");
              uint64_t v46 = vp::log(v45);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
              {
                unsigned int v61 = __p;
                if (SHIBYTE(__p[2]) < 0) {
                  unsigned int v61 = (void **)__p[0];
                }
LABEL_109:
                *(_DWORD *)unsigned int v142 = 136315138;
                *(void *)&v142[4] = v61;
                _os_log_error_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "downlink configuration is not valid - %s", v142, 0xCu);
              }
LABEL_59:

              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_33;
            }
            uint64_t v54 = 0;
            while (a2[v54 + 5])
            {
              if (v44 == ++v54)
              {
                uint64_t v55 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has no far-end-voice input");
                uint64_t v46 = vp::log(v55);
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
LABEL_73:
                  int v67 = __p;
                  if (SHIBYTE(__p[2]) < 0) {
                    int v67 = (void **)__p[0];
                  }
                  *(_DWORD *)unsigned int v142 = 136315138;
                  *(void *)(v7 + 18std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v67;
                  _os_log_error_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, "downlink configuration is not valid - %s", v142, 0xCu);
                }
                goto LABEL_59;
              }
            }
            uint64_t v56 = 0;
            uint64_t v57 = (double *)&a2[10 * v54 + 10];
            while (a2[v56 + 5] != 4)
            {
              if (v44 == ++v56) {
                goto LABEL_51;
              }
            }
            if (*v57 != *(double *)&a2[10 * v56 + 10])
            {
              unsigned int v58 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node far-end-voice and telemetry input sample rates are not equal");
              uint64_t v46 = vp::log(v58);
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                goto LABEL_59;
              }
              unsigned int v61 = __p;
              if (SHIBYTE(__p[2]) < 0) {
                unsigned int v61 = (void **)__p[0];
              }
              goto LABEL_109;
            }
LABEL_51:
            if (a2[60] != 1)
            {
              unsigned int v59 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has wrong number of outputs");
              uint64_t v46 = vp::log(v59);
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                goto LABEL_59;
              }
              unsigned int v61 = __p;
              if (SHIBYTE(__p[2]) < 0) {
                unsigned int v61 = (void **)__p[0];
              }
              goto LABEL_109;
            }
            if (a2[61] != 5)
            {
              size_t v60 = (vp *)std::string::basic_string[abi:ne180100]<0>(__p, "'AllOfDownlinkDSPWithFarEndVoiceOnly' node has no downlink output");
              uint64_t v46 = vp::log(v60);
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                goto LABEL_59;
              }
              unsigned int v61 = __p;
              if (SHIBYTE(__p[2]) < 0) {
                unsigned int v61 = (void **)__p[0];
              }
              goto LABEL_109;
            }
            if (a2[228] >= 0x11)
            {
              uint64_t v46 = vp::log(v43);
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                goto LABEL_32;
              }
              LOWORD(__p[0]) = 0;
              uint64_t v50 = "downlink configuration is not valid - speaker telemetry input data sources count is out of bounds";
              goto LABEL_31;
            }
            unsigned int v62 = a2[229];
            unsigned int v63 = vp::log(v43);
            uint64_t v46 = v63;
            if (v62)
            {
              if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
              {
                LOWORD(__p[0]) = 0;
                _os_log_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_INFO, "downlink configuration is valid!", (uint8_t *)__p, 2u);
              }

              uint64_t v7 = (uint8_t *)(a1 + 192);
              caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
              if (*a2 != 1)
              {
                uint64_t result = _os_crash();
                __break(1u);
                return result;
              }
              uint64_t v64 = a2[1];
              if (!v64)
              {
LABEL_72:
                _os_crash();
                __break(1u);
                goto LABEL_73;
              }
              uint64_t v65 = 0;
              uint64_t v66 = 61;
              while (a2[v66 - 59] != 1)
              {
                ++v65;
                v66 += 70;
                if (v64 == v65) {
                  goto LABEL_72;
                }
              }
              uint64_t v68 = a2[70 * v65 + 4];
              if (v68)
              {
                uint64_t v69 = 0;
                uint64_t v3 = (char *)a2[229];
                uint64_t v70 = v66 * 4 - 224;
                while (*(unsigned int *)((char *)a2 + v70))
                {
                  ++v69;
                  v70 += 4;
                  if (v68 == v69) {
                    goto LABEL_80;
                  }
                }
              }
              else
              {
LABEL_80:
                _os_crash();
                __break(1u);
              }
              long long v71 = &a2[70 * v65];
              long long v72 = (uint8_t *)v71[60];
              if (v72)
              {
                unint64_t v2 = 0;
                uint64_t v4 = (char *)&v71[10 * v69 + 10];
                while (a2[v66] != 5)
                {
                  ++v2;
                  ++v66;
                  if (v72 == v2) {
                    goto LABEL_85;
                  }
                }
              }
              else
              {
LABEL_85:
                _os_crash();
                __break(1u);
              }
              int v73 = 4 * a2[228];
              *(_DWORD *)unsigned int v142 = 32796;
              __p[0] = a2 + 212;
              LODWORD(v138) = v73;
              unint64_t v74 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, (unsigned int *)v142, __p, (unsigned int *)&v138);
              if (v74 >= 0x100000000) {
                uint64_t v53 = 0x100000000;
              }
              else {
                uint64_t v53 = v74;
              }
              if (!v53)
              {
                aBlocuint64_t k = MEMORY[0x1E4F143A8];
                uint64_t v102 = 3221225472;
                int v103 = ___ZN28VoiceProcessorImplementation18InitializeDownlinkERK35VoiceProcessorDownlinkConfiguration_block_invoke;
                unsigned int v104 = &__block_descriptor_40_e99_i32__0__AudioBufferList_I_1_AudioBuffer_II_v___8__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16_I24l;
                uint64_t v105 = a1;
                uint64_t v75 = _Block_copy(&aBlock);
                std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
                uint64_t v76 = (uint64_t)&a2[70 * v65 + 62 + 10 * (void)v2];
                uint64_t v77 = *(void *)(a1 + 168);
                os_log_t loga = v75;
                unsigned int v78 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(void *)v77 + 32))(v77, v76, v3, v4);
                int v79 = (int)v78;
                if (v78)
                {
                  uint64_t v80 = vp::log(v78);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
                  {
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v142);
                    *(void *)&long long v143 = v142;
                    BYTE8(v143) = 1;
                    LOBYTE(v144) = 5;
                    v145[0] = v79;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v144);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v144);
                    v145[1] = &v144;
                    char v146 = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, (uint64_t)v142, 2, 1, 2);
                    __p[2] = __p;
                    LOBYTE(__p[3]) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&v138, "call_name");
                    *(void *)&long long v139 = &v138;
                    BYTE8(v139) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v140, vp::call_traits<(vp::call_type)3>::name);
                    v140[2] = v140;
                    char v141 = 1;
                    __p[6] = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p[4], (uint64_t)&v138, 2, 1, 2);
                    LOBYTE(__p[7]) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&v132);
                    *(void *)&long long v133 = &v132;
                    BYTE8(v133) = 1;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[378],char [378],0>((uint64_t)v134);
                    v134[2] = v134;
                    char v135 = 1;
                    __p[10] = (void *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p[8], (uint64_t)&v132, 2, 1, 2);
                    LOBYTE(__p[11]) = 1;
                    uint64_t v93 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v136, (uint64_t)__p, 3, 1, 2);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v93, 4, 0x20u, 0, 0, &v114);
                    if (v116 >= 0) {
                      vDSP_Length v94 = &v114;
                    }
                    else {
                      vDSP_Length v94 = v114;
                    }
                    *(_DWORD *)vDSP_Length v130 = 136315138;
                    *(void *)BOOL v131 = v94;
                    _os_log_error_impl(&dword_1BB0CE000, v80, OS_LOG_TYPE_ERROR, "legacy call failed: %s", v130, 0xCu);
                    if (v116 < 0) {
                      operator delete(v114);
                    }
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v136);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v137, v136[0]);
                    for (uint64_t i = 0; i != -12; i -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p[i + 8]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p[i + 9], LOBYTE(__p[i + 8]));
                    }
                    for (uint64_t j = 0; j != -8; j -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v134[j]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v134[j + 1], LOBYTE(v134[j]));
                    }
                    for (uint64_t k = 0; k != -8; k -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v140[k]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v140[k + 1], LOBYTE(v140[k]));
                    }
                    for (uint64_t m = 0; m != -8; m -= 4)
                    {
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v145[m - 1]);
                      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v145[m], LOBYTE(v145[m - 1]));
                    }
                  }
                }
                std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
                char v81 = (std::pmr *)memcpy(__p, a2, sizeof(__p));
                LOBYTE(v118) = 0;
                HIDWORD(v118) = v3;
                int v119 = (int)v3;
                long long v82 = *((_OWORD *)v4 + 1);
                *(_OWORD *)unsigned int v142 = *(_OWORD *)v4;
                long long v143 = v82;
                uint64_t v144 = *((void *)v4 + 4);
                int v83 = 2 * a2[229];
                uint64_t default_resource = std::pmr::get_default_resource(v81);
                unsigned int v85 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v142, v83, default_resource, &v120);
                long long v86 = *((_OWORD *)v4 + 1);
                long long v138 = *(_OWORD *)v4;
                long long v139 = v86;
                v140[0] = *((void *)v4 + 4);
                uint64_t v87 = std::pmr::get_default_resource(v85);
                vp::Audio_Buffer::create((uint64_t)&v138, 0, v87, &v121);
                vp::Audio_File::Audio_File(&v122);
                vp::Audio_File::Audio_File(&v123);
                uint64_t v88 = (std::pmr *)vp::Audio_File::Audio_File(&v124);
                long long v89 = *(_OWORD *)(v76 + 16);
                long long v132 = *(_OWORD *)v76;
                long long v133 = v89;
                v134[0] = *(void *)(v76 + 32);
                uint64_t v90 = std::pmr::get_default_resource(v88);
                vp::Audio_Buffer::create((uint64_t)&v132, 0, v90, &v125);
                long long v126 = 0u;
                char v127 = 0;
                if (*(unsigned char *)(a1 + 2320))
                {
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2288));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2280));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2272));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2264));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2256));
                  vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2248));
                  *(unsigned char *)(a1 + 232std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
                }
                memcpy((void *)(a1 + 1312), __p, 0x398uLL);
                *(void *)(a1 + 2232) = v118;
                *(_DWORD *)(a1 + 224std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v119;
                vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 2248), (uint64_t *)&v120);
                vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 2256), (uint64_t *)&v121);
                vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 2264), &v122);
                vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 2272), &v123);
                vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 2280), &v124);
                vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 2288), (uint64_t *)&v125);
                *(_OWORD *)(a1 + 2296) = v126;
                *(unsigned char *)(a1 + 2312) = v127;
                *(unsigned char *)(a1 + 232std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v125);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v124);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v123);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v122);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v121);
                vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)&v120);
                unsigned int v92 = vp::log(v91);
                if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
                {
                  LOWORD(__p[0]) = 0;
                  _os_log_impl(&dword_1BB0CE000, v92, OS_LOG_TYPE_INFO, "initialized downlink", (uint8_t *)__p, 2u);
                }

                uint64_t v53 = 0;
              }
              caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 192));
              goto LABEL_36;
            }
            if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
              goto LABEL_32;
            }
            LOWORD(__p[0]) = 0;
            uint64_t v50 = "downlink configuration is not valid - client I/O block size can't be 0";
            goto LABEL_31;
          }
          uint64_t v46 = vp::log(v43);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            uint64_t v50 = "downlink configuration is not valid - 'AllOfDownlinkDSPWithFarEndVoiceOnly' node configuration not found";
            goto LABEL_31;
          }
LABEL_32:

LABEL_33:
          uint64_t v52 = vp::log(v51);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_error_impl(&dword_1BB0CE000, v52, OS_LOG_TYPE_ERROR, "failed to initialize downlink due to bad configuration", (uint8_t *)__p, 2u);
          }

          uint64_t v53 = 1650681447;
LABEL_36:
          return ErrorFromOSStatus(v53);
        }
        uint64_t v46 = vp::log(v43);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          goto LABEL_32;
        }
        LOWORD(__p[0]) = 0;
        uint64_t v50 = "downlink configuration is not valid - wrong number of node configurations";
      }
      else
      {
        uint64_t v46 = vp::log(v43);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          goto LABEL_32;
        }
        LOWORD(__p[0]) = 0;
        uint64_t v50 = "downlink configuration is not valid - topology is not supported";
      }
LABEL_31:
      _os_log_error_impl(&dword_1BB0CE000, v46, OS_LOG_TYPE_ERROR, v50, (uint8_t *)__p, 2u);
      goto LABEL_32;
    }
    uint64_t v49 = vp::log((vp *)a1);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_ERROR, "VoiceProcessor_InitializeDownlink BadArgument (inConfiguration)", (uint8_t *)__p, 2u);
    }

    return 1650553447;
  }
  else
  {
    uint64_t v47 = vp::log(0);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v47, OS_LOG_TYPE_FAULT, "failed to initialize downlink due to bad reference", (uint8_t *)__p, 2u);
    }

    return 1651664230;
  }
}

void sub_1BB72C0A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
  {
    char v37 = (vp *)__cxa_begin_catch(a1);
    uint64_t v38 = vp::log(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(v36 - 176, "call_name");
      *(void *)(v36 - 16std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v36 - 176;
      *(unsigned char *)(v36 - 152) = 1;
      *(void *)(v36 - 128) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(v36 - 144, vp::call_traits<(vp::call_type)3>::name);
      *(unsigned char *)(v36 - 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a29, v36 - 176, 2, 1, 2);
      a31 = (uint64_t)&a29;
      a32 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(v36 - 240);
      *(void *)(v36 - 224) = v36 - 240;
      *(unsigned char *)(v36 - 216) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[378],char [378],0>(v36 - 208);
      *(void *)(v36 - 192) = v36 - 208;
      *(unsigned char *)(v36 - 184) = 1;
      a35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a33, v36 - 240, 2, 1, 2);
      a36 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a26, (uint64_t)&a29, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a26, 4, 0x20u, 0, 0, &STACK[0x4B0]);
      if (SLOBYTE(STACK[0x4C7]) >= 0) {
        char v39 = &STACK[0x4B0];
      }
      else {
        char v39 = (unint64_t *)STACK[0x4B0];
      }
      *(_DWORD *)(v36 - 256) = 136315138;
      STACK[0x4F4] = (unint64_t)v39;
      _os_log_error_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v36 - 256), 0xCu);
      if (SLOBYTE(STACK[0x4C7]) < 0) {
        operator delete((void *)STACK[0x4B0]);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a26);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a29 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 240 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v36 - 176 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB72BAC8);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN28VoiceProcessorImplementation18InitializeDownlinkERK35VoiceProcessorDownlinkConfiguration_block_invoke(uint64_t a1, const AudioBufferList *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6 = *(unsigned int **)(a1 + 32);
  audio_buffer_list = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(v6 + 562));
  int v8 = (_DWORD *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(v6 + 564));
  util::make_abl_view(audio_buffer_list, v8, v6[574] | 0x100000000, (v6[575] + v6[574]) | 0x100000000);
  __int16 v9 = (unsigned int *)vp::Audio_Buffer::get_audio_buffer_list((vp::Audio_Buffer *)(v6 + 564));
  util::copy_abl_data(v9, a2, (AudioBufferList *)*a4);
  v6[574] += *a4;
  v6[575] -= *a4;
  return 0;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[378],char [378],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  unint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::InitializeDownlinkProcessing, ArgTypeList = <const AudioStreamBasicDescription &, unsigned int &, const AudioStreamBasicDescription &, int (^__strong &)(AudioBufferList *, AudioTimeStamp *, unsigned int *)>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB72C4D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorDownlinkTerminalType>>(uint64_t a1, unsigned int *a2)
{
  if (*a2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *((void *)a2 + 1);
      int v8 = 0;
      uint64_t v6 = (uint64_t *)*(unsigned int *)(v5 + 4 * v4);
      v7[0] = 5;
      int v8 = v6;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a1, (uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      ++v4;
    }
    while (v4 < *a2);
  }
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>(uint64_t a1, unsigned int *a2)
{
  if (*a2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 36;
    do
    {
      uint64_t v5 = *((void *)a2 + 1);
      v43[0] = 0;
      uint64_t v44 = 0;
      uint64_t v6 = *(uint64_t **)(v5 + v4 - 36);
      v61[0] = 7;
      unsigned int v62 = v6;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      uint64_t v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "sample_rate");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      unsigned __int8 v8 = *(unsigned char *)v7;
      *(unsigned char *)uint64_t v7 = v61[0];
      v61[0] = v8;
      __int16 v9 = (uint64_t *)v7[1];
      v7[1] = (uint64_t)v62;
      unsigned int v62 = v9;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, v61[0]);
      __int16 v10 = (uint64_t *)*(unsigned int *)(v5 + v4 - 28);
      v59[0] = 6;
      size_t v60 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      unsigned __int8 v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "format_id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      unsigned __int8 v12 = *(unsigned char *)v11;
      *(unsigned char *)unsigned __int8 v11 = v59[0];
      v59[0] = v12;
      uint64_t v13 = (uint64_t *)v11[1];
      v11[1] = (uint64_t)v60;
      size_t v60 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v60, v59[0]);
      char v14 = (uint64_t *)*(unsigned int *)(v5 + v4 - 24);
      v57[0] = 6;
      unsigned int v58 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      uint64_t v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "foramt_flags");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      unsigned __int8 v16 = *(unsigned char *)v15;
      *(unsigned char *)uint64_t v15 = v57[0];
      v57[0] = v16;
      uint8_t v17 = (uint64_t *)v15[1];
      v15[1] = (uint64_t)v58;
      unsigned int v58 = v17;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v58, v57[0]);
      uint64_t v18 = (uint64_t *)*(unsigned int *)(v5 + v4 - 20);
      v55[0] = 6;
      uint64_t v56 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      uint64_t v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "bytes_per_packet");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      unsigned __int8 v20 = *(unsigned char *)v19;
      *(unsigned char *)uint64_t v19 = v55[0];
      v55[0] = v20;
      char v21 = (uint64_t *)v19[1];
      v19[1] = (uint64_t)v56;
      uint64_t v56 = v21;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);
      uint64_t v22 = (uint64_t *)*(unsigned int *)(v5 + v4 - 16);
      v53[0] = 6;
      uint64_t v54 = v22;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      uint64_t v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "frames_per_packet");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      unsigned __int8 v24 = *(unsigned char *)v23;
      *(unsigned char *)uint64_t v23 = v53[0];
      v53[0] = v24;
      uint64_t v25 = (uint64_t *)v23[1];
      v23[1] = (uint64_t)v54;
      uint64_t v54 = v25;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
      uint64_t v26 = (uint64_t *)*(unsigned int *)(v5 + v4 - 12);
      v51[0] = 6;
      uint64_t v52 = v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      char v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "bytes_per_frame");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      unsigned __int8 v28 = *(unsigned char *)v27;
      *(unsigned char *)char v27 = v51[0];
      v51[0] = v28;
      long long v29 = (uint64_t *)v27[1];
      v27[1] = (uint64_t)v52;
      uint64_t v52 = v29;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
      unsigned __int8 v30 = (uint64_t *)*(unsigned int *)(v5 + v4 - 8);
      v49[0] = 6;
      uint64_t v50 = v30;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      char v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "channels_per_frame");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      unsigned __int8 v32 = *(unsigned char *)v31;
      *(unsigned char *)char v31 = v49[0];
      v49[0] = v32;
      uint8_t v33 = (uint64_t *)v31[1];
      v31[1] = (uint64_t)v50;
      uint64_t v50 = v33;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
      uint64_t v34 = (uint64_t *)*(unsigned int *)(v5 + v4 - 4);
      v47[0] = 6;
      uint64_t v48 = v34;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      long long v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "bits_per_channel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      unsigned __int8 v36 = *(unsigned char *)v35;
      *(unsigned char *)long long v35 = v47[0];
      v47[0] = v36;
      char v37 = (uint64_t *)v35[1];
      v35[1] = (uint64_t)v48;
      uint64_t v48 = v37;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
      uint64_t v38 = (uint64_t *)*(unsigned int *)(v5 + v4);
      v45[0] = 6;
      uint64_t v46 = v38;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      char v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "reserved");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      unsigned __int8 v40 = *(unsigned char *)v39;
      *(unsigned char *)char v39 = v45[0];
      v45[0] = v40;
      uint64_t v41 = (uint64_t *)v39[1];
      v39[1] = (uint64_t)v46;
      uint64_t v46 = v41;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a1, (uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
      ++v3;
      v4 += 40;
    }
    while (v3 < *a2);
  }
}

void sub_1BB72CAC8(void *a1)
{
}

uint64_t VoiceProcessor_InitializeUplink(vp *a1, unsigned int *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = VoiceProcessorImplementation::InitializeUplink(a1, a2);
      return ErrorFromOSStatus(v2);
    }
    else
    {
      uint64_t v5 = vp::log(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_error_impl(&dword_1BB0CE000, v5, OS_LOG_TYPE_ERROR, "VoiceProcessor_InitializeUplink BadArgument (inConfiguration)", v6, 2u);
      }

      return 1650553447;
    }
  }
  else
  {
    uint64_t v4 = vp::log(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_FAULT, "failed to initialize uplink due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

uint64_t VoiceProcessorImplementation::InitializeUplink(unsigned char *a1, unsigned int *a2)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = vp::log((vp *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    log = v4;
    v170[0] = 0;
    uint64_t v171 = 0;
    uint64_t v5 = (uint64_t *)*a2;
    v184[0] = 5;
    unsigned int v185 = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    uint64_t v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "topology");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    unsigned __int8 v7 = *(unsigned char *)v6;
    *(unsigned char *)uint64_t v6 = v184[0];
    v184[0] = v7;
    unsigned __int8 v8 = (uint64_t *)v6[1];
    v6[1] = (uint64_t)v185;
    unsigned int v185 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v185, v184[0]);
    uint64_t v9 = a2[1];
    v182[0] = 0;
    unsigned int v183 = 0;
    if (v9)
    {
      __int16 v10 = a2 + 42;
      do
      {
        v186[0] = 0;
        float v187 = 0;
        uint64_t v11 = *(v10 - 40);
        LOBYTE(v155[0]) = 5;
        *((void *)&v155[0] + 1) = v11;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        unsigned __int8 v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "type");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        char v13 = *(unsigned char *)v12;
        *(unsigned char *)unsigned __int8 v12 = v155[0];
        LOBYTE(v155[0]) = v13;
        uint64_t v14 = v12[1];
        v12[1] = *((void *)&v155[0] + 1);
        *((void *)&v155[0] + 1) = v14;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v155 + 1, LOBYTE(v155[0]));
        uint64_t v15 = *(v10 - 39);
        LOBYTE(v153[0]) = 6;
        *((void *)&v153[0] + 1) = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        unsigned __int8 v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "io_block_size");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        char v17 = *(unsigned char *)v16;
        *(unsigned char *)unsigned __int8 v16 = v153[0];
        LOBYTE(v153[0]) = v17;
        uint64_t v18 = v16[1];
        v16[1] = *((void *)&v153[0] + 1);
        *((void *)&v153[0] + 1) = v18;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v153 + 1, LOBYTE(v153[0]));
        *(_DWORD *)uint64_t v148 = *(v10 - 38);
        *(void *)&v148[8] = v10 - 37;
        LOBYTE(v151[0]) = 0;
        *((void *)&v151[0] + 1) = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorUplinkTerminalType>>((uint64_t)v151, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
        uint64_t v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "input_types");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
        char v20 = *(unsigned char *)v19;
        *(unsigned char *)uint64_t v19 = v151[0];
        LOBYTE(v151[0]) = v20;
        uint64_t v21 = v19[1];
        v19[1] = *((void *)&v151[0] + 1);
        *((void *)&v151[0] + 1) = v21;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v151 + 1, LOBYTE(v151[0]));
        *(_DWORD *)uint64_t v148 = *(v10 - 38);
        *(void *)&v148[8] = v10 - 34;
        LOBYTE(v192) = 0;
        int v193 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)&v192, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
        uint64_t v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "input_formats");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
        char v23 = *(unsigned char *)v22;
        *(unsigned char *)uint64_t v22 = v192;
        LOBYTE(v192) = v23;
        unsigned __int8 v24 = (uint64_t *)v22[1];
        v22[1] = (uint64_t)v193;
        int v193 = v24;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v193, v192);
        *(_DWORD *)uint64_t v148 = *(v10 - 4);
        *(void *)&v148[8] = v10 - 3;
        LOBYTE(v19std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
        unsigned int v191 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorUplinkTerminalType>>((uint64_t)&v190, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
        uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "output_types");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
        char v26 = *(unsigned char *)v25;
        *(unsigned char *)uint64_t v25 = v190;
        LOBYTE(v19std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v26;
        char v27 = (uint64_t *)v25[1];
        v25[1] = (uint64_t)v191;
        unsigned int v191 = v27;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v191, v190);
        *(_DWORD *)uint64_t v148 = *(v10 - 4);
        *(void *)&v148[8] = v10;
        v188[0] = 0;
        int v189 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<AudioStreamBasicDescription>>((uint64_t)v188, (unsigned int *)v148);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
        unsigned __int8 v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v186, "output_formats");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
        unsigned __int8 v29 = *(unsigned char *)v28;
        *(unsigned char *)unsigned __int8 v28 = v188[0];
        v188[0] = v29;
        unsigned __int8 v30 = (uint64_t *)v28[1];
        v28[1] = (uint64_t)v189;
        int v189 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v189, v188[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back((uint64_t)v182, (uint64_t)v186);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v187, v186[0]);
        v10 += 70;
        --v9;
      }
      while (v9);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
    char v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "node_configurations");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
    unsigned __int8 v32 = *(unsigned char *)v31;
    *(unsigned char *)char v31 = v182[0];
    v182[0] = v32;
    uint8_t v33 = (uint64_t *)v31[1];
    v31[1] = (uint64_t)v183;
    unsigned int v183 = v33;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v182);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v183, v182[0]);
    uint64_t v34 = a2[212];
    LOBYTE(v155[0]) = 6;
    *((void *)&v155[0] + 1) = v34;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    long long v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_port_type");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    char v36 = *(unsigned char *)v35;
    *(unsigned char *)long long v35 = v155[0];
    LOBYTE(v155[0]) = v36;
    uint64_t v37 = v35[1];
    v35[1] = *((void *)&v155[0] + 1);
    *((void *)&v155[0] + 1) = v37;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v155 + 1, LOBYTE(v155[0]));
    uint64_t v38 = *((void *)a2 + 107);
    LOBYTE(v153[0]) = 7;
    *((void *)&v153[0] + 1) = v38;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    char v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_hardware_sample_rate");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    char v40 = *(unsigned char *)v39;
    *(unsigned char *)char v39 = v153[0];
    LOBYTE(v153[0]) = v40;
    uint64_t v41 = v39[1];
    v39[1] = *((void *)&v153[0] + 1);
    *((void *)&v153[0] + 1) = v41;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v153);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v153 + 1, LOBYTE(v153[0]));
    uint64_t v42 = a2[216];
    LOBYTE(v151[0]) = 6;
    *((void *)&v151[0] + 1) = v42;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    uint64_t v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_hardware_input_latency");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    char v44 = *(unsigned char *)v43;
    *(unsigned char *)uint64_t v43 = v151[0];
    LOBYTE(v151[0]) = v44;
    uint64_t v45 = v43[1];
    v43[1] = *((void *)&v151[0] + 1);
    *((void *)&v151[0] + 1) = v45;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v151 + 1, LOBYTE(v151[0]));
    uint64_t v46 = a2[217];
    v148[0] = 6;
    *(void *)&v148[8] = v46;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    uint64_t v47 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "microphone_hardware_input_safety_offset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    uint8_t v48 = *(unsigned char *)v47;
    *(unsigned char *)uint64_t v47 = v148[0];
    v148[0] = v48;
    uint64_t v49 = v47[1];
    v47[1] = *(void *)&v148[8];
    *(void *)&v148[8] = v49;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v148);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v148[8], v148[0]);
    uint64_t v50 = (uint64_t *)a2[230];
    LOBYTE(v192) = 6;
    int v193 = v50;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    uint64_t v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_port_type");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    char v52 = *(unsigned char *)v51;
    *(unsigned char *)uint64_t v51 = v192;
    LOBYTE(v192) = v52;
    uint64_t v53 = (uint64_t *)v51[1];
    v51[1] = (uint64_t)v193;
    int v193 = v53;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v192);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v193, v192);
    uint64_t v54 = (uint64_t *)*((void *)a2 + 116);
    LOBYTE(v19std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 7;
    unsigned int v191 = v54;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    uint64_t v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_sample_rate");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    char v56 = *(unsigned char *)v55;
    *(unsigned char *)uint64_t v55 = v190;
    LOBYTE(v19std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v56;
    uint64_t v57 = (uint64_t *)v55[1];
    v55[1] = (uint64_t)v191;
    unsigned int v191 = v57;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v191, v190);
    unsigned int v58 = (uint64_t *)a2[234];
    v188[0] = 6;
    int v189 = v58;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    unsigned int v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_input_latency");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    unsigned __int8 v60 = *(unsigned char *)v59;
    *(unsigned char *)unsigned int v59 = v188[0];
    v188[0] = v60;
    unsigned int v61 = (uint64_t *)v59[1];
    v59[1] = (uint64_t)v189;
    int v189 = v61;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v188);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v189, v188[0]);
    unsigned int v62 = (uint64_t *)a2[235];
    v186[0] = 6;
    float v187 = v62;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    unsigned int v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_input_safety_offset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    unsigned __int8 v64 = *(unsigned char *)v63;
    *(unsigned char *)unsigned int v63 = v186[0];
    v186[0] = v64;
    uint64_t v65 = (uint64_t *)v63[1];
    v63[1] = (uint64_t)v187;
    float v187 = v65;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v63);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v186);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v187, v186[0]);
    uint64_t v66 = (uint64_t *)a2[236];
    v180[0] = 6;
    unsigned int v181 = v66;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    int v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_output_latency");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    unsigned __int8 v68 = *(unsigned char *)v67;
    *(unsigned char *)int v67 = v180[0];
    v180[0] = v68;
    uint64_t v69 = (uint64_t *)v67[1];
    v67[1] = (uint64_t)v181;
    unsigned int v181 = v69;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v181, v180[0]);
    uint64_t v70 = (uint64_t *)a2[237];
    v178[0] = 6;
    long long v179 = v70;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    long long v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_hardware_output_safety_offset");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    unsigned __int8 v72 = *(unsigned char *)v71;
    *(unsigned char *)long long v71 = v178[0];
    v178[0] = v72;
    int v73 = (uint64_t *)v71[1];
    v71[1] = (uint64_t)v179;
    long long v179 = v73;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v71);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v179, v178[0]);
    unint64_t v74 = (uint64_t *)a2[255];
    v176[0] = 6;
    long long v177 = v74;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    uint64_t v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "client_io_block_size");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    unsigned __int8 v76 = *(unsigned char *)v75;
    *(unsigned char *)uint64_t v75 = v176[0];
    v176[0] = v76;
    uint64_t v77 = (uint64_t *)v75[1];
    v75[1] = (uint64_t)v177;
    long long v177 = v77;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v75);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v176);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v177, v176[0]);
    unsigned int v78 = (uint64_t *)a2[256];
    v174[0] = 6;
    unsigned int v175 = v78;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    int v79 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "reference_is_hardware_tap_stream");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    unsigned __int8 v80 = *(unsigned char *)v79;
    *(unsigned char *)int v79 = v174[0];
    v174[0] = v80;
    char v81 = (uint64_t *)v79[1];
    v79[1] = (uint64_t)v175;
    unsigned int v175 = v81;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v79);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v175, v174[0]);
    long long v82 = (uint64_t *)a2[257];
    v172[0] = 6;
    uint64_t v173 = v82;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    int v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v170, "chat_flavor");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    unsigned __int8 v84 = *(unsigned char *)v83;
    *(unsigned char *)int v83 = v172[0];
    v172[0] = v84;
    unsigned int v85 = (uint64_t *)v83[1];
    v83[1] = (uint64_t)v173;
    uint64_t v173 = v85;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v83);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v173, v172[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v170);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v170, 4, 0x20u, 0, 0, __p);
    if (SHIBYTE(__p[2]) >= 0) {
      long long v86 = __p;
    }
    else {
      long long v86 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
    uint64_t v195 = v86;
    uint64_t v4 = log;
    _os_log_impl(&dword_1BB0CE000, log, OS_LOG_TYPE_DEFAULT, "initializing uplink with configuration: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v170);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v171, v170[0]);
  }

  if (*a2 != 1)
  {
    if (*a2)
    {
      long long v89 = vp::log(v87);
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
        goto LABEL_58;
      }
      LOWORD(__p[0]) = 0;
      uint64_t v90 = "uplink configuration is not valid - topology is not supported";
      goto LABEL_29;
    }
    if (a2[1] != 1)
    {
      long long v89 = vp::log(v87);
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
        goto LABEL_58;
      }
      LOWORD(__p[0]) = 0;
      uint64_t v90 = "uplink configuration is not valid - wrong number of node configurations";
      goto LABEL_29;
    }
    uint64_t IsValid = (uint64_t)(a2 + 2);
    if (a2[2])
    {
      long long v89 = vp::log((vp *)IsValid);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        uint64_t v90 = "uplink configuration is not valid - 'AllOfUplinkDSP' node configuration not found";
        goto LABEL_29;
      }
      goto LABEL_58;
    }
    goto LABEL_44;
  }
  if (a2[1] != 3)
  {
    long long v89 = vp::log(v87);
    if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
      goto LABEL_58;
    }
    LOWORD(__p[0]) = 0;
    uint64_t v90 = "uplink configuration is not valid - wrong number of node configurations";
    goto LABEL_29;
  }
  for (uint64_t i = 2; i != 212; i += 70)
  {
    unsigned int v92 = (vp *)&a2[i];
    if (a2[i] == 1)
    {
      uint64_t IsValid = VoiceProcessorImplementation::IsValid((uint64_t)v92);
      if (!IsValid) {
        goto LABEL_59;
      }
      uint64_t v93 = a2[1];
      if (!v93)
      {
LABEL_35:
        long long v89 = vp::log((vp *)IsValid);
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
          goto LABEL_58;
        }
        LOWORD(__p[0]) = 0;
        uint64_t v90 = "uplink configuration is not valid - 'EchoDSP' node configuration not found";
        goto LABEL_29;
      }
      uint64_t IsValid = (uint64_t)(a2 + 2);
      while (*(_DWORD *)IsValid != 2)
      {
        IsValid += 280;
        if (!--v93) {
          goto LABEL_35;
        }
      }
      uint64_t IsValid = VoiceProcessorImplementation::IsValid(IsValid);
      if (!IsValid) {
        goto LABEL_59;
      }
      uint64_t v94 = a2[1];
      if (!v94)
      {
LABEL_42:
        long long v89 = vp::log((vp *)IsValid);
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
          goto LABEL_58;
        }
        LOWORD(__p[0]) = 0;
        uint64_t v90 = "uplink configuration is not valid - 'DynamicsDSP' node configuration not found";
        goto LABEL_29;
      }
      uint64_t IsValid = (uint64_t)(a2 + 2);
      while (*(_DWORD *)IsValid != 3)
      {
        IsValid += 280;
        if (!--v94) {
          goto LABEL_42;
        }
      }
LABEL_44:
      uint64_t IsValid = VoiceProcessorImplementation::IsValid(IsValid);
      if ((IsValid & 1) == 0) {
        goto LABEL_59;
      }
      if (a2[229] >= 8)
      {
        long long v89 = vp::log((vp *)IsValid);
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
          goto LABEL_58;
        }
        LOWORD(__p[0]) = 0;
        uint64_t v90 = "uplink configuration is not valid - microphone trim gains count is out of bounds";
        goto LABEL_29;
      }
      if (a2[248] >= 8)
      {
        long long v89 = vp::log((vp *)IsValid);
        if (!os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
          goto LABEL_58;
        }
        LOWORD(__p[0]) = 0;
        uint64_t v90 = "uplink configuration is not valid - reference trim gains count is out of bounds";
        goto LABEL_29;
      }
      unsigned int v95 = a2[255];
      uint64_t v96 = vp::log((vp *)IsValid);
      long long v89 = v96;
      if (!v95)
      {
        if (!os_log_type_enabled(v96, OS_LOG_TYPE_ERROR)) {
          goto LABEL_58;
        }
        LOWORD(__p[0]) = 0;
        uint64_t v90 = "uplink configuration is not valid - client I/O block size can't be 0";
LABEL_29:
        _os_log_error_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_ERROR, v90, (uint8_t *)__p, 2u);
        goto LABEL_58;
      }
      if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_1BB0CE000, v89, OS_LOG_TYPE_INFO, "uplink configuration is valid!", (uint8_t *)__p, 2u);
      }

      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 192));
      if (*a2 == 1)
      {
        uint64_t v107 = util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 1);
        double v108 = (double *)util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 2);
        int v109 = util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 3);
        unsigned int v98 = v107[1];
        unsigned int v192 = v98;
        uint64_t v99 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v107, 0);
        uint64_t v100 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v107, 2);
        uint64_t v101 = util::get_output_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v109);
        int v102 = *((_DWORD *)v108 + 1);
        float v103 = v108[3];
      }
      else
      {
        if (*a2)
        {
          uint64_t v123 = _os_crash();
          __break(1u);
          goto LABEL_119;
        }
        unsigned int v97 = util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>((uint64_t)a2, 0);
        unsigned int v98 = a2[255];
        unsigned int v192 = v98;
        uint64_t v99 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v97, 0);
        uint64_t v100 = util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v97, 2);
        uint64_t v101 = util::get_output_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>((uint64_t)v97);
        int v102 = 0;
        float v103 = 0.0;
      }
      if (v99)
      {
        if (v100)
        {
          if (v101)
          {
            LODWORD(v151[0]) = a2[256];
            LODWORD(v155[0]) = 32792;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            unint64_t v110 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            if (!HIDWORD(v110))
            {
              unint64_t v105 = v110;
              if (v110) {
                goto LABEL_90;
              }
            }
            LODWORD(v151[0]) = a2[257];
            LODWORD(v155[0]) = 1718384242;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            unint64_t v111 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            if (!HIDWORD(v111))
            {
              unint64_t v105 = v111;
              if (v111) {
                goto LABEL_90;
              }
            }
            *(void *)&v155[0] = *((void *)a2 + 107);
            LODWORD(v153[0]) = 1986884466;
            __p[0] = v155;
            LODWORD(v151[0]) = 8;
            unint64_t v112 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v153, __p, (unsigned int *)v151);
            if (!HIDWORD(v112))
            {
              unint64_t v105 = v112;
              if (v112) {
                goto LABEL_90;
              }
            }
            LODWORD(v151[0]) = a2[216];
            LODWORD(v155[0]) = 1986881900;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            unint64_t v113 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            if (!HIDWORD(v113))
            {
              unint64_t v105 = v113;
              if (v113) {
                goto LABEL_90;
              }
            }
            LODWORD(v151[0]) = a2[217];
            LODWORD(v155[0]) = 1986881903;
            __p[0] = v151;
            LODWORD(v153[0]) = 4;
            unint64_t v114 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
            unint64_t v105 = v114 >= 0x100000000 ? 0x100000000 : v114;
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<double,(decltype(nullptr))0>((uint64_t)a1, 0x76727372u, *((double *)a2 + 116));
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x7672696Cu, a2[234]);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x7672696Fu, a2[235]);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x76726F6Cu, a2[236]);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x76726F6Fu, a2[237]);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x65706273u, v102);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<float,(decltype(nullptr))0>((uint64_t)a1, v103);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x8013u, a2[249]);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x74766374u, a2[250]);
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<double,(decltype(nullptr))0>((uint64_t)a1, 0x74766372u, *((double *)a2 + 126));
            if (v105) {
              goto LABEL_90;
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x8005u, a2[254]);
            if (v105) {
              goto LABEL_90;
            }
            unsigned int v115 = a2[229];
            if (v115)
            {
              LODWORD(v155[0]) = 32780;
              __p[0] = a2 + 221;
              LODWORD(v153[0]) = 4 * v115;
              unint64_t v116 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
              uint64_t v117 = 0x100000000;
              if (v116 < 0x100000000) {
                uint64_t v117 = v116;
              }
              unint64_t v105 = v117;
              if (v117) {
                goto LABEL_90;
              }
            }
            uint64_t v118 = (const void *)*((void *)a2 + 109);
            if (v118)
            {
              applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)__p, v118);
              unint64_t v105 = VoiceProcessorImplementation::SetProperty<applesauce::CF::DictionaryRef,(decltype(nullptr))0>((uint64_t)a1, 0x800Fu, (uint64_t)__p[0]);
              applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
              if (v105) {
                goto LABEL_90;
              }
            }
            unint64_t v105 = VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>((uint64_t)a1, 0x8014u, a2[220]);
            if (v105) {
              goto LABEL_90;
            }
            unsigned int v119 = a2[248];
            if (v119)
            {
              LODWORD(v155[0]) = 32781;
              __p[0] = a2 + 240;
              LODWORD(v153[0]) = 4 * v119;
              unint64_t v120 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>((uint64_t)a1, (unsigned int *)v155, __p, (unsigned int *)v153);
              uint64_t v121 = 0x100000000;
              if (v120 < 0x100000000) {
                uint64_t v121 = v120;
              }
              unint64_t v105 = v121;
              if (v121) {
                goto LABEL_90;
              }
            }
            uint64_t v122 = (const void *)*((void *)a2 + 119);
            if (v122)
            {
              applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)__p, v122);
              unint64_t v105 = VoiceProcessorImplementation::SetProperty<applesauce::CF::DictionaryRef,(decltype(nullptr))0>((uint64_t)a1, 0x8010u, (uint64_t)__p[0]);
              applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
              if (v105) {
                goto LABEL_90;
              }
            }
            LODWORD(v153[0]) = 0;
            LODWORD(v151[0]) = 1;
            __p[0] = a2 + 230;
            *(_DWORD *)uint64_t v148 = 0;
            int v190 = 1;
            *(void *)&v155[0] = a2 + 212;
            uint64_t v123 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)1,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*>((std::__shared_mutex_base *)a1);
            if ((v123 & 0xFF00000000) != 0)
            {
              long long v124 = *(_OWORD *)v101;
              long long v125 = *(_OWORD *)(v101 + 16);
              __p[4] = *(void **)(v101 + 32);
              *(_OWORD *)std::vector<unsigned int> __p = v124;
              *(_OWORD *)&__p[2] = v125;
              LODWORD(v155[0]) = 0;
              LODWORD(v153[0]) = 0;
              LODWORD(v151[0]) = 0;
              uint64_t v123 = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)2,CA::StreamDescription &,decltype(nullptr),unsigned int &,unsigned int &,unsigned int &>((uint64_t)a1, (uint64_t)__p, (uint64_t)v155, (uint64_t)v153, (uint64_t)v151);
              if ((v123 & 0xFF00000000) != 0)
              {
                if (*(double *)__p == *(double *)v101
                  && (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)&__p[1], *(int32x4_t *)(v101 + 8))), 0x1FuLL)), (int8x16_t)xmmword_1BB8723F0)) & 0xF) == 0&& LODWORD(__p[3]) == *(_DWORD *)(v101 + 24)&& *(void **)((char *)&__p[3] + 4) == *(void **)(v101 + 28))
                {
                  if (LODWORD(v153[0]) == 4)
                  {
                    int v126 = v155[0];
                    char v127 = (std::pmr *)memcpy(__p, a2, sizeof(__p));
                    char v158 = 0;
                    unsigned int v159 = v98;
                    uint64_t v160 = 0;
                    int v161 = v155[0];
                    long long v128 = *(_OWORD *)v99;
                    long long v129 = *(_OWORD *)(v99 + 16);
                    uint64_t v156 = *(void *)(v99 + 32);
                    v155[0] = v128;
                    v155[1] = v129;
                    uint64_t default_resource = std::pmr::get_default_resource(v127);
                    BOOL v131 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v155, 0, default_resource, &v162);
                    long long v132 = *(_OWORD *)v100;
                    long long v133 = *(_OWORD *)(v100 + 16);
                    uint64_t v154 = *(void *)(v100 + 32);
                    v153[0] = v132;
                    v153[1] = v133;
                    uint64_t v134 = std::pmr::get_default_resource(v131);
                    char v135 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v153, 0, v134, &v163);
                    long long v136 = *(_OWORD *)v101;
                    long long v137 = *(_OWORD *)(v101 + 16);
                    uint64_t v152 = *(void *)(v101 + 32);
                    v151[0] = v136;
                    v151[1] = v137;
                    uint64_t v138 = std::pmr::get_default_resource(v135);
                    long long v139 = (std::pmr *)vp::Audio_Buffer::create((uint64_t)v151, 0, v138, &v164);
                    long long v140 = *(_OWORD *)v101;
                    long long v141 = *(_OWORD *)(v101 + 16);
                    uint64_t v150 = *(void *)(v101 + 32);
                    *(_OWORD *)uint64_t v148 = v140;
                    long long v149 = v141;
                    uint64_t v142 = std::pmr::get_default_resource(v139);
                    vp::Audio_Buffer::create((uint64_t)v148, v126, v142, &v165);
                    int v166 = 0;
                    unsigned int v167 = v98;
                    int v168 = v126;
                    char v169 = 0;
                    std::__optional_destruct_base<VoiceProcessorImplementation::Uplink,false>::reset[abi:ne180100](a1 + 200);
                    std::construct_at[abi:ne180100]<VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink*>((uint64_t)(a1 + 200), (uint64_t)__p);
                    a1[1304] = 1;
                    VoiceProcessorImplementation::Uplink::~Uplink((VoiceProcessorImplementation::Uplink *)__p);
                    uint64_t v144 = vp::log(v143);
                    if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
                    {
                      LOWORD(__p[0]) = 0;
                      _os_log_impl(&dword_1BB0CE000, v144, OS_LOG_TYPE_INFO, "initialized uplink", (uint8_t *)__p, 2u);
                    }

                    unint64_t v105 = 0;
                    goto LABEL_90;
                  }
                  int v145 = vp::log((vp *)v123);
                  if (!os_log_type_enabled(v145, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_123;
                  }
                  *(_WORD *)uint64_t v148 = 0;
                  char v146 = "failed to initialize uplink - voice processor must output float data";
                }
                else
                {
                  int v145 = vp::log((vp *)v123);
                  if (!os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
                  {
LABEL_123:

                    unint64_t v105 = 1651270508;
                    goto LABEL_90;
                  }
                  *(_WORD *)uint64_t v148 = 0;
                  char v146 = "failed to initialize uplink - voice processor did not accept requested output format";
                }
                _os_log_error_impl(&dword_1BB0CE000, v145, OS_LOG_TYPE_ERROR, v146, v148, 2u);
                goto LABEL_123;
              }
            }
LABEL_119:
            unint64_t v105 = v123;
LABEL_90:
            caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 192));
            return v105;
          }
LABEL_94:
          _os_assert_log();
          _os_crash();
          __break(1u);
        }
      }
      else
      {
        _os_assert_log();
        _os_crash();
        __break(1u);
      }
      _os_assert_log();
      _os_crash();
      __break(1u);
      goto LABEL_94;
    }
  }
  long long v89 = vp::log(v92);
  if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    uint64_t v90 = "uplink configuration is not valid - 'HardwareDSP' node configuration not found";
    goto LABEL_29;
  }
LABEL_58:

LABEL_59:
  unsigned int v104 = vp::log((vp *)IsValid);
  if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_1BB0CE000, v104, OS_LOG_TYPE_ERROR, "failed to initialize uplink due to bad configuration", (uint8_t *)__p, 2u);
  }

  return 1650681447;
}

void sub_1BB72E3B0(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *util::get_node_configuration<VoiceProcessorUplinkConfiguration,VoiceProcessorUplinkNodeType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if (v2)
  {
    uint64_t result = (_DWORD *)(a1 + 8);
    while (*result != a2)
    {
      result += 70;
      if (!--v2) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = (_DWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t util::get_input_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    while (*(_DWORD *)(a1 + 12 + 4 * v3) != a2)
    {
      if (v2 == ++v3) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    a1 = _os_crash();
    __break(1u);
  }
  return a1 + 40 * v3 + 24;
}

uint64_t util::get_output_asbd<VoiceProcessorUplinkNodeConfiguration,VoiceProcessorUplinkTerminalType,util::required_tag>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 144);
  if (v1)
  {
    uint64_t v2 = 0;
    while (*(_DWORD *)(a1 + 148 + 4 * v2) != 3)
    {
      if (v1 == ++v2) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    a1 = _os_crash();
    __break(1u);
  }
  return a1 + 40 * v2 + 160;
}

unint64_t VoiceProcessorImplementation::SetProperty<unsigned int,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v7 = a2;
  uint64_t v6 = &v4;
  int v4 = a3;
  unsigned int v5 = 4;
  unint64_t result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v7, &v6, &v5);
  if (result >= 0x100000000) {
    return 0x100000000;
  }
  return result;
}

unint64_t VoiceProcessorImplementation::SetProperty<double,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, double a3)
{
  double v4 = a3;
  unsigned int v7 = a2;
  uint64_t v6 = &v4;
  unsigned int v5 = 8;
  unint64_t result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v7, &v6, &v5);
  if (result >= 0x100000000) {
    return 0x100000000;
  }
  return result;
}

unint64_t VoiceProcessorImplementation::SetProperty<float,(decltype(nullptr))0>(uint64_t a1, float a2)
{
  float v3 = a2;
  unsigned int v6 = 1701868402;
  unsigned int v5 = &v3;
  unsigned int v4 = 4;
  unint64_t result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v6, &v5, &v4);
  if (result >= 0x100000000) {
    return 0x100000000;
  }
  return result;
}

unint64_t VoiceProcessorImplementation::SetProperty<applesauce::CF::DictionaryRef,(decltype(nullptr))0>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a3;
  unsigned int v7 = a2;
  unsigned int v6 = &v4;
  unsigned int v5 = 8;
  unint64_t result = vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)7,unsigned int &,void const*&,unsigned int &>(a1, &v7, &v6, &v5);
  if (result >= 0x100000000) {
    return 0x100000000;
  }
  return result;
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)1,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*,AudioStreamBasicDescription const&,decltype(nullptr),unsigned int &,int,int,unsigned int const*>(std::__shared_mutex_base *a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  std::__shared_mutex_base::lock(a1);
  uint64_t v2 = (vp *)VoiceProcessorInterface::InitializeHWInput(a1[1].__mut_.__m_.__sig);
  int v3 = (int)v2;
  if (v2)
  {
    uint64_t v4 = vp::log(v2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v37);
      uint64_t v38 = v37;
      char v39 = 1;
      v40[0] = 5;
      v41[0] = v3;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v40);
      v41[1] = v40;
      char v42 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v19, (uint64_t)v37, 2, 1, 2);
      char v20 = v19;
      char v21 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v31, "call_name");
      unsigned __int8 v32 = v31;
      char v33 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v34, vp::call_traits<(vp::call_type)1>::name);
      long long v35 = v34;
      char v36 = 1;
      __CFString v22[2] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)v31, 2, 1, 2);
      char v23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v13);
      uint64_t v14 = v13;
      char v15 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[407],char [407],0>((uint64_t)v16);
      char v17 = v16;
      char v18 = 1;
      uint64_t v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v24, (uint64_t)v13, 2, 1, 2);
      char v26 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v27, (uint64_t)v19, 3, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v27, 4, 0x20u, 0, 0, __p);
      if (v12 >= 0) {
        unsigned int v6 = __p;
      }
      else {
        unsigned int v6 = (void **)__p[0];
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
      unsigned __int8 v30 = v6;
      _os_log_error_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
      for (uint64_t i = 0; i != -96; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[i]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v24[i + 8], v24[i]);
      }
      for (uint64_t j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v16[j + 8], v16[j]);
      }
      for (uint64_t k = 0; k != -64; k -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v34[k]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v34[k + 8], v34[k]);
      }
      for (uint64_t m = 0; m != -8; m -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v40[m * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v41[m], v40[m * 8]);
      }
    }
  }
  std::__shared_mutex_base::unlock(a1);
  return 0x1626C6300;
}

void sub_1BB72EBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int buf)
{
  if (a2)
  {
    char v42 = (vp *)__cxa_begin_catch(a1);
    uint64_t v43 = vp::log(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(v41 - 152, "call_name");
      *(void *)(v41 - 136) = v41 - 152;
      *(unsigned char *)(v41 - 128) = 1;
      *(void *)(v41 - 104) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(v41 - 120, vp::call_traits<(vp::call_type)1>::name);
      *(unsigned char *)(v41 - 96) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a28, v41 - 152, 2, 1, 2);
      a30 = &a28;
      a31 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(v41 - 216);
      *(void *)(v41 - 20std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v41 - 216;
      *(unsigned char *)(v41 - 192) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[407],char [407],0>(v41 - 184);
      *(void *)(v41 - 168) = v41 - 184;
      *(unsigned char *)(v41 - 16std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      a34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a32, v41 - 216, 2, 1, 2);
      a35 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a14, (uint64_t)&a28, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a14, 4, 0x20u, 0, 0, &__p);
      if (a22 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      AudioStreamBasicDescription buf = 136315138;
      *(void *)(v40 + 4) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v43, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)&buf, 0xCu);
      if (a22 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a14);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a28 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v41 - 216 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v41 - 152 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB72E910);
  }
  _Unwind_Resume(a1);
}

uint64_t vp::call_synchronizer<VoiceProcessorBase>::call<(vp::call_type)2,CA::StreamDescription &,decltype(nullptr),unsigned int &,unsigned int &,unsigned int &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  __int16 v10 = (vp *)(*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 168)
                                                                                            + 24))(*(void *)(a1 + 168), a2, 0, a3, a4, a5);
  int v11 = (int)v10;
  if (v10)
  {
    char v12 = vp::log(v10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v45);
      uint64_t v46 = v45;
      char v47 = 1;
      v48[0] = 5;
      v49[0] = v11;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
      v49[1] = v48;
      char v50 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v27, (uint64_t)v45, 2, 1, 2);
      unsigned __int8 v28 = v27;
      char v29 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v39, "call_name");
      uint64_t v40 = v39;
      char v41 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v42, &vp::call_traits<(vp::call_type)2>::name);
      uint64_t v43 = v42;
      char v44 = 1;
      void v30[2] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v39, 2, 1, 2);
      char v31 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v21);
      uint64_t v22 = v21;
      char v23 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[293],char [293],0>((uint64_t)v24);
      uint64_t v25 = v24;
      char v26 = 1;
      uint64_t v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v32, (uint64_t)v21, 2, 1, 2);
      char v34 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v27, 3, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v35, 4, 0x20u, 0, 0, __p);
      if (v20 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
      uint64_t v38 = v14;
      _os_log_error_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_ERROR, "legacy call failed: %s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35[0]);
      for (uint64_t i = 0; i != -96; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v32[i]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v32[i + 8], v32[i]);
      }
      for (uint64_t j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v24[j + 8], v24[j]);
      }
      for (uint64_t k = 0; k != -64; k -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v42[k]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v42[k + 8], v42[k]);
      }
      for (uint64_t m = 0; m != -8; m -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v48[m * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v49[m], v48[m * 8]);
      }
    }
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
  return 0x1626C6300;
}

void sub_1BB72F104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int buf)
{
  if (a2)
  {
    uint64_t v38 = (vp *)__cxa_begin_catch(a1);
    char v39 = vp::log(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(v37 - 136, "call_name");
      *(void *)(v37 - 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v37 - 136;
      *(unsigned char *)(v37 - 112) = 1;
      *(void *)(v37 - 88) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(v37 - 104, &vp::call_traits<(vp::call_type)2>::name);
      *(unsigned char *)(v37 - 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a24, v37 - 136, 2, 1, 2);
      a26 = &a24;
      a27 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(v37 - 200);
      *(void *)(v37 - 184) = v37 - 200;
      *(unsigned char *)(v37 - 176) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[293],char [293],0>(v37 - 168);
      *(void *)(v37 - 152) = v37 - 168;
      *(unsigned char *)(v37 - 144) = 1;
      a30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a28, v37 - 200, 2, 1, 2);
      a31 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, (uint64_t)&a24, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a18 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      AudioStreamBasicDescription buf = 136315138;
      *(void *)(v36 + 4) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)&buf, 0xCu);
      if (a18 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
      for (uint64_t i = 32; i != -32; i -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a24 + i));
      for (uint64_t j = 32; j != -32; j -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v37 - 200 + j));
      for (uint64_t k = 32; k != -32; k -= 32)
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v37 - 136 + k));
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB72EE54);
  }
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<VoiceProcessorImplementation::Uplink,false>::reset[abi:ne180100](unsigned char *a1)
{
  if (a1[1104])
  {
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1080));
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1072));
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1064));
    vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1056));
    a1[1104] = 0;
  }
}

uint64_t std::construct_at[abi:ne180100]<VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink,VoiceProcessorImplementation::Uplink*>(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x408uLL);
  int v4 = *(_DWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_DWORD *)(a1 + 1048) = v4;
  vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 1056), (uint64_t *)(a2 + 1056));
  vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 1064), (uint64_t *)(a2 + 1064));
  vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 1072), (uint64_t *)(a2 + 1072));
  vp::Audio_Buffer::Audio_Buffer((void *)(a1 + 1080), (uint64_t *)(a2 + 1080));
  uint64_t v5 = *(void *)(a2 + 1088);
  *(void *)(a1 + 1093) = *(void *)(a2 + 1093);
  *(void *)(a1 + 1088) = v5;
  return a1;
}

void VoiceProcessorImplementation::Uplink::~Uplink(VoiceProcessorImplementation::Uplink *this)
{
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[293],char [293],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::InitializeOutput, ArgTypeList = <CA::StreamDescription &, std::nullptr_t, unsigned int &, unsigned int &, unsigned int &>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB72F458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[407],char [407],0>(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = 3;
  uint64_t v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::InitializeHWInput, ArgTypeList = <const AudioStreamBasicDescription &, std::nullptr_t, unsigned int &, int, int, const unsigned int *, const AudioStreamBasicDescription &, std::nullptr_t, unsigned int &, int, int, const unsigned int *>]");
  *(void *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1BB72F4C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t VoiceProcessorInterface::InitializeHWInput(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
}

uint64_t VoiceProcessorImplementation::IsValid(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(_DWORD *)(a1 + 8) != 2)
      {
        char v13 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has wrong number of inputs");
        unsigned int v6 = vp::log(v13);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        p_p = &__p;
        if (v50 < 0) {
          p_p = __p;
        }
        goto LABEL_120;
      }
      char v2 = 0;
      uint64_t v3 = 0;
      while (1)
      {
        char v4 = v2;
        if (!*(_DWORD *)(a1 + 4 * v3 + 12)) {
          break;
        }
        char v2 = 1;
        uint64_t v3 = 1;
        if (v4)
        {
          uint64_t v5 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has no microphone input");
          unsigned int v6 = vp::log(v5);
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          p_p = &__p;
          if (v50 < 0) {
            p_p = __p;
          }
          goto LABEL_120;
        }
      }
      char v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = (double *)(a1 + 40 * v3 + 24);
      while (1)
      {
        char v20 = v17;
        if (*(_DWORD *)(a1 + 4 * v18 + 12) == 2) {
          break;
        }
        char v17 = 1;
        uint64_t v18 = 1;
        if (v20)
        {
          char v21 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has no reference input");
          unsigned int v6 = vp::log(v21);
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          p_p = &__p;
          if (v50 < 0) {
            p_p = __p;
          }
          goto LABEL_120;
        }
      }
      if (*v19 != *(double *)(a1 + 40 * v18 + 24))
      {
        char v31 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node microphone and reference input sample rates are not equal");
        unsigned int v6 = vp::log(v31);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        p_p = &__p;
        if (v50 < 0) {
          p_p = __p;
        }
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 144) == 1)
      {
        if (*(_DWORD *)(a1 + 148) == 3)
        {
          if (*v19 == *(double *)(a1 + 160)) {
            return 1;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node microphone input and uplink output sample rates are not equal");
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has no uplink output");
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'AllOfUplinkDSP' node has wrong number of outputs");
      }
      goto LABEL_139;
    case 1:
      if (*(_DWORD *)(a1 + 8) != 2)
      {
        uint64_t v14 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has wrong number of inputs");
        unsigned int v6 = vp::log(v14);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        p_p = &__p;
        if (v50 < 0) {
          p_p = __p;
        }
        goto LABEL_120;
      }
      char v7 = 0;
      uint64_t v8 = 0;
      while (1)
      {
        char v9 = v7;
        if (!*(_DWORD *)(a1 + 4 * v8 + 12)) {
          break;
        }
        char v7 = 1;
        uint64_t v8 = 1;
        if (v9)
        {
          __int16 v10 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no microphone input");
          unsigned int v6 = vp::log(v10);
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          p_p = &__p;
          if (v50 < 0) {
            p_p = __p;
          }
          goto LABEL_120;
        }
      }
      char v22 = 0;
      uint64_t v23 = 0;
      unsigned __int8 v24 = (void *)(a1 + 40 * v8 + 24);
      while (1)
      {
        char v25 = v22;
        if (*(_DWORD *)(a1 + 4 * v23 + 12) == 2) {
          break;
        }
        char v22 = 1;
        uint64_t v23 = 1;
        if (v25)
        {
          char v26 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no reference input");
          unsigned int v6 = vp::log(v26);
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          p_p = &__p;
          if (v50 < 0) {
            p_p = __p;
          }
          goto LABEL_120;
        }
      }
      uint64_t v32 = *(void *)(a1 + 40 * v23 + 24);
      *(void *)&long long buf = *v24;
      *((void *)&buf + 1) = v32;
      std::set<double>::set[abi:ne180100]((uint64_t **)&__p, (double *)&buf, 2);
      uint64_t v33 = v50;
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v49);
      if (v33 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node input sample rates are not equal");
        goto LABEL_139;
      }
      if (*(_DWORD *)(a1 + 144) != 3)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has wrong number of outputs");
        goto LABEL_139;
      }
      uint64_t v34 = 0;
      while (*(_DWORD *)(a1 + 148 + 4 * v34))
      {
        if (++v34 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no microphone output");
          goto LABEL_139;
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = (void *)(a1 + 40 * v34 + 160);
      while (*(_DWORD *)(a1 + 148 + 4 * v42) != 2)
      {
        if (++v42 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no microphone clip data output");
          goto LABEL_139;
        }
      }
      uint64_t v44 = 0;
      uint64_t v45 = (uint64_t *)(a1 + 40 * v42 + 160);
      while (*(_DWORD *)(a1 + 148 + 4 * v44) != 2)
      {
        if (++v44 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node has no reference output");
          goto LABEL_139;
        }
      }
      uint64_t v46 = *v45;
      *(void *)&long long buf = *v43;
      *((void *)&buf + 1) = v46;
      uint64_t v52 = *(void *)(a1 + 40 * v44 + 160);
      std::set<double>::set[abi:ne180100]((uint64_t **)&__p, (double *)&buf, 3);
      uint64_t v47 = v50;
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v49);
      if (v47 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node output sample rates are not equal");
        goto LABEL_139;
      }
      if (*(double *)v24 != *(double *)v43)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node I/O sample rates are not equal");
        goto LABEL_139;
      }
      if (!*(_DWORD *)(a1 + 4))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'HardwareDSP' node doesn't support variable I/O block size");
        goto LABEL_139;
      }
      return 1;
    case 2:
      if (*(_DWORD *)(a1 + 8) != 3)
      {
        char v15 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has wrong number of inputs");
        unsigned int v6 = vp::log(v15);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        p_p = &__p;
        if (v50 < 0) {
          p_p = __p;
        }
        goto LABEL_120;
      }
      uint64_t v11 = 0;
      while (*(_DWORD *)(a1 + 12 + 4 * v11))
      {
        if (++v11 == 3)
        {
          char v12 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no microphone input");
          unsigned int v6 = vp::log(v12);
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          p_p = &__p;
          if (v50 < 0) {
            p_p = __p;
          }
          goto LABEL_120;
        }
      }
      uint64_t v27 = 0;
      unsigned __int8 v28 = (void *)(a1 + 40 * v11 + 24);
      break;
    case 3:
      if (*(_DWORD *)(a1 + 8) != 1)
      {
        unsigned __int8 v16 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has wrong number of inputs");
        unsigned int v6 = vp::log(v16);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        p_p = &__p;
        if (v50 < 0) {
          p_p = __p;
        }
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 12) != 3)
      {
        unsigned __int8 v30 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has no voice data input");
        unsigned int v6 = vp::log(v30);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        p_p = &__p;
        if (v50 < 0) {
          p_p = __p;
        }
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 144) != 1)
      {
        uint64_t v37 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has wrong number of outputs");
        unsigned int v6 = vp::log(v37);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        p_p = &__p;
        if (v50 < 0) {
          p_p = __p;
        }
        goto LABEL_120;
      }
      if (*(_DWORD *)(a1 + 148) == 3)
      {
        if (*(double *)(a1 + 24) == *(double *)(a1 + 160))
        {
          if (*(_DWORD *)(a1 + 4)) {
            return 1;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node doesn't support variable I/O block size");
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node I/O sample rates are not equal");
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "'DynamicsDSP' node has no voice data output");
      }
LABEL_139:
      VoiceProcessorImplementation::IsValid(VoiceProcessorUplinkNodeConfiguration const&)const::{lambda(std::string const&)#1}::operator()((char *)&__p);
      goto LABEL_140;
    default:
      return 0;
  }
  while (*(_DWORD *)(a1 + 12 + 4 * v27) != 1)
  {
    if (++v27 == 3)
    {
      char v29 = (vp *)std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no microphone clip data input");
      unsigned int v6 = vp::log(v29);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_65;
      }
      p_p = &__p;
      if (v50 < 0) {
        p_p = __p;
      }
LABEL_120:
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_ERROR, "uplink configuration is not valid - %s", (uint8_t *)&buf, 0xCu);
LABEL_65:

LABEL_140:
      if (SHIBYTE(v50) < 0) {
        operator delete(__p);
      }
      return 0;
    }
  }
  uint64_t v35 = 0;
  uint64_t v36 = (uint64_t *)(a1 + 40 * v27 + 24);
  while (*(_DWORD *)(a1 + 12 + 4 * v35) != 2)
  {
    if (++v35 == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no reference input");
      goto LABEL_139;
    }
  }
  uint64_t v38 = *v36;
  *(void *)&long long buf = *v28;
  *((void *)&buf + 1) = v38;
  uint64_t v52 = *(void *)(a1 + 40 * v35 + 24);
  std::set<double>::set[abi:ne180100]((uint64_t **)&__p, (double *)&buf, 3);
  uint64_t v39 = v50;
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v49);
  if (v39 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node input sample rates are not equal");
    goto LABEL_139;
  }
  if (*(_DWORD *)(a1 + 144) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has wrong number of outputs");
    goto LABEL_139;
  }
  if (*(_DWORD *)(a1 + 148) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node has no voice data output");
    goto LABEL_139;
  }
  if (*(double *)v28 != *(double *)(a1 + 160))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node I/O sample rates are not equal");
    goto LABEL_139;
  }
  if (!*(_DWORD *)(a1 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "'EchoDSP' node doesn't support variable I/O block size");
    goto LABEL_139;
  }
  return 1;
}

void sub_1BB7300E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void VoiceProcessorImplementation::IsValid(VoiceProcessorUplinkNodeConfiguration const&)const::{lambda(std::string const&)#1}::operator()(char *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  char v2 = vp::log((vp *)a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = *(char **)a1;
    }
    int v4 = 136315138;
    uint64_t v5 = v3;
    _os_log_error_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_ERROR, "uplink configuration is not valid - %s", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t **std::set<double>::set[abi:ne180100](uint64_t **a1, double *a2, uint64_t a3)
{
  a1[1] = 0;
  int v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    char v7 = &a2[a3];
    uint64_t v8 = a1 + 1;
    while (1)
    {
      char v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      __int16 v10 = v6;
      uint64_t v11 = v4;
      if (v6)
      {
        do
        {
          char v9 = v10;
          __int16 v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          char v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      double v13 = *v5;
      if (*((double *)v9 + 4) < *v5)
      {
LABEL_9:
        uint64_t v14 = (uint64_t **)(v6 ? v9 : v4);
        char v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        uint64_t v14 = (uint64_t **)v4;
        char v15 = (uint64_t **)v4;
        if (v6)
        {
          char v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v6;
              double v18 = *((double *)v6 + 4);
              if (v13 >= v18) {
                break;
              }
              uint64_t v6 = (uint64_t *)*v6;
              char v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            char v15 = (uint64_t **)(v6 + 1);
            uint64_t v6 = (uint64_t *)v6[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        unsigned __int8 v16 = (uint64_t *)operator new(0x28uLL);
        v16[4] = *(void *)v5;
        *unsigned __int8 v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *char v15 = v16;
        char v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          unsigned __int8 v16 = *v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      if (++v5 == v7) {
        break;
      }
      uint64_t v8 = (uint64_t **)*a1;
      uint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_1BB73031C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,util::view<VoiceProcessorUplinkTerminalType>>(uint64_t a1, unsigned int *a2)
{
  if (*a2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *((void *)a2 + 1);
      uint64_t v8 = 0;
      uint64_t v6 = (uint64_t *)*(unsigned int *)(v5 + 4 * v4);
      v7[0] = 5;
      uint64_t v8 = v6;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a1, (uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      ++v4;
    }
    while (v4 < *a2);
  }
}

uint64_t VoiceProcessor_GetVersion(uint64_t a1, _DWORD *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2)
    {
      *a2 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 112))(*(void *)(a1 + 168));
      return ErrorFromOSStatus(0);
    }
    else
    {
      return 1650553447;
    }
  }
  else
  {
    uint64_t v3 = vp::log(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_FAULT, "failed to get version due to bad reference", buf, 2u);
    }

    return 1651664230;
  }
}

void sub_1BB730518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,__int16 *a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,__int16 *a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2)
  {
    uint64_t v40 = (vp *)__cxa_begin_catch(exception_object);
    char v41 = vp::log(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)&a30, "call_name");
      a34 = &a30;
      a35 = 1;
      a38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&a36, vp::call_traits<(vp::call_type)0>::name);
      a39 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v39 - 144, (uint64_t)&a30, 2, 1, 2);
      *(void *)(v39 - 128) = v39 - 144;
      *(unsigned char *)(v39 - 12std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)&a18);
      a20 = &a18;
      a21 = 1;
      a26 = 0;
      LOBYTE(a23) = 3;
      uint64_t v42 = operator new(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v42, "expected_call_result_t<CallType, T, ArgTypeList...> vp::call_synchronizer<VoiceProcessorBase>::call(ArgTypeList &&...) [T = VoiceProcessorBase, CallType = vp::call_type::GetVersion, ArgTypeList = <>]");
      a26 = v42;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23);
      a27 = &a23;
      a28 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v39 - 112, (uint64_t)&a18, 2, 1, 2);
      *(void *)(v39 - 96) = v39 - 112;
      *(unsigned char *)(v39 - 88) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a10, v39 - 144, 2, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&a10, 4, 0x20u, 0, 0, &__p);
      if (a17 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)(v39 - 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 136315138;
      *(void *)(v39 - 76) = p_p;
      _os_log_error_impl(&dword_1BB0CE000, v41, OS_LOG_TYPE_ERROR, "legacy call failed due to unknown exception: %s", (uint8_t *)(v39 - 80), 0xCu);
      if (a17 < 0) {
        operator delete(__p);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a10);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a11, a10);
      uint64_t v44 = 0;
      uint64_t v45 = v39 - 144;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v45 + v44 + 32);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v45 + v44 + 40), *(unsigned __int8 *)(v45 + v44 + 32));
        v44 -= 32;
      }
      while (v44 != -64);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23 + i * 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&a26)[i], *((unsigned __int8 *)&a23 + i * 8));
      }
      for (uint64_t j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a36 + j);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a37 + j), *((unsigned __int8 *)&a36 + j));
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1BB730448);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VoiceProcessor_Destroy(uint64_t a1)
{
  char v2 = vp::log((vp *)a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_DEFAULT, "destroying", buf, 2u);
  }

  if (a1)
  {
    if (*(unsigned char *)(a1 + 2320))
    {
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2288));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2280));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2272));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2264));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2256));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 2248));
    }
    if (*(unsigned char *)(a1 + 1304))
    {
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1280));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1272));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1264));
      vp::Audio_Buffer::~Audio_Buffer((vp::Audio_Buffer *)(a1 + 1256));
    }
    MEMORY[0x1C185C240](a1 + 176);
    uint64_t v4 = *(void *)(a1 + 168);
    *(void *)(a1 + 168) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
    std::mutex::~mutex((std::mutex *)a1);
    uint64_t v5 = (vp *)MEMORY[0x1C185D370]();
    uint64_t v6 = vp::log(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v9 = 0;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "destroyed", v9, 2u);
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1651664230;
    uint64_t v6 = vp::log(v3);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int16 v10 = 0;
      _os_log_fault_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_FAULT, "failed to destroy voice processor due to bad reference", v10, 2u);
    }
  }

  return v7;
}

uint64_t VoiceProcessor_Create(vp *a1, uint64_t a2)
{
  uint64_t v4 = vp::log(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BB0CE000, v4, OS_LOG_TYPE_DEFAULT, "creating", buf, 2u);
  }

  if (!a1)
  {
    char v9 = vp::log(v5);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    __int16 v10 = "VoiceProcessor_Create BadArgument (outVoiceProcessor)";
LABEL_81:
    _os_log_error_impl(&dword_1BB0CE000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
    goto LABEL_12;
  }
  if (a2)
  {
    *(_DWORD *)long long buf = 0;
    CFTypeRef v28 = 0;
    __int16 v29 = 256;
    std::__fs::filesystem::path::path[abi:ne180100]<char [23],void>(&v30, "/Library/Audio/Tunings");
    memset(&v31, 0, sizeof(v31));
    std::string::append[abi:ne180100]<char const*,0>(&v31, "/tmp/AudioCapture/VP/", "");
    std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>(&v32, "/usr/local/lib/");
    __int16 v33 = 256;
    uint64_t v6 = (PlatformUtilities_iOS *)std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
    char v35 = 0;
    char v36 = 0;
    LOBYTE(v37) = 0;
    char v38 = 0;
    int v39 = -1;
    LOBYTE(v4std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 0;
    char v41 = 0;
    char v42 = 0;
    char v43 = 0;
    char v44 = 0;
    char v45 = 0;
    CFTypeRef cf = 0;
    char v47 = 0;
    CFStringRef v7 = *(const __CFString **)a2;
    if (*(void *)a2)
    {
      CFRetain(*(CFTypeRef *)a2);
      CFTypeID v8 = CFGetTypeID(v7);
      if (v8 == CFStringGetTypeID())
      {
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v25 = __p;
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v48, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
        }
        else {
          std::string v48 = v25;
        }
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v7))
        {
          applesauce::CF::details::CFString_get_value<false>((uint64_t)&v26, v7);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v26 = v48;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v26;
        *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
        v26.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        CFRelease(v7);
      }
      else
      {
        v24.__r_.__value_.__r.__words[0] = 0;
        CFRelease(v7);
      }
    }
    if (*(_DWORD *)(a2 + 12))
    {
      int v40 = *(_DWORD *)(a2 + 12);
      char v41 = 1;
    }
    CFStringRef v12 = *(const __CFString **)(a2 + 16);
    if (v12)
    {
      CFRetain(*(CFTypeRef *)(a2 + 16));
      CFTypeID v13 = CFGetTypeID(v12);
      if (v13 == CFStringGetTypeID())
      {
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v24, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
        }
        else {
          std::string v24 = v31;
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v48, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
        }
        else {
          std::string v48 = v24;
        }
        CFTypeID v14 = CFStringGetTypeID();
        if (v14 == CFGetTypeID(v12))
        {
          applesauce::CF::details::CFString_get_value<false>((uint64_t)&v26, v12);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v26 = v48;
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        std::string v31 = v26;
        *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
        v26.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        CFRelease(v12);
      }
      else
      {
        v22.__r_.__value_.__r.__words[0] = 0;
        CFRelease(v12);
      }
    }
    CFStringRef v15 = *(const __CFString **)(a2 + 24);
    if (v15)
    {
      CFRetain(v15);
      CFTypeID v16 = CFGetTypeID(v15);
      if (v16 == CFStringGetTypeID())
      {
        CFStringRef v23 = v15;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v22, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
        }
        else {
          std::string v22 = v30;
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v48, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        }
        else {
          std::string v48 = v22;
        }
        CFTypeID v17 = CFStringGetTypeID();
        if (v17 == CFGetTypeID(v15))
        {
          applesauce::CF::details::CFString_get_value<false>((uint64_t)&v26, v15);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v26 = v48;
        }
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        std::string v30 = v26;
        *((unsigned char *)&v26.__r_.__value_.__s + 23) = 0;
        v26.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        CFRelease(v15);
      }
      else
      {
        CFStringRef v23 = 0;
        CFRelease(v15);
      }
    }
    int ProductType = PlatformUtilities_iOS::GetProductType(v6);
    if (!v38) {
      char v38 = 1;
    }
    int v37 = ProductType;
    uint64_t v19 = (void (**)(void *, uint64_t, uint8_t *))gVoiceProcessorBaseFactory;
    VoiceProcessorVersiounint64_t n = GetVoiceProcessorVersion((const vp::Context *)buf, 0, 0, 0, 0);
    v19[2](v19, VoiceProcessorVersion, buf);
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (v28) {
      CFRelease(v28);
    }
    operator new();
  }
  char v9 = vp::log(v5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    __int16 v10 = "VoiceProcessor_Create BadArgument (inConfiguration)";
    goto LABEL_81;
  }
LABEL_12:

  return 1650553447;
}

void sub_1BB730FDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__int16 buf,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  applesauce::CF::StringRef::~StringRef(&a12);
  vp::Context::~Context((vp::Context *)&buf);
  std::string v48 = (vp *)__cxa_begin_catch(a1);
  uint64_t v49 = vp::log(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
  {
    long long buf = 0;
    _os_log_fault_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_FAULT, "failed to create voice processor due to unknown exception", (uint8_t *)&buf, 2u);
  }

  __cxa_end_catch();
  JUMPOUT(0x1BB730F7CLL);
}

void clsp::CLSP_Log::getLogDirectory(std::__fs::filesystem::path *this)
{
  char v2 = getenv("TMPDIR");
  memset(&v6, 0, sizeof(v6));
  uint64_t v3 = v2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(&v6, v2, v3);
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, "CLSPLogs/", "");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v6, this);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1BB7311FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void CLSP_Log_FlushBuffer(FILE **a1)
{
  uint64_t v3 = a1[4];
  char v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*a1)
  {
    uint64_t v4 = a1[6];
    unint64_t v5 = ((char *)a1[7] - (char *)v4) >> 2;
    while (1)
    {
      uint64_t size = v3->_bf._size;
      int v7 = HIDWORD(v3->_bf._base) - size;
      int v8 = v7;
      if (v7 < 0) {
        int v8 = LODWORD(v3->_bf._base) + v7;
      }
      if (!v8) {
        break;
      }
      int base = (int)v3->_bf._base;
      size_t v10 = v7 + (base & (v7 >> 31));
      if (v10 >= v5) {
        size_t v11 = v5;
      }
      else {
        size_t v11 = v10;
      }
      size_t v12 = (4 * v11);
      size_t v13 = (base - size);
      if (v11 <= v13)
      {
        p = &v3->_p[4 * size];
        CFStringRef v15 = (char *)v4;
      }
      else
      {
        size_t v14 = v12 - 4 * v13;
        memcpy(v4, &v3->_p[4 * size], 4 * v13);
        CFStringRef v15 = (char *)v4 + 4 * v13;
        p = v3->_p;
        size_t v12 = v14;
      }
      memcpy(v15, p, v12);
      int v17 = *(&v3->_bf._size + 1) - v11;
      v3->_bf._uint64_t size = (v11 + v3->_bf._size) % LODWORD(v3->_bf._base);
      *(&v3->_bf._size + 1) = v17;
      fwrite(v4, v11, 4uLL, *a1);
    }
    fflush(*a1);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BB731380(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void CLSP_LogQueueFinalizer(FILE **a1)
{
  CLSP_Log_FlushBuffer(a1);
  if (*a1)
  {
    fclose(*a1);
    *a1 = 0;
  }
  DspLib::LogContext::~LogContext((DspLib::LogContext *)a1);

  JUMPOUT(0x1C185D370);
}

void clsp::CLSP_Log::CLSP_Log(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = xmmword_1BB87BEE0;
  *(void *)(a1 + 16) = 0;
  std::string v6 = operator new(0x40uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = &unk_1F14C15B0;
  int v7 = std::vector<float>::vector(v6 + 3, 0x20000uLL);
  v6[7] = 0;
  v6[6] = 0x20000;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  clsp::CLSP_Log::getLogDirectory(&__p);
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)p_p, &v16) == -1)
  {
    if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v9 = &__p;
    }
    else {
      char v9 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
    }
    mkdir((const char *)v9, 0x1FFu);
  }
  CFStringRef v10 = (const __CFString *)MGGetStringAnswer();
  CStringPtr = CFStringGetCStringPtr(v10, 0x8000100u);
  size_t v12 = "";
  if (CStringPtr) {
    size_t v12 = CStringPtr;
  }
  size_t v13 = &__p;
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v13 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  }
  unsigned int v14 = llround(*(double *)(a3 + 8));
  if (*(char *)(a2 + 23) >= 0) {
    CFStringRef v15 = (const char *)a2;
  }
  else {
    CFStringRef v15 = *(const char **)a2;
  }
  snprintf(__str, 0x200uLL, "%s%s_%04d%02d%02d_%02d%02d%02d_%s", (const char *)v13, v12, *(_DWORD *)a3, *(char *)(a3 + 4), *(char *)(a3 + 5), *(char *)(a3 + 6), *(char *)(a3 + 7), v14, v15);
  operator new();
}

void sub_1BB7316D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,DspLib::LogContext *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<clsp::CLSPLogContext>::reset[abi:ne180100](&a25);
  if (a49 < 0) {
    operator delete(a44);
  }
  uint64_t v51 = *(std::__shared_weak_count **)(v49 + 32);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  _Unwind_Resume(a1);
}

DspLib::LogContext *std::unique_ptr<clsp::CLSPLogContext>::reset[abi:ne180100](DspLib::LogContext **a1)
{
  unint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    DspLib::LogContext::~LogContext(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::__shared_ptr_emplace<clsp::CircularBuffer<float>>::__on_zero_shared(uint64_t a1)
{
  char v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<clsp::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C15B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<clsp::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14C15B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void clsp::CLSP_Log::CLSP_Log(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CFTimeZoneCopySystem();
  uint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v4);
  uint64_t v7 = v6;
  CFRelease(v4);
  v8[0] = CurrentGregorianDate;
  v8[1] = v7;
  clsp::CLSP_Log::CLSP_Log(a1, a2, (uint64_t)v8);
}

void clsp::CLSP_Log::FlushLog(clsp::CLSP_Log *this)
{
  if (*((void *)this + 2))
  {
    char v2 = *((void *)this + 5);
    context = dispatch_get_context(v2);
    dispatch_async_f(v2, context, (dispatch_function_t)CLSP_Log_FlushBuffer);
    *((void *)this + 2) = 0;
  }
}

void clsp::CLSP_Log::~CLSP_Log(dispatch_object_t *this)
{
  clsp::CLSP_Log::FlushLog((clsp::CLSP_Log *)this);
  dispatch_release(this[5]);
  char v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void clsp::CLSP_Log::LogCLSPData(clsp::CLSP_Log *this, const float *__src, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = *((void *)this + 3);
  unsigned int v8 = *(_DWORD *)(v7 + 28);
  if ((unint64_t)a3
     + (int)((*(_DWORD *)(v7 + 24) & ((int)(v8 - *(_DWORD *)(v7 + 32)) >> 31)) + v8 - *(_DWORD *)(v7 + 32)) >= *(unsigned int *)(v7 + 24))
  {
    do
    {
      dispatch_sync(*((dispatch_queue_t *)this + 5), &__block_literal_global_30384);
      uint64_t v7 = *((void *)this + 3);
      unsigned int v8 = *(_DWORD *)(v7 + 28);
      unint64_t v9 = *(unsigned int *)(v7 + 24);
    }
    while (v6 + (int)((v9 & ((int)(v8 - *(_DWORD *)(v7 + 32)) >> 31)) + v8 - *(_DWORD *)(v7 + 32)) >= v9);
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(v7 + 24);
  }
  size_t v10 = (4 * a3);
  int v11 = v9 - v8;
  if (v9 - v8 >= a3)
  {
    size_t v13 = (void *)(*(void *)v7 + 4 * v8);
    unsigned int v14 = __src;
  }
  else
  {
    size_t v12 = (v10 - 4 * v11);
    memcpy((void *)(*(void *)v7 + 4 * v8), __src, (4 * v11));
    size_t v13 = *(void **)v7;
    unsigned int v14 = &__src[v11];
    size_t v10 = v12;
  }
  memcpy(v13, v14, v10);
  *(_DWORD *)(v7 + 36) += a3;
  *(_DWORD *)(v7 + 28) = (*(_DWORD *)(v7 + 28) + a3) % *(_DWORD *)(v7 + 24);
  unint64_t v15 = *((void *)this + 1);
  unint64_t v16 = *((void *)this + 2) + a3;
  *((void *)this + 2) = v16;
  if (v16 >= v15)
  {
    clsp::CLSP_Log::FlushLog(this);
  }
}

void clsp::CLSP_Log::printToSyslog(clsp::CLSP_Log *this, const char *a2, const char *a3, ...)
{
  va_start(va, a3);
  if (this)
  {
    va_copy(v9, va);
    clsp::CLSP_Log::SyslogMsgBuffer((clsp::CLSP_Log *)&v8);
    uint64_t v4 = *(char **)v8.__r_.__value_.__l.__data_;
    if (v8.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8.__r_.__value_.__l.__size_);
    }
    if (a2)
    {
      clsp::CLSP_Log::SyslogMsgBuffer((clsp::CLSP_Log *)&v8);
      vsnprintf(v4, *(void *)(v8.__r_.__value_.__r.__words[0] + 8) - *(void *)v8.__r_.__value_.__l.__data_, a2, v9);
      if (v8.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8.__r_.__value_.__l.__size_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v8, v4);
      if (clsp::CLSP_Log::SyslogQueue(void)::once != -1) {
        dispatch_once(&clsp::CLSP_Log::SyslogQueue(void)::once, &__block_literal_global_20_30390);
      }
      unint64_t v5 = clsp::CLSP_Log::SyslogQueue(void)::gLogQueue;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN4clsp8CLSP_Log13printToSyslogEiPKcz_block_invoke;
      block[3] = &__block_descriptor_tmp_11_30391;
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v8;
      }
      dispatch_async(v5, block);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v8.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BB731BC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void clsp::CLSP_Log::SyslogMsgBuffer(clsp::CLSP_Log *this)
{
  {
    std::allocate_shared[abi:ne180100]<std::vector<char>,std::allocator<std::vector<char>>,clsp::CLSP_Log::CLSP_Log_Constants,void>(0x400u);
    __cxa_atexit((void (*)(void *))std::shared_ptr<std::vector<char>>::~shared_ptr[abi:ne180100], &clsp::CLSP_Log::SyslogMsgBuffer(void)::gMsgBuffer, &dword_1BB0CE000);
  }
  uint64_t v2 = *(void *)algn_1E9F80248;
  *(void *)this = clsp::CLSP_Log::SyslogMsgBuffer(void)::gMsgBuffer;
  *((void *)this + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1BB731C80(_Unwind_Exception *a1)
{
}

uint64_t ___ZN4clsp8CLSP_Log13printToSyslogEiPKcz_block_invoke()
{
  return CFLog();
}

dispatch_queue_t ___ZN4clsp8CLSP_Log11SyslogQueueEv_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coreaudio.syslog", 0);
  clsp::CLSP_Log::SyslogQueue(void)::gLogQueue = (uint64_t)result;
  return result;
}

std::vector<char> *std::allocate_shared[abi:ne180100]<std::vector<char>,std::allocator<std::vector<char>>,clsp::CLSP_Log::CLSP_Log_Constants,void>(unsigned int a1)
{
  uint64_t v2 = (std::vector<char> *)operator new(0x30uLL);
  v2->__end_ = 0;
  v2->__end_cap_.__value_ = 0;
  v2->__begin_ = (std::vector<char>::pointer)&unk_1F14A69D8;
  dispatch_queue_t result = std::vector<char>::vector(v2 + 1, a1);
  clsp::CLSP_Log::SyslogMsgBuffer(void)::gMsgBuffer = (uint64_t)result;
  *(void *)algn_1E9F80248 = v2;
  return result;
}

void sub_1BB731D64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t spp3Subsystem(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&spp3Subsystem(void)::onceflag, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&spp3Subsystem(void)::onceflag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<spp3Subsystem(void)::$_0 &&>>);
  }
  return spp3Subsystem(void)::scope;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<spp3Subsystem(void)::$_0 &&>>()
{
}

uint64_t spp3SubsystemAsync(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&spp3SubsystemAsync(void)::onceflag, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&spp3SubsystemAsync(void)::onceflag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<spp3SubsystemAsync(void)::$_0 &&>>);
  }
  return spp3SubsystemAsync(void)::scope;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<spp3SubsystemAsync(void)::$_0 &&>>()
{
}

uint64_t shouldTraceRender(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&shouldTraceRender(void)::onceflag, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&shouldTraceRender(void)::onceflag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<shouldTraceRender(void)::$_0 &&>>);
  }
  return shouldTraceRender(void)::traceRender;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<shouldTraceRender(void)::$_0 &&>>()
{
  v1[4] = *MEMORY[0x1E4F143B8];
  v1[0] = &unk_1F14C15E8;
  _DWORD v1[3] = v1;
  CASmartPreferences::AddHandler<BOOL>((CASmartPreferences *)@"clsp_trace_iothread", @"com.apple.coreaudio", (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v1);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v1);
}

void sub_1BB732010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, char *a2)
{
  shouldTraceRender(void)::traceRender = *a2;
}

void std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14C15E8;
}

void *std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone()
{
  dispatch_queue_t result = operator new(0x10uLL);
  *dispatch_queue_t result = &unk_1F14C15E8;
  return result;
}

void std::__function::__func<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<shouldTraceRender(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
}

void VoiceProcessorV2::LoopBackInitialize(VoiceProcessorV2 *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (char *)this + 15808;
  if (!*((unsigned char *)this + 15808) || !*((unsigned char *)this + 476) || !*((unsigned char *)this + 477)) {
    return;
  }
  double v7 = *((double *)this + 41);
  double v8 = *((double *)this + 118);
  if (v7 == v8)
  {
    uint64_t v13 = *((void *)this + 1977);
    *((void *)this + 1977) = 0;
    if (v13) {
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    }
    int v12 = 2 * *((_DWORD *)this + 131);
    if (*((_DWORD *)this + 89) == *((_DWORD *)this + 243))
    {
      *((_DWORD *)this + 3956) = 0;
      unsigned int v14 = (AudioBufferList **)((char *)this + 15832);
      goto LABEL_14;
    }
  }
  else
  {
    VoiceProcessorV2::CreateSRC((VoiceProcessorV2 *)buf, v8, v7, this, 1, a4, a5);
    uint64_t v10 = *((void *)this + 1977);
    *((void *)this + 1977) = *(void *)buf;
    if (v10) {
      std::default_delete<VoiceProcessor::SampleRateConverter>::operator()[abi:ne180100]();
    }
    LODWORD(v9) = *((_DWORD *)this + 131);
    double v11 = ceil(*((double *)this + 41) * (double)v9 / *((double *)this + 118));
    int v12 = (v11 + v11);
  }
  *((_DWORD *)this + 3956) = v12;
  unsigned int v14 = (AudioBufferList **)((char *)this + 15832);
  if (v12)
  {
    myAllocABLDynamic((const AudioStreamBasicDescription *)((char *)this + 328), v12, v14);
    goto LABEL_15;
  }
LABEL_14:
  myFreeABLDynamic(v14);
LABEL_15:
  int v15 = *((_DWORD *)this + 89);
  *((_DWORD *)this + 396std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = v12;
  *((_DWORD *)this + 3961) = v15;
  *((_DWORD *)this + 3964) = 0;
  *((void *)this + 1981) = 0;
  unint64_t v16 = (void *)*((void *)this + 1983);
  uint64_t v17 = *((void *)this + 1984) - (void)v16;
  unint64_t v18 = (v15 * v12);
  if (v18 == v17 >> 2)
  {
    if (v17 >= 1)
    {
      unint64_t v19 = (unint64_t)v17 >> 2;
      uint64_t v20 = ((unint64_t)v17 >> 2) + 1;
      bzero(*((void **)this + 1983), 4 * (v20 - ((unint64_t)v17 > 3)));
LABEL_20:
      bzero(v16, 4 * (v20 - (v19 != 0)));
    }
  }
  else
  {
    std::valarray<float>::resize((uint64_t)this + 15864, v18, 0.0);
    unint64_t v16 = (void *)*((void *)this + 1983);
    uint64_t v21 = *((void *)this + 1984) - (void)v16;
    if (v21 >= 1)
    {
      unint64_t v19 = (unint64_t)v21 >> 2;
      uint64_t v20 = ((unint64_t)v21 >> 2) + 1;
      goto LABEL_20;
    }
  }
  *((_DWORD *)this + 3962) = 0;
  *((_DWORD *)this + 3964) = 0;
  if (VPLogScope(void)::once != -1) {
    dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
  }
  std::string v22 = (void *)VPLogScope(void)::scope;
  if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
  {
    CFStringRef v23 = (*v22 ? *v22 : MEMORY[0x1E4F14500]);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      std::string v24 = "ON";
      int v25 = *((_DWORD *)this + 243);
      if (!*((void *)this + 1977)) {
        std::string v24 = "OFF";
      }
      int v26 = *((_DWORD *)this + 89);
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = "vpDebug_Loopback.cpp";
      __int16 v30 = 1024;
      int v31 = 50;
      __int16 v32 = 2080;
      __int16 v33 = v24;
      __int16 v34 = 1024;
      int v35 = v25;
      __int16 v36 = 1024;
      int v37 = v26;
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loopbackinitialize SRC=%s, usOut#chan=%d, dlMix#chan=%d", buf, 0x28u);
    }
  }
  uint64_t v27 = (int *)*((void *)this + 1578);
  if (v27 && (v5[153] || v5[154]))
  {
    if (VPLogScope(void)::once != -1) {
      dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
    }
    if (*((void *)this + 1977)) {
      CFTypeRef v28 = "ON";
    }
    else {
      CFTypeRef v28 = "OFF";
    }
    CALegacyLog::log(v27, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 50, "LoopBackInitialize", "loopbackinitialize SRC=%s, usOut#chan=%d, dlMix#chan=%d", v28, *((_DWORD *)this + 243), *((_DWORD *)this + 89));
  }
}

void VoiceProcessorV2::LoopBackRead(VoiceProcessorV2 *this, unsigned int a2, AudioBufferList *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 15808;
  if (*((unsigned char *)this + 15808))
  {
    unsigned int v7 = *((_DWORD *)this + 3962);
    if (v7 >= a2) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = *((_DWORD *)this + 3962);
    }
    UInt32 mNumberBuffers = a3->mNumberBuffers;
    if (v8) {
      BOOL v10 = mNumberBuffers == *((_DWORD *)this + 3961);
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10 || v7 == 0)
    {
      unsigned int v8 = 0;
    }
    else
    {
      unsigned int v12 = *((_DWORD *)this + 3960) - *((_DWORD *)this + 3963);
      if (v12 >= v8) {
        uint64_t v13 = v8;
      }
      else {
        uint64_t v13 = v12;
      }
      if (mNumberBuffers)
      {
        unint64_t v14 = 0;
        p_mData = &a3->mBuffers[0].mData;
        do
        {
          unint64_t v16 = *p_mData;
          p_mData += 2;
          memcpy(v16, (const void *)(*((void *)this + 1983)+ 4 * (*((_DWORD *)this + 3963) + *((_DWORD *)this + 3960) * v14++)), 4 * v13);
          unint64_t v17 = *((unsigned int *)this + 3961);
        }
        while (v14 < v17);
        if (v8 > v12 && v17)
        {
          unint64_t v18 = 0;
          unint64_t v19 = &a3->mBuffers[0].mData;
          do
          {
            uint64_t v20 = (char *)*v19;
            v19 += 2;
            memcpy(&v20[4 * v13], (const void *)(*((void *)this + 1983) + 4 * (*((_DWORD *)this + 3960) * v18++)), 4 * (v8 - v13));
          }
          while (v18 < *((unsigned int *)this + 3961));
        }
      }
      *((_DWORD *)this + 3962) -= v8;
      unsigned int v21 = *((_DWORD *)this + 3963) + v8;
      *((_DWORD *)this + 3963) = v21;
      unsigned int v22 = *((_DWORD *)this + 3960);
      BOOL v23 = v21 >= v22;
      unsigned int v24 = v21 - v22;
      if (v23) {
        *((_DWORD *)this + 3963) = v24;
      }
    }
    unsigned int v33 = a2 - v8;
    if (a2 > v8)
    {
      if (VPLogScope(void)::once != -1) {
        dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
      }
      int v25 = (void *)VPLogScope(void)::scope;
      if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(1, VPLogScope(void)::scope, 0))
      {
        int v26 = (*v25 ? *v25 : MEMORY[0x1E4F14500]);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          int v35 = "vpDebug_Loopback.cpp";
          __int16 v36 = 1024;
          int v37 = 100;
          __int16 v38 = 1024;
          unsigned int v39 = v8;
          __int16 v40 = 1024;
          int v41 = a2;
          _os_log_impl(&dword_1BB0CE000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d  >vp> loopbackread ERROR read %d (requested %d) frames", buf, 0x1Eu);
        }
      }
      uint64_t v27 = (int *)*((void *)this + 1578);
      if (v27 && (v3[153] || v3[154]))
      {
        if (VPLogScope(void)::once != -1) {
          dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
        }
        CALegacyLog::log(v27, 1, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 100, "LoopBackRead", "loopbackread ERROR read %d (requested %d) frames", v8, a2);
      }
      if (a3->mNumberBuffers)
      {
        unint64_t v28 = 0;
        uint64_t v29 = 16;
        do
        {
          if (VPLogScope(void)::once != -1) {
            dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
          }
          __int16 v30 = (void *)VPLogScope(void)::scope;
          if (VPLogScope(void)::scope && CALegacyLog::LogEnabled(5, VPLogScope(void)::scope, 0))
          {
            int v31 = (*v30 ? *v30 : MEMORY[0x1E4F14500]);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 136315906;
              int v35 = "vpDebug_Loopback.cpp";
              __int16 v36 = 1024;
              int v37 = 102;
              __int16 v38 = 1024;
              unsigned int v39 = a2 - v8;
              __int16 v40 = 1024;
              int v41 = v28;
              _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d  <vp> loopbackread filled %d zeros in outABL channel %d", buf, 0x1Eu);
            }
          }
          __int16 v32 = (int *)*((void *)this + 1578);
          if (v32 && (v3[153] || v3[154]))
          {
            if (VPLogScope(void)::once != -1) {
              dispatch_once(&VPLogScope(void)::once, &__block_literal_global_30733);
            }
            CALegacyLog::log(v32, 5, VPLogScope(void)::scope, "/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/VoiceProcessor/VoiceProcessor_v2/vpDebugFeatures/vpDebug_Loopback.cpp", 102, "LoopBackRead", "loopbackread filled %d zeros in outABL channel %d", v33, v28);
          }
          bzero((void *)(*(void *)((char *)&a3->mNumberBuffers + v29) + 4 * v8), 4 * v33);
          ++v28;
          v29 += 16;
        }
        while (v28 < a3->mNumberBuffers);
      }
    }
  }
}

uint64_t AUCPMSVolumeV1::ValidFormat(AUCPMSVolumeV1 *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  if ((a2 - 1) < 2 && a3 == 0) {
    return (LOBYTE(a4->mFormatFlags) >> 5) & 1;
  }
  else {
    return 0;
  }
}

uint64_t AUCPMSVolumeV1::Render(AUCPMSVolumeV1 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  unsigned int v8 = (AUCPMSVolumeV1 *)((char *)this + 80);
  uint64_t Element = ausdk::AUScope::GetElement((AUCPMSVolumeV1 *)((char *)this + 80), 0);
  if (!Element || !*(_DWORD *)(Element + 172)) {
    return 4294956420;
  }
  BOOL v10 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  uint64_t result = ausdk::AUInputElement::PullInput(v10, a2, a3, 0, a4);
  if (!result)
  {
    uint64_t v12 = ausdk::AUScope::SafeGetElement(v8, 0);
    uint64_t BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    uint64_t v14 = ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 128), 0);
    uint64_t v15 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
    unint64_t v16 = *(uint64_t (**)(AUCPMSVolumeV1 *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(void *)this + 176);
    return v16(this, a2, BufferList, v15, a4);
  }
  return result;
}

uint64_t AUCPMSVolumeV1::ProcessBufferLists(AUCPMSVolumeV1 *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, unsigned int a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 17)) {
    return 4294956429;
  }
  uint64_t mNumberBuffers = a3->mNumberBuffers;
  if (mNumberBuffers != a4->mNumberBuffers)
  {
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      unint64_t v18 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      unint64_t v18 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      UInt32 v35 = a3->mNumberBuffers;
      UInt32 v36 = a4->mNumberBuffers;
      int v44 = 136315906;
      char v45 = "AUCPMSVolumeV1.cpp";
      __int16 v46 = 1024;
      int v47 = 134;
      __int16 v48 = 1024;
      UInt32 v49 = v35;
      __int16 v50 = 1024;
      UInt32 v51 = v36;
      int v37 = "%25s:%-5d ERROR: Input bus (%u-ch) and output bus (%u-ch) have different channel counts.";
      __int16 v38 = v18;
      uint32_t v39 = 30;
LABEL_58:
      _os_log_impl(&dword_1BB0CE000, v38, OS_LOG_TYPE_ERROR, v37, (uint8_t *)&v44, v39);
    }
    return 4294956428;
  }
  if (mNumberBuffers)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 4 * a5;
    p_UInt32 mDataByteSize = &a4->mBuffers[0].mDataByteSize;
    uint64_t v13 = &a3->mBuffers[0].mDataByteSize;
    do
    {
      if (v11 > *v13 || v11 > *p_mDataByteSize)
      {
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
          dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
        }
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          unint64_t v19 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
            return 4294956428;
          }
        }
        else
        {
          unint64_t v19 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          UInt32 v40 = *v13;
          UInt32 mDataByteSize = a4->mBuffers[v10].mDataByteSize;
          int v44 = 136316418;
          char v45 = "AUCPMSVolumeV1.cpp";
          __int16 v46 = 1024;
          int v47 = 144;
          __int16 v48 = 1024;
          UInt32 v49 = v10;
          __int16 v50 = 1024;
          UInt32 v51 = v40;
          __int16 v52 = 1024;
          UInt32 v53 = mDataByteSize;
          __int16 v54 = 1024;
          int v55 = v11;
          int v37 = "%25s:%-5d ERROR: (For ch-%i) input buffers hold %u bytes, output buffers hold %u bytes, but %u was expected.";
          __int16 v38 = v19;
          uint32_t v39 = 42;
          goto LABEL_58;
        }
        return 4294956428;
      }
      ++v10;
      p_mDataByteSize += 4;
      v13 += 4;
    }
    while (mNumberBuffers != v10);
    if (*((unsigned __int16 *)this + 268) >= 0x100u && *((_WORD *)this + 268) != 0)
    {
      p_mData = &a4->mBuffers[0].mData;
      char v43 = &a3->mBuffers[0].mData;
      do
      {
        if (a5) {
          memmove(*p_mData, *v43, 4 * a5);
        }
        p_mData += 2;
        v43 += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
      return 0;
    }
    if (*((void *)this + 78)) {
      goto LABEL_36;
    }
    uint64_t v15 = &a4->mBuffers[0].mData;
    unint64_t v16 = &a3->mBuffers[0].mData;
    do
    {
      if (a5) {
        memmove(*v15, *v16, 4 * a5);
      }
      uint64_t result = 0;
      v15 += 2;
      v16 += 2;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  else
  {
    BOOL v20 = *((unsigned __int16 *)this + 268) < 0x100u || *((_WORD *)this + 268) == 0;
    if (v20 && *((void *)this + 78))
    {
LABEL_36:
      AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::RefreshParamsAndProps((uint64_t)this);
      if ((int)a5 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *((void *)this + 78);
        int v23 = *(_DWORD *)(v22 + 104);
        int v24 = *(_DWORD *)(v22 + 108);
        do
        {
          if (v24 == v23)
          {
            float v25 = *(float *)(v22 + 96);
            if (*(unsigned char *)(v22 + 16))
            {
              *(unsigned char *)(v22 + 16) = 0;
            }
            else
            {
              if (*(float *)v22 >= v25) {
                uint64_t v26 = 8;
              }
              else {
                uint64_t v26 = 4;
              }
              float v25 = (float)(*(float *)v22 * *(float *)(v22 + v26)) + (float)((float)(1.0 - *(float *)(v22 + v26)) * v25);
            }
            *(float *)uint64_t v22 = v25;
            *(float *)(v22 + 112) = v25;
            int v24 = 1;
          }
          else
          {
            ++v24;
          }
          uint64_t v27 = a4->mNumberBuffers;
          unint64_t v28 = &a4->mBuffers[0].mData;
          uint64_t v29 = &a3->mBuffers[0].mData;
          if (v27)
          {
            do
            {
              int v31 = (float *)*v28;
              v28 += 2;
              __int16 v30 = v31;
              __int16 v32 = (float *)*v29;
              v29 += 2;
              v30[v21] = *(float *)(v22 + 112) * v32[v21];
              --v27;
            }
            while (v27);
          }
          ++v21;
        }
        while (v21 != a5);
        *(_DWORD *)(v22 + 108) = v24;
      }
      uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUCPMSVolumeV1 *)((char *)this + 32), 0);
      float v34 = log10f(*(float *)(*((void *)this + 78) + 112));
      ausdk::AUElement::SetParameter(Element, 3u, v34 * 20.0, 0);
      uint64_t result = 0;
      atomic_store(1u, (unsigned __int8 *)this + 619);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::RefreshParamsAndProps(uint64_t a1)
{
  uint64_t Element = (ausdk::AUElement *)ausdk::AUScope::GetElement((ausdk::AUScope *)(a1 + 32), 0);
  uint64_t v3 = Element;
  if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 616), memory_order_acquire))
  {
    float Parameter = ausdk::AUElement::GetParameter(Element, 0);
    uint64_t v5 = *(void *)(a1 + 624);
    if (v5) {
      *(float *)(v5 + 8) = expf(-1.0 / (float)(Parameter * *(float *)(v5 + 12)));
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 616));
  }
  if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 617), memory_order_acquire))
  {
    float v6 = ausdk::AUElement::GetParameter(v3, 1u);
    uint64_t v7 = *(void *)(a1 + 624);
    if (v7) {
      *(float *)(v7 + 4) = expf(-1.0 / (float)(v6 * *(float *)(v7 + 12)));
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 617));
  }
  if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 618), memory_order_acquire))
  {
    float v8 = ausdk::AUElement::GetParameter(v3, 2u);
    uint64_t v9 = *(void *)(a1 + 624);
    if (v9)
    {
      uint64_t v10 = (float *)cpms::PowerLUT<float>::GetForVolumeLevel(v9 + 24, v8);
      *(float *)(v9 + 8std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>((uint64_t *)(v9 + 48), v10);
      *(_DWORD *)(v9 + 84) = v11;
      *(float *)(v9 + 88) = v12;
      *(_DWORD *)(v9 + 92) = v13;
      float32x2_t v14 = vdiv_f32(*(float32x2_t *)(v9 + 64), (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)(v9 + 80)), (int8x8_t)0x3400000034000000, *(int8x8_t *)(v9 + 80)));
      if (v12 < 0.00000011921) {
        float v12 = 0.00000011921;
      }
      if (v14.f32[1] < v14.f32[0]) {
        v14.f32[0] = v14.f32[1];
      }
      if ((float)(*(float *)(v9 + 72) / v12) < v14.f32[0]) {
        v14.f32[0] = *(float *)(v9 + 72) / v12;
      }
      if (*(float *)(v9 + 60) < v14.f32[0]) {
        v14.i32[0] = *(_DWORD *)(v9 + 60);
      }
      if (*(float *)(v9 + 56) >= v14.f32[0]) {
        v14.i32[0] = *(_DWORD *)(v9 + 56);
      }
      *(float *)(v9 + 96) = sqrtf(v14.f32[0]);
    }
    atomic_store(0, (unsigned __int8 *)(a1 + 618));
  }
  if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 619), memory_order_acquire))
  {
    ausdk::AUElement::GetParameter(v3, 3u);
    atomic_store(0, (unsigned __int8 *)(a1 + 619));
  }
  uint64_t v24 = a1 + 528;
  int v15 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 528));
  char v25 = v15;
  if (v15)
  {
    if (atomic_load_explicit((atomic_uchar *volatile)(a1 + 620), memory_order_acquire))
    {
      if (*(unsigned char *)(a1 + 608))
      {
        uint64_t v16 = *(void *)(a1 + 624);
        if (v16)
        {
          *(float *)(v16 + 64) = cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>((uint64_t *)(v16 + 48), (float *)(a1 + 592));
          *(_DWORD *)(v16 + 68) = v17;
          *(float *)(v16 + 72) = v18;
          *(_DWORD *)(v16 + 76) = v19;
          float32x2_t v20 = vdiv_f32(*(float32x2_t *)(v16 + 64), (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)(v16 + 80)), (int8x8_t)0x3400000034000000, *(int8x8_t *)(v16 + 80)));
          float v21 = *(float *)(v16 + 88);
          if (v21 < 0.00000011921) {
            float v21 = 0.00000011921;
          }
          float v22 = v18 / v21;
          if (v20.f32[1] < v20.f32[0]) {
            v20.f32[0] = v20.f32[1];
          }
          if (v22 < v20.f32[0]) {
            v20.f32[0] = v22;
          }
          if (*(float *)(v16 + 60) < v20.f32[0]) {
            v20.i32[0] = *(_DWORD *)(v16 + 60);
          }
          if (*(float *)(v16 + 56) >= v20.f32[0]) {
            v20.i32[0] = *(_DWORD *)(v16 + 56);
          }
          *(float *)(v16 + 96) = sqrtf(v20.f32[0]);
        }
      }
      atomic_store(0, (unsigned __int8 *)(a1 + 620));
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::unlock((uint64_t)&v24);
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v24);
}

void sub_1BB732FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float cpms::controllers::LUT<float,cpms::smoothers::Exponential>::Compute<cpms::efficiency::AmpModelBase<float>,float,cpms::powertuplekinds::PowerBudget>(uint64_t *a1, float *a2)
{
  float v4 = cpms::efficiency::AmpModelBase<float>::Compute(*a1, *a2);
  cpms::efficiency::AmpModelBase<float>::Compute(*a1, a2[1]);
  cpms::efficiency::AmpModelBase<float>::Compute(*a1, a2[2]);
  cpms::efficiency::AmpModelBase<float>::Compute(*a1, a2[3]);
  return v4;
}

float cpms::efficiency::AmpModelBase<float>::Compute(uint64_t a1, float a2)
{
  float v4 = (float *)operator new(4uLL);
  std::string __p = v4;
  *float v4 = a2;
  float v8 = v4 + 1;
  uint64_t v9 = v4 + 1;
  float v5 = (*(float (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &__p);
  if (__p)
  {
    float v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1BB7330DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *cpms::PowerLUT<float>::GetForVolumeLevel(uint64_t a1, float a2)
{
  float v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = v4;
  if (v4)
  {
    float v5 = v2;
    float v6 = v3;
    do
    {
      uint64_t v7 = v6 + 1;
      if (*((float *)v6 + 7) >= a2)
      {
        uint64_t v7 = v6;
        float v5 = v6;
      }
      float v6 = (void *)*v7;
    }
    while (*v7);
    if (v5 == v2)
    {
      do
      {
        float v5 = v3;
        uint64_t v3 = (void *)v3[1];
      }
      while (v3);
    }
  }
  else
  {
    do
    {
      float v5 = (void *)v2[2];
      BOOL v8 = *v5 == (void)v2;
      uint64_t v2 = v5;
    }
    while (v8);
  }
  return v5 + 4;
}

void ___ZN14AUTemplateBaseI14AUCPMSVolumeV1NSt3__15tupleIJN4cpms8VolumeV110Parameters18TC_smoother_attackENS5_19TC_smoother_releaseENS5_11VolumeLevelENS5_10OutputGainEEEENS2_IJN9AUGeneric10Properties6BypassENS4_10Properties9LUTSystemEEEENS2_IJNSE_11PowerBudgetEEEEE11GetLogScopeEv_block_invoke_30517()
{
}

uint64_t AUCPMSVolumeV1::Initialize(AUCPMSVolumeV1 *this)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    uint64_t v2 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 44;
    _os_log_impl(&dword_1BB0CE000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d Starting initialization.", buf, 0x12u);
  }
LABEL_9:
  uint64_t Element = ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 80), 0);
  long long v4 = *(_OWORD *)(Element + 96);
  v162[0] = *(_OWORD *)(Element + 80);
  v162[1] = v4;
  uint64_t v163 = *(void *)(Element + 112);
  uint64_t v5 = ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 128), 0);
  long long v6 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)&v161.double mSampleRate = *(_OWORD *)(v5 + 80);
  *(_OWORD *)&v161.UInt32 mBytesPerPacket = v6;
  *(void *)&v161.UInt32 mBitsPerChannel = *(void *)(v5 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)v162, &v161, v7))
  {
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      uint64_t v16 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
        return 4294956428;
      }
    }
    else
    {
      uint64_t v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v19 = &v185;
      CA::StreamDescription::AsString((CA::StreamDescription *)v162, (uint64_t)&v185, v18);
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v19 = (std::string *)v185.__r_.__value_.__r.__words[0];
      }
      CA::StreamDescription::AsString((CA::StreamDescription *)&v161, (uint64_t)__p, v20);
      if (__p[23] >= 0) {
        float v21 = __p;
      }
      else {
        float v21 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 55;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v19;
      __int16 v187 = 2080;
      double v188 = v21;
      _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: Input and output formats need to be equivalent, but we have:\n[Input:  %s], and\n[Output: %s]", buf, 0x26u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
    }
    return 4294956428;
  }
  if (*((unsigned char *)this + 584))
  {
    ausdk::AUScope::SafeGetElement((AUCPMSVolumeV1 *)((char *)this + 80), 0);
    BOOL v8 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUCPMSVolumeV1 *)((char *)this + 32), 0);
    float Parameter = ausdk::AUElement::GetParameter(v8, 0);
    uint64_t v10 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUCPMSVolumeV1 *)((char *)this + 32), 0);
    float v11 = ausdk::AUElement::GetParameter(v10, 1u);
    float v12 = (ausdk::AUElement *)ausdk::AUScope::GetElement((AUCPMSVolumeV1 *)((char *)this + 32), 0);
    float v13 = ausdk::AUElement::GetParameter(v12, 2u);
    if (*((unsigned char *)this + 608))
    {
      unint64_t v14 = *((void *)this + 75);
      unint64_t v15 = *((void *)this + 74);
    }
    else
    {
      unint64_t v15 = 0x4248000042480000;
      unint64_t v14 = 0x4248000042480000;
    }
    unint64_t v159 = v15;
    unint64_t v160 = v14;
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
    }
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      int v23 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
        goto LABEL_89;
      }
    }
    else
    {
      int v23 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      std::to_string((std::string *)__p, (float)(*(float *)&v15 * 1000.0));
      uint64_t v24 = std::string::insert((std::string *)__p, 0, "Instantaneous: ", 0xFuLL);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      uint64_t v26 = std::string::append(&v185, "mW; ", 4uLL);
      unint64_t v27 = HIDWORD(v15);
      long long v28 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v181.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v28;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::to_string(&v182, (float)(*(float *)&v27 * 1000.0));
      uint64_t v29 = std::string::insert(&v182, 0, "100ms: ", 7uLL);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v29->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      int v31 = std::string::append((std::string *)__p, "mW; ", 4uLL);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v33 = &v185;
      }
      else {
        unsigned int v33 = (std::string *)v185.__r_.__value_.__r.__words[0];
      }
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v185.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v185.__r_.__value_.__l.__size_;
      }
      std::string::append(&v181, (const std::string::value_type *)v33, size);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      std::to_string(&v182, (float)(*(float *)&v14 * 1000.0));
      UInt32 v35 = std::string::insert(&v182, 0, "1000ms: ", 8uLL);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v35->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      int v37 = std::string::append((std::string *)__p, "mW; ", 4uLL);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint32_t v39 = &v185;
      }
      else {
        uint32_t v39 = (std::string *)v185.__r_.__value_.__r.__words[0];
      }
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = v185.__r_.__value_.__l.__size_;
      }
      std::string::append(&v181, (const std::string::value_type *)v39, v40);
      unint64_t v41 = HIDWORD(v14);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      std::to_string(&v182, (float)(*(float *)&v41 * 1000.0));
      uint64_t v42 = std::string::insert(&v182, 0, "thermal: ", 9uLL);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v42->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      int v44 = std::string::append((std::string *)__p, "mW", 2uLL);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v46 = &v185;
      }
      else {
        __int16 v46 = (std::string *)v185.__r_.__value_.__r.__words[0];
      }
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v47 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v47 = v185.__r_.__value_.__l.__size_;
      }
      std::string::append(&v181, (const std::string::value_type *)v46, v47);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      __int16 v48 = &v181;
      if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v48 = (std::string *)v181.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 79;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v48;
      _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with PowerBudget: [ %s ]", buf, 0x1Cu);
      if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v181.__r_.__value_.__l.__data_);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
      }
    }
LABEL_89:
    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
    {
      UInt32 v49 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
      {
LABEL_223:
        if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
        {
          long long v125 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
          if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
            goto LABEL_250;
          }
        }
        else
        {
          long long v125 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v125, OS_LOG_TYPE_INFO)) {
          goto LABEL_250;
        }
        std::to_string((std::string *)__p, v13);
        while (1)
        {
          if ((__p[23] & 0x80000000) != 0)
          {
            char v127 = *(unsigned char **)__p;
            if (*(unsigned char *)(*(void *)__p + *(void *)&__p[8] - 1) != 48)
            {
LABEL_235:
              std::string v185 = *(std::string *)__p;
              memset(__p, 0, 24);
              while (1)
              {
                if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                {
                  long long v129 = (std::string *)v185.__r_.__value_.__r.__words[0];
                  if (*(unsigned char *)(v185.__r_.__value_.__r.__words[0] + v185.__r_.__value_.__l.__size_ - 1) != 46)
                  {
LABEL_242:
                    std::string v182 = v185;
                    if ((__p[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__p);
                    }
                    vDSP_Length v130 = &v182;
                    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      vDSP_Length v130 = (std::string *)v182.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)long long buf = 136315650;
                    *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 81;
                    *(_WORD *)&unsigned char buf[18] = 2080;
                    *(void *)&buf[20] = v130;
                    _os_log_impl(&dword_1BB0CE000, v125, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with Volume level: %s", buf, 0x1Cu);
                    if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v182.__r_.__value_.__l.__data_);
                    }
                    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
                      dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
                    }
LABEL_250:
                    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                    {
                      BOOL v131 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
                      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
                        goto LABEL_277;
                      }
                    }
                    else
                    {
                      BOOL v131 = MEMORY[0x1E4F14500];
                    }
                    if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
                    {
                      std::to_string((std::string *)__p, Parameter);
                      while (1)
                      {
                        if ((__p[23] & 0x80000000) != 0)
                        {
                          long long v133 = *(unsigned char **)__p;
                          if (*(unsigned char *)(*(void *)__p + *(void *)&__p[8] - 1) != 48)
                          {
LABEL_262:
                            std::string v185 = *(std::string *)__p;
                            memset(__p, 0, 24);
                            while (1)
                            {
                              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                              {
                                char v135 = (std::string *)v185.__r_.__value_.__r.__words[0];
                                if (*(unsigned char *)(v185.__r_.__value_.__r.__words[0] + v185.__r_.__value_.__l.__size_ - 1) != 46)
                                {
LABEL_269:
                                  std::string v182 = v185;
                                  if ((__p[23] & 0x80000000) != 0) {
                                    operator delete(*(void **)__p);
                                  }
                                  long long v136 = &v182;
                                  if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                    long long v136 = (std::string *)v182.__r_.__value_.__r.__words[0];
                                  }
                                  *(_DWORD *)long long buf = 136315650;
                                  *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
                                  *(_WORD *)&unsigned char buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 82;
                                  *(_WORD *)&unsigned char buf[18] = 2080;
                                  *(void *)&buf[20] = v136;
                                  _os_log_impl(&dword_1BB0CE000, v131, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with Smoother attack TC: %s", buf, 0x1Cu);
                                  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v182.__r_.__value_.__l.__data_);
                                  }
                                  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
                                    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
                                  }
                                  goto LABEL_277;
                                }
                                uint64_t v134 = --v185.__r_.__value_.__l.__size_;
                              }
                              else
                              {
                                if (__p[HIBYTE(v185.__r_.__value_.__r.__words[2]) + 31] != 46) {
                                  goto LABEL_269;
                                }
                                uint64_t v134 = HIBYTE(v185.__r_.__value_.__r.__words[2]) - 1;
                                *((unsigned char *)&v185.__r_.__value_.__s + 23) = (*((unsigned char *)&v185.__r_.__value_.__s + 23) - 1) & 0x7F;
                                char v135 = &v185;
                              }
                              v135->__r_.__value_.__s.__data_[v134] = 0;
                            }
                          }
                          uint64_t v132 = --*(void *)&__p[8];
                        }
                        else
                        {
                          if (__p[__p[23] - 1] != 48) {
                            goto LABEL_262;
                          }
                          uint64_t v132 = __p[23] - 1;
                          __p[23] = (__p[23] - 1) & 0x7F;
                          long long v133 = __p;
                        }
                        v133[v132] = 0;
                      }
                    }
LABEL_277:
                    if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
                    {
                      long long v137 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
                      if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
                        goto LABEL_302;
                      }
                    }
                    else
                    {
                      long long v137 = MEMORY[0x1E4F14500];
                    }
                    if (!os_log_type_enabled(v137, OS_LOG_TYPE_INFO)) {
                      goto LABEL_302;
                    }
                    std::to_string((std::string *)__p, v11);
                    while (1)
                    {
                      if ((__p[23] & 0x80000000) != 0)
                      {
                        long long v139 = *(unsigned char **)__p;
                        if (*(unsigned char *)(*(void *)__p + *(void *)&__p[8] - 1) != 48)
                        {
LABEL_289:
                          std::string v185 = *(std::string *)__p;
                          memset(__p, 0, 24);
                          while (1)
                          {
                            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                            {
                              long long v141 = (std::string *)v185.__r_.__value_.__r.__words[0];
                              if (*(unsigned char *)(v185.__r_.__value_.__r.__words[0] + v185.__r_.__value_.__l.__size_ - 1) != 46)
                              {
LABEL_296:
                                std::string v182 = v185;
                                if ((__p[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)__p);
                                }
                                uint64_t v142 = &v182;
                                if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  uint64_t v142 = (std::string *)v182.__r_.__value_.__r.__words[0];
                                }
                                *(_DWORD *)long long buf = 136315650;
                                *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
                                *(_WORD *)&unsigned char buf[12] = 1024;
                                *(_DWORD *)&buf[14] = 83;
                                *(_WORD *)&unsigned char buf[18] = 2080;
                                *(void *)&buf[20] = v142;
                                _os_log_impl(&dword_1BB0CE000, v137, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with Smoother release TC: %s", buf, 0x1Cu);
                                if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v182.__r_.__value_.__l.__data_);
                                }
LABEL_302:
                                *(void *)&uint8_t buf[8] = 0;
                                *(void *)&uint8_t buf[16] = 0;
                                *(void *)long long buf = &buf[8];
                                long long v143 = (AUCPMSVolumeV1 *)*((void *)this + 68);
                                if (v143 != (AUCPMSVolumeV1 *)((char *)this + 552))
                                {
                                  do
                                  {
                                    uint64_t v144 = (float *)((char *)v143 + 28);
                                    int v145 = *(char **)&buf[8];
                                    char v146 = &buf[8];
                                    if (*(unsigned char **)buf == &buf[8]) {
                                      goto LABEL_309;
                                    }
                                    uint64_t v147 = *(void *)&buf[8];
                                    uint64_t v148 = &buf[8];
                                    if (*(void *)&buf[8])
                                    {
                                      do
                                      {
                                        char v146 = (unsigned char *)v147;
                                        uint64_t v147 = *(void *)(v147 + 8);
                                      }
                                      while (v147);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        char v146 = (unsigned char *)*((void *)v148 + 2);
                                        BOOL v91 = *(void *)v146 == (void)v148;
                                        uint64_t v148 = v146;
                                      }
                                      while (v91);
                                    }
                                    float v149 = *v144;
                                    if (*((float *)v146 + 7) < *v144)
                                    {
LABEL_309:
                                      if (*(void *)&buf[8]) {
                                        uint64_t v150 = (char **)v146;
                                      }
                                      else {
                                        uint64_t v150 = (char **)&buf[8];
                                      }
                                      if (*(void *)&buf[8]) {
                                        unint64_t v151 = (char **)(v146 + 8);
                                      }
                                      else {
                                        unint64_t v151 = (char **)&buf[8];
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v150 = (char **)&buf[8];
                                      unint64_t v151 = (char **)&buf[8];
                                      if (*(void *)&buf[8])
                                      {
                                        unint64_t v151 = (char **)&buf[8];
                                        while (1)
                                        {
                                          while (1)
                                          {
                                            uint64_t v150 = (char **)v145;
                                            float v156 = *((float *)v145 + 7);
                                            if (v149 >= v156) {
                                              break;
                                            }
                                            int v145 = *(char **)v145;
                                            unint64_t v151 = v150;
                                            if (!*v150) {
                                              goto LABEL_316;
                                            }
                                          }
                                          if (v156 >= v149) {
                                            break;
                                          }
                                          unint64_t v151 = (char **)(v145 + 8);
                                          int v145 = (char *)*((void *)v145 + 1);
                                          if (!v145) {
                                            goto LABEL_316;
                                          }
                                        }
                                      }
                                    }
                                    if (!*v151)
                                    {
LABEL_316:
                                      uint64_t v152 = (char *)operator new(0x30uLL);
                                      long long v153 = *(_OWORD *)v144;
                                      *((_DWORD *)v152 + 11) = *((_DWORD *)v143 + 11);
                                      *(_OWORD *)(v152 + 28) = v153;
                                      *(void *)uint64_t v152 = 0;
                                      *((void *)v152 + 1) = 0;
                                      *((void *)v152 + 2) = v150;
                                      *unint64_t v151 = v152;
                                      if (**(void **)buf)
                                      {
                                        *(void *)long long buf = **(void **)buf;
                                        uint64_t v152 = *v151;
                                      }
                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], (uint64_t *)v152);
                                      ++*(void *)&buf[16];
                                    }
                                    uint64_t v154 = (AUCPMSVolumeV1 *)*((void *)v143 + 1);
                                    if (v154)
                                    {
                                      do
                                      {
                                        std::string v155 = v154;
                                        uint64_t v154 = *(AUCPMSVolumeV1 **)v154;
                                      }
                                      while (v154);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        std::string v155 = (AUCPMSVolumeV1 *)*((void *)v143 + 2);
                                        BOOL v91 = *(void *)v155 == (void)v143;
                                        long long v143 = v155;
                                      }
                                      while (!v91);
                                    }
                                    long long v143 = v155;
                                  }
                                  while (v155 != (AUCPMSVolumeV1 *)((char *)this + 552));
                                }
                                (*(void (**)(std::string *__return_ptr))(**((void **)this + 71) + 32))(&v185);
                                cpms::efficiency::AmpModelFactory((cpms::efficiency *)&buf[24], (const __CFDictionary **)&v185);
                              }
                              uint64_t v140 = --v185.__r_.__value_.__l.__size_;
                            }
                            else
                            {
                              if (__p[HIBYTE(v185.__r_.__value_.__r.__words[2]) + 31] != 46) {
                                goto LABEL_296;
                              }
                              uint64_t v140 = HIBYTE(v185.__r_.__value_.__r.__words[2]) - 1;
                              *((unsigned char *)&v185.__r_.__value_.__s + 23) = (*((unsigned char *)&v185.__r_.__value_.__s + 23) - 1) & 0x7F;
                              long long v141 = &v185;
                            }
                            v141->__r_.__value_.__s.__data_[v140] = 0;
                          }
                        }
                        uint64_t v138 = --*(void *)&__p[8];
                      }
                      else
                      {
                        if (__p[__p[23] - 1] != 48) {
                          goto LABEL_289;
                        }
                        uint64_t v138 = __p[23] - 1;
                        __p[23] = (__p[23] - 1) & 0x7F;
                        long long v139 = __p;
                      }
                      v139[v138] = 0;
                    }
                  }
                  uint64_t v128 = --v185.__r_.__value_.__l.__size_;
                }
                else
                {
                  if (__p[HIBYTE(v185.__r_.__value_.__r.__words[2]) + 31] != 46) {
                    goto LABEL_242;
                  }
                  uint64_t v128 = HIBYTE(v185.__r_.__value_.__r.__words[2]) - 1;
                  *((unsigned char *)&v185.__r_.__value_.__s + 23) = (*((unsigned char *)&v185.__r_.__value_.__s + 23) - 1) & 0x7F;
                  long long v129 = &v185;
                }
                v129->__r_.__value_.__s.__data_[v128] = 0;
              }
            }
            uint64_t v126 = --*(void *)&__p[8];
          }
          else
          {
            if (__p[__p[23] - 1] != 48) {
              goto LABEL_235;
            }
            uint64_t v126 = __p[23] - 1;
            __p[23] = (__p[23] - 1) & 0x7F;
            char v127 = __p;
          }
          v127[v126] = 0;
        }
      }
    }
    else
    {
      UInt32 v49 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      std::to_string((std::string *)__p, *((void *)this + 70));
      __int16 v50 = std::string::insert((std::string *)__p, 0, "[", 1uLL);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      __int16 v52 = std::string::append(&v185, " LUT entries]\n", 0xEuLL);
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v164.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      __int16 v54 = (AUCPMSVolumeV1 *)*((void *)this + 68);
      if (v54 != (AUCPMSVolumeV1 *)((char *)this + 552))
      {
        do
        {
          std::to_string(&v177, *((float *)v54 + 7) * 16.0);
          int v55 = std::string::insert(&v177, 0, "  Volume level ", 0xFuLL);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v178.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          uint64_t v57 = std::string::append(&v178, "/16: ", 5uLL);
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v179.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          std::to_string((std::string *)__p, (float)(*((float *)v54 + 8) * 1000.0));
          unsigned int v59 = std::string::insert((std::string *)__p, 0, "Instantaneous: ", 0xFuLL);
          long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v185.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          unsigned int v61 = std::string::append(&v185, "mW; ", 4uLL);
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v176.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          std::to_string(&v182, (float)(*((float *)v54 + 9) * 1000.0));
          unsigned int v63 = std::string::insert(&v182, 0, "100ms: ", 7uLL);
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v63->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          uint64_t v65 = std::string::append((std::string *)__p, "mW; ", 4uLL);
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v185.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v67 = &v185;
          }
          else {
            int v67 = (std::string *)v185.__r_.__value_.__r.__words[0];
          }
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v68 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v68 = v185.__r_.__value_.__l.__size_;
          }
          std::string::append(&v176, (const std::string::value_type *)v67, v68);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
          std::to_string(&v182, (float)(*((float *)v54 + 10) * 1000.0));
          uint64_t v69 = std::string::insert(&v182, 0, "1000ms: ", 8uLL);
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v69->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          long long v71 = std::string::append((std::string *)__p, "mW; ", 4uLL);
          long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          v185.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v73 = &v185;
          }
          else {
            int v73 = (std::string *)v185.__r_.__value_.__r.__words[0];
          }
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v74 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v74 = v185.__r_.__value_.__l.__size_;
          }
          std::string::append(&v176, (const std::string::value_type *)v73, v74);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
          std::to_string(&v182, (float)(*((float *)v54 + 11) * 1000.0));
          uint64_t v75 = std::string::insert(&v182, 0, "thermal: ", 9uLL);
          long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v75->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          uint64_t v77 = std::string::append((std::string *)__p, "mW", 2uLL);
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v185.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v79 = &v185;
          }
          else {
            int v79 = (std::string *)v185.__r_.__value_.__r.__words[0];
          }
          if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v80 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v80 = v185.__r_.__value_.__l.__size_;
          }
          std::string::append(&v176, (const std::string::value_type *)v79, v80);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v81 = &v176;
          }
          else {
            char v81 = (std::string *)v176.__r_.__value_.__r.__words[0];
          }
          if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v82 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v82 = v176.__r_.__value_.__l.__size_;
          }
          int v83 = std::string::append(&v179, (const std::string::value_type *)v81, v82);
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v180.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v180.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          unsigned int v85 = std::string::append(&v180, "\n", 1uLL);
          long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          v181.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v87 = &v181;
          }
          else {
            uint64_t v87 = (std::string *)v181.__r_.__value_.__r.__words[0];
          }
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v88 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v88 = v181.__r_.__value_.__l.__size_;
          }
          std::string::append(&v164, (const std::string::value_type *)v87, v88);
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v181.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v180.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v176.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v179.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v178.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v177.__r_.__value_.__l.__data_);
          }
          long long v89 = (AUCPMSVolumeV1 *)*((void *)v54 + 1);
          if (v89)
          {
            do
            {
              uint64_t v90 = v89;
              long long v89 = *(AUCPMSVolumeV1 **)v89;
            }
            while (v89);
          }
          else
          {
            do
            {
              uint64_t v90 = (AUCPMSVolumeV1 *)*((void *)v54 + 2);
              BOOL v91 = *(void *)v90 == (void)v54;
              __int16 v54 = v90;
            }
            while (!v91);
          }
          __int16 v54 = v90;
        }
        while (v90 != (AUCPMSVolumeV1 *)((char *)this + 552));
      }
      unsigned int v92 = std::string::insert(&v164, 0, "Amp system:\n-", 0xDuLL);
      long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v165.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      uint64_t v94 = std::string::append(&v165, "\n", 1uLL);
      long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v166.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      uint64_t v96 = std::string::append(&v166, "-[Amplifier efficiency expression: ", 0x23uLL);
      long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      v167.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(std::string *__return_ptr))(**((void **)this + 71) + 40))(&v185);
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v98 = &v185;
      }
      else {
        unsigned int v98 = (std::string *)v185.__r_.__value_.__r.__words[0];
      }
      if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v99 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v99 = v185.__r_.__value_.__l.__size_;
      }
      uint64_t v100 = std::string::append(&v167, (const std::string::value_type *)v98, v99);
      long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      v168.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      int v102 = std::string::append(&v168, "]", 1uLL);
      long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      v169.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v103;
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      unsigned int v104 = std::string::append(&v169, "\n", 1uLL);
      long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      v170.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      unsigned int v106 = std::string::append(&v170, "-[TargetGainRangeDB: [", 0x16uLL);
      long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v171.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      float v108 = log10f(*((float *)this + 144));
      std::to_string((std::string *)__p, v108 * 10.0);
      if (__p[23] >= 0) {
        int v109 = __p;
      }
      else {
        int v109 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v110 = __p[23];
      }
      else {
        std::string::size_type v110 = *(void *)&__p[8];
      }
      unint64_t v111 = std::string::append(&v171, v109, v110);
      long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
      v172.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v112;
      v111->__r_.__value_.__l.__size_ = 0;
      v111->__r_.__value_.__r.__words[2] = 0;
      v111->__r_.__value_.__r.__words[0] = 0;
      unint64_t v113 = std::string::append(&v172, ", ", 2uLL);
      long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
      v173.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v114;
      v113->__r_.__value_.__l.__size_ = 0;
      v113->__r_.__value_.__r.__words[2] = 0;
      v113->__r_.__value_.__r.__words[0] = 0;
      float v115 = log10f(*((float *)this + 145));
      std::to_string(&v182, v115 * 10.0);
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v116 = &v182;
      }
      else {
        unint64_t v116 = (std::string *)v182.__r_.__value_.__r.__words[0];
      }
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v117 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v117 = v182.__r_.__value_.__l.__size_;
      }
      uint64_t v118 = std::string::append(&v173, (const std::string::value_type *)v116, v117);
      long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
      v174.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v119;
      v118->__r_.__value_.__l.__size_ = 0;
      v118->__r_.__value_.__r.__words[2] = 0;
      v118->__r_.__value_.__r.__words[0] = 0;
      unint64_t v120 = std::string::append(&v174, "] dB", 4uLL);
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      uint64_t v122 = std::string::append(&v175, "\n", 1uLL);
      long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
      int64_t v158 = v122->__r_.__value_.__r.__words[2];
      *(_OWORD *)vDSP_Length v157 = v123;
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v182.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v173.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v172.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v170.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v169.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v168.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v185.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v167.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v166.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v165.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v164.__r_.__value_.__l.__data_);
      }
      long long v124 = v157;
      if (v158 < 0) {
        long long v124 = (void **)v157[0];
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 80;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v124;
      _os_log_impl(&dword_1BB0CE000, v49, OS_LOG_TYPE_INFO, "%25s:%-5d Initializing with LUTSystem:\n%s", buf, 0x1Cu);
      if (SHIBYTE(v158) < 0) {
        operator delete(v157[0]);
      }
      if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
        dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
      }
    }
    goto LABEL_223;
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    int v17 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
      return 0;
    }
  }
  else
  {
    int v17 = MEMORY[0x1E4F14500];
  }
  uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  *(_DWORD *)long long buf = 136315394;
  *(void *)&uint8_t buf[4] = "AUCPMSVolumeV1.cpp";
  *(_WORD *)&unsigned char buf[12] = 1024;
  *(_DWORD *)&buf[14] = 61;
  _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: We have not been configured with a LUT system; we cannot initialize properly and will process in soft bypass.",
    buf,
    0x12u);
  return 0;
}

void sub_1BB734CFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once != -1) {
    dispatch_once(&AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::once, &__block_literal_global_30509);
  }
  if (AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope)
  {
    uint64_t v3 = *(NSObject **)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope;
    if (!*(void *)AUTemplateBase<AUCPMSVolumeV1,std::tuple<cpms::VolumeV1::Parameters::TC_smoother_attack,cpms::VolumeV1::Parameters::TC_smoother_release,cpms::VolumeV1::Parameters::VolumeLevel,cpms::VolumeV1::Parameters::OutputGain>,std::tuple<AUGeneric::Properties::Bypass,cpms::VolumeV1::Properties::LUTSystem>,std::tuple<cpms::VolumeV1::Properties::PowerBudget>>::GetLogScope(void)::scope) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)(v2 - 24std::unique_ptr<AUFIREngineKernel>::reset[abi:ne180100](&a9, 0) = 136315394;
    uint64_t v4 = v2 - 240;
    *(void *)(v4 + 4) = "AUCPMSVolumeV1.cpp";
    *(_WORD *)(v2 - 228) = 1024;
    *(_DWORD *)(v4 + 14) = 96;
    _os_log_impl(&dword_1BB0CE000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: We have not been configured fully; we could not initialize the kernel and will process in soft bypass.",
      (uint8_t *)(v2 - 240),
      0x12u);
  }
LABEL_10:
  __cxa_end_catch();
  JUMPOUT(0x1BB734ADCLL);
}

void std::default_delete<cpms::SmoothedGainApplicator<float,cpms::smoothers::Exponential_asymmetric,cpms::controllers::LUT<float,cpms::smoothers::Exponential>>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(a1 + 32));

  JUMPOUT(0x1C185D370);
}

void AUCPMSVolumeV1::~AUCPMSVolumeV1(AUCPMSVolumeV1 *this)
{
  *(void *)this = &unk_1F14C1630;
  uint64_t v2 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v2) {
    std::default_delete<cpms::SmoothedGainApplicator<float,cpms::smoothers::Exponential_asymmetric,cpms::controllers::LUT<float,cpms::smoothers::Exponential>>>::operator()[abi:ne180100](v2);
  }
  *(void *)this = &unk_1F14C1880;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 544);
  ausdk::AUBase::~AUBase(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14C1630;
  uint64_t v2 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v2) {
    std::default_delete<cpms::SmoothedGainApplicator<float,cpms::smoothers::Exponential_asymmetric,cpms::controllers::LUT<float,cpms::smoothers::Exponential>>>::operator()[abi:ne180100](v2);
  }
  *(void *)this = &unk_1F14C1880;
  std::__optional_destruct_base<cpms::LUTSystem<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 544);

  ausdk::AUBase::~AUBase(this);
}