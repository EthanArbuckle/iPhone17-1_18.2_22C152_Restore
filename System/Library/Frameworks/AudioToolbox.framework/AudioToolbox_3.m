void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(void *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_1F14A1198;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A1198;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  result = (char *)operator new(0x28uLL);
  *(void *)result = &unk_1F14A1198;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1198;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_36;
  }
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)v39 = 0u;
  int v43 = 1065353216;
  long long v44 = 0u;
  memset(v45, 0, sizeof(v45));
  long long v46 = 0u;
  memset(v47, 0, sizeof(v47));
  memset(v48, 0, 25);
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, void, void **))(*(void *)v7 + 40))(v7, v6, *(unsigned int *)(a1 + 32), v39);
  char v9 = (char)v8;
  if (v8)
  {
    *(_OWORD *)v27 = *(_OWORD *)v39;
    v39[0] = 0;
    v39[1] = 0;
    long long v10 = v40;
    long long v11 = v41;
    *(void *)&long long v41 = 0;
    long long v40 = 0uLL;
    long long v28 = v10;
    *(void *)&long long v29 = v11;
    *((void *)&v29 + 1) = *((void *)&v41 + 1);
    uint64_t v30 = v42;
    int v31 = v43;
    if (v42)
    {
      unint64_t v12 = *(void *)(*((void *)&v11 + 1) + 8);
      if (((unint64_t)v11 & ((void)v11 - 1)) != 0)
      {
        if (*((void *)&v11 + 1) >= (unint64_t)v11) {
          unint64_t v12 = *((void *)&v11 + 1) % (unint64_t)v11;
        }
      }
      else
      {
        unint64_t v12 = *((void *)&v11 + 1) & (v11 - 1);
      }
      *(void *)(*((void *)&v10 + 1) + 8 * v12) = (char *)&v29 + 8;
      *((void *)&v41 + 1) = 0;
      uint64_t v42 = 0;
    }
    *(void *)&v33[0] = *(void *)&v45[0];
    long long v32 = v44;
    memset(v45, 0, sizeof(v45));
    long long v44 = 0uLL;
    *(_OWORD *)((char *)v33 + 8) = *(_OWORD *)((char *)v45 + 8);
    *((void *)&v33[1] + 1) = *((void *)&v45[1] + 1);
    long long v34 = v46;
    long long v46 = 0uLL;
    v24 = v47[0];
    memset(v47, 0, sizeof(v47));
    *(_OWORD *)&v35[1] = *(_OWORD *)&v47[1];
    v35[0] = v24;
    v35[3] = v47[3];
    v36[0] = v48[0];
    *(void *)&v36[1] = *(void *)&v48[1];
    memset(v48, 0, 24);
    BYTE8(v36[1]) = BYTE8(v48[1]);
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v15 = v38;
      v16 = __p[1];
      v17 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if ((v15 & 0x80u) == 0) {
          unint64_t v18 = v15;
        }
        else {
          unint64_t v18 = (unint64_t)v16;
        }
        v19 = __p;
        if ((v38 & 0x80u) != 0) {
          v19 = (void **)__p[0];
        }
        if (v18) {
          v20 = " ";
        }
        else {
          v20 = "";
        }
        v21 = "hardware";
        int v22 = *(_DWORD *)(a1 + 32);
        if (v22 == 1) {
          v21 = "echo";
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = v19;
        __int16 v50 = 2080;
        v51 = v20;
        if (v22 == 2) {
          v23 = "content";
        }
        else {
          v23 = v21;
        }
        __int16 v52 = 2080;
        v53 = v23;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration for uplink %s DSP node", buf, 0x20u);
      }
      if ((char)v38 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  *(void *)buf = v48;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v47[1])
  {
    v47[2] = v47[1];
    operator delete(v47[1]);
  }
  *(void *)buf = &v46;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = (char *)v45 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = &v44;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v40 + 8);
  if (SBYTE7(v40) < 0) {
    operator delete(v39[0]);
  }
  if ((v9 & 1) == 0)
  {
LABEL_36:
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)v27 = 0u;
    int v31 = 1065353216;
    long long v32 = 0u;
    memset(v33, 0, sizeof(v33));
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    memset(v36, 0, 25);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)v4 = std::pmr::get_default_resource(v25);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v4);
  *(void *)(storage + 16) = v28;
  *(_OWORD *)uint64_t storage = *(_OWORD *)v27;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(storage + 24, (uint64_t *)&v28 + 1);
  *(void *)(storage + 80) = 0;
  *(void *)(storage + 88) = 0;
  *(void *)(storage + 64) = 0;
  *(void *)(storage + 72) = 0;
  *(_OWORD *)(storage + 64) = v32;
  *(void *)(storage + 80) = *(void *)&v33[0];
  long long v32 = 0uLL;
  *(void *)(storage + 96) = 0;
  *(void *)(storage + 104) = 0;
  *(_OWORD *)(storage + 88) = *(_OWORD *)((char *)v33 + 8);
  *(void *)(storage + 104) = *((void *)&v33[1] + 1);
  *(void *)(storage + 112) = 0;
  memset(v33, 0, sizeof(v33));
  *(void *)(storage + 120) = 0;
  *(void *)(storage + 128) = 0;
  *(_OWORD *)(storage + 112) = v34;
  long long v34 = 0uLL;
  *(void **)(storage + 128) = v35[0];
  *(void *)(storage + 136) = 0;
  *(void *)(storage + 144) = 0;
  *(void *)(storage + 152) = 0;
  *(_OWORD *)(storage + 136) = *(_OWORD *)&v35[1];
  *(void **)(storage + 152) = v35[3];
  *(void *)(storage + 160) = 0;
  memset(v35, 0, sizeof(v35));
  *(void *)(storage + 168) = 0;
  *(void *)(storage + 176) = 0;
  *(_OWORD *)(storage + 160) = v36[0];
  *(void *)(storage + 176) = *(void *)&v36[1];
  memset(v36, 0, 24);
  *(unsigned char *)(storage + 184) = BYTE8(v36[1]);
  v39[0] = v36;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  if (v35[1])
  {
    v35[2] = v35[1];
    operator delete(v35[1]);
  }
  v39[0] = &v34;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  v39[0] = (char *)v33 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  v39[0] = &v32;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v28 + 8);
}

void sub_1BB240FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t *a39)
{
  a39 = &a31;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12__cold_1((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A11E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A11E0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  result = (char *)operator new(0x28uLL);
  *(void *)result = &unk_1F14A11E0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A11E0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  v4 = *a3;
  v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_38;
  }
  LOBYTE(v41) = 0;
  BYTE8(v41) = 0;
  LOBYTE(v42) = 0;
  BYTE8(v42) = 0;
  LOBYTE(v43) = 0;
  BYTE8(v43) = 0;
  LOBYTE(v44) = 0;
  BYTE8(v44) = 0;
  v45[0] = 0;
  v45[8] = 0;
  v45[16] = 0;
  v45[24] = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  int v48 = 1065353216;
  int v51 = 1065353216;
  v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(*(void *)v7 + 48))(v7, v6, *(unsigned int *)(a1 + 32), &v41);
  char v9 = (char)v8;
  if (v8)
  {
    long long v30 = v43;
    long long v31 = v44;
    *(_OWORD *)long long v32 = *(_OWORD *)v45;
    *(_OWORD *)&v32[9] = *(_OWORD *)&v45[9];
    long long v28 = v41;
    long long v29 = v42;
    long long v10 = v46;
    long long v46 = 0uLL;
    long long v33 = v10;
    long long v34 = v47;
    int v35 = v48;
    if (*((void *)&v47 + 1))
    {
      unint64_t v11 = *(void *)(v47 + 8);
      if ((*((void *)&v10 + 1) & (*((void *)&v10 + 1) - 1)) != 0)
      {
        if (v11 >= *((void *)&v10 + 1)) {
          v11 %= *((void *)&v10 + 1);
        }
      }
      else
      {
        v11 &= *((void *)&v10 + 1) - 1;
      }
      *(void *)(v10 + 8 * v11) = &v34;
      long long v47 = 0uLL;
    }
    long long v23 = v49;
    long long v49 = 0uLL;
    long long v36 = v23;
    long long v37 = v50;
    int v38 = v51;
    if (*((void *)&v50 + 1))
    {
      unint64_t v24 = *(void *)(v50 + 8);
      if ((*((void *)&v23 + 1) & (*((void *)&v23 + 1) - 1)) != 0)
      {
        if (v24 >= *((void *)&v23 + 1)) {
          v24 %= *((void *)&v23 + 1);
        }
      }
      else
      {
        v24 &= *((void *)&v23 + 1) - 1;
      }
      *(void *)(v23 + 8 * v24) = &v37;
      long long v50 = 0uLL;
    }
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v14 = v40;
      unint64_t v15 = __p[1];
      v16 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if ((v14 & 0x80u) == 0) {
          unint64_t v17 = v14;
        }
        else {
          unint64_t v17 = (unint64_t)v15;
        }
        if ((v40 & 0x80u) == 0) {
          unint64_t v18 = __p;
        }
        else {
          unint64_t v18 = (void **)__p[0];
        }
        if (v17) {
          v19 = " ";
        }
        else {
          v19 = "";
        }
        v20 = "hardware";
        int v21 = *(_DWORD *)(a1 + 32);
        if (v21 == 1) {
          v20 = "echo";
        }
        *(_DWORD *)buf = 136315650;
        v53 = v18;
        __int16 v54 = 2080;
        v55 = v19;
        if (v21 == 2) {
          int v22 = "content";
        }
        else {
          int v22 = v20;
        }
        __int16 v56 = 2080;
        v57 = v22;
        _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration options for uplink %s DSP node", buf, 0x20u);
      }
      if ((char)v40 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v49);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v46);
  if ((v9 & 1) == 0)
  {
LABEL_38:
    LOBYTE(v28) = 0;
    BYTE8(v28) = 0;
    LOBYTE(v29) = 0;
    BYTE8(v29) = 0;
    LOBYTE(v30) = 0;
    BYTE8(v30) = 0;
    LOBYTE(v31) = 0;
    BYTE8(v31) = 0;
    v32[0] = 0;
    v32[8] = 0;
    v32[16] = 0;
    v32[24] = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    int v35 = 1065353216;
    int v38 = 1065353216;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)v4 = std::pmr::get_default_resource(v25);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id;
  uint64_t storage = (_OWORD *)vp::vx::data_flow::Value::allocate_storage(v4);
  *uint64_t storage = v28;
  storage[1] = v29;
  *(_OWORD *)((char *)storage + 73) = *(_OWORD *)&v32[9];
  storage[3] = v31;
  storage[4] = *(_OWORD *)v32;
  storage[2] = v30;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(storage + 6), (uint64_t *)&v33);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)storage + 136, (uint64_t *)&v36);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v36);
  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v33);
}

void sub_1BB2415D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 176, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 176, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

_OWORD *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::copy_value(uint64_t a1, _OWORD **a2, _OWORD **a3)
{
  return std::construct_at[abi:ne180100]<vp::vx::DSP_Node_Configuration_Options,vp::vx::DSP_Node_Configuration_Options const&,vp::vx::DSP_Node_Configuration_Options*>(*a2, *a3);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::move_value(uint64_t a1, _OWORD **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  long long v6 = *(_OWORD *)(*a3 + 48);
  long long v5 = *(_OWORD *)(*a3 + 64);
  long long v7 = *(_OWORD *)(*a3 + 32);
  *(_OWORD *)((char *)v3 + 73) = *(_OWORD *)(*a3 + 73);
  v3[3] = v6;
  v3[4] = v5;
  v3[2] = v7;
  long long v8 = *(_OWORD *)(v4 + 16);
  *uint64_t v3 = *(_OWORD *)v4;
  v3[1] = v8;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(v3 + 6), (uint64_t *)(v4 + 96));

  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)v3 + 136, (uint64_t *)(v4 + 136));
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::destroy_value(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(*a2 + 136);

  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v2 + 96);
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::DSP_Node_Configuration_Options>::compare_value(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return vp::vx::DSP_Node_Configuration_Options::operator==(*a2, *a3);
}

_OWORD *std::construct_at[abi:ne180100]<vp::vx::DSP_Node_Configuration_Options,vp::vx::DSP_Node_Configuration_Options const&,vp::vx::DSP_Node_Configuration_Options*>(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[4];
  *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)((char *)a2 + 73);
  a1[3] = v6;
  a1[4] = v7;
  a1[2] = v5;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)a1 + 136, (uint64_t)a2 + 136);
  return a1;
}

void sub_1BB2417D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL vp::vx::DSP_Node_Configuration_Options::operator==(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a1 + 8) != 0) != (v4 != 0)) {
      return 0;
    }
  }
  else if (*(double *)a1 != *(double *)a2)
  {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if ((*(unsigned char *)(a1 + 24) != 0) != (v6 != 0)) {
      return 0;
    }
  }
  else if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40) && *(unsigned char *)(a2 + 40))
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) != 0) != (*(unsigned char *)(a2 + 40) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a2 + 56))
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) != 0) != (*(unsigned char *)(a2 + 56) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 72) && *(unsigned char *)(a2 + 72))
  {
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 72) != 0) != (*(unsigned char *)(a2 + 72) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 88) && *(unsigned char *)(a2 + 88))
  {
    if (*(double *)(a1 + 80) == *(double *)(a2 + 80)) {
      goto LABEL_35;
    }
    return 0;
  }
  if ((*(unsigned char *)(a1 + 88) != 0) != (*(unsigned char *)(a2 + 88) != 0)) {
    return 0;
  }
LABEL_35:
  BOOL result = std::operator==[abi:ne180100]<std::string,unsigned int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,unsigned int>>>(a1 + 96, (void *)(a2 + 96));
  if (result) {
    return std::operator==[abi:ne180100]<std::string,unsigned int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,unsigned int>>>(a1 + 136, (void *)(a2 + 136));
  }
  return result;
}

BOOL std::operator==[abi:ne180100]<std::string,unsigned int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,unsigned int>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(a1 + 16);
  do
  {
    uint64_t v3 = (uint64_t *)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    BOOL v5 = (const void **)(v3 + 2);
    int v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6) {
      break;
    }
    BOOL v7 = v6;
    uint64_t v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    }
    else {
      uint64_t v9 = v3[3];
    }
    uint64_t v10 = v6[39];
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)v6 + 3);
    }
    if (v9 != v10) {
      break;
    }
    if (v11 >= 0) {
      unint64_t v12 = v6 + 16;
    }
    else {
      unint64_t v12 = (unsigned __int8 *)*((void *)v6 + 2);
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3])) {
        return v4;
      }
    }
    else if (*((unsigned char *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        BOOL v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    ;
  }
  while (*((_DWORD *)v3 + 10) == *((_DWORD *)v7 + 10));
  return v4;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A1290;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A1290;
  a2[1] = v2;
  return result;
}

unsigned int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUljjE_JjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  BOOL v4 = *a3;
  BOOL v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v6 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    int v6 = 0;
  }
  BOOL v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  unsigned int v8 = *v6;
  unsigned int v9 = *(_DWORD *)v7;
  if (v8 != *(_DWORD *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v12 = v22;
      v13 = __p[1];
      unint64_t v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        v16 = (void **)__p[0];
        if ((v22 & 0x80u) == 0) {
          v16 = __p;
        }
        if (v15) {
          unint64_t v17 = " ";
        }
        else {
          unint64_t v17 = "";
        }
        *(_DWORD *)buf = 136315394;
        unint64_t v24 = v16;
        __int16 v25 = 2080;
        v26 = v17;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference sample rates must be equal", buf, 0x16u);
      }
      if ((char)v22 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v8 <= v9) {
    unsigned int v18 = v9;
  }
  else {
    unsigned int v18 = v8;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)BOOL v4 = std::pmr::get_default_resource(v19);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  BOOL result = (unsigned int *)vp::vx::data_flow::Value::allocate_storage(v4);
  unsigned int *result = v18;
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A12D8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A12D8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(void *a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = (const void *)a1[2];
  *uint64_t v2 = &unk_1F14A12D8;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (void)v3) >> 2);
  return v2;
}

void sub_1BB241E10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1F14A12D8;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  BOOL v5 = *a3;
  int v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    BOOL v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  unsigned int v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unsigned int v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    unsigned int v9 = 0;
  }
  long long v10 = v7[1];
  v17[0] = *v7;
  v17[1] = v10;
  long long v11 = v7[2];
  long long v12 = v7[3];
  long long v13 = v7[4];
  *(_OWORD *)&v18[9] = *(_OWORD *)((char *)v7 + 73);
  v17[3] = v12;
  *(_OWORD *)unsigned int v18 = v13;
  v17[2] = v11;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v19, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v20, (uint64_t)v7 + 136);
  int v14 = (*(uint64_t (**)(void, _OWORD *, uint64_t, double))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v17, a1 + 16, *v9);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v19);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)BOOL v5 = std::pmr::get_default_resource(v15);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  BOOL result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v14;
  return result;
}

void sub_1BB242004(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A1320;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A1320;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JdjdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjdEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  BOOL v5 = *a3;
  int v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    BOOL v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  unsigned int v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    unsigned int v9 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    unsigned int v9 = 0;
  }
  long long v10 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[2]);
  int v11 = (*(uint64_t (**)(void, void, double, double))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), *v9, *v7, *v10);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)BOOL v5 = std::pmr::get_default_resource(v12);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  BOOL result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v11;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A1368;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A1368;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlddE_JddEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  BOOL v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    int v6 = 0;
  }
  BOOL v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  double v8 = *v6;
  double v9 = *(double *)v7;
  if (*v6 != *(double *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v12 = v21;
      long long v13 = __p[1];
      int v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        v16 = (void **)__p[0];
        if ((v21 & 0x80u) == 0) {
          v16 = __p;
        }
        if (v15) {
          unint64_t v17 = " ";
        }
        else {
          unint64_t v17 = "";
        }
        *(_DWORD *)buf = 136315394;
        long long v23 = v16;
        __int16 v24 = 2080;
        __int16 v25 = v17;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference block sizes must be equal", buf, 0x16u);
      }
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v8 < v9) {
    double v8 = v9;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v18);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  BOOL result = (double *)vp::vx::data_flow::Value::allocate_storage(v4);
  double *result = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A13B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A13B0;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JdjNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JdjSG_ddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  BOOL v5 = *a3;
  int v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    BOOL v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  double v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    double v9 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    double v9 = 0;
  }
  long long v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    int v11 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    long long v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    long long v13 = 0;
  }
  int v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unint64_t v15 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  }
  else {
    unint64_t v15 = 0;
  }
  v16 = v4[5];
  if (v16[2] == &vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id) {
    unint64_t v17 = (void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
  }
  else {
    unint64_t v17 = 0;
  }
  double v18 = *v7;
  uint64_t v19 = *v9;
  long long v21 = v11[3];
  long long v20 = v11[4];
  long long v22 = v11[2];
  *(_OWORD *)&v28[9] = *(_OWORD *)((char *)v11 + 73);
  v27[3] = v21;
  *(_OWORD *)long long v28 = v20;
  v27[2] = v22;
  long long v23 = v11[1];
  v27[0] = *v11;
  v27[1] = v23;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v29, (uint64_t)(v11 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v30, (uint64_t)v11 + 136);
  double v24 = (*(double (**)(void, uint64_t, uint64_t, _OWORD *, void, void, double, double, double))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), 1, v19, v27, *v17, v17[1], v18, *v13, *v15);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v30);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v29);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)BOOL v5 = std::pmr::get_default_resource(v25);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  BOOL result = (double *)vp::vx::data_flow::Value::allocate_storage(v5);
  double *result = v24;
  return result;
}

void sub_1BB242650(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F14A13F8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A13F8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_uplink_SRC_algorithmEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(unsigned char *)(v4 + 92)) {
    int v5 = *(_DWORD *)(v4 + 88);
  }
  else {
    int v5 = 1852797549;
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v6);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  BOOL result = (int *)vp::vx::data_flow::Value::allocate_storage(v3);
  int *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F14A1440;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1440;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor22get_uplink_SRC_qualityEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(unsigned char *)(v4 + 100)) {
    int v5 = *(_DWORD *)(v4 + 96);
  }
  else {
    int v5 = 127;
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v6);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  BOOL result = (int *)vp::vx::data_flow::Value::allocate_storage(v3);
  int *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F14A1488;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1488;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor32get_uplink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    int v6 = 0;
  }
  BOOL v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  LODWORD(v8) = *v6;
  if (COERCE_UNSIGNED_INT64(fabs((double)v8 * 1.25 / *v7)) >= 0x7FF0000000000000) {
    uint64_t v9 = 100;
  }
  else {
    uint64_t v9 = (uint64_t)((double)v8 * 1.25 / *v7 * 1000.0);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v10);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<std::chrono::duration<long long,std::ratio<1l,1000l>>>(void)::s_type_id;
  BOOL result = (uint64_t *)vp::vx::data_flow::Value::allocate_storage(v4);
  uint64_t *result = v9;
  return result;
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS7_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 + 48;
  v8[0] = &unk_1F14A14D0;
  v8[1] = 0;
  v8[3] = v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A14D0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A14D0;
  a2[1] = v2;
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  BOOL result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)32>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)34>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)35>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A1518;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A1518;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIiEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_uplink_mic_ref_sample_time_deltaEvENK3__0clEvEUlDpRKT_E_JNS3_20Uplink_ConfigurationEddjjddjjjjjjjjjEEEDaOT_DpRKNS4_5StateIT0_EEEUlSF_E_JSH_ddjjddjjjjjjjjjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Uplink_Configuration>(void)::s_type_id) {
    uint64_t v41 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v41 = 0;
  }
  int v6 = v3[1];
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    v39 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    v39 = 0;
  }
  BOOL v7 = v3[2];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v38 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    int v38 = 0;
  }
  unint64_t v8 = v3[3];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    long long v37 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    long long v37 = 0;
  }
  uint64_t v9 = v3[4];
  if (v9[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    long long v36 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  }
  else {
    long long v36 = 0;
  }
  long long v10 = v3[5];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v35 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    int v35 = 0;
  }
  int v11 = v3[6];
  if (v11[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    long long v34 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  }
  else {
    long long v34 = 0;
  }
  unint64_t v12 = v3[7];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    long long v13 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    long long v13 = 0;
  }
  int v14 = v3[8];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    unint64_t v15 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  }
  else {
    unint64_t v15 = 0;
  }
  v16 = v3[9];
  if (v16[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    unint64_t v17 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v16);
  }
  else {
    unint64_t v17 = 0;
  }
  double v18 = v3[10];
  if (v18[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v19 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v18);
  }
  else {
    uint64_t v19 = 0;
  }
  long long v20 = v3[11];
  if (v20[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    long long v21 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v20);
  }
  else {
    long long v21 = 0;
  }
  long long v22 = v3[12];
  if (v22[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    long long v23 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v22);
  }
  else {
    long long v23 = 0;
  }
  double v24 = v3[13];
  if (v24[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    __int16 v25 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v24);
  }
  else {
    __int16 v25 = 0;
  }
  uint64_t v26 = v3[14];
  if (v26[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v27 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v26);
  }
  else {
    uint64_t v27 = 0;
  }
  long long v28 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[15]);
  HIDWORD(v33) = *v27;
  HIDWORD(v32) = *v23;
  LODWORD(v33) = *v25;
  LODWORD(v32) = *v21;
  int v29 = (*(uint64_t (**)(void, uint64_t, void, void, void, void, void, void, double, double, double, double, uint64_t, uint64_t, _DWORD))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v41, *v37, *v36, *v13, *v15, *v17, *v19, *v39, *v38, *v35, *v34, v32, v33, *v28);
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v30);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<int>(void)::s_type_id;
  BOOL result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v4);
  _DWORD *result = v29;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F14A1560;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1560;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor37get_uplink_mic_ref_delay_millisecondsEvENK3__0clEvEUlT_T0_E_JidEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JidEEERNS4_13State_ManagerESC_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<int>(void)::s_type_id) {
    int v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    int v6 = 0;
  }
  float v7 = (double)*v6 / *(double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v8);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  BOOL result = (float *)vp::vx::data_flow::Value::allocate_storage(v4);
  float *result = v7;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F14A15A8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A15A8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor41get_uplink_ref_audio_ring_buffer_capacityEvENK3__0clEvEUlRKT_E_JNS3_20Uplink_ConfigurationEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(vp::vx::data_flow::Value::view_storage(**a2) + 8);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<std::chrono::duration<long long,std::ratio<1l,1000l>>>(void)::s_type_id;
  BOOL result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F14A15F0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A15F0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_mic_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  BOOL result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  *(void *)BOOL result = &unk_1F14A1638;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1638;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_uplink_ref_sample_rateEvENK3__0clEvEUlT_E_JN2CA17StreamDescriptionEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESC_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  BOOL result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A1680;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A1680;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  BOOL result = (char *)operator new(0x20uLL);
  *(void *)BOOL result = &unk_1F14A1680;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1680;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22Downlink_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    char v13 = 0;
    char v12 = 0;
    char v11 = 0;
    char v10 = 0;
    char v9 = 0;
LABEL_22:
    int v14 = 1108869120;
    goto LABEL_23;
  }
  char v33 = 0;
  char v36 = 0;
  char v39 = 0;
  char v42 = 0;
  char v45 = 0;
  int v48 = 1108869120;
  unint64_t v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v7 + 32))(v7, v6, &v33);
  if ((v8 & 1) == 0)
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v17 = v32;
      double v18 = __p[1];
      uint64_t v19 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        if ((v17 & 0x80u) == 0) {
          unint64_t v20 = v17;
        }
        else {
          unint64_t v20 = (unint64_t)v18;
        }
        long long v21 = (void **)__p[0];
        if ((v32 & 0x80u) == 0) {
          long long v21 = __p;
        }
        if (v20) {
          long long v22 = " ";
        }
        else {
          long long v22 = "";
        }
        *(_DWORD *)buf = 136315394;
        long long v50 = v21;
        __int16 v51 = 2080;
        __int16 v52 = v22;
        _os_log_impl(&dword_1BB0CE000, v19, OS_LOG_TYPE_ERROR, "%s%sfailed to get downlink configuration", buf, 0x16u);
      }
      if ((char)v32 < 0) {
        operator delete(__p[0]);
      }
    }
    char v13 = 0;
    char v12 = 0;
    char v11 = 0;
    char v10 = 0;
    char v9 = 0;
    goto LABEL_22;
  }
  char v9 = v33;
  LOWORD(__p[0]) = v34;
  BYTE2(__p[0]) = v35;
  char v10 = v36;
  *(_WORD *)buf = v37;
  buf[2] = v38;
  char v11 = v39;
  __int16 v29 = v40;
  char v30 = v41;
  char v12 = v42;
  char v28 = v44;
  __int16 v27 = v43;
  char v13 = v45;
  char v26 = v47;
  __int16 v25 = v46;
  int v14 = v48;
LABEL_23:
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v23);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Downlink_Configuration>(void)::s_type_id;
  uint64_t result = vp::vx::data_flow::Value::allocate_storage(v4);
  *(unsigned char *)uint64_t result = v9;
  *(_WORD *)(result + 1) = __p[0];
  *(unsigned char *)(result + 3) = BYTE2(__p[0]);
  *(unsigned char *)(result + 4) = v10;
  *(_WORD *)(result + 5) = *(_WORD *)buf;
  *(unsigned char *)(result + 7) = buf[2];
  *(unsigned char *)(result + 8) = v11;
  *(_WORD *)(result + 9) = v29;
  *(unsigned char *)(result + 11) = v30;
  *(unsigned char *)(result + 12) = v12;
  *(unsigned char *)(result + 15) = v28;
  *(_WORD *)(result + 13) = v27;
  *(unsigned char *)(result + 16) = v13;
  *(unsigned char *)(result + 19) = v26;
  *(_WORD *)(result + 17) = v25;
  *(_DWORD *)(result + 20) = v14;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 24, 4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 24, 4);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::copy_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  uint64_t v3 = *a2;
  __n128 result = **a3;
  v3[1].n128_u64[0] = (*a3)[1].n128_u64[0];
  *uint64_t v3 = result;
  return result;
}

__n128 vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::move_value(uint64_t a1, __n128 **a2, __n128 **a3)
{
  uint64_t v3 = *a2;
  __n128 result = **a3;
  v3[1].n128_u64[0] = (*a3)[1].n128_u64[0];
  *uint64_t v3 = result;
  return result;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::Downlink_Configuration>::compare_value(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  return vp::vx::Downlink_Configuration::operator==(*a2, *a3);
}

BOOL vp::vx::Downlink_Configuration::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a2[8];
  if (a1[8]) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if ((a1[8] != 0) != (v2 != 0)) {
      return 0;
    }
  }
  else if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1))
  {
    return 0;
  }
  if (a1[16] && a2[16])
  {
    if (*((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3)) {
      return 0;
    }
  }
  else if ((a1[16] != 0) != (a2[16] != 0))
  {
    return 0;
  }
  return *((float *)a1 + 5) == *((float *)a2 + 5);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A1730;
  int v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A1730;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_1F14A1730;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1730;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_34;
  }
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  *(_OWORD *)uint8_t v38 = 0u;
  int v42 = 1065353216;
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v45 = 0u;
  memset(v46, 0, sizeof(v46));
  memset(v47, 0, 25);
  unint64_t v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, void, void **))(*(void *)v7 + 56))(v7, v6, *(unsigned int *)(a1 + 32), v38);
  char v9 = (char)v8;
  if (v8)
  {
    *(_OWORD *)char v26 = *(_OWORD *)v38;
    v38[0] = 0;
    v38[1] = 0;
    long long v10 = v39;
    long long v11 = v40;
    *(void *)&long long v40 = 0;
    long long v39 = 0uLL;
    long long v27 = v10;
    *(void *)&long long v28 = v11;
    *((void *)&v28 + 1) = *((void *)&v40 + 1);
    uint64_t v29 = v41;
    int v30 = v42;
    if (v41)
    {
      unint64_t v12 = *(void *)(*((void *)&v11 + 1) + 8);
      if (((unint64_t)v11 & ((void)v11 - 1)) != 0)
      {
        if (*((void *)&v11 + 1) >= (unint64_t)v11) {
          unint64_t v12 = *((void *)&v11 + 1) % (unint64_t)v11;
        }
      }
      else
      {
        unint64_t v12 = *((void *)&v11 + 1) & (v11 - 1);
      }
      *(void *)(*((void *)&v10 + 1) + 8 * v12) = (char *)&v28 + 8;
      *((void *)&v40 + 1) = 0;
      uint64_t v41 = 0;
    }
    *(void *)&v32[0] = *(void *)&v44[0];
    long long v31 = v43;
    memset(v44, 0, sizeof(v44));
    long long v43 = 0uLL;
    *(_OWORD *)((char *)v32 + 8) = *(_OWORD *)((char *)v44 + 8);
    *((void *)&v32[1] + 1) = *((void *)&v44[1] + 1);
    long long v33 = v45;
    long long v45 = 0uLL;
    long long v23 = v46[0];
    memset(v46, 0, sizeof(v46));
    *(_OWORD *)&v34[1] = *(_OWORD *)&v46[1];
    v34[0] = v23;
    v34[3] = v46[3];
    v35[0] = v47[0];
    *(void *)&v35[1] = *(void *)&v47[1];
    memset(v47, 0, 24);
    BYTE8(v35[1]) = BYTE8(v47[1]);
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v15 = v37;
      v16 = __p[1];
      unint64_t v17 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if ((v15 & 0x80u) == 0) {
          unint64_t v18 = v15;
        }
        else {
          unint64_t v18 = (unint64_t)v16;
        }
        uint64_t v19 = __p;
        if ((v37 & 0x80u) != 0) {
          uint64_t v19 = (void **)__p[0];
        }
        if (v18) {
          unint64_t v20 = " ";
        }
        else {
          unint64_t v20 = "";
        }
        unsigned int v21 = *(_DWORD *)(a1 + 32) - 1;
        if (v21 > 2) {
          long long v22 = "voice mix";
        }
        else {
          long long v22 = off_1E6237B38[v21];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v49 = 2080;
        long long v50 = v20;
        __int16 v51 = 2080;
        __int16 v52 = v22;
        _os_log_impl(&dword_1BB0CE000, v17, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration for downlink %s DSP node", buf, 0x20u);
      }
      if ((char)v37 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  *(void *)buf = v47;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v46[1])
  {
    v46[2] = v46[1];
    operator delete(v46[1]);
  }
  *(void *)buf = &v45;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = (char *)v44 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = &v43;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v39 + 8);
  if (SBYTE7(v39) < 0) {
    operator delete(v38[0]);
  }
  if ((v9 & 1) == 0)
  {
LABEL_34:
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)char v26 = 0u;
    int v30 = 1065353216;
    long long v31 = 0u;
    memset(v32, 0, sizeof(v32));
    long long v33 = 0u;
    memset(v34, 0, sizeof(v34));
    memset(v35, 0, 25);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v24);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v4);
  *(void *)(storage + 16) = v27;
  *(_OWORD *)uint64_t storage = *(_OWORD *)v26;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table(storage + 24, (uint64_t *)&v27 + 1);
  *(void *)(storage + 80) = 0;
  *(void *)(storage + 88) = 0;
  *(void *)(storage + 64) = 0;
  *(void *)(storage + 72) = 0;
  *(_OWORD *)(storage + 64) = v31;
  *(void *)(storage + 80) = *(void *)&v32[0];
  long long v31 = 0uLL;
  *(void *)(storage + 96) = 0;
  *(void *)(storage + 104) = 0;
  *(_OWORD *)(storage + 88) = *(_OWORD *)((char *)v32 + 8);
  *(void *)(storage + 104) = *((void *)&v32[1] + 1);
  *(void *)(storage + 112) = 0;
  memset(v32, 0, sizeof(v32));
  *(void *)(storage + 120) = 0;
  *(void *)(storage + 128) = 0;
  *(_OWORD *)(storage + 112) = v33;
  long long v33 = 0uLL;
  *(void **)(storage + 128) = v34[0];
  *(void *)(storage + 136) = 0;
  *(void *)(storage + 144) = 0;
  *(void *)(storage + 152) = 0;
  *(_OWORD *)(storage + 136) = *(_OWORD *)&v34[1];
  *(void **)(storage + 152) = v34[3];
  *(void *)(storage + 160) = 0;
  memset(v34, 0, sizeof(v34));
  *(void *)(storage + 168) = 0;
  *(void *)(storage + 176) = 0;
  *(_OWORD *)(storage + 160) = v35[0];
  *(void *)(storage + 176) = *(void *)&v35[1];
  memset(v35, 0, 24);
  *(unsigned char *)(storage + 184) = BYTE8(v35[1]);
  v38[0] = v35;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  if (v34[1])
  {
    v34[2] = v34[1];
    operator delete(v34[1]);
  }
  v38[0] = &v33;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  v38[0] = (char *)v32 + 8;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  v38[0] = &v31;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v27 + 8);
}

void sub_1BB244150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t *a39)
{
  a39 = &a31;
  std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12__cold_1((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A1778;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A1778;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_1F14A1778;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1778;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_30DSP_Node_Configuration_OptionsEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_configuration_optionsENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Configuration_Context>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    goto LABEL_36;
  }
  LOBYTE(v40) = 0;
  BYTE8(v40) = 0;
  LOBYTE(v41) = 0;
  BYTE8(v41) = 0;
  LOBYTE(v42) = 0;
  BYTE8(v42) = 0;
  LOBYTE(v43) = 0;
  BYTE8(v43) = 0;
  v44[0] = 0;
  v44[8] = 0;
  v44[16] = 0;
  v44[24] = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  int v47 = 1065353216;
  int v50 = 1065353216;
  unint64_t v8 = (vp *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(*(void *)v7 + 64))(v7, v6, *(unsigned int *)(a1 + 32), &v40);
  char v9 = (char)v8;
  if (v8)
  {
    long long v29 = v42;
    long long v30 = v43;
    *(_OWORD *)long long v31 = *(_OWORD *)v44;
    *(_OWORD *)&v31[9] = *(_OWORD *)&v44[9];
    long long v27 = v40;
    long long v28 = v41;
    long long v10 = v45;
    long long v45 = 0uLL;
    long long v32 = v10;
    long long v33 = v46;
    int v34 = v47;
    if (*((void *)&v46 + 1))
    {
      unint64_t v11 = *(void *)(v46 + 8);
      if ((*((void *)&v10 + 1) & (*((void *)&v10 + 1) - 1)) != 0)
      {
        if (v11 >= *((void *)&v10 + 1)) {
          v11 %= *((void *)&v10 + 1);
        }
      }
      else
      {
        v11 &= *((void *)&v10 + 1) - 1;
      }
      *(void *)(v10 + 8 * v11) = &v33;
      long long v46 = 0uLL;
    }
    long long v22 = v48;
    long long v48 = 0uLL;
    long long v35 = v22;
    long long v36 = v49;
    int v37 = v50;
    if (*((void *)&v49 + 1))
    {
      unint64_t v23 = *(void *)(v49 + 8);
      if ((*((void *)&v22 + 1) & (*((void *)&v22 + 1) - 1)) != 0)
      {
        if (v23 >= *((void *)&v22 + 1)) {
          v23 %= *((void *)&v22 + 1);
        }
      }
      else
      {
        v23 &= *((void *)&v22 + 1) - 1;
      }
      *(void *)(v22 + 8 * v23) = &v36;
      long long v49 = 0uLL;
    }
  }
  else
  {
    log = vp::get_log(v8);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v14 = v39;
      unint64_t v15 = __p[1];
      v16 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if ((v14 & 0x80u) == 0) {
          unint64_t v17 = v14;
        }
        else {
          unint64_t v17 = (unint64_t)v15;
        }
        if ((v39 & 0x80u) == 0) {
          unint64_t v18 = __p;
        }
        else {
          unint64_t v18 = (void **)__p[0];
        }
        if (v17) {
          uint64_t v19 = " ";
        }
        else {
          uint64_t v19 = "";
        }
        unsigned int v20 = *(_DWORD *)(a1 + 32) - 1;
        if (v20 > 2) {
          unsigned int v21 = "voice mix";
        }
        else {
          unsigned int v21 = off_1E6237B38[v20];
        }
        *(_DWORD *)buf = 136315650;
        __int16 v52 = v18;
        __int16 v53 = 2080;
        __int16 v54 = v19;
        __int16 v55 = 2080;
        __int16 v56 = v21;
        _os_log_impl(&dword_1BB0CE000, v16, OS_LOG_TYPE_ERROR, "%s%sfailed to get configuration options for downlink %s DSP node", buf, 0x20u);
      }
      if ((char)v39 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v48);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v45);
  if ((v9 & 1) == 0)
  {
LABEL_36:
    LOBYTE(v27) = 0;
    BYTE8(v27) = 0;
    LOBYTE(v28) = 0;
    BYTE8(v28) = 0;
    LOBYTE(v29) = 0;
    BYTE8(v29) = 0;
    LOBYTE(v30) = 0;
    BYTE8(v30) = 0;
    v31[0] = 0;
    v31[8] = 0;
    v31[16] = 0;
    v31[24] = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    int v34 = 1065353216;
    int v37 = 1065353216;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v24);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id;
  uint64_t storage = (_OWORD *)vp::vx::data_flow::Value::allocate_storage(v4);
  *uint64_t storage = v27;
  storage[1] = v28;
  *(_OWORD *)((char *)storage + 73) = *(_OWORD *)&v31[9];
  storage[3] = v30;
  storage[4] = *(_OWORD *)v31;
  storage[2] = v29;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)(storage + 6), (uint64_t *)&v32);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__hash_table((uint64_t)storage + 136, (uint64_t *)&v35);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v35);
  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v32);
}

void sub_1BB244744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A17C0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A17C0;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JddjbdjEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    char v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    char v9 = 0;
  }
  long long v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    unint64_t v11 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    char v13 = (unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    char v13 = 0;
  }
  unint64_t v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unint64_t v15 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  }
  else {
    unint64_t v15 = 0;
  }
  v16 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[5]);
  int v17 = (*(uint64_t (**)(void, void, void, void, double, double, double))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *v11, *v13, *v16, *v7, *v9, *v15);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v18);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v17;
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A1808;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A1808;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(void *a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = (const void *)a1[2];
  *uint64_t v2 = &unk_1F14A1808;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (void)v3) >> 2);
  return v2;
}

void sub_1BB244A84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1F14A1808;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E0_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    char v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    char v9 = 0;
  }
  long long v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unint64_t v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    char v13 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    char v13 = 0;
  }
  long long v14 = v7[1];
  v21[0] = *v7;
  v21[1] = v14;
  long long v15 = v7[2];
  long long v16 = v7[3];
  long long v17 = v7[4];
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)v7 + 73);
  v21[3] = v16;
  *(_OWORD *)long long v22 = v17;
  v21[2] = v15;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v23, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v24, (uint64_t)v7 + 136);
  int v18 = (*(uint64_t (**)(void, _OWORD *, void, uint64_t, double, double))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v21, *v13, a1 + 16, *v9, *v11);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v24);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v23);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v19);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v18;
  return result;
}

void sub_1BB244CD0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A1850;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A1850;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor14get_block_sizeENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E1_JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_djEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    char v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    char v9 = 0;
  }
  long long v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    unint64_t v11 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    unint64_t v11 = 0;
  }
  long long v12 = v7[1];
  v19[0] = *v7;
  v19[1] = v12;
  long long v13 = v7[2];
  long long v14 = v7[3];
  long long v15 = v7[4];
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v7 + 73);
  v19[3] = v14;
  *(_OWORD *)unsigned int v20 = v15;
  v19[2] = v13;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v21, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v22, (uint64_t)v7 + 136);
  int v16 = (*(uint64_t (**)(void, _OWORD *, void, double))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), v19, *v11, *v9);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v21);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v17);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v16;
  return result;
}

void sub_1BB244EE4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A1898;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A1898;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(void *a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = (const void *)a1[2];
  *uint64_t v2 = &unk_1F14A1898;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (void)v3) >> 2);
  return v2;
}

void sub_1BB245020(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1F14A1898;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor18get_fft_block_sizeENS3_20Downlink_DSP_Node_IDEE3__0JNS3_30DSP_Node_Configuration_OptionsEdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_djEEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    char v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    char v9 = 0;
  }
  long long v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    unint64_t v11 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    unint64_t v11 = 0;
  }
  long long v12 = v7[1];
  v19[0] = *v7;
  v19[1] = v12;
  long long v13 = v7[2];
  long long v14 = v7[3];
  long long v15 = v7[4];
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v7 + 73);
  v19[3] = v14;
  *(_OWORD *)unsigned int v20 = v15;
  v19[2] = v13;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v21, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v22, (uint64_t)v7 + 136);
  int v16 = (*(uint64_t (**)(void, _OWORD *, void, uint64_t, double))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), v19, *v11, a1 + 16, *v9);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v21);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v17);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v16;
  return result;
}

void sub_1BB245248(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A18E0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A18E0;
  a2[1] = v2;
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor23get_block_size_is_fixedENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_ddjEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    char v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    char v9 = 0;
  }
  long long v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unint64_t v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    unint64_t v11 = 0;
  }
  long long v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    long long v13 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    long long v13 = 0;
  }
  long long v14 = v7[1];
  v21[0] = *v7;
  v21[1] = v14;
  long long v15 = v7[2];
  long long v16 = v7[3];
  long long v17 = v7[4];
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)v7 + 73);
  v21[3] = v16;
  *(_OWORD *)long long v22 = v17;
  v21[2] = v15;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v23, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v24, (uint64_t)v7 + 136);
  char v18 = (*(uint64_t (**)(void, _OWORD *, void, double, double))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v21, *v13, *v9, *v11);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v24);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v23);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v19);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v5);
  unsigned char *result = v18;
  return result;
}

void sub_1BB245488(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1928;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1928;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_RKT0_E_JNS3_30DSP_Node_Configuration_OptionsEdEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSK_dEEERNS4_13State_ManagerESD_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  if (*(unsigned char *)(v6 + 8)) {
    unint64_t v8 = (uint64_t *)v6;
  }
  else {
    unint64_t v8 = (uint64_t *)v7;
  }
  uint64_t v9 = *v8;
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v10);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  __n128 result = (void *)vp::vx::data_flow::Value::allocate_storage(v4);
  void *result = v9;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A1970;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A1970;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlDpT_E_JNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKSD_E_JSG_dddSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = (_OWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    uint64_t v9 = 0;
  }
  long long v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unint64_t v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    unint64_t v11 = 0;
  }
  long long v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    long long v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    long long v13 = 0;
  }
  long long v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id) {
    long long v15 = (void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  }
  else {
    long long v15 = 0;
  }
  long long v16 = v7[1];
  v23[0] = *v7;
  v23[1] = v16;
  long long v17 = v7[2];
  long long v18 = v7[3];
  long long v19 = v7[4];
  *(_OWORD *)&v24[9] = *(_OWORD *)((char *)v7 + 73);
  v23[3] = v18;
  *(_OWORD *)double v24 = v19;
  v23[2] = v17;
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v25, (uint64_t)(v7 + 6));
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v26, (uint64_t)v7 + 136);
  double v20 = (*(double (**)(void, uint64_t, _OWORD *, void, void, double, double, double))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1, v23, *v15, v15[1], *v9, *v11, *v13);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v26);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v25);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v21);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  __n128 result = (double *)vp::vx::data_flow::Value::allocate_storage(v5);
  double *result = v20;
  return result;
}

void sub_1BB245820(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A19B8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A19B8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  __n128 result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1A00;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1A00;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor15get_sample_rateENS3_20Downlink_DSP_Node_IDEENK3__0clEvEUlRKT_E0_JN2CA17StreamDescriptionEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESD_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  __n128 result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1A48;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1A48;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_downlink_SRC_algorithmEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(unsigned char *)(v4 + 8)) {
    int v5 = *(_DWORD *)(v4 + 4);
  }
  else {
    int v5 = 1852797549;
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v6);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (int *)vp::vx::data_flow::Value::allocate_storage(v3);
  int *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1A90;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1A90;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_downlink_SRC_qualityEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  if (*(unsigned char *)(v4 + 16)) {
    int v5 = *(_DWORD *)(v4 + 12);
  }
  else {
    int v5 = 127;
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v6);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (int *)vp::vx::data_flow::Value::allocate_storage(v3);
  int *result = v5;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1AD8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1AD8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_6chrono8durationIxNS_5ratioILl1ELl1000EEEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor34get_downlink_wire_storage_capacityEvENK3__0clEvEUlT_T0_E_JjN2CA17StreamDescriptionEEEEDaOSH_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjSL_EEERNS4_13State_ManagerESH_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  LODWORD(v8) = *v6;
  if (COERCE_UNSIGNED_INT64(fabs((double)v8 * 1.25 / *v7)) >= 0x7FF0000000000000) {
    uint64_t v9 = 100;
  }
  else {
    uint64_t v9 = (uint64_t)((double)v8 * 1.25 / *v7 * 1000.0);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v10);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<std::chrono::duration<long long,std::ratio<1l,1000l>>>(void)::s_type_id;
  __n128 result = (uint64_t *)vp::vx::data_flow::Value::allocate_storage(v4);
  uint64_t *result = v9;
  return result;
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)6>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1B20;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1B20;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_downlink_software_volume_pre_gain_dBEvENK3__0clEvEUlRKNS3_22Downlink_ConfigurationEfE_JSC_fEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_fEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Downlink_Configuration>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  float v7 = fminf(0.0- (float)((float)(1.0 - *(float *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]))* *(float *)(v6 + 20)), 0.0);
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v8);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  __n128 result = (float *)vp::vx::data_flow::Value::allocate_storage(v4);
  float *result = v7;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1B68;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1B68;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor16get_spatial_modeEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1BB0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1BB0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor30get_spatial_head_tracking_modeEvENK3__0clEvEUlNS3_14Operation_ModeENS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_SD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_SD_EEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id) {
    uint64_t v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  if (*v6 == 4) {
    int v8 = 5;
  }
  else {
    int v8 = 0;
  }
  if (*v6 == 2) {
    int v9 = 4;
  }
  else {
    int v9 = v8;
  }
  if ((v7 & 0x100000000) != 0) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v11);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (int *)vp::vx::data_flow::Value::allocate_storage(v4);
  int *result = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1BF8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1BF8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_spatial_head_tracking_enabledEvENK3__0clEvEUlNS3_35Spatial_Head_Tracking_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESF_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = *(unsigned char *)(vp::vx::data_flow::Value::view_storage(**a2) + 4) & 1;
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1C40;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1C40;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

BOOL *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor40get_other_audio_advanced_ducking_enabledEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  BOOL v4 = *(unsigned char *)vp::vx::data_flow::Value::view_storage(**a2) != 0;
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (BOOL *)vp::vx::data_flow::Value::allocate_storage(v3);
  BOOL *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1C88;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1C88;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionI31AUVoiceIOOtherAudioDuckingLevelEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor38get_other_audio_advanced_ducking_levelEvENK3__0clEvEUlRK39AUVoiceIOOtherAudioDuckingConfigurationE_JSD_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + 4);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingLevel>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::copy_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::move_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<AUVoiceIOOtherAudioDuckingLevel>::compare_value(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

_DWORD *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A1D38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1D38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor33get_should_use_internal_referenceEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  int v4 = *a3;
  int v5 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  if (v5 == 2)
  {
    BOOL v6 = 1;
  }
  else if (v5)
  {
    BOOL v6 = 0;
  }
  else
  {
    BOOL v6 = *(_DWORD *)(a1 + 8) != 3;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)int v4 = std::pmr::get_default_resource(v7);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (BOOL *)vp::vx::data_flow::Value::allocate_storage(v4);
  BOOL *result = v6;
  return result;
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A1D80;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A1D80;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A1D80;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A1D80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_use_internal_reference(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        if (*a3) {
          int v10 = "should";
        }
        else {
          int v10 = "should not";
        }
        caulk::make_string((caulk *)"%s use internal reference", (uint64_t)__p, v10);
        char v13 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)1>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A1DC8;
  vp::Context::~Context((vp::Context *)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A1DC8;
  vp::Context::~Context((vp::Context *)(a1 + 1));

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0xD0uLL);
  *uint64_t v3 = &unk_1F14A1DC8;
  vp::Context::Context((uint64_t)(v3 + 1), v2);
  v3[25] = *(void *)(a1 + 200);
  return v3;
}

void sub_1BB24697C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A1DC8;
  uint64_t result = vp::Context::Context((uint64_t)(a2 + 1), a1 + 8);
  a2[25] = *(void *)(a1 + 200);
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7destroyEv(uint64_t a1)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE18destroy_deallocateEv(uint64_t a1)
{
  vp::Context::~Context((vp::Context *)(a1 + 8));

  operator delete((void *)a1);
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor39get_should_enable_graph_audio_recordersEvENK3__0clEvEUlbE_JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a3;
  int v5 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage(**a2);
  int v6 = *(unsigned __int8 *)(a1 + 24);
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"Carrier", 7, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BOOL v7 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(a1 + 16), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  if (v5)
  {
    int v8 = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 204)) {
      BOOL v9 = *(_DWORD *)(a1 + 200) > 6u;
    }
    else {
      BOOL v9 = 0;
    }
    int v8 = v9;
  }
  if ((v8 & (v6 | v7)) != 0)
  {
    char v10 = 1;
  }
  else if (*(unsigned char *)(a1 + 104))
  {
    if (*(unsigned char *)(a1 + 176)) {
      BOOL v11 = *(_DWORD *)(a1 + 172) > 6u;
    }
    else {
      BOOL v11 = 0;
    }
    char v10 = v11;
  }
  else
  {
    char v10 = 0;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v12);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (char *)vp::vx::data_flow::Value::allocate_storage(v4);
  char *result = v10;
  return result;
}

void sub_1BB246B78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)6>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A1E10;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1E10;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor26get_should_connect_to_AUPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  int v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    BOOL v7 = (unsigned char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    BOOL v9 = (unsigned char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    BOOL v9 = 0;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    char v10 = 0;
  }
  else
  {
    if (*v9) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *v7 == 0;
    }
    char v10 = !v11;
  }
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v12);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (char *)vp::vx::data_flow::Value::allocate_storage(v5);
  char *result = v10;
  return result;
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)7>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A1E58;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1E58;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor25get_should_connect_to_RPBEvENK3__0clEvEUlbbE_JbbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbbEEERNS4_13State_ManagerESE_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  int v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    BOOL v7 = (unsigned char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    BOOL v9 = (unsigned char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    BOOL v9 = 0;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    char v10 = 0;
  }
  else
  {
    if (*v9) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *v7 == 0;
    }
    char v10 = !v11;
  }
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v12);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (char *)vp::vx::data_flow::Value::allocate_storage(v5);
  char *result = v10;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A1EA0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1EA0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor29get_should_fade_audio_buffersEvENK3__0clEvEUlRKNS3_20Global_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = *(unsigned char *)(vp::vx::data_flow::Value::view_storage(**a2) + 100) & 1;
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

void *std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A1EE8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A1EE8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A1EE8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A1EE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_global<BOOL,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_fade_audio_buffers(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    BOOL v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        if (*a3) {
          char v10 = "should";
        }
        else {
          char v10 = "should not";
        }
        caulk::make_string((caulk *)"%s fade audio buffers", (uint64_t)__p, v10);
        char v13 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 16))(v9, v6, __p);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A1F30;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A1F30;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor36get_should_wire_uplink_mic_clip_dataEvENK3__0clEvEUlRKNS3_20Uplink_ConfigurationEE_JSC_EEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSC_EEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = *(unsigned char *)(vp::vx::data_flow::Value::view_storage(**a2) + 104);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A1F78;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A1F78;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A1F78;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A1F78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1},std::allocator<void vp::vx::observe_uplink<BOOL,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1}>(std::weak_ptr<vp::vx::Voice_Processor_State_Observer>,vp::vx::data_flow::State<BOOL> &,vp::vx::Voice_Processor::get_should_wire_uplink_mic_clip_data(void)::$_0::operator() const(void)::{lambda(BOOL)#1})::{lambda(unsigned int,BOOL const&)#1}>,void ()(unsigned int,BOOL const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned char *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a2;
    BOOL v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        if (*a3) {
          char v10 = "should";
        }
        else {
          char v10 = "should not";
        }
        caulk::make_string((caulk *)"%s wire uplink microphone clip data", (uint64_t)__p, v10);
        char v13 = 1;
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v9 + 24))(v9, v6, __p);
        if (v13)
        {
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

__n128 std::__optional_storage_base<std::vector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<float>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      result.n128_u64[0] = std::vector<float>::__move_assign(a1, a2).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14A1FC0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14A1FC0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A1FC0;
  std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB2477E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A1FC0;
  return std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE7destroyEv(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v1 = *(void **)(a1 + 8);
    if (v1)
    {
      *(void *)(a1 + 16) = v1;
      operator delete(v1);
    }
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EE18destroy_deallocateEv(void *__p)
{
  if (*((unsigned char *)__p + 32))
  {
    uint64_t v2 = (void *)__p[1];
    if (v2)
    {
      __p[2] = v2;
      operator delete(v2);
    }
  }

  operator delete(__p);
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor49create_mic_trim_gains_dsp_property_override_stateEvE3__0JNS3_15Input_Port_TypeEN2CA17StreamDescriptionENS_6vectorIfNS_9allocatorIfEEEENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SH_SL_SM_EEERNS4_13State_ManagerESO_SV_EUlPPKNS4_5ValueEPS13_E_NSJ_IS18_EEFvS16_S17_EEclEOS16_OS17_(CFDictionaryRef CFDictionaryRef, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id) {
    BOOL v7 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id) {
    uint64_t v9 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    uint64_t v9 = 0;
  }
  char v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id) {
    uint64_t v11 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    uint64_t v11 = 0;
  }
  char v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id) {
    char v13 = (CFArrayRef *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    char v13 = 0;
  }
  if (*v7 != 1) {
    goto LABEL_56;
  }
  if (*((unsigned char *)CFDictionaryRef + 32))
  {
    long long v14 = (const UInt8 *)*((void *)CFDictionaryRef + 1);
    CFIndex v15 = *((void *)CFDictionaryRef + 2) - (void)v14;
    LODWORD(v16) = *(_DWORD *)(v9 + 28);
    uint64_t v16 = (*(unsigned char *)(v9 + 12) & 0x20) != 0 ? v16 : 1;
    if (v16 == v15 >> 2)
    {
      CFDataRef v17 = CFDataCreate(0, v14, v15);
      if (!v17)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v35, v17);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v37, "Data", &v35);
      long long v32 = &v37;
      uint64_t v33 = 1;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v32);
      if (cf) {
        CFRelease(cf);
      }
      if (v37) {
        CFRelease(v37);
      }
      if (v35) {
        CFRelease(v35);
      }
      goto LABEL_57;
    }
  }
  if (!*v13 || (vp::vx::trim_gains_parse_cf(v13, (uint64_t)&v32), !v34))
  {
LABEL_44:
    long long v22 = *(const UInt8 **)v11;
    uint64_t v23 = *(void *)(v11 + 8);
    if (*(void *)v11 != v23)
    {
      CFIndex v24 = v23 - (void)v22;
      LODWORD(v23) = *(_DWORD *)(v9 + 28);
      uint64_t v23 = (*(unsigned char *)(v9 + 12) & 0x20) != 0 ? v23 : 1;
      if (v23 == v24 >> 2)
      {
        CFDataRef v25 = CFDataCreate(0, v22, v24);
        if (!v25)
        {
          long long v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v29, "Could not construct");
        }
        applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v35, v25);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v37, "Data", &v35);
        long long v32 = &v37;
        uint64_t v33 = 1;
        CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v32);
        if (cf) {
          CFRelease(cf);
        }
        if (v37) {
          CFRelease(v37);
        }
        if (v35) {
          CFRelease(v35);
        }
        goto LABEL_57;
      }
    }
LABEL_56:
    CFDictionaryRef = 0;
    goto LABEL_57;
  }
  long long v18 = (UInt8 *)v32;
  uint64_t v19 = (v33 - (uint64_t)v32) >> 2;
  if ((*(unsigned char *)(v9 + 12) & 0x20) != 0) {
    uint64_t v20 = *(unsigned int *)(v9 + 28);
  }
  else {
    uint64_t v20 = 1;
  }
  if (v19 == v20)
  {
    CFDataRef v21 = CFDataCreate(0, (const UInt8 *)v32, v33 - (void)v32);
    if (!v21)
    {
      long long v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v30, "Could not construct");
    }
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v31, v21);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v35, "Data", &v31);
    CFTypeRef v37 = &v35;
    CFTypeRef cf = (CFTypeRef)1;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v37);
    if (v36) {
      CFRelease(v36);
    }
    if (v35) {
      CFRelease(v35);
    }
    if (v31) {
      CFRelease(v31);
    }
    if (!v34) {
      goto LABEL_57;
    }
    long long v18 = (UInt8 *)v32;
  }
  if (v18)
  {
    uint64_t v33 = (uint64_t)v18;
    operator delete(v18);
  }
  if (v19 != v20) {
    goto LABEL_44;
  }
LABEL_57:
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v26);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  __n128 result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v5);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB247C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, void *__p, uint64_t a11, uint64_t a12, char a13, CFTypeRef a14, CFTypeRef cf, CFTypeRef a16, CFTypeRef a17)
{
  __cxa_free_exception(v17);
  if (a13)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<float>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<float>,false> const&>((void *)a1, a2);
  return a1;
}

void sub_1BB247E08(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__optional_storage_base<std::vector<float>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<float>,false> const&>(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    CFDictionaryRef *result = 0;
    result[1] = 0;
    result[2] = 0;
    __n128 result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A2008;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A2008;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A2008;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A2008;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

CFNumberRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor52create_ref_port_sensitivity_parameter_override_stateEvE3__0JNS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_jEEERNS4_13State_ManagerESH_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id) {
    BOOL v7 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[1]);
  int v9 = *v7;
  uint64_t output_port_sensitivity = vp::vx::get_output_port_sensitivity(*(void *)(a1 + 8), *v8);
  uint64_t v22 = output_port_sensitivity;
  if ((output_port_sensitivity & 0xFF00000000) != 0)
  {
    uint64_t v11 = (float *)caulk::expected<unsigned int,int>::value((uint64_t)&v22);
    float v12 = 150.0;
    if (*v11 <= 150.0) {
      float v12 = *v11;
    }
    if (*v11 >= 50.0) {
      float v13 = v12;
    }
    else {
      float v13 = 50.0;
    }
    *(float *)&valuePtr = v13;
    CFNumberRef v14 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (!v14)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    char v26 = 1;
    char v24 = 1;
    CFNumberRef v23 = v14;
    valuePtr = 0;
    caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(&valuePtr);
  }
  else
  {
    char v24 = 0;
    LODWORD(v23) = output_port_sensitivity;
  }
  if ((v9 - 2) > 0xB) {
    int v15 = 1121058816;
  }
  else {
    int v15 = *(_DWORD *)&vp::Service_Interface<1668443507u>::k_service_type_id[4 * v9 - 4];
  }
  LODWORD(valuePtr) = v15;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v16)
  {
    uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
  }
  if (v24)
  {
    CFNumberRef v17 = v23;
    CFNumberRef v23 = 0;
    CFRelease(v16);
    if (v24) {
      caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>((const void **)&v23);
    }
  }
  else
  {
    CFNumberRef v17 = v16;
  }
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v18);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::NumberRef>(void)::s_type_id;
  __n128 result = (CFNumberRef *)vp::vx::data_flow::Value::allocate_storage(v5);
  CFNumberRef *result = v17;
  return result;
}

void sub_1BB248200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    CFRelease(v1);
  }
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A2050;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A2050;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A2050;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A2050;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  v24[1] = *(const void **)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    BOOL v7 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id) {
    int v9 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    int v9 = 0;
  }
  char v10 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[2]);
  int v11 = *v7;
  int v12 = *v9;
  if ((v11 - 3) >= 2)
  {
    if (v11 != 2)
    {
      CFDictionaryRef v17 = 0;
      goto LABEL_20;
    }
LABEL_14:
    if ((v12 & 0xFFFFFFFE) == 0xC)
    {
      *(_OWORD *)CFTypeRef cf = xmmword_1BB8728C0;
      long long v20 = unk_1BB8728D0;
      long long v21 = xmmword_1BB8728E0;
      long long v22 = unk_1BB8728F0;
      int v23 = 0;
      v18[0] = cf;
      v18[1] = (CFTypeRef)17;
      v24[0] = applesauce::CF::details::make_CFArrayRef<float>((uint64_t)v18);
      _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(v24, &v17);
      CFTypeRef v14 = v24[0];
      if (!v24[0]) {
        goto LABEL_20;
      }
    }
    else
    {
      v24[0] = (const void *)0x40000000C2980000;
      cf[0] = v24;
      cf[1] = (CFTypeRef)2;
      v18[0] = applesauce::CF::details::make_CFArrayRef<float>((uint64_t)cf);
      _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(v18, &v17);
      CFTypeRef v14 = v18[0];
      if (!v18[0]) {
        goto LABEL_20;
      }
    }
    CFRelease(v14);
    goto LABEL_20;
  }
  vp::vx::get_output_port_volume_curve(*(void *)(a1 + 8), *v10, (uint64_t)cf);
  if (!LOBYTE(cf[1])) {
    goto LABEL_14;
  }
  CFTypeRef v13 = cf[0];
  cf[0] = 0;
  caulk::__expected_detail::destroy<applesauce::CF::ArrayRef,(void *)0>(cf);
  if (!v13) {
    goto LABEL_14;
  }
  CFRetain(v13);
  cf[0] = v13;
  _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(cf, &v17);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v13);
LABEL_20:
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)int v5 = std::pmr::get_default_resource(v15);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  __n128 result = (void *)vp::vx::data_flow::Value::allocate_storage(v5);
  void *result = v17;
  return result;
}

void sub_1BB248624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, uint64_t a12, CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZZN2vp2vx15Voice_Processor62create_ref_port_volume_limit_curve_dsp_property_override_stateEvENK3__0clINS0_16Output_Port_TypeENS0_13Port_Sub_TypeEjEEDaT_T0_T1_ENKUlN10applesauce2CF8ArrayRefEE_clESC_(const void **a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFArrayRef v4 = (const __CFArray *)*a1;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  CFIndex Count = CFArrayGetCount(v4);
  uint64_t v6 = MEMORY[0x1F4188790](Count);
  int v9 = (int *)((char *)&v25[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v6)
  {
    unint64_t v10 = 0;
    *(float *)v7.i32 = 78.0 / (float)(unint64_t)(v6 - 1);
    uint64x2_t v11 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    int64x2_t v12 = (int64x2_t)xmmword_1BB872720;
    float32x2_t v13 = (float32x2_t)vdup_n_s32(0xC2980000);
    int64x2_t v14 = vdupq_n_s64(2uLL);
    float32x2_t v15 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      v16.f32[0] = (float)v10;
      unint64_t v17 = v10 + 1;
      int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v11, (uint64x2_t)v12));
      v16.f32[1] = (float)(v10 + 1);
      float32x2_t v19 = vmla_f32(v13, v15, v16);
      if (v18.i8[0]) {
        v9[v10] = v19.i32[0];
      }
      if (v18.i8[4]) {
        v9[v10 + 1] = v19.i32[1];
      }
      int64x2_t v12 = vaddq_s64(v12, v14);
      v10 += 2;
    }
    while (v17 + 1 != ((v6 + 1) & 0xFFFFFFFFFFFFFFFELL));
  }
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float,float *>(v9, &v9[v6]);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef const&>((applesauce::CF::TypeRef *)v29, "InputMap", (const void **)&CFArray);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[10],applesauce::CF::ArrayRef &>((applesauce::CF::TypeRef *)v30, "OutputMap", a1);
  v25[0] = v29;
  v25[1] = 2;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v25);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)&v31, "Value", (const void **)&CFDictionaryRef);
  v27[0] = &v31;
  v27[1] = 1;
  *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v27);
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (CFDictionaryRef) {
    CFRelease(CFDictionaryRef);
  }
  for (uint64_t i = 0; i != -32; i -= 16)
  {
    long long v21 = *(const void **)&v30[i + 8];
    if (v21) {
      CFRelease(v21);
    }
    long long v22 = *(const void **)&v29[i + 16];
    if (v22) {
      CFRelease(v22);
    }
  }
  if (CFArray) {
    CFRelease(CFArray);
  }
}

void sub_1BB248900(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float,float *>(int *a1, int *a2)
{
  uint64_t v3 = a1;
  int32x2_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v7, a2 - a1);
  if (v3 != a2)
  {
    CFArrayRef v4 = v8;
    do
    {
      if ((unint64_t)v4 >= v9) {
        CFArrayRef v4 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float &>((uint64_t *)&v7, v3);
      }
      else {
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float &,applesauce::CF::NumberRef*>(v4++, v3);
      }
      uint64_t v8 = v4;
      ++v3;
    }
    while (v3 != a2);
  }
  CFArrayRef v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v7);
  unint64_t v10 = (void **)&v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v5;
}

void sub_1BB248A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float &>(uint64_t *a1, int *a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - (void)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v22 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  float32x2_t v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  long long v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float &,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  uint64_t v11 = v20.i64[0];
  uint64_t v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  int64x2_t v14 = (void *)*a1;
  float32x2_t v13 = (void *)a1[1];
  if (v13 == (void *)*a1)
  {
    int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      uint64_t v15 = *--v13;
      *(void *)(v11 - 8) = v15;
      v11 -= 8;
      void *v13 = 0;
    }
    while (v13 != v14);
    int64x2_t v16 = *(int64x2_t *)a1;
    uint64_t v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  int64x2_t v20 = v16;
  unint64_t v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  long long v21 = v17;
  float32x2_t v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1BB248BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float &,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB248C44(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::ArrayRef const&>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  unint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[10],applesauce::CF::ArrayRef &>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  unint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  unint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float>(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v9, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(int **)a1;
    unint64_t v5 = v10;
    uint64_t v6 = 4 * v3;
    do
    {
      if ((unint64_t)v5 >= v11) {
        unint64_t v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float const&>((uint64_t *)&v9, v4);
      }
      else {
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>(v5++, v4);
      }
      unint64_t v10 = v5;
      ++v4;
      v6 -= 4;
    }
    while (v6);
  }
  CFArrayRef v7 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v9);
  uint64_t v12 = (void **)&v9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v12);
  return v7;
}

void sub_1BB248DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float const&>(uint64_t *a1, int *a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - (void)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v22 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  float32x2_t v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  long long v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  uint64_t v11 = v20.i64[0];
  uint64_t v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  int64x2_t v14 = (void *)*a1;
  float32x2_t v13 = (void *)a1[1];
  if (v13 == (void *)*a1)
  {
    int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      uint64_t v15 = *--v13;
      *(void *)(v11 - 8) = v15;
      v11 -= 8;
      void *v13 = 0;
    }
    while (v13 != v14);
    int64x2_t v16 = *(int64x2_t *)a1;
    uint64_t v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  int64x2_t v20 = v16;
  unint64_t v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  long long v21 = v17;
  float32x2_t v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1BB248F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float const&,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB248FD4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A2098;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2098;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_speaker_iv_data_source_ids_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS_6vectorIjNS_9allocatorIjEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SJ_EEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NSH_IS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFNumberRef v3 = *a2;
  uint64_t v4 = *a3;
  unint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    uint64_t v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v3[1];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id) {
    uint64_t v8 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    uint64_t v8 = 0;
  }
  if (*v6 != 7 || (uint64_t v9 = *(void *)(v8 + 8), *(void *)v8 == v9))
  {
    CFDictionaryRef CFDictionaryRef = 0;
  }
  else
  {
    CFDataRef v10 = CFDataCreate(0, *(const UInt8 **)v8, v9 - *(void *)v8);
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
    }
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v15, v10);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v17, "Data", &v15);
    v16[0] = &v17;
    v16[1] = 1;
    CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v16);
    if (cf) {
      CFRelease(cf);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v15) {
      CFRelease(v15);
    }
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v12);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  __n128 result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v4);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB249228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A20E0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A20E0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor62create_speaker_calibration_data_cf_dsp_property_override_stateEvE3__0JNS3_16Output_Port_TypeENS7_8ArrayRefEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFNumberRef v3 = *a2;
  uint64_t v4 = *a3;
  unint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    uint64_t v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v3[1];
  if (v7[2] == &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id) {
    uint64_t v8 = (const void **)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    uint64_t v8 = 0;
  }
  if (*v6 != 7 || *v8 == 0)
  {
    CFDictionaryRef CFDictionaryRef = 0;
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::ArrayRef const&>((applesauce::CF::TypeRef *)&v14, "Value", v8);
    v13[0] = &v14;
    v13[1] = 1;
    CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v13);
    if (cf) {
      CFRelease(cf);
    }
    if (v14) {
      CFRelease(v14);
    }
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v11);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  __n128 result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v4);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB249480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::ArrayRef const&>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  unint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

void vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(uint64_t *a1, const void **a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  mach_absolute_time();
  cf[0] = 0;
  cf[1] = (CFTypeRef)mach_absolute_time();
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>((std::pmr *)a1, cf, (uint64_t)v11);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  uint64_t v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef v9 = v4;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v11);
  unint64_t v5 = a1[1];
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  float32x2_t v13 = 0;
  uint64_t v6 = operator new(0x28uLL);
  *uint64_t v6 = &unk_1F14A21D8;
  vp::vx::data_flow::State<void>::State((uint64_t)(v6 + 1), (uint64_t)v7);
  v6[4] = object;
  dispatch_object_t object = 0;
  float32x2_t v13 = v6;
  vp::cf::Notification_Manager::create_listener(a1 + 10, &v9, (uint64_t)v12, cf);
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef)>::~__value_func[abi:ne180100](v12);
  if (object) {
    dispatch_release(object);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  if (v9) {
    CFRelease(v9);
  }
  operator new();
}

void sub_1BB24970C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A2128;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A2128;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A2128;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A2128;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS8_32create_state_for_cf_notificationIZNS3_15Voice_Processor48create_camera_noise_mitigation_is_required_stateEvE3__0EEDaOT_N10applesauce2CF9StringRefEEUlNSH_13DictionaryRefEE_JNS4_12Time_StampedISJ_EEEEESD_SF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSM_EEERNS4_13State_ManagerESE_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a3;
  unint64_t v5 = (CFTypeRef *)vp::vx::data_flow::Value::view_storage(**a2);
  CFTypeRef v6 = *v5;
  if (*v5) {
    CFRetain(*v5);
  }
  char v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
  if (v6) {
    CFRelease(v6);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v8);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v4);
  unsigned char *result = v7;
  return result;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::allocate_storage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, 16, 8);
  *a2 = result;
  return result;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::deallocate_storage(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)*a3 + 24))(*a3, *a2, 16, 8);
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::view_storage(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return *(void *)a2;
}

void *vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::copy_value(uint64_t a1, void **a2, uint64_t *a3)
{
  return vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped(*a2, *a3);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::move_value(uint64_t a1, void **a2, void **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = (*a3)[1];
  *uint64_t v3 = **a3;
  void *v4 = 0;
  v3[1] = v5;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::destroy_value(uint64_t a1, const void ***a2)
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>::compare_value(uint64_t a1, const void ***a2, const void ***a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  unint64_t v5 = (unint64_t)**a2;
  unint64_t v6 = (unint64_t)**a3;
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5 | v6) {
      return 0;
    }
    return v3[1] == v4[1];
  }
  uint64_t result = CFEqual((CFTypeRef)v5, (CFTypeRef)v6);
  if (result) {
    return v3[1] == v4[1];
  }
  return result;
}

void *vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped(void *a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *a1 = v4;
  a1[1] = v5;
  return a1;
}

void std::__destroy_at[abi:ne180100]<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>,0>(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    CFRelease(v1);
  }
}

const void **vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::~Time_Stamped(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  v9[2] = &vp::vx::data_flow::Value::type_id<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = *a2;
  *a2 = 0;
  storage[1] = a2[1];
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_D1Ev(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_release(v2);
  }

  return vp::vx::data_flow::State<void>::~State(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS1_32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E0_JNS0_9data_flow12Time_StampedINS4_13DictionaryRefEEEEEEDaOS6_DpRKNS8_5StateIT0_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  long long v10 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  uint64_t v8 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v8 = &unk_1F14A2258;
  *(_OWORD *)(v8 + 8) = v10;
  *((void *)v8 + 3) = v7;
  v14[3] = v8;
  int id = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v14, (uint64_t)v13);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State(v13);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v14);
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB249DB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEED1Ev(void *a1)
{
  *a1 = &unk_1F14A21D8;
  uint64_t v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEED0Ev(void *a1)
{
  *a1 = &unk_1F14A21D8;
  uint64_t v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(a1 + 1));

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A21D8;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_Li0ELb0EEC2B8ne180100IJRKS8_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A21D8;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_Li0ELb0EEC2B8ne180100IJRKS8_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE7destroyEv(uint64_t a1)
{
  return _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_D1Ev(a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEE18destroy_deallocateEv(void *a1)
{
  _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_D1Ev((uint64_t)a1 + 8);

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS_9allocatorIS9_EEFvNS6_13DictionaryRefEEEclEOSC_(uint64_t a1, CFTypeRef *a2)
{
  _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS7_13DictionaryRefEEEEvDpOT_(a1 + 8, a2);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_Li0ELb0EEC2B8ne180100IJRKS8_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  vp::vx::data_flow::State<void>::State(a1, a2);
  CFTypeRef v4 = *(NSObject **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  return a1;
}

void _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEEUlT_E_NS7_13DictionaryRefEEEEvDpOT_(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = *a2;
  *a2 = 0;
  _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_(a1, &cf);
}

void _ZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_(uint64_t a1, const void **a2)
{
  vp::vx::data_flow::State<void>::State((uint64_t)&v4, a1);
  uint64_t v3 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  CFTypeRef cf = v3;
  operator new();
}

void _ZZN10applesauce8dispatch2v15asyncIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationENS_2CF9StringRefEENUlT_E_clINS6_13DictionaryRefEEEDaS8_EUlvE_EEvP16dispatch_queue_sOS8_ENUlPvE_8__invokeESH_(uint64_t a1)
{
  uint64_t v2 = a1;
  _ZZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_ENUlvE_clEv(a1);
  uint64_t v1 = v2;
  uint64_t v2 = 0;
  if (v1) {
    _ZNKSt3__114default_deleteIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS5_13DictionaryRefEEEDaS7_EUlvE_EclB8ne180100EPSC_((uint64_t)&v2, v1);
  }
}

void sub_1BB24A0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    _ZNKSt3__114default_deleteIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS5_13DictionaryRefEEEDaS7_EUlvE_EclB8ne180100EPSC_((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS3_13DictionaryRefEEEDaS5_ENUlvE_clEv(uint64_t a1)
{
  uint64_t v2 = (CFTypeRef *)(a1 + 24);
  mach_absolute_time();
  uint64_t v3 = (std::pmr *)vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped<applesauce::CF::DictionaryRef&>(cf, v2);
  v6[0] = std::pmr::get_default_resource(v3);
  v6[1] = 0;
  v6[2] = &vp::vx::data_flow::Value::type_id<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>(void)::s_type_id;
  uint64_t storage = (CFTypeRef *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v6);
  *uint64_t storage = cf[0];
  cf[0] = 0;
  storage[1] = cf[1];
  vp::vx::data_flow::State<void>::set_value(a1, (uint64_t)v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void sub_1BB24A17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va1);
  vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::~Time_Stamped((const void **)va);
  _Unwind_Resume(a1);
}

void *vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped<applesauce::CF::DictionaryRef&>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  a1[1] = mach_absolute_time();
  return a1;
}

void sub_1BB24A1E4(_Unwind_Exception *a1)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__114default_deleteIZZN2vp2vx29Voice_Processor_State_Manager32create_state_for_cf_notificationEN10applesauce2CF9StringRefEENUlT_E_clINS5_13DictionaryRefEEEDaS7_EUlvE_EclB8ne180100EPSC_(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CFTypeRef v3 = *(const void **)(a2 + 24);
    if (v3) {
      CFRelease(v3);
    }
    vp::vx::data_flow::State<void>::~State(a2);
    JUMPOUT(0x1C185D370);
  }
}

void std::shared_ptr<vp::cf::Notification_Listener>::shared_ptr[abi:ne180100]<vp::cf::Notification_Listener,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1BB24A2E0(void *a1)
{
}

void sub_1BB24A2F8(_Unwind_Exception *a1)
{
}

void vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator()()
{
}

void std::__shared_ptr_pointer<vp::cf::Notification_Listener *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1},std::allocator<vp::cf::Notification_Listener>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2220;
  shared_owners = this[1].__shared_owners_;
  if (shared_owners) {
    dispatch_release(shared_owners);
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  NSObject *shared_owners;
  uint64_t vars8;

  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2220;
  shared_owners = this[1].__shared_owners_;
  if (shared_owners) {
    dispatch_release(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_pointer<vp::cf::Notification_Listener *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1},std::allocator<vp::cf::Notification_Listener>>::__on_zero_shared()
{
}

void applesauce::dispatch::v1::async<vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1}>(dispatch_queue_s *,vp::vx::Voice_Processor_State_Manager::create_state_for_cf_notification(applesauce::CF::StringRef)::{lambda(vp::cf::Notification_Listener *)#1}::operator() const(vp::cf::Notification_Listener *)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(vp::cf::Notification_Listener **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    vp::cf::Notification_Listener::~Notification_Listener(v1);
    MEMORY[0x1C185D370]();
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A2258;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A2258;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F14A2258;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2258;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS4_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNSD_32create_state_for_cf_notificationENS8_9StringRefEEUlT_E0_JSA_EEEDaOSG_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSA_EEERNS4_13State_ManagerESG_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS5_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNSE_32create_state_for_cf_notificationENS9_9StringRefEEUlT_E0_JSB_EEEDaOSH_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSB_EEERNS5_13State_ManagerESH_SQ_EUlPPKNS5_5ValueEPSY_E_S11_S12_EEEvDpOSR_(a1 + 8, a2, a3);
}

void *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS5_12Time_StampedIN10applesauce2CF13DictionaryRefEEEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNSE_32create_state_for_cf_notificationENS9_9StringRefEEUlT_E0_JSB_EEEDaOSH_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSB_EEERNS5_13State_ManagerESH_SQ_EUlPPKNS5_5ValueEPSY_E_S11_S12_EEEvDpOSR_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>::Time_Stamped(v9, v4);
  uint64_t v5 = v9[0];
  uint64_t v6 = v9[1];
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v7);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::data_flow::Time_Stamped<applesauce::CF::DictionaryRef>>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v5;
  result[1] = v6;
  return result;
}

void sub_1BB24A764(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A22A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A22A0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A22A0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A22A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

CFNumberRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9NumberRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor61create_personal_audio_HLC_product_id_parameter_override_stateEvE3__0JNS3_16Output_Port_TypeENS3_13Port_Sub_TypeEjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_SG_jEEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    uint64_t v7 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id) {
    CFTypeRef v9 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    CFTypeRef v9 = 0;
  }
  long long v10 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[2]);
  int v11 = *v9;
  if ((*v7 - 3) <= 1)
  {
    uint64_t v12 = *v10;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t is_apple_made_bluetooth_product = vp::vx::get_output_device_is_apple_made_bluetooth_product(v13, v12);
    if ((is_apple_made_bluetooth_product & 0xFF00000000) != 0
      && is_apple_made_bluetooth_product != 0)
    {
      output_device_bluetooth_product_int id = vp::vx::get_output_device_bluetooth_product_id(v13, v12);
      uint64_t v23 = output_device_bluetooth_product_id;
      if ((output_device_bluetooth_product_id & 0xFF00000000) != 0)
      {
        LODWORD(valuePtr) = *(_DWORD *)caulk::expected<unsigned int,int>::value((uint64_t)&v23);
        CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (v19)
        {
          CFNumberRef v17 = v19;
          char v27 = 1;
          char v25 = 1;
          int valuePtr = 0;
          caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(&valuePtr);
          char v24 = 0;
          caulk::__expected_detail::destroy<applesauce::CF::NumberRef,(void *)0>(&v24);
          goto LABEL_20;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_23:
      }
LABEL_19:
      CFNumberRef v17 = 0;
      goto LABEL_20;
    }
  }
  if ((v11 & 0xFFFFFFFE) != 6) {
    goto LABEL_19;
  }
  LODWORD(valuePtr) = 8210;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v16)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_23;
  }
  CFNumberRef v17 = v16;
LABEL_20:
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)uint64_t v5 = std::pmr::get_default_resource(v20);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::NumberRef>(void)::s_type_id;
  uint64_t result = (CFNumberRef *)vp::vx::data_flow::Value::allocate_storage(v5);
  CFNumberRef *result = v17;
  return result;
}

void sub_1BB24AB08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A22E8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A22E8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor54create_metric_reporter_ids_dsp_property_override_stateEvE3__0JNS_6vectorIxNS_9allocatorIxEEEEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESK_SR_EUlPPKNS4_5ValueEPSZ_E_NSG_IS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  CFDataRef v5 = CFDataCreate(0, *(const UInt8 **)v4, *(void *)(v4 + 8) - *(void *)v4);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v10, v5);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v12, "Data", &v10);
  v11[0] = &v12;
  v11[1] = 1;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v11);
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v10) {
    CFRelease(v10);
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v7);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  uint64_t result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v3);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB24ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A2330;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EE7__cloneEPNS0_6__baseIS15_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2330;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor65create_hardware_mix_output_channel_layout_property_override_stateEvE3__0JN2CA13ChannelLayoutEEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSG_EEERNS4_13State_ManagerESI_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  CFDataRef v5 = CFDataCreate(0, *(const UInt8 **)v4, *(void *)(v4 + 8) - *(void *)v4);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v10, v5);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v12, "Data", &v10);
  v11[0] = &v12;
  v11[1] = 1;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v11);
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v10) {
    CFRelease(v10);
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v7);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  uint64_t result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v3);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB24AF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A2378;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2378;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor57create_spatial_head_tracking_mode_property_override_stateEvE3__0JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  int v8 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned int &>((applesauce::CF::TypeRef *)&v9, "UInt32", &v8);
  v7[0] = &v9;
  v7[1] = 1;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  uint64_t result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v3);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB24B138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned int &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB24B230(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A23C0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A23C0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor60create_spatial_head_tracking_enabled_property_override_stateEvE3__0JbEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  BOOL v4 = *(unsigned char *)vp::vx::data_flow::Value::view_storage(**a2) == 0;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v10, "UInt32");
  CFNumberRef v5 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (v4) {
    CFNumberRef v5 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef cf = *v5;
  v9[0] = &v10;
  v9[1] = 1;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v9);
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v7);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  uint64_t result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v3);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB24B3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::expected<vp::vx::data_flow::State<void>,vp::vx::Error_Code>::value(uint64_t result)
{
  if (!*(unsigned char *)(result + 24))
  {
    uint64_t v1 = (int *)result;
    exception = __cxa_allocate_exception(0x10uLL);
    int v3 = *v1;
    *(void *)exception = &unk_1F1494610;
    exception[2] = v3;
  }
  return result;
}

int *boost::container::flat_map<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::at(uint64_t a1, int *a2)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1, a2, &v8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v8 == (int *)(v4 + 32 * v5)) {
    boost::container::throw_length_error((boost::container *)"flat_map::at key not found", v3);
  }
  return v8 + 2;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(uint64_t a1@<X0>, int *a2@<X1>, int **a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,true>,vp::vx::User_Defaults_Key>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (int *)(v9 + 32 * v10);
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v15 = v4;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v14 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,false>,vp::vx::User_Defaults_Key>(&v15, &v14, a2, a3);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = (int *)(v9 + 32 * v10);
  uint64_t v13 = *a3;
  if (*a3 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a2 < *v13) {
      *a3 = v12;
    }
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,true>,vp::vx::User_Defaults_Key>(void *a1@<X1>, void *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 5;
    int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      int v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 8;
        *a1 = v8 + 8;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor31get_dsp_node_parameter_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_18Graph_Parameter_IDEENK3__0clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(void **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)**a1 + 152))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor31get_dsp_node_parameter_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_18Graph_Parameter_IDEENK3__0clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(void **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)**a1 + 160))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1F14A2408[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1F14A2420[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<1ul,applesauce::CF::NumberRef>(result, a3);
  }
  uint64_t v4 = *a2;
  *a2 = *a3;
  *a3 = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF9NumberRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F14A2408[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__assign_alt[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::NumberRef>,vp::vx::data_flow::State<applesauce::CF::NumberRef>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 2) {
    vp::vx::data_flow::State<void>::operator=(a2, a3);
  }
  else {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::NumberRef>>(a1, a3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::NumberRef,vp::vx::data_flow::State<applesauce::CF::NumberRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::NumberRef>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F14A2408[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  vp::vx::data_flow::State<void>::State(a1, a2);
  *(_DWORD *)(a1 + 24) = 2;
}

void *std::__variant_detail::__alt<0ul,applesauce::CF::NumberRef>::__alt[abi:ne180100]<applesauce::CF::NumberRef&>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A2448;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2448;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__0JdEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFTypeRef v3 = *a3;
  uint64_t v8 = *(void *)vp::vx::data_flow::Value::view_storage(**a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],double &>((applesauce::CF::TypeRef *)&v9, "Float64", &v8);
  v7[0] = &v9;
  v7[1] = 1;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)CFTypeRef v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  uint64_t result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v3);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB24BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[8],double &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB24BC94(_Unwind_Exception *a1)
{
  CFTypeRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A2490;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2490;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

CFDictionaryRef *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF13DictionaryRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS3_18Uplink_DSP_Node_IDENS3_20Downlink_DSP_Node_IDEEEENS3_17Graph_Property_IDEE3__1JjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESL_SS_EUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFTypeRef v3 = *a3;
  int v8 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],unsigned int &>((applesauce::CF::TypeRef *)&v9, "UInt32", &v8);
  v7[0] = &v9;
  v7[1] = 1;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)CFTypeRef v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  uint64_t result = (CFDictionaryRef *)vp::vx::data_flow::Value::allocate_storage(v3);
  CFDictionaryRef *result = CFDictionaryRef;
  return result;
}

void sub_1BB24BE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_17Graph_Property_IDEENK3__2clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(void **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)**a1 + 168))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZZN2vp2vx15Voice_Processor30get_dsp_node_property_overrideENS_7variantIJNS9_18Uplink_DSP_Node_IDENS9_20Downlink_DSP_Node_IDEEEENS9_17Graph_Property_IDEENK3__2clEvEUlT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(void **a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)**a1 + 176))(**a1, *a2, *((unsigned int *)*a1 + 4));
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1F14A24D8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1F14A24F0[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(result);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<1ul,applesauce::CF::DictionaryRef>(result, a3);
  }
  uint64_t v4 = *a2;
  *a2 = *a3;
  *a3 = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN10applesauce2CF13DictionaryRefEN2vp2vx9data_flow5StateISB_EEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<0ul,std::monostate>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F14A24D8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__assign_alt[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 2) {
    vp::vx::data_flow::State<void>::operator=(a2, a3);
  }
  else {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>(a1, a3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,applesauce::CF::DictionaryRef,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>>::__emplace[abi:ne180100]<2ul,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_1F14A24D8[v4])(&v5, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  vp::vx::data_flow::State<void>::State(a1, a2);
  *(_DWORD *)(a1 + 24) = 2;
}

void *std::__variant_detail::__alt<0ul,applesauce::CF::DictionaryRef>::__alt[abi:ne180100]<applesauce::CF::DictionaryRef&>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

uint64_t *std::shared_ptr<vp::vx::Configuration_Database>::shared_ptr[abi:ne180100]<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  CFDictionaryRef *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<vp::vx::Configuration_Database *,vp::Allocator_Delete<vp::vx::Configuration_Database>,std::allocator<vp::vx::Configuration_Database>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::Configuration_Database *,vp::Allocator_Delete<vp::vx::Configuration_Database>,std::allocator<vp::vx::Configuration_Database>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void (****)(void))(a1 + 24);
  (**v2)(v2);
  return (*(uint64_t (**)(void, void (***)(void), void, void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void *vp::utility::Quantization_Table<unsigned int>::Quantization_Table(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v8 = 0;
  uint64_t v9 = 0;
  unint64_t v7 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v7, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  CFTypeRef v3 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>(v7, v8);
  uint64_t v4 = v7;
  if (v8 != v3) {
    int v8 = v3;
  }
  *a1 = v7;
  a1[1] = v3;
  a1[2] = v9;
  int v8 = 0;
  uint64_t v9 = 0;
  unint64_t v7 = 0;
  if (v4 == v3)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    int v10 = 134217984;
    uint64_t v11 = 0;
    _os_log_send_and_compose_impl();
    uint64_t v6 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v6);
  }
  return a1;
}

void sub_1BB24C3C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>(int *a1, int *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      int v5 = *(v4 - 1);
      int v6 = *v4++;
    }
    while (v5 != v6);
    unint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      int v8 = v5;
      int v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>,caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>&,void>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1F14A2550;
  v4[4] = 0;
  v4[5] = a1;
  void v4[3] = 0;
  *a2 = v4 + 3;
  a2[1] = v4;

  std::shared_ptr<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block>::__enable_weak_this[abi:ne180100]<caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block,caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::control_block,void>((uint64_t)a2, v4 + 3, (uint64_t)(v4 + 3));
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2550;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block,std::allocator<caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block>>::__on_zero_shared(uint64_t a1)
{
  return caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block::~control_block(a1 + 24);
}

uint64_t caulk::details::lifetime_guard_base<vp::vx::Voice_Processor>::control_block::~control_block(uint64_t a1)
{
  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(void *)(a1 + 16) + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::default_delete<vp::vx::Control_Center_Manager>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x1C185D370);
  }
}

vp::vx::System_Status_Manager *std::unique_ptr<vp::vx::System_Status_Manager>::reset[abi:ne180100](vp::vx::System_Status_Manager **a1, vp::vx::System_Status_Manager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vp::vx::System_Status_Manager::~System_Status_Manager(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

vp::vx::Orientation_Manager *std::unique_ptr<vp::vx::Orientation_Manager>::reset[abi:ne180100](vp::vx::Orientation_Manager **a1, vp::vx::Orientation_Manager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    vp::vx::Orientation_Manager::~Orientation_Manager(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A2588;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A2588;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A2588;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A2588;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(vp::vx::Voice_Processor **)(a1 + 8);
      if (v5) {
        vp::vx::Voice_Processor::begin_state_change(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A25D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A25D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A25D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A25D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1,std::allocator<vp::vx::Voice_Processor::Voice_Processor(vp::Context const&,std::shared_ptr<vp::Service_Provider>,std::unique_ptr<vp::vx::Configuration_Database,vp::Allocator_Delete<vp::vx::Configuration_Database>>)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(vp::vx::Voice_Processor **)(a1 + 8);
      if (v5) {
        vp::vx::Voice_Processor::end_state_change(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::set_messenger(std::shared_ptr<caulk::concurrent::messenger>)::$_0>(uint64_t **a1)
{
  uint64_t v2 = **a1;
  uint64_t v1 = (long long *)(*a1)[1];
  long long v3 = *v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 616);
  *(_OWORD *)(v2 + 608) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

void *std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F14A2618;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A2618;
}

void std::__function::__func<vp::vx::Voice_Processor::configure(void)::$_0,std::allocator<vp::vx::Voice_Processor::configure(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, _DWORD *a2)
{
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create initialization counts", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_initialization_counts(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create control center manager", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_control_center_manager(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create system status manager", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_system_status_manager(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create telephony utility manager", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_telephony_utility_manager(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create orientation manager", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_orientation_manager(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create property states", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_property_states(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create user defaults states", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_user_defaults_states(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create configuration states", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_configuration_states(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create tuning resource directory paths", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create uplink I/O parameter setter commands", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_commands(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O parameter setter delegates", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_delegates(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O property setter commands", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_commands(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O property setter delegates", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_delegates(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"create I/O personal audio command", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_personal_audio_command(void)::$_0>, (uint64_t)&v6);
  int v6 = a2;
  vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"configure control center manager", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::configure_control_center_manager(void)::$_0>, (uint64_t)&v6);
  vp::vx::Voice_Processor::components_configure((vp::vx::Voice_Processor *)a2);
  a2[194] = 1;
  vp::rpb::Server::get_shared_instance((uint64_t)&v5);
  if (v5)
  {
    vp::objc::ID::ID((vp::objc::ID *)v4, &v5);
    int v6 = v4;
    unint64_t v7 = a2;
    vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"register RPB server listener", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0>, (uint64_t)&v6);
    vp::objc::ID::~ID((vp::objc::ID *)v4);
    vp::objc::ID::ID((vp::objc::ID *)v3, &v5);
    int v6 = v3;
    unint64_t v7 = a2;
    vp::vx::Voice_Processor::exception_guard((uint64_t)a2, (uint64_t)"connect RPB server", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>, (uint64_t)&v6);
    vp::objc::ID::~ID((vp::objc::ID *)v3);
  }
  vp::objc::ID::~ID((vp::objc::ID *)&v5);
}

void *std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_destroy_all(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    long long v3 = (std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  *(void *)(a1 + 16) = 0;
}

void std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F14A2660;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2660;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0,std::allocator<vp::vx::Voice_Processor::get_property(vp::vx::Property_ID,vp::Mutable_Blob &)::$_0>,void ()(vp::vx::Voice_Processor const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 968;
  uint64_t v4 = (const vp::vx::data_flow::State_Transaction *)(a2 + 784);
  long long v28 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  int v6 = v5;
  int v7 = **(_DWORD **)(a1 + 8);
  log = vp::get_log((vp *)v28);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v10 = v31;
    uint64_t v11 = v30;
    long long v12 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if ((v10 & 0x80u) == 0) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = v11;
      }
      if ((v31 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)buf = 136316162;
      uint64_t v33 = p_p;
      __int16 v34 = 2080;
      if (v13) {
        long long v15 = " ";
      }
      else {
        long long v15 = "";
      }
      CFTypeRef v35 = v15;
      __int16 v36 = 1024;
      int v37 = v7;
      __int16 v38 = 1040;
      int v39 = v6;
      __int16 v40 = 2080;
      long long v41 = v28;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%s%sget property %u '%.*s'", buf, 0x2Cu);
    }
    if ((char)v31 < 0) {
      operator delete(__p);
    }
  }
  vp::vx::Property_Manager::get_property(v3, **(_DWORD **)(a1 + 8), *(vp::Mutable_Blob **)(a1 + 32), v4, buf);
  uint64_t v17 = *(void *)(a1 + 24);
  if (!(_BYTE)v33 || !*(unsigned char *)(v17 + 4))
  {
    if ((_BYTE)v33)
    {
      if (!*(unsigned char *)(v17 + 4))
      {
        *(unsigned char *)(v17 + 4) = (_BYTE)v33;
        goto LABEL_23;
      }
    }
    else if (*(unsigned char *)(v17 + 4))
    {
      *(_DWORD *)uint64_t v17 = *(_DWORD *)buf;
      *(unsigned char *)(v17 + 4) = 0;
      goto LABEL_23;
    }
    *(_DWORD *)uint64_t v17 = *(_DWORD *)buf;
  }
LABEL_23:
  if (!*(unsigned char *)(v17 + 4))
  {
    int32x2_t v18 = vp::get_log(v16);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      CFNumberRef v19 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
      uint64_t v20 = v31;
      uint64_t v21 = v30;
      long long v22 = vp::get_log(v19);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        if ((v20 & 0x80u) == 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v21;
        }
        char v24 = __p;
        char v25 = " ";
        if ((v31 & 0x80u) == 0) {
          char v24 = &__p;
        }
        if (!v23) {
          char v25 = "";
        }
        unsigned int v26 = *(_DWORD *)v17 - 1;
        if (v26 > 0xA) {
          char v27 = "bad argument";
        }
        else {
          char v27 = off_1E6237B50[v26];
        }
        *(_DWORD *)buf = 136316418;
        uint64_t v33 = v24;
        __int16 v34 = 2080;
        CFTypeRef v35 = v25;
        __int16 v36 = 1024;
        int v37 = v7;
        __int16 v38 = 1040;
        int v39 = v6;
        __int16 v40 = 2080;
        long long v41 = v28;
        __int16 v42 = 2080;
        long long v43 = v27;
        _os_log_impl(&dword_1BB0CE000, v22, OS_LOG_TYPE_ERROR, "%s%sfailed to get property %u '%.*s' - %s", buf, 0x36u);
      }
      if ((char)v31 < 0) {
        operator delete(__p);
      }
    }
  }
}

char *vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(int a1)
{
  if (a1)
  {
    uint64_t v2 = vp::detail::reflect_value_name<(vp::vx::Property_ID)1,128ul>(a1);
    unint64_t v4 = v3;
    int v5 = vp::detail::reflect_value_name<(vp::vx::Property_ID)1,128ul>(a1);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = "vp::vx::Property_ID::Bypass_Voice_Processing]";
    unint64_t v4 = 44;
    int v5 = "vp::vx::Property_ID::Bypass_Voice_Processing]";
    uint64_t v6 = 44;
LABEL_5:
    while (v6)
    {
      int v7 = v5[--v6];
      if (v7 == 58)
      {
        unint64_t v8 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  if (v4 < v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  return &v2[v8];
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)1,128ul>(int a1)
{
  int v1 = a1 - 1;
  __n128 result = "vp::vx::Property_ID::Disable_Voice_Processing]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Enable_Acoustic_Gain_Control]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Mute_Uplink_Near_End_Voice_Output]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Mute_Downlink_Far_End_Voice_Input]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Maximum_Number_Of_Uplink_Output_Frames]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)6,128ul>((int)"vp::vx::Property_ID::Disable_Voice_Processing]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)6,128ul>(int a1)
{
  int v1 = a1 - 6;
  __n128 result = "vp::vx::Property_ID::Maximum_Number_Of_Far_End_Voice_Input_Frames]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Pre_Processing_Input_Gain_dB]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Mic_Stream_Format]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Mic_Block_Size]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Mic_Port_Type]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)11,128ul>((int)"vp::vx::Property_ID::Maximum_Number_Of_Far_End_Voice_Input_Frames]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)11,128ul>(int a1)
{
  int v1 = a1 - 11;
  __n128 result = "vp::vx::Property_ID::Mic_Device_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Mic_Physical_Device_ID]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Mic_Hardware_Physical_Sample_Rate]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Mic_Hardware_Input_Latency]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Mic_Hardware_Input_Safety_Offset]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)16,128ul>((int)"vp::vx::Property_ID::Mic_Device_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)16,128ul>(int a1)
{
  int v1 = a1 - 16;
  __n128 result = "vp::vx::Property_ID::Mic_Hardware_Transport_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Mic_Hardware_Bluetooth_Device_Category]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Mic_Hardware_Data_Source]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Mic_Hardware_Model_UID]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Mic_Trim_Gains]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)21,128ul>((int)"vp::vx::Property_ID::Mic_Hardware_Transport_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)21,128ul>(int a1)
{
  int v1 = a1 - 21;
  __n128 result = "vp::vx::Property_ID::Mic_Trim_Gains_CF]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Mic_DSP_Settings]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Ref_Stream_Format]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Ref_Block_Size]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Ref_Port_Type]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)26,128ul>((int)"vp::vx::Property_ID::Mic_Trim_Gains_CF]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)26,128ul>(int a1)
{
  int v1 = a1 - 26;
  __n128 result = "vp::vx::Property_ID::Ref_Device_ID]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Ref_Physical_Device_ID]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Physical_Sample_Rate]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Input_Latency]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Input_Safety_Offset]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)31,128ul>((int)"vp::vx::Property_ID::Ref_Device_ID]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)31,128ul>(int a1)
{
  int v1 = a1 - 31;
  __n128 result = "vp::vx::Property_ID::Ref_Hardware_Output_Latency]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Physical_Output_Latency]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Output_Safety_Offset]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Physical_Output_Safety_Offset]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)36,128ul>((int)"vp::vx::Property_ID::Ref_Hardware_Output_Latency]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)36,128ul>(int a1)
{
  int v1 = a1 - 36;
  __n128 result = "vp::vx::Property_ID::Ref_Port_Sub_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Ref_Port_Endpoint_Type]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Ref_Port_Is_Apple_Made_Bluetooth_Product]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Ref_Port_UID]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Ref_Port_Bluetooth_HLC_2ch_State]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)41,128ul>((int)"vp::vx::Property_ID::Ref_Port_Sub_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)41,128ul>(int a1)
{
  int v1 = a1 - 41;
  __n128 result = "vp::vx::Property_ID::Ref_Hardware_Transport_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Bluetooth_Device_Category]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Data_Source]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Ref_Hardware_Model_UID]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Ref_Trim_Gains]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)46,128ul>((int)"vp::vx::Property_ID::Ref_Hardware_Transport_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)46,128ul>(int a1)
{
  int v1 = a1 - 46;
  __n128 result = "vp::vx::Property_ID::Ref_Trim_Gains_CF]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Ref_DSP_Settings]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Client_Near_End_Voice_Output_Stream_Format]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Client_Far_End_Voice_Input_Stream_Format]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Client_Far_End_Voice_Input_Block]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)51,128ul>((int)"vp::vx::Property_ID::Ref_Trim_Gains_CF]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)51,128ul>(int a1)
{
  int v1 = a1 - 51;
  __n128 result = "vp::vx::Property_ID::Hardware_Mix_Output_Stream_Format]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Hardware_Mix_Output_Block_Size]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Hardware_Mix_Output_Channel_Layout]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Beam_Direction]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Operation_Mode]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)56,128ul>((int)"vp::vx::Property_ID::Hardware_Mix_Output_Stream_Format]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)56,128ul>(int a1)
{
  int v1 = a1 - 56;
  __n128 result = "vp::vx::Property_ID::Preferred_Chat_Flavor]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Active_Chat_Flavor]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Hardware_Has_Voice_Processor]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Tap_Stream_Enabled]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Downlink_Software_Volume]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)61,128ul>((int)"vp::vx::Property_ID::Preferred_Chat_Flavor]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)61,128ul>(int a1)
{
  int v1 = a1 - 61;
  __n128 result = "vp::vx::Property_ID::Downlink_Hardware_Volume_dB]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Speaker_Telemetry_Input_Stream_Format]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Speaker_Telemetry_Input_Block_Size]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Speaker_Telemetry_Input_Data_Source_IDs]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Speaker_Calibration_Data_CF]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)66,128ul>((int)"vp::vx::Property_ID::Downlink_Hardware_Volume_dB]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)66,128ul>(int a1)
{
  int v1 = a1 - 66;
  __n128 result = "vp::vx::Property_ID::Codec_Type]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Codec_Sample_Rate]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::CPMS_Budget]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Metrics_Reporter_IDs]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::IO_Cycle_Usage]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)71,128ul>((int)"vp::vx::Property_ID::Codec_Type]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)71,128ul>(int a1)
{
  int v1 = a1 - 71;
  __n128 result = "vp::vx::Property_ID::Preferred_IO_Cycle_Usage]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Device_Orientation]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::UI_Orientation]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Enable_Spatial_Chat]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Spatial_Chat_Metadata]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)76,128ul>((int)"vp::vx::Property_ID::Preferred_IO_Cycle_Usage]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)76,128ul>(int a1)
{
  int v1 = a1 - 76;
  __n128 result = "vp::vx::Property_ID::Spatial_Chat_Head_Tracking_Configuration]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Enable_Media_Chat]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Media_Chat_Software_Volume]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Media_Chat_Ducking_Action]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Media_Chat_Ducking_Level]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)81,128ul>((int)"vp::vx::Property_ID::Spatial_Chat_Head_Tracking_Configuration]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)81,128ul>(int a1)
{
  int v1 = a1 - 81;
  __n128 result = "vp::vx::Property_ID::Media_Chat_Ducking_Ramp_Time_In_Seconds]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Media_Chat_Unducking_Ramp_Time_In_Seconds]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Speech_Activity_Event_Listener_Block]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Dynamic_Ducking_Volume_Handler_Block]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Enable_Stereo_To_Mono_Mix]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)86,128ul>((int)"vp::vx::Property_ID::Media_Chat_Ducking_Ramp_Time_In_Seconds]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)86,128ul>(int a1)
{
  int v1 = a1 - 86;
  __n128 result = "vp::vx::Property_ID::Enable_Media_Playback_On_External_Device]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Other_Audio_Ducking_Configuration]";
      break;
    case 2:
      __n128 result = "vp::vx::Property_ID::Is_In_Emergency_Call]";
      break;
    case 3:
      __n128 result = "vp::vx::Property_ID::Virtual_Audio_Plugin_Mode]";
      break;
    case 4:
      __n128 result = "vp::vx::Property_ID::Offload_AirPods_Noise_Suppression]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)91,128ul>((int)"vp::vx::Property_ID::Enable_Media_Playback_On_External_Device]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)91,128ul>(int a1)
{
  int v1 = a1 - 91;
  __n128 result = "vp::vx::Property_ID::Enable_Automatic_Mic_Mode]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "vp::vx::Property_ID::Is_Camera_Active]";
      break;
    case 2:
      __n128 result = "(vp::vx::Property_ID)93]";
      break;
    case 3:
      __n128 result = "(vp::vx::Property_ID)94]";
      break;
    case 4:
      __n128 result = "(vp::vx::Property_ID)95]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)96,128ul>((int)"vp::vx::Property_ID::Enable_Automatic_Mic_Mode]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)96,128ul>(int a1)
{
  int v1 = a1 - 96;
  __n128 result = "(vp::vx::Property_ID)96]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::vx::Property_ID)97]";
      break;
    case 2:
      __n128 result = "(vp::vx::Property_ID)98]";
      break;
    case 3:
      __n128 result = "(vp::vx::Property_ID)99]";
      break;
    case 4:
      __n128 result = "(vp::vx::Property_ID)100]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)101,128ul>((int)"(vp::vx::Property_ID)96]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)101,128ul>(int a1)
{
  int v1 = a1 - 101;
  __n128 result = "(vp::vx::Property_ID)101]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::vx::Property_ID)102]";
      break;
    case 2:
      __n128 result = "(vp::vx::Property_ID)103]";
      break;
    case 3:
      __n128 result = "(vp::vx::Property_ID)104]";
      break;
    case 4:
      __n128 result = "(vp::vx::Property_ID)105]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)106,128ul>((int)"(vp::vx::Property_ID)101]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)106,128ul>(int a1)
{
  int v1 = a1 - 106;
  __n128 result = "(vp::vx::Property_ID)106]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::vx::Property_ID)107]";
      break;
    case 2:
      __n128 result = "(vp::vx::Property_ID)108]";
      break;
    case 3:
      __n128 result = "(vp::vx::Property_ID)109]";
      break;
    case 4:
      __n128 result = "(vp::vx::Property_ID)110]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)111,128ul>((int)"(vp::vx::Property_ID)106]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)111,128ul>(int a1)
{
  int v1 = a1 - 111;
  __n128 result = "(vp::vx::Property_ID)111]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::vx::Property_ID)112]";
      break;
    case 2:
      __n128 result = "(vp::vx::Property_ID)113]";
      break;
    case 3:
      __n128 result = "(vp::vx::Property_ID)114]";
      break;
    case 4:
      __n128 result = "(vp::vx::Property_ID)115]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)116,128ul>((int)"(vp::vx::Property_ID)111]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)116,128ul>(int a1)
{
  int v1 = a1 - 116;
  __n128 result = "(vp::vx::Property_ID)116]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::vx::Property_ID)117]";
      break;
    case 2:
      __n128 result = "(vp::vx::Property_ID)118]";
      break;
    case 3:
      __n128 result = "(vp::vx::Property_ID)119]";
      break;
    case 4:
      __n128 result = "(vp::vx::Property_ID)120]";
      break;
    default:
      __n128 result = vp::detail::reflect_value_name<(vp::vx::Property_ID)121,128ul>((int)"(vp::vx::Property_ID)116]");
      break;
  }
  return result;
}

char *vp::detail::reflect_value_name<(vp::vx::Property_ID)121,128ul>(int a1)
{
  int v1 = a1 - 121;
  __n128 result = "(vp::vx::Property_ID)121]";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      __n128 result = "(vp::vx::Property_ID)122]";
      break;
    case 2:
      __n128 result = "(vp::vx::Property_ID)123]";
      break;
    case 3:
      __n128 result = "(vp::vx::Property_ID)124]";
      break;
    case 4:
      __n128 result = "(vp::vx::Property_ID)125]";
      break;
    case 5:
      __n128 result = "(vp::vx::Property_ID)126]";
      break;
    case 6:
      __n128 result = "(vp::vx::Property_ID)127]";
      break;
    default:
      if ("(vp::vx::Property_ID)121]" == 128) {
        __n128 result = "(vp::vx::Property_ID)128]";
      }
      else {
        __n128 result = "?";
      }
      break;
  }
  return result;
}

void *std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A26A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A26A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0,std::allocator<vp::vx::Voice_Processor::get_property_info(vp::vx::Property_ID)::$_0>,void ()(vp::vx::Voice_Processor const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 968;
  unint64_t v4 = (const vp::vx::data_flow::State_Transaction *)(a2 + 784);
  long long v29 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  int v6 = v5;
  int v7 = **(_DWORD **)(a1 + 8);
  log = vp::get_log((vp *)v29);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    unint64_t v10 = v32;
    uint64_t v11 = __p[1];
    long long v12 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if ((v10 & 0x80u) == 0) {
        unint64_t v13 = v10;
      }
      else {
        unint64_t v13 = (unint64_t)v11;
      }
      if ((v32 & 0x80u) == 0) {
        long long v14 = __p;
      }
      else {
        long long v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2080;
      if (v13) {
        long long v15 = " ";
      }
      else {
        long long v15 = "";
      }
      *(void *)&buf[14] = v15;
      __int16 v34 = 1024;
      int v35 = v7;
      __int16 v36 = 1040;
      int v37 = v6;
      __int16 v38 = 2080;
      int v39 = v29;
      _os_log_impl(&dword_1BB0CE000, v12, OS_LOG_TYPE_DEFAULT, "%s%sget property %u '%.*s' info", buf, 0x2Cu);
    }
    if ((char)v32 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::vx::Property_Manager::get_property_info(v3, **(_DWORD **)(a1 + 8), v4, (uint64_t)__p);
  long long v16 = *(int **)(a1 + 24);
  *(_OWORD *)buf = *(_OWORD *)__p;
  buf[16] = v31;
  uint64_t v17 = caulk::expected<vp::vx::Property_Info,vp::vx::Error_Code>::swap((long long *)buf, v16);
  uint64_t v18 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v18 + 16))
  {
    CFNumberRef v19 = vp::get_log((vp *)v17);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v21 = v32;
      long long v22 = __p[1];
      uint64_t v23 = vp::get_log(v20);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        if ((v21 & 0x80u) == 0) {
          unint64_t v24 = v21;
        }
        else {
          unint64_t v24 = (unint64_t)v22;
        }
        char v25 = (void **)__p[0];
        unsigned int v26 = " ";
        if ((v32 & 0x80u) == 0) {
          char v25 = __p;
        }
        if (!v24) {
          unsigned int v26 = "";
        }
        unsigned int v27 = *(_DWORD *)v18 - 1;
        if (v27 > 0xA) {
          long long v28 = "bad argument";
        }
        else {
          long long v28 = off_1E6237B50[v27];
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v26;
        __int16 v34 = 1024;
        int v35 = v7;
        __int16 v36 = 1040;
        int v37 = v6;
        __int16 v38 = 2080;
        int v39 = v29;
        __int16 v40 = 2080;
        long long v41 = v28;
        _os_log_impl(&dword_1BB0CE000, v23, OS_LOG_TYPE_DEFAULT, "%s%sfailed to get property %u '%.*s' info - %s", buf, 0x36u);
      }
      if ((char)v32 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

long long *caulk::expected<vp::vx::Property_Info,vp::vx::Error_Code>::swap(long long *result, int *a2)
{
  if (*((unsigned char *)result + 16)) {
    BOOL v2 = *((unsigned char *)a2 + 16) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    long long v4 = *result;
    char *result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v4;
    return result;
  }
  if (*((unsigned char *)result + 16))
  {
    if (!*((unsigned char *)a2 + 16))
    {
      int v3 = *a2;
      *(_OWORD *)a2 = *result;
      *(_DWORD *)__n128 result = v3;
      LOBYTE(v3) = *((unsigned char *)result + 16);
      *((unsigned char *)result + 16) = 0;
      *((unsigned char *)a2 + 16) = v3;
      return result;
    }
  }
  else if (*((unsigned char *)a2 + 16))
  {
    long long v5 = *(_OWORD *)a2;
    *a2 = *(_DWORD *)result;
    char *result = v5;
    *((unsigned char *)result + 16) = *((unsigned char *)a2 + 16);
    *((unsigned char *)a2 + 16) = 0;
    return result;
  }
  int v6 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v6;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x28uLL);
  *(void *)BOOL v2 = &unk_1F14A26F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A26F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0,std::allocator<vp::vx::Voice_Processor::set_property(vp::vx::Property_ID,vp::Blob const&)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  v65[19] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2 + 968;
  long long v4 = (vp::vx::data_flow::State_Transaction *)(a2 + 784);
  uint64_t v5 = *(void *)(a1 + 16);
  long long v41 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  int v7 = v6;
  int v8 = **(_DWORD **)(a1 + 8);
  log = vp::get_log((vp *)v41);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    uint64_t v11 = HIBYTE(v47);
    uint64_t v12 = *(void *)&__p[8];
    unint64_t v13 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if ((v11 & 0x80u) == 0) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v12;
      }
      if (v47 >= 0) {
        long long v15 = __p;
      }
      else {
        long long v15 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v56 = 2080;
      if (v14) {
        long long v16 = " ";
      }
      else {
        long long v16 = "";
      }
      *(void *)uint64_t v57 = v16;
      *(_WORD *)&v57[8] = 1024;
      *(_DWORD *)uint64_t v58 = v8;
      *(_WORD *)&v58[4] = 1040;
      *(_DWORD *)&v58[6] = v7;
      __int16 v59 = 2080;
      v60 = v41;
      _os_log_impl(&dword_1BB0CE000, v13, OS_LOG_TYPE_DEFAULT, "%s%sset property %u '%.*s'", buf, 0x2Cu);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)__p);
    }
  }
  vp::vx::Property_Manager::set_property(v3, **(_DWORD **)(a1 + 8), v4, (uint64_t)buf);
  uint64_t v18 = *(void *)(a1 + 24);
  if (!buf[4] || !*(unsigned char *)(v18 + 4))
  {
    if (buf[4])
    {
      if (!*(unsigned char *)(v18 + 4))
      {
        *(unsigned char *)(v18 + 4) = buf[4];
        goto LABEL_23;
      }
    }
    else if (*(unsigned char *)(v18 + 4))
    {
      *(_DWORD *)uint64_t v18 = *(_DWORD *)buf;
      *(unsigned char *)(v18 + 4) = 0;
      goto LABEL_23;
    }
    *(_DWORD *)uint64_t v18 = *(_DWORD *)buf;
  }
LABEL_23:
  if (*(unsigned char *)(v18 + 4))
  {
    CFNumberRef v19 = *(unsigned int **)(a1 + 8);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    vp::vx::Property_Manager::get_property(v3, *v19, (uint64_t)&v57[2], v4, __p);
    if (__p[4])
    {
      unint64_t v21 = vp::get_log(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        long long v22 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v44);
        if ((v45 & 0x80u) == 0) {
          unint64_t v23 = v45;
        }
        else {
          unint64_t v23 = (unint64_t)v44[1];
        }
        unint64_t v24 = vp::get_log(v22);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = (char)v45;
          unsigned int v26 = (void **)v44[0];
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v58, v42);
          unsigned int v27 = v44;
          if (v25 < 0) {
            unsigned int v27 = v26;
          }
          *(void *)&__p[4] = v27;
          long long v28 = " ";
          *(_DWORD *)__p = 136316418;
          if (!v23) {
            long long v28 = "";
          }
          *(_WORD *)&__p[12] = 2080;
          if (v43 >= 0) {
            long long v29 = v42;
          }
          else {
            long long v29 = (void **)v42[0];
          }
          *(void *)&__p[14] = v28;
          __int16 v47 = 1024;
          int v48 = v8;
          __int16 v49 = 1040;
          int v50 = v7;
          __int16 v51 = 2080;
          __int16 v52 = v41;
          __int16 v53 = 2080;
          __int16 v54 = v29;
          _os_log_impl(&dword_1BB0CE000, v24, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' is %s", __p, 0x36u);
          if (v43 < 0) {
            operator delete(v42[0]);
          }
        }
        if ((char)v45 < 0) {
          operator delete(v44[0]);
        }
      }
    }
    *(void *)buf = *MEMORY[0x1E4FBA408];
    uint64_t v30 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA408] + 64);
    *(void *)&v57[2] = v30;
    *(void *)uint64_t v58 = MEMORY[0x1E4FBA470] + 16;
    if (v64 < 0) {
      operator delete(v63);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C185D210](v65);
  }
  else
  {
    char v31 = vp::get_log(v17);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v32 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      uint64_t v33 = HIBYTE(v47);
      uint64_t v34 = *(void *)&__p[8];
      int v35 = vp::get_log(v32);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        if ((v33 & 0x80u) == 0) {
          uint64_t v36 = v33;
        }
        else {
          uint64_t v36 = v34;
        }
        int v37 = *(unsigned char **)__p;
        __int16 v38 = " ";
        if (v47 >= 0) {
          int v37 = __p;
        }
        if (!v36) {
          __int16 v38 = "";
        }
        unsigned int v39 = *(_DWORD *)v18 - 1;
        if (v39 > 0xA) {
          __int16 v40 = "bad argument";
        }
        else {
          __int16 v40 = off_1E6237B50[v39];
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = v37;
        __int16 v56 = 2080;
        *(void *)uint64_t v57 = v38;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)uint64_t v58 = v8;
        *(_WORD *)&v58[4] = 1040;
        *(_DWORD *)&v58[6] = v7;
        __int16 v59 = 2080;
        v60 = v41;
        __int16 v61 = 2080;
        v62 = v40;
        _os_log_impl(&dword_1BB0CE000, v35, OS_LOG_TYPE_ERROR, "%s%sfailed to set property %u '%.*s' - %s", buf, 0x36u);
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  if ((*(_DWORD *)(v5 + 776) - 5) <= 1) {
    vp::vx::data_flow::State_Transaction::commit(v4);
  }
}

void sub_1BB24EC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a2)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
    a28 = *MEMORY[0x1E4FBA408];
    uint64_t v48 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(uint64_t *)((char *)&a28 + *(void *)(a28 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    a30 = v48;
    a31 = MEMORY[0x1E4FBA470] + 16;
    if (a44 < 0) {
      operator delete(a39);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C185D210](&a47);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BB24EBD0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x28uLL);
  *(void *)BOOL v2 = &unk_1F14A2738;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2738;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0,std::allocator<vp::vx::Voice_Processor::add_property_listener(vp::vx::Property_ID,void({block_pointer})(unsigned int))::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v4 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  int v6 = v5;
  unsigned int v7 = **(_DWORD **)(a1 + 8);
  int v8 = vp::vx::Property_Manager::add_property_listener((void *)(a2 + 968), v7, **(const void ***)(a1 + 24));
  uint64_t v9 = *(int **)(a1 + 16);
  *(void *)buf = v8;
  buf[8] = v10;
  uint64_t v11 = caulk::expected<long long,vp::vx::Error_Code>::swap((uint64_t *)buf, v9);
  LODWORD(a2) = *(unsigned __int8 *)(*(void *)(a1 + 16) + 8);
  log = vp::get_log((vp *)v11);
  if (a2)
  {
    if (!os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v14 = v35;
    uint64_t v15 = v34;
    long long v16 = vp::get_log(log_context_info);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = v15;
    }
    p_p = __p;
    if ((v35 & 0x80u) == 0) {
      p_p = &__p;
    }
    uint64_t v19 = **(void **)(a1 + 16);
    *(_DWORD *)buf = 136316418;
    if (v17) {
      uint64_t v20 = " ";
    }
    else {
      uint64_t v20 = "";
    }
    *(void *)&uint8_t buf[4] = p_p;
    __int16 v37 = 2080;
    __int16 v38 = v20;
    __int16 v39 = 2048;
    *(void *)__int16 v40 = v19;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)long long v41 = v7;
    *(_WORD *)&v41[4] = 1040;
    *(_DWORD *)&v41[6] = v6;
    __int16 v42 = 2080;
    char v43 = v4;
    unint64_t v21 = "%s%sadded listener %lld for property %u '%.*s'";
    long long v22 = v16;
    os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_28;
  }
  if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR)) {
    return;
  }
  unint64_t v24 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
  uint64_t v25 = v35;
  uint64_t v26 = v34;
  unsigned int v27 = vp::get_log(v24);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    if ((v25 & 0x80u) == 0) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = v26;
    }
    if ((v35 & 0x80u) == 0) {
      long long v29 = &__p;
    }
    else {
      long long v29 = __p;
    }
    if (v28) {
      uint64_t v30 = " ";
    }
    else {
      uint64_t v30 = "";
    }
    unsigned int v31 = **(_DWORD **)(a1 + 16) - 1;
    if (v31 > 0xA) {
      unsigned __int8 v32 = "bad argument";
    }
    else {
      unsigned __int8 v32 = off_1E6237B50[v31];
    }
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = v29;
    __int16 v37 = 2080;
    __int16 v38 = v30;
    __int16 v39 = 1024;
    *(_DWORD *)__int16 v40 = v7;
    *(_WORD *)&v40[4] = 1040;
    *(_DWORD *)&v40[6] = v6;
    *(_WORD *)long long v41 = 2080;
    *(void *)&v41[2] = v4;
    __int16 v42 = 2080;
    char v43 = (void *)v32;
    unint64_t v21 = "%s%sfailed to add listener for property %u '%.*s' - %s";
    long long v22 = v27;
    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
LABEL_28:
    _os_log_impl(&dword_1BB0CE000, v22, v23, v21, buf, 0x36u);
  }
LABEL_29:
  if ((char)v35 < 0) {
    operator delete(__p);
  }
}

uint64_t *caulk::expected<long long,vp::vx::Error_Code>::swap(uint64_t *result, int *a2)
{
  char v2 = *((unsigned char *)result + 8);
  int v3 = *((unsigned __int8 *)a2 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = *result;
    char *result = *(void *)a2;
    *(void *)a2 = v6;
    return result;
  }
  if (*((unsigned char *)result + 8))
  {
    if (!*((unsigned char *)a2 + 8))
    {
      int v5 = *a2;
      *(void *)a2 = *result;
      *(_DWORD *)__n128 result = v5;
      *((unsigned char *)result + 8) = 0;
      *((unsigned char *)a2 + 8) = v2;
      return result;
    }
  }
  else if (*((unsigned char *)a2 + 8))
  {
    uint64_t v7 = *(void *)a2;
    *a2 = *(_DWORD *)result;
    char *result = v7;
    *((unsigned char *)result + 8) = v3;
    *((unsigned char *)a2 + 8) = 0;
    return result;
  }
  int v8 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v8;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x28uLL);
  *(void *)char v2 = &unk_1F14A2780;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0,std::allocator<vp::vx::Voice_Processor::remove_property_listener(vp::vx::Property_ID,long long)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  BOOL v4 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(**(_DWORD **)(a1 + 8));
  int v6 = v5;
  unsigned int v7 = **(_DWORD **)(a1 + 8);
  int v8 = (vp *)vp::vx::Property_Manager::remove_property_listener(a2 + 968, v7, **(void **)(a1 + 24), buf);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!(_BYTE)v36 || !*(unsigned char *)(v9 + 4))
  {
    if ((_BYTE)v36)
    {
      if (!*(unsigned char *)(v9 + 4))
      {
        *(unsigned char *)(v9 + 4) = (_BYTE)v36;
        goto LABEL_9;
      }
    }
    else if (*(unsigned char *)(v9 + 4))
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)buf;
      *(unsigned char *)(v9 + 4) = 0;
      goto LABEL_9;
    }
    *(_DWORD *)uint64_t v9 = *(_DWORD *)buf;
  }
LABEL_9:
  int v10 = *(unsigned __int8 *)(v9 + 4);
  log = vp::get_log(v8);
  if (v10)
  {
    if (!os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
    uint64_t v13 = v34;
    uint64_t v14 = v33;
    uint64_t v15 = vp::get_log(log_context_info);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_37;
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v14;
    }
    p_p = __p;
    if ((v34 & 0x80u) == 0) {
      p_p = &__p;
    }
    uint64_t v18 = **(void **)(a1 + 24);
    *(_DWORD *)buf = 136316418;
    if (v16) {
      uint64_t v19 = " ";
    }
    else {
      uint64_t v19 = "";
    }
    uint64_t v36 = p_p;
    __int16 v37 = 2080;
    __int16 v38 = v19;
    __int16 v39 = 2048;
    *(void *)__int16 v40 = v18;
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)long long v41 = v7;
    *(_WORD *)&v41[4] = 1040;
    *(_DWORD *)&v41[6] = v6;
    __int16 v42 = 2080;
    char v43 = v4;
    uint64_t v20 = "%s%sremoved listener %lld for property %u '%.*s'";
    unint64_t v21 = v15;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_36;
  }
  if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR)) {
    return;
  }
  os_log_type_t v23 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &__p);
  uint64_t v24 = v34;
  uint64_t v25 = v33;
  uint64_t v26 = vp::get_log(v23);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    if ((v24 & 0x80u) == 0) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = v25;
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v28 = &__p;
    }
    else {
      uint64_t v28 = __p;
    }
    if (v27) {
      long long v29 = " ";
    }
    else {
      long long v29 = "";
    }
    unsigned int v30 = **(_DWORD **)(a1 + 16) - 1;
    if (v30 > 0xA) {
      unsigned int v31 = "bad argument";
    }
    else {
      unsigned int v31 = off_1E6237B50[v30];
    }
    *(_DWORD *)buf = 136316418;
    uint64_t v36 = v28;
    __int16 v37 = 2080;
    __int16 v38 = v29;
    __int16 v39 = 1024;
    *(_DWORD *)__int16 v40 = v7;
    *(_WORD *)&v40[4] = 1040;
    *(_DWORD *)&v40[6] = v6;
    *(_WORD *)long long v41 = 2080;
    *(void *)&v41[2] = v4;
    __int16 v42 = 2080;
    char v43 = (void *)v31;
    uint64_t v20 = "%s%sfailed to remove listener for property %u '%.*s' - %s";
    unint64_t v21 = v26;
    os_log_type_t v22 = OS_LOG_TYPE_ERROR;
LABEL_36:
    _os_log_impl(&dword_1BB0CE000, v21, v22, v20, buf, 0x36u);
  }
LABEL_37:
  if ((char)v34 < 0) {
    operator delete(__p);
  }
}

void std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

void *std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F14A27C8;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A27C8;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  v3[0] = a2;
  v3[1] = &v4;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"update initialization counters", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::update_initialization_counts(vp::Domain)::$_0>, (uint64_t)v3);
  *(_DWORD *)(a2 + 776) = 2;
  vp::vx::Voice_Processor::components_begin_initialization<vp::Domain>(a2, 0);
}

void vp::vx::Voice_Processor::components_begin_initialization<vp::Domain>(uint64_t a1, uint64_t a2)
{
  char v2 = *(uint64_t **)(a1 + 520);
  for (uint64_t i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    int v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 64))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

void *std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F14A2810;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A2810;
}

void std::__function::__func<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_uplink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  vp::vx::data_flow::State_Transaction::commit((vp::vx::data_flow::State_Transaction *)(a2 + 784));
  *(_DWORD *)(a2 + 776) = 3;

  vp::vx::Voice_Processor::components_end_initialization<vp::Domain>(a2, 0);
}

void vp::vx::Voice_Processor::components_end_initialization<vp::Domain>(uint64_t a1, uint64_t a2)
{
  char v2 = *(uint64_t **)(a1 + 520);
  for (uint64_t i = *(uint64_t **)(a1 + 528); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    int v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, a2);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

void *std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F14A2858;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A2858;
}

void std::__function::__func<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::begin_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = 1;
  v3[0] = a2;
  v3[1] = &v4;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"update initialization counters", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::update_initialization_counts(vp::Domain)::$_0>, (uint64_t)v3);
  *(_DWORD *)(a2 + 776) = 4;
  vp::vx::Voice_Processor::components_begin_initialization<vp::Domain>(a2, 1);
}

void std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

__n128 std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_1F14A28A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A28A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0,std::allocator<vp::vx::Voice_Processor::end_downlink_initialization(void)::$_0>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = *(vp::vx::Voice_Processor **)(a1 + 16);
  vp::vx::data_flow::State_Transaction::commit((vp::vx::data_flow::State_Transaction *)(a2 + 784));
  vp::vx::Voice_Processor::handle_configuration_changes(v4, &v8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v9) {
    BOOL v6 = *(unsigned char *)(v5 + 4) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
LABEL_15:
    *(_DWORD *)(a2 + 776) = 5;
    vp::vx::Voice_Processor::components_end_initialization<vp::Domain>((uint64_t)v4, 1);
    return;
  }
  uint64_t v7 = v8;
  if (v9)
  {
    if (*(unsigned char *)(v5 + 4)) {
      *(_DWORD *)uint64_t v5 = v8;
    }
    else {
      *(unsigned char *)(v5 + 4) = v9;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(v5 + 4)) {
    *(unsigned char *)(v5 + 4) = 0;
  }
  *(_DWORD *)uint64_t v5 = v7;
  *(_DWORD *)(a2 + 776) = 6;

  vp::vx::Voice_Processor::components_end_initialization<vp::Domain,vp::vx::Error_Code>((uint64_t)v4, 1, v7);
}

void vp::vx::Voice_Processor::components_end_initialization<vp::Domain,vp::vx::Error_Code>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(uint64_t **)(a1 + 520);
  for (uint64_t i = *(uint64_t **)(a1 + 528); v3 != i; v3 += 2)
  {
    uint64_t v7 = *v3;
    unsigned int v8 = (std::__shared_weak_count *)v3[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 80))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void *std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::str[abi:ne180100]<vp::Real_Time_Safe_Allocator<char>>@<X0>(uint64_t a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  BOOL v6 = (const void *)std::basic_stringbuf<char,std::char_traits<char>,vp::Real_Time_Safe_Allocator<char>>::view[abi:ne180100](a1);
  __n128 result = *a2;
  a3[3] = *a2;
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)result + 16))(result, v9 + 1, 1);
    a3[1] = v8;
    a3[2] = v10 | 0x8000000000000000;
    *a3 = v11;
    a3 = (void *)v11;
  }
  else
  {
    *((unsigned char *)a3 + 23) = v5;
    if (!v5) {
      goto LABEL_9;
    }
  }
  __n128 result = memmove(a3, v6, v8);
LABEL_9:
  *((unsigned char *)a3 + v8) = 0;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_initialization_counts(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  int v3 = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(v1 + 16), &v3, (uint64_t)v4);
  vp::vx::data_flow::State<void>::operator=(v1 + 808, (uint64_t)v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  int v3 = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(v1 + 16), &v3, (uint64_t)v4);
  vp::vx::data_flow::State<void>::operator=(v1 + 832, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_control_center_manager(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (!*(unsigned char *)(v1 + 360) && !*(unsigned char *)(v1 + 361))
  {
    vp::Service_Provider::get<vp::services::Control_Center,(decltype(nullptr))0>(*(void **)(v1 + 456), &v2);
    if (v2) {
      operator new();
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void sub_1BB24FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1C185D370](v12, 0x20C40A4A59CD2);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void vp::Service_Provider::get<vp::services::Control_Center,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"cltc", v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    size_t v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_system_status_manager(void)::$_0>(uint64_t a1)
{
  vp::Service_Provider::get<vp::services::System_Status,(decltype(nullptr))0>(*(void **)(**(void **)a1 + 456), &v1);
  if (v1) {
    operator new();
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BB24FED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1C185D370](v12, 0x20C40A4A59CD2);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void vp::Service_Provider::get<vp::services::System_Status,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"tsys", v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    size_t v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_telephony_utility_manager(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (!*(unsigned char *)(v1 + 360) && !*(unsigned char *)(v1 + 361))
  {
    vp::Service_Provider::get<vp::services::Telephony_Utility,(decltype(nullptr))0>(*(void **)(v1 + 456), &v2);
    if (v2) {
      std::optional<vp::vx::Telephony_Utility_Manager>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,void>((vp::vx::Telephony_Utility_Manager *)(v1 + 2720), v1, &v2);
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void sub_1BB250038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Telephony_Utility,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"ulet", v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    size_t v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

vp::vx::Telephony_Utility_Manager *std::optional<vp::vx::Telephony_Utility_Manager>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,void>(vp::vx::Telephony_Utility_Manager *this, uint64_t a2, uint64_t *a3)
{
  if (*((unsigned char *)this + 112))
  {
    vp::vx::Telephony_Utility_Manager::~Telephony_Utility_Manager(this);
    *((unsigned char *)this + 112) = 0;
  }
  std::construct_at[abi:ne180100]<vp::vx::Telephony_Utility_Manager,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,vp::vx::Telephony_Utility_Manager*>((uint64_t)this, a2, a3);
  *((unsigned char *)this + 112) = 1;
  return this;
}

uint64_t std::construct_at[abi:ne180100]<vp::vx::Telephony_Utility_Manager,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Telephony_Utility> &,vp::vx::Telephony_Utility_Manager*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = a2 + 16;
  uint64_t v7 = *a3;
  size_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vp::vx::Telephony_Utility_Manager::Telephony_Utility_Manager(a1, v5, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_1BB2501C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_orientation_manager(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (!*(unsigned char *)(v1 + 360) && !*(unsigned char *)(v1 + 361))
  {
    vp::Service_Provider::get<vp::services::Orientation,(decltype(nullptr))0>(*(void **)(v1 + 456), &v2);
    if (v2) {
      operator new();
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void sub_1BB250294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x1C185D370](v12, 0x1020C4000920AE5);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void vp::Service_Provider::get<vp::services::Orientation,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), (unsigned int *)"tnro", v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    size_t v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_property_states(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)0>(v1, 0, (uint64_t)v139);
  vp::vx::data_flow::State<void>::~State((uint64_t)v139);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)1>(v1, 0, (uint64_t)v138);
  vp::vx::data_flow::State<void>::~State((uint64_t)v138);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)2>(v1, 1, (uint64_t)v137);
  vp::vx::data_flow::State<void>::~State((uint64_t)v137);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)3>(v1, 0, (uint64_t)v136);
  vp::vx::data_flow::State<void>::~State((uint64_t)v136);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)4>(v1, 0, (uint64_t)v135);
  vp::vx::data_flow::State<void>::~State((uint64_t)v135);
  if (*(_DWORD *)(v1 + 264) == 3)
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)7>(v1, (uint64_t)v134, 0.0);
    vp::vx::data_flow::State<void>::~State((uint64_t)v134);
  }
  uint64_t v132 = 0;
  memset(v131, 0, sizeof(v131));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)8>(v1, v131, (uint64_t)v133);
  vp::vx::data_flow::State<void>::~State((uint64_t)v133);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)9>(v1, 0, (uint64_t)v130);
  vp::vx::data_flow::State<void>::~State((uint64_t)v130);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)10>(v1, 0, (uint64_t)v129);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)11>(v1, 0, (uint64_t)v128);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(v1, (uint64_t)vp::vx::get_port_owning_device_id, (vp::vx::data_flow::State_Transaction *)v128, 0, (uint64_t)v127);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(v1, (uint64_t)vp::vx::get_nominal_input_sample_rate, (vp::vx::data_flow::State_Transaction *)v127, (uint64_t)v126, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v126);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(v1, (uint64_t)vp::vx::get_input_latency, (vp::vx::data_flow::State_Transaction *)v128, 0, (uint64_t)v125);
  vp::vx::data_flow::State<void>::~State((uint64_t)v125);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(v1, (uint64_t)vp::vx::get_input_safety_offset, (vp::vx::data_flow::State_Transaction *)v128, 0, (uint64_t)v124);
  vp::vx::data_flow::State<void>::~State((uint64_t)v124);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)16>(v1, 0, (uint64_t)v123);
  vp::vx::data_flow::State<void>::~State((uint64_t)v123);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)17>(v1, 0, (uint64_t)v122);
  vp::vx::data_flow::State<void>::~State((uint64_t)v122);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)18>(v1, 0, (uint64_t)v121);
  vp::vx::data_flow::State<void>::~State((uint64_t)v121);
  CFTypeRef cf = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)19>(v1, &cf, (uint64_t)v120);
  vp::vx::data_flow::State<void>::~State((uint64_t)v120);
  if (cf) {
    CFRelease(cf);
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(v1, (uint64_t)vp::vx::get_io_cycle_usage, (vp::vx::data_flow::State_Transaction *)v128, (uint64_t)v118, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v118);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(v1, (uint64_t)v117, 1.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v117);
  v114 = 0;
  __p = 0;
  uint64_t v115 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)20>(v1, (uint64_t)&__p, (uint64_t)v116);
  vp::vx::data_flow::State<void>::~State((uint64_t)v116);
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
  CFTypeRef v111 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)21>(v1, &v111, (uint64_t)v112);
  vp::vx::data_flow::State<void>::~State((uint64_t)v112);
  if (v111) {
    CFRelease(v111);
  }
  CFTypeRef v109 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)22>(v1, &v109, (uint64_t)v110);
  vp::vx::data_flow::State<void>::~State((uint64_t)v110);
  if (v109) {
    CFRelease(v109);
  }
  uint64_t v107 = 0;
  memset(v106, 0, sizeof(v106));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)23>(v1, v106, (uint64_t)v108);
  vp::vx::data_flow::State<void>::~State((uint64_t)v108);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)24>(v1, 0, (uint64_t)v105);
  vp::vx::data_flow::State<void>::~State((uint64_t)v105);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)25>(v1, 0, (uint64_t)v104);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)26>(v1, 0, (uint64_t)v103);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(v1, (uint64_t)vp::vx::get_port_owning_device_id, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v102);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36,vp::vx::Output_Port_Type>(v1, (uint64_t)_ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_13Port_Sub_TypeEiEES4_, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v101);
  vp::vx::data_flow::State<void>::~State((uint64_t)v101);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37,vp::vx::Output_Port_Type>(v1, (uint64_t)_ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E0_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_18Port_Endpoint_TypeEiEES4_, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v100);
  vp::vx::data_flow::State<void>::~State((uint64_t)v100);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(v1, (uint64_t)vp::vx::get_output_device_is_apple_made_bluetooth_product, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v99);
  vp::vx::data_flow::State<void>::~State((uint64_t)v99);
  CFTypeRef v97 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39,vp::vx::Output_Port_Type>(v1, (uint64_t)vp::vx::get_output_port_uid, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, &v97, (uint64_t)v98);
  vp::vx::data_flow::State<void>::~State((uint64_t)v98);
  if (v97) {
    CFRelease(v97);
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40,vp::vx::Output_Port_Type>(v1, (uint64_t)vp::vx::get_output_port_HLC2chstate, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v96);
  vp::vx::data_flow::State<void>::~State((uint64_t)v96);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(v1, (uint64_t)vp::vx::get_nominal_output_sample_rate, (vp::vx::data_flow::State_Transaction *)v102, (uint64_t)v95, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v95);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(v1, (uint64_t)vp::vx::get_input_latency, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v94);
  vp::vx::data_flow::State<void>::~State((uint64_t)v94);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(v1, (uint64_t)vp::vx::get_input_safety_offset, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v93);
  vp::vx::data_flow::State<void>::~State((uint64_t)v93);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(v1, (uint64_t)vp::vx::get_output_latency, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v92);
  vp::vx::data_flow::State<void>::~State((uint64_t)v92);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(v1, (uint64_t)vp::vx::get_output_latency, (vp::vx::data_flow::State_Transaction *)v102, 0, (uint64_t)v91);
  vp::vx::data_flow::State<void>::~State((uint64_t)v91);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(v1, (uint64_t)vp::vx::get_output_safety_offset, (vp::vx::data_flow::State_Transaction *)v103, 0, (uint64_t)v90);
  vp::vx::data_flow::State<void>::~State((uint64_t)v90);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(v1, (uint64_t)vp::vx::get_output_safety_offset, (vp::vx::data_flow::State_Transaction *)v102, 0, (uint64_t)v89);
  vp::vx::data_flow::State<void>::~State((uint64_t)v89);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35,vp::vx::Output_Port_Type>(v1, (uint64_t)vp::vx::get_output_physical_stream_latency, (vp::vx::data_flow::State_Transaction *)v103, (vp::vx::data_flow::State_Transaction *)v104, 0, (uint64_t)v88);
  vp::vx::data_flow::State<void>::~State((uint64_t)v88);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)41>(v1, 0, (uint64_t)v87);
  vp::vx::data_flow::State<void>::~State((uint64_t)v87);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)42>(v1, 0, (uint64_t)v86);
  vp::vx::data_flow::State<void>::~State((uint64_t)v86);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)43>(v1, 0, (uint64_t)v85);
  vp::vx::data_flow::State<void>::~State((uint64_t)v85);
  CFTypeRef v83 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)44>(v1, &v83, (uint64_t)v84);
  vp::vx::data_flow::State<void>::~State((uint64_t)v84);
  if (v83) {
    CFRelease(v83);
  }
  v80 = 0;
  v79 = 0;
  uint64_t v81 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)45>(v1, (uint64_t)&v79, (uint64_t)v82);
  vp::vx::data_flow::State<void>::~State((uint64_t)v82);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  CFTypeRef v77 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)46>(v1, &v77, (uint64_t)v78);
  vp::vx::data_flow::State<void>::~State((uint64_t)v78);
  if (v77) {
    CFRelease(v77);
  }
  CFTypeRef v75 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)47>(v1, &v75, (uint64_t)v76);
  vp::vx::data_flow::State<void>::~State((uint64_t)v76);
  if (v75) {
    CFRelease(v75);
  }
  uint64_t v73 = 0;
  memset(v72, 0, sizeof(v72));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)48>(v1, v72, (uint64_t)v74);
  vp::vx::data_flow::State<void>::~State((uint64_t)v74);
  uint64_t v70 = 0;
  memset(v69, 0, sizeof(v69));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)49>(v1, v69, (uint64_t)v71);
  vp::vx::data_flow::State<void>::~State((uint64_t)v71);
  aBlock = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)50>(v1, &aBlock, (uint64_t)v68);
  vp::vx::data_flow::State<void>::~State((uint64_t)v68);
  if (aBlock)
  {
    _Block_release(aBlock);
    aBlock = 0;
  }
  uint64_t v65 = 0;
  memset(v64, 0, sizeof(v64));
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)51>(v1, v64, (uint64_t)v66);
  vp::vx::data_flow::State<void>::~State((uint64_t)v66);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)52>(v1, 0, (uint64_t)v63);
  vp::vx::data_flow::State<void>::~State((uint64_t)v63);
  __x[0] = 0;
  std::vector<char>::vector(&v61, 0x20uLL, __x);
  std::vector<char>::pointer begin = v61.__begin_;
  *(void *)v61.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)53>(v1, (uint64_t)&v61, (uint64_t)v62);
  vp::vx::data_flow::State<void>::~State((uint64_t)v62);
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)54>(v1, 0, (uint64_t)v60);
  vp::vx::data_flow::State<void>::~State((uint64_t)v60);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)55>(v1, 0, (uint64_t)v59);
  vp::vx::data_flow::State<void>::~State((uint64_t)v59);
  int v3 = *(vp::vx::Control_Center_Manager **)(v1 + 2704);
  if (v3)
  {
    vp::vx::Control_Center_Manager::get_preferred_chat_flavor(v3, (uint64_t)__x);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)56>(v1, (uint64_t)__x);
    vp::vx::data_flow::State<void>::~State((uint64_t)__x);
    vp::vx::Control_Center_Manager::get_active_chat_flavor(*(vp::vx::Control_Center_Manager **)(v1 + 2704), (uint64_t)__x);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)57>(v1, (uint64_t)__x);
    vp::vx::data_flow::State<void>::~State((uint64_t)__x);
    vp::vx::Control_Center_Manager::get_automatic_mic_mode_is_enabled(*(vp::vx::Control_Center_Manager **)(v1 + 2704), (uint64_t)__x);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)91>(v1, (uint64_t)__x);
    uint64_t v4 = __x;
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)56>(v1, 0, (uint64_t)v58);
    vp::vx::data_flow::State<void>::~State((uint64_t)v58);
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)57>(v1, 0, (uint64_t)v57);
    vp::vx::data_flow::State<void>::~State((uint64_t)v57);
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)91>(v1, 0, (uint64_t)v56);
    uint64_t v4 = v56;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)58>(v1, 0, (uint64_t)v55);
  vp::vx::data_flow::State<void>::~State((uint64_t)v55);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)59>(v1, 0, (uint64_t)v54);
  vp::vx::data_flow::State<void>::~State((uint64_t)v54);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)60>(v1, (uint64_t)v53, 1.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v53);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)61>(v1, (uint64_t)v52, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v52);
  uint64_t v50 = 0;
  *(_OWORD *)__x = 0u;
  long long v49 = 0u;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)62>(v1, (long long *)__x, (uint64_t)v51);
  vp::vx::data_flow::State<void>::~State((uint64_t)v51);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)63>(v1, 0, (uint64_t)v47);
  vp::vx::data_flow::State<void>::~State((uint64_t)v47);
  uint64_t v44 = 0;
  char v43 = 0;
  uint64_t v45 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)64>(v1, (uint64_t)&v43, (uint64_t)v46);
  vp::vx::data_flow::State<void>::~State((uint64_t)v46);
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  CFTypeRef v41 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)65>(v1, &v41, (uint64_t)v42);
  vp::vx::data_flow::State<void>::~State((uint64_t)v42);
  if (v41) {
    CFRelease(v41);
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)66>(v1, 0, (uint64_t)v40);
  vp::vx::data_flow::State<void>::~State((uint64_t)v40);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)67>(v1, (uint64_t)v39, 0.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v39);
  CFTypeRef v37 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)68>(v1, &v37, (uint64_t)v38);
  vp::vx::data_flow::State<void>::~State((uint64_t)v38);
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v33 = 0;
  unsigned __int8 v34 = 0;
  uint64_t v35 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)69>(v1, (uint64_t)&v33, (uint64_t)v36);
  vp::vx::data_flow::State<void>::~State((uint64_t)v36);
  if (v33)
  {
    unsigned __int8 v34 = v33;
    operator delete(v33);
  }
  uint64_t v5 = *(vp::vx::Orientation_Manager **)(v1 + 2840);
  if (v5)
  {
    vp::vx::Orientation_Manager::get_device_orientation(v5, (uint64_t)v32);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)72>(v1, (uint64_t)v32);
    vp::vx::data_flow::State<void>::~State((uint64_t)v32);
    vp::vx::Orientation_Manager::get_ui_orientation(*(vp::vx::Orientation_Manager **)(v1 + 2840), (uint64_t)v32);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)73>(v1, (uint64_t)v32);
    BOOL v6 = v32;
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)72>(v1, 0, (uint64_t)v32);
    vp::vx::data_flow::State<void>::~State((uint64_t)v32);
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)73>(v1, 0, (uint64_t)v31);
    BOOL v6 = v31;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)74>(v1, 0, (uint64_t)v30);
  vp::vx::data_flow::State<void>::~State((uint64_t)v30);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)75>(v1, (uint64_t)&v26, (uint64_t)v29);
  vp::vx::data_flow::State<void>::~State((uint64_t)v29);
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)76>(v1, 0, (uint64_t)v25);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)77>(v1, 0, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)78>(v1, (uint64_t)v23, 1.0);
  vp::vx::data_flow::State<void>::~State((uint64_t)v23);
  unint64_t v21 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)84>(v1, &v21, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State((uint64_t)v22);
  if (v21)
  {
    _Block_release(v21);
    unint64_t v21 = 0;
  }
  uint64_t v19 = 0;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)83>(v1, &v19, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  if (v19)
  {
    _Block_release(v19);
    uint64_t v19 = 0;
  }
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)85>(v1, 0, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)86>(v1, 0, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)87>(v1, 0, (uint64_t)v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  if (*(unsigned char *)(v1 + 2832))
  {
    vp::vx::data_flow::State<void>::State((uint64_t)v15, v1 + 2760);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)88>(v1, (uint64_t)v15);
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)88>(v1, 0, (uint64_t)v15);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)89>(v1, 0, (uint64_t)v14);
  vp::vx::data_flow::State<void>::~State((uint64_t)v14);
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)90>(v1, 0, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v13);
  uint64_t v7 = *(uint64_t **)(v1 + 2712);
  if (v7)
  {
    vp::vx::Voice_Processor::get_app_bundle_id((vp::vx::Voice_Processor *)v1, (uint64_t)v11);
    vp::vx::System_Status_Manager::get_is_camera_active(v7, v1 + 16, (uint64_t)v11, (uint64_t)v12);
    vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)92>(v1, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    size_t v8 = v11;
  }
  else
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)92>(v1, 0, (uint64_t)v12);
    size_t v8 = v12;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::Voice_Processor::get_preferred_io_cycle_usage((vp::vx::Voice_Processor *)v1, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)71>(v1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v102);
  vp::vx::data_flow::State<void>::~State((uint64_t)v103);
  vp::vx::data_flow::State<void>::~State((uint64_t)v104);
  vp::vx::data_flow::State<void>::~State((uint64_t)v127);
  vp::vx::data_flow::State<void>::~State((uint64_t)v128);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v129);
}

void sub_1BB251090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  vp::vx::data_flow::State<void>::~State((uint64_t)va1);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x720]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x738]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x750]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x910]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x928]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x940]);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)0>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)0>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)1>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)1>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)2>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)2>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25147C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)3>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)3>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2514F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)4>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)4>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)7>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)7>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2515D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)8>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)8>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)9>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)9>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2516B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)10>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Input_Port_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)10>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)11>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)11>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2517A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EZNS1_21create_property_stateILS3_12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB2518D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      *((double *)&v10 + 1) = a5;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EZNS1_21create_property_stateILS3_13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a4);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB251A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EZNS1_21create_property_stateILS3_14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB251B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EZNS1_21create_property_stateILS3_15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB251CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)16>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)16>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)17>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)17>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)18>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)18>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)19>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)19>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB251E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      *((float *)&v10 + 2) = a5;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EZNS1_21create_property_stateILS3_70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a4);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB251FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)70>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)70>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB252044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)20>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<float>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)20>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2520B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)21>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)21>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25211C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)22>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)22>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB252188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)23>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)23>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2521F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)24>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)24>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB252268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)25>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Output_Port_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)25>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2522DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)26>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)26>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB252350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EZNS1_21create_property_stateILS3_27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB252480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v16);
    if (v16)
    {
      *(void *)&long long v12 = a1;
      DWORD2(v12) = a5;
      uint64_t v13 = a2;
      uint64_t v14 = v16;
      uint64_t v15 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36EZNS1_21create_property_stateILS3_36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v12, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36>(a1, a5, a6);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_1BB2525D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v16);
    if (v16)
    {
      *(void *)&long long v12 = a1;
      DWORD2(v12) = a5;
      uint64_t v13 = a2;
      uint64_t v14 = v16;
      uint64_t v15 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37EZNS1_21create_property_stateILS3_37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v12, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37>(a1, a5, a6);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_1BB252720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      BYTE8(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EZNS1_21create_property_stateILS3_38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB252868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, CFTypeRef *a5@<X4>, uint64_t a6@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    CFTypeRef v9 = *a5;
    if (*a5) {
      CFRetain(*a5);
    }
    CFTypeRef v23 = v9;
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39>(a1, &v23, a6);
    if (v23) {
      CFRelease(v23);
    }
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v21);
    uint64_t v13 = v21;
    if (v21)
    {
      *(void *)&long long v16 = a1;
      CFTypeRef v14 = *a5;
      if (v14)
      {
        CFRetain(v14);
        uint64_t v13 = v21;
      }
      *((void *)&v16 + 1) = v14;
      uint64_t v17 = a2;
      uint64_t v18 = v13;
      uint64_t v19 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39EZNS1_21create_property_stateILS3_39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v16, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (*((void *)&v16 + 1)) {
        CFRelease(*((CFTypeRef *)&v16 + 1));
      }
    }
    else
    {
      CFTypeRef v15 = *a5;
      if (*a5) {
        CFRetain(*a5);
      }
      CFTypeRef v20 = v15;
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39>(a1, &v20, a6);
      if (v20) {
        CFRelease(v20);
      }
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
}

void sub_1BB2529FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v16);
    if (v16)
    {
      *(void *)&long long v12 = a1;
      DWORD2(v12) = a5;
      uint64_t v13 = a2;
      uint64_t v14 = v16;
      CFTypeRef v15 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40EZNS1_21create_property_stateILS3_40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v12, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40>(a1, a5, a6);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_1BB252B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      *((double *)&v10 + 1) = a5;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EZNS1_21create_property_stateILS3_28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a4);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB252CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EZNS1_21create_property_stateILS3_29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB252E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EZNS1_21create_property_stateILS3_30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB252F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EZNS1_21create_property_stateILS3_31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB253090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EZNS1_21create_property_stateILS3_32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB2531D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EZNS1_21create_property_stateILS3_33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB253320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(a1, a4, a5);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v14);
    if (v14)
    {
      *(void *)&long long v10 = a1;
      DWORD2(v10) = a4;
      uint64_t v11 = a2;
      uint64_t v12 = v14;
      uint64_t v13 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EZNS1_21create_property_stateILS3_34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE(a1, &v10, a3, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a5);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>(a1, a4, a5);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BB253468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35,vp::vx::Output_Port_Type>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 360) | *(unsigned __int8 *)(a1 + 361) | (*(_DWORD *)(a1 + 264) == 3))
  {
    vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35>(a1, a5, a6);
  }
  else
  {
    vp::Service_Provider::get<vp::services::Audio_Hardware,(decltype(nullptr))0>(*(void **)(a1 + 456), &v16);
    if (v16)
    {
      *(void *)&long long v12 = a1;
      DWORD2(v12) = a5;
      uint64_t v13 = a2;
      uint64_t v14 = v16;
      CFTypeRef v15 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35EZNS1_21create_property_stateILS3_35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE(a1, &v12, a3, a4, (vp::vx::data_flow::State_Transaction *)(a1 + 808), (vp::vx::data_flow::State_Transaction *)(a1 + 832), a6);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35>(a1, a5, a6);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_1BB2535B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)41>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)41>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)42>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)42>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2536B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)43>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)43>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25372C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)44>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)44>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)45>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<float>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)45>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)46>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)46>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)47>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)47>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2538DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)48>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)48>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)49>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)49>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2539B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)50>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)50>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>::~Block(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)51>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)51>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)52>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)52>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)53>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<CA::ChannelLayout>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)53>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)54>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Beam_Direction>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)54>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)55>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Operation_Mode>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)55>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)56>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x38u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x38u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB253D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)57>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x39u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x39u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB253D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)91>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB253E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)56>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Chat_Flavor>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)56>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)57>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Chat_Flavor>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)57>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)91>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)91>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)58>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)58>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB253FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)59>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)59>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)60>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)60>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2540C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)61>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)61>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)62>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)62>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2541A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)63>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)63>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)64>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned int>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)64>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)65>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)65>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2542F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)66>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)66>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)67>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<double>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)67>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2543D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)68>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::DictionaryRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)68>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)69>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<long long>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)69>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2544B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)72>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x48u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x48u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB254528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)73>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x49u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CAOrientation>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x49u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2545A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)72>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<CAOrientation>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)72>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)73>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<CAOrientation>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)73>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)74>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)74>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)75>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned char>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)75>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)76>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Spatial_Head_Tracking_Configuration>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)76>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2547EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)77>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)77>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)78>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<float>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)78>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2548D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)84>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(float,float)>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)84>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **vp::Block<void({block_pointer})(float,float)>::~Block(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)83>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)83>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2549E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)85>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)85>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)86>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)86>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)87>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<AUVoiceIOOtherAudioDuckingConfiguration>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)87>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)88>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x58u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x58u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB254BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)88>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)88>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)89>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)89>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)90>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)90>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)92>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB254DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)92>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)92>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB254E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)71>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x47u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB254EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB254F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Property::create_readable_writable<BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::data_flow::State<void>::State((uint64_t)v6, a1);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 32) = a2;
  return vp::vx::data_flow::State<void>::~State(v6);
}

void vp::vx::Voice_Processor::Type_Converter<BOOL>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<BOOL>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<BOOL>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<BOOL>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<BOOL>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<BOOL>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<BOOL>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<BOOL>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<BOOL>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<BOOL>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::~Blob_Type_Converter()
{
}

unsigned char *vp::vx::Property::Blob_Type_Converter<BOOL>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  char v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(a3);
  unsigned char *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::convert_from_blob(uint64_t a1, BOOL *a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result != 0;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::convert_to_blob(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<BOOL>::convert_to_blob_size()
{
  return 4;
}

uint64_t vp::Blob_Getter<vp::Blob>::get<unsigned int>(uint64_t a1)
{
  if (*(void *)(a1 + 7) != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
  }
  return **(unsigned int **)(a1 - 1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 6) <= 3uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_cast::bad_cast(exception);
  }
  uint64_t v3 = *(_DWORD **)(a1 - 2);
  uint64_t v2 = a1 - 2;
  *uint64_t v3 = a2;

  return vp::Mutable_Blob::set_size(v2, 4uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<BOOL>::~Property_List_Type_Converter()
{
}

unsigned char *vp::vx::Property::Property_List_Type_Converter<BOOL>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  char v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(a3);
  unsigned char *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<BOOL>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB255534(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<BOOL>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<BOOL>::convert_to_plist(uint64_t a1, unsigned char *a2, const void **a3)
{
  uint64_t v3 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*a2) {
    uint64_t v3 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v4 = *a3;
  *a3 = *v3;
  if (v4) {
    CFRelease(v4);
  }
}

void vp::vx::Voice_Processor::String_Type_Converter<BOOL>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<BOOL>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<BOOL>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)1>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 1u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB255718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)2>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 2u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB255798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)3>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 3u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB255818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)4>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 4u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB255898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<float>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)7>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 7u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2559BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<float>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<float>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<float>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<float>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<float>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<float>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<float>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<float>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<float>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<float>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<float>::~Blob_Type_Converter()
{
}

float vp::vx::Property::Blob_Type_Converter<float>::convert_from_blob@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  float v7 = 0.0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, float *, uint64_t))(*(void *)a1 + 40))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  uint64_t storage = (float *)vp::vx::data_flow::Value::allocate_storage(a3);
  float result = v7;
  *uint64_t storage = v7;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<float>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<float>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<float>::convert_from_blob(uint64_t a1, float *a2, uint64_t a3)
{
  *a2 = vp::Blob_Getter<vp::Blob>::get<float>(a3 + 1);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<float>::convert_to_blob(uint64_t a1, float *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<float>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<float>::convert_to_blob_size()
{
  return 4;
}

float vp::Blob_Getter<vp::Blob>::get<float>(uint64_t a1)
{
  if (*(void *)(a1 + 7) != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
  }
  return **(float **)(a1 - 1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<float>(uint64_t a1, float a2)
{
  if (*(void *)(a1 + 6) <= 3uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_cast::bad_cast(exception);
  }
  uint64_t v3 = *(float **)(a1 - 2);
  uint64_t v2 = a1 - 2;
  *uint64_t v3 = a2;

  return vp::Mutable_Blob::set_size(v2, 4uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<float>::~Property_List_Type_Converter()
{
}

float vp::vx::Property::Property_List_Type_Converter<float>::convert_from_plist@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  float v7 = 0.0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, float *, uint64_t))(*(void *)a1 + 32))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  uint64_t storage = (float *)vp::vx::data_flow::Value::allocate_storage(a3);
  float result = v7;
  *uint64_t storage = v7;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<float>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB255F50(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<float>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<float>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  uint64_t v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB256034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<float>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<float>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<float>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<CA::StreamDescription>@<X0>(std::pmr *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v11[0] = std::pmr::get_default_resource(a1);
  v11[1] = 0;
  void v11[2] = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v11);
  long long v7 = *a2;
  long long v8 = a2[1];
  *(void *)(storage + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t storage = v7;
  *(_OWORD *)(storage + 16) = v8;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v11, (uint64_t)v12);
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)v12);
  vp::vx::data_flow::State<void>::~State(v12);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v11);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)8>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 8u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB256240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<CA::StreamDescription>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<CA::StreamDescription>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<CA::StreamDescription>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::~Blob_Type_Converter()
{
}

__n128 vp::vx::Property::Blob_Type_Converter<CA::StreamDescription>::convert_from_blob@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v10 = 0;
  long long v8 = 0u;
  __n128 v9 = 0u;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 40))(a1, &v8, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(a3);
  uint64_t v6 = v10;
  __n128 result = v9;
  *(_OWORD *)uint64_t storage = v8;
  *(__n128 *)(storage + 16) = result;
  *(void *)(storage + 32) = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::convert_from_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vp::Blob_Getter<vp::Blob>::get<CA::StreamDescription>(a3 + 1, (uint64_t)v6);
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a2 + 32);
  return vp::Blob_Setter<vp::Mutable_Blob>::set<CA::StreamDescription>(a3 + 2, v5);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::StreamDescription>::convert_to_blob_size()
{
  return 40;
}

__n128 vp::Blob_Getter<vp::Blob>::get<CA::StreamDescription>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (*(void *)(a1 + 7) != 40)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_cast::bad_cast(exception);
  }
  uint64_t v2 = *(void *)(a1 - 1);
  __n128 result = *(__n128 *)v2;
  long long v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = *(void *)(v2 + 32);
  return result;
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<CA::StreamDescription>(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 6) <= 0x27uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v8 = std::bad_cast::bad_cast(exception);
  }
  uint64_t v3 = *(void *)(a1 - 2);
  uint64_t v2 = a1 - 2;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(v3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;

  return vp::Mutable_Blob::set_size(v2, 0x28uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::StreamDescription>::~Property_List_Type_Converter()
{
}

__n128 vp::vx::Property::Property_List_Type_Converter<CA::StreamDescription>::convert_from_plist@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v10 = 0;
  long long v8 = 0u;
  __n128 v9 = 0u;
  long long v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 32))(a1, &v8, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(a3);
  uint64_t v6 = v10;
  __n128 result = v9;
  *(_OWORD *)uint64_t storage = v8;
  *(__n128 *)(storage + 16) = result;
  *(void *)(storage + 32) = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<CA::StreamDescription>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB256860(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::StreamDescription>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::StreamDescription>::convert_to_plist(int a1, applesauce::CF::TypeRef *a2, const void **this, double a4, int16x8_t a5)
{
}

void vp::vx::serialize_plist(const void **this, applesauce::CF::TypeRef *a2, const CA::StreamDescription *a3, double a4, int16x8_t a5)
{
  CA::StreamDescription::AsString(a2, (uint64_t)__p, a5);
  if ((v12 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    CFIndex v7 = v12;
  }
  else {
    CFIndex v7 = (CFIndex)__p[1];
  }
  CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  __n128 v9 = *this;
  *this = v8;
  if (v9) {
    CFRelease(v9);
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BB256984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<CA::StreamDescription>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::convert_to_string(int a1, CA::StreamDescription *this, double a3, int16x8_t a4, void *a5)
{
  CA::StreamDescription::AsString(this, (uint64_t)v8, a4);
  vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v8, (uint64_t)__p);
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = v11;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a5, (uint64_t)v6, v7);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_1BB256B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

__n128 vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string@<Q0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned __int8 **)a1;
    uint64_t v4 = *((void *)v2 + 1);
  }
  else
  {
    uint64_t v4 = a1[23];
  }
  uint64_t v5 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(a1, &a1[v4]);
  if ((char)v2[23] < 0)
  {
    uint64_t v7 = *(unsigned __int8 **)v2;
    uint64_t v6 = (unsigned __int8 *)(*(void *)v2 + *((void *)v2 + 1));
  }
  else
  {
    uint64_t v6 = &v2[v2[23]];
    uint64_t v7 = v2;
  }
  std::string::erase((std::string *)v2, v5 - v7, v6 - v5);
  if ((char)v2[23] < 0)
  {
    char v9 = *(unsigned __int8 **)v2;
    uint64_t v8 = *((void *)v2 + 1);
  }
  else
  {
    uint64_t v8 = v2[23];
    char v9 = v2;
  }
  unsigned __int8 v14 = 10;
  uint64_t v10 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v9, &v9[v8], &v14);
  if ((char)v2[23] < 0)
  {
    unsigned __int8 v12 = *(unsigned __int8 **)v2;
    unsigned __int8 v11 = (unsigned __int8 *)(*(void *)v2 + *((void *)v2 + 1));
  }
  else
  {
    unsigned __int8 v11 = &v2[v2[23]];
    unsigned __int8 v12 = v2;
  }
  std::string::erase((std::string *)v2, v10 - v12, v11 - v10);
  __n128 result = *(__n128 *)v2;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(void *)(a2 + 16) = *((void *)v2 + 2);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = 0;
  return result;
}

unsigned __int8 *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__adjacent_find[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(a1, a2);
  uint64_t v4 = v3;
  if (v3 != a2)
  {
    uint64_t v5 = v3 + 2;
    if (v3 + 2 != a2)
    {
      uint64_t v6 = MEMORY[0x1E4F14390];
      do
      {
        int v7 = *v4;
        int v8 = *v5;
        if (v7 != v8) {
          goto LABEL_10;
        }
        if ((char)v7 < 0)
        {
          if (!__maskrune((char)v7, 0x4000uLL))
          {
LABEL_9:
            LOBYTE(v8) = *v5;
LABEL_10:
            *++uint64_t v4 = v8;
          }
        }
        else if ((*(_DWORD *)(v6 + 4 * (char)v7 + 60) & 0x4000) == 0)
        {
          goto LABEL_9;
        }
        ++v5;
      }
      while (v5 != a2);
    }
    ++v4;
  }
  return v4;
}

unsigned __int8 *std::__adjacent_find[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>,vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string(std::string)::{lambda(char,char)#1} &>(unsigned __int8 *result, unsigned __int8 *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 == a2) {
      return a2;
    }
    uint64_t v4 = MEMORY[0x1E4F14390];
    while (1)
    {
      int v5 = *(v3 - 1);
      if (v5 == *v3)
      {
        if ((char)v5 < 0)
        {
          if (__maskrune((char)v5, 0x4000uLL)) {
            return v3 - 1;
          }
        }
        else if ((*(_DWORD *)(v4 + 4 * (char)v5 + 60) & 0x4000) != 0)
        {
          return v3 - 1;
        }
      }
      if (++v3 == a2) {
        return a2;
      }
    }
  }
  return result;
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)9>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 9u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB256DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<unsigned int>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<unsigned int>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<unsigned int>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<unsigned int>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<unsigned int>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<unsigned int>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<unsigned int>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<unsigned int>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<unsigned int>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<unsigned int>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<unsigned int>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<unsigned int>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB2572C4(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<unsigned int>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<unsigned int>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB2573A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<unsigned int>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<unsigned int>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<unsigned int>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Input_Port_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)10>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xAu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2575AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Input_Port_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Input_Port_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Input_Port_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Input_Port_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Input_Port_Type>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Input_Port_Type>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB257A8C(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Input_Port_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB257B70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Input_Port_Type>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Input_Port_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Input_Port_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Input_Port_Type>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t *)*a2;
  v5[0] = 5;
  int v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1BB257CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  v15[80] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 3);
  *((void *)v5 + 3) = 0;
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2ED8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2F10;
  v7[1].__shared_owners_ = (uint64_t)a1;
  unsigned __int8 v12 = v7 + 1;
  uint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = (const std::ios_base *)((char *)a1 + *(void *)(v4 - 24));
  std::ios_base::fmtflags fmtflags = v8[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v8);
    uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v14);
    v8[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v15, (uint64_t)&v12, (char)fmtflags, 0);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v15, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v15);
  return a1;
}

void sub_1BB257EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
  std::locale::~locale(&a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A2ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)11>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xBu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB258034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)12>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)12>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2580B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EZNS1_21create_property_stateILS3_12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)12>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB25811C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)12>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xCu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xCu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB258194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB258298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  unsigned __int8 v12 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v12 = &unk_1F14A2F40;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB2583D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A2F40;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A2F40;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A2F40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A2F40;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE12EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE12EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE12EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  uint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB2586B4(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Mic_Physical_Device_ID]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        unsigned __int8 v12 = __p;
        if (v9 < 0) {
          unsigned __int8 v12 = v10;
        }
        *(void *)CFTypeRef v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 12;
        __int16 v22 = 1040;
        int v23 = 22;
        __int16 v24 = 2080;
        uint64_t v25 = "Mic_Physical_Device_ID]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        long long v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB2588D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE12EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        uint64_t v16 = v10;
        if (v9) {
          unsigned __int8 v12 = " ";
        }
        else {
          unsigned __int8 v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 12;
        __int16 v21 = 1040;
        int v22 = 22;
        __int16 v23 = 2080;
        __int16 v24 = "Mic_Physical_Device_ID]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Property::create_readable<unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::data_flow::State<void>::State((uint64_t)v6, a1);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = a2;
  return vp::vx::data_flow::State<void>::~State(v6);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)13>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<double>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)13>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB258B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EZNS1_21create_property_stateILS3_13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)13>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB258B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<double>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)13>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xDu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xDu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB258CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<double>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<double>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<double>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<double>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<double>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<double>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<double>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<double>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<double>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<double>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<double>::~Blob_Type_Converter()
{
}

double vp::vx::Property::Blob_Type_Converter<double>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  double v7 = 0.0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, double *, uint64_t))(*(void *)a1 + 40))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  uint64_t storage = (double *)vp::vx::data_flow::Value::allocate_storage(a3);
  double result = v7;
  *uint64_t storage = v7;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<double>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<double>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<double>::convert_from_blob(uint64_t a1, double *a2, uint64_t a3)
{
  *a2 = vp::Blob_Getter<vp::Blob>::get<double>(a3 + 1);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<double>::convert_to_blob(uint64_t a1, double *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<double>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<double>::convert_to_blob_size()
{
  return 8;
}

double vp::Blob_Getter<vp::Blob>::get<double>(uint64_t a1)
{
  if (*(void *)(a1 + 7) != 8)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
  }
  return **(double **)(a1 - 1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<double>(uint64_t a1, double a2)
{
  if (*(void *)(a1 + 6) <= 7uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_cast::bad_cast(exception);
  }
  uint64_t v3 = *(double **)(a1 - 2);
  uint64_t v2 = a1 - 2;
  *uint64_t v3 = a2;

  return vp::Mutable_Blob::set_size(v2, 8uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<double>::~Property_List_Type_Converter()
{
}

double vp::vx::Property::Property_List_Type_Converter<double>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  double v7 = 0.0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, double *, uint64_t))(*(void *)a1 + 32))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  uint64_t storage = (double *)vp::vx::data_flow::Value::allocate_storage(a3);
  double result = v7;
  *uint64_t storage = v7;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<double>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB25924C(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<double>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<double>::convert_to_plist(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  uint64_t v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB259330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<double>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<double>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<double>::convert_to_string()
{
  return std::ostream::operator<<();
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB259514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  unsigned __int8 v12 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v12 = &unk_1F14A30B8;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB259650(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A30B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A30B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  double result = (char *)operator new(0x30uLL);
  *(void *)double result = &unk_1F14A30B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A30B8;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE13EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE13EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((double *)(a1 + 8), a2, a3);
}

double *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE13EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(double *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  double v4 = _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  double result = (double *)vp::vx::data_flow::Value::allocate_storage(v3);
  double *result = v4;
  return result;
}

double _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(double *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    double v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    double v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  uint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  double v7 = *a1;
  double v9 = a1[1];
  long long v8 = a1 + 1;
  int v13 = *v4;
  double v12 = v9;
  v11[0] = &v12;
  v11[1] = v8 + 1;
  void v11[2] = v8 + 2;
  void v11[3] = &v13;
  *(double *)&v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v11);
  return v12;
}

void sub_1BB25993C(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v20 = "Mic_Hardware_Physical_Sample_Rate]";
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (vp *)(**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  double v4 = v3;
  uint64_t v5 = *(_DWORD **)(a1 + 24);
  *(_DWORD *)buf = *v5;
  *(void *)&v22[4] = v2;
  *(void *)&v22[12] = &v20;
  if (!v6)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, (int)v3);
    double v4 = **(vp ***)(a1 + 40);
    uint64_t v5 = *(_DWORD **)(a1 + 24);
  }
  **(void **)a1 = v4;
  if (*v5)
  {
    log = vp::get_log(v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v19 & 0x80u) == 0) {
        unint64_t v9 = v19;
      }
      else {
        unint64_t v9 = (unint64_t)__p[1];
      }
      long long v10 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = (char)v19;
        double v12 = (void **)__p[0];
        int v13 = **(_DWORD **)(a1 + 24);
        std::to_string(&v17, **(double **)a1);
        long long v14 = __p;
        if (v11 < 0) {
          long long v14 = v12;
        }
        *(void *)int v22 = v14;
        std::string v15 = "";
        *(_DWORD *)buf = 136316674;
        if (v9) {
          std::string v15 = " ";
        }
        *(_WORD *)&v22[8] = 2080;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &v17;
        }
        else {
          uint64_t v16 = (std::string *)v17.__r_.__value_.__r.__words[0];
        }
        *(void *)&v22[10] = v15;
        *(_WORD *)&v22[18] = 1024;
        int v23 = 13;
        __int16 v24 = 1040;
        int v25 = 33;
        __int16 v26 = 2080;
        __int16 v27 = "Mic_Hardware_Physical_Sample_Rate]";
        __int16 v28 = 1024;
        int v29 = v13;
        __int16 v30 = 2080;
        unsigned int v31 = v16;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB259B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE13EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      double v7 = __p[1];
      long long v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          long long v10 = __p;
        }
        else {
          long long v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        uint64_t v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 13;
        __int16 v21 = 1040;
        int v22 = 33;
        __int16 v23 = 2080;
        __int16 v24 = "Mic_Hardware_Physical_Sample_Rate]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)14>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)14>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB259D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EZNS1_21create_property_stateILS3_14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)14>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB259DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)14>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xEu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xEu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB259E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB259F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3100;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB25A08C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3100;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3100;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  double result = (char *)operator new(0x30uLL);
  *(void *)double result = &unk_1F14A3100;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3100;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE14EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE14EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE14EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB25A36C(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Mic_Hardware_Input_Latency]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 14;
        __int16 v22 = 1040;
        int v23 = 26;
        __int16 v24 = 2080;
        __int16 v25 = "Mic_Hardware_Input_Latency]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB25A590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE14EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        uint64_t v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 14;
        __int16 v21 = 1040;
        int v22 = 26;
        __int16 v23 = 2080;
        __int16 v24 = "Mic_Hardware_Input_Latency]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)15>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)15>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25A794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EZNS1_21create_property_stateILS3_15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)15>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB25A800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)15>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xFu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0xFu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25A878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB25A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3148;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB25AAB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3148;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3148;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  double result = (char *)operator new(0x30uLL);
  *(void *)double result = &unk_1F14A3148;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3148;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE15EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE15EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE15EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB25AD98(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Mic_Hardware_Input_Safety_Offset]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 15;
        __int16 v22 = 1040;
        int v23 = 32;
        __int16 v24 = 2080;
        __int16 v25 = "Mic_Hardware_Input_Safety_Offset]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB25AFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE15EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        uint64_t v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 15;
        __int16 v21 = 1040;
        int v22 = 32;
        __int16 v23 = 2080;
        __int16 v24 = "Mic_Hardware_Input_Safety_Offset]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)16>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x10u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25B1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)17>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x11u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25B244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)18>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x12u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25B2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)19>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x13u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25B344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::StringRef>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::StringRef>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::StringRef>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<applesauce::CF::StringRef>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

void sub_1BB25B49C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob(uint64_t a1, const __CFString **a2, uint64_t a3)
{
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::StringRef>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::deserialize_blob<applesauce::CF::StringRef>(uint64_t a1, const void **a2)
{
  uint64_t v3 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a1 + 1);
  int v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v4);
  if (!theString) {
    goto LABEL_7;
  }
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString);
  CFStringRef v6 = Copy;
  if (Copy)
  {
    CFTypeID v7 = CFGetTypeID(Copy);
    if (v7 != CFStringGetTypeID())
    {
      CFRelease(v6);
LABEL_7:
      CFStringRef v6 = 0;
    }
  }
  uint64_t v8 = *a2;
  *a2 = v6;
  if (v8) {
    CFRelease(v8);
  }
  if (theString) {
    CFRelease(theString);
  }
}

void sub_1BB25B708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::Blob_Getter<vp::Blob>::get<__CFString const*>(uint64_t a1)
{
  if (*(void *)(a1 + 7) != 8)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
  }
  return **(void **)(a1 - 1);
}

void vp::vx::serialize_blob<applesauce::CF::StringRef>(uint64_t a1, const __CFString **a2)
{
  CFStringRef v3 = *a2;
  if (!v3) {
    goto LABEL_5;
  }
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
  CFStringRef v5 = Copy;
  if (Copy)
  {
    CFTypeID v6 = CFGetTypeID(Copy);
    if (v6 != CFStringGetTypeID())
    {
      CFRelease(v5);
LABEL_5:
      CFStringRef v5 = 0;
    }
  }
  vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a1 + 2, (uint64_t)v5);
}

void sub_1BB25B810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 6) <= 7uLL)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeID v6 = std::bad_cast::bad_cast(exception);
  }
  CFStringRef v3 = *(void **)(a1 - 2);
  uint64_t v2 = a1 - 2;
  *CFStringRef v3 = a2;

  return vp::Mutable_Blob::set_size(v2, 8uLL);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::StringRef>::~Property_List_Type_Converter()
{
}

void *vp::vx::Property::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

void sub_1BB25B91C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB25BA6C(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::StringRef>::convert_to_plist(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v4 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
  }
  else
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v6, "(null)");
    CFTypeRef v4 = v6;
  }
  uint64_t v5 = *a3;
  *a3 = v4;
  uint64_t v6 = v5;
  if (v5) {
    CFRelease(v5);
  }
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::StringRef>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<applesauce::CF::StringRef>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::StringRef>::convert_to_string(uint64_t a1, CFTypeRef *a2, void *a3)
{
  if (*a2)
  {
    CFStringRef v4 = CFCopyDescription(*a2);
    applesauce::CF::details::CFString_get_value<true>(v4, (uint64_t)v7);
    if (v4) {
      CFRelease(v4);
    }
    vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v7, (uint64_t)__p);
    if ((v10 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v6 = v10;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v5, v6);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"null", 4);
  }
}

void sub_1BB25BCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EZNS1_21create_property_stateILS3_70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)70>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB25BD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIfEC2IZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)70>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x46u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x46u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIfEC2IZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A32C0;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB25BFB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A32C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A32C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  double result = (char *)operator new(0x30uLL);
  *(void *)double result = &unk_1F14A32C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A32C0;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIfZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE70EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIfEC1IZNS4_29Voice_Processor_State_Manager12create_stateIfZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE70EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((float *)(a1 + 8), a2, a3);
}

float *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIfEC1IZNS4_29Voice_Processor_State_Manager12create_stateIfZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE70EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(float *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  float v4 = _ZN2vp2vx9data_flow8FunctionIfE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  double result = (float *)vp::vx::data_flow::Value::allocate_storage(v3);
  float *result = v4;
  return result;
}

float _ZN2vp2vx9data_flow8FunctionIfE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIfZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(float *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    float v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    float v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  uint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  uint64_t v7 = *(void *)a1;
  float v9 = a1[2];
  long long v8 = (uint64_t *)(a1 + 2);
  int v13 = *v4;
  float v12 = v9;
  v11[0] = &v12;
  v11[1] = v8 + 1;
  void v11[2] = v8 + 2;
  void v11[3] = &v13;
  v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v11);
  return v12;
}

void sub_1BB25C29C(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "IO_Cycle_Usage]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      long long v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        long long v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(float **)a1);
        float v12 = __p;
        if (v9 < 0) {
          float v12 = v10;
        }
        *(void *)int v20 = v12;
        int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v14 = &v15;
        }
        else {
          long long v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 70;
        __int16 v22 = 1040;
        int v23 = 14;
        __int16 v24 = 2080;
        __int16 v25 = "IO_Cycle_Usage]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB25C4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE70EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      long long v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          long long v10 = __p;
        }
        else {
          long long v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        uint64_t v16 = v10;
        if (v9) {
          float v12 = " ";
        }
        else {
          float v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 70;
        __int16 v21 = 1040;
        int v22 = 14;
        __int16 v23 = 2080;
        __int16 v24 = "IO_Cycle_Usage]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB25C6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<float>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)uint64_t storage = *(_OWORD *)a2;
  storage[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)20>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x14u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25C804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<std::vector<float>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<float>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<float>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::~Blob_Type_Converter()
{
}

double vp::vx::Property::Blob_Type_Converter<std::vector<float>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 40))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB25C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<float>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<float>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::convert_from_blob(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = (const void *)vp::Blob_Viewer<vp::Blob>::view<float>(a3);
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&v8, v4, (uint64_t)v4 + 4 * v5, (4 * v5) >> 2);
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<float const>>(a3 + 2, *(const void **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<float>>::convert_to_blob_size(uint64_t a1, void *a2)
{
  return a2[1] - *a2;
}

uint64_t vp::Blob_Viewer<vp::Blob>::view<float>(void *a1)
{
  if ((a1[1] & 3) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
  }
  return *a1;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB25CC48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<float const>>(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(void *)(a1 + 6) < (unint64_t)(4 * a3))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
  }
  unint64_t v3 = 4 * a3;
  uint64_t v4 = a1 - 2;
  memcpy(*(void **)(a1 - 2), a2, 4 * a3);

  return vp::Mutable_Blob::set_size(v4, v3);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<float>>::~Property_List_Type_Converter()
{
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<float>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 32))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB25CD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<float>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB25CEE0(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<float>>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<float>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<float>(&__p);
  uint64_t v5 = *a3;
  *a3 = CFArray;
  if (v5) {
    CFRelease(v5);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1BB25CFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float>(void *a1)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  unint64_t v3 = (_DWORD *)*a1;
  uint64_t v4 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v4)
  {
    uint64_t v5 = v9;
    do
    {
      LODWORD(v11) = *v3;
      if ((unint64_t)v5 >= v10) {
        uint64_t v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float>((uint64_t *)&v8, (int *)&v11);
      }
      else {
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>(v5++, (int *)&v11);
      }
      uint64_t v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  int v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_1BB25D08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float>(uint64_t *a1, int *a2)
{
  unint64_t v3 = (void *)*a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - (void)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v22 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  __int16 v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  __int16 v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  uint64_t v11 = v20.i64[0];
  uint64_t v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  unsigned __int8 v14 = (void *)*a1;
  int v13 = (void *)a1[1];
  if (v13 == (void *)*a1)
  {
    int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      uint64_t v15 = *--v13;
      *(void *)(v11 - 8) = v15;
      v11 -= 8;
      void *v13 = 0;
    }
    while (v13 != v14);
    int64x2_t v16 = *(int64x2_t *)a1;
    uint64_t v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  int64x2_t v20 = v16;
  __int16 v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  __int16 v21 = v17;
  __int16 v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1BB25D1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB25D26C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<float>>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<float>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<float>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  CFArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<float>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4[0] = 0;
  uint64_t v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1BB25D3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<float>,0>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 2;
  CFNumberRef v3 = *(float **)a2;
  uint64_t v5 = *(float **)(a2 + 8);
  CFArrayRef v6 = v3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(float **a1, float **a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  CFArrayRef v6 = *a2;
  unint64_t v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1BB25D494(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(void *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    CFArrayRef v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,float const*,float const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BB25D510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,float const*,float const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    CFArrayRef v6 = a2;
    do
    {
      *(void *)(v4 + 8) = 0;
      float v7 = *v6++;
      *(unsigned char *)uint64_t v4 = 7;
      *(double *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      uint64_t v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::ArrayRef>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)21>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x15u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25D6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::ArrayRef>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::ArrayRef>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::ArrayRef>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

void sub_1BB25D838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob(uint64_t a1, const __CFArray **a2, uint64_t a3)
{
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::ArrayRef>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::deserialize_blob<applesauce::CF::ArrayRef>(uint64_t a1, const void **a2)
{
  uint64_t v3 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a1 + 1);
  uint64_t v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v4);
  if (!theArray) {
    goto LABEL_7;
  }
  CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theArray);
  CFArrayRef v6 = Copy;
  if (Copy)
  {
    CFTypeID v7 = CFGetTypeID(Copy);
    if (v7 != CFArrayGetTypeID())
    {
      CFRelease(v6);
LABEL_7:
      CFArrayRef v6 = 0;
    }
  }
  uint64_t v8 = *a2;
  *a2 = v6;
  if (v8) {
    CFRelease(v8);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void sub_1BB25DAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::serialize_blob<applesauce::CF::ArrayRef>(uint64_t a1, const __CFArray **a2)
{
  CFArrayRef v3 = *a2;
  if (!v3) {
    goto LABEL_5;
  }
  CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
  CFArrayRef v5 = Copy;
  if (Copy)
  {
    CFTypeID v6 = CFGetTypeID(Copy);
    if (v6 != CFArrayGetTypeID())
    {
      CFRelease(v5);
LABEL_5:
      CFArrayRef v5 = 0;
    }
  }
  vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a1 + 2, (uint64_t)v5);
}

void sub_1BB25DB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::ArrayRef>::~Property_List_Type_Converter()
{
}

void *vp::vx::Property::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

void sub_1BB25DC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB25DD54(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::ArrayRef>::convert_to_plist(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v4 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
  }
  else
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v6, "(null)");
    CFTypeRef v4 = v6;
  }
  uint64_t v5 = *a3;
  *a3 = v4;
  uint64_t v6 = v5;
  if (v5) {
    CFRelease(v5);
  }
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::ArrayRef>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<applesauce::CF::ArrayRef>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::ArrayRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::ArrayRef>::convert_to_string(uint64_t a1, CFTypeRef *a2, void *a3)
{
  if (*a2)
  {
    CFStringRef v4 = CFCopyDescription(*a2);
    applesauce::CF::details::CFString_get_value<true>(v4, (uint64_t)v7);
    if (v4) {
      CFRelease(v4);
    }
    vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v7, (uint64_t)__p);
    if ((v10 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v6 = v10;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v5, v6);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"null", 4);
  }
}

void sub_1BB25DFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)22>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x16u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25E06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::DictionaryRef>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::DictionaryRef>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<applesauce::CF::DictionaryRef>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  CFStringRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

void sub_1BB25E1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
}

void vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::deserialize_blob<applesauce::CF::DictionaryRef>(uint64_t a1, const void **a2)
{
  uint64_t v3 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a1 + 1);
  CFStringRef v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&theDict, v4);
  if (!theDict) {
    goto LABEL_7;
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theDict);
  CFDictionaryRef v6 = Copy;
  if (Copy)
  {
    CFTypeID v7 = CFGetTypeID(Copy);
    if (v7 != CFDictionaryGetTypeID())
    {
      CFRelease(v6);
LABEL_7:
      CFDictionaryRef v6 = 0;
    }
  }
  uint64_t v8 = *a2;
  *a2 = v6;
  if (v8) {
    CFRelease(v8);
  }
  if (theDict) {
    CFRelease(theDict);
  }
}

void sub_1BB25E430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::serialize_blob<applesauce::CF::DictionaryRef>(uint64_t a1, const __CFDictionary **a2)
{
  CFDictionaryRef v3 = *a2;
  if (!v3) {
    goto LABEL_5;
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
  CFDictionaryRef v5 = Copy;
  if (Copy)
  {
    CFTypeID v6 = CFGetTypeID(Copy);
    if (v6 != CFDictionaryGetTypeID())
    {
      CFRelease(v5);
LABEL_5:
      CFDictionaryRef v5 = 0;
    }
  }
  vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a1 + 2, (uint64_t)v5);
}

void sub_1BB25E4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::~Property_List_Type_Converter()
{
}

void *vp::vx::Property::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  CFStringRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

void sub_1BB25E590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB25E6E0(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_plist(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v4 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
  }
  else
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v6, "(null)");
    CFTypeRef v4 = v6;
  }
  uint64_t v5 = *a3;
  *a3 = v4;
  uint64_t v6 = v5;
  if (v5) {
    CFRelease(v5);
  }
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::DictionaryRef>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<applesauce::CF::DictionaryRef>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<applesauce::CF::DictionaryRef>::convert_to_string(uint64_t a1, CFTypeRef *a2, void *a3)
{
  if (*a2)
  {
    CFStringRef v4 = CFCopyDescription(*a2);
    applesauce::CF::details::CFString_get_value<true>(v4, (uint64_t)v7);
    if (v4) {
      CFRelease(v4);
    }
    vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)v7, (uint64_t)__p);
    if ((v10 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v6 = v10;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v5, v6);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"null", 4);
  }
}

void sub_1BB25E948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)23>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x17u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25E9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)24>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x18u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25EA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Output_Port_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)25>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x19u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25EB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Output_Port_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Output_Port_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Output_Port_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Output_Port_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFStringRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Output_Port_Type>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Output_Port_Type>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFStringRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB25F07C(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Output_Port_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB25F160(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Output_Port_Type>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Output_Port_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Output_Port_Type>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t *)*a2;
  v5[0] = 5;
  int v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1BB25F2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)26>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)27>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)27>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25F3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EZNS1_21create_property_stateILS3_27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)27>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB25F420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)27>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25F498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB25F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  uint64_t v12 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v12 = &unk_1F14A37C8;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB25F6D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A37C8;
  unint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A37C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A37C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A37C8;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE27EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE27EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE27EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  int v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB25F9B8(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Physical_Device_ID]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        uint64_t v12 = __p;
        if (v9 < 0) {
          uint64_t v12 = v10;
        }
        *(void *)int64x2_t v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 27;
        __int16 v22 = 1040;
        int v23 = 22;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Physical_Device_ID]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB25FBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE27EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        int64x2_t v16 = v10;
        if (v9) {
          uint64_t v12 = " ";
        }
        else {
          uint64_t v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 27;
        __int16 v21 = 1040;
        int v22 = 22;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Physical_Device_ID]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)36>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Sub_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)36>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB25FDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36EZNS1_21create_property_stateILS3_36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_13Port_Sub_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)36>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1BB25FE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Sub_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)36>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x24u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x24u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB25FF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Sub_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Sub_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Sub_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Sub_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  uint64_t result = vp::vx::legacy_cast<vp::vx::Port_Sub_Type>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a3 + 2;
  int v4 = vp::vx::legacy_cast<vp::vx::Port_Sub_Type>(*a2);

  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_blob_size()
{
  return 4;
}

void sub_1BB2602D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1BB26032CLL);
}

void sub_1BB26033C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB260534(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB260618(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Sub_Type>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Sub_Type>::convert_to_string(uint64_t a1, int *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t *)*a2;
  v5[0] = 5;
  int v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1BB260778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_13Port_Sub_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  long long v11 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE((uint64_t)v12, a1 + 48, (uint64_t)&v9, a3, a4, a5, a6);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1BB260878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  unsigned __int8 v14 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v14 = &unk_1F14A3940;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((void *)v14 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v16;
  v22[3] = v14;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v21 = vp::vx::data_flow::State_Transaction::get_id(a7);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v22, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v22);
  return a1;
}

void sub_1BB2609CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3940;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3940;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3940;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3940;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_13Port_Sub_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE36ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EEclEOS1O_OS1P_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_13Port_Sub_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE36ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_13Port_Sub_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE36ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Sub_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_13Port_Sub_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    int v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  uint64_t v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  int v9 = *v4;
  int v16 = *v6;
  int v17 = v9;
  uint64_t v10 = *a1;
  unsigned int v12 = *((_DWORD *)a1 + 2);
  long long v11 = a1 + 1;
  unsigned int v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  void v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1BB260CEC(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v29 = "Ref_Port_Sub_Type]";
  long long v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  uint64_t v3 = **(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = **(unsigned int **)(a1 + 24);
  uint64_t v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  unint64_t v7 = v2(v3, v5, v6);
  int v8 = v7;
  int v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)unsigned int v31 = *v9;
  *(void *)&v31[4] = v4;
  *(void *)&v31[12] = &v29;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    int v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v27);
      unint64_t v12 = v28;
      unsigned int v13 = v27[1];
      unsigned __int8 v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        if ((v28 & 0x80u) == 0) {
          int v16 = v27;
        }
        else {
          int v16 = (void **)v27[0];
        }
        if (v15) {
          int v17 = " ";
        }
        else {
          int v17 = "";
        }
        int v18 = **(_DWORD **)(a1 + 24);
        uint64_t v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0) {
          LODWORD(v19) = 0;
        }
        std::to_string(&v26, v19);
        int v20 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        std::string::size_type v21 = v26.__r_.__value_.__r.__words[0];
        uint64_t v22 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Sub_Type>(**(_DWORD **)a1);
        if ((v22 & 0xFF00000000) == 0) {
          LODWORD(v22) = 0;
        }
        std::to_string(&__p, v22);
        __int16 v23 = &v26;
        if (v20 < 0) {
          __int16 v23 = (std::string *)v21;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316930;
        *(void *)unsigned int v31 = v16;
        *(_WORD *)&v31[8] = 2080;
        *(void *)&v31[10] = v17;
        *(_WORD *)&v31[18] = 1024;
        int v32 = 36;
        __int16 v33 = 1040;
        int v34 = 17;
        __int16 v35 = 2080;
        uint64_t v36 = "Ref_Port_Sub_Type]";
        __int16 v37 = 1024;
        int v38 = v18;
        __int16 v39 = 2080;
        __int16 v40 = v23;
        __int16 v41 = 2080;
        __int16 v42 = p_p;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v28 < 0) {
        operator delete(v27[0]);
      }
    }
  }
}

void sub_1BB260F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

std::string *vp::vx::detail::to_string<vp::vx::Output_Port_Type>@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(*a1);
  if ((v3 & 0xFF00000000) == 0) {
    LODWORD(v3) = 0;
  }

  return std::to_string(a2, v3);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE36ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0) {
        unint64_t v6 = v16;
      }
      else {
        unint64_t v6 = (unint64_t)v15[1];
      }
      unint64_t v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = (char)v16;
        int v9 = (void **)v15[0];
        int v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        long long v11 = v15;
        if (v8 < 0) {
          long long v11 = v9;
        }
        int v18 = v11;
        unint64_t v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6) {
          unint64_t v12 = " ";
        }
        __int16 v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v20 = v12;
        __int16 v21 = 1024;
        int v22 = 36;
        __int16 v23 = 1040;
        int v24 = 17;
        __int16 v25 = 2080;
        std::string v26 = "Ref_Port_Sub_Type]";
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 2080;
        uint64_t v30 = p_p;
        __int16 v31 = 1024;
        int v32 = a2;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v16 < 0) {
        operator delete(v15[0]);
      }
    }
  }
}

void sub_1BB2611CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::legacy_cast_noexcept<vp::vx::Port_Sub_Type>(int a1)
{
  return vp::vx::Legacy<vp::vx::Port_Sub_Type>::cast(a1) | 0x100000000;
}

{
  return vp::vx::Legacy<vp::vx::Port_Sub_Type>::cast(a1) | 0x100000000;
}

void sub_1BB261218(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1BB261230(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BB261208);
  }
  uint64_t v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t _ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_13Port_Sub_TypeEiEES4_(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = vp::vx::get_output_port_sub_type(a1, a2, a3);
  uint64_t v6 = result;
  if ((result & 0xFF00000000) == 0) {
    return result;
  }
  uint64_t v4 = (int *)caulk::expected<unsigned int,int>::value((uint64_t)&v6);
  uint64_t v5 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Sub_Type>(*v4);
  if ((v5 & 0xFF00000000) != 0) {
    return v5 | 0x100000000;
  }
  else {
    return 0x100000000;
  }
}

void sub_1BB261304(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1BB26131C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BB2612F4);
  }
  uint64_t v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)37>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Endpoint_Type>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)37>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2613C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37EZNS1_21create_property_stateILS3_37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_18Port_Endpoint_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)37>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1BB261434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Port_Endpoint_Type>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)37>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x25u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x25u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB261550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Endpoint_Type>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Endpoint_Type>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Port_Endpoint_Type>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Port_Endpoint_Type>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  uint64_t result = vp::vx::legacy_cast<vp::vx::Port_Endpoint_Type>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a3 + 2;
  int v4 = vp::vx::legacy_cast<vp::vx::Port_Endpoint_Type>(*a2);

  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_blob_size()
{
  return 4;
}

void sub_1BB2618C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1BB261914);
}

void sub_1BB261924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB261B1C(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB261C00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Endpoint_Type>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Port_Endpoint_Type>::convert_to_string(uint64_t a1, int *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t *)*a2;
  v5[0] = 5;
  int v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1BB261D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateINS0_18Port_Endpoint_TypeEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISC_iEERKNS_8services14Audio_HardwareEjjERKNS9_IjEERKNS9_IT0_EESC_EUlT_SP_DpT1_E_JjS7_jjEEEDaOSP_DpRKNS9_ISU_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  long long v11 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE((uint64_t)v12, a1 + 48, (uint64_t)&v9, a3, a4, a5, a6);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1BB261E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEEERNS1_13State_ManagerESW_DpRKNSC_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  unsigned __int8 v14 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v14 = &unk_1F14A3AB8;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((void *)v14 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v16;
  v22[3] = v14;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v21 = vp::vx::data_flow::State_Transaction::get_id(a7);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v22, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v22);
  return a1;
}

void sub_1BB261FB4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3AB8;
  long long v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3AB8;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3AB8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3AB8;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_18Port_Endpoint_TypeEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS6_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE37ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISI_iEERKNS2_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS4_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS4_5ValueEPS1L_E_NS_9allocatorIS1Q_EEFvS1O_S1P_EEclEOS1O_OS1P_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_18Port_Endpoint_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE37ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionINS4_18Port_Endpoint_TypeEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS7_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE37ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISJ_iEERKNS3_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS5_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS5_5ValueEPS1M_E_S1P_S1Q_EEEvDpOS1A_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Port_Endpoint_Type>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionINS0_18Port_Endpoint_TypeEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS3_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISF_iEERKNS_8services14Audio_HardwareEjjERKNSC_IjEERKNSC_IT0_EESF_EUlT_SS_DpT1_E_JjSB_jjEEEDaOSS_DpRKNSC_ISX_EEEUlDpRKT_E_JjSB_jjEJLm0ELm1ELm2ELm3EEEEDaRKSW_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    int v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  uint64_t v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  int v9 = *v4;
  int v16 = *v6;
  int v17 = v9;
  uint64_t v10 = *a1;
  unsigned int v12 = *((_DWORD *)a1 + 2);
  long long v11 = a1 + 1;
  unsigned int v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  void v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1BB2622D4(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  __int16 v29 = "Ref_Port_Endpoint_Type]";
  long long v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  uint64_t v3 = **(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = **(unsigned int **)(a1 + 24);
  uint64_t v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  unint64_t v7 = v2(v3, v5, v6);
  int v8 = v7;
  int v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)__int16 v31 = *v9;
  *(void *)&v31[4] = v4;
  *(void *)&v31[12] = &v29;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    int v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v27);
      unint64_t v12 = v28;
      unsigned int v13 = v27[1];
      unsigned __int8 v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        if ((v28 & 0x80u) == 0) {
          int v16 = v27;
        }
        else {
          int v16 = (void **)v27[0];
        }
        if (v15) {
          int v17 = " ";
        }
        else {
          int v17 = "";
        }
        int v18 = **(_DWORD **)(a1 + 24);
        uint64_t v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0) {
          LODWORD(v19) = 0;
        }
        std::to_string(&v26, v19);
        int v20 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        std::string::size_type v21 = v26.__r_.__value_.__r.__words[0];
        uint64_t v22 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Endpoint_Type>(**(_DWORD **)a1);
        if ((v22 & 0xFF00000000) == 0) {
          LODWORD(v22) = 0;
        }
        std::to_string(&__p, v22);
        __int16 v23 = &v26;
        if (v20 < 0) {
          __int16 v23 = (std::string *)v21;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316930;
        *(void *)__int16 v31 = v16;
        *(_WORD *)&v31[8] = 2080;
        *(void *)&v31[10] = v17;
        *(_WORD *)&v31[18] = 1024;
        int v32 = 37;
        __int16 v33 = 1040;
        int v34 = 22;
        __int16 v35 = 2080;
        uint64_t v36 = "Ref_Port_Endpoint_Type]";
        __int16 v37 = 1024;
        int v38 = v18;
        __int16 v39 = 2080;
        __int16 v40 = v23;
        __int16 v41 = 2080;
        __int16 v42 = p_p;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v28 < 0) {
        operator delete(v27[0]);
      }
    }
  }
}

void sub_1BB26256C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE37ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0) {
        unint64_t v6 = v16;
      }
      else {
        unint64_t v6 = (unint64_t)v15[1];
      }
      unint64_t v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = (char)v16;
        int v9 = (void **)v15[0];
        int v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        long long v11 = v15;
        if (v8 < 0) {
          long long v11 = v9;
        }
        int v18 = v11;
        unint64_t v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6) {
          unint64_t v12 = " ";
        }
        __int16 v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v20 = v12;
        __int16 v21 = 1024;
        int v22 = 37;
        __int16 v23 = 1040;
        int v24 = 22;
        __int16 v25 = 2080;
        std::string v26 = "Ref_Port_Endpoint_Type]";
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 2080;
        uint64_t v30 = p_p;
        __int16 v31 = 1024;
        int v32 = a2;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v16 < 0) {
        operator delete(v15[0]);
      }
    }
  }
}

void sub_1BB262770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::legacy_cast_noexcept<vp::vx::Port_Endpoint_Type>(int a1)
{
  return vp::vx::Legacy<vp::vx::Port_Endpoint_Type>::cast(a1) | 0x100000000;
}

{
  return vp::vx::Legacy<vp::vx::Port_Endpoint_Type>::cast(a1) | 0x100000000;
}

void sub_1BB2627BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1BB2627D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BB2627ACLL);
  }
  uint64_t v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t _ZZZN2vp2vx15Voice_Processor22create_property_statesEvENK3__0clEvENUlDpT_E0_8__invokeIJRKNS_8services14Audio_HardwareEjjEEENS_8ExpectedINS0_18Port_Endpoint_TypeEiEES4_(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = vp::vx::get_output_port_endpoint_type(a1, a2, a3);
  uint64_t v6 = result;
  if ((result & 0xFF00000000) == 0) {
    return result;
  }
  uint64_t v4 = (int *)caulk::expected<unsigned int,int>::value((uint64_t)&v6);
  uint64_t v5 = vp::vx::legacy_cast_noexcept<vp::vx::Port_Endpoint_Type>(*v4);
  if ((v5 & 0xFF00000000) != 0) {
    return v5 | 0x100000000;
  }
  else {
    return 0x100000000;
  }
}

void sub_1BB2628A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
}

void sub_1BB2628C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BB262898);
  }
  uint64_t v12 = _os_crash();
  caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v12);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)38>@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)38>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB26296C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EZNS1_21create_property_stateILS3_38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)38>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB2629D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)38>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x26u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x26u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB262A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB262B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  uint64_t v12 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v12 = &unk_1F14A3B00;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB262C90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3B00;
  long long v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3B00;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3B00;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3B00;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIbZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE38EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIbZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE38EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIbZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE38EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIbZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    char v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    char v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  uint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  char v7 = *(BOOL **)a1;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 8);
  long long v8 = (BOOL *)(a1 + 8);
  int v13 = *v4;
  unsigned __int8 v12 = v9;
  v11[0] = (BOOL *)&v12;
  v11[1] = v8 + 8;
  void v11[2] = v8 + 16;
  void v11[3] = (BOOL *)&v13;
  v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(v11);
  return v12;
}

void sub_1BB262F74(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(BOOL **a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Port_Is_Apple_Made_Bluetooth_Product]";
  long long v2 = (unsigned __int8 *)a1[4];
  unint64_t v3 = (*(uint64_t (**)(void, void))a1[1])(*(void *)a1[2], *(unsigned int *)a1[3]);
  *(_DWORD *)buf = *(_DWORD *)a1[3];
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) != 0)
  {
    int v4 = v3;
  }
  else
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = *a1[5];
  }
  **a1 = v4 != 0;
  if (*(_DWORD *)a1[3])
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      long long v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        long long v10 = (void **)__p[0];
        int v11 = *(_DWORD *)a1[3];
        std::to_string(&v15, **a1);
        unsigned __int8 v12 = __p;
        if (v9 < 0) {
          unsigned __int8 v12 = v10;
        }
        *(void *)int v20 = v12;
        int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v14 = &v15;
        }
        else {
          long long v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 38;
        __int16 v22 = 1040;
        int v23 = 40;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Port_Is_Apple_Made_Bluetooth_Product]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        __int16 v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB2631A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE38EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      long long v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          long long v10 = __p;
        }
        else {
          long long v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          unsigned __int8 v12 = " ";
        }
        else {
          unsigned __int8 v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 38;
        __int16 v21 = 1040;
        int v22 = 40;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Port_Is_Apple_Made_Bluetooth_Product]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)39>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::StringRef>((std::pmr *)(a1 + 16), a2, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)39>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2633A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39EZNS1_21create_property_stateILS3_39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN10applesauce2CF9StringRefEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjS9_jjEEEDaOSR_DpRKNSB_ISW_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)39>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1BB263410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENUlT_SM_DpT1_E_D1Ev(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)39>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x27u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x27u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2634C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN10applesauce2CF9StringRefEZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjS9_jjEEEDaOSR_DpRKNSB_ISW_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  long long v8 = *a2;
  long long v9 = a2[1];
  *((void *)a2 + 1) = 0;
  *(_OWORD *)CFTypeRef cf = v8;
  long long v12 = v9;
  int v13 = (std::__shared_weak_count *)*((void *)a2 + 4);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS1_13State_ManagerESY_DpRKNSE_IT0_EE((uint64_t)v14, a1 + 48, (long long *)cf, a3, a4, a5, a6);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (cf[1]) {
    CFRelease(cf[1]);
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1BB2635DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC2IZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS1_13State_ManagerESY_DpRKNSE_IT0_EE(uint64_t a1, uint64_t a2, long long *a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  _OWORD v23[4] = *MEMORY[0x1E4F143B8];
  long long v16 = a3[1];
  long long v17 = *a3;
  *((void *)a3 + 1) = 0;
  uint64_t v13 = *((void *)a3 + 4);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  unsigned __int8 v14 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v14 = &unk_1F14A3B48;
  *(_OWORD *)(v14 + 8) = v17;
  *(_OWORD *)(v14 + 24) = v16;
  *((void *)v14 + 5) = v13;
  v23[3] = v14;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v20 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v21 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v22 = vp::vx::data_flow::State_Transaction::get_id(a7);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v23, (uint64_t)v18);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State(v18);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v23);
  return a1;
}

void sub_1BB263734(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3B48;
  long long v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3B48;
  long long v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x30uLL);
  *long long v2 = &unk_1F14A3B48;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIS7_ZNS2_15Voice_Processor21create_property_stateILNS2_11Property_IDE39ENS2_16Output_Port_TypeEEENS3_5StateINS2_18Property_ID_TraitsIXT_EE4TypeEEEPFNS1_8ExpectedISJ_iEERKNS1_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS3_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS3_5ValueEPS1M_E_Li0ELb0EEC2B8ne180100IJRKS1R_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpS1A_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7__cloneEPNS0_6__baseIS1V_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A3B48;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIS7_ZNS2_15Voice_Processor21create_property_stateILNS2_11Property_IDE39ENS2_16Output_Port_TypeEEENS3_5StateINS2_18Property_ID_TraitsIXT_EE4TypeEEEPFNS1_8ExpectedISJ_iEERKNS1_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS3_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS3_5ValueEPS1M_E_Li0ELb0EEC2B8ne180100IJRKS1R_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpS1A_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7destroyEv(uint64_t a1)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7destroyB8ne180100Ev((uint64_t)a1 + 8);

  operator delete(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EEclEOS1Q_OS1R_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS9_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE39ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISL_iEERKNS3_8services14Audio_HardwareEjjERKNSI_IjEERKNSI_IT0_EESL_EUlT_SY_DpT1_E_JjSH_jjEEEDaOSY_DpRKNSI_IS13_EEEUlDpRKT_E_JjSH_jjEEERNS5_13State_ManagerES12_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS1O_E_S1R_S1S_EEEvDpOS1C_(a1 + 8, a2, a3);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS2_29Voice_Processor_State_Manager12create_stateIS7_ZNS2_15Voice_Processor21create_property_stateILNS2_11Property_IDE39ENS2_16Output_Port_TypeEEENS3_5StateINS2_18Property_ID_TraitsIXT_EE4TypeEEEPFNS1_8ExpectedISJ_iEERKNS1_8services14Audio_HardwareEjjERKNSG_IjEERKNSG_IT0_EESJ_EUlT_SW_DpT1_E_JjSF_jjEEEDaOSW_DpRKNSG_IS11_EEEUlDpRKT_E_JjSF_jjEEERNS3_13State_ManagerES10_DpRKNSG_IT0_EEEUlPPKNS3_5ValueEPS1M_E_Li0ELb0EEC2B8ne180100IJRKS1R_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpS1A_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(const void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void _ZNSt3__110__function12__alloc_funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS8_ZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE39ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISK_iEERKNS2_8services14Audio_HardwareEjjERKNSH_IjEERKNSH_IT0_EESK_EUlT_SX_DpT1_E_JjSG_jjEEEDaOSX_DpRKNSH_IS12_EEEUlDpRKT_E_JjSG_jjEEERNS4_13State_ManagerES11_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS1N_E_NS_9allocatorIS1S_EEFvS1Q_S1R_EE7destroyB8ne180100Ev(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
}

void *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS9_ZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE39ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISL_iEERKNS3_8services14Audio_HardwareEjjERKNSI_IjEERKNSI_IT0_EESL_EUlT_SY_DpT1_E_JjSH_jjEEEDaOSY_DpRKNSI_IS13_EEEUlDpRKT_E_JjSH_jjEEERNS5_13State_ManagerES12_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS1O_E_S1R_S1S_EEEvDpOS1C_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  unint64_t v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEJLm0ELm1ELm2ELm3EEEEDaRKSY_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2, &v6);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)unint64_t v3 = std::pmr::get_default_resource(v4);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v6;
  return result;
}

void sub_1BB2639EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS5_ZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISH_iEERKNS_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEJLm0ELm1ELm2ELm3EEEEDaRKSY_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v6 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = *(uint64_t (*****)())(a2 + 8);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    long long v8 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    long long v8 = 0;
  }
  long long v9 = *(uint64_t (*****)())(a2 + 16);
  if (v9[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  }
  long long v10 = *(uint64_t (*****)())(a2 + 24);
  if (v10[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  int v11 = *v6;
  int v16 = *v8;
  int v17 = v11;
  long long v12 = *(const void ***)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a1 + 8));
  }
  v14[6] = (const void **)(a1 + 8);
  uint64_t v15 = v13;
  v14[0] = (const void **)&v15;
  v14[1] = (const void **)(a1 + 16);
  v14[2] = (const void **)(a1 + 24);
  v14[3] = (const void **)&v17;
  v14[4] = (const void **)&v16;
  void v14[5] = v12;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(v14);
  *a3 = v15;
}

void sub_1BB263B1C(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(const void ***a1)
{
  void (*v4)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  void *v9;
  NSObject *log;
  vp *log_context_info;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  int v18;
  uint64_t v19;
  std::string *v20;
  const void *v21;
  CFStringRef v22;
  void **v23;
  void *__p[2];
  char v25;
  std::string v26;
  void *v27;
  uint64_t v28;
  unsigned __int8 v29;
  char *v30;
  uint8_t buf[4];
  unsigned char v32[20];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  std::string *v41;
  __int16 v42;
  void **v43;
  uint64_t v44;

  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v2 = a1[5];
  uint64_t v30 = "Ref_Port_UID]";
  unint64_t v3 = (_DWORD **)(a1 + 3);
  int v4 = (void (*)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t))*a1[1];
  uint64_t v5 = (uint64_t)*a1[2];
  uint64_t v6 = *(unsigned int *)a1[3];
  unint64_t v7 = (_DWORD **)(a1 + 4);
  long long v8 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(*(_DWORD *)a1[4]);
  v4(&v26, v5, v6, v8);
  *(_DWORD *)buf = **v3;
  *(_DWORD *)int v32 = **v7;
  *(void *)&v32[4] = v2;
  *(void *)&v32[12] = &v30;
  if (v26.__r_.__value_.__s.__data_[8])
  {
    LOBYTE(v28) = v26.__r_.__value_.__s.__data_[8];
LABEL_4:
    __int16 v27 = (void *)v26.__r_.__value_.__r.__words[0];
    v26.__r_.__value_.__r.__words[0] = 0;
    goto LABEL_5;
  }
  _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, (int)v26.__r_.__value_.__l.__data_);
  LOBYTE(v28) = v26.__r_.__value_.__s.__data_[8];
  if (v26.__r_.__value_.__s.__data_[8]) {
    goto LABEL_4;
  }
  LODWORD(v27) = v26.__r_.__value_.__l.__data_;
LABEL_5:
  caulk::expected<applesauce::CF::StringRef,int>::value_or<applesauce::CF::StringRef const&>(&v27, a1[6], __p);
  long long v9 = (void *)**a1;
  **a1 = __p[0];
  __p[0] = v9;
  if (v9) {
    CFRelease(v9);
  }
  if ((_BYTE)v28) {
    caulk::__expected_detail::destroy<applesauce::CF::StringRef,(void *)0>((const void **)&v27);
  }
  if (v26.__r_.__value_.__s.__data_[8]) {
    caulk::__expected_detail::destroy<applesauce::CF::StringRef,(void *)0>((const void **)&v26.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)a1[3])
  {
    log = vp::get_log((vp *)v9);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v27);
      long long v12 = v29;
      uint64_t v13 = v28;
      unsigned __int8 v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = v13;
        }
        if ((v29 & 0x80u) == 0) {
          int v16 = &v27;
        }
        else {
          int v16 = v27;
        }
        if (v15) {
          int v17 = " ";
        }
        else {
          int v17 = "";
        }
        int v18 = *(_DWORD *)a1[3];
        __int16 v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(*(_DWORD *)a1[4]);
        if ((v19 & 0xFF00000000) == 0) {
          LODWORD(v19) = 0;
        }
        int v20 = &v26;
        std::to_string(&v26, v19);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        int v21 = **a1;
        if (v21)
        {
          int v22 = CFCopyDescription(v21);
          applesauce::CF::details::CFString_get_value<true>(v22, (uint64_t)__p);
          if (v22) {
            CFRelease(v22);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "null");
        }
        __int16 v23 = __p;
        if (v25 < 0) {
          __int16 v23 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316930;
        *(void *)int v32 = v16;
        *(_WORD *)&v32[8] = 2080;
        *(void *)&v32[10] = v17;
        *(_WORD *)&v32[18] = 1024;
        uint64_t v33 = 39;
        int v34 = 1040;
        __int16 v35 = 12;
        uint64_t v36 = 2080;
        __int16 v37 = "Ref_Port_UID]";
        int v38 = 1024;
        __int16 v39 = v18;
        __int16 v40 = 2080;
        __int16 v41 = v20;
        __int16 v42 = 2080;
        uint64_t v43 = v23;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v29 < 0) {
        operator delete(v27);
      }
    }
  }
}

void sub_1BB263E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, char a13, int a14, int a15, __int16 a16, char a17, char a18, void *a19, char a20,int a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *caulk::expected<applesauce::CF::StringRef,int>::value_or<applesauce::CF::StringRef const&>@<X0>(unsigned char *result@<X0>, CFTypeRef *a2@<X1>, void *a3@<X8>)
{
  if (result[8])
  {
    *a3 = *(void *)result;
    *(void *)uint64_t result = 0;
  }
  else
  {
    CFTypeRef v4 = *a2;
    if (*a2) {
      uint64_t result = CFRetain(*a2);
    }
    *a3 = v4;
  }
  return result;
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE39ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0) {
        unint64_t v6 = v16;
      }
      else {
        unint64_t v6 = (unint64_t)v15[1];
      }
      unint64_t v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = (char)v16;
        long long v9 = (void **)v15[0];
        int v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        int v11 = v15;
        if (v8 < 0) {
          int v11 = v9;
        }
        int v18 = v11;
        long long v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6) {
          long long v12 = " ";
        }
        __int16 v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v20 = v12;
        __int16 v21 = 1024;
        int v22 = 39;
        __int16 v23 = 1040;
        int v24 = 12;
        __int16 v25 = 2080;
        int v26 = "Ref_Port_UID]";
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 2080;
        uint64_t v30 = p_p;
        __int16 v31 = 1024;
        int v32 = a2;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v16 < 0) {
        operator delete(v15[0]);
      }
    }
  }
}

void sub_1BB264104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)40>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)40>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB264180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40EZNS1_21create_property_stateILS3_40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)40>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1BB2641EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)40>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x28u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x28u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB264264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  long long v11 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE((uint64_t)v12, a1 + 48, (uint64_t)&v9, a3, a4, a5, a6);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1BB26436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  unsigned __int8 v14 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v14 = &unk_1F14A3B90;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((void *)v14 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v16;
  v22[3] = v14;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v21 = vp::vx::data_flow::State_Transaction::get_id(a7);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v22, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v22);
  return a1;
}

void sub_1BB2644C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3B90;
  long long v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3B90;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3B90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3B90;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE40ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EEclEOS1N_OS1O_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE40ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE40ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    unint64_t v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    unint64_t v6 = 0;
  }
  int v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  int v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  int v9 = *v4;
  int v16 = *v6;
  int v17 = v9;
  uint64_t v10 = *a1;
  unsigned int v12 = *((_DWORD *)a1 + 2);
  long long v11 = a1 + 1;
  unsigned int v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  void v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1BB2647E0(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v28 = "Ref_Port_Bluetooth_HLC_2ch_State]";
  long long v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  uint64_t v3 = **(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = **(unsigned int **)(a1 + 24);
  uint64_t v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  unint64_t v7 = v2(v3, v5, v6);
  int v8 = v7;
  int v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)uint64_t v30 = *v9;
  *(void *)&v30[4] = v4;
  *(void *)&v30[12] = &v28;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    int v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v26);
      unint64_t v12 = v27;
      uint64_t v13 = v26[1];
      unsigned __int8 v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        if ((v27 & 0x80u) == 0) {
          int v16 = v26;
        }
        else {
          int v16 = (void **)v26[0];
        }
        if (v15) {
          int v17 = " ";
        }
        else {
          int v17 = "";
        }
        int v18 = **(_DWORD **)(a1 + 24);
        uint64_t v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0) {
          LODWORD(v19) = 0;
        }
        std::to_string(&v25, v19);
        int v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        std::string::size_type v21 = v25.__r_.__value_.__r.__words[0];
        std::to_string(&__p, **(_DWORD **)a1);
        int v22 = &v25;
        if (v20 < 0) {
          int v22 = (std::string *)v21;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316930;
        *(void *)uint64_t v30 = v16;
        *(_WORD *)&v30[8] = 2080;
        *(void *)&v30[10] = v17;
        *(_WORD *)&v30[18] = 1024;
        int v31 = 40;
        __int16 v32 = 1040;
        int v33 = 32;
        __int16 v34 = 2080;
        __int16 v35 = "Ref_Port_Bluetooth_HLC_2ch_State]";
        __int16 v36 = 1024;
        int v37 = v18;
        __int16 v38 = 2080;
        __int16 v39 = v22;
        __int16 v40 = 2080;
        __int16 v41 = p_p;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v27 < 0) {
        operator delete(v26[0]);
      }
    }
  }
}

void sub_1BB264A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE40ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0) {
        unint64_t v6 = v16;
      }
      else {
        unint64_t v6 = (unint64_t)v15[1];
      }
      unint64_t v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = (char)v16;
        int v9 = (void **)v15[0];
        int v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        long long v11 = v15;
        if (v8 < 0) {
          long long v11 = v9;
        }
        int v18 = v11;
        unint64_t v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6) {
          unint64_t v12 = " ";
        }
        __int16 v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v20 = v12;
        __int16 v21 = 1024;
        int v22 = 40;
        __int16 v23 = 1040;
        int v24 = 32;
        __int16 v25 = 2080;
        int v26 = "Ref_Port_Bluetooth_HLC_2ch_State]";
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 2080;
        uint64_t v30 = p_p;
        __int16 v31 = 1024;
        int v32 = a2;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v16 < 0) {
        operator delete(v15[0]);
      }
    }
  }
}

void sub_1BB264C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)28>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v7 = a3;
  vp::vx::Voice_Processor_State_Manager::create_state<double>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)28>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB264CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EZNS1_21create_property_stateILS3_28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)28>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB264D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)28>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB264DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB264ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIdEC2IZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  unint64_t v12 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v12 = &unk_1F14A3BD8;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB265010(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3BD8;
  long long v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3BD8;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3BD8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3BD8;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE28EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE28EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((double *)(a1 + 8), a2, a3);
}

double *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIdEC1IZNS4_29Voice_Processor_State_Manager12create_stateIdZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE28EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(double *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  double v4 = _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  uint64_t result = (double *)vp::vx::data_flow::Value::allocate_storage(v3);
  double *result = v4;
  return result;
}

double _ZN2vp2vx9data_flow8FunctionIdE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIdZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(double *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    double v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    double v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  double v7 = *a1;
  double v9 = a1[1];
  long long v8 = a1 + 1;
  int v13 = *v4;
  double v12 = v9;
  v11[0] = &v12;
  v11[1] = v8 + 1;
  void v11[2] = v8 + 2;
  void v11[3] = &v13;
  *(double *)&v11[4] = v7;
  v11[5] = v8;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v11);
  return v12;
}

void sub_1BB2652FC(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v20 = "Ref_Hardware_Physical_Sample_Rate]";
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (vp *)(**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  double v4 = v3;
  uint64_t v5 = *(_DWORD **)(a1 + 24);
  *(_DWORD *)buf = *v5;
  *(void *)&v22[4] = v2;
  *(void *)&v22[12] = &v20;
  if (!v6)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, (int)v3);
    double v4 = **(vp ***)(a1 + 40);
    uint64_t v5 = *(_DWORD **)(a1 + 24);
  }
  **(void **)a1 = v4;
  if (*v5)
  {
    log = vp::get_log(v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v19 & 0x80u) == 0) {
        unint64_t v9 = v19;
      }
      else {
        unint64_t v9 = (unint64_t)__p[1];
      }
      long long v10 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = (char)v19;
        double v12 = (void **)__p[0];
        int v13 = **(_DWORD **)(a1 + 24);
        std::to_string(&v17, **(double **)a1);
        long long v14 = __p;
        if (v11 < 0) {
          long long v14 = v12;
        }
        *(void *)int v22 = v14;
        unint64_t v15 = "";
        *(_DWORD *)buf = 136316674;
        if (v9) {
          unint64_t v15 = " ";
        }
        *(_WORD *)&v22[8] = 2080;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v16 = &v17;
        }
        else {
          unsigned __int8 v16 = (std::string *)v17.__r_.__value_.__r.__words[0];
        }
        *(void *)&v22[10] = v15;
        *(_WORD *)&v22[18] = 1024;
        int v23 = 28;
        __int16 v24 = 1040;
        int v25 = 33;
        __int16 v26 = 2080;
        __int16 v27 = "Ref_Hardware_Physical_Sample_Rate]";
        __int16 v28 = 1024;
        int v29 = v13;
        __int16 v30 = 2080;
        __int16 v31 = v16;
        _os_log_impl(&dword_1BB0CE000, v10, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB265524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE28EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      double v7 = __p[1];
      long long v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          long long v10 = __p;
        }
        else {
          long long v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 28;
        __int16 v21 = 1040;
        int v22 = 33;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Hardware_Physical_Sample_Rate]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)29>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)29>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB265728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EZNS1_21create_property_stateILS3_29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)29>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB265794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)29>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26580C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB265910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3C20;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB265A4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3C20;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3C20;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3C20;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3C20;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE29EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE29EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE29EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB265D2C(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Hardware_Input_Latency]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 29;
        __int16 v22 = 1040;
        int v23 = 26;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Hardware_Input_Latency]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB265F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE29EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 29;
        __int16 v21 = 1040;
        int v22 = 26;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Hardware_Input_Latency]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)30>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)30>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB266154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EZNS1_21create_property_stateILS3_30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)30>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB2661C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)30>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB266238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB26633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3C68;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB266478(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3C68;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3C68;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3C68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3C68;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE30EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE30EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE30EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB266758(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Hardware_Input_Safety_Offset]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 30;
        __int16 v22 = 1040;
        int v23 = 32;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Hardware_Input_Safety_Offset]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB26697C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE30EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 30;
        __int16 v21 = 1040;
        int v22 = 32;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Hardware_Input_Safety_Offset]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)31>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)31>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB266B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EZNS1_21create_property_stateILS3_31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)31>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB266BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)31>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x1Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB266C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB266D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3CB0;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB266EA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3CB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3CB0;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3CB0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3CB0;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE31EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE31EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE31EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB267184(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Hardware_Output_Latency]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 31;
        __int16 v22 = 1040;
        int v23 = 27;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Hardware_Output_Latency]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB2673A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE31EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 31;
        __int16 v21 = 1040;
        int v22 = 27;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Hardware_Output_Latency]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)32>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)32>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2675AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EZNS1_21create_property_stateILS3_32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)32>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB267618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)32>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x20u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x20u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB267690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB267794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3CF8;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB2678D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3CF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3CF8;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3CF8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3CF8;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE32EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE32EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE32EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB267BB0(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Hardware_Physical_Output_Latency]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 32;
        __int16 v22 = 1040;
        int v23 = 36;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Hardware_Physical_Output_Latency]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB267DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE32EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 32;
        __int16 v21 = 1040;
        int v22 = 36;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Hardware_Physical_Output_Latency]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)33>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)33>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB267FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EZNS1_21create_property_stateILS3_33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)33>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB268044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)33>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x21u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x21u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2680BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB2681C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3D40;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB2682FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3D40;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3D40;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3D40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3D40;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE33EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE33EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE33EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB2685DC(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Hardware_Output_Safety_Offset]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 33;
        __int16 v22 = 1040;
        int v23 = 33;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Hardware_Output_Safety_Offset]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB2687FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE33EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 33;
        __int16 v21 = 1040;
        int v22 = 33;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Hardware_Output_Safety_Offset]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)34>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)34>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB2689FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EZNS1_21create_property_stateILS3_34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjERKNS6_IjEES9_EUlT_DpT0_E_JjjjEEESA_OT0_DpRKNS6_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE(a1 + 16, a2, a3, a4, a5, (uint64_t)v9);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)34>(a1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

void sub_1BB268A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)34>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x22u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x22u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB268AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjERKNS7_IjEESA_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNS7_IT1_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE((uint64_t)v11, a1 + 48, (uint64_t)&v8, a3, a4, a5);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB268BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEEERNS1_13State_ManagerESQ_DpRKNSA_ISR_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  double v12 = (char *)operator new(0x30uLL);
  *(void *)double v12 = &unk_1F14A3D88;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)a3;
  *((void *)v12 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v12 + 2) = v14;
  v19[3] = v12;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v17 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v18 = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v19, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v19);
  return a1;
}

void sub_1BB268D20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3D88;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3D88;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3D88;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7__cloneEPNS0_6__baseIS1O_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3D88;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE34EEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISG_iEERKNS2_8services14Audio_HardwareEjERKNSD_IjEESG_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSD_IT1_EEEUlDpRKT_E_JjjjEEERNS4_13State_ManagerEST_DpRKNSD_ISU_EEEUlPPKNS4_5ValueEPS1G_E_NS_9allocatorIS1L_EEFvS1J_S1K_EEclEOS1J_OS1K_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE34EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE34EEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISH_iEERKNS3_8services14Audio_HardwareEjERKNSE_IjEESH_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSE_IT1_EEEUlDpRKT_E_JjjjEEERNS5_13State_ManagerESU_DpRKNSE_ISV_EEEUlPPKNS5_5ValueEPS1H_E_S1K_S1L_EEEvDpOS16_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISD_iEERKNS_8services14Audio_HardwareEjERKNSA_IjEESD_EUlT_DpT0_E_JjjjEEEDaOT0_DpRKNSA_IT1_EEEUlDpRKT_E_JjjjEJLm0ELm1ELm2EEEEDaRKSQ_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  unint64_t v6 = *(uint64_t (*****)())(a2 + 16);
  if (v6[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  int v7 = *v4;
  uint64_t v8 = *a1;
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1 + 1;
  unsigned int v13 = v10;
  int v14 = v7;
  v12[0] = &v13;
  v12[1] = v9 + 1;
  v12[2] = v9 + 2;
  void v12[3] = &v14;
  v12[4] = v8;
  v12[5] = v9;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv((uint64_t)v12);
  return v13;
}

void sub_1BB269000(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v18 = "Ref_Hardware_Physical_Output_Safety_Offset]";
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = (**(uint64_t (***)(void, void))(a1 + 8))(**(void **)(a1 + 16), **(unsigned int **)(a1 + 24));
  int v4 = v3;
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(void *)&v20[4] = v2;
  *(void *)&v20[12] = &v18;
  if ((v3 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi((vp *)buf, v3);
    int v4 = **(_DWORD **)(a1 + 40);
  }
  **(_DWORD **)a1 = v4;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v3);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      if ((v17 & 0x80u) == 0) {
        unint64_t v7 = v17;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = (char)v17;
        unsigned int v10 = (void **)__p[0];
        int v11 = **(_DWORD **)(a1 + 24);
        std::to_string(&v15, **(_DWORD **)a1);
        double v12 = __p;
        if (v9 < 0) {
          double v12 = v10;
        }
        *(void *)int v20 = v12;
        unsigned int v13 = "";
        *(_DWORD *)buf = 136316674;
        if (v7) {
          unsigned int v13 = " ";
        }
        *(_WORD *)&v20[8] = 2080;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v14 = &v15;
        }
        else {
          int v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(void *)&v20[10] = v13;
        *(_WORD *)&v20[18] = 1024;
        int v21 = 34;
        __int16 v22 = 1040;
        int v23 = 42;
        __int16 v24 = 2080;
        __int16 v25 = "Ref_Hardware_Physical_Output_Safety_Offset]";
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        uint64_t v29 = v14;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u is %s", buf, 0x3Cu);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB269224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE34EEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS8_iEERKNS_8services14Audio_HardwareEjERKNS5_IjEES8_ENKUlT_DpT0_E_clIjJjjEEEDaSL_SN_ENKUlvE_clEvENKUliE_clEi(vp *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    log = vp::get_log(a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = v14;
      unint64_t v7 = __p[1];
      uint64_t v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        if ((v6 & 0x80u) == 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = (unint64_t)v7;
        }
        if ((v14 & 0x80u) == 0) {
          unsigned int v10 = __p;
        }
        else {
          unsigned int v10 = (void **)__p[0];
        }
        int v11 = *(_DWORD *)a1;
        *(_DWORD *)buf = 136316674;
        unsigned __int8 v16 = v10;
        if (v9) {
          double v12 = " ";
        }
        else {
          double v12 = "";
        }
        __int16 v17 = 2080;
        int v18 = v12;
        __int16 v19 = 1024;
        int v20 = 34;
        __int16 v21 = 1040;
        int v22 = 42;
        __int16 v23 = 2080;
        __int16 v24 = "Ref_Hardware_Physical_Output_Safety_Offset]";
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u with status %u", buf, 0x38u);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)35>@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v7 = a2;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int>((std::pmr *)(a1 + 16), &v7, (uint64_t)v6);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)35>(a1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB269428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35EZNS1_21create_property_stateILS3_35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISA_iEERKNS_8services14Audio_HardwareEjjERKNS7_IjEERKNS7_IT0_EESA_EUlT_SN_DpT1_E_JjS5_jjEEESB_OSN_DpRKNS7_ISS_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE(a1 + 16, a2, a3, a4, a5, a6, (uint64_t)v10);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)35>(a1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v10);
}

void sub_1BB269494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)35>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x23u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

{
  void *v2;
  unsigned char v4[24];
  unsigned char v5[40];

  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x23u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26950C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISB_iEERKNS_8services14Audio_HardwareEjjERKNS8_IjEERKNS8_IT0_EESB_EUlT_SO_DpT1_E_JjS6_jjEEEDaOSO_DpRKNS8_IST_EE@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  long long v11 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE((uint64_t)v12, a1 + 48, (uint64_t)&v9, a3, a4, a5, a6);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1BB269614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEEERNS1_13State_ManagerESV_DpRKNSB_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  unsigned __int8 v14 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v14 = &unk_1F14A3DD0;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)a3;
  *((void *)v14 + 3) = *(void *)(a3 + 16);
  *((_OWORD *)v14 + 2) = v16;
  v22[3] = v14;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v19 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v20 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v21 = vp::vx::data_flow::State_Transaction::get_id(a7);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v22, (uint64_t)v17);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State(v17);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v22);
  return a1;
}

void sub_1BB269768(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A3DD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A3DD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)uint64_t result = &unk_1F14A3DD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A3DD0;
  long long v2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(_OWORD *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EE18destroy_deallocateEv(void *__p)
{
  long long v2 = (std::__shared_weak_count *)__p[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_15Voice_Processor21create_property_stateILNS3_11Property_IDE35ENS3_16Output_Port_TypeEEENS4_5StateINS3_18Property_ID_TraitsIXT_EE4TypeEEEPFNS2_8ExpectedISH_iEERKNS2_8services14Audio_HardwareEjjERKNSE_IjEERKNSE_IT0_EESH_EUlT_SU_DpT1_E_JjSD_jjEEEDaOSU_DpRKNSE_ISZ_EEEUlDpRKT_E_JjSD_jjEEERNS4_13State_ManagerESY_DpRKNSE_IT0_EEEUlPPKNS4_5ValueEPS1K_E_NS_9allocatorIS1P_EEFvS1N_S1O_EEclEOS1N_OS1O_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE35ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjZNS4_15Voice_Processor21create_property_stateILNS4_11Property_IDE35ENS4_16Output_Port_TypeEEENS5_5StateINS4_18Property_ID_TraitsIXT_EE4TypeEEEPFNS3_8ExpectedISI_iEERKNS3_8services14Audio_HardwareEjjERKNSF_IjEERKNSF_IT0_EESI_EUlT_SV_DpT1_E_JjSE_jjEEEDaOSV_DpRKNSF_IS10_EEEUlDpRKT_E_JjSE_jjEEERNS5_13State_ManagerESZ_DpRKNSF_IT0_EEEUlPPKNS5_5ValueEPS1L_E_S1O_S1P_EEEvDpOS19_(uint64_t *a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjZNS0_15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS1_5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedISE_iEERKNS_8services14Audio_HardwareEjjERKNSB_IjEERKNSB_IT0_EESE_EUlT_SR_DpT1_E_JjSA_jjEEEDaOSR_DpRKNSB_ISW_EEEUlDpRKT_E_JjSA_jjEJLm0ELm1ELm2ELm3EEEEDaRKSV_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t *a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    int v4 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    unint64_t v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    unint64_t v6 = 0;
  }
  int v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  uint64_t v8 = *(uint64_t (*****)())(a2 + 24);
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  int v9 = *v4;
  int v16 = *v6;
  int v17 = v9;
  uint64_t v10 = *a1;
  unsigned int v12 = *((_DWORD *)a1 + 2);
  long long v11 = a1 + 1;
  unsigned int v15 = v12;
  v14[0] = &v15;
  v14[1] = v11 + 1;
  v14[2] = v11 + 2;
  v14[3] = &v17;
  v14[4] = &v16;
  void v14[5] = v10;
  v14[6] = v11;
  _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv((uint64_t)v14);
  return v15;
}

void sub_1BB269A88(void *a1)
{
}

void _ZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEv(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v28 = "Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
  long long v2 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  uint64_t v3 = **(void **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = **(unsigned int **)(a1 + 24);
  uint64_t v6 = vp::vx::legacy_cast<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
  unint64_t v7 = v2(v3, v5, v6);
  int v8 = v7;
  int v9 = *(_DWORD **)(a1 + 32);
  *(_DWORD *)buf = **(_DWORD **)(a1 + 24);
  *(_DWORD *)uint64_t v30 = *v9;
  *(void *)&v30[4] = v4;
  *(void *)&v30[12] = &v28;
  if ((v7 & 0xFF00000000) == 0)
  {
    _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi((int *)buf, v7);
    int v8 = **(_DWORD **)(a1 + 48);
  }
  **(_DWORD **)a1 = v8;
  if (**(_DWORD **)(a1 + 24))
  {
    log = vp::get_log((vp *)v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v26);
      unint64_t v12 = v27;
      unsigned int v13 = v26[1];
      unsigned __int8 v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        if ((v27 & 0x80u) == 0) {
          int v16 = v26;
        }
        else {
          int v16 = (void **)v26[0];
        }
        if (v15) {
          int v17 = " ";
        }
        else {
          int v17 = "";
        }
        int v18 = **(_DWORD **)(a1 + 24);
        uint64_t v19 = vp::vx::legacy_cast_noexcept<vp::vx::Output_Port_Type>(**(_DWORD **)(a1 + 32));
        if ((v19 & 0xFF00000000) == 0) {
          LODWORD(v19) = 0;
        }
        std::to_string(&v25, v19);
        int v20 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
        std::string::size_type v21 = v25.__r_.__value_.__r.__words[0];
        std::to_string(&__p, **(_DWORD **)a1);
        int v22 = &v25;
        if (v20 < 0) {
          int v22 = (std::string *)v21;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316930;
        *(void *)uint64_t v30 = v16;
        *(_WORD *)&v30[8] = 2080;
        *(void *)&v30[10] = v17;
        *(_WORD *)&v30[18] = 1024;
        int v31 = 35;
        __int16 v32 = 1040;
        int v33 = 48;
        __int16 v34 = 2080;
        __int16 v35 = "Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
        __int16 v36 = 1024;
        int v37 = v18;
        __int16 v38 = 2080;
        __int16 v39 = v22;
        __int16 v40 = 2080;
        __int16 v41 = p_p;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_DEFAULT, "%s%svalue of property %u '%.*s' for device ID %u, port type %s is %s", buf, 0x46u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v27 < 0) {
        operator delete(v26[0]);
      }
    }
  }
}

void sub_1BB269D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZZN2vp2vx15Voice_Processor21create_property_stateILNS0_11Property_IDE35ENS0_16Output_Port_TypeEEENS0_9data_flow5StateINS0_18Property_ID_TraitsIXT_EE4TypeEEEPFNS_8ExpectedIS9_iEERKNS_8services14Audio_HardwareEjjERKNS6_IjEERKNS6_IT0_EES9_ENKUlT_SM_DpT1_E_clIjS4_JjjEEEDaSQ_SM_SS_ENKUlvE_clEvENKUliE_clEi(int *a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    log = vp::get_log((vp *)a1);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, v15);
      if ((v16 & 0x80u) == 0) {
        unint64_t v6 = v16;
      }
      else {
        unint64_t v6 = (unint64_t)v15[1];
      }
      unint64_t v7 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = (char)v16;
        int v9 = (void **)v15[0];
        int v10 = *a1;
        vp::vx::detail::to_string<vp::vx::Output_Port_Type>(a1 + 1, &__p);
        long long v11 = v15;
        if (v8 < 0) {
          long long v11 = v9;
        }
        int v18 = v11;
        unint64_t v12 = "";
        *(_DWORD *)buf = 136316930;
        if (v6) {
          unint64_t v12 = " ";
        }
        __int16 v19 = 2080;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v20 = v12;
        __int16 v21 = 1024;
        int v22 = 35;
        __int16 v23 = 1040;
        int v24 = 48;
        __int16 v25 = 2080;
        int v26 = "Ref_Virtual_Audio_Stream_Physical_Stream_Latency]";
        __int16 v27 = 1024;
        int v28 = v10;
        __int16 v29 = 2080;
        uint64_t v30 = p_p;
        __int16 v31 = 1024;
        int v32 = a2;
        _os_log_impl(&dword_1BB0CE000, v7, OS_LOG_TYPE_ERROR, "%s%sfailed to get value of property %u '%.*s' for device ID %u, port type %s with status %u", buf, 0x42u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if ((char)v16 < 0) {
        operator delete(v15[0]);
      }
    }
  }
}

void sub_1BB269F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)41>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x29u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB269F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)42>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)43>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)44>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::StringRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)45>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<float>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)46>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)47>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x2Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)48>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x30u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)49>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x31u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  if (*a2)
  {
    *uint64_t storage = *a2;
    *a2 = 0;
  }
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)50>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x32u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26A4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = 0;
  void *result = v6;
  return result;
}

void sub_1BB26A61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>::~Block((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*a2) {
    _Block_release(*a2);
  }
  *a2 = v5;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  if (*a2) {
    uint64_t v4 = _Block_copy(*a2);
  }
  else {
    uint64_t v4 = 0;
  }

  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, (uint64_t)v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<int({block_pointer})(AudioBufferList *,AudioTimeStamp *,unsigned int *)>>::convert_to_string(int a1, vp::utility *this, void *a3)
{
  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB26A9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)51>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x33u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26AA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)52>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x34u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26AAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<CA::ChannelLayout>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)uint64_t storage = *(_OWORD *)a2;
  storage[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)53>(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x35u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26ABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<CA::ChannelLayout>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<CA::ChannelLayout>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<CA::ChannelLayout>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CA::ChannelLayout>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::~Blob_Type_Converter()
{
}

double vp::vx::Property::Blob_Type_Converter<CA::ChannelLayout>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  std::vector<char>::pointer begin = v10.__begin_;
  *(void *)v10.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  char v7 = (std::pmr *)(*(uint64_t (**)(uint64_t, std::vector<char> *, uint64_t))(*(void *)a1 + 40))(a1, &v10, a2);
  *(void *)a3 = std::pmr::get_default_resource(v7);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id;
  uint64_t storage = (std::vector<char> *)vp::vx::data_flow::Value::allocate_storage(a3);
  storage->__begin_ = 0;
  storage->__end_ = 0;
  storage->__end_cap_.__value_ = 0;
  double result = *(double *)&v10.__begin_;
  *uint64_t storage = v10;
  return result;
}

void sub_1BB26AD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::convert_from_blob(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  return vp::vx::deserialize_blob(a3, a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<unsigned char const>>(a3 + 2, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CA::ChannelLayout>::convert_to_blob_size(uint64_t a1, void *a2)
{
  return a2[1] - *a2;
}

double vp::vx::deserialize_blob(unsigned int **a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (v2 <= 0x1F) {
    goto LABEL_10;
  }
  uint64_t v4 = *a1;
  unsigned int v5 = (*a1)[2];
  if (v5)
  {
    if (v2 == 20 * (v5 - 1) + 32) {
      goto LABEL_4;
    }
LABEL_10:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v9 = std::bad_cast::bad_cast(exception);
  }
  if (v2 != 32) {
    goto LABEL_10;
  }
LABEL_4:
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  std::vector<char>::vector(&__dst, 20 * v5 + 12);
  memcpy(__dst.__begin_, v4, 20 * v4[2] + 12);
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
  double result = *(double *)&__dst.__begin_;
  *(std::vector<char> *)a2 = __dst;
  return result;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    unsigned int v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1BB26B084(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::ChannelLayout>::~Property_List_Type_Converter()
{
}

double vp::vx::Property::Property_List_Type_Converter<CA::ChannelLayout>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  std::vector<char>::pointer begin = v10.__begin_;
  *(void *)v10.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  char v7 = (std::pmr *)(*(uint64_t (**)(uint64_t, std::vector<char> *, uint64_t))(*(void *)a1 + 32))(a1, &v10, a2);
  *(void *)a3 = std::pmr::get_default_resource(v7);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id;
  uint64_t storage = (std::vector<char> *)vp::vx::data_flow::Value::allocate_storage(a3);
  storage->__begin_ = 0;
  storage->__end_ = 0;
  storage->__end_cap_.__value_ = 0;
  double result = *(double *)&v10.__begin_;
  *uint64_t storage = v10;
  return result;
}

void sub_1BB26B174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<CA::ChannelLayout>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26B2CC(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::ChannelLayout>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CA::ChannelLayout>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
}

void vp::vx::serialize_plist(const void **a1, uint64_t a2)
{
  CFDataRef v3 = CFDataCreate(0, *(const UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v3);
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BB26B3D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::ChannelLayout>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<CA::ChannelLayout>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CA::ChannelLayout>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<CA::ChannelLayout>::convert_to_string(uint64_t a1, uint64_t a2, void *a3)
{
  CA::AsString(a2, &v6);
  vp::vx::Voice_Processor::String_Type_Converter<CA::StreamDescription>::trim_string((unsigned __int8 *)&v6, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    CFTypeRef v4 = __p;
  }
  else {
    CFTypeRef v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v5 = v8;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v4, v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1BB26B550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Beam_Direction>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)54>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x36u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Beam_Direction>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Beam_Direction>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Beam_Direction>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Beam_Direction>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFTypeRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFTypeRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Beam_Direction>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Beam_Direction>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFTypeRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26BB6C(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Beam_Direction>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB26BC50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Beam_Direction>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Beam_Direction>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Beam_Direction>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Beam_Direction>::convert_to_string(uint64_t a1, int *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t *)*a2;
  v5[0] = 5;
  int v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1BB26BDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Operation_Mode>@<X0>(std::pmr *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)55>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x37u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26BECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Operation_Mode>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Operation_Mode>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Operation_Mode>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Operation_Mode>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  uint64_t result = vp::vx::legacy_cast<vp::vx::Operation_Mode>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = a3 + 2;
  int v4 = vp::vx::legacy_cast<vp::vx::Operation_Mode>(*a2);

  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Operation_Mode>::convert_to_blob_size()
{
  return 4;
}

void sub_1BB26C23C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1BB26C290);
}

void sub_1BB26C2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Operation_Mode>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26C498(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Operation_Mode>::convert_to_plist(uint64_t a1, unsigned int *a2, const void **a3)
{
  int valuePtr = vp::vx::legacy_cast<vp::vx::Operation_Mode>(*a2);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB26C580(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Operation_Mode>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Operation_Mode>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Operation_Mode>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Operation_Mode>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t *)*a2;
  v5[0] = 5;
  int v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1BB26C6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Chat_Flavor>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Chat_Flavor>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Chat_Flavor>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Chat_Flavor>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  uint64_t result = vp::vx::legacy_cast<vp::vx::Chat_Flavor>(v4);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = a3 + 2;
  int v4 = vp::vx::legacy_cast<vp::vx::Chat_Flavor>(*a2);

  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(v3, v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Chat_Flavor>::convert_to_blob_size()
{
  return 4;
}

void sub_1BB26CA48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  v10.__ptr_ = &a10;
  std::rethrow_exception(v10);
  __break(1u);
  JUMPOUT(0x1BB26CA9CLL);
}

void sub_1BB26CAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Chat_Flavor>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  int v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26CCA4(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<vp::vx::Chat_Flavor>::convert_to_plist(uint64_t a1, unsigned int *a2, const void **a3)
{
  int valuePtr = vp::vx::legacy_cast<vp::vx::Chat_Flavor>(*a2);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB26CD8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Chat_Flavor>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Chat_Flavor>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Chat_Flavor>::convert_to_string(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t *)*a2;
  v5[0] = 5;
  int v6 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::operator<<(a3, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1BB26CEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void sub_1BB26CF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1BB26CFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1BB26D064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)58>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26D0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)59>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26D164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)60>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26D1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)61>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26D264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)62>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<CA::StreamDescription>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26D2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)63>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x3Fu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26D364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned int>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)uint64_t storage = *(_OWORD *)a2;
  storage[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)64>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x40u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26D4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned int>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned int>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned int>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned int>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::~Blob_Type_Converter()
{
}

double vp::vx::Property::Blob_Type_Converter<std::vector<unsigned int>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 40))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB26D60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::convert_from_blob(uint64_t a1, uint64_t a2, void *a3)
{
  CFNumberRef v4 = (const void *)vp::Blob_Viewer<vp::Blob>::view<float>(a3);
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(&v8, v4, (uint64_t)v4 + 4 * v5, (4 * v5) >> 2);
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<float const>>(a3 + 2, *(const void **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned int>>::convert_to_blob_size(uint64_t a1, void *a2)
{
  return a2[1] - *a2;
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB26D894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned int>>::~Property_List_Type_Converter()
{
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned int>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 32))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB26D958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned int>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26DAB0(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned int>>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned int>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<unsigned int>(&__p);
  uint64_t v5 = *a3;
  *a3 = CFArray;
  if (v5) {
    CFRelease(v5);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1BB26DB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned int>>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<unsigned int>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned int>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned int>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4[0] = 0;
  uint64_t v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned int>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1BB26DCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned int>,0>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 2;
  uint64_t v3 = *(unsigned int **)a2;
  uint64_t v5 = *(unsigned int **)(a2 + 8);
  uint64_t v6 = v3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(unsigned int **a1, unsigned int **a2)
{
  CFNumberRef v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  unint64_t v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1BB26DD94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(void *result, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned int const*,unsigned int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BB26DE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned int const*,unsigned int const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)(v4 + 8) = 0;
      unsigned int v7 = *v6++;
      *(unsigned char *)uint64_t v4 = 6;
      *(void *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      uint64_t v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)65>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::ArrayRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x41u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26DF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)66>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x42u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)67>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<double>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x43u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26E034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)68>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<applesauce::CF::DictionaryRef>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x44u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<long long>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)uint64_t storage = *(_OWORD *)a2;
  storage[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)69>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x45u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26E1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<std::vector<long long>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<long long>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<long long>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<long long>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::~Blob_Type_Converter()
{
}

double vp::vx::Property::Blob_Type_Converter<std::vector<long long>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 40))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB26E35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<long long>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<long long>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::convert_from_blob(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (const void *)vp::Blob_Viewer<vp::Blob>::view<long long>(a3);
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(&v8, v4, (uint64_t)v4 + 8 * v5, (8 * v5) >> 3);
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a2 = v8;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<long long const>>(a3 + 2, *(const void **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<long long>>::convert_to_blob_size(uint64_t a1, void *a2)
{
  return a2[1] - *a2;
}

uint64_t vp::Blob_Viewer<vp::Blob>::view<long long>(void *a1)
{
  if ((a1[1] & 7) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
  }
  return *a1;
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<std::tuple<unsigned int,float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB26E634(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<long long const>>(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(void *)(a1 + 6) < (unint64_t)(8 * a3))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
  }
  unint64_t v3 = 8 * a3;
  uint64_t v4 = a1 - 2;
  memcpy(*(void **)(a1 - 2), a2, 8 * a3);

  return vp::Mutable_Blob::set_size(v4, v3);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<long long>>::~Property_List_Type_Converter()
{
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<long long>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 32))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB26E774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<long long>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26E8CC(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<long long>>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<long long>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<long long>((void ****)&__p);
  uint64_t v5 = *a3;
  *a3 = CFArray;
  if (v5) {
    CFRelease(v5);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1BB26E998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<long long>(void ****a1)
{
  unint64_t v2 = a1[1] - *a1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v5 = v9;
    do
    {
      uint64_t v11 = *v3;
      if ((unint64_t)v5 >= v10) {
        uint64_t v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<long long>((uint64_t *)&v8, (uint64_t *)&v11);
      }
      else {
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,long long,applesauce::CF::NumberRef*>(v5++, (uint64_t *)&v11);
      }
      uint64_t v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  uint64_t v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_1BB26EA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<long long>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (void *)*a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - (void)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v22 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  __int16 v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  __int16 v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,long long,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  uint64_t v11 = v20.i64[0];
  uint64_t v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  unsigned __int8 v14 = (void *)*a1;
  unsigned int v13 = (void *)a1[1];
  if (v13 == (void *)*a1)
  {
    int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      uint64_t v15 = *--v13;
      *(void *)(v11 - 8) = v15;
      v11 -= 8;
      void *v13 = 0;
    }
    while (v13 != v14);
    int64x2_t v16 = *(int64x2_t *)a1;
    uint64_t v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  int64x2_t v20 = v16;
  int v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  __int16 v21 = v17;
  __int16 v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1BB26EBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,long long,applesauce::CF::NumberRef*>(CFNumberRef *a1, uint64_t *a2)
{
  uint64_t valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB26EC58(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<long long>>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<long long>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<long long>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  CFArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<long long>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4[0] = 0;
  uint64_t v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<long long>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1BB26EDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<long long>,0>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 2;
  CFNumberRef v3 = *(uint64_t **)a2;
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  CFArrayRef v6 = v3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(uint64_t **a1, uint64_t **a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  CFArrayRef v6 = *a2;
  unint64_t v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1BB26EE80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    CFArrayRef v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,long long const*,long long const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BB26EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,long long const*,long long const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    CFArrayRef v6 = a2;
    do
    {
      *(void *)(v4 + 8) = 0;
      uint64_t v7 = *v6++;
      *(unsigned char *)uint64_t v4 = 5;
      *(void *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      uint64_t v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void vp::vx::Voice_Processor::Type_Converter<CAOrientation>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<CAOrientation>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<CAOrientation>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<CAOrientation>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<CAOrientation>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::~Blob_Type_Converter()
{
}

_DWORD *vp::vx::Property::Blob_Type_Converter<CAOrientation>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<CAOrientation>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<CAOrientation>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::convert_from_blob(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<unsigned int>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::convert_to_blob(uint64_t a1, int *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<CAOrientation>::convert_to_blob_size()
{
  return 4;
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CAOrientation>::~Property_List_Type_Converter()
{
}

_DWORD *vp::vx::Property::Property_List_Type_Converter<CAOrientation>::convert_from_plist@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  int v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 32))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(a3);
  _DWORD *result = v6;
  return result;
}

uint64_t vp::vx::Property::Property_List_Type_Converter<CAOrientation>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26F480(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CAOrientation>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<CAOrientation>::convert_to_plist(uint64_t a1, int *a2, const void **a3)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v5 = v4;
  int v6 = *a3;
  *a3 = v5;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1BB26F564(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void vp::vx::Voice_Processor::String_Type_Converter<CAOrientation>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<CAOrientation>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<CAOrientation>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Voice_Processor::String_Type_Converter<CAOrientation>::convert_to_string()
{
  return std::ostream::operator<<();
}

void sub_1BB26F6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1BB26F744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)74>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::vector<unsigned char>>@<X0>(std::pmr *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  *(_OWORD *)uint64_t storage = *(_OWORD *)a2;
  storage[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)75>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Bu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB26F900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned char>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned char>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<std::vector<unsigned char>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_plist_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_plist_type_converter(void)const::s_plist_type_converter;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<std::vector<unsigned char>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::~Blob_Type_Converter()
{
}

double vp::vx::Property::Blob_Type_Converter<std::vector<unsigned char>>::convert_from_blob@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 40))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB26FA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  CFNumberRef v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

double vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::convert_from_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v4 = *(const void **)a3;
  size_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)a3 + v5;
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v9, v4, v6, v5);
  long long v7 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v7;
    operator delete(v7);
  }
  double result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v10;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<unsigned char const>>(a3 + 2, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<std::vector<unsigned char>>::convert_to_blob_size(uint64_t a1, void *a2)
{
  return a2[1] - *a2;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB26FCE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned char>>::~Property_List_Type_Converter()
{
}

double vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned char>>::convert_from_plist@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  CFNumberRef v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 32))(a1, &v7, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  *uint64_t storage = 0;
  storage[1] = 0;
  storage[2] = 0;
  double result = *(double *)&v7;
  *(_OWORD *)uint64_t storage = v7;
  storage[2] = v8;
  return result;
}

void sub_1BB26FDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Property::Property_List_Type_Converter<std::vector<unsigned char>>::convert_to_plist@<X0>(uint64_t (****this)()@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    uint64_t v7 = _os_crash_msg();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 40))(a2, v5, a3);
}

void sub_1BB26FEFC(_Unwind_Exception *exception_object)
{
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned char>>::convert_from_plist()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_cast::bad_cast(exception);
}

void vp::vx::Voice_Processor::Property_List_Type_Converter<std::vector<unsigned char>>::convert_to_plist(uint64_t a1, uint64_t a2, const void **a3)
{
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<unsigned char>(&__p);
  uint64_t v5 = *a3;
  *a3 = CFArray;
  if (v5) {
    CFRelease(v5);
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1BB26FFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<unsigned char>(void *a1)
{
  unint64_t v2 = a1[1] - *a1;
  uint64_t v8 = 0;
  long long v9 = 0;
  unint64_t v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  uint64_t v3 = (unsigned char *)*a1;
  CFNumberRef v4 = (unsigned char *)a1[1];
  if ((unsigned char *)*a1 != v4)
  {
    uint64_t v5 = v9;
    do
    {
      LOBYTE(v11) = *v3;
      if ((unint64_t)v5 >= v10) {
        uint64_t v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<unsigned char>((uint64_t *)&v8, (char *)&v11);
      }
      else {
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned char,applesauce::CF::NumberRef*>(v5++, (char *)&v11);
      }
      long long v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  uint64_t v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_1BB2700A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<unsigned char>(uint64_t *a1, char *a2)
{
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - (void)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v22 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,float>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  __int16 v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  __int16 v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned char,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  uint64_t v11 = v20.i64[0];
  uint64_t v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  unsigned __int8 v14 = (void *)*a1;
  unsigned int v13 = (void *)a1[1];
  if (v13 == (void *)*a1)
  {
    int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      uint64_t v15 = *--v13;
      *(void *)(v11 - 8) = v15;
      v11 -= 8;
      void *v13 = 0;
    }
    while (v13 != v14);
    int64x2_t v16 = *(int64x2_t *)a1;
    uint64_t v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  int64x2_t v20 = v16;
  int v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  __int16 v21 = v17;
  __int16 v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1BB2701DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned char,applesauce::CF::NumberRef*>(CFNumberRef *a1, char *a2)
{
  char valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1BB270280(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned char>>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<std::vector<unsigned char>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  CFArrayRef v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<std::vector<unsigned char>>::convert_to_string(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v4[0] = 0;
  uint64_t v5 = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned char>,0>((uint64_t)v4, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator<<(a3, (uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
}

void sub_1BB2703EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned char>,0>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 2;
  CFNumberRef v3 = *(unsigned __int8 **)a2;
  uint64_t v5 = *(unsigned __int8 **)(a2 + 8);
  CFArrayRef v6 = v3;
  *(void *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

void *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  CFArrayRef v6 = *a2;
  unint64_t v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_1BB2704A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, unsigned __int8 *a2, unsigned __int8 *a3, unint64_t a4)
{
  if (a4)
  {
    CFArrayRef v6 = result;
    std::vector<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned char const*,unsigned char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BB270520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned char const*,unsigned char const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    CFArrayRef v6 = a2;
    do
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      unsigned int v7 = *v6++;
      *(unsigned char *)uint64_t v4 = 6;
      *(void *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      uint64_t v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::Spatial_Head_Tracking_Configuration>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)76>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Cu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2706EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  LODWORD(v6) = 0;
  BYTE4(v6) = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_from_blob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result);
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::vx::Spatial_Head_Tracking_Configuration>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::vx::Spatial_Head_Tracking_Configuration>::convert_to_string(int a1, vp::utility *this, void *a3)
{
  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB270B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)77>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Du, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB270BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)78>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<float>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x4Eu, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB270C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(float,float)>>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  if (*a2)
  {
    *uint64_t storage = *a2;
    *a2 = 0;
  }
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)84>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x54u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB270D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(float,float)>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = 0;
  void *result = v6;
  return result;
}

void sub_1BB270EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::Block<void({block_pointer})(float,float)>::~Block((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*a2) {
    _Block_release(*a2);
  }
  *a2 = v5;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  if (*a2) {
    uint64_t v4 = _Block_copy(*a2);
  }
  else {
    uint64_t v4 = 0;
  }

  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, (uint64_t)v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(float,float)>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(float,float)>>::convert_to_string(int a1, vp::utility *this, void *a3)
{
  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB271280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = std::pmr::get_default_resource(a1);
  v9[1] = 0;
  void v9[2] = &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id;
  uint64_t storage = (void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v9);
  *uint64_t storage = 0;
  if (*a2)
  {
    *uint64_t storage = *a2;
    *a2 = 0;
  }
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v9);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)83>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x53u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2713B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = 0;
  void *result = v6;
  return result;
}

void sub_1BB27150C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>::~Block((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

void vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_from_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4 = (const void *)vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*a2) {
    _Block_release(*a2);
  }
  *a2 = v5;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob(uint64_t a1, const void **a2, uint64_t a3)
{
  if (*a2) {
    uint64_t v4 = _Block_copy(*a2);
  }
  else {
    uint64_t v4 = 0;
  }

  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, (uint64_t)v4);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<vp::Block<void({block_pointer})(AUVoiceIOSpeechActivityEvent)>>::convert_to_string(int a1, vp::utility *this, void *a3)
{
  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB2718A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)85>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x55u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB271928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)86>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x56u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2719A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<AUVoiceIOOtherAudioDuckingConfiguration>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)87>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x57u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB271ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::~Type_Converter()
{
}

uint64_t vp::vx::Property::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_blob_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Property::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_plist_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Property::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_string_converter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_blob_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_blob_type_converter(void)const::s_blob_type_converter;
}

uint64_t vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_plist_type_converter()
{
  return 0;
}

uint64_t (***vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_string_type_converter())()
{
  return &vp::vx::Voice_Processor::Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::as_string_type_converter(void)const::s_string_type_converter;
}

void vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::~Blob_Type_Converter()
{
}

void *vp::vx::Property::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_from_blob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::Value *a3@<X8>)
{
  uint64_t v4 = (std::pmr *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v6, a2);
  *(void *)a3 = std::pmr::get_default_resource(v4);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(a3);
  void *result = v6;
  return result;
}

uint64_t vp::vx::Property::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v6(a1, v5, a3);
}

uint64_t vp::vx::Property::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob_size(uint64_t a1, uint64_t (****this)())
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id
    || (uint64_t v3 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v6, v7);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);

  return v4(a1, v3);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_from_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = vp::Blob_Getter<vp::Blob>::get<__CFString const*>(a3 + 1);
  *a2 = result;
  return result;
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return vp::Blob_Setter<vp::Mutable_Blob>::set<__CFString const*>(a3 + 2, *a2);
}

uint64_t vp::vx::Voice_Processor::Blob_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_blob_size()
{
  return 8;
}

void vp::vx::Voice_Processor::String_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::~String_Type_Converter()
{
}

uint64_t vp::vx::Property::String_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_string(uint64_t a1, uint64_t (****this)(), uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (this[2] != &vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingConfiguration>(void)::s_type_id
    || (uint64_t v5 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)this)) == 0)
  {
    vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(&v8, v9);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v6(a1, v5, a3);
}

void vp::vx::Voice_Processor::String_Type_Converter<AUVoiceIOOtherAudioDuckingConfiguration>::convert_to_string(int a1, vp::utility *this, void *a3)
{
  vp::utility::encode_to_base_64(this, (const unsigned __int8 *)8, &__p);
  if (!v7) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  if (v7)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB271F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB271FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)89>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x59u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB272038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)90>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable_writable<BOOL>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<BOOL>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 0x5Au, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB2720B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1BB272138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_user_defaults_states(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)0>(v1, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)1>(v1, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)2>(v1, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)3>(v1, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)4>(v1, (uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)5>(v1, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)6>(v1, (uint64_t)v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)7>(v1, (uint64_t)v3);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v3);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "vp_enable_debug_features";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 0;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB272348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)1>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 1;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "vp_enable_graph_audio_recorders";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 1;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB272498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)2>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "vp_enable_graph_audio_recorders_predicate";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 2;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<applesauce::CF::StringRef>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB2725E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)3>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "EnableTelephonyMonitor";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 3;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB272738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 4;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "EnableVPTelephonyMonitor";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 4;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB272888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)5>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "vp_enable_io_node_cpu_profilers";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 5;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB2729D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)6>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 6;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "vp_disable_AUPB";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 6;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB272B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Voice_Processor::create_user_defaults_state<(vp::vx::User_Defaults_Key)7>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 856);
  v12[0] = 7;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::find(a1 + 856, v12, &v10);
  uint64_t v5 = *(void *)(a1 + 864);
  uint64_t v6 = *(void *)(a1 + 872);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v8 = v10;
  if (v10 == (int *)(v5 + 32 * v6))
  {
    unsigned __int8 v14 = "vp_disable_RPB";
    vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(a1, &v14, (uint64_t)&v10);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE((vp::vx::data_flow::State_Transaction *)&v10, a1 + 16, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v10);
    LODWORD(v10) = 7;
    vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
    unsigned int v13 = v8;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>(v4, &v13, (int *)&v10, (int **)&v14);
    uint64_t v8 = (int *)v14;
    vp::vx::data_flow::State<void>::~State((uint64_t)v11);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  }
  return vp::vx::data_flow::State<void>::State(a2, (uint64_t)(v8 + 2));
}

void sub_1BB272C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  vp::vx::data_flow::State<void>::~State(v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4C20;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  vp::Service_Provider::get<vp::services::User_Defaults,(decltype(nullptr))0>(*(void **)(a1 + 456), &v11);
  uint64_t v6 = v11;
  if (v11)
  {
    *(void *)&long long cf = *a2;
    *((void *)&cf + 1) = v11;
    char v9 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vp::vx::Voice_Processor_State_Manager::create_state_for_SIGHUP_signal((dispatch_queue_t *)(a1 + 16), (uint64_t)v7);
    vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::TypeRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(char const* &&)::{lambda(applesauce::CF::TypeRef)#1},unsigned int>(a1 + 16, &cf, (vp::vx::data_flow::State_Transaction *)v7, (uint64_t)v10);
    vp::vx::data_flow::State<void>::State(a3, (uint64_t)v10);
    vp::vx::data_flow::State<void>::~State((uint64_t)v10);
    vp::vx::data_flow::State<void>::~State((uint64_t)v7);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v6)
  {
    *(void *)&long long cf = 0;
    vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::TypeRef>((std::pmr *)(a1 + 16), &cf, (uint64_t)v10);
    vp::vx::data_flow::State<void>::State(a3, (uint64_t)v10);
    vp::vx::data_flow::State<void>::~State((uint64_t)v10);
    if ((void)cf) {
      CFRelease((CFTypeRef)cf);
    }
  }
}

void sub_1BB272E74(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,false>,vp::vx::User_Defaults_Key>(void *a1@<X1>, void *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = (uint64_t)(*a2 - *a1) >> 5;
    int v6 = *a3;
    uint64_t v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        uint64_t v4 = v8 + 8;
        *a1 = v8 + 8;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4C20;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4C20;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE0EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE0EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE0EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE0EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  uint64_t v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  unsigned __int8 v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1BB273194(void *a1)
{
}

void vp::vx::deserialize_plist(const __CFString **this, const applesauce::CF::TypeRef *a2, BOOL *a3)
{
  CFStringRef v4 = *this;
  if (!v4) {
    goto LABEL_13;
  }
  CFTypeID v6 = CFGetTypeID(v4);
  CFTypeID TypeID = CFNumberGetTypeID();
  CFNumberRef v8 = (const __CFNumber *)*this;
  if (v6 == TypeID)
  {
    if (v8)
    {
      *(unsigned char *)a2 = applesauce::CF::convert_to<unsigned int,0>(v8) == 1;
      return;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  if (!v8) {
    goto LABEL_13;
  }
  CFTypeID v9 = CFGetTypeID(v8);
  if (v9 == CFStringGetTypeID())
  {
    if (!*this) {
      goto LABEL_13;
    }
    applesauce::CF::convert_to<std::string,0>(*this, (uint64_t)&__str);
    *(unsigned char *)a2 = std::stoi(&__str, 0, 10) == 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (!*this) {
      goto LABEL_13;
    }
    *(unsigned char *)a2 = applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)*this);
  }
}

void sub_1BB2732E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::~Type_ID_Eraser()
{
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::allocate_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::view_storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void *vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::copy_value(uint64_t a1, void *a2, CFTypeRef *a3)
{
  return std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,applesauce::CF::TypeRef const&,applesauce::CF::TypeRef*>(a2, a3);
}

void vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::move_value(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::destroy_value(uint64_t a1, const void **a2)
{
}

BOOL vp::vx::data_flow::Value::Type_ID_Eraser<applesauce::CF::TypeRef>::compare_value(uint64_t a1, const void **a2, const void **a3)
{
  unint64_t v3 = (unint64_t)*a2;
  CFStringRef v4 = *a3;
  BOOL result = (v3 | (unint64_t)*a3) == 0;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    return CFEqual((CFTypeRef)v3, v4) != 0;
  }
  return result;
}

void *std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,applesauce::CF::TypeRef const&,applesauce::CF::TypeRef*>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<vp::vx::data_flow::State<applesauce::CF::TypeRef> vp::vx::Voice_Processor::create_user_defaults_state<applesauce::CF::TypeRef,char const*>(char const* &&)::{lambda(applesauce::CF::TypeRef)#1},unsigned int>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  long long v10 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  CFNumberRef v8 = (char *)operator new(0x20uLL);
  *(void *)CFNumberRef v8 = &unk_1F14A4CD0;
  *(_OWORD *)(v8 + 8) = v10;
  *((void *)v8 + 3) = v7;
  v14[3] = v8;
  int id = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v14, (uint64_t)v13);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State(v13);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v14);
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v11);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v11);
}

void sub_1BB273524(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<applesauce::CF::TypeRef>@<X0>(std::pmr *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v8[0] = std::pmr::get_default_resource(a1);
  v8[1] = 0;
  v8[2] = &vp::vx::data_flow::Value::type_id<applesauce::CF::TypeRef>(void)::s_type_id;
  *(void *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v8) = *a2;
  *a2 = 0;
  vp::vx::data_flow::State_Manager::create_state((uint64_t)a1 + 48, (uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A4CD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A4CD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  BOOL result = (char *)operator new(0x20uLL);
  *(void *)BOOL result = &unk_1F14A4CD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4CD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateIS8_PKcEENS4_5StateIT_EEOT0_EUlSI_E_JjEEEDaOSI_DpRKNSH_IT0_EEEUlDpRKT_E_JjEEERNS4_13State_ManagerESI_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_PKcEENS5_5StateIT_EEOT0_EUlSJ_E_JjEEEDaOSJ_DpRKNSI_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESJ_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

void *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateIS9_PKcEENS5_5StateIT_EEOT0_EUlSJ_E_JjEEEDaOSJ_DpRKNSI_IT0_EEEUlDpRKT_E_JjEEERNS5_13State_ManagerESJ_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_PKcEENS1_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSF_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2, &v6);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v4);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::TypeRef>(void)::s_type_id;
  BOOL result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v6;
  return result;
}

void sub_1BB2737EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF7TypeRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateIS5_PKcEENS1_5StateIT_EEOT0_EUlSF_E_JjEEEDaOSF_DpRKNSE_IT0_EEEUlDpRKT_E_JjEJLm0EEEEDaRKSF_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1@<X0>, vp::vx::data_flow::Value **a2@<X1>, void *a3@<X8>)
{
  if (*((uint64_t (****)())*a2 + 2) == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage(*a2);
  }
  vp::services::User_Defaults::default_app(*(vp::services::User_Defaults **)(a1 + 8), (uint64_t)v5);
  vp::services::User_Defaults::Domain::get<applesauce::CF::TypeRef,char const*,(decltype(nullptr))0>((uint64_t)v5, (const char **)a1, a3);
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void vp::services::User_Defaults::Domain::get<applesauce::CF::TypeRef,char const*,(decltype(nullptr))0>(uint64_t a1@<X0>, const char **a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v5 = *a2;
  CFIndex v6 = strlen(*a2);
  if (v5)
  {
    CFTypeRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)a1 + 32))(&cf);
  CFTypeRef v8 = cf;
  if (cf)
  {
    CFRetain(cf);
    *a3 = v8;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = 0;
  }
  if (v10) {
    CFRelease(v10);
  }
}

void sub_1BB273998(void *a1)
{
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<BOOL>>>@<X0>(void *a1@<X0>, int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  int v9 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)(a3 + 2));
  CFTypeRef v8 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::insert_unique(a1, &v8, &v9, a4);
  return vp::vx::data_flow::State<void>::~State(v10);
}

void sub_1BB273A68(_Unwind_Exception *a1)
{
  vp::vx::data_flow::State<void>::~State(v1);
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::insert_unique(void *a1@<X0>, int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_18;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 32 * v7) {
LABEL_18:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v12 = *a2;
  unsigned int v13 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare((uint64_t)a1, &v12, a3, &v13))
  {
    unsigned __int8 v14 = v13;
    unint64_t v10 = a1[1];
    if (v10 > (unint64_t)v13) {
      goto LABEL_19;
    }
    uint64_t v11 = a1[2];
    if (!v10)
    {
      if (v11) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
    }
    if ((unint64_t)v13 > v10 + 32 * v11) {
LABEL_19:
    }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
    boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(a1, &v14, (const char *)1, a3, a4);
  }
  else
  {
    if (!a1[1] && v13) {
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    *a4 = v13;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(uint64_t a1, int **a2, int *a3, int **a4)
{
  CFStringRef v4 = *(int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  int v9 = &v4[8 * v5];
  unint64_t v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      int v18 = v9;
      __int16 v19 = v10;
      int64x2_t v16 = (uint64_t *)&v19;
      int v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  uint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  int v14 = *(v11 - 8);
  uint64_t v12 = v11 - 8;
  int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    __int16 v21 = v4;
    int64x2_t v20 = v12;
    int64x2_t v16 = (uint64_t *)&v21;
    int v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, int **a3, int *a4, int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,true>,vp::vx::User_Defaults_Key>(&v12, &v11, a4, &v13);
  int v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

void boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(void *a1@<X0>, int **a2@<X1>, const char *a3@<X2>, int *a4@<X3>, int **a5@<X8>)
{
  unint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  if (v7 < v6) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v11 = *a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    int64x2_t v16 = *a2;
    boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(a1, v16, a3, a4, a5);
  }
  else
  {
    if (v7 == v6) {
      boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
    }
    uint64_t v12 = (int *)(a1[1] + 32 * v6);
    if (v12 == v11)
    {
      *uint64_t v11 = *a4;
      vp::vx::data_flow::State<void>::State((uint64_t)(v12 + 2), (uint64_t)(a4 + 2));
      ++a1[2];
    }
    else
    {
      int v13 = v12 - 8;
      *uint64_t v12 = *(v12 - 8);
      vp::vx::data_flow::State<void>::State((uint64_t)(v12 + 2), (uint64_t)(v12 - 6));
      ++a1[2];
      if (v13 != v11)
      {
        int v14 = v13;
        do
        {
          int v15 = *(v14 - 8);
          v14 -= 8;
          int *v13 = v15;
          vp::vx::data_flow::State<void>::operator=((uint64_t)(v13 + 2), (uint64_t)(v13 - 6));
          int v13 = v14;
        }
        while (v14 != v11);
      }
      *uint64_t v11 = *a4;
      vp::vx::data_flow::State<void>::operator=((uint64_t)(v11 + 2), (uint64_t)(a4 + 2));
    }
    *a5 = *a2;
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>@<X0>(void *a1@<X0>, int *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  int v14 = (_DWORD *)std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + a1[1] - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(void *a1, _DWORD *a2, uint64_t a3, int *a4, uint64_t a5, _DWORD *a6)
{
  v15[0] = a2;
  v15[1] = a1;
  v15[2] = a3;
  uint64_t v10 = (int *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>((uint64_t)a1, v10, a4, &v10[8 * a1[2]], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = (uint64_t)(v10 + 2);
      do
      {
        --v11;
        uint64_t v12 = vp::vx::data_flow::State<void>::~State(v12) + 32;
      }
      while (v11);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 32 * a1[3], 8);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1BB274070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>*,boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>(uint64_t a1, int *a2, int *a3, int *a4, _DWORD *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v10 = a3;
  uint64_t v11 = a5;
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    uint64_t v11 = a5;
    do
    {
      uint64_t v13 = (uint64_t)(v12 + 2);
      int v14 = *v12;
      v12 += 8;
      uint64_t v15 = (uint64_t)(v11 + 2);
      *uint64_t v11 = v14;
      v11 += 8;
      vp::vx::data_flow::State<void>::State(v15, v13);
    }
    while (v12 != v10);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *uint64_t v11 = *a7;
  vp::vx::data_flow::State<void>::State((uint64_t)(v11 + 2), (uint64_t)(a7 + 2));
  if (v10 != a4)
  {
    uint64_t v16 = (uint64_t)(v11 + 10);
    do
    {
      uint64_t v17 = (uint64_t)(v10 + 2);
      int v18 = *v10;
      v10 += 8;
      *(_DWORD *)(v16 - 8) = v18;
      vp::vx::data_flow::State<void>::State(v16, v17);
      uint64_t v16 = v19 + 32;
    }
    while (v10 != a4);
  }
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 32 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4D18;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4D18;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4D18;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE1EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE1EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE1EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE1EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  uint64_t v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  unsigned __int8 v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1BB2743E8(void *a1)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4D60;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4D60;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4D60;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE2EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS7_7TypeRefEE_JSJ_EEEDaOT_DpRKNSG_IT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESO_SU_EUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE2EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS8_7TypeRefEE_JSK_EEEDaOT_DpRKNSH_IT0_EEEUlDpRKT_E_JSK_EEERNS5_13State_ManagerESP_SV_EUlPPKNS5_5ValueEPS13_E_S16_S17_EEEvDpOSW_(a1 + 8, a2, a3);
}

void *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE2EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS8_7TypeRefEE_JSK_EEEDaOT_DpRKNSH_IT0_EEEUlDpRKT_E_JSK_EEERNS5_13State_ManagerESP_SV_EUlPPKNS5_5ValueEPS13_E_S16_S17_EEEvDpOSW_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS4_7TypeRefEE_JSG_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSG_EJLm0EEEEDaRKSL_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(*a2, &v6);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v4);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<applesauce::CF::StringRef>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v6;
  return result;
}

void sub_1BB2745C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::StringRef *_ZN2vp2vx9data_flow8FunctionIN10applesauce2CF9StringRefEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE2EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKNS4_7TypeRefEE_JSG_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSG_EJLm0EEEEDaRKSL_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE@<X0>(vp::vx::data_flow::Value **a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = (const void **)vp::vx::data_flow::Value::view_storage(*a1);
  uint64_t result = applesauce::CF::TypeRef::operator applesauce::CF::StringRef(v3, (applesauce::CF::StringRef *)&v5);
  *a2 = v5;
  return result;
}

void sub_1BB274624(void *a1)
{
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::emplace_hint_unique<std::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::Function<applesauce::CF::StringRef>>>@<X0>(void *a1@<X0>, int **a2@<X1>, int *a3@<X2>, int **a4@<X8>)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  int v9 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)(a3 + 2));
  uint64_t v8 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>,boost::container::dtl::select1st<vp::vx::User_Defaults_Key>,std::less<vp::vx::User_Defaults_Key>,vp::Allocator<boost::container::dtl::pair<vp::vx::User_Defaults_Key,vp::vx::data_flow::State<void>>>>::insert_unique(a1, &v8, &v9, a4);
  return vp::vx::data_flow::State<void>::~State(v10);
}

void sub_1BB2746DC(_Unwind_Exception *a1)
{
  vp::vx::data_flow::State<void>::~State(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4DA8;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4DA8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4DA8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE3EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE3EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE3EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE3EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  uint64_t v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  unsigned __int8 v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1BB2748E8(void *a1)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4DF0;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4DF0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4DF0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE4EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE4EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE4EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE4EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  uint64_t v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  unsigned __int8 v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1BB274AF0(void *a1)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4E38;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4E38;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4E38;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE5EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE5EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE5EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE5EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  uint64_t v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  unsigned __int8 v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1BB274CF8(void *a1)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4E80;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4E80;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4E80;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE6EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE6EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE6EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE6EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  uint64_t v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  unsigned __int8 v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1BB274F00(void *a1)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS0_9data_flow5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSC_EEEDaOT_DpRKNS7_IT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = &unk_1F14A4EC8;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14A4EC8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A4EC8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_15Voice_Processor26create_user_defaults_stateILNS3_17User_Defaults_KeyE7EEENS4_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSI_EEEDaOT_DpRKNSD_IT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESN_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE7EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIZNS4_15Voice_Processor26create_user_defaults_stateILNS4_17User_Defaults_KeyE7EEENS5_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSJ_EEEDaOT_DpRKNSE_IT0_EEEUlDpRKT_E_JSJ_EEERNS5_13State_ManagerESO_SU_EUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSV_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  uint64_t result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIZNS0_15Voice_Processor26create_user_defaults_stateILNS0_17User_Defaults_KeyE7EEENS1_5StateIDTclsr24User_Defaults_Key_TraitsIXT_EEE9get_valueEEEEvEUlRKN10applesauce2CF7TypeRefEE_JSF_EEEDaOT_DpRKNSA_IT0_EEEUlDpRKT_E_JSF_EJLm0EEEEDaRKSK_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t a1, vp::vx::data_flow::Value **a2)
{
  uint64_t v2 = (const __CFString **)vp::vx::data_flow::Value::view_storage(*a2);
  unsigned __int8 v5 = 0;
  vp::vx::deserialize_plist(v2, (const applesauce::CF::TypeRef *)&v5, v3);
  return v5;
}

void sub_1BB275108(void *a1)
{
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_configuration_states(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  return vp::vx::Voice_Processor::create_configuration_states(void)::$_0::operator()(*a1);
}

uint64_t vp::vx::Voice_Processor::create_configuration_states(void)::$_0::operator()(vp::vx::Voice_Processor **a1)
{
  uint64_t v239 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  vp::vx::Voice_Processor::get_global_configuration(*a1, (uint64_t)&v234);
  *(void *)&long long __p = &unk_1F14A4F10;
  *((void *)&__p + 1) = 0;
  *((void *)&v209 + 1) = &__p;
  LODWORD(v227[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)&v234);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v200, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v234);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)67>((uint64_t)v1 + 8, (uint64_t)v199);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)48>((uint64_t)v1 + 8, (uint64_t)v198);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v198, (uint64_t)v1 + 16, (uint64_t)v197);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)8>((uint64_t)v1 + 8, (uint64_t)v196);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v196, (uint64_t)v1 + 16, (uint64_t)v195);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v196, (uint64_t)v1 + 16, (uint64_t)v194);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)9>((uint64_t)v1 + 8, (uint64_t)v193);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)23>((uint64_t)v1 + 8, (uint64_t)v192);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v192, (uint64_t)v1 + 16, (uint64_t)v191);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v192, (uint64_t)v1 + 16, (uint64_t)v190);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)24>((uint64_t)v1 + 8, (uint64_t)v189);
  *(void *)&long long __p = &unk_1F14A4FE8;
  *((void *)&__p + 1) = v1;
  *((void *)&v209 + 1) = &__p;
  LODWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v193);
  HIDWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v189);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v188, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  *(void *)&long long __p = &unk_1F14A5030;
  *((void *)&__p + 1) = v1;
  *((void *)&v209 + 1) = &__p;
  LODWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v194);
  HIDWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v190);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v187, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  vp::vx::Voice_Processor::create_port_factory(v1, 0, (uint64_t *)&__p);
  uint64_t v2 = (void *)__p;
  if (!(void)__p)
  {
    uint64_t v72 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v72);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v186, (uint64_t)v193);
  vp::vx::IO_Port_Factory::set_block_size(v2, (uint64_t)v186);
  vp::vx::data_flow::State<void>::~State((uint64_t)v186);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 1);
  uint64_t v3 = (void *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v185, (uint64_t)v196);
  vp::vx::IO_Port_Factory::set_format(v3, (uint64_t)v185);
  vp::vx::data_flow::State<void>::~State((uint64_t)v185);
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  vp::vx::Voice_Processor::create_port_factory(v1, 1, (uint64_t *)&__p);
  char v4 = (void *)__p;
  if (!(void)__p)
  {
    uint64_t v73 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v73);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v184, (uint64_t)v189);
  vp::vx::IO_Port_Factory::set_block_size(v4, (uint64_t)v184);
  vp::vx::data_flow::State<void>::~State((uint64_t)v184);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 1);
  unsigned __int8 v5 = (void *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v183, (uint64_t)v192);
  vp::vx::IO_Port_Factory::set_format(v5, (uint64_t)v183);
  vp::vx::data_flow::State<void>::~State((uint64_t)v183);
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  vp::vx::Voice_Processor::create_mic_ref_sync_node_factory(v1, &__p);
  uint64_t v6 = __p;
  if (!(void)__p)
  {
    uint64_t v74 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v74);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v182, (uint64_t)v188);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_block_size(v6, (uint64_t)v182);
  vp::vx::data_flow::State<void>::~State((uint64_t)v182);
  vp::vx::data_flow::State<void>::State((uint64_t)v181, (uint64_t)v196);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_format(v6, (uint64_t)v181);
  vp::vx::data_flow::State<void>::~State((uint64_t)v181);
  vp::vx::data_flow::State<void>::State((uint64_t)v180, (uint64_t)v192);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_format(v6, (uint64_t)v180);
  vp::vx::data_flow::State<void>::~State((uint64_t)v180);
  vp::vx::Voice_Processor::get_uplink_mic_ref_sample_time_delta(v1, (uint64_t)v179);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_mic_ref_time_delta(v6, (uint64_t)v179);
  vp::vx::data_flow::State<void>::~State((uint64_t)v179);
  vp::vx::Voice_Processor::get_uplink_ref_audio_ring_buffer_capacity(v1, (uint64_t)v178);
  vp::vx::IO_Mic_Ref_Sync_Node_Factory::set_ref_audio_ring_buffer_capacity(v6, (uint64_t)v178);
  vp::vx::data_flow::State<void>::~State((uint64_t)v178);
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 0, (uint64_t)v177);
  *(void *)&long long __p = &unk_1F14A5078;
  BYTE8(__p) = 0;
  *((void *)&v209 + 1) = &__p;
  LODWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v191);
  HIDWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v177);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v176, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 0, (uint64_t *)&v220);
  unint64_t v7 = (void *)v220;
  if (!(void)v220)
  {
    uint64_t v75 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v75);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v175, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v7, (uint64_t)&__p, (uint64_t)v175);
  vp::vx::data_flow::State<void>::~State((uint64_t)v175);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v8 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ref");
  vp::vx::data_flow::State<void>::State((uint64_t)v174, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v8, (uint64_t)&__p, (uint64_t)v174);
  vp::vx::data_flow::State<void>::~State((uint64_t)v174);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  char v9 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic_clip_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v173, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v9, (uint64_t)&__p, (uint64_t)v173);
  vp::vx::data_flow::State<void>::~State((uint64_t)v173);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v10 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v172, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_output_format(v10, (uint64_t)&__p, (uint64_t)v172);
  vp::vx::data_flow::State<void>::~State((uint64_t)v172);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v11 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ref");
  vp::vx::data_flow::State<void>::State((uint64_t)v171, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_output_format(v11, (uint64_t)&__p, (uint64_t)v171);
  vp::vx::data_flow::State<void>::~State((uint64_t)v171);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v12 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic_clip_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v170, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_output_format(v12, (uint64_t)&__p, (uint64_t)v170);
  vp::vx::data_flow::State<void>::~State((uint64_t)v170);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (*((void *)&v220 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v220 + 1));
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 1, (uint64_t)v169);
  uint64_t v13 = *((void *)v1 + 69);
  int v14 = operator new(0x20uLL);
  *int v14 = &unk_1F14A5150;
  v14[1] = v13;
  v14[2] = vp::vx::Uplink_Configuration_Delegate::calculate_echo_dsp_sample_rate;
  v14[3] = 0;
  v227[3] = v14;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&v220, (uint64_t)v227);
  LOBYTE(v223) = 1;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&v228, (uint64_t)&v220);
  LOBYTE(v231) = (_BYTE)v223;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v228);
  LOBYTE(v210) = (_BYTE)v231;
  v237 = 0;
  uint64_t v15 = operator new(0x30uLL);
  *(void *)uint64_t v15 = &unk_1F14A5198;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)(v15 + 8), (uint64_t)&__p);
  v15[40] = v210;
  v237 = v15;
  LODWORD(v214) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v187);
  HIDWORD(v214) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v188);
  int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v169);
  int v216 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v197);
  int v217 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v199);
  int v218 = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v200);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v234, (uint64_t)v226);
  vp::vx::data_flow::State<void>::State((uint64_t)v213, (uint64_t)v226);
  vp::vx::data_flow::State<void>::~State(v226);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v234);
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](&__p);
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)v168, (uint64_t)v213);
  vp::vx::data_flow::State<void>::~State((uint64_t)v213);
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](&v220);
  uint64_t v16 = *((void *)v1 + 69);
  uint64_t v17 = operator new(0x20uLL);
  void *v17 = &unk_1F14A51E0;
  v17[1] = v16;
  v17[2] = vp::vx::Uplink_Configuration_Delegate::calculate_echo_dsp_block_size;
  v17[3] = 0;
  v226[3] = v17;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v220, (uint64_t)v226);
  v224 = 0;
  v223 = 0;
  uint64_t v225 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v223, *((const void **)v1 + 62), *((void *)v1 + 63), (uint64_t)(*((void *)v1 + 63) - *((void *)v1 + 62)) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v228, (uint64_t)&v220);
  v231 = 0;
  v232 = 0;
  uint64_t v233 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v231, v223, (uint64_t)v224, (v224 - (unsigned char *)v223) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v228);
  long long v210 = 0uLL;
  *(void *)&long long v211 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v210, v231, (uint64_t)v232, (v232 - (unsigned char *)v231) >> 2);
  v237 = 0;
  int v18 = operator new(0x40uLL);
  *int v18 = &unk_1F14A5228;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)(v18 + 1), (uint64_t)&__p);
  v18[5] = 0;
  v18[6] = 0;
  v18[7] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18 + 5, (const void *)v210, *((uint64_t *)&v210 + 1), (uint64_t)(*((void *)&v210 + 1) - v210) >> 2);
  v237 = v18;
  LODWORD(v207[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v169);
  HIDWORD(v207[0]) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v168);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v234, (uint64_t)&v214);
  vp::vx::data_flow::State<void>::State((uint64_t)v213, (uint64_t)&v214);
  vp::vx::data_flow::State<void>::~State(&v214);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v234);
  if ((void)v210)
  {
    *((void *)&v210 + 1) = v210;
    operator delete((void *)v210);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&__p);
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)v167, (uint64_t)v213);
  vp::vx::data_flow::State<void>::~State((uint64_t)v213);
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&v220);
  LOBYTE(__p) = 1;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)v1 + 16), &__p, (uint64_t)v166);
  *(void *)&long long __p = &unk_1F14A5270;
  BYTE8(__p) = 0;
  *((void *)&v209 + 1) = &__p;
  LODWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v191);
  HIDWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v169);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v165, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 1u, (uint64_t *)&v220);
  uint64_t v19 = (void *)v220;
  if (!(void)v220)
  {
    uint64_t v76 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v76);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v164, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v19, (uint64_t)&__p, (uint64_t)v164);
  vp::vx::data_flow::State<void>::~State((uint64_t)v164);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  int64x2_t v20 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ref");
  vp::vx::data_flow::State<void>::State((uint64_t)v163, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v20, (uint64_t)&__p, (uint64_t)v163);
  vp::vx::data_flow::State<void>::~State((uint64_t)v163);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  __int16 v21 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic_clip_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v162, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v21, (uint64_t)&__p, (uint64_t)v162);
  vp::vx::data_flow::State<void>::~State((uint64_t)v162);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  int v22 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v161, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_output_format(v22, (uint64_t)&__p, (uint64_t)v161);
  vp::vx::data_flow::State<void>::~State((uint64_t)v161);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (*((void *)&v220 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v220 + 1));
  }
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v198, (uint64_t)v1 + 16, (uint64_t)v160);
  uint64_t v23 = *((void *)v1 + 69);
  int v24 = operator new(0x20uLL);
  void *v24 = &unk_1F14A5300;
  v24[1] = v23;
  v24[2] = vp::vx::Uplink_Configuration_Delegate::calculate_content_dsp_max_block_size;
  v24[3] = 0;
  v219 = v24;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double)> const&,double,unsigned int,double>((uint64_t)v1 + 16, (uint64_t)&v214, (vp::vx::data_flow::State_Transaction *)v168, (vp::vx::data_flow::State_Transaction *)v167, (vp::vx::data_flow::State_Transaction *)v160, (uint64_t)v159);
  LOBYTE(__p) = 0;
  vp::vx::Voice_Processor_State_Manager::create_state<BOOL>((vp::vx::Voice_Processor *)((char *)v1 + 16), &__p, (uint64_t)v158);
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 2u, (uint64_t *)&v220);
  __int16 v25 = (void *)v220;
  if (!(void)v220)
  {
    uint64_t v77 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v77);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mic");
  vp::vx::data_flow::State<void>::State((uint64_t)v157, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v25, (uint64_t)&__p, (uint64_t)v157);
  vp::vx::data_flow::State<void>::~State((uint64_t)v157);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  int v26 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "client");
  vp::vx::data_flow::State<void>::State((uint64_t)v156, (uint64_t)v198);
  vp::vx::DSP_Node_Factory::set_output_format(v26, (uint64_t)&__p, (uint64_t)v156);
  vp::vx::data_flow::State<void>::~State((uint64_t)v156);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (*((void *)&v220 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v220 + 1));
  }
  uint64_t v27 = *((void *)v1 + 69);
  int v28 = operator new(0x20uLL);
  *int v28 = &unk_1F14A53D8;
  v28[1] = v27;
  v28[2] = vp::vx::Uplink_Configuration_Delegate::calculate_output_max_block_size_with_safety_margin;
  v28[3] = 0;
  *((void *)&v209 + 1) = v28;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)5,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>((uint64_t)v1, (uint64_t)&__p, (vp::vx::data_flow::State_Transaction *)v187, (vp::vx::data_flow::State_Transaction *)v188, (vp::vx::data_flow::State_Transaction *)v168, (vp::vx::data_flow::State_Transaction *)v167, (vp::vx::data_flow::State_Transaction *)v166, (vp::vx::data_flow::State_Transaction *)v160, (uint64_t)v155, (vp::vx::data_flow::State_Transaction *)v159, (vp::vx::data_flow::State_Transaction *)v158);
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100](&__p);
  vp::vx::Voice_Processor::create_port_factory(v1, 0x200000004, (uint64_t *)&__p);
  __int16 v29 = (void *)__p;
  if (!(void)__p)
  {
    uint64_t v78 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v78);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v154, (uint64_t)v155);
  vp::vx::IO_Port_Factory::set_block_size(v29, (uint64_t)v154);
  vp::vx::data_flow::State<void>::~State((uint64_t)v154);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 0);
  uint64_t v30 = (void *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v153, (uint64_t)v198);
  vp::vx::IO_Port_Factory::set_format(v30, (uint64_t)v153);
  vp::vx::data_flow::State<void>::~State((uint64_t)v153);
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  vp::vx::Voice_Processor::create_wire_factory(v1, 0, &v151);
  if (v152) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v152);
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 3, (uint64_t)v150);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)52>((uint64_t)v1 + 8, (uint64_t)v149);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>((uint64_t)v1 + 8, (uint64_t)v148);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v148, (uint64_t)v1 + 16, (uint64_t)v147);
  std::string::basic_string[abi:ne180100]<0>(&v144, "mix");
  long long __p = v144;
  *(void *)&long long v209 = v145;
  uint64_t v145 = 0;
  long long v144 = 0uLL;
  DWORD2(v209) = 1;
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v145) < 0) {
    operator delete((void *)v144);
  }
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)63>((uint64_t)v1 + 8, (uint64_t)v143);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)62>((uint64_t)v1 + 8, (uint64_t)v142);
  vp::vx::Voice_Processor::create_port_factory(v1, 0x100000003, (uint64_t *)&v204);
  __int16 v31 = v204;
  if (!v204)
  {
    uint64_t v79 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v79);
  }
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)25>((uint64_t)v1 + 8, (uint64_t)v213);
  vp::vx::Voice_Processor::get_downlink_configuration(v1, (uint64_t)v207);
  *(void *)&long long __p = &unk_1F14A5468;
  BYTE8(__p) = 0;
  *((void *)&v209 + 1) = &__p;
  v238[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v213);
  v238[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v207);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)&v234, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  vp::vx::data_flow::State<void>::State((uint64_t)v141, (uint64_t)&v234);
  vp::vx::IO_Port_Factory::set_is_enabled(v31, (uint64_t)v141);
  vp::vx::data_flow::State<void>::~State((uint64_t)v141);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v234);
  vp::vx::data_flow::State<void>::~State((uint64_t)v207);
  vp::vx::data_flow::State<void>::~State((uint64_t)v213);
  int v32 = v204;
  vp::vx::data_flow::State<void>::State((uint64_t)v140, (uint64_t)v143);
  vp::vx::IO_Port_Factory::set_block_size(v32, (uint64_t)v140);
  vp::vx::data_flow::State<void>::~State((uint64_t)v140);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed(v204, 0);
  uint64_t v33 = v204;
  vp::vx::data_flow::State<void>::State((uint64_t)v139, (uint64_t)v142);
  vp::vx::IO_Port_Factory::set_format(v33, (uint64_t)v139);
  vp::vx::data_flow::State<void>::~State((uint64_t)v139);
  if (v205) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v205);
  }
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 3u, (uint64_t *)&v220);
  __int16 v34 = (void *)v220;
  if (!(void)v220)
  {
    uint64_t v80 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v80);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mix");
  vp::vx::data_flow::State<void>::State((uint64_t)v138, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v34, (uint64_t)&__p, (uint64_t)v138);
  vp::vx::data_flow::State<void>::~State((uint64_t)v138);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  __int16 v35 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "iv_data");
  vp::vx::data_flow::State<void>::State((uint64_t)v137, (uint64_t)v142);
  vp::vx::DSP_Node_Factory::set_input_format(v35, (uint64_t)&__p, (uint64_t)v137);
  vp::vx::data_flow::State<void>::~State((uint64_t)v137);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  __int16 v36 = (void *)v220;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hw");
  vp::vx::data_flow::State<void>::State((uint64_t)v136, (uint64_t)v148);
  vp::vx::DSP_Node_Factory::set_output_format(v36, (uint64_t)&__p, (uint64_t)v136);
  vp::vx::data_flow::State<void>::~State((uint64_t)v136);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (*((void *)&v220 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v220 + 1));
  }
  vp::vx::Voice_Processor::create_port_factory(v1, 0x300000000, (uint64_t *)&__p);
  int v37 = (void *)__p;
  if (!(void)__p)
  {
    uint64_t v81 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v81);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)v135, (uint64_t)v149);
  vp::vx::IO_Port_Factory::set_block_size(v37, (uint64_t)v135);
  vp::vx::data_flow::State<void>::~State((uint64_t)v135);
  vp::vx::IO_Port_Factory::set_block_size_is_fixed((vp::vx::IO_Port_Factory *)__p, 1);
  __int16 v38 = (void *)__p;
  vp::vx::data_flow::State<void>::State((uint64_t)v134, (uint64_t)v148);
  vp::vx::IO_Port_Factory::set_format(v38, (uint64_t)v134);
  vp::vx::data_flow::State<void>::~State((uint64_t)v134);
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 2, (uint64_t)v133);
  uint64_t v39 = *((void *)v1 + 70);
  __int16 v40 = operator new(0x20uLL);
  *__int16 v40 = &unk_1F14A54B0;
  v40[1] = v39;
  v40[2] = vp::vx::Downlink_Configuration_Delegate::calculate_dynamics_dsp_block_size;
  v40[3] = 0;
  v213[3] = v40;
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,unsigned int>((uint64_t)v1 + 16, (uint64_t)v213, (vp::vx::data_flow::State_Transaction *)v133, (vp::vx::data_flow::State_Transaction *)v147, (vp::vx::data_flow::State_Transaction *)v149, (uint64_t)v132);
  vp::vx::data_flow::State<void>::State((uint64_t)v131, (uint64_t)v147);
  std::string::basic_string[abi:ne180100]<0>(&v128, "voice");
  long long __p = v128;
  *(void *)&long long v209 = v129;
  uint64_t v129 = 0;
  long long v128 = 0uLL;
  DWORD2(v209) = 1;
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v129) < 0) {
    operator delete((void *)v128);
  }
  std::string::basic_string[abi:ne180100]<0>(&v125, "mix");
  long long __p = v125;
  *(void *)&long long v209 = v126;
  uint64_t v126 = 0;
  long long v125 = 0uLL;
  DWORD2(v209) = 1;
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v126) < 0) {
    operator delete((void *)v125);
  }
  *(void *)&long long __p = &unk_1F14A5588;
  BYTE8(__p) = 0;
  *((void *)&v209 + 1) = &__p;
  LODWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v148);
  HIDWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v131);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v124, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  *(void *)&long long __p = &unk_1F14A55D0;
  BYTE8(__p) = 0;
  *((void *)&v209 + 1) = &__p;
  LODWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v148);
  HIDWORD(v234) = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v131);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v123, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  if (*((_DWORD *)v1 + 66) != 3)
  {
    uint64_t v41 = 0;
    uint64_t v234 = 0x200000000;
    do
    {
      uint64_t v42 = *(unsigned int *)((char *)&v234 + v41);
      vp::vx::Voice_Processor::create_port_factory(v1, v42 | 0x100000000, (uint64_t *)&v228);
      uint64_t v43 = v228;
      if (!v228)
      {
        v207[0] = 0;
        long long v212 = 0u;
        long long v211 = 0u;
        long long v210 = 0u;
        long long v209 = 0u;
        long long __p = 0u;
        os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if ((v42 - 1) > 2) {
          uint64_t v70 = "dynamics DSP default audio input";
        }
        else {
          uint64_t v70 = off_1E6237BA8[(int)v42 - 1];
        }
        LODWORD(v220) = 136315138;
        *(void *)((char *)&v220 + 4) = v70;
        _os_log_send_and_compose_impl();
        uint64_t v71 = _os_crash_msg();
        caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v71);
      }
      vp::vx::data_flow::State<void>::State((uint64_t)v122, (uint64_t)v149);
      vp::vx::IO_Port_Factory::set_block_size(v43, (uint64_t)v122);
      vp::vx::data_flow::State<void>::~State((uint64_t)v122);
      vp::vx::IO_Port_Factory::set_block_size_is_fixed(v228, 1);
      uint64_t v44 = v228;
      vp::vx::data_flow::State<void>::State((uint64_t)v121, (uint64_t)v124);
      vp::vx::IO_Port_Factory::set_format(v44, (uint64_t)v121);
      vp::vx::data_flow::State<void>::~State((uint64_t)v121);
      if (v229) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v229);
      }
      v41 += 4;
    }
    while (v41 != 8);
    vp::vx::Voice_Processor::create_port_factory(v1, 0x100000001, (uint64_t *)&v228);
    uint64_t v45 = v228;
    if (!v228)
    {
      uint64_t v234 = 0;
      long long v212 = 0u;
      long long v211 = 0u;
      long long v210 = 0u;
      long long v209 = 0u;
      long long __p = 0u;
      os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      LODWORD(v220) = 136315138;
      *(void *)((char *)&v220 + 4) = "dynamics DSP system audio input";
      _os_log_send_and_compose_impl();
      uint64_t v86 = _os_crash_msg();
      caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v86);
    }
    vp::vx::data_flow::State<void>::State((uint64_t)v120, (uint64_t)v149);
    vp::vx::IO_Port_Factory::set_block_size(v45, (uint64_t)v120);
    vp::vx::data_flow::State<void>::~State((uint64_t)v120);
    vp::vx::IO_Port_Factory::set_block_size_is_fixed(v228, 1);
    long long v46 = v228;
    vp::vx::data_flow::State<void>::State((uint64_t)v119, (uint64_t)v123);
    vp::vx::IO_Port_Factory::set_format(v46, (uint64_t)v119);
    vp::vx::data_flow::State<void>::~State((uint64_t)v119);
    if (v229) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v229);
    }
  }
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 2u, (uint64_t *)&v204);
  __int16 v47 = v204;
  if (!v204)
  {
    uint64_t v82 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v82);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v118, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_input_format(v47, (uint64_t)&__p, (uint64_t)v118);
  vp::vx::data_flow::State<void>::~State((uint64_t)v118);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v48 = v204;
  std::string::basic_string[abi:ne180100]<0>(&__p, "default_audio");
  vp::vx::data_flow::State<void>::State((uint64_t)v117, (uint64_t)v124);
  vp::vx::DSP_Node_Factory::set_input_format(v48, (uint64_t)&__p, (uint64_t)v117);
  vp::vx::data_flow::State<void>::~State((uint64_t)v117);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  long long v49 = v204;
  std::string::basic_string[abi:ne180100]<0>(&__p, "system_audio");
  vp::vx::data_flow::State<void>::State((uint64_t)v116, (uint64_t)v123);
  vp::vx::DSP_Node_Factory::set_input_format(v49, (uint64_t)&__p, (uint64_t)v116);
  vp::vx::data_flow::State<void>::~State((uint64_t)v116);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v50 = v204;
  std::string::basic_string[abi:ne180100]<0>(&v234, "other_audio");
  *(void *)&long long __p = &unk_1F14A5618;
  BYTE8(__p) = 0;
  *((void *)&v209 + 1) = &__p;
  v238[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v124);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)&v220, (uint64_t)&v228);
  vp::vx::data_flow::State<void>::~State(&v228);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v207, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  vp::vx::data_flow::State<void>::State((uint64_t)v115, (uint64_t)v207);
  vp::vx::DSP_Node_Factory::set_input_format(v50, (uint64_t)&v234, (uint64_t)v115);
  vp::vx::data_flow::State<void>::~State((uint64_t)v115);
  vp::vx::data_flow::State<void>::~State((uint64_t)v207);
  if (v236 < 0) {
    operator delete((void *)v234);
  }
  __int16 v51 = v204;
  std::string::basic_string[abi:ne180100]<0>(&__p, "mix");
  vp::vx::data_flow::State<void>::State((uint64_t)v114, (uint64_t)&v228);
  vp::vx::DSP_Node_Factory::set_output_format(v51, (uint64_t)&__p, (uint64_t)v114);
  vp::vx::data_flow::State<void>::~State((uint64_t)v114);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v228);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (v205) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v205);
  }
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)50>((uint64_t)v1 + 8, (uint64_t)v113);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)49>((uint64_t)v1 + 8, (uint64_t)v112);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v112, (uint64_t)v1 + 16, (uint64_t)v111);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE((vp::vx::data_flow::State_Transaction *)v112, (uint64_t)v1 + 16, (uint64_t)v110);
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 1, (uint64_t)v109);
  uint64_t v52 = *((void *)v1 + 70);
  __int16 v53 = operator new(0x20uLL);
  void *v53 = &unk_1F14A5660;
  v53[1] = v52;
  v53[2] = vp::vx::Downlink_Configuration_Delegate::calculate_voice_dsp_sample_rate;
  v53[3] = 0;
  v207[3] = v53;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&v220, (uint64_t)v207);
  LOBYTE(v223) = 1;
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)67>((uint64_t)v1 + 8, (uint64_t)v201);
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&v228, (uint64_t)&v220);
  LOBYTE(v231) = (_BYTE)v223;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v228);
  LOBYTE(v210) = (_BYTE)v231;
  v237 = 0;
  __int16 v54 = operator new(0x30uLL);
  *(void *)__int16 v54 = &unk_1F14A56A8;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)(v54 + 8), (uint64_t)&__p);
  v54[40] = v210;
  v237 = v54;
  v203[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v109);
  v203[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v111);
  v203[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v147);
  v203[3] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v201);
  v203[4] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v200);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v234, (uint64_t)&v204);
  vp::vx::data_flow::State<void>::State((uint64_t)v238, (uint64_t)&v204);
  vp::vx::data_flow::State<void>::~State(&v204);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v234);
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](&__p);
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)v108, (uint64_t)v238);
  vp::vx::data_flow::State<void>::~State((uint64_t)v238);
  vp::vx::data_flow::State<void>::~State((uint64_t)v201);
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](&v220);
  uint64_t v55 = *((void *)v1 + 70);
  __int16 v56 = operator new(0x20uLL);
  *__int16 v56 = &unk_1F14A56F0;
  v56[1] = v55;
  v56[2] = vp::vx::Downlink_Configuration_Delegate::calculate_voice_dsp_block_size;
  v56[3] = 0;
  v206 = v56;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v220, (uint64_t)&v204);
  v224 = 0;
  v223 = 0;
  uint64_t v225 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v223, *((const void **)v1 + 62), *((void *)v1 + 63), (uint64_t)(*((void *)v1 + 63) - *((void *)v1 + 62)) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v228, (uint64_t)&v220);
  v231 = 0;
  v232 = 0;
  uint64_t v233 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v231, v223, (uint64_t)v224, (v224 - (unsigned char *)v223) >> 2);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v228);
  long long v210 = 0uLL;
  *(void *)&long long v211 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v210, v231, (uint64_t)v232, (v232 - (unsigned char *)v231) >> 2);
  v237 = 0;
  uint64_t v57 = operator new(0x40uLL);
  void *v57 = &unk_1F14A5738;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)(v57 + 1), (uint64_t)&__p);
  v57[5] = 0;
  v57[6] = 0;
  v57[7] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v57 + 5, (const void *)v210, *((uint64_t *)&v210 + 1), (uint64_t)(*((void *)&v210 + 1) - v210) >> 2);
  v237 = v57;
  v202[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v109);
  v202[1] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v108);
  v202[2] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v131);
  v202[3] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v132);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v234, (uint64_t)v238);
  vp::vx::data_flow::State<void>::State((uint64_t)v201, (uint64_t)v238);
  vp::vx::data_flow::State<void>::~State(v238);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v234);
  if ((void)v210)
  {
    *((void *)&v210 + 1) = v210;
    operator delete((void *)v210);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&__p);
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&v228);
  vp::vx::data_flow::State<void>::State((uint64_t)v203, (uint64_t)v201);
  vp::vx::data_flow::State<void>::~State((uint64_t)v201);
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&v220);
  uint64_t v58 = *((void *)v1 + 70);
  __int16 v59 = operator new(0x20uLL);
  *__int16 v59 = &unk_1F14A5780;
  v59[1] = v58;
  v59[2] = vp::vx::Downlink_Configuration_Delegate::calculate_voice_dsp_block_size_is_fixed;
  v59[3] = 0;
  v230 = v59;
  vp::vx::Voice_Processor_State_Manager::create_state<std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,double,unsigned int>((uint64_t)v1 + 16, (uint64_t)&v228, (vp::vx::data_flow::State_Transaction *)v109, (vp::vx::data_flow::State_Transaction *)v108, (vp::vx::data_flow::State_Transaction *)v131, (vp::vx::data_flow::State_Transaction *)v132, (uint64_t)v238);
  std::string::basic_string[abi:ne180100]<0>(&v106, "voice");
  long long __p = v106;
  *(void *)&long long v209 = v107;
  uint64_t v107 = 0;
  long long v106 = 0uLL;
  DWORD2(v209) = 1;
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v107) < 0) {
    operator delete((void *)v106);
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "voice");
  long long __p = v104;
  *(void *)&long long v209 = v105;
  uint64_t v105 = 0;
  long long v104 = 0uLL;
  DWORD2(v209) = 1;
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)v104);
  }
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 1u, &v234);
  v60 = (void *)v234;
  if (!v234)
  {
    uint64_t v83 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v83);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v103, (uint64_t)&v220);
  vp::vx::DSP_Node_Factory::set_input_format(v60, (uint64_t)&__p, (uint64_t)v103);
  vp::vx::data_flow::State<void>::~State((uint64_t)v103);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  std::vector<char> v61 = (void *)v234;
  std::string::basic_string[abi:ne180100]<0>(&__p, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v102, (uint64_t)&v220);
  vp::vx::DSP_Node_Factory::set_output_format(v61, (uint64_t)&__p, (uint64_t)v102);
  vp::vx::data_flow::State<void>::~State((uint64_t)v102);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v220);
  if (SBYTE7(v209) < 0) {
    operator delete((void *)__p);
  }
  if (v235) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v235);
  }
  vp::vx::Voice_Processor::get_configuration_options((uint64_t)v1, 0, (uint64_t)v101);
  *(void *)&long long __p = &unk_1F14A5810;
  *((void *)&__p + 1) = 0;
  *((void *)&v209 + 1) = &__p;
  v99[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v112);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&__p, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::State((uint64_t)&v234, (uint64_t)&v220);
  vp::vx::data_flow::State<void>::~State(&v220);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::State((uint64_t)v100, (uint64_t)&v234);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v234);
  uint64_t v62 = *((void *)v1 + 70);
  v63 = operator new(0x20uLL);
  void *v63 = &unk_1F14A5858;
  v63[1] = v62;
  v63[2] = vp::vx::Downlink_Configuration_Delegate::calculate_voice_mix_dsp_block_size;
  v63[3] = 0;
  *((void *)&v209 + 1) = v63;
  vp::vx::Voice_Processor_State_Manager::create_state<std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)> const&,double,double,unsigned int,BOOL,double,unsigned int>((uint64_t)v1 + 16, (uint64_t)&__p, (vp::vx::data_flow::State_Transaction *)v111, (vp::vx::data_flow::State_Transaction *)v108, (vp::vx::data_flow::State_Transaction *)v203, (vp::vx::data_flow::State_Transaction *)v238, (vp::vx::data_flow::State_Transaction *)v147, (vp::vx::data_flow::State_Transaction *)v149, (uint64_t)&v234);
  std::string::basic_string[abi:ne180100]<0>(v97, "voice");
  long long v220 = *(_OWORD *)v97;
  uint64_t v221 = v98;
  v97[1] = 0;
  uint64_t v98 = 0;
  v97[0] = 0;
  LODWORD(v222) = 1;
  if (SHIBYTE(v221) < 0) {
    operator delete((void *)v220);
  }
  if (SHIBYTE(v98) < 0) {
    operator delete(v97[0]);
  }
  vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>((std::__fs::filesystem::path *)v1, 0, (uint64_t *)&v95);
  char v64 = v95;
  if (!v95)
  {
    uint64_t v84 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v84);
  }
  std::string::basic_string[abi:ne180100]<0>(&v220, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v94, (uint64_t)v112);
  vp::vx::DSP_Node_Factory::set_input_format(v64, (uint64_t)&v220, (uint64_t)v94);
  vp::vx::data_flow::State<void>::~State((uint64_t)v94);
  if (SHIBYTE(v221) < 0) {
    operator delete((void *)v220);
  }
  uint64_t v65 = v95;
  std::string::basic_string[abi:ne180100]<0>(&v220, "voice");
  vp::vx::data_flow::State<void>::State((uint64_t)v93, (uint64_t)v92);
  vp::vx::DSP_Node_Factory::set_output_format(v65, (uint64_t)&v220, (uint64_t)v93);
  vp::vx::data_flow::State<void>::~State((uint64_t)v93);
  vp::vx::data_flow::State<void>::~State((uint64_t)v92);
  if (SHIBYTE(v221) < 0) {
    operator delete((void *)v220);
  }
  if (v96) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v96);
  }
  uint64_t v66 = *((void *)v1 + 70);
  v67 = operator new(0x20uLL);
  void *v67 = &unk_1F14A5858;
  v67[1] = v66;
  v67[2] = vp::vx::Downlink_Configuration_Delegate::calculate_voice_proc_block_size;
  v67[3] = 0;
  v222 = v67;
  vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)6,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>((uint64_t)v1, (uint64_t)&v220, (vp::vx::data_flow::State_Transaction *)v111, (vp::vx::data_flow::State_Transaction *)v108, (vp::vx::data_flow::State_Transaction *)v203, (vp::vx::data_flow::State_Transaction *)v238, (vp::vx::data_flow::State_Transaction *)v147, (vp::vx::data_flow::State_Transaction *)v149, (uint64_t)v92);
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](&v220);
  vp::vx::Voice_Processor::create_far_end_voice_proc_node_factory(v1, &v220);
  uint64_t v68 = v220;
  if (!(void)v220)
  {
    uint64_t v85 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v85);
  }
  vp::vx::data_flow::State<void>::State((uint64_t)&v91, (uint64_t)v113);
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_input_block(v68, (uint64_t)&v91);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v91);
  vp::vx::data_flow::State<void>::State((uint64_t)v90, (uint64_t)v92);
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_max_block_size(v68, (uint64_t)v90);
  vp::vx::data_flow::State<void>::~State((uint64_t)v90);
  vp::vx::data_flow::State<void>::State((uint64_t)v89, (uint64_t)v112);
  vp::vx::IO_Far_End_Voice_Proc_Node_Factory::set_format(v68, (uint64_t)v89);
  vp::vx::data_flow::State<void>::~State((uint64_t)v89);
  if (*((void *)&v220 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v220 + 1));
  }
  vp::vx::Voice_Processor::create_wire_factory(v1, 1, &v87);
  if (v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v88);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v92);
  vp::vx::data_flow::State<void>::~State((uint64_t)v99);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v234);
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](&__p);
  vp::vx::data_flow::State<void>::~State((uint64_t)v100);
  vp::vx::data_flow::State<void>::~State((uint64_t)v101);
  vp::vx::data_flow::State<void>::~State((uint64_t)v202);
  vp::vx::data_flow::State<void>::~State((uint64_t)v201);
  vp::vx::data_flow::State<void>::~State((uint64_t)v238);
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100](&v228);
  vp::vx::data_flow::State<void>::~State((uint64_t)v203);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&v204);
  vp::vx::data_flow::State<void>::~State((uint64_t)v108);
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](v207);
  vp::vx::data_flow::State<void>::~State((uint64_t)v109);
  vp::vx::data_flow::State<void>::~State((uint64_t)v110);
  vp::vx::data_flow::State<void>::~State((uint64_t)v111);
  vp::vx::data_flow::State<void>::~State((uint64_t)v112);
  vp::vx::data_flow::State<void>::~State((uint64_t)v113);
  vp::vx::data_flow::State<void>::~State((uint64_t)v123);
  vp::vx::data_flow::State<void>::~State((uint64_t)v124);
  vp::vx::data_flow::State<void>::~State((uint64_t)v127);
  vp::vx::data_flow::State<void>::~State((uint64_t)v130);
  vp::vx::data_flow::State<void>::~State((uint64_t)v131);
  vp::vx::data_flow::State<void>::~State((uint64_t)v132);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](v213);
  vp::vx::data_flow::State<void>::~State((uint64_t)v133);
  vp::vx::data_flow::State<void>::~State((uint64_t)v142);
  vp::vx::data_flow::State<void>::~State((uint64_t)v143);
  vp::vx::data_flow::State<void>::~State((uint64_t)v146);
  vp::vx::data_flow::State<void>::~State((uint64_t)v147);
  vp::vx::data_flow::State<void>::~State((uint64_t)v148);
  vp::vx::data_flow::State<void>::~State((uint64_t)v149);
  vp::vx::data_flow::State<void>::~State((uint64_t)v150);
  vp::vx::data_flow::State<void>::~State((uint64_t)v155);
  vp::vx::data_flow::State<void>::~State((uint64_t)v158);
  vp::vx::data_flow::State<void>::~State((uint64_t)v159);
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](&v214);
  vp::vx::data_flow::State<void>::~State((uint64_t)v160);
  vp::vx::data_flow::State<void>::~State((uint64_t)v165);
  vp::vx::data_flow::State<void>::~State((uint64_t)v166);
  vp::vx::data_flow::State<void>::~State((uint64_t)v167);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](v226);
  vp::vx::data_flow::State<void>::~State((uint64_t)v168);
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](v227);
  vp::vx::data_flow::State<void>::~State((uint64_t)v169);
  vp::vx::data_flow::State<void>::~State((uint64_t)v176);
  vp::vx::data_flow::State<void>::~State((uint64_t)v177);
  vp::vx::data_flow::State<void>::~State((uint64_t)v187);
  vp::vx::data_flow::State<void>::~State((uint64_t)v188);
  vp::vx::data_flow::State<void>::~State((uint64_t)v189);
  vp::vx::data_flow::State<void>::~State((uint64_t)v190);
  vp::vx::data_flow::State<void>::~State((uint64_t)v191);
  vp::vx::data_flow::State<void>::~State((uint64_t)v192);
  vp::vx::data_flow::State<void>::~State((uint64_t)v193);
  vp::vx::data_flow::State<void>::~State((uint64_t)v194);
  vp::vx::data_flow::State<void>::~State((uint64_t)v195);
  vp::vx::data_flow::State<void>::~State((uint64_t)v196);
  vp::vx::data_flow::State<void>::~State((uint64_t)v197);
  vp::vx::data_flow::State<void>::~State((uint64_t)v198);
  vp::vx::data_flow::State<void>::~State((uint64_t)v199);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v200);
}

void sub_1BB277824(_Unwind_Exception *a1)
{
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x2F0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x308]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x338]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x368]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x380]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x398]);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](&STACK[0xAB0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x3B0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x488]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x4A0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x4D0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x4E8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x500]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x518]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x530]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x588]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x5D0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x5E8]);
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](&STACK[0xAD0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x600]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x678]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x690]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x6A8]);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](&STACK[0xB28]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x6C0]);
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100]((void *)(v1 - 248));
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x6D8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x780]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x798]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x888]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x8A0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x8B8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x8D0]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x8E8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x900]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x918]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x930]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x948]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x960]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x978]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x990]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x9A8]);
  vp::vx::data_flow::State<void>::~State((uint64_t)&STACK[0x9C0]);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIdRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 + 48;
  v8[0] = &unk_1F14A4F58;
  v8[1] = 0;
  void v8[3] = v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIjRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKS5_E_JN2CA17StreamDescriptionEEEES6_OS8_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 + 48;
  v8[0] = &unk_1F14A4FA0;
  v8[1] = 28;
  void v8[3] = v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>(std::__fs::filesystem::path *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  data = (std::__shared_weak_count *)a1[31].__pn_.__r_.__value_.__l.__data_;
  if (!data
    || (std::string::size_type size = a1[30].__pn_.__r_.__value_.__l.__size_,
        atomic_fetch_add_explicit(&data->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add_explicit(&data->__shared_weak_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](data),
        (uint64_t v8 = std::__shared_weak_count::lock(data)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  if (size) {
    std::string::size_type v10 = size + 256;
  }
  else {
    std::string::size_type v10 = 0;
  }
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  std::__shared_weak_count::__release_weak(data);
  std::string::size_type v12 = a1[23].__pn_.__r_.__value_.__r.__words[2];
  std::string::size_type v28 = v10;
  __int16 v29 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  vp::vx::Voice_Processor::make_weak_state_observer((vp::vx::Voice_Processor *)a1, &v26);
  (*(void (**)(void *__return_ptr, std::string::size_type, void, std::string::size_type *, uint64_t *))(*(void *)v12 + 16))(v31, v12, a2, &v28, &v26);
  uint64_t v13 = v31[0];
  *a3 = v31[0];
  if (v13) {
    operator new();
  }
  a3[1] = 0;
  v31[0] = 0;
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  vp::vx::Voice_Processor::get_block_size((uint64_t)a1, a2, (uint64_t)v25);
  vp::vx::DSP_Node_Factory::set_block_size(0, (uint64_t)v25);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
  vp::vx::Voice_Processor::get_block_size_is_fixed((uint64_t)a1, a2, (uint64_t)v24);
  vp::vx::DSP_Node_Factory::set_block_size_is_fixed(0, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  memset(v23, 0, sizeof(v23));
  vp::vx::data_flow::State<void>::State((uint64_t)v23);
  vp::vx::DSP_Node_Factory::set_fft_block_size(0, (uint64_t)v23);
  vp::vx::data_flow::State<void>::~State((uint64_t)v23);
  vp::vx::Voice_Processor::get_sample_rate((uint64_t)a1, a2, (uint64_t)v22);
  vp::vx::DSP_Node_Factory::set_sample_rate(0, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State((uint64_t)v22);
  vp::vx::Voice_Processor::get_configuration((uint64_t)a1, a2, (uint64_t)v21);
  vp::vx::DSP_Node_Factory::set_configuration(0, (uint64_t)v21);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  vp::vx::DSP_Node_Factory::set_tuning_resources_path(0, a1 + 12);
  vp::vx::DSP_Node_Factory::set_temporary_directory_path(0, a1 + 13);
  vp::vx::Voice_Processor::get_uplink_SRC_algorithm((vp::vx::Voice_Processor *)a1, (uint64_t)v20);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(0, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  vp::vx::Voice_Processor::get_uplink_SRC_quality((vp::vx::Voice_Processor *)a1, (uint64_t)v19);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(0, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State((uint64_t)v19);
  vp::vx::Voice_Processor::get_should_enable_graph_audio_recorders((vp::vx::Voice_Processor *)a1, (uint64_t)v18);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(0, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)2>((uint64_t)&a1->__pn_.__r_.__value_.__l.__size_, (uint64_t)v17);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(0, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  vp::vx::Voice_Processor::get_should_connect_to_AUPB((vp::vx::Voice_Processor *)a1, (uint64_t)v16);
  vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(0, (uint64_t)v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  vp::vx::Voice_Processor::get_should_connect_to_RPB((vp::vx::Voice_Processor *)a1, (uint64_t)v15);
  vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(0, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  uint64_t v14 = a2;
  uint64_t v30 = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(&a1[62].__pn_.__r_.__value_.__r.__words[2], &v30, &v14, a3, (uint64_t)v31);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BB278488(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 96);
  *(void *)(v2 - 96) = 0;
  if (v4) {
    vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>();
  }
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v2 - 128);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 - 112);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN2CA17StreamDescriptionERDoFS4_djEJdjEEEDaOT0_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, vp::vx::data_flow::State_Transaction *a4@<X3>, uint64_t a5@<X8>)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2 + 48;
  v13[0] = &unk_1F14A5108;
  v13[1] = a3;
  v13[3] = v13;
  int id = vp::vx::data_flow::State_Transaction::get_id(this);
  int v12 = vp::vx::data_flow::State_Transaction::get_id(a4);
  vp::vx::data_flow::State_Manager::create_state(v7, (uint64_t)v13, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State(v10);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v13);
  vp::vx::data_flow::State<void>::State(a5, (uint64_t)v9);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

double vp::vx::anonymous namespace'::make_pcm_float32_format@<D0>(vp::vx::_anonymous_namespace_ *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  *(double *)a3 = a2;
  *(_OWORD *)(a3 + 8) = xmmword_1BB8727B0;
  *(_DWORD *)(a3 + 24) = 4;
  *(_DWORD *)(a3 + 28) = this;
  *(void *)&double result = 32;
  *(void *)(a3 + 32) = 32;
  return result;
}

uint64_t vp::vx::Uplink_Configuration_Delegate::calculate_echo_dsp_sample_rate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t vp::vx::Uplink_Configuration_Delegate::calculate_echo_dsp_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void *_ZZN2vp2vx12_GLOBAL__N_121make_bind_back_lambdaIRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdRKNS_7utility18Quantization_TableIjEEEEEJSA_EEEDaOT_DpRKT0_ENUlDpOT_E_D1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIN2CA17StreamDescriptionERDoFS4_dEJdEEEDaOT0_DpRKNS0_9data_flow5StateIT1_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2 + 48;
  v9[0] = &unk_1F14A52B8;
  v9[1] = a3;
  void v9[3] = v9;
  v7[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v5, (uint64_t)v9, (uint64_t)v8);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State(v8);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v9);
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

double vp::vx::anonymous namespace'::make_mono_pcm_float32_format@<D0>(double a1@<D0>, uint64_t a2@<X8>)
{
  *(double *)a2 = a1;
  *(_OWORD *)(a2 + 8) = xmmword_1BB8727B0;
  *(void *)&double result = 0x100000004;
  *(_OWORD *)(a2 + 24) = xmmword_1BB8727C0;
  return result;
}

uint64_t vp::vx::Uplink_Configuration_Delegate::calculate_content_dsp_max_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double)> const&,double,unsigned int,double>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 48;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS1_13State_ManagerET_DpRKNSG_IT0_EE((uint64_t)v12, v10, (uint64_t)v13, a3, a4, a5);
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](v13);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)5,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>, vp::vx::data_flow::State_Transaction *a10, vp::vx::data_flow::State_Transaction *a11)
{
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>(a1 + 16, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v14, a10, a11);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)5>(a1, (uint64_t)v14);
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

void sub_1BB2788AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Uplink_Configuration_Delegate::calculate_output_max_block_size_with_safety_margin(vp::vx::Uplink_Configuration_Delegate *this, double a2, double a3, double a4)
{
  return ((double)(*(unsigned int (**)(vp::vx::Uplink_Configuration_Delegate *, double, double, double))(*(void *)this + 48))(this, a2, a3, a4)* 1.25);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,vp::vx::anonymous namespace'::make_input_channel_count_override_getter_lambda(std::string,unsigned int)::$_0,vp::vx::DSP_Node_Configuration_Options>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD v17[4] = *MEMORY[0x1E4F143B8];
  *(void *)&v15[7] = *(uint64_t *)((char *)a2 + 15);
  uint64_t v8 = *a2;
  *(void *)uint64_t v15 = a2[1];
  uint64_t v7 = *(void *)v15;
  char v9 = *((unsigned char *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int v10 = *((_DWORD *)a2 + 6);
  v16[0] = v7;
  *(void *)((char *)v16 + 7) = *(void *)&v15[7];
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = &unk_1F14A5420;
  v11[1] = v8;
  void v11[2] = v16[0];
  *(void *)((char *)v11 + 23) = *(void *)((char *)v16 + 7);
  *((unsigned char *)v11 + 31) = v9;
  *((_DWORD *)v11 + 8) = v10;
  v17[3] = v11;
  v13[7] = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v17, (uint64_t)v14);
  vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v14);
  vp::vx::data_flow::State<void>::~State(v14);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v17);
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v13);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v13);
}

void sub_1BB278A38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Downlink_DSP_Node_ID>(std::__fs::filesystem::path *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  data = (std::__shared_weak_count *)a1[31].__pn_.__r_.__value_.__l.__data_;
  if (!data
    || (std::string::size_type size = a1[30].__pn_.__r_.__value_.__l.__size_,
        atomic_fetch_add_explicit(&data->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add_explicit(&data->__shared_weak_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](data),
        (uint64_t v8 = std::__shared_weak_count::lock(data)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  if (size) {
    std::string::size_type v10 = size + 256;
  }
  else {
    std::string::size_type v10 = 0;
  }
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  std::__shared_weak_count::__release_weak(data);
  std::string::size_type v12 = a1[23].__pn_.__r_.__value_.__r.__words[2];
  std::string::size_type v28 = v10;
  __int16 v29 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  vp::vx::Voice_Processor::make_weak_state_observer((vp::vx::Voice_Processor *)a1, &v26);
  (*(void (**)(void *__return_ptr, std::string::size_type, uint64_t, std::string::size_type *, uint64_t *))(*(void *)v12 + 16))(v31, v12, a2 | 0x100000000, &v28, &v26);
  uint64_t v13 = v31[0];
  *a3 = v31[0];
  if (v13) {
    operator new();
  }
  a3[1] = 0;
  v31[0] = 0;
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  vp::vx::Voice_Processor::get_block_size((uint64_t)a1, a2, (uint64_t)v25);
  vp::vx::DSP_Node_Factory::set_block_size(0, (uint64_t)v25);
  vp::vx::data_flow::State<void>::~State((uint64_t)v25);
  vp::vx::Voice_Processor::get_block_size_is_fixed((uint64_t)a1, a2, (uint64_t)v24);
  vp::vx::DSP_Node_Factory::set_block_size_is_fixed(0, (uint64_t)v24);
  vp::vx::data_flow::State<void>::~State((uint64_t)v24);
  vp::vx::Voice_Processor::get_fft_block_size((uint64_t)a1, a2, v23);
  vp::vx::DSP_Node_Factory::set_fft_block_size(0, (uint64_t)v23);
  vp::vx::data_flow::State<void>::~State((uint64_t)v23);
  vp::vx::Voice_Processor::get_sample_rate((uint64_t)a1, a2, (uint64_t)v22);
  vp::vx::DSP_Node_Factory::set_sample_rate(0, (uint64_t)v22);
  vp::vx::data_flow::State<void>::~State((uint64_t)v22);
  vp::vx::Voice_Processor::get_configuration((uint64_t)a1, a2, (uint64_t)v21);
  vp::vx::DSP_Node_Factory::set_configuration(0, (uint64_t)v21);
  vp::vx::data_flow::State<void>::~State((uint64_t)v21);
  vp::vx::DSP_Node_Factory::set_tuning_resources_path(0, a1 + 12);
  vp::vx::DSP_Node_Factory::set_temporary_directory_path(0, a1 + 13);
  vp::vx::Voice_Processor::get_downlink_SRC_algorithm((vp::vx::Voice_Processor *)a1, (uint64_t)v20);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_algorithm(0, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State((uint64_t)v20);
  vp::vx::Voice_Processor::get_downlink_SRC_quality((vp::vx::Voice_Processor *)a1, (uint64_t)v19);
  vp::vx::DSP_Node_Factory::set_sample_rate_conversion_quality(0, (uint64_t)v19);
  vp::vx::data_flow::State<void>::~State((uint64_t)v19);
  vp::vx::Voice_Processor::get_should_enable_graph_audio_recorders((vp::vx::Voice_Processor *)a1, (uint64_t)v18);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders(0, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State((uint64_t)v18);
  vp::vx::Voice_Processor_State_Owner::get_user_defaults_state<(vp::vx::User_Defaults_Key)2>((uint64_t)&a1->__pn_.__r_.__value_.__l.__size_, (uint64_t)v17);
  vp::vx::DSP_Node_Factory::set_should_enable_audio_recorders_predicate(0, (uint64_t)v17);
  vp::vx::data_flow::State<void>::~State((uint64_t)v17);
  vp::vx::Voice_Processor::get_should_connect_to_AUPB((vp::vx::Voice_Processor *)a1, (uint64_t)v16);
  vp::vx::DSP_Node_Factory::set_should_connect_to_AUPB(0, (uint64_t)v16);
  vp::vx::data_flow::State<void>::~State((uint64_t)v16);
  vp::vx::Voice_Processor::get_should_connect_to_RPB((vp::vx::Voice_Processor *)a1, (uint64_t)v15);
  vp::vx::DSP_Node_Factory::set_should_connect_to_RPB(0, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State((uint64_t)v15);
  uint64_t v14 = a2 | 0x100000000;
  uint64_t v30 = 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(&a1[62].__pn_.__r_.__value_.__r.__words[2], &v30, &v14, a3, (uint64_t)v31);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BB278D78(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 96);
  *(void *)(v2 - 96) = 0;
  if (v4) {
    vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>();
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 - 128);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 - 112);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Downlink_Configuration_Delegate::calculate_dynamics_dsp_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, uint64_t a6@<X8>)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 48;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEEERNS1_13State_ManagerET_DpRKNSJ_IT0_EE((uint64_t)v12, v10, (uint64_t)v13, a3, a4, a5);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](v13);
  vp::vx::data_flow::State<void>::State(a6, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,vp::vx::anonymous namespace'::make_output_channel_count_override_getter_lambda(std::string,unsigned int)::$_0,vp::vx::DSP_Node_Configuration_Options>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD v17[4] = *MEMORY[0x1E4F143B8];
  *(void *)&v15[7] = *(uint64_t *)((char *)a2 + 15);
  uint64_t v8 = *a2;
  *(void *)uint64_t v15 = a2[1];
  uint64_t v7 = *(void *)v15;
  char v9 = *((unsigned char *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int v10 = *((_DWORD *)a2 + 6);
  v16[0] = v7;
  *(void *)((char *)v16 + 7) = *(void *)&v15[7];
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = &unk_1F14A5540;
  v11[1] = v8;
  void v11[2] = v16[0];
  *(void *)((char *)v11 + 23) = *(void *)((char *)v16 + 7);
  *((unsigned char *)v11 + 31) = v9;
  *((_DWORD *)v11 + 8) = v10;
  v17[3] = v11;
  v13[7] = vp::vx::data_flow::State_Transaction::get_id(a3);
  vp::vx::data_flow::State_Manager::create_state(a1 + 48, (uint64_t)v17, (uint64_t)v14);
  vp::vx::data_flow::State<void>::State((uint64_t)v13, (uint64_t)v14);
  vp::vx::data_flow::State<void>::~State(v14);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v17);
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v13);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v13);
}

void sub_1BB278FE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t vp::vx::Downlink_Configuration_Delegate::calculate_voice_dsp_sample_rate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t vp::vx::Downlink_Configuration_Delegate::calculate_voice_dsp_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void *_ZZN2vp2vx12_GLOBAL__N_121make_bind_back_lambdaIRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEddjRKNS_7utility18Quantization_TableIjEEEEEJSA_EEEDaOT_DpRKT0_ENUlDpOT_E_D1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](a1);
}

uint64_t vp::vx::Downlink_Configuration_Delegate::calculate_voice_dsp_block_size_is_fixed(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)> const&,vp::vx::DSP_Node_Configuration_Options,double,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, uint64_t a7@<X8>)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1 + 48;
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v15, a2);
  _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEEERNS1_13State_ManagerESH_SO_((uint64_t)v14, v12, (uint64_t)v15, a3, a4, a5, a6);
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100](v15);
  vp::vx::data_flow::State<void>::State(a7, (uint64_t)v14);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v14);
}

uint64_t vp::vx::Downlink_Configuration_Delegate::calculate_voice_mix_dsp_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)> const&,double,double,unsigned int,BOOL,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a1 + 48;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v19, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerESE_SL_((uint64_t)v18, v16, (uint64_t)v19, a3, a4, a5, a6, a7, a8);
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](v19);
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v18);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v18);
}

uint64_t vp::vx::Voice_Processor::create_property_state<(vp::vx::Property_ID)6,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>)
{
  vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>(a1 + 16, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v12);
  vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)6>(a1, (uint64_t)v12);
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v12);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v12);
}

void sub_1BB2792A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::Downlink_Configuration_Delegate::calculate_voice_proc_block_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A4F10;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1D_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A4F10;
  a2[1] = v2;
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS_8optionalIdEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_ZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES7_EEDaMT_T0_EUlRKSE_E_JSE_EEESF_OSH_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSE_EEERNS4_13State_ManagerESG_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (uint64_t *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v7);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<std::optional<double>>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v5;
  result[1] = v6;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A4F58;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEPNS0_6__baseIS1F_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A4F58;
  a2[1] = v2;
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EEclEOS1A_OS1B_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  double result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A4FA0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEPNS0_6__baseIS1F_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A4FA0;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptionjEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSN_EEERNS4_13State_ManagerESE_DpRKNSP_IT0_EEEUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EEclEOS1A_OS1B_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A4FE8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A4FE8;
  a2[1] = v2;
  return result;
}

unsigned int *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljjE_JjjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v6 = (unsigned int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  unsigned int v8 = *v6;
  unsigned int v9 = *(_DWORD *)v7;
  if (v8 != *(_DWORD *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v12 = v22;
      uint64_t v13 = __p[1];
      uint64_t v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        uint64_t v16 = (void **)__p[0];
        if ((v22 & 0x80u) == 0) {
          uint64_t v16 = __p;
        }
        if (v15) {
          uint64_t v17 = " ";
        }
        else {
          uint64_t v17 = "";
        }
        *(_DWORD *)buf = 136315394;
        int v24 = v16;
        __int16 v25 = 2080;
        uint64_t v26 = v17;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference sample rates must be equal", buf, 0x16u);
      }
      if ((char)v22 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v8 <= v9) {
    unsigned int v18 = v9;
  }
  else {
    unsigned int v18 = v8;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)int v4 = std::pmr::get_default_resource(v19);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  double result = (unsigned int *)vp::vx::data_flow::Value::allocate_storage(v4);
  unsigned int *result = v18;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5030;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A5030;
  a2[1] = v2;
  return result;
}

double *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlddE_JddEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (vp *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  double v8 = *v6;
  double v9 = *(double *)v7;
  if (*v6 != *(double *)v7)
  {
    log = vp::get_log(v7);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v12 = v21;
      uint64_t v13 = __p[1];
      uint64_t v14 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        if ((v12 & 0x80u) == 0) {
          unint64_t v15 = v12;
        }
        else {
          unint64_t v15 = (unint64_t)v13;
        }
        uint64_t v16 = (void **)__p[0];
        if ((v21 & 0x80u) == 0) {
          uint64_t v16 = __p;
        }
        if (v15) {
          uint64_t v17 = " ";
        }
        else {
          uint64_t v17 = "";
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v23 = v16;
        __int16 v24 = 2080;
        __int16 v25 = v17;
        _os_log_impl(&dword_1BB0CE000, v14, OS_LOG_TYPE_ERROR, "%s%smicrophone and reference block sizes must be equal", buf, 0x16u);
      }
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v8 < v9) {
    double v8 = v9;
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)int v4 = std::pmr::get_default_resource(v18);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  double result = (double *)vp::vx::data_flow::Value::allocate_storage(v4);
  double *result = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1F14A5078;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5078;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  int v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  uint64_t v6 = v3[1];
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ref");
  double v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v7 + 136), (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v9 = *((_DWORD *)v8 + 10);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)int v4 = std::pmr::get_default_resource(v10);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  double result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v4);
  _DWORD *result = v9;
  return result;
}

void sub_1BB279BB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void std::__shared_ptr_pointer<vp::vx::DSP_Node_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::DSP_Node_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(unsigned char *)(a5 + 8) = 0;
  uint64_t v23 = 0;
  if (*a2)
  {
    uint64_t v22 = *a2;
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v22, (uint64_t)a3, (uint64_t *)&v23);
  }
  else
  {
    uint64_t v10 = a1[1];
    uint64_t v11 = a1[2];
    uint64_t v25 = v10;
    if (v10) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v11 == 0;
    }
    if (!v12) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    uint64_t v24 = v10 + 24 * v11;
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v25, &v24, (uint64_t)a3, (uint64_t *)&v23);
  }
  *(unsigned char *)(a5 + 8) = inserted;
  if (inserted)
  {
    unsigned __int8 v21 = v23;
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(a1, &v21, a3, a4, &v25);
    *(void *)a5 = v25;
  }
  else
  {
    uint64_t v13 = a1[1];
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v13) >> 3);
    if (a1[2] < v14) {
      __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
    }
    uint64_t v15 = v13 + 8 * (((uint64_t)v23 - v13) >> 3);
    *(void *)a5 = v15;
    uint64_t v16 = (void *)(v15 + 8);
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    void *v16 = v18;
    uint64_t v19 = v13 + 24 * v14;
    int64x2_t v20 = *(std::__shared_weak_count **)(v19 + 16);
    *(void *)(v19 + 16) = v17;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v11 = v5 + 24 * v4;
  uint64_t v12 = *a2;
  if (v12 != v11)
  {
    if (!v12) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(a3, v12) & 0x80) == 0)
    {
      uint64_t v13 = *a2;
      uint64_t v19 = v11;
      uint64_t v20 = v13;
      unint64_t v14 = &v20;
      uint64_t v15 = &v19;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
    }
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v11 = *a2;
  }
  *a4 = v11;
  uint64_t v17 = *a2;
  if (*a2 == v5) {
    return 1;
  }
  if (!v17) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  uint64_t v18 = v17 - 24;
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(v17 - 24, a3) & 0x80) != 0) {
    return 1;
  }
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(a3, v18) & 0x80) != 0)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v5;
    unint64_t v14 = &v22;
    uint64_t v15 = &v21;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
  }
  BOOL result = 0;
  *a4 = v18;
  return result;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>(void *a1@<X0>, void **a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  BOOL v6 = *a2;
  unint64_t v7 = a1[1];
  if (v7 > (unint64_t)v6) {
    goto LABEL_11;
  }
  unint64_t v9 = a1[2];
  if (v7) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)v6 > v7 + 24 * v9) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v11 = a1[3];
  if (v11 < v9) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v11 == v9)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(a1, (uint64_t)v6, (const char *)1, a4, a3, a5);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(a1, v6, 1, a4, a3);
    *a5 = *a2;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,true>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return (std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(a4, v9) & 0x80u) != 0;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,true>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 != *a1)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      uint64_t v9 = *a1;
      if (v8 != 1 && !v9) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v10 = v8 >> 1;
      uint64_t v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        unint64_t v10 = v8 + ~v10;
      }
      unint64_t v8 = v10;
    }
    while (v10);
    uint64_t v5 = *a1;
  }
  *a4 = v5;
}

uint64_t std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else if (v4 == -1)
  {
    return 1;
  }
  else
  {
    if (v3 < v4) {
      uint64_t result = 0xFFFFFFFFLL;
    }
    else {
      uint64_t result = 1;
    }
    if (v3 == v4)
    {
      char v7 = 0;
      unint64_t v8 = &v7;
      return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1F14A50E8[v3])(&v8, a1, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx18Uplink_DSP_Node_IDENSA_20Downlink_DSP_Node_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SF_E4typeEEE4typeERKNS_7variantIJDpSF_EEESP_EUlTyRKT_SS_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_EEES11_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 1;
  }
  if (*a2 == *a3) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx18Uplink_DSP_Node_IDENSA_20Downlink_DSP_Node_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SF_E4typeEEE4typeERKNS_7variantIJDpSF_EEESP_EUlTyRKT_SS_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_EEES11_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 1;
  }
  if (*a2 == *a3) {
    return 0;
  }
  else {
    return v3;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = a1[2];
  if (v5 == a1[3]) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v9 = a1[1];
  unint64_t v10 = (void *)(v9 + 24 * v5);
  if (v10 == a2)
  {
    *a2 = *a5;
    uint64_t v21 = v9 + 24 * v5;
    uint64_t v22 = a4[1];
    *(void *)(v21 + 8) = *a4;
    *(void *)(v21 + 16) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    ++a1[2];
  }
  else
  {
    uint64_t v11 = v10 - 3;
    uint64_t v12 = *(v10 - 3);
    *(_OWORD *)(v9 + 24 * v5 + 8) = *((_OWORD *)v10 - 1);
    *(v10 - 2) = 0;
    *(v10 - 1) = 0;
    *unint64_t v10 = v12;
    ++a1[2];
    if (v10 - 3 != a2)
    {
      uint64_t v13 = v10 - 3;
      do
      {
        uint64_t v14 = *(v13 - 3);
        v13 -= 3;
        long long v15 = *((_OWORD *)v11 - 1);
        *(v11 - 2) = 0;
        *(v11 - 1) = 0;
        *uint64_t v11 = v14;
        uint64_t v16 = (std::__shared_weak_count *)v11[2];
        *(_OWORD *)(v11 + 1) = v15;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        uint64_t v11 = v13;
      }
      while (v13 != a2);
    }
    uint64_t v17 = *a5;
    uint64_t v19 = *a4;
    uint64_t v18 = a4[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *a2 = v17;
    a2[1] = v19;
    uint64_t v20 = (std::__shared_weak_count *)a2[2];
    a2[2] = v18;
    if (v20)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = a1[1];
  unint64_t v13 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v13 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v14);
  }
  uint64_t v15 = v13;
  uint64_t v16 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v13);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(a1, v16, v15, a2, (uint64_t)a3, a4, a5);
  *a6 = a1[1] + a2 - v12;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v11 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>((uint64_t)a1, v11, a4, v11 + 24 * a1[2], a2, a5, a6, a7);
  if (v11)
  {
    uint64_t v12 = a1[2];
    if (v12)
    {
      unint64_t v13 = (std::__shared_weak_count **)(v11 + 16);
      do
      {
        if (*v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v13);
        }
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v14 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v14;
  a1[3] = a3;
}

void sub_1BB27A524(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v8 = a5;
  if (a2 != a3)
  {
    uint64_t v8 = a5;
    do
    {
      *(void *)uint64_t v8 = *(void *)a2;
      __n128 result = *(__n128 *)(a2 + 8);
      *(__n128 *)(v8 + 8) = result;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v8 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("priv_uninitialized_copy_some_and_update", "advanced_insert_int.hpp", 265, "n == 1");
  }
  *(void *)uint64_t v8 = *a8;
  uint64_t v10 = a7[1];
  *(void *)(v8 + 8) = *a7;
  *(void *)(v8 + 16) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (a3 != a4)
  {
    uint64_t v11 = (__n128 *)(v8 + 32);
    do
    {
      v11[-1].n128_u64[1] = *(void *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *uint64_t v11 = result;
      uint64_t v11 = (__n128 *)((char *)v11 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5108;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A5108;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_djEJdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  *(void *)&double result = _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_djEJdjEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_((uint64_t (**)(uint64_t, __n128))(a1 + 8), a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_djEJdjEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_(uint64_t (**a1)(uint64_t, __n128), vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  _ZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS4_RDoFS4_djEJdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjEJLm0ELm1EEEEDaRKT_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v4);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v3);
  __n128 result = v8;
  *(_OWORD *)uint64_t storage = v7;
  *(__n128 *)(storage + 16) = v8;
  *(void *)(storage + 32) = v9;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIS4_RDoFS4_djEJdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjEJLm0ELm1EEEEDaRKT_PPKNS1_5ValueENSt3__116integer_sequenceImJXspT1_EEEE(uint64_t (**a1)(uint64_t, __n128), vp::vx::data_flow::Value **a2)
{
  if (*((uint64_t (****)())*a2 + 2) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unsigned int v4 = (unint64_t *)vp::vx::data_flow::Value::view_storage(*a2);
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t v5 = (unsigned int *)vp::vx::data_flow::Value::view_storage(a2[1]);
  BOOL v6 = *a1;
  v7.n128_u64[0] = *v4;
  uint64_t v8 = *v5;

  return v6(v8, v7);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A5150;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5150;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSC_SE_EEUlbdjS8_ddSA_E_NS_9allocatorISK_EEFdbdjS8_ddSA_EEclEObOdOjS8_SQ_SQ_OSA_(uint64_t a1, unsigned __int8 *a2, unint64_t *a3, unsigned int *a4, uint64_t a5, unint64_t *a6, unint64_t *a7, void *a8, __n128 a9, __n128 a10, __n128 a11)
{
  return _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS4_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFSD_SF_EEUlbdjS9_ddSB_E_bdjS9_ddSB_EEEdDpOT_((void *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbdjRKNS4_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFSD_SF_EEUlbdjS9_ddSB_E_bdjS9_ddSB_EEEdDpOT_(void *a1, unsigned __int8 *a2, unint64_t *a3, unsigned int *a4, uint64_t a5, unint64_t *a6, unint64_t *a7, void *a8, __n128 a9, __n128 a10, __n128 a11)
{
  a11.n128_u64[0] = *a7;
  uint64_t v11 = (uint64_t (*)(void *, BOOL, void, uint64_t, void, void, __n128, __n128, __n128))a1[1];
  uint64_t v12 = a1[2];
  unint64_t v13 = (void *)(*a1 + (v12 >> 1));
  if (v12) {
    uint64_t v11 = *(uint64_t (**)(void *, BOOL, void, uint64_t, void, void, __n128, __n128, __n128))(*v13 + v11);
  }
  a9.n128_u64[0] = *a3;
  a10.n128_u64[0] = *a6;
  return v11(v13, *a2 != 0, *a4, a5, *a8, a8[1], a9, a10, a11);
}

uint64_t std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A5198;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A5198;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &unk_1F14A5198;
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_1BB27AA70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5198;
  uint64_t result = std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbdjRKNS3_30DSP_Node_Configuration_OptionsEddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JdjSD_ddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JdjSD_ddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EEclEOS1B_OS1C_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  BOOL v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    __n128 v7 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    __n128 v7 = 0;
  }
  uint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v9 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v11 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    unint64_t v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = v4[4];
  if (v14[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v15 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[5]);
  std::function<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::operator()(a1 + 8, *(unsigned char *)(a1 + 40), *v9, v11, *v16, v16[1], *v7, *v13, *v15);
  uint64_t v18 = v17;
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)uint64_t v5 = std::pmr::get_default_resource(v19);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v5);
  void *result = v18;
  return result;
}

uint64_t std::function<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::operator()(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  v16[0] = a5;
  v16[1] = a6;
  char v15 = a2;
  double v14 = a7;
  int v13 = a3;
  double v11 = a9;
  double v12 = a8;
  uint64_t v9 = *(void *)(a1 + 24);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *, double *, int *, uint64_t, double *, double *, void *))(*(void *)v9 + 48))(v9, &v15, &v14, &v13, a4, &v12, &v11, v16);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A51E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EE7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A51E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFSF_SH_EEUlS8_dSD_E_NS_9allocatorISN_EEFjS8_dSD_EEclES8_OdSD_(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, __n128 a5)
{
  uint64_t v5 = (uint64_t (*)(void *, uint64_t, uint64_t, __n128))a1[2];
  uint64_t v6 = a1[3];
  __n128 v7 = (void *)(a1[1] + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(*v7 + v5);
  }
  a5.n128_u64[0] = *a3;
  return v5(v7, a2, a4, a5);
}

uint64_t std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A5228;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A5228;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_1F14A5228;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEdRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_dEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_dEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27B028(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEPNS0_6__baseIS1J_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5228;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEdRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_dEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_dEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyEv(uint64_t a1)
{
  return _ZZN2vp2vx12_GLOBAL__N_121make_bind_back_lambdaIRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdRKNS_7utility18Quantization_TableIjEEEEEJSA_EEEDaOT_DpRKT0_ENUlDpOT_E_D1Ev((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE18destroy_deallocateEv(void *a1)
{
  _ZZN2vp2vx12_GLOBAL__N_121make_bind_back_lambdaIRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdRKNS_7utility18Quantization_TableIjEEEEEJSA_EEEDaOT_DpRKT0_ENUlDpOT_E_D1Ev(a1 + 1);

  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_dEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_dEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EEclEOS1E_OS1F_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[1]);
  int v9 = std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::operator()(a1 + 8, v7, a1 + 40, *v8);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)uint64_t v5 = std::pmr::get_default_resource(v10);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v9;
  return result;
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEdRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_dEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_dEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100](a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4 += 4;
  v4[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  return a1;
}

void sub_1BB27B19C(_Unwind_Exception *a1)
{
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, uint64_t))(*(void *)v4 + 48))(v4, a2, &v6, a3);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A5270;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EE7__cloneEPNS0_6__baseIS1A_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5270;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUljRKNS3_30DSP_Node_Configuration_OptionsEE0_JjSC_EEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JjSC_EEERNS4_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS4_5ValueEPS12_E_NS_9allocatorIS17_EEFvS15_S16_EEclEOS15_OS16_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  double v6 = v3[1];
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ref");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v7 + 96), (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v9 = *((_DWORD *)v8 + 10);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v10);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v4);
  _DWORD *result = v9;
  return result;
}

void sub_1BB27B428(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A52B8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EE7__cloneEPNS0_6__baseIS18_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A52B8;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIS7_RDoFS7_dEJdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdEEERNS4_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS4_5ValueEPS10_E_NS_9allocatorIS15_EEFvS13_S14_EEclEOS13_OS14_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  *(void *)&double result = _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_dEJdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_((void (**)(_OWORD *__return_ptr, double))(a1 + 8), a2, a3).n128_u64[0];
  return result;
}

__n128 _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS4_29Voice_Processor_State_Manager12create_stateIS8_RDoFS8_dEJdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdEEERNS5_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS5_5ValueEPS11_E_S14_S15_EEEvDpOSO_(void (**a1)(_OWORD *__return_ptr, double), vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = (double *)vp::vx::data_flow::Value::view_storage(**a2);
  (*a1)(v10, *v5);
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v6);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v4);
  uint64_t v8 = v11;
  __n128 result = (__n128)v10[1];
  *(_OWORD *)uint64_t storage = v10[0];
  *(__n128 *)(storage + 16) = result;
  *(void *)(storage + 32) = v8;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A5300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdE_NS_9allocatorISF_EEFjdjdEEclEOdOjSK_(uint64_t a1, unint64_t *a2, unsigned int *a3, unint64_t *a4, __n128 a5, __n128 a6)
{
  return _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFS8_SA_EEUldjdE_djdEEEjDpOT_((void *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJdjdEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFS8_SA_EEUldjdE_djdEEEjDpOT_(void *a1, unint64_t *a2, unsigned int *a3, unint64_t *a4, __n128 a5, __n128 a6)
{
  a5.n128_u64[0] = *a2;
  uint64_t v6 = *a3;
  a6.n128_u64[0] = *a4;
  uint64_t v7 = (uint64_t (*)(void *, uint64_t, double, double))a1[1];
  uint64_t v8 = a1[2];
  int v9 = (void *)(*a1 + (v8 >> 1));
  if (v8) {
    return (*(uint64_t (**)(__n128, __n128))(*v9 + v7))(a5, a6);
  }
  else {
    return v7(v9, v6, a5.n128_f64[0], a6.n128_f64[0]);
  }
}

uint64_t std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS1_13State_ManagerET_DpRKNSG_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  uint64_t v16 = 0;
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = &unk_1F14A5348;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v14);
  uint64_t v16 = v11;
  v13[7] = vp::vx::data_flow::State_Transaction::get_id(a4);
  _DWORD v13[8] = vp::vx::data_flow::State_Transaction::get_id(a5);
  v13[9] = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v15, (uint64_t)v13);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State(v13);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](v14);
  return a1;
}

void sub_1BB27B81C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A5348;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A5348;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A5348;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27B9A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5348;
  return std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS4_13State_ManagerET_DpRKNSI_IT0_EEEUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS5_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSP_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdEEERNS5_13State_ManagerET_DpRKNSJ_IT0_EEEUlPPKNS5_5ValueEPS12_E_S15_S16_EEEvDpOSP_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjdjdEEEJdjdEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v4 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 16));
  double v8 = *v4;
  int v9 = *v6;
  double v10 = *v7;

  return std::function<unsigned int ()(double,unsigned int,double)>::operator()(a1, v9, v8, v10);
}

uint64_t std::function<unsigned int ()(double,unsigned int,double)>::operator()(uint64_t a1, int a2, double a3, double a4)
{
  double v8 = a3;
  int v7 = a2;
  double v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, double *, int *, double *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>,double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>, vp::vx::data_flow::State_Transaction *a10, vp::vx::data_flow::State_Transaction *a11)
{
  _OWORD v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1 + 48;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)v21, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE((uint64_t)v20, v18, (uint64_t)v21, a3, a4, a5, a6, a7, a8, a10, a11);
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100](v21);
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v20);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v20);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)5>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 5u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB27BCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7, vp::vx::data_flow::State_Transaction *a8, vp::vx::data_flow::State_Transaction *a9, vp::vx::data_flow::State_Transaction *a10, vp::vx::data_flow::State_Transaction *a11)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)v29, a3);
  __int16 v31 = 0;
  uint64_t v17 = operator new(0x28uLL);
  void *v17 = &unk_1F14A5390;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)(v17 + 1), (uint64_t)v29);
  __int16 v31 = v17;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v22 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v23 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v24 = vp::vx::data_flow::State_Transaction::get_id(a7);
  int v25 = vp::vx::data_flow::State_Transaction::get_id(a8);
  int v26 = vp::vx::data_flow::State_Transaction::get_id(a9);
  int v27 = vp::vx::data_flow::State_Transaction::get_id(a10);
  int v28 = vp::vx::data_flow::State_Transaction::get_id(a11);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v30, (uint64_t)v20);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v20);
  vp::vx::data_flow::State<void>::~State(v20);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100](v29);
  return a1;
}

void sub_1BB27BEE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A5390;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A5390;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A5390;
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27BFF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5390;
  return std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS5_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOSN_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEEERNS5_13State_ManagerET_DpRKNSH_IT0_EEEUlPPKNS5_5ValueEPS10_E_S13_S14_EEEvDpOSN_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjdjdjbdjbEEEJdjdjbdjbEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JdjdjbdjbEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v4 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    double v6 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    double v6 = 0;
  }
  int v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    double v8 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    double v8 = 0;
  }
  int v9 = *(uint64_t (*****)())(a2 + 24);
  if (v9[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    double v10 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  }
  else {
    double v10 = 0;
  }
  uint64_t v11 = *(uint64_t (*****)())(a2 + 32);
  if (v11[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    double v12 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  }
  else {
    double v12 = 0;
  }
  char v13 = *(uint64_t (*****)())(a2 + 40);
  if (v13[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    double v14 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v13);
  }
  else {
    double v14 = 0;
  }
  char v15 = *(uint64_t (*****)())(a2 + 48);
  if (v15[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    uint64_t v16 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = (char *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 56));
  double v18 = *v4;
  int v19 = *v6;
  double v20 = *v8;
  int v21 = *v10;
  char v22 = *v12;
  double v23 = *v14;
  int v24 = *v16;
  char v25 = *v17;

  return std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::operator()(a1, v19, v21, v22, v24, v25, v18, v20, v23);
}

uint64_t std::function<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::operator()(uint64_t a1, int a2, int a3, char a4, int a5, char a6, double a7, double a8, double a9)
{
  double v18 = a7;
  int v17 = a2;
  double v16 = a8;
  int v15 = a3;
  char v14 = a4;
  double v13 = a9;
  int v12 = a5;
  char v11 = a6;
  uint64_t v9 = *(void *)(a1 + 24);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, double *, int *, double *, int *, char *, double *, int *, char *))(*(void *)v9 + 48))(v9, &v18, &v17, &v16, &v15, &v14, &v13, &v12, &v11);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A53D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A53D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS3_29Uplink_Configuration_DelegateEKDoFS7_S9_EEUldjdjbdjbE_NS_9allocatorISF_EEFjdjdjbdjbEEclEOdOjSK_SL_ObSK_SL_SM_(uint64_t a1, unint64_t *a2, unsigned int *a3, unint64_t *a4, unsigned int *a5, unsigned __int8 *a6, unint64_t *a7, unsigned int *a8, __n128 a9, __n128 a10, __n128 a11, unsigned __int8 *a12)
{
  return _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFS8_SA_EEUldjdjbdjbE_djdjbdjbEEEjDpOT_((void *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJdjdjbdjbEEENS_8functionIFT_DpT0_EEEMNS4_29Uplink_Configuration_DelegateEKDoFS8_SA_EEUldjdjbdjbE_djdjbdjbEEEjDpOT_(void *a1, unint64_t *a2, unsigned int *a3, unint64_t *a4, unsigned int *a5, unsigned __int8 *a6, unint64_t *a7, unsigned int *a8, __n128 a9, __n128 a10, __n128 a11, unsigned __int8 *a12)
{
  a11.n128_u64[0] = *a7;
  int v12 = (uint64_t (*)(void *, void, void, BOOL, void, BOOL, __n128, __n128, __n128))a1[1];
  uint64_t v13 = a1[2];
  char v14 = (void *)(*a1 + (v13 >> 1));
  if (v13) {
    int v12 = *(uint64_t (**)(void *, void, void, BOOL, void, BOOL, __n128, __n128, __n128))(*v14 + v12);
  }
  a10.n128_u64[0] = *a4;
  a9.n128_u64[0] = *a2;
  return v12(v14, *a3, *a5, *a6 != 0, *a8, *a12 != 0, a9, a10, a11);
}

void *std::__function::__value_func<unsigned int ()(double,unsigned int,double,unsigned int,BOOL,double,unsigned int,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14A5420;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14A5420;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F14A5420;
  uint64_t v3 = (std::string *)(v2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_1BB27C660(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1C_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5420;
  int v4 = (std::string *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7destroyEv(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE18destroy_deallocateEv(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_147make_input_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = (unsigned __int8 *)(a1 + 8);
  int v4 = *a3;
  long long v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v6 + 96), v3);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v8 = *((_DWORD *)v7 + 10);
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)int v4 = std::pmr::get_default_resource(v9);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v4);
  _DWORD *result = v8;
  return result;
}

void sub_1BB27C7E4(void *a1)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A5468;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5468;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

BOOL *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_RKT0_E_JNS3_16Output_Port_TypeENS3_22Downlink_ConfigurationEEEEDaOSC_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_SI_EEERNS4_13State_ManagerESC_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  int v4 = *a3;
  long long v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::Output_Port_Type>(void)::s_type_id) {
    uint64_t v6 = (_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(unsigned __int8 *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  BOOL v9 = *v6 == 7 && v7 != 0;
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)int v4 = std::pmr::get_default_resource(v10);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (BOOL *)vp::vx::data_flow::Value::allocate_storage(v4);
  BOOL *result = v9;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A54B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A54B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_djE_NS_9allocatorISI_EEFjS8_djEEclES8_OdOj(void *a1, uint64_t a2, unint64_t *a3, unsigned int *a4, __n128 a5)
{
  a5.n128_u64[0] = *a3;
  uint64_t v5 = *a4;
  uint64_t v6 = (uint64_t (*)(void *, uint64_t, uint64_t, double))a1[2];
  uint64_t v7 = a1[3];
  int v8 = (void *)(a1[1] + (v7 >> 1));
  if (v7) {
    return (*(uint64_t (**)(__n128))(*v8 + v6))(a5);
  }
  else {
    return v6(v8, a2, v5, a5.n128_f64[0]);
  }
}

uint64_t std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  int v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEEERNS1_13State_ManagerET_DpRKNSJ_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  double v16 = 0;
  char v11 = operator new(0x28uLL);
  *char v11 = &unk_1F14A54F8;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v14);
  double v16 = v11;
  v13[7] = vp::vx::data_flow::State_Transaction::get_id(a4);
  _DWORD v13[8] = vp::vx::data_flow::State_Transaction::get_id(a5);
  v13[9] = vp::vx::data_flow::State_Transaction::get_id(a6);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v15, (uint64_t)v13);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v13);
  vp::vx::data_flow::State<void>::~State(v13);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](v14);
  return a1;
}

void sub_1BB27CBC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A54F8;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A54F8;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A54F8;
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27CD50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE7__cloneEPNS0_6__baseIS1C_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A54F8;
  return std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEdjEEEJSB_djEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSB_djEEERNS4_13State_ManagerET_DpRKNSL_IT0_EEEUlPPKNS4_5ValueEPS14_E_NS_9allocatorIS19_EEFvS17_S18_EEclEOS17_OS18_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS4_30DSP_Node_Configuration_OptionsEdjEEEJSC_djEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JSC_djEEERNS5_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS5_5ValueEPS15_E_S18_S19_EEEvDpOSS_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIjRKNS_8functionIFjRKNS4_30DSP_Node_Configuration_OptionsEdjEEEJSC_djEEEDaOT0_DpRKNS5_5StateIT1_EEEUlDpRKT_E_JSC_djEEERNS5_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS5_5ValueEPS15_E_S18_S19_EEEvDpOSS_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIjRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEdjEEEJS9_djEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JS9_djEJLm0ELm1ELm2EEEEDaRKT_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v4 = vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 16));
  double v8 = *v6;
  int v9 = *v7;

  return std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::operator()(a1, v4, v9, v8);
}

uint64_t std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double v7 = a4;
  int v6 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, int *))(*(void *)v4 + 48))(v4, a2, &v7, &v6);
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14A5540;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1F14A5540;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C185D370);
}

char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F14A5540;
  uint64_t v3 = (std::string *)(v2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_1BB27D06C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1C_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5540;
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE7destroyEv(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EE18destroy_deallocateEv(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjZNS3_12_GLOBAL__N_148make_output_channel_count_override_getter_lambdaENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjE3__0JNS3_30DSP_Node_Configuration_OptionsEEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerET_DpRKNSM_IT0_EEEUlPPKNS4_5ValueEPS15_E_NSE_IS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = (unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *a3;
  long long v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  double v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v6 + 136), v3);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v8 = *((_DWORD *)v7 + 10);
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v9);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v4);
  _DWORD *result = v8;
  return result;
}

void sub_1BB27D1F0(void *a1)
{
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A5588;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5588;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  long long v5 = **a2;
  if (v5[2] == &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id) {
    uint64_t v6 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  double v7 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v3[1]);
  *(_OWORD *)int v12 = *(_OWORD *)v6;
  *(_OWORD *)&v12[16] = *(_OWORD *)(v6 + 16);
  *(void *)&v12[32] = *(void *)(v6 + 32);
  uint64_t v8 = *v7;
  vp::vx::data_flow::Value::~Value(v4);
  *(void *)uint64_t v4 = std::pmr::get_default_resource(v9);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v4);
  *(void *)uint64_t storage = v8;
  __n128 result = *(__n128 *)&v12[8];
  *(_OWORD *)(storage + 8) = *(_OWORD *)&v12[8];
  *(_OWORD *)(storage + 24) = *(_OWORD *)&v12[24];
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A55D0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EE7__cloneEPNS0_6__baseIS14_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A55D0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_T0_E0_JS7_dEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_dEEERNS4_13State_ManagerESE_SO_EUlPPKNS4_5ValueEPSW_E_NS_9allocatorIS11_EEFvSZ_S10_EEclEOSZ_OS10_(__n128 a1, uint64_t a2, uint64_t (******a3)(), vp::vx::data_flow::Value **a4)
{
  uint64_t v4 = *a3;
  long long v5 = *a4;
  uint64_t v6 = **a3;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id) {
    uint64_t v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  int v9 = *(_DWORD *)(v7 + 12);
  unsigned int v10 = *(_DWORD *)(v7 + 28);
  a1.n128_u64[0] = *(void *)(v7 + 32);
  __n128 v18 = a1;
  if ((v9 & 0x20) != 0)
  {
    unsigned int v11 = 1;
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v7 + 28);
    if (!v10)
    {
      unsigned __int32 v12 = (a1.n128_u32[0] + 7) >> 3;
      goto LABEL_11;
    }
  }
  unsigned __int32 v12 = *(_DWORD *)(v7 + 24) / v11;
LABEL_11:
  if (v10 >= 2) {
    int v13 = 2;
  }
  else {
    int v13 = *(_DWORD *)(v7 + 28);
  }
  int v14 = v9 | 0x20;
  uint64_t v19 = *(void *)v7;
  int v20 = *(_DWORD *)(v7 + 8);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)long long v5 = std::pmr::get_default_resource(v15);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v5);
  *(void *)uint64_t storage = v19;
  *(_DWORD *)(storage + 8) = v20;
  *(_DWORD *)(storage + 12) = v14;
  *(_DWORD *)(storage + 16) = v12;
  *(_DWORD *)(storage + 20) = 1;
  *(_DWORD *)(storage + 24) = v12;
  *(_DWORD *)(storage + 28) = v13;
  __n128 result = v18;
  *(void *)(storage + 32) = v18.n128_u64[0];
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A5618;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5618;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

__n128 _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN2CA17StreamDescriptionEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor27create_configuration_statesEvENK3__0clEvEUlT_E_JS7_EEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JS7_EEERNS4_13State_ManagerESE_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = vp::vx::data_flow::Value::view_storage(**a2);
  __n128 v8 = *(__n128 *)v4;
  long long v9 = *(_OWORD *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 32);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<CA::StreamDescription>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v3);
  __n128 result = v8;
  *(__n128 *)uint64_t storage = v8;
  *(_OWORD *)(storage + 16) = v9;
  *(void *)(storage + 32) = v10;
  return result;
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)50>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A5660;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5660;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSC_SE_EEUlbS8_dddSA_E_NS_9allocatorISK_EEFdbS8_dddSA_EEclEObS8_OdSQ_SQ_OSA_(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, void *a7, __n128 a8, __n128 a9, __n128 a10)
{
  return _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS4_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSD_SF_EEUlbS9_dddSB_E_bS9_dddSB_EEEdDpOT_((void *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIdLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIdJbRKNS4_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSD_SF_EEUlbS9_dddSB_E_bS9_dddSB_EEEdDpOT_(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, void *a7, __n128 a8, __n128 a9, __n128 a10)
{
  a10.n128_u64[0] = *a6;
  uint64_t v10 = (uint64_t (*)(void *, BOOL, uint64_t, void, void, __n128, __n128, __n128))a1[1];
  uint64_t v11 = a1[2];
  unsigned __int32 v12 = (void *)(*a1 + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, BOOL, uint64_t, void, void, __n128, __n128, __n128))(*v12 + v10);
  }
  a8.n128_u64[0] = *a4;
  a9.n128_u64[0] = *a5;
  return v10(v12, *a2 != 0, a3, *a7, a7[1], a8, a9, a10);
}

uint64_t std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A56A8;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A56A8;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &unk_1F14A56A8;
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100]((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_1BB27D934(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A56A8;
  uint64_t result = std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_122make_bind_front_lambdaIRKNS_8functionIFdbRKNS3_30DSP_Node_Configuration_OptionsEdddNS_8optionalIdEEEEEJbEEEDaOT_DpRKT0_EUlDpOT_E_JSD_dddSH_EEESM_SO_DpRKNS4_5StateISP_EEEUlDpRKST_E_JSD_dddSH_EEERNS4_13State_ManagerESN_S11_EUlPPKNS4_5ValueEPS18_E_NS_9allocatorIS1D_EEFvS1B_S1C_EEclEOS1B_OS1C_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  __n128 v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    long long v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    long long v9 = 0;
  }
  uint64_t v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned __int32 v12 = v4[3];
  if (v12[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v13 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v12);
  }
  else {
    int v13 = 0;
  }
  int v14 = (uint64_t *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[4]);
  std::function<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::operator()(a1 + 8, *(unsigned char *)(a1 + 40), v7, *v14, v14[1], *v9, *v11, *v13);
  uint64_t v16 = v15;
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)long long v5 = std::pmr::get_default_resource(v17);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  uint64_t result = (void *)vp::vx::data_flow::Value::allocate_storage(v5);
  void *result = v16;
  return result;
}

uint64_t std::function<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::operator()(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8)
{
  v14[0] = a4;
  v14[1] = a5;
  char v13 = a2;
  double v11 = a7;
  double v12 = a6;
  double v10 = a8;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, double *, double *, double *, void *))(*(void *)v8 + 48))(v8, &v13, a3, &v12, &v11, &v10, v14);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A56F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EE7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A56F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSF_SH_EEUlS8_ddjSD_E_NS_9allocatorISN_EEFjS8_ddjSD_EEclES8_OdSS_OjSD_(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int *a5, uint64_t a6, __n128 a7, __n128 a8)
{
  return _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJRKNS4_30DSP_Node_Configuration_OptionsEddjRKNS3_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSG_SI_EEUlS9_ddjSE_E_S9_ddjSE_EEEjDpOT_((void *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJRKNS4_30DSP_Node_Configuration_OptionsEddjRKNS3_7utility18Quantization_TableIjEEEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSG_SI_EEUlS9_ddjSE_E_S9_ddjSE_EEEjDpOT_(void *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int *a5, uint64_t a6, __n128 a7, __n128 a8)
{
  a7.n128_u64[0] = *a3;
  uint64_t v8 = *a5;
  long long v9 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, __n128, __n128))a1[1];
  uint64_t v10 = a1[2];
  double v11 = (void *)(*a1 + (v10 >> 1));
  if (v10) {
    long long v9 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, __n128, __n128))(*v11 + v9);
  }
  a8.n128_u64[0] = *a4;
  return v9(v11, a2, v8, a6, a7, a8);
}

uint64_t std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A5738;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A5738;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  *uint64_t v2 = &unk_1F14A5738;
  _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEddjRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_ddjEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_ddjEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27DEC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7__cloneEPNS0_6__baseIS1J_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5738;
  return _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEddjRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_ddjEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_ddjEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE7destroyEv(uint64_t a1)
{
  return _ZZN2vp2vx12_GLOBAL__N_121make_bind_back_lambdaIRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEddjRKNS_7utility18Quantization_TableIjEEEEEJSA_EEEDaOT_DpRKT0_ENUlDpOT_E_D1Ev((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EE18destroy_deallocateEv(void *a1)
{
  _ZZN2vp2vx12_GLOBAL__N_121make_bind_back_lambdaIRKNSt3__18functionIFjRKNS0_30DSP_Node_Configuration_OptionsEddjRKNS_7utility18Quantization_TableIjEEEEEJSA_EEEDaOT_DpRKT0_ENUlDpOT_E_D1Ev(a1 + 1);

  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS3_30DSP_Node_Configuration_OptionsEddjRKNS2_7utility18Quantization_TableIjEEEEEJSI_EEEDaOT_DpRKT0_EUlDpOT_E_JSD_ddjEEESP_SR_DpRKNS4_5StateISS_EEEUlDpRKSW_E_JSD_ddjEEERNS4_13State_ManagerESQ_S14_EUlPPKNS4_5ValueEPS1B_E_NS_9allocatorIS1G_EEFvS1E_S1F_EEclEOS1E_OS1F_(uint64_t a1, uint64_t (******a2)(), vp::vx::data_flow::Value **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v6 = **a2;
  if (v6[2] == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v7 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v4[1];
  if (v8[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    long long v9 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v8);
  }
  else {
    long long v9 = 0;
  }
  uint64_t v10 = v4[2];
  if (v10[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    double v11 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v10);
  }
  else {
    double v11 = 0;
  }
  double v12 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v4[3]);
  int v13 = std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::operator()(a1 + 8, v7, *v12, a1 + 40, *v9, *v11);
  vp::vx::data_flow::Value::~Value(v5);
  *(void *)long long v5 = std::pmr::get_default_resource(v14);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v5);
  _DWORD *result = v13;
  return result;
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN2vp2vx9data_flow8FunctionIjEC1IZNS2_29Voice_Processor_State_Manager12create_stateIZNS2_12_GLOBAL__N_121make_bind_back_lambdaIRKNS_8functionIFjRKNS2_30DSP_Node_Configuration_OptionsEddjRKNS1_7utility18Quantization_TableIjEEEEEJSH_EEEDaOT_DpRKT0_EUlDpOT_E_JSC_ddjEEESO_SQ_DpRKNS3_5StateISR_EEEUlDpRKSV_E_JSC_ddjEEERNS3_13State_ManagerESP_S13_EUlPPKNS3_5ValueEPS1A_E_Li0ELb0EEC2B8ne180100IJRKS1F_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpSV_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::__value_func[abi:ne180100](a1, a2);
  v4[4] = 0;
  v4[5] = 0;
  v4 += 4;
  v4[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  return a1;
}

void sub_1BB27E08C(_Unwind_Exception *a1)
{
  std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  double v10 = a5;
  double v9 = a6;
  int v8 = a3;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, int *, uint64_t))(*(void *)v6 + 48))(v6, a2, &v10, &v9, &v8, a4);
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A5780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIbJRKNS3_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFSA_SC_EEUlS8_ddjE_NS_9allocatorISI_EEFbS8_ddjEEclES8_OdSN_Oj(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int *a5, __n128 a6, __n128 a7)
{
  return _ZNSt3__128__invoke_void_return_wrapperIbLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIbJRKNS4_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSB_SD_EEUlS9_ddjE_S9_ddjEEEbDpOT_((void *)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIbLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIbJRKNS4_30DSP_Node_Configuration_OptionsEddjEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFSB_SD_EEUlS9_ddjE_S9_ddjEEEbDpOT_(void *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int *a5, __n128 a6, __n128 a7)
{
  a6.n128_u64[0] = *a3;
  a7.n128_u64[0] = *a4;
  uint64_t v7 = (uint64_t (*)(void *, uint64_t, void, double, double))a1[1];
  uint64_t v8 = a1[2];
  double v9 = (void *)(*a1 + (v8 >> 1));
  if (v8) {
    return (*(uint64_t (**)(__n128, __n128))(*v9 + v7))(a6, a7);
  }
  else {
    return v7(v9, a2, *a5, a6.n128_f64[0], a7.n128_f64[0]);
  }
}

uint64_t std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEEERNS1_13State_ManagerESH_SO_(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v16, a3);
  __n128 v18 = 0;
  int v13 = operator new(0x28uLL);
  void *v13 = &unk_1F14A57C8;
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v13 + 1), (uint64_t)v16);
  __n128 v18 = v13;
  v15[6] = vp::vx::data_flow::State_Transaction::get_id(a4);
  v15[7] = vp::vx::data_flow::State_Transaction::get_id(a5);
  v15[8] = vp::vx::data_flow::State_Transaction::get_id(a6);
  v15[9] = vp::vx::data_flow::State_Transaction::get_id(a7);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v17, (uint64_t)v15);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v15);
  vp::vx::data_flow::State<void>::~State(v15);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100](v16);
  return a1;
}

void sub_1BB27E46C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A57C8;
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A57C8;
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A57C8;
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27E5F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7__cloneEPNS0_6__baseIS16_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A57C8;
  return std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

unsigned char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIbEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS3_30DSP_Node_Configuration_OptionsEddjEEEJSB_ddjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSB_ddjEEERNS4_13State_ManagerESJ_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS4_30DSP_Node_Configuration_OptionsEddjEEEJSC_ddjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSC_ddjEEERNS5_13State_ManagerESK_SR_EUlPPKNS5_5ValueEPSZ_E_S12_S13_EEEvDpOSS_(a1 + 8, a2, a3);
}

unsigned char *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIbEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFbRKNS4_30DSP_Node_Configuration_OptionsEddjEEEJSC_ddjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JSC_ddjEEERNS5_13State_ManagerESK_SR_EUlPPKNS5_5ValueEPSZ_E_S12_S13_EEEvDpOSS_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  char v4 = _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEJLm0ELm1ELm2ELm3EEEEDaRKSH_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id;
  __n128 result = (unsigned char *)vp::vx::data_flow::Value::allocate_storage(v3);
  unsigned char *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIbE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFbRKNS0_30DSP_Node_Configuration_OptionsEddjEEEJS9_ddjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JS9_ddjEJLm0ELm1ELm2ELm3EEEEDaRKSH_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<vp::vx::DSP_Node_Configuration_Options>(void)::s_type_id) {
    uint64_t v4 = vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    uint64_t v4 = 0;
  }
  long long v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v8 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    uint64_t v8 = 0;
  }
  double v9 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 24));
  double v10 = *v6;
  double v11 = *v8;
  int v12 = *v9;

  return std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::operator()(a1, v4, v12, v10, v11);
}

uint64_t std::function<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  double v9 = a4;
  double v8 = a5;
  int v7 = a3;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, double *, int *))(*(void *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5810;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EE7__cloneEPNS0_6__baseIS1D_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A5810;
  a2[1] = v2;
  return result;
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIdEC1IZNS3_29Voice_Processor_State_Manager12create_stateIdZNS3_12_GLOBAL__N_125make_member_getter_lambdaI27AudioStreamBasicDescriptiondEEDaMT_T0_EUlRKSC_E_JN2CA17StreamDescriptionEEEESD_OSF_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JSL_EEERNS4_13State_ManagerESE_DpRKNSN_IT0_EEEUlPPKNS4_5ValueEPS15_E_NS_9allocatorIS1A_EEFvS18_S19_EEclEOS18_OS19_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id;
  __n128 result = (void *)vp::vx::data_flow::Value::allocate_storage(v3);
  void *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14A5858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS3_31Downlink_Configuration_DelegateEKDoFS7_S9_EEUlddjbdjE_NS_9allocatorISF_EEFjddjbdjEEclEOdSK_OjObSK_SL_(uint64_t a1, unint64_t *a2, unint64_t *a3, unsigned int *a4, unsigned __int8 *a5, unint64_t *a6, unsigned int *a7, __n128 a8, __n128 a9, __n128 a10)
{
  return _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFS8_SA_EEUlddjbdjE_ddjbdjEEEjDpOT_((void *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t _ZNSt3__128__invoke_void_return_wrapperIjLb0EE6__callB8ne180100IJRZN2vp2vx15Voice_Processor15create_callbackIjJddjbdjEEENS_8functionIFT_DpT0_EEEMNS4_31Downlink_Configuration_DelegateEKDoFS8_SA_EEUlddjbdjE_ddjbdjEEEjDpOT_(void *a1, unint64_t *a2, unint64_t *a3, unsigned int *a4, unsigned __int8 *a5, unint64_t *a6, unsigned int *a7, __n128 a8, __n128 a9, __n128 a10)
{
  int v10 = *a5;
  double v11 = (uint64_t (*)(void *, void, BOOL, void, __n128, __n128, __n128))a1[1];
  uint64_t v12 = a1[2];
  int v13 = (void *)(*a1 + (v12 >> 1));
  if (v12) {
    double v11 = *(uint64_t (**)(void *, void, BOOL, void, __n128, __n128, __n128))(*v13 + v11);
  }
  a9.n128_u64[0] = *a3;
  a8.n128_u64[0] = *a2;
  a10.n128_u64[0] = *a6;
  return v11(v13, *a4, v10 != 0, *a7, a8, a9, a10);
}

uint64_t std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerESE_SL_(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7, vp::vx::data_flow::State_Transaction *a8, vp::vx::data_flow::State_Transaction *a9)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v25, a3);
  int v27 = 0;
  uint64_t v16 = operator new(0x28uLL);
  void *v16 = &unk_1F14A58A0;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v16 + 1), (uint64_t)v25);
  int v27 = v16;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v20 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v21 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v22 = vp::vx::data_flow::State_Transaction::get_id(a7);
  int v23 = vp::vx::data_flow::State_Transaction::get_id(a8);
  int v24 = vp::vx::data_flow::State_Transaction::get_id(a9);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v26, (uint64_t)v18);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State(v18);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v26);
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](v25);
  return a1;
}

void sub_1BB27EC04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A58A0;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A58A0;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A58A0;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27ED8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7__cloneEPNS0_6__baseIS13_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A58A0;
  return std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerESG_SN_EUlPPKNS4_5ValueEPSV_E_NS_9allocatorIS10_EEFvSY_SZ_EEclEOSY_OSZ_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS5_13State_ManagerESH_SO_EUlPPKNS5_5ValueEPSW_E_SZ_S10_EEEvDpOSP_(a1 + 8, a2, a3);
}

_DWORD *_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS5_13State_ManagerESH_SO_EUlPPKNS5_5ValueEPSW_E_SZ_S10_EEEvDpOSP_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEJLm0ELm1ELm2ELm3ELm4ELm5EEEEDaRKSE_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(a1, *a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjE6invokeIZNS0_29Voice_Processor_State_Manager12create_stateIRKNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS1_5StateIT0_EEEUlDpRKT_E_JddjbdjEJLm0ELm1ELm2ELm3ELm4ELm5EEEEDaRKSE_PPKNS1_5ValueENS7_16integer_sequenceImJXspT1_EEEE(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t (****)())(*(void *)a2 + 16) == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    int v4 = (double *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)a2);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(uint64_t (*****)())(a2 + 8);
  if (v5[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v6 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v5);
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (*****)())(a2 + 16);
  if (v7[2] == &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id) {
    double v8 = (int *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v7);
  }
  else {
    double v8 = 0;
  }
  double v9 = *(uint64_t (*****)())(a2 + 24);
  if (v9[2] == &vp::vx::data_flow::Value::type_id<BOOL>(void)::s_type_id) {
    int v10 = (char *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v9);
  }
  else {
    int v10 = 0;
  }
  double v11 = *(uint64_t (*****)())(a2 + 32);
  if (v11[2] == &vp::vx::data_flow::Value::type_id<double>(void)::s_type_id) {
    uint64_t v12 = (double *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v11);
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = (int *)vp::vx::data_flow::Value::view_storage(*(vp::vx::data_flow::Value **)(a2 + 40));
  double v14 = *v4;
  double v15 = *v6;
  int v16 = *v8;
  char v17 = *v10;
  double v18 = *v12;
  int v19 = *v13;

  return std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::operator()(a1, v16, v17, v19, v14, v15, v18);
}

uint64_t std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::operator()(uint64_t a1, int a2, char a3, int a4, double a5, double a6, double a7)
{
  double v13 = a6;
  double v14 = a5;
  int v12 = a2;
  char v11 = a3;
  double v10 = a7;
  int v9 = a4;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, double *, double *, int *, char *, double *, int *))(*(void *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

uint64_t vp::vx::Voice_Processor_State_Manager::create_state<unsigned int,std::function<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>,double,double,unsigned int,BOOL,double,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, vp::vx::data_flow::State_Transaction *a3@<X2>, vp::vx::data_flow::State_Transaction *a4@<X3>, vp::vx::data_flow::State_Transaction *a5@<X4>, vp::vx::data_flow::State_Transaction *a6@<X5>, vp::vx::data_flow::State_Transaction *a7@<X6>, vp::vx::data_flow::State_Transaction *a8@<X7>, uint64_t a9@<X8>)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a1 + 48;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v19, a2);
  _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE((uint64_t)v18, v16, (uint64_t)v19, a3, a4, a5, a6, a7, a8);
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](v19);
  vp::vx::data_flow::State<void>::State(a9, (uint64_t)v18);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v18);
}

uint64_t vp::vx::Voice_Processor::add_property_state<(vp::vx::Property_ID)6>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 968);
  vp::vx::data_flow::State<void>::State((uint64_t)v4, a2);
  vp::vx::Property::create_readable<unsigned int>((uint64_t)v4, (uint64_t)&vp::vx::Voice_Processor::Type_Converter<unsigned int>::get_shared_instance(void)::s_shared_instance, (uint64_t)v5);
  vp::vx::Property_Manager::add_property(v2, 6u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v4);
}

void sub_1BB27F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t _ZN2vp2vx9data_flow8FunctionIjEC2IZNS0_29Voice_Processor_State_Manager12create_stateIjNSt3__18functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS1_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS1_13State_ManagerET_DpRKNSE_IT0_EE(uint64_t a1, uint64_t a2, uint64_t a3, vp::vx::data_flow::State_Transaction *a4, vp::vx::data_flow::State_Transaction *a5, vp::vx::data_flow::State_Transaction *a6, vp::vx::data_flow::State_Transaction *a7, vp::vx::data_flow::State_Transaction *a8, vp::vx::data_flow::State_Transaction *a9)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v25, a3);
  int v27 = 0;
  uint64_t v16 = operator new(0x28uLL);
  void *v16 = &unk_1F14A58E8;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v16 + 1), (uint64_t)v25);
  int v27 = v16;
  int id = vp::vx::data_flow::State_Transaction::get_id(a4);
  int v20 = vp::vx::data_flow::State_Transaction::get_id(a5);
  int v21 = vp::vx::data_flow::State_Transaction::get_id(a6);
  int v22 = vp::vx::data_flow::State_Transaction::get_id(a7);
  int v23 = vp::vx::data_flow::State_Transaction::get_id(a8);
  int v24 = vp::vx::data_flow::State_Transaction::get_id(a9);
  vp::vx::data_flow::State_Manager::create_state(a2, (uint64_t)v26, (uint64_t)v18);
  vp::vx::data_flow::State<void>::State(a1, (uint64_t)v18);
  vp::vx::data_flow::State<void>::~State(v18);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v26);
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](v25);
  return a1;
}

void sub_1BB27F2BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED1Ev(void *a1)
{
  *a1 = &unk_1F14A58E8;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EED0Ev(void *a1)
{
  *a1 = &unk_1F14A58E8;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F14A58E8;
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB27F3C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7__cloneEPNS0_6__baseIS17_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A58E8;
  return std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EE18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIjEC1IZNS3_29Voice_Processor_State_Manager12create_stateIjNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT0_DpRKNS4_5StateIT1_EEEUlDpRKT_E_JddjbdjEEERNS4_13State_ManagerET_DpRKNSG_IT0_EEEUlPPKNS4_5ValueEPSZ_E_NS_9allocatorIS14_EEFvS12_S13_EEclEOS12_OS13_(uint64_t a1, uint64_t *a2, vp::vx::data_flow::Value **a3)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8ne180100IJRZN2vp2vx9data_flow8FunctionIjEC1IZNS4_29Voice_Processor_State_Manager12create_stateIRKNS_8functionIFjddjbdjEEEJddjbdjEEEDaOT_DpRKNS5_5StateIT0_EEEUlDpRKT_E_JddjbdjEEERNS5_13State_ManagerESH_SO_EUlPPKNS5_5ValueEPSW_E_SZ_S10_EEEvDpOSP_(a1 + 8, a2, a3);
}

void *std::__function::__value_func<unsigned int ()(double,double,unsigned int,BOOL,double,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,double,unsigned int,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<double ()(BOOL,vp::vx::DSP_Node_Configuration_Options const&,double,double,double,std::optional<double>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned int ()(double,unsigned int,double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned int ()(vp::vx::DSP_Node_Configuration_Options const&,double,vp::utility::Quantization_Table<unsigned int> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<double ()(BOOL,double,unsigned int,vp::vx::DSP_Node_Configuration_Options const&,double,double,std::optional<double>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v8 = v1;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v7, (char *)(v1 + 368));
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  uint64_t v2 = *(unsigned __int8 *)(v1 + 416);
  if (*(unsigned char *)(v1 + 416)) {
    uint64_t v2 = *(unsigned int *)(v1 + 412);
  }
  caulk::make_string((caulk *)"AID%u", (uint64_t)&v5, v2);
  std::string __p = v5;
  memset(&v5, 0, sizeof(v5));
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = *(unsigned __int8 *)(v1 + 396);
  if (*(unsigned char *)(v1 + 396)) {
    uint64_t v3 = *(unsigned int *)(v1 + 392);
  }
  caulk::make_string((caulk *)"CFG%u", (uint64_t)&v4, v3);
  std::string v5 = v4;
  memset(&v4, 0, sizeof(v4));
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v4, "Generic");
  vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(&v8, (uint64_t)&v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1BB27F9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::file_status vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0::operator() const(void)::{lambda(std::__fs::filesystem::path)#1}::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)*a1;
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)a2, (uint64_t)(v3 + 36), &v9);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&__p, "VPVX");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v9, &v10);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::__fs::filesystem::path *)a2 = v10;
  *((unsigned char *)&v10.__pn_.__r_.__value_.__s + 23) = 0;
  v10.__pn_.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::file_status result = std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a2, &__ec);
  if (v10.__pn_.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    std::__fs::filesystem::file_status result = (std::__fs::filesystem::file_status)std::system_category();
    __ec.__cat_ = (const std::error_category *)result;
    if (v10.__pn_.__r_.__value_.__s.__data_[0])
    {
      if (v10.__pn_.__r_.__value_.__s.__data_[0] != 255 && !__ec.__val_)
      {
        std::__fs::filesystem::file_status result = std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a2, &__ec);
        if (v10.__pn_.__r_.__value_.__s.__data_[0] == 2 && !__ec.__val_)
        {
          uint64_t v5 = v3[80];
          uint64_t v6 = (__n128 *)(v3[79] + 24 * v5);
          if (v5 == v3[81])
          {
            boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(v3 + 78, v6, (const char *)1, (__n128 *)a2, &v10);
            return (std::__fs::filesystem::file_status)boost::container::vec_iterator<std::__fs::filesystem::path *,false>::operator*((uint64_t *)&v10);
          }
          else
          {
            __n128 v7 = *(__n128 *)a2;
            v6[1].n128_u64[0] = *(void *)(a2 + 16);
            *uint64_t v6 = v7;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = 0;
            *(void *)a2 = 0;
            ++v3[80];
          }
        }
      }
    }
  }
  return result;
}

void sub_1BB27FBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(void *a1@<X0>, __n128 *a2@<X1>, const char *a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + a1[1] - v10;
}

void boost::container::vector<std::__fs::filesystem::path,boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(void *a1, uint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = (__n128 *)a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>((uint64_t)a1, v10, a4, (__n128 *)((char *)v10 + 24 * a1[2]), a2, a5, a6);
  if (v10)
  {
    for (uint64_t i = a1[2]; i; --i)
    {
      if (v10[1].n128_i8[7] < 0) {
        operator delete((void *)v10->n128_u64[0]);
      }
      uint64_t v10 = (__n128 *)((char *)v10 + 24);
    }
    boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v12 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v12;
  a1[3] = a3;
}

void sub_1BB27FD40(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<std::__fs::filesystem::path,vp::Allocator<void>,void>,std::__fs::filesystem::path*,std::__fs::filesystem::path>>(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      __n128 v8 = *a2;
      *(void *)(v7 + 16) = a2[1].n128_u64[0];
      *(__n128 *)uint64_t v7 = v8;
      v7 += 24;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2->n128_u64[0] = 0;
      a2 = (__n128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  __n128 result = *a7;
  *(void *)(v7 + 16) = a7[1].n128_u64[0];
  *(__n128 *)uint64_t v7 = result;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  a7->n128_u64[0] = 0;
  if (a3 != a4)
  {
    uint64_t v10 = (__n128 *)(v7 + 24);
    do
    {
      __n128 result = *a3;
      v10[1].n128_u64[0] = a3[1].n128_u64[0];
      *uint64_t v10 = result;
      uint64_t v10 = (__n128 *)((char *)v10 + 24);
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      a3->n128_u64[0] = 0;
      a3 = (__n128 *)((char *)a3 + 24);
    }
    while (a3 != a4);
  }
  return result;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1BB27FEA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_commands(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = **a1;
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)54>((uint64_t)v1 + 8, (uint64_t)v9);
  uint64_t v13 = &unk_1F14A5930;
  char v14 = 0;
  double v15 = &v13;
  v8[0] = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v9);
  vp::vx::data_flow::State_Manager::create_state((uint64_t)v1 + 64, (uint64_t)&v13, (uint64_t)v12);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v12);
  vp::vx::data_flow::State<void>::~State(v12);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v13);
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  vp::vx::data_flow::State<void>::State((uint64_t)&v13, (uint64_t)v10);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x6265616Du, (uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)&v13);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::Voice_Processor::get_uplink_mic_ref_delay_milliseconds(v1, (uint64_t)v10);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v10, (uint64_t)v1 + 16, (uint64_t)v11);
  vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v11);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x6D72646Du, (uint64_t)v12);
  vp::vx::data_flow::State<void>::~State((uint64_t)v12);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)3>((uint64_t)v1 + 8, (uint64_t)v9);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v9, (uint64_t)v1 + 16, (uint64_t)v10);
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v10);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x756C766Du, (uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v11);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)4>((uint64_t)v1 + 8, (uint64_t)v8);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v8, (uint64_t)v1 + 16, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)v9);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C766Du, (uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)60>((uint64_t)v1 + 8, (uint64_t)v7);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v7, (uint64_t)v1 + 16, (uint64_t)v8);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v8);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C7376u, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::Voice_Processor::get_downlink_software_volume_pre_gain_dB(v1, (uint64_t)v6);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v6, (uint64_t)v1 + 16, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v7);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C7367u, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)61>((uint64_t)v1 + 8, (uint64_t)v5);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v5, (uint64_t)v1 + 16, (uint64_t)v6);
  vp::vx::data_flow::State<void>::State((uint64_t)v7, (uint64_t)v6);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x646C6876u, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::Voice_Processor::create_camera_noise_mitigation_is_required_state(v1, (uint64_t)v4);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v4, (uint64_t)v1 + 16, (uint64_t)v5);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v5);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x636E6D72u, (uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)78>((uint64_t)v1 + 8, (uint64_t)v3);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v3, (uint64_t)v1 + 16, (uint64_t)v4);
  vp::vx::data_flow::State<void>::State((uint64_t)v5, (uint64_t)v4);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter((uint64_t)v1 + 1192, 0x6D637376u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v3);
}

void sub_1BB280298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  vp::vx::data_flow::State<void>::~State((uint64_t)va2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va1);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  __n128 v8 = &unk_1F14A5978;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  __n128 v8 = &unk_1F14A59C0;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A5930;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5930;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JNS3_14Beam_DirectionEEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  float v4 = (float)*(int *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  __n128 result = (float *)vp::vx::data_flow::Value::allocate_storage(v3);
  float *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A5978;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5978;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JfEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JfEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = *(_DWORD *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  __n128 result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A59C0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EE7__cloneEPNS0_6__baseIS11_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A59C0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_JbEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JbEEERNS4_13State_ManagerESD_SL_EUlPPKNS4_5ValueEPST_E_NS_9allocatorISY_EEFvSW_SX_EEclEOSW_OSX_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  if (*(unsigned char *)vp::vx::data_flow::Value::view_storage(**a2)) {
    float v4 = 1.0;
  }
  else {
    float v4 = 0.0;
  }
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  __n128 result = (float *)vp::vx::data_flow::Value::allocate_storage(v3);
  float *result = v4;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_parameter_setter_delegates(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = v1 + 1256;
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1 + 8;
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)72>(v1 + 8, (uint64_t)v7);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v7, v3, (uint64_t)v8);
  vp::vx::data_flow::State<void>::State((uint64_t)v9, (uint64_t)v8);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter(v2, 0x64766F72u, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v9);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)73>(v4, (uint64_t)v6);
  _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v6, v3, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v7);
  vp::vx::IO_Parameter_Setter_Delegate_Factory::add_parameter_setter(v2, 0x75696F72u, (uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v8);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void sub_1BB280914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIZNS0_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEES5_OS6_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  __n128 v8 = &unk_1F14A5A08;
  uint64_t v4 = a2 + 48;
  char v9 = 0;
  uint64_t v10 = &v8;
  v6[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v4, (uint64_t)&v8, (uint64_t)v7);
  vp::vx::data_flow::State<void>::State((uint64_t)v6, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State(v7);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](&v8);
  vp::vx::data_flow::State<void>::State(a3, (uint64_t)v6);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v6);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14A5A08;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5A08;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

float *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIfEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZNS3_12_GLOBAL__N_123make_static_cast_lambdaIfEEDavEUlT_E_J13CAOrientationEEESC_OSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSF_EEERNS4_13State_ManagerESD_SM_EUlPPKNS4_5ValueEPSU_E_NS_9allocatorISZ_EEFvSX_SY_EEclEOSX_OSY_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  float v4 = (float)*(unsigned int *)vp::vx::data_flow::Value::view_storage(**a2);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<float>(void)::s_type_id;
  __n128 result = (float *)vp::vx::data_flow::Value::allocate_storage(v3);
  float *result = v4;
  return result;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_commands(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  uint64_t v1 = **a1;
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)68>((uint64_t)v1 + 8, (uint64_t)v5);
  vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>((uint64_t)v1 + 1376, 0x63706D73u, (uint64_t)v5);
  vp::vx::data_flow::State<void>::~State((uint64_t)v5);
  vp::vx::Voice_Processor::get_other_audio_advanced_ducking_enabled(v1, (uint64_t)v4);
  vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>((uint64_t)v1 + 1376, 0x6E6D6465u, (uint64_t)v4);
  vp::vx::data_flow::State<void>::~State((uint64_t)v4);
  vp::vx::Voice_Processor::get_other_audio_advanced_ducking_level(v1, (uint64_t)v3);
  vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>((uint64_t)v1 + 1376, 0x6E6D646Cu, (uint64_t)v3);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v3);
}

void sub_1BB280BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  char v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>;
  unsigned int v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  float v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((void *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1BB280CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  char v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>;
  unsigned int v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  float v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((void *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1BB280DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  char v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>;
  unsigned int v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  float v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((void *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1BB280ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    uint64_t v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  long long v4 = v7[0];
  long long v5 = v7[1];
  *(void *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));

  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<applesauce::CF::DictionaryRef>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<applesauce::CF::DictionaryRef>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<applesauce::CF::DictionaryRef>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872460;
  uint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1BB281098(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  float *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(void *a1, int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 72, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(v10, (uint64_t)a1, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void virtual thunk to'vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::~IO_Property_Setter_Command(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 6) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  char *v1;
  int v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 6) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

_DWORD *vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v5 = operator new(4uLL);
    *a3 = v5;
    *uint64_t v5 = v4;
    __n128 result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

void vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::__shared_mutex_base *result, uint64_t *a2)
{
  int v2 = result;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[1];
  if (!v3 || *(void *)(v3 + 8) == -1)
  {
    int v8 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v8)
    {
      __n128 result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v8);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
  }
  else
  {
    int v4 = *(_DWORD *)result->__mut_.__m_.__opaque;
    uint64_t v5 = *a2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
    uint64_t v6 = operator new(0x28uLL);
    *uint64_t v6 = &unk_1F14A5B30;
    v6[1] = v2;
    *((_DWORD *)v6 + 4) = v4;
    void v6[3] = v5;
    v6[4] = v3;
    void v9[3] = v6;
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
    uint64_t v12 = 0;
    uint64_t v7 = operator new(0x28uLL);
    *uint64_t v7 = &unk_1F14A5AE8;
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
    uint64_t v12 = v7;
    LODWORD(v7) = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v11);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](v10);
    *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v7;
    return (std::__shared_mutex_base *)std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_1BB28153C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5AE8;
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5AE8;
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  *int v2 = &unk_1F14A5AE8;
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB2816E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5AE8;
  return std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<applesauce::CF::DictionaryRef>::register_listener(std::function<void ()(applesauce::CF::DictionaryRef const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5B30;
  int v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5B30;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5B30;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  result[3] = *(void *)(a1 + 24);
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5B30;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, std::string::size_type *a2)
{
}

void vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(applesauce::CF::DictionaryRef const&)#1}::operator()(uint64_t *a1, std::string::size_type *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[2];
      if (v8)
      {
        log = vp::get_log((vp *)v6);
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          if (v5) {
            uint64_t v10 = v5 + 48;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = &v22;
          vp::vx::io::get_log_context_info(v10, (uint64_t)"vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>]", 65, &v22);
          uint64_t v12 = v24;
          uint64_t v13 = v23;
          double v15 = vp::get_log(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            if ((v12 & 0x80u) == 0) {
              uint64_t v16 = v12;
            }
            else {
              uint64_t v16 = v13;
            }
            if ((v24 & 0x80u) != 0) {
              uint64_t v11 = v22;
            }
            if (v16) {
              char v17 = " ";
            }
            else {
              char v17 = "";
            }
            unsigned int v18 = *((_DWORD *)a1 + 2);
            int v19 = bswap32(v18);
            *(_DWORD *)&buf[1] = v19;
            if (((char)v19 - 32) > 0x5E
              || (((__int16)v19 >> 8) - 32) > 0x5E
              || ((v19 << 8 >> 24) - 32) > 0x5E
              || ((v19 >> 24) - 32) > 0x5E)
            {
              std::to_string(&__p, v18);
            }
            else
            {
              strcpy(&buf[5], "'");
              buf[0] = 39;
              std::string::basic_string[abi:ne180100]<0>(&__p, buf);
            }
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = v11;
            __int16 v26 = 2080;
            int v27 = v17;
            __int16 v28 = 2080;
            __int16 v29 = p_p;
            _os_log_impl(&dword_1BB0CE000, v15, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s", buf, 0x20u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if ((char)v24 < 0) {
            operator delete(v22);
          }
        }
        __p.__r_.__value_.__r.__words[0] = *a2;
        int v22 = &__p;
        uint64_t v23 = 8;
        (*(void (**)(unsigned char *__return_ptr, uint64_t, void, void **))(*(void *)v8 + 40))(buf, v8, *((unsigned int *)a1 + 2), &v22);
        if (!v30) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)buf);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1BB281B94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a4);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 56) = v6 + 24;
  *(void *)(a1 + 64) = v6;
  *(void *)a1 = &unk_1F14A5A80;
  *(void *)(a1 + 48) = &unk_1F14A5AC8;
  *(_DWORD *)(a1 + 8) = v5;
  vp::vx::data_flow::State<void>::State(a1 + 16, (uint64_t)v9);
  *(_DWORD *)(a1 + 40) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a1 + 16);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    uint64_t v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&>(unsigned int const&,vp::vx::data_flow::State<applesauce::CF::DictionaryRef> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 72, 8);
  }
  return a1;
}

unsigned int *boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript(void *a1, unsigned int *a2)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v14 = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  char v17 = (void (**)())(v2 + 48 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(&v14, &v17, a2, &v13);
  uint64_t v7 = v13;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (!v8 && v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v13 == (unsigned int *)(v8 + 48 * v9))
  {
    unsigned int v10 = *a2;
LABEL_13:
    LODWORD(v14) = v10;
    char v17 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    double v15 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    uint64_t v12 = v13;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, &v12, (uint64_t)&v14, (uint64_t **)&v13);
    uint64_t v7 = v13;
    ((void (*)(uint64_t *))v15[3])(&v16);
    ((void (*)(void *))v17[3])(v18);
    if (!v7) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    return v7 + 2;
  }
  if (!v13) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v10 = *a2;
  if (*a2 < *v13) {
    goto LABEL_13;
  }
  return v7 + 2;
}

void sub_1BB281EFC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 4);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[12 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 12;
        *a1 = v8 + 12;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable(void)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  unsigned int v10 = *(_DWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
  uint64_t v11 = v7;
  (*(void (**)(void *, uint64_t))(v7 + 16))(v12, a3 + 16);
  uint64_t v9 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique(a1, &v9, &v10, a4);
  return (*(uint64_t (**)(void *))(v11 + 24))(v12);
}

void sub_1BB282158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 48 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v11 = *a2;
  uint64_t v12 = 0;
  __n128 result = (uint64_t *)boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare((uint64_t)a1, &v11, a3, &v12);
  if (result)
  {
    uint64_t v13 = (uint64_t *)v12;
    return boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, &v13, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v12) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = (uint64_t *)v12;
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = &v4[12 * v5];
  unsigned int v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      unsigned int v18 = v9;
      int v19 = v10;
      uint64_t v16 = (uint64_t *)&v19;
      char v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  uint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 12);
  uint64_t v12 = v11 - 12;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    int v21 = v4;
    int v20 = v12;
    uint64_t v16 = (uint64_t *)&v21;
    char v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,true>,vp::vx::Graph_Property_ID>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(void *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > (unint64_t)v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)v5 > v6 + 48 * v8) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    return (uint64_t *)boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, (uint64_t)v5, (const char *)1, a3, a4);
  }
  else
  {
    BOOL result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
  return result;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3]) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v8 = a1[1];
  BOOL v9 = (uint64_t *)(v8 + 48 * v4);
  if (v9 == a2)
  {
    *(_DWORD *)a2 = *(_DWORD *)a4;
    uint64_t v16 = v8 + 48 * v4;
    uint64_t v17 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *(void *)(v16 + 8) = v17;
    BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16 + 16, a4 + 16);
    ++a1[2];
  }
  else
  {
    unint64_t v10 = v9 - 6;
    *(_DWORD *)BOOL v9 = *((_DWORD *)v9 - 12);
    uint64_t v11 = v8 + 48 * v4;
    uint64_t v12 = *(v9 - 5);
    *(v9 - 5) = (uint64_t)&caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *(void *)(v11 + 8) = v12;
    (*(void (**)(uint64_t, _DWORD *))(v12 + 16))(v11 + 16, (_DWORD *)v9 - 8);
    ++a1[2];
    if (v10 != a2)
    {
      unsigned int v13 = v10;
      do
      {
        int v14 = *((_DWORD *)v13 - 12);
        v13 -= 6;
        *(_DWORD *)unint64_t v10 = v14;
        caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v10 + 1, v10 - 5);
        unint64_t v10 = v13;
      }
      while (v13 != a2);
    }
    *(_DWORD *)a2 = *(_DWORD *)a4;
    return caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(a2 + 1, (uint64_t *)(a4 + 8));
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::cf::Notification_Center::Listener>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::cf::Notification_Center::Listener>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[0] = a2;
  v15[1] = a1;
  v15[2] = a3;
  uint64_t v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>((uint64_t)a1, v10, a4, v10 + 48 * a1[2], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = v10 + 16;
      do
      {
        (*(void (**)(uint64_t))(*(void *)(v12 - 8) + 24))(v12);
        v12 += 48;
        --v11;
      }
      while (v11);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 48 * a1[3], 8);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1BB282828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    do
    {
      uint64_t v12 = a5;
      *(_DWORD *)a5 = *(_DWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
      *(void *)(a5 + 8) = v13;
      uint64_t v14 = a2 + 16;
      uint64_t v15 = a5 + 16;
      (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v15, a2 + 16);
      a2 = v14 + 32;
      a5 = v15 + 32;
    }
    while (v14 + 32 != v11);
    a5 = v12 + 48;
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)a5 = *(_DWORD *)a7;
  uint64_t v16 = *(void *)(a7 + 8);
  *(void *)(a7 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
  *(void *)(a5 + 8) = v16;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(a5 + 16, a7 + 16);
  uint64_t v18 = a5 + 48;
  while (v11 != a4)
  {
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v11;
    uint64_t v19 = *(void *)(v11 + 8);
    *(void *)(v11 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::empty;
    *(void *)(v18 + 8) = v19;
    uint64_t v20 = v11 + 16;
    uint64_t v21 = v18 + 16;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18 + 16, v20);
    uint64_t v11 = v20 + 32;
    uint64_t v18 = v21 + 32;
  }
  return result;
}

void sub_1BB282994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 24))(v2 + 16);
    uint64_t v3 = a1[1];
    uint64_t v2 = *a1 + 48;
    *a1 = v2;
  }
  return a1;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 48 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  long long v4 = v7[0];
  long long v5 = v7[1];
  *(void *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));

  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<BOOL>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<BOOL>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<BOOL>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872460;
  uint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1BB282B70(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Command<BOOL>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<BOOL>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(void *a1, int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 72, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(v10, (uint64_t)a1, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<BOOL> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(unsigned int const&,vp::vx::data_flow::State<BOOL> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

uint64_t vp::vx::IO_Property_Setter_Command<BOOL>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void virtual thunk to'vp::vx::IO_Property_Setter_Command<BOOL>::~IO_Property_Setter_Command(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 6) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  char *v1;
  int v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 6) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

_DWORD *vp::vx::IO_Property_Setter_Command<BOOL>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v5 = operator new(4uLL);
    *a3 = v5;
    *uint64_t v5 = v4;
    uint64_t result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

void vp::vx::IO_Property_Setter_Command<BOOL>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::__shared_mutex_base *result, uint64_t *a2)
{
  int v2 = result;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[1];
  if (!v3 || *(void *)(v3 + 8) == -1)
  {
    int v8 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v8)
    {
      uint64_t result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v8);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
  }
  else
  {
    int v4 = *(_DWORD *)result->__mut_.__m_.__opaque;
    uint64_t v5 = *a2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
    uint64_t v6 = operator new(0x28uLL);
    *uint64_t v6 = &unk_1F14A5C38;
    v6[1] = v2;
    *((_DWORD *)v6 + 4) = v4;
    void v6[3] = v5;
    v6[4] = v3;
    void v9[3] = v6;
    std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
    uint64_t v12 = 0;
    uint64_t v7 = operator new(0x28uLL);
    *uint64_t v7 = &unk_1F1493D18;
    std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
    uint64_t v12 = v7;
    LODWORD(v7) = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v11);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](v10);
    *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v7;
    return (std::__shared_mutex_base *)std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_1BB282F94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5C38;
  int v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5C38;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5C38;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  result[3] = *(void *)(a1 + 24);
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5C38;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
}

void vp::vx::IO_Property_Setter_Command<BOOL>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(BOOL const&)#1}::operator()(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  a17 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = (std::__shared_weak_count *)a1[3];
  if (v18)
  {
    uint64_t v20 = *a1;
    uint64_t v21 = std::__shared_weak_count::lock(v18);
    if (v21)
    {
      int v22 = v21;
      uint64_t v23 = a1[2];
      if (v23)
      {
        log = vp::get_log((vp *)v21);
        BOOL v25 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          if (v20) {
            uint64_t v26 = v20 + 48;
          }
          else {
            uint64_t v26 = 0;
          }
          int v27 = (void **)&v39;
          vp::vx::io::get_log_context_info(v26, (uint64_t)"vp::vx::IO_Property_Setter_Command<BOOL>]", 40, &v39);
          uint64_t v28 = HIBYTE(vars0);
          uint64_t v29 = vars0;
          uint64_t v31 = vp::get_log(v30);
          BOOL v25 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          if (v25)
          {
            if ((v28 & 0x80u) == 0) {
              uint64_t v32 = v28;
            }
            else {
              uint64_t v32 = v29;
            }
            if (vars0 < 0) {
              int v27 = v39;
            }
            if (v32) {
              uint64_t v33 = " ";
            }
            else {
              uint64_t v33 = "";
            }
            unsigned int v34 = *((_DWORD *)a1 + 2);
            int v35 = bswap32(v34);
            *(_DWORD *)((char *)&a9 + 1) = v35;
            if (((char)v35 - 32) > 0x5E
              || (((__int16)v35 >> 8) - 32) > 0x5E
              || ((v35 << 8 >> 24) - 32) > 0x5E
              || ((v35 >> 24) - 32) > 0x5E)
            {
              std::to_string(&v38, v34);
            }
            else
            {
              *(_WORD *)((char *)&a9 + 5) = 39;
              LOBYTE(a9) = 39;
              std::string::basic_string[abi:ne180100]<0>(&v38, (char *)&a9);
            }
            __int16 v36 = &v38;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v36 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            LODWORD(a9) = 136315650;
            *(void *)((char *)&a9 + 4) = v27;
            WORD6(a9) = 2080;
            *(void *)((char *)&a9 + 14) = v33;
            a12 = 2080;
            a13 = v36;
            _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s", (uint8_t *)&a9, 0x20u);
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v38.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(vars0) < 0) {
            operator delete(v39);
          }
        }
        MEMORY[0x1F4188790](v25);
        uint64_t v39 = (void **)((unint64_t)v37 & 0xFFFFFFFFFFFFFFC0);
        long long vars0 = xmmword_1BB871C30;
        vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>((uint64_t)&v39 + 2, *a2);
        vp::Blob::Blob(&v38, (const void *)((unint64_t)v37 & 0xFFFFFFFFFFFFFFC0), *((uint64_t *)&vars0 + 1));
        (*(void (**)(long long *__return_ptr, uint64_t, void, std::string *))(*(void *)v23 + 40))(&a9, v23, *((unsigned int *)a1 + 2), &v38);
        if (!a16) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&a9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
}

void sub_1BB2834B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a4);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 56) = v6 + 24;
  *(void *)(a1 + 64) = v6;
  *(void *)a1 = &unk_1F14A5BD0;
  *(void *)(a1 + 48) = &unk_1F14A5C18;
  *(_DWORD *)(a1 + 8) = v5;
  vp::vx::data_flow::State<void>::State(a1 + 16, (uint64_t)v9);
  *(_DWORD *)(a1 + 40) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a1 + 16);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    uint64_t v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<BOOL> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<BOOL>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<BOOL>,unsigned int const&,vp::vx::data_flow::State<BOOL> const&>(unsigned int const&,vp::vx::data_flow::State<BOOL> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 72, 8);
  }
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  long long v4 = v7[0];
  long long v5 = v7[1];
  *(void *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));

  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Command,vp::Allocator_Delete<vp::vx::io::Node_Command>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Command_Factory::add_property_setter<AUVoiceIOOtherAudioDuckingLevel>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<AUVoiceIOOtherAudioDuckingLevel>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB872460;
  uint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1BB28377C(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Command<applesauce::CF::DictionaryRef>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(void *a1, int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 72, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(v10, (uint64_t)a1, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

uint64_t vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void virtual thunk to'vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::~IO_Property_Setter_Command(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 6) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  char *v1;
  int v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 6) = &unk_1F1493718;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

_DWORD *vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v5 = operator new(4uLL);
    *a3 = v5;
    *uint64_t v5 = v4;
    uint64_t result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

void vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::~IO_Property_Setter_Command(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C185D370);
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::__shared_mutex_base *result, uint64_t *a2)
{
  int v2 = result;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[1];
  if (!v3 || *(void *)(v3 + 8) == -1)
  {
    int v8 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v8)
    {
      uint64_t result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v8);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
  }
  else
  {
    int v4 = *(_DWORD *)result->__mut_.__m_.__opaque;
    uint64_t v5 = *a2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
    uint64_t v6 = operator new(0x28uLL);
    *uint64_t v6 = &unk_1F14A5D60;
    v6[1] = v2;
    *((_DWORD *)v6 + 4) = v4;
    void v6[3] = v5;
    v6[4] = v3;
    void v9[3] = v6;
    std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v9);
    uint64_t v12 = 0;
    uint64_t v7 = operator new(0x28uLL);
    *uint64_t v7 = &unk_1F14A5D18;
    std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v10);
    uint64_t v12 = v7;
    LODWORD(v7) = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v11);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v11);
    std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__value_func[abi:ne180100](v10);
    *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v7;
    return (std::__shared_mutex_base *)std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_1BB283BA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5D18;
  std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5D18;
  std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  *int v2 = &unk_1F14A5D18;
  std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB283DCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5D18;
  return std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel>::register_listener(std::function<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<AUVoiceIOOtherAudioDuckingLevel>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 48);
      return v6();
    }
  }
  return result;
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5D60;
  int v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5D60;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5D60;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  result[3] = *(void *)(a1 + 24);
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A5D60;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1},std::allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}>,void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
}

void vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>::set_property_controller(std::weak_ptr<vp::vx::io::Property_Controller>)::{lambda(AUVoiceIOOtherAudioDuckingLevel const&)#1}::operator()(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, int a10, __int16 a11, __int16 a12, std::string *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  a17 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = (std::__shared_weak_count *)a1[3];
  if (v18)
  {
    uint64_t v20 = *a1;
    uint64_t v21 = std::__shared_weak_count::lock(v18);
    if (v21)
    {
      int v22 = v21;
      uint64_t v23 = a1[2];
      if (v23)
      {
        log = vp::get_log((vp *)v21);
        BOOL v25 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
        if (v25)
        {
          if (v20) {
            uint64_t v26 = v20 + 48;
          }
          else {
            uint64_t v26 = 0;
          }
          int v27 = (void **)&v39;
          vp::vx::io::get_log_context_info(v26, (uint64_t)"vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>]", 67, &v39);
          uint64_t v28 = HIBYTE(vars0);
          uint64_t v29 = vars0;
          uint64_t v31 = vp::get_log(v30);
          BOOL v25 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          if (v25)
          {
            if ((v28 & 0x80u) == 0) {
              uint64_t v32 = v28;
            }
            else {
              uint64_t v32 = v29;
            }
            if (vars0 < 0) {
              int v27 = v39;
            }
            if (v32) {
              uint64_t v33 = " ";
            }
            else {
              uint64_t v33 = "";
            }
            unsigned int v34 = *((_DWORD *)a1 + 2);
            int v35 = bswap32(v34);
            *(_DWORD *)((char *)&a9 + 1) = v35;
            if (((char)v35 - 32) > 0x5E
              || (((__int16)v35 >> 8) - 32) > 0x5E
              || ((v35 << 8 >> 24) - 32) > 0x5E
              || ((v35 >> 24) - 32) > 0x5E)
            {
              std::to_string(&v38, v34);
            }
            else
            {
              *(_WORD *)((char *)&a9 + 5) = 39;
              LOBYTE(a9) = 39;
              std::string::basic_string[abi:ne180100]<0>(&v38, (char *)&a9);
            }
            __int16 v36 = &v38;
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v36 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            LODWORD(a9) = 136315650;
            *(void *)((char *)&a9 + 4) = v27;
            WORD6(a9) = 2080;
            *(void *)((char *)&a9 + 14) = v33;
            a12 = 2080;
            a13 = v36;
            _os_log_impl(&dword_1BB0CE000, v31, OS_LOG_TYPE_DEFAULT, "%s%ssetting property %s", (uint8_t *)&a9, 0x20u);
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v38.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(vars0) < 0) {
            operator delete(v39);
          }
        }
        MEMORY[0x1F4188790](v25);
        uint64_t v39 = (void **)((unint64_t)v37 & 0xFFFFFFFFFFFFFFC0);
        long long vars0 = xmmword_1BB871C30;
        vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>((uint64_t)&v39 + 2, *a2);
        vp::Blob::Blob(&v38, (const void *)((unint64_t)v37 & 0xFFFFFFFFFFFFFFC0), *((uint64_t *)&vars0 + 1));
        (*(void (**)(long long *__return_ptr, uint64_t, void, std::string *))(*(void *)v23 + 40))(&a9, v23, *((unsigned int *)a1 + 2), &v38);
        if (!a16) {
          vp::vx::io::Error::~Error((vp::vx::io::Error *)&a9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
}

void sub_1BB2843F8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(AUVoiceIOOtherAudioDuckingLevel const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__user_alloc_construct_impl[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v9, a4);
  *(void *)(a1 + 48) = &unk_1F1493718;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 56) = v6 + 24;
  *(void *)(a1 + 64) = v6;
  *(void *)a1 = &unk_1F14A5CB0;
  *(void *)(a1 + 48) = &unk_1F14A5CF8;
  *(_DWORD *)(a1 + 8) = v5;
  vp::vx::data_flow::State<void>::State(a1 + 16, (uint64_t)v9);
  *(_DWORD *)(a1 + 40) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a1 + 16);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    uint64_t v8 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v8);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v9);
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Command<AUVoiceIOOtherAudioDuckingLevel>,unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&>(unsigned int const&,vp::vx::data_flow::State<AUVoiceIOOtherAudioDuckingLevel> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 72, 8);
  }
  return a1;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_property_setter_delegates(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = v1 + 1440;
  uint64_t v3 = v1 + 8;
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)75>(v1 + 8, (uint64_t)v7);
  vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(v2, 0x73706D64u, (uint64_t)v7);
  vp::vx::data_flow::State<void>::~State((uint64_t)v7);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)72>(v3, (uint64_t)v6);
  vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(v2, 0x64766F72u, (uint64_t)v6);
  vp::vx::data_flow::State<void>::~State((uint64_t)v6);
  vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)73>(v3, (uint64_t)v5);
  vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(v2, 0x75696F72u, (uint64_t)v5);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v5);
}

void sub_1BB2846E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::State<void>::~State((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  char v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>;
  unsigned int v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  uint64_t v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((void *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1BB2847D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a3);
  char v9 = caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>;
  unsigned int v10 = a2;
  vp::vx::data_flow::State<void>::State((uint64_t)v11, (uint64_t)v7);
  uint64_t v4 = (uint64_t *)boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript((void *)(a1 + 8), &v8);
  caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v4, (uint64_t *)&v9);
  ((void (*)(uint64_t))v9[3])((uint64_t)&v10);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

void sub_1BB2848E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    uint64_t v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  long long v4 = v7[0];
  long long v5 = v7[1];
  *(void *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));

  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<std::vector<unsigned char>>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<std::vector<unsigned char>>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<std::vector<unsigned char>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB871660;
  uint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1BB284AA4(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(void *a1, int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 112, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>((uint64_t)a1, v10, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB284BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,0>(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)(a1 + 72), v3, *(void *)(a1 + 64) - v3);
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 88) = &unk_1F1493718;
  long long v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::~IO_Property_Setter_Delegate(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)(a1 + 72), v3, *(void *)(a1 + 64) - v3);
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 88) = &unk_1F1493718;
  long long v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void virtual thunk to'vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::~IO_Property_Setter_Delegate(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  uint64_t v3 = *((void *)v1 + 6);
  if (v3)
  {
    *((void *)v1 + 7) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)v1 + 9, v3, *((void *)v1 + 8) - v3);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 11) = &unk_1F1493718;
  long long v4 = (std::__shared_weak_count *)*((void *)v1 + 13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  char *v1;
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  uint64_t v3 = *((void *)v1 + 6);
  if (v3)
  {
    *((void *)v1 + 7) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)v1 + 9, v3, *((void *)v1 + 8) - v3);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 11) = &unk_1F1493718;
  long long v4 = (std::__shared_weak_count *)*((void *)v1 + 13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

_DWORD *vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v5 = operator new(4uLL);
    *a3 = v5;
    *uint64_t v5 = v4;
    uint64_t result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(std::__shared_mutex_base *result, int a2)
{
  int v2 = result;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    int v4 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v4)
    {
      uint64_t result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v4);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
  }
  else if (!a2)
  {
    v5[0] = &unk_1F14A5E90;
    v5[1] = result;
    v5[3] = v5;
    std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
    uint64_t v8 = 0;
    uint64_t v3 = operator new(0x28uLL);
    *uint64_t v3 = &unk_1F14A5E48;
    std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), (uint64_t)v6);
    uint64_t v8 = v3;
    LODWORD(v3) = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v7);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v7);
    std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::~__value_func[abi:ne180100](v6);
    *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v3;
    return (std::__shared_mutex_base *)std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::~__value_func[abi:ne180100](v5);
  }
  return result;
}

void sub_1BB284F04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::~IO_Property_Setter_Delegate(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)(a1 + 72), v3, *(void *)(a1 + 64) - v3);
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 88) = &unk_1F1493718;
  int v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::process(uint64_t result, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v4 = result;
    uint64_t v9 = result + 80;
    int v5 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(result + 80));
    char v10 = v5;
    if (v5 && *(unsigned char *)(v4 + 84))
    {
      vp::Blob::Blob(v8, *(const void **)(v4 + 48), *(void *)(v4 + 56) - *(void *)(v4 + 48));
      (*(void (**)(void *__return_ptr, uint64_t, void, void *))(*(void *)a3 + 40))(v6, a3, *(unsigned int *)(v4 + 8), v8);
      if (!v7) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v6);
      }
      *(unsigned char *)(v4 + 84) = 0;
    }
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
  }
  return result;
}

uint64_t std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100](void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a2, a3, 1);
}

uint64_t std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5E48;
  std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5E48;
  std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  *int v2 = &unk_1F14A5E48;
  std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB2852E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5E48;
  return std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<std::vector<unsigned char>>::register_listener(std::function<void ()(std::vector<unsigned char> const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(uint64_t result, int a2, vp::vx::data_flow::Value *this)
{
  if (*(void *)(result + 24)) {
    BOOL v3 = *((void *)this + 2) == (void)&vp::vx::data_flow::Value::type_id<std::vector<unsigned char>>(void)::s_type_id;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t result = vp::vx::data_flow::Value::view_storage(this);
    if (result)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 48);
      return v6();
    }
  }
  return result;
}

void std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::~__func()
{
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5E90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A5E90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}>,void ()(std::vector<unsigned char> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(std::vector<unsigned char> const&)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v16 = (caulk::pooled_semaphore_mutex *)(*a1 + 80);
  int v4 = caulk::pooled_semaphore_mutex::try_lock(v16);
  char v17 = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    unint64_t v6 = v5 - *(void *)a2;
    if (v5 != *(void *)a2)
    {
      char v7 = *(char **)(v3 + 48);
      unint64_t v8 = *(void *)(v3 + 56) - (void)v7;
      BOOL v9 = v6 >= v8;
      size_t v10 = v6 - v8;
      if (v10 != 0 && v9)
      {
        std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), v10);
        char v7 = *(char **)(v3 + 48);
      }
      else if (!v9)
      {
        *(void *)(v3 + 56) = &v7[v6];
      }
      vp::Mutable_Blob::Mutable_Blob(v14, v7, v6);
      vp::Blob_Setter<vp::Mutable_Blob>::set<vp::Blob_View<unsigned char const>>((uint64_t)v14 + 2, *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
      uint64_t v11 = *(void *)(v3 + 48);
      unint64_t v12 = *(void *)(v3 + 56) - v11;
      if (v15 <= v12)
      {
        if (v15 < v12) {
          *(void *)(v3 + 56) = v11 + v15;
        }
      }
      else
      {
        std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), v15 - v12);
      }
      *(unsigned char *)(v3 + 84) = 1;
    }
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v16);
}

void sub_1BB28561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::byte,vp::Allocator<std::byte>>::__append(uint64_t *a1, size_t a2)
{
  unint64_t v6 = a1 + 1;
  int v4 = (char *)a1[1];
  uint64_t v5 = v6[1];
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      unint64_t v12 = &v4[a2];
      bzero(v4, a2);
      int v4 = v12;
    }
    a1[1] = (uint64_t)v4;
  }
  else
  {
    char v7 = &v4[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v5 - *a1;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], v10, 1);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v7[v11];
    uint64_t v14 = v11 + v10;
    unint64_t v15 = &v13[a2];
    bzero(v13, a2);
    uint64_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        char v18 = *(unsigned char *)--v16;
        *--uint64_t v13 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = *a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v15;
    uint64_t v19 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100](a1 + 3, v16, v19 - v16);
    }
  }
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  }
  return a1;
}

{
  if (*(unsigned char *)(a1 + 8)) {
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<unsigned char> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a4);
  vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::IO_Property_Setter_Delegate(a2, v5, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>::IO_Property_Setter_Delegate(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 88) = &unk_1F1493718;
  unint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 96) = v6 + 24;
  *(void *)(a1 + 104) = v6;
  *(void *)a1 = &unk_1F14A5DD8;
  *(void *)(a1 + 88) = &unk_1F14A5E28;
  *(_DWORD *)(a1 + 8) = a2;
  char v7 = (std::pmr *)vp::vx::data_flow::State<void>::State(a1 + 16, a3);
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = std::pmr::get_default_resource(v7);
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 80));
  *(unsigned char *)(a1 + 84) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a3);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    uint64_t v9 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v9);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return a1;
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&>(unsigned int const&,vp::vx::data_flow::State<std::vector<unsigned char>> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 112, 8);
  }
  return a1;
}

unsigned int *boost::container::flat_map<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<std::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_subscript(void *a1, unsigned int *a2)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v14 = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v17 = (void (**)())(v2 + 48 * v3);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(&v14, &v17, a2, &v13);
  char v7 = v13;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (!v8 && v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v13 == (unsigned int *)(v8 + 48 * v9))
  {
    unsigned int v10 = *a2;
LABEL_13:
    LODWORD(v14) = v10;
    uint64_t v17 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    unint64_t v15 = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    unint64_t v12 = v13;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, &v12, (uint64_t)&v14, (uint64_t **)&v13);
    char v7 = v13;
    ((void (*)(uint64_t *))v15[3])(&v16);
    ((void (*)(void *))v17[3])(v18);
    if (!v7) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    return v7 + 2;
  }
  if (!v13) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v10 = *a2;
  if (*a2 < *v13) {
    goto LABEL_13;
  }
  return v7 + 2;
}

void sub_1BB285BF4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,false>,vp::vx::Graph_Property_ID>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*a2 - *a1) >> 4);
    unsigned int v6 = *a3;
    BOOL v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v4) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[12 * (v5 >> 1)];
      if (*v8 < v6)
      {
        BOOL v4 = v8 + 12;
        *a1 = v8 + 12;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable(void)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::emplace_hint_unique<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  unsigned int v10 = *(_DWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
  uint64_t v11 = v7;
  (*(void (**)(void *, uint64_t))(v7 + 16))(v12, a3 + 16);
  uint64_t v9 = *a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique(a1, &v9, &v10, a4);
  return (*(uint64_t (**)(void *))(v11 + 24))(v12);
}

void sub_1BB285E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::insert_unique@<X0>(void *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > (unint64_t)*a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)*a2 > v5 + 48 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v11 = *a2;
  unint64_t v12 = 0;
  uint64_t result = (uint64_t *)boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare((uint64_t)a1, &v11, a3, &v12);
  if (result)
  {
    uint64_t v13 = (uint64_t *)v12;
    return boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>(a1, &v13, (uint64_t)a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v12) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = (uint64_t *)v12;
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  BOOL v4 = *(unsigned int **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v9 = &v4[12 * v5];
  unsigned int v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 >= *v10)
    {
      char v18 = v9;
      uint64_t v19 = v10;
      uint64_t v16 = (uint64_t *)&v19;
      uint64_t v17 = &v18;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  uint64_t v11 = *a2;
  if (*a2 == v4) {
    return 1;
  }
  if (!v11) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  unsigned int v14 = *(v11 - 12);
  unint64_t v12 = v11 - 12;
  unsigned int v13 = v14;
  if (v14 < *a3) {
    return 1;
  }
  if (*a3 < v13)
  {
    uint64_t v21 = v4;
    uint64_t v20 = v12;
    uint64_t v16 = (uint64_t *)&v21;
    uint64_t v17 = &v20;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(a1, v16, v17, a3, a4);
  }
  BOOL result = 0;
  *a4 = v12;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,boost::container::dtl::select1st<vp::vx::Graph_Property_ID>,std::less<vp::vx::Graph_Property_ID>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,true>,vp::vx::Graph_Property_ID>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a4 < *v9;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::emplace<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>@<X0>(void *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > (unint64_t)v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)v5 > v6 + 48 * v8) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    return (uint64_t *)boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, (uint64_t)v5, (const char *)1, a3, a4);
  }
  else
  {
    BOOL result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
  return result;
}

uint64_t *boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3]) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v8 = a1[1];
  BOOL v9 = (uint64_t *)(v8 + 48 * v4);
  if (v9 == a2)
  {
    *(_DWORD *)a2 = *(_DWORD *)a4;
    uint64_t v16 = v8 + 48 * v4;
    uint64_t v17 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *(void *)(v16 + 8) = v17;
    BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16 + 16, a4 + 16);
    ++a1[2];
  }
  else
  {
    unint64_t v10 = v9 - 6;
    *(_DWORD *)BOOL v9 = *((_DWORD *)v9 - 12);
    uint64_t v11 = v8 + 48 * v4;
    uint64_t v12 = *(v9 - 5);
    *(v9 - 5) = (uint64_t)&caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *(void *)(v11 + 8) = v12;
    (*(void (**)(uint64_t, _DWORD *))(v12 + 16))(v11 + 16, (_DWORD *)v9 - 8);
    ++a1[2];
    if (v10 != a2)
    {
      unsigned int v13 = v10;
      do
      {
        int v14 = *((_DWORD *)v13 - 12);
        v13 -= 6;
        *(_DWORD *)unint64_t v10 = v14;
        caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(v10 + 1, v10 - 5);
        unint64_t v10 = v13;
      }
      while (v13 != a2);
    }
    *(_DWORD *)a2 = *(_DWORD *)a4;
    return caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(a2 + 1, (uint64_t *)(a4 + 8));
  }
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::cf::Notification_Center::Listener>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0x555555555555556) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<applesauce::CF::StringRef,vp::cf::Notification_Center::Listener>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  uint64_t result = boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
  return result;
}

uint64_t boost::container::vector<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>,vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[0] = a2;
  v15[1] = a1;
  v15[2] = a3;
  uint64_t v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>((uint64_t)a1, v10, a4, v10 + 48 * a1[2], a2, a5, a6);
  v15[0] = 0;
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = v10 + 16;
      do
      {
        (*(void (**)(uint64_t))(*(void *)(v12 - 8) + 24))(v12);
        v12 += 48;
        --v11;
      }
      while (v11);
    }
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1[1], 48 * a1[3], 8);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
  return boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)v15);
}

void sub_1BB286520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::uninitialized_move_and_insert_alloc<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>*,boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (a2 != a3)
  {
    do
    {
      uint64_t v12 = a5;
      *(_DWORD *)a5 = *(_DWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
      *(void *)(a5 + 8) = v13;
      uint64_t v14 = a2 + 16;
      uint64_t v15 = a5 + 16;
      (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v15, a2 + 16);
      a2 = v14 + 32;
      a5 = v15 + 32;
    }
    while (v14 + 32 != v11);
    a5 = v12 + 48;
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(_DWORD *)a5 = *(_DWORD *)a7;
  uint64_t v16 = *(void *)(a7 + 8);
  *(void *)(a7 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
  *(void *)(a5 + 8) = v16;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(a5 + 16, a7 + 16);
  uint64_t v18 = a5 + 48;
  while (v11 != a4)
  {
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v11;
    uint64_t v19 = *(void *)(v11 + 8);
    *(void *)(v11 + 8) = &caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::empty;
    *(void *)(v18 + 8) = v19;
    uint64_t v20 = v11 + 16;
    uint64_t v21 = v18 + 16;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18 + 16, v20);
    uint64_t v11 = v20 + 32;
    uint64_t v18 = v21 + 32;
  }
  return result;
}

void sub_1BB28668C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *boost::container::dtl::scoped_destructor_range<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 24))(v2 + 16);
    uint64_t v3 = a1[1];
    uint64_t v2 = *a1 + 48;
    *a1 = v2;
  }
  return a1;
}

uint64_t boost::container::dtl::scoped_array_deallocator<vp::Allocator<boost::container::dtl::pair<vp::vx::Graph_Property_ID,caulk::inplace_function<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>> ()(vp::Allocator<std::byte>),32ul,8ul,caulk::inplace_function_detail::vtable>>>>::~scoped_array_deallocator(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), *(void *)a1, 48 * *(void *)(a1 + 16), 8);
  }
  return a1;
}

uint64_t *caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *,vp::Allocator<std::byte>&&)#1}::__invoke@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = *a2;
  vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(&v8, a1, (uint64_t)(a1 + 2), (uint64_t)v7);
  long long v4 = v7[0];
  long long v5 = v7[1];
  *(void *)&v7[0] = 0;
  *a3 = v4;
  a3[1] = v5;
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100]((uint64_t *)v7, 0);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *,void *)#1}::__invoke(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  return vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *,void *)#2}::__invoke(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = (uint64_t)(a2 + 2);
  *a1 = *a2;
  vp::vx::data_flow::State<void>::State((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));

  return vp::vx::data_flow::State<void>::~State(v2);
}

uint64_t caulk::inplace_function_detail::vtable<std::unique_ptr<vp::vx::io::Node_Delegate,vp::Allocator_Delete<vp::vx::io::Node_Delegate>>,vp::Allocator<std::byte>>::vtable<void vp::vx::IO_Property_Setter_Delegate_Factory::add_property_setter<CAOrientation>(vp::vx::Graph_Property_ID,vp::vx::data_flow::State<CAOrientation>)::{lambda(vp::Allocator<std::byte>)#1}>(caulk::inplace_function_detail::wrapper<CAOrientation>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return vp::vx::data_flow::State<void>::~State(a1 + 8);
}

uint64_t *vp::allocate_unique<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v5 = v8;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = xmmword_1BB871660;
  uint64_t v6 = std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(&v8, a2, a3);
  return std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100]((uint64_t *)a4, v6);
}

void sub_1BB286868(_Unwind_Exception *a1)
{
  std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,vp::Allocator_Delete<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    uint64_t v3 = result;
    std::__destroy_at[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<std::vector<unsigned char>>,0>(v2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3[1] + 24))(v3[1], v2, v3[2], v3[3]);
  }
  return result;
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(void *a1, int *a2, uint64_t a3)
{
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 16))(*a1, 112, 8);
  v8[0] = &v10;
  v8[1] = a1;
  std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>((uint64_t)a1, v10, a2, a3);
  char v9 = 1;
  uint64_t v6 = v10;
  std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<CAOrientation> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v6;
}

void sub_1BB28698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::~IO_Property_Setter_Delegate(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)(a1 + 72), v3, *(void *)(a1 + 64) - v3);
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 88) = &unk_1F1493718;
  long long v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void virtual thunk to'vp::vx::IO_Property_Setter_Delegate<CAOrientation>::~IO_Property_Setter_Delegate(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  uint64_t v3 = *((void *)v1 + 6);
  if (v3)
  {
    *((void *)v1 + 7) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)v1 + 9, v3, *((void *)v1 + 8) - v3);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 11) = &unk_1F1493718;
  long long v4 = (std::__shared_weak_count *)*((void *)v1 + 13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  char *v1;
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  int v2 = *((_DWORD *)v1 + 10);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener((uint64_t)(v1 + 16), v2);
    *((_DWORD *)v1 + 10) = 0;
  }
  uint64_t v3 = *((void *)v1 + 6);
  if (v3)
  {
    *((void *)v1 + 7) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)v1 + 9, v3, *((void *)v1 + 8) - v3);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)(v1 + 16));
  *((void *)v1 + 11) = &unk_1F1493718;
  long long v4 = (std::__shared_weak_count *)*((void *)v1 + 13);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

_DWORD *vp::vx::IO_Property_Setter_Delegate<CAOrientation>::get_property_ids@<X0>(_DWORD *result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v4 = result[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v5 = operator new(4uLL);
    *a3 = v5;
    *uint64_t v5 = v4;
    uint64_t result = v5 + 1;
    a3[1] = result;
    a3[2] = result;
  }
  return result;
}

std::__shared_mutex_base *vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(std::__shared_mutex_base *result, int a2)
{
  int v2 = result;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    int v4 = *(_DWORD *)&result->__mut_.__m_.__opaque[32];
    if (v4)
    {
      uint64_t result = vp::vx::data_flow::State<void>::unregister_listener((uint64_t)&result->__mut_.__m_.__opaque[8], v4);
      *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = 0;
    }
  }
  else if (!a2)
  {
    v5[0] = &unk_1F14A5FE8;
    v5[1] = result;
    v5[3] = v5;
    std::__function::__value_func<void ()(CAOrientation const&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
    uint64_t v8 = 0;
    uint64_t v3 = operator new(0x28uLL);
    *uint64_t v3 = &unk_1F14A5FA0;
    std::__function::__value_func<void ()(CAOrientation const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 1), (uint64_t)v6);
    uint64_t v8 = v3;
    LODWORD(v3) = vp::vx::data_flow::State<void>::register_listener((uint64_t)&v2->__mut_.__m_.__opaque[8], (uint64_t)v7);
    std::__function::__value_func<void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__value_func[abi:ne180100](v7);
    std::__function::__value_func<void ()(CAOrientation const&)>::~__value_func[abi:ne180100](v6);
    *(_DWORD *)&v2->__mut_.__m_.__opaque[32] = v3;
    return (std::__shared_mutex_base *)std::__function::__value_func<void ()(CAOrientation const&)>::~__value_func[abi:ne180100](v5);
  }
  return result;
}

void sub_1BB286C2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void vp::vx::IO_Property_Setter_Delegate<CAOrientation>::~IO_Property_Setter_Delegate(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    vp::vx::data_flow::State<void>::unregister_listener(a1 + 16, v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    std::allocator_traits<vp::Allocator<std::byte>>::deallocate[abi:ne180100]((void *)(a1 + 72), v3, *(void *)(a1 + 64) - v3);
  }
  vp::vx::data_flow::State<void>::~State(a1 + 16);
  *(void *)(a1 + 88) = &unk_1F1493718;
  int v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::process(uint64_t result, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v4 = result;
    uint64_t v9 = result + 80;
    int v5 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(result + 80));
    char v10 = v5;
    if (v5 && *(unsigned char *)(v4 + 84))
    {
      vp::Blob::Blob(v8, *(const void **)(v4 + 48), *(void *)(v4 + 56) - *(void *)(v4 + 48));
      (*(void (**)(void *__return_ptr, uint64_t, void, void *))(*(void *)a3 + 40))(v6, a3, *(unsigned int *)(v4 + 8), v8);
      if (!v7) {
        vp::vx::io::Error::~Error((vp::vx::io::Error *)v6);
      }
      *(unsigned char *)(v4 + 84) = 0;
    }
    return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
  }
  return result;
}

void *std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5FA0;
  std::__function::__value_func<void ()(CAOrientation const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14A5FA0;
  std::__function::__value_func<void ()(CAOrientation const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  *int v2 = &unk_1F14A5FA0;
  std::__function::__value_func<void ()(CAOrientation const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BB286F48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A5FA0;
  return std::__function::__value_func<void ()(CAOrientation const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(CAOrientation const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(CAOrientation const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1},std::allocator<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>,vp::vx::data_flow::Call_Immediately)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1}>,void ()(unsigned int,vp::vx::data_flow::Value const&)>::operator()(uint64_t a1, int a2, vp::vx::data_flow::Value *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<vp::vx::data_flow::State<CAOrientation>::register_listener(std::function<void ()(CAOrientation const&)>)::{lambda(unsigned int,vp::vx::data_flow::Value const&)#1} &,unsigned int,vp::vx::data_flow::Value const&>(a1 + 8, a2, a3);
}

void std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::~__func()
{
}

void *std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A5FE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A5FE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1},std::allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}>,void ()(CAOrientation const&)>::operator()(uint64_t a1, int *a2)
{
  return vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::notify(vp::vx::io::Event,vp::vx::io::Node &)::{lambda(CAOrientation const&)#1}::operator()(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  uint64_t v12 = (caulk::pooled_semaphore_mutex *)(*a1 + 80);
  int v4 = caulk::pooled_semaphore_mutex::try_lock(v12);
  char v13 = v4;
  if (v4)
  {
    int v5 = *(char **)(v3 + 48);
    unint64_t v6 = *(void *)(v3 + 56) - (void)v5;
    if (v6 > 3)
    {
      if (v6 != 4) {
        *(void *)(v3 + 56) = v5 + 4;
      }
    }
    else
    {
      std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), 4 - v6);
      int v5 = *(char **)(v3 + 48);
    }
    vp::Mutable_Blob::Mutable_Blob(v10, v5, 4);
    vp::Blob_Setter<vp::Mutable_Blob>::set<unsigned int>((uint64_t)v10 + 2, *a2);
    uint64_t v7 = *(void *)(v3 + 48);
    unint64_t v8 = *(void *)(v3 + 56) - v7;
    if (v11 <= v8)
    {
      if (v11 < v8) {
        *(void *)(v3 + 56) = v7 + v11;
      }
    }
    else
    {
      std::vector<std::byte,vp::Allocator<std::byte>>::__append((uint64_t *)(v3 + 48), v11 - v8);
    }
    *(unsigned char *)(v3 + 84) = 1;
  }
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
}

void sub_1BB287144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::construct[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  vp::vx::data_flow::State<void>::State((uint64_t)v7, a4);
  vp::vx::IO_Property_Setter_Delegate<CAOrientation>::IO_Property_Setter_Delegate(a2, v5, (uint64_t)v7);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v7);
}

uint64_t vp::vx::IO_Property_Setter_Delegate<CAOrientation>::IO_Property_Setter_Delegate(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 88) = &unk_1F1493718;
  unint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1F1493738;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(a1 + 96) = v6 + 24;
  *(void *)(a1 + 104) = v6;
  *(void *)a1 = &unk_1F14A5F30;
  *(void *)(a1 + 88) = &unk_1F14A5F80;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v7 = (std::pmr *)vp::vx::data_flow::State<void>::State(a1 + 16, a3);
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = std::pmr::get_default_resource(v7);
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 80));
  *(unsigned char *)(a1 + 84) = 0;
  vp::vx::data_flow::State<void>::State((uint64_t)v10, a3);
  if (!vp::vx::data_flow::State_Transaction::operator BOOL((uint64_t)v10))
  {
    uint64_t v9 = _os_crash();
    caulk::details::lifetime_guard_base<vp::vx::Telephony_Utility_Manager>::~lifetime_guard_base(v9);
  }
  vp::vx::data_flow::State<void>::~State((uint64_t)v10);
  return a1;
}

uint64_t std::__exception_guard_exceptions<vp::vx::IO_Property_Setter_Delegate<CAOrientation> * std::pmr::polymorphic_allocator<vp::vx::IO_Property_Setter_Delegate<CAOrientation>>::new_object[abi:ne180100]<vp::vx::IO_Property_Setter_Delegate<CAOrientation>,unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&>(unsigned int const&,vp::vx::data_flow::State<CAOrientation> const&)::{lambda(void)#1}>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    (*(void (**)(void, void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 24))(**(void **)(a1 + 8), **(void **)a1, 112, 8);
  }
  return a1;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_io_personal_audio_command(void)::$_0>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (!*(unsigned char *)(v1 + 2592))
  {
    vp::Service_Provider::get<vp::services::Personal_Audio,(decltype(nullptr))0>(*(void **)(v1 + 456), &v2);
    if ((void)v2) {
      std::optional<vp::vx::IO_Personal_Audio_Command_Factory>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,void>((vp::vx::IO_Personal_Audio_Command_Factory *)(v1 + 2536), v1, v1, &v2);
    }
    if (*((void *)&v2 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v2 + 1));
    }
  }
}

void sub_1BB2873B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void vp::Service_Provider::get<vp::services::Personal_Audio,(decltype(nullptr))0>(void *a1@<X0>, void *a2@<X8>)
{
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::small_vector<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>,16ul,vp::Allocator<boost::container::dtl::pair<unsigned int,std::unique_ptr<vp::Service>>>,void>>::find((uint64_t)(a1 + 2), &vp::Service_Interface<1885692277u>::k_service_type_id, v9);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v7 = v9[0];
  if (v9[0] == (unsigned int *)(v4 + 16 * v5))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    std::shared_ptr<vp::Service_Provider const>::shared_ptr[abi:ne180100]<vp::Service_Provider,void>(v9, a1);
    unint64_t v8 = v9[1];
    *a2 = *((void *)v7 + 1);
    a2[1] = v8;
  }
}

vp::vx::IO_Personal_Audio_Command_Factory *std::optional<vp::vx::IO_Personal_Audio_Command_Factory>::emplace[abi:ne180100]<vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,void>(vp::vx::IO_Personal_Audio_Command_Factory *this, uint64_t a2, uint64_t a3, long long *a4)
{
  if (*((unsigned char *)this + 56))
  {
    vp::vx::IO_Personal_Audio_Command_Factory::~IO_Personal_Audio_Command_Factory(this);
    *((unsigned char *)this + 56) = 0;
  }
  std::construct_at[abi:ne180100]<vp::vx::IO_Personal_Audio_Command_Factory,vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,vp::vx::IO_Personal_Audio_Command_Factory*>(this, a2, a3, a4);
  *((unsigned char *)this + 56) = 1;
  return this;
}

void *std::construct_at[abi:ne180100]<vp::vx::IO_Personal_Audio_Command_Factory,vp::vx::Voice_Processor &,vp::vx::Voice_Processor &,std::shared_ptr<vp::services::Personal_Audio>,vp::vx::IO_Personal_Audio_Command_Factory*>(void *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  long long v6 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  vp::vx::IO_Personal_Audio_Command_Factory::IO_Personal_Audio_Command_Factory(a1, (vp::vx::Voice_Processor_State_Manager *)(a2 + 16), a3 + 8, &v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  return a1;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0>(vp **a1)
{
}

void vp::vx::Voice_Processor::log_configuration_changes(vp::Domain)::$_0::operator()(vp *a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1 + 888;
  uint64_t v3 = *(void *)a1 + 928;
  if (**((_DWORD **)a1 + 1)) {
    uint64_t v4 = *(void *)a1 + 928;
  }
  else {
    uint64_t v4 = *(void *)a1 + 888;
  }
  uint64_t v5 = *(void *)(v4 + 24);
  log = vp::get_log(a1);
  BOOL v7 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v56);
      std::string::size_type v9 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
      unint64_t v11 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        if ((v9 & 0x80u) == 0) {
          std::string::size_type v12 = v9;
        }
        else {
          std::string::size_type v12 = size;
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v13 = &v56;
        }
        else {
          char v13 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if (v12) {
          uint64_t v14 = " ";
        }
        else {
          uint64_t v14 = "";
        }
        int v15 = **((_DWORD **)a1 + 1);
        *(_DWORD *)buf = 136315650;
        *(void *)__int16 v59 = v13;
        *(_WORD *)&v59[8] = 2080;
        *(void *)&v59[10] = v14;
        if (v15) {
          uint64_t v16 = "downlink";
        }
        else {
          uint64_t v16 = "uplink";
        }
        __int16 v60 = 2080;
        *(void *)std::vector<char> v61 = v16;
        _os_log_impl(&dword_1BB0CE000, v11, OS_LOG_TYPE_DEFAULT, "%s%sdetected %s configuration state changes", buf, 0x20u);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
    }
    int v17 = **((_DWORD **)a1 + 1);
    if (v17) {
      uint64_t v18 = v3;
    }
    else {
      uint64_t v18 = v2;
    }
    if (v17) {
      __darwin_ct_rune_t v19 = 100;
    }
    else {
      __darwin_ct_rune_t v19 = 117;
    }
    uint64_t v20 = __toupper(v19);
    char v21 = v20;
    unint64_t v22 = *(void *)(v18 + 24);
    uint64_t v23 = 2 * v22;
    MEMORY[0x1F4188790](v20);
    unsigned __int8 v24 = &v54 - 2 * v22;
    if (v22)
    {
      BOOL v25 = &v54 - 2 * v22;
      do
      {
        *(unsigned char *)BOOL v25 = 0;
        *((unsigned char *)v25 + 24) = 0;
        v25 += 2;
      }
      while (v25 != &v54);
    }
    uint64_t v26 = *(uint64_t **)(v18 + 16);
    if (v26)
    {
      int v27 = &v54 - 2 * v22;
      do
      {
        *(_DWORD *)buf = *((_DWORD *)v26 + 4);
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v59[4], (long long *)(v26 + 3));
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v56, (long long *)&v59[4]);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v27, (__n128 *)&v56);
        if (v57 && SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (v61[8] && (v61[7] & 0x80000000) != 0) {
          operator delete(*(void **)&v59[4]);
        }
        uint64_t v26 = (uint64_t *)*v26;
        v27 += 2;
      }
      while (v26);
    }
    unint64_t v28 = 126 - 2 * __clz(v22);
    if (v22) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,false>(&v54 - 2 * v22, &v54, (uint64_t)buf, v29, 1);
    if (v22)
    {
      *((void *)&v54 + 1) = &v54;
      int v32 = v21;
      *(void *)&long long v31 = 136315906;
      long long v55 = v31;
      uint64_t v33 = 32 * v22;
      unsigned int v34 = &v54 - 2 * v22;
      do
      {
        if (*((unsigned char *)v34 + 24))
        {
          int v35 = vp::get_log((vp *)v30);
          BOOL v30 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          if (v30)
          {
            __int16 v36 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v56);
            std::string::size_type v37 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            std::string::size_type v38 = v56.__r_.__value_.__l.__size_;
            uint64_t v39 = vp::get_log(v36);
            BOOL v30 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
            if (v30)
            {
              if ((v37 & 0x80u) == 0) {
                std::string::size_type v40 = v37;
              }
              else {
                std::string::size_type v40 = v38;
              }
              uint64_t v41 = &v56;
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v41 = (std::string *)v56.__r_.__value_.__r.__words[0];
              }
              uint64_t v42 = "";
              if (v40) {
                uint64_t v42 = " ";
              }
              uint64_t v43 = v34;
              if (*((char *)v34 + 23) < 0) {
                uint64_t v43 = *(long long **)v34;
              }
              *(_DWORD *)buf = v55;
              *(void *)__int16 v59 = v41;
              *(_WORD *)&v59[8] = 2080;
              *(void *)&v59[10] = v42;
              __int16 v60 = 1024;
              *(_DWORD *)std::vector<char> v61 = v32;
              *(_WORD *)&v61[4] = 2080;
              *(void *)&v61[6] = v43;
              _os_log_impl(&dword_1BB0CE000, v39, OS_LOG_TYPE_DEFAULT, "%s%s(%cL) %s", buf, 0x26u);
            }
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
          }
        }
        v34 += 2;
        v33 -= 32;
      }
      while (v33);
      do
      {
        uint64_t v44 = &v24[v23];
        if (BYTE8(v24[v23 - 1]))
        {
          if (*((char *)v44 - 9) < 0) {
            operator delete(*((void **)v44 - 4));
          }
        }
        v23 -= 2;
      }
      while (v23 * 16);
    }
  }
  else if (v7)
  {
    uint64_t v45 = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, &v56);
    std::string::size_type v46 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    std::string::size_type v47 = v56.__r_.__value_.__l.__size_;
    uint64_t v48 = vp::get_log(v45);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      if ((v46 & 0x80u) == 0) {
        std::string::size_type v49 = v46;
      }
      else {
        std::string::size_type v49 = v47;
      }
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v50 = &v56;
      }
      else {
        uint64_t v50 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if (v49) {
        __int16 v51 = " ";
      }
      else {
        __int16 v51 = "";
      }
      int v52 = **((_DWORD **)a1 + 1);
      *(_DWORD *)buf = 136315650;
      *(void *)__int16 v59 = v50;
      *(_WORD *)&v59[8] = 2080;
      *(void *)&v59[10] = v51;
      if (v52) {
        __int16 v53 = "downlink";
      }
      else {
        __int16 v53 = "uplink";
      }
      __int16 v60 = 2080;
      *(void *)std::vector<char> v61 = v53;
      _os_log_impl(&dword_1BB0CE000, v48, OS_LOG_TYPE_DEFAULT, "%s%sdetected no %s configuration state changes", buf, 0x20u);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BB287A18(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    do
    {
      uint64_t v5 = v1 + v3;
      if (*(unsigned char *)(v1 + v3 - 8))
      {
        if (*(char *)(v5 - 9) < 0) {
          operator delete(*(void **)(v5 - 32));
        }
      }
      v3 -= 32;
    }
    while (v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,false>(long long *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)(a2 - 2), (uint64_t)v11) & 0x80) != 0)
          {
            std::optional<std::string>::swap[abi:ne180100](v11, a2 - 2);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,std::optional<std::string> *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      std::optional<std::string>::swap[abi:ne180100](v11, v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)(v11 - 2), (uint64_t)v11) & 0x80) == 0)
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>((uint64_t)v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v18 = (long long *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>((uint64_t)v11, (unint64_t)a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v11, v18);
    unint64_t v11 = v18 + 2;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(v18 + 2, a2))
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,false>(a1, v18, a3, -v13, a5 & 1);
      unint64_t v11 = v18 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((uint64_t)v11, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((__n128 *)v11, (__n128 *)a2);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 32;
    if (a1 + 32 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        uint64_t v7 = v4;
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>(v4, v6) & 0x80) != 0)
        {
          LOBYTE(__p[0]) = 0;
          char v12 = 0;
          if (*(unsigned char *)(v6 + 56))
          {
            *(_OWORD *)std::string __p = *(_OWORD *)v7;
            uint64_t v11 = *(void *)(v7 + 16);
            *(void *)(v7 + 8) = 0;
            *(void *)(v7 + 16) = 0;
            *(void *)uint64_t v7 = 0;
            char v12 = 1;
          }
          uint64_t v8 = v5;
          while (1)
          {
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + v8 + 32, (__n128 *)(a1 + v8));
            if (!v8) {
              break;
            }
            v8 -= 32;
            if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, v8 + a1) & 0x80) == 0)
            {
              uint64_t v9 = a1 + v8 + 32;
              goto LABEL_12;
            }
          }
          uint64_t v9 = a1;
LABEL_12:
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v9, (__n128 *)__p);
          if (v12)
          {
            if (SHIBYTE(v11) < 0) {
              operator delete(__p[0]);
            }
          }
        }
        uint64_t v4 = v7 + 32;
        v5 += 32;
        uint64_t v6 = v7;
      }
      while (v7 + 32 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(__n128 *a1, __n128 *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = (uint64_t)&a1[2];
    if (&a1[2] != a2)
    {
      do
      {
        uint64_t v5 = (__n128 *)v4;
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>(v4, (uint64_t)v3) & 0x80) != 0)
        {
          LOBYTE(__p[0]) = 0;
          char v8 = 0;
          if (v3[3].n128_u8[8])
          {
            *(__n128 *)std::string __p = *v5;
            unint64_t v7 = v5[1].n128_u64[0];
            v5->n128_u64[1] = 0;
            v5[1].n128_u64[0] = 0;
            v5->n128_u64[0] = 0;
            char v8 = 1;
          }
          do
          {
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v3[2], v3);
            v3 -= 2;
          }
          while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v3) & 0x80) != 0);
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)&v3[2], (__n128 *)__p);
          if (v8)
          {
            if (SHIBYTE(v7) < 0) {
              operator delete(__p[0]);
            }
          }
        }
        uint64_t v4 = (uint64_t)&v5[2];
        uint64_t v3 = v5;
      }
      while (&v5[2] != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(long long *a1, long long *a2, long long *a3)
{
  char v6 = std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1);
  int v7 = (char)std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2);
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      std::optional<std::string>::swap[abi:ne180100](a1, a3);
    }
    else
    {
      std::optional<std::string>::swap[abi:ne180100](a1, a2);
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2) & 0x80) != 0)
      {
        uint64_t v9 = a2;
        char v10 = a3;
LABEL_9:
        std::optional<std::string>::swap[abi:ne180100](v9, v10);
        return 2;
      }
    }
  }
  else
  {
    if ((v7 & 0x80000000) == 0) {
      return 0;
    }
    std::optional<std::string>::swap[abi:ne180100](a2, a3);
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1) & 0x80) != 0)
    {
      uint64_t v9 = a1;
      char v10 = a2;
      goto LABEL_9;
    }
  }
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>(uint64_t a1, long long *a2)
{
  uint64_t v2 = a2;
  LOBYTE(__p[0]) = 0;
  char v10 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    char v10 = 1;
  }
  if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)(a2 - 2)) & 0x80) != 0)
  {
    uint64_t v5 = (long long *)a1;
    do
      v5 += 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v5) & 0x80) == 0);
  }
  else
  {
    unint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = (long long *)v4;
      if (v4 >= (unint64_t)v2) {
        break;
      }
      char v6 = std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, v4);
      unint64_t v4 = (unint64_t)(v5 + 2);
    }
    while ((v6 & 0x80) == 0);
  }
  if (v5 < v2)
  {
    do
      v2 -= 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v2) & 0x80) != 0);
  }
  while (v5 < v2)
  {
    std::optional<std::string>::swap[abi:ne180100](v5, v2);
    do
      v5 += 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v5) & 0x80) == 0);
    do
      v2 -= 2;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)v2) & 0x80) != 0);
  }
  if (v5 - 2 != (long long *)a1) {
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, (__n128 *)v5 - 2);
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v5 - 2), (__n128 *)__p);
  if (v10 && SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

__n128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::optional<std::string> *,std::less<void> &>(uint64_t a1, unint64_t a2)
{
  LOBYTE(__p[0]) = 0;
  char v12 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    char v12 = 1;
  }
  uint64_t v4 = 0;
  do
    v4 += 32;
  while ((std::operator<=>[abi:ne180100]<std::string,std::string>(v4 + a1, (uint64_t)__p) & 0x80) != 0);
  unint64_t v5 = a1 + v4;
  char v6 = (__n128 *)(a1 + v4 - 32);
  if (v4 == 32)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      a2 -= 32;
    }
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>(a2, (uint64_t)__p) & 0x80) == 0);
  }
  else
  {
    do
      a2 -= 32;
    while ((std::operator<=>[abi:ne180100]<std::string,std::string>(a2, (uint64_t)__p) & 0x80) == 0);
  }
  if (v5 < a2)
  {
    int v7 = (long long *)(a1 + v4);
    char v8 = (long long *)a2;
    do
    {
      std::optional<std::string>::swap[abi:ne180100](v7, v8);
      do
        v7 += 2;
      while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v7, (uint64_t)__p) & 0x80) != 0);
      do
        v8 -= 2;
      while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, (uint64_t)__p) & 0x80) == 0);
    }
    while (v7 < v8);
    char v6 = (__n128 *)(v7 - 2);
  }
  if (v6 != (__n128 *)a1) {
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, v6);
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v6, (__n128 *)__p);
  if (v12 && SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(long long *a1, long long *a2)
{
  uint64_t v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)(a2 - 2), (uint64_t)a1) & 0x80) != 0) {
        std::optional<std::string>::swap[abi:ne180100](a1, a2 - 2);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a2 - 2);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return v4;
    default:
      uint64_t v5 = (uint64_t)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a1 + 2, a1 + 4);
      uint64_t v6 = (uint64_t)(a1 + 6);
      uint64_t v4 = 1;
      if (a1 + 6 == a2) {
        return v4;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>(v6, v5) & 0x80) != 0)
    {
      LOBYTE(__p[0]) = 0;
      char v15 = 0;
      if (*(unsigned char *)(v6 + 24))
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v6;
        uint64_t v14 = *(void *)(v6 + 16);
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)uint64_t v6 = 0;
        char v15 = 1;
      }
      uint64_t v9 = v7;
      while (1)
      {
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a1 + v9 + 96, (__n128 *)((char *)a1 + v9 + 64));
        if (v9 == -64) {
          break;
        }
        char v10 = std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)__p, (uint64_t)a1 + v9 + 32);
        v9 -= 32;
        if ((v10 & 0x80) == 0)
        {
          uint64_t v11 = (uint64_t)a1 + v9 + 96;
          goto LABEL_14;
        }
      }
      uint64_t v11 = (uint64_t)a1;
LABEL_14:
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v11, (__n128 *)__p);
      if (v15 && SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      if (++v8 == 8) {
        return v6 + 32 == (void)a2;
      }
    }
    uint64_t v5 = v6;
    v7 += 32;
    v6 += 32;
    if ((long long *)v6 == a2) {
      return 1;
    }
  }
}

uint64_t std::operator<=>[abi:ne180100]<std::string,std::string>(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 24);
  int v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a1, (void **)a2);
  }
  int v5 = v3 != 0;
  BOOL v4 = v2 == 0;
  int v6 = v2 != 0;
  int v7 = v4;
  if ((v5 & v7) != 0) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 1;
  }
  if (v6 != v5) {
    return v8;
  }
  else {
    return 0;
  }
}

void std::optional<std::string>::swap[abi:ne180100](long long *a1, long long *a2)
{
  if ((*((unsigned char *)a1 + 24) != 0) != (*((unsigned char *)a2 + 24) != 0))
  {
    if (*((unsigned char *)a1 + 24))
    {
      long long v4 = *a1;
      *((void *)a2 + 2) = *((void *)a1 + 2);
      *a2 = v4;
      *((void *)a1 + 1) = 0;
      *((void *)a1 + 2) = 0;
      *(void *)a1 = 0;
      *((unsigned char *)a2 + 24) = 1;
      if (*((unsigned char *)a1 + 24))
      {
        if (*((char *)a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *((unsigned char *)a1 + 24) = 0;
      }
    }
    else
    {
      long long v8 = *a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *a1 = v8;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      *((unsigned char *)a1 + 24) = 1;
      if (*((unsigned char *)a2 + 24))
      {
        if (*((char *)a2 + 23) < 0) {
          operator delete(*(void **)a2);
        }
        *((unsigned char *)a2 + 24) = 0;
      }
    }
  }
  else if (*((unsigned char *)a1 + 24))
  {
    uint64_t v5 = *((void *)a1 + 2);
    long long v6 = *a1;
    uint64_t v7 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v7;
    *a2 = v6;
    *((void *)a2 + 2) = v5;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(long long *a1, long long *a2, long long *a3, long long *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a4, (uint64_t)a3) & 0x80) != 0)
  {
    std::optional<std::string>::swap[abi:ne180100](a3, a4);
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2) & 0x80) != 0)
    {
      std::optional<std::string>::swap[abi:ne180100](a2, a3);
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1) & 0x80) != 0)
      {
        std::optional<std::string>::swap[abi:ne180100](a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a5, (uint64_t)a4) & 0x80) != 0)
  {
    std::optional<std::string>::swap[abi:ne180100](a4, a5);
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a4, (uint64_t)a3) & 0x80) != 0)
    {
      std::optional<std::string>::swap[abi:ne180100](a3, a4);
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a3, (uint64_t)a2) & 0x80) != 0)
      {
        std::optional<std::string>::swap[abi:ne180100](a2, a3);
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)a2, (uint64_t)a1) & 0x80) != 0)
        {
          std::optional<std::string>::swap[abi:ne180100](a1, a2);
        }
      }
    }
  }
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *,std::optional<std::string> *>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((long long *)v6 != a3)
    {
      uint64_t v14 = (long long *)v6;
      do
      {
        if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v14, (uint64_t)a1) & 0x80) != 0)
        {
          std::optional<std::string>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 33)
    {
      unint64_t v15 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void>,std::optional<std::string> *>((uint64_t)a1, v6, a4, v15);
        v6 -= 32;
      }
      while (v15-- > 2);
    }
    return (long long *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 5)
    {
      uint64_t v9 = (a4 - a1) >> 4;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (__n128 *)(a1 + 32 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3
        && (std::operator<=>[abi:ne180100]<std::string,std::string>(a1 + 32 * (v9 + 1), (uint64_t)&v11[2]) & 0x80u) != 0)
      {
        v11 += 2;
        uint64_t v10 = v12;
      }
      if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v11, v5) & 0x80) == 0)
      {
        LOBYTE(__p[0]) = 0;
        char v18 = 0;
        if (*(unsigned char *)(v5 + 24))
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v5;
          uint64_t v17 = *(void *)(v5 + 16);
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(void *)uint64_t v5 = 0;
          char v18 = 1;
        }
        do
        {
          uint64_t v13 = (uint64_t)v11;
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v5, v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          unint64_t v11 = (__n128 *)(a1 + 32 * v14);
          uint64_t v15 = 2 * v10 + 2;
          if (v15 < a3
            && (std::operator<=>[abi:ne180100]<std::string,std::string>(a1 + 32 * v14, (uint64_t)&v11[2]) & 0x80u) != 0)
          {
            v11 += 2;
            uint64_t v14 = v15;
          }
          uint64_t v5 = v13;
          uint64_t v10 = v14;
        }
        while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v11, (uint64_t)__p) & 0x80) == 0);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v13, (__n128 *)__p);
        if (v18)
        {
          if (SHIBYTE(v17) < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void>,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    LOBYTE(__p[0]) = 0;
    char v12 = 0;
    if (*(unsigned char *)(a1 + 24))
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      uint64_t v11 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      char v12 = 1;
    }
    int64_t v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, a3, a4);
    uint64_t v8 = v7;
    uint64_t v9 = (__n128 *)(a2 - 32);
    if (v7 == v9)
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v7, (__n128 *)__p);
    }
    else
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v7, v9);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v9, (__n128 *)__p);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(a1, (uint64_t)&v8[2], a3, ((uint64_t)&v8[2] - a1) >> 5);
    }
    if (v12)
    {
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1BB288C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = (__n128 *)(a1 + 32 * v5 + 32);
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3
      && (std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, (uint64_t)&v8[2]) & 0x80u) != 0)
    {
      v8 += 2;
      uint64_t v5 = v10;
    }
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1, v8);
    a1 = (uint64_t)v8;
  }
  while (v5 <= v7);
  return v8;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<void> &,std::optional<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (__n128 *)(a1 + 32 * (v4 >> 1));
    uint64_t v9 = a2 - 32;
    if ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, a2 - 32) & 0x80) != 0)
    {
      LOBYTE(__p[0]) = 0;
      char v13 = 0;
      if (*(unsigned char *)(a2 - 8))
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v9;
        uint64_t v12 = *(void *)(v9 + 16);
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)uint64_t v9 = 0;
        char v13 = 1;
      }
      do
      {
        uint64_t v10 = (uint64_t)v8;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v9, v8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (__n128 *)(a1 + 32 * v7);
        uint64_t v9 = v10;
      }
      while ((std::operator<=>[abi:ne180100]<std::string,std::string>((uint64_t)v8, (uint64_t)__p) & 0x80) != 0);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v10, (__n128 *)__p);
      if (v13)
      {
        if (SHIBYTE(v12) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::update_initialization_counts(vp::Domain)::$_0>(std::pmr *a1)
{
  uint64_t v1 = **(void **)a1;
  if (**(_DWORD **)(*(void *)a1 + 8)) {
    uint64_t v2 = v1 + 832;
  }
  else {
    uint64_t v2 = v1 + 808;
  }
  uint64_t default_resource = std::pmr::get_default_resource(a1);
  vp::vx::data_flow::Value::Value(v6, default_resource);
  vp::vx::data_flow::State<void>::get_value(v2, (vp::vx::data_flow::Value *)v6);
  int v4 = *(_DWORD *)vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v6);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
  v6[0] = std::pmr::get_default_resource(v5);
  v6[1] = 0;
  _OWORD v6[2] = &vp::vx::data_flow::Value::type_id<unsigned int>(void)::s_type_id;
  *(_DWORD *)vp::vx::data_flow::Value::allocate_storage((vp::vx::data_flow::Value *)v6) = v4 + 1;
  vp::vx::data_flow::State<void>::set_value(v2, (uint64_t)v6, (vp::vx::data_flow::State_Transaction *)(v1 + 784));
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v6);
}

void sub_1BB288EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)va);
  _Unwind_Resume(a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::configure_control_center_manager(void)::$_0>(vp::vx::Voice_Processor ***a1)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (vp::vx::Control_Center_Manager **)**a1;
  uint64_t v2 = (uint64_t *)v1[338];
  if (v2)
  {
    vp::vx::Voice_Processor::get_app_bundle_id(**a1, (uint64_t)v16);
    vp::vx::Control_Center_Manager::set_app_bundle_id(v2, (uint64_t)v16);
    vp::vx::data_flow::State<void>::~State((uint64_t)v16);
    int v3 = (uint64_t *)v1[338];
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)0>((uint64_t)(v1 + 1), (uint64_t)v15);
    vp::vx::Control_Center_Manager::set_bypass(v3, (uint64_t)v15);
    vp::vx::data_flow::State<void>::~State((uint64_t)v15);
    int v4 = (uint64_t *)v1[338];
    vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)86>((uint64_t)(v1 + 1), (uint64_t)v14);
    vp::vx::Control_Center_Manager::set_media_handoff(v4, (uint64_t)v14);
    vp::vx::data_flow::State<void>::~State((uint64_t)v14);
    uint64_t v13 = 16;
    uint64_t v5 = (uint64_t *)v1[338];
    vp::vx::Voice_Processor::get_global_configuration((vp::vx::Voice_Processor *)v1, (uint64_t)v19);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaINS0_20Global_ConfigurationEN5boost9container12small_vectorINS0_11Chat_FlavorELm3ENS_9AllocatorIS9_EEvEEEEDaMT_T0_EUlRKS5_E_JS5_EEESD_OSE_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v19, (uint64_t)(v1 + 2), &v13, (uint64_t)v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v12, (uint64_t)v20);
    vp::vx::Control_Center_Manager::set_hidden_chat_flavors(v5, (uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v12);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    uint64_t v11 = 56;
    uint64_t v6 = (uint64_t *)v1[338];
    vp::vx::Voice_Processor::get_global_configuration((vp::vx::Voice_Processor *)v1, (uint64_t)v19);
    _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaINS0_20Global_ConfigurationEN5boost9container12small_vectorINS0_11Chat_FlavorELm3ENS_9AllocatorIS9_EEvEEEEDaMT_T0_EUlRKS5_E_JS5_EEESD_OSE_DpRKNS0_9data_flow5StateIT0_EE((vp::vx::data_flow::State_Transaction *)v19, (uint64_t)(v1 + 2), &v11, (uint64_t)v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v10, (uint64_t)v20);
    vp::vx::Control_Center_Manager::set_supported_chat_flavors(v6, (uint64_t)v10);
    vp::vx::data_flow::State<void>::~State((uint64_t)v10);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    unint64_t v7 = (uint64_t *)v1[338];
    vp::vx::Voice_Processor::get_global_configuration((vp::vx::Voice_Processor *)v1, (uint64_t)v9);
    v20[0] = &unk_1F14A6078;
    v20[1] = 96;
    v20[3] = v20;
    int id = vp::vx::data_flow::State_Transaction::get_id((vp::vx::data_flow::State_Transaction *)v9);
    vp::vx::data_flow::State_Manager::create_state((uint64_t)(v1 + 8), (uint64_t)v20, (uint64_t)v19);
    vp::vx::data_flow::State<void>::State((uint64_t)v17, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State(v19);
    std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v20);
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)v17);
    vp::vx::data_flow::State<void>::~State((uint64_t)v17);
    vp::vx::data_flow::State<void>::State((uint64_t)v20, (uint64_t)v19);
    vp::vx::Control_Center_Manager::set_ideal_mic_mode(v7, (uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v20);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v9);
    uint64_t v8 = (uint64_t *)v1[338];
    vp::vx::data_flow::State<void>::State((uint64_t)v19, (uint64_t)(v1 + 101));
    vp::vx::Control_Center_Manager::set_initialization_count(v8, (uint64_t)v19);
    vp::vx::data_flow::State<void>::~State((uint64_t)v19);
    vp::vx::Control_Center_Manager::configure(v1[338], (vp::vx::Voice_Processor_State_Manager *)(v1 + 2));
  }
}

uint64_t _ZN2vp2vx29Voice_Processor_State_Manager12create_stateIRKZNS0_12_GLOBAL__N_125make_member_getter_lambdaINS0_20Global_ConfigurationEN5boost9container12small_vectorINS0_11Chat_FlavorELm3ENS_9AllocatorIS9_EEvEEEEDaMT_T0_EUlRKS5_E_JS5_EEESD_OSE_DpRKNS0_9data_flow5StateIT0_EE@<X0>(vp::vx::data_flow::State_Transaction *this@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, uint64_t a4@<X8>)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2 + 48;
  uint64_t v6 = *a3;
  v10[0] = &unk_1F14A6030;
  v10[1] = v6;
  v10[3] = v10;
  v8[7] = vp::vx::data_flow::State_Transaction::get_id(this);
  vp::vx::data_flow::State_Manager::create_state(v5, (uint64_t)v10, (uint64_t)v9);
  vp::vx::data_flow::State<void>::State((uint64_t)v8, (uint64_t)v9);
  vp::vx::data_flow::State<void>::~State(v9);
  std::__function::__value_func<void ()(vp::vx::data_flow::Value const**,vp::vx::data_flow::Value*)>::~__value_func[abi:ne180100](v10);
  vp::vx::data_flow::State<void>::State(a4, (uint64_t)v8);
  return vp::vx::data_flow::State<void>::~State((uint64_t)v8);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A6030;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EE7__cloneEPNS0_6__baseIS1F_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A6030;
  a2[1] = v2;
  return result;
}

char *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionIN5boost9container12small_vectorINS3_11Chat_FlavorELm3ENS2_9AllocatorIS9_EEvEEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationESC_EEDaMT_T0_EUlRKSJ_E_JSJ_EEESK_OSL_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSJ_EEERNS4_13State_ManagerESL_SZ_EUlPPKNS4_5ValueEPS17_E_NS_9allocatorIS1C_EEFvS1A_S1B_EEclEOS1A_OS1B_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = (uint64_t *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  uint64_t v11 = *v4;
  uint64_t v12 = &v14;
  long long v13 = xmmword_1BB8716B0;
  uint64_t v5 = v4[1];
  uint64_t v16 = v5;
  uint64_t v6 = v4[2];
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v15 = (const void *)(v5 + 4 * v6);
  boost::container::vector<vp::vx::Chat_Flavor,boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>,void>::assign<boost::container::vec_iterator<vp::vx::Chat_Flavor*,true>>((uint64_t)&v11, (const char *)&v16, &v15);
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v8);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<boost::container::small_vector<vp::vx::Chat_Flavor,3ul,vp::Allocator<vp::vx::Chat_Flavor>,void>>(void)::s_type_id;
  uint64_t storage = vp::vx::data_flow::Value::allocate_storage(v3);
  *(void *)uint64_t storage = v11;
  *(void *)(storage + 8) = storage + 32;
  *(_OWORD *)(storage + 16) = xmmword_1BB8716B0;
  uint64_t result = boost::container::small_vector_base<vp::vx::Chat_Flavor,vp::Allocator<vp::vx::Chat_Flavor>,void>::move_construct_impl((char *)storage, (uint64_t)&v11);
  if (*((void *)&v13 + 1)) {
    return (char *)boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&v11, v12);
  }
  return result;
}

void sub_1BB2893E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(&a12, a13);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A6078;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EE7__cloneEPNS0_6__baseIS19_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A6078;
  a2[1] = v2;
  return result;
}

_DWORD *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_11Chat_FlavorEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIRKZNS3_12_GLOBAL__N_125make_member_getter_lambdaINS3_20Global_ConfigurationES6_EEDaMT_T0_EUlRKSD_E_JSD_EEESE_OSF_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSD_EEERNS4_13State_ManagerESF_ST_EUlPPKNS4_5ValueEPS11_E_NS_9allocatorIS16_EEFvS14_S15_EEclEOS14_OS15_(uint64_t a1, vp::vx::data_flow::Value ***a2, vp::vx::data_flow::Value **a3)
{
  uint64_t v3 = *a3;
  int v4 = *(_DWORD *)(vp::vx::data_flow::Value::view_storage(**a2) + *(void *)(a1 + 8));
  vp::vx::data_flow::Value::~Value(v3);
  *(void *)uint64_t v3 = std::pmr::get_default_resource(v5);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = &vp::vx::data_flow::Value::type_id<vp::vx::Chat_Flavor>(void)::s_type_id;
  uint64_t result = (_DWORD *)vp::vx::data_flow::Value::allocate_storage(v3);
  _DWORD *result = v4;
  return result;
}

uint64_t boost::container::flat_map<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_subscript(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  v13[0] = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v16 = v2 + 24 * v3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,false>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(v13, &v16, (uint64_t)a2, &v15);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v10 = v15;
  if (v15 == v7 + 24 * v8) {
    goto LABEL_14;
  }
  if (!v15) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>((uint64_t)a2, v15) & 0x80) != 0)
  {
LABEL_14:
    uint64_t v11 = *a2;
    v13[1] = 0;
    uint64_t v14 = 0;
    v13[0] = v11;
    uint64_t v15 = v10;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>(a1, &v15, v13, (unint64_t *)&v16);
    uint64_t v10 = v16;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  return v10 + 8;
}

void sub_1BB289660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,false>,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 != *a1)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      uint64_t v9 = *a1;
      if (v8 != 1 && !v9) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v10 = v8 >> 1;
      uint64_t v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        unint64_t v10 = v8 + ~v10;
      }
      unint64_t v8 = v10;
    }
    while (v10);
    uint64_t v5 = *a1;
  }
  *a4 = v5;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  long long v7 = *(_OWORD *)(a3 + 1);
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_unique(a1, &v5, (uint64_t)&v6, a4);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_1BB289808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::insert_unique(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > *a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (*a2 > v5 + 24 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v10 = *a2;
  unint64_t v11 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,std::less<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v10, a3, (uint64_t *)&v11))
  {
    unint64_t v12 = v11;
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::emplace<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>(a1, &v12, a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v11) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = v11;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::emplace<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5 > v6 + 24 * v8) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(a1, v5, (const char *)1, a3, a4);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
}

__n128 boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3]) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  uint64_t v7 = a1[1];
  unint64_t v8 = (void *)(v7 + 24 * v4);
  if (v8 == (void *)a2)
  {
    *(void *)a2 = *(void *)a4;
    __n128 result = *(__n128 *)(a4 + 8);
    *(__n128 *)(v7 + 24 * v4 + 8) = result;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    ++a1[2];
  }
  else
  {
    BOOL v9 = v8 - 3;
    uint64_t v10 = *(v8 - 3);
    *(_OWORD *)(v7 + 24 * v4 + 8) = *((_OWORD *)v8 - 1);
    *(v8 - 2) = 0;
    *(v8 - 1) = 0;
    void *v8 = v10;
    ++a1[2];
    if (v8 - 3 != (void *)a2)
    {
      unint64_t v11 = v8 - 3;
      do
      {
        uint64_t v12 = *(v11 - 3);
        v11 -= 3;
        long long v13 = *((_OWORD *)v9 - 1);
        *(v9 - 2) = 0;
        *(v9 - 1) = 0;
        *BOOL v9 = v12;
        uint64_t v14 = (std::__shared_weak_count *)v9[2];
        *(_OWORD *)(v9 + 1) = v13;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        BOOL v9 = v11;
      }
      while (v11 != (void *)a2);
    }
    *(void *)a2 = *(void *)a4;
    __n128 result = *(__n128 *)(a4 + 8);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t v16 = *(std::__shared_weak_count **)(a2 + 16);
    *(__n128 *)(a2 + 8) = result;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  return result;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)(v10 + 16);
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v12);
        }
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
}

void sub_1BB289C68(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(void *)uint64_t v7 = *(void *)a7;
  __n128 result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    BOOL v9 = (__n128 *)(v7 + 32);
    do
    {
      v9[-1].n128_u64[1] = *(void *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *BOOL v9 = result;
      BOOL v9 = (__n128 *)((char *)v9 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t boost::container::flat_map<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<std::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_subscript(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  v13[0] = v2;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v16 = v2 + 24 * v3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,false>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(v13, &v16, (uint64_t)a2, &v15);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v7) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v10 = v15;
  if (v15 == v7 + 24 * v8) {
    goto LABEL_14;
  }
  if (!v15) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>((uint64_t)a2, v15) & 0x80) != 0)
  {
LABEL_14:
    uint64_t v11 = *a2;
    v13[1] = 0;
    uint64_t v14 = 0;
    v13[0] = v11;
    uint64_t v15 = v10;
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>(a1, &v15, v13, (unint64_t *)&v16);
    uint64_t v10 = v16;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (!v10) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
  }
  return v10 + 8;
}

void sub_1BB289EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,false>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 != *a1)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      uint64_t v9 = *a1;
      if (v8 != 1 && !v9) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v10 = v8 >> 1;
      uint64_t v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        unint64_t v10 = v8 + ~v10;
      }
      unint64_t v8 = v10;
    }
    while (v10);
    uint64_t v5 = *a1;
  }
  *a4 = v5;
}

uint64_t std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else if (v4 == -1)
  {
    return 1;
  }
  else
  {
    if (v3 < v4) {
      uint64_t result = 0xFFFFFFFFLL;
    }
    else {
      uint64_t result = 1;
    }
    if (v3 == v4)
    {
      char v7 = 0;
      unint64_t v8 = &v7;
      return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1F14A60B0[v3])(&v8, a1, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 1;
  }
  if (*a2 == *a3) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 1;
  }
  if (*a2 == *a3) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 1;
  }
  if (*a2 == *a3) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIRZNS_ssB8ne180100IJN2vp2vx20Uplink_Input_Port_IDENSA_22Downlink_Input_Port_IDENSA_21Uplink_Output_Port_IDENSA_23Downlink_Output_Port_IDEEEENS_26common_comparison_categoryIJDpNS_24compare_three_way_resultIT_SH_E4typeEEE4typeERKNS_7variantIJDpSH_EEESR_EUlTyRKT_SU_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSB_SC_SD_SE_EEES13_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 1;
  }
  if (*a2 == *a3) {
    return 0;
  }
  else {
    return v3;
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::emplace_hint_unique<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  long long v7 = *(_OWORD *)(a3 + 1);
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_unique(a1, &v5, (uint64_t)&v6, a4);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_1BB28A180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_unique(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = a1[1];
  if (v5 > *a2) {
    goto LABEL_14;
  }
  uint64_t v7 = a1[2];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (*a2 > v5 + 24 * v7) {
LABEL_14:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  uint64_t v10 = *a2;
  unint64_t v11 = 0;
  if (boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v10, a3, (uint64_t *)&v11))
  {
    unint64_t v12 = v11;
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::emplace<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>(a1, &v12, a3, a4);
  }
  else
  {
    if (!a1[1])
    {
      if (v11) {
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      }
    }
    *a4 = v11;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (!v6) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v11 = v5 + 24 * v4;
  uint64_t v12 = *a2;
  if (v12 != v11)
  {
    if (!v12) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(a3, v12) & 0x80) == 0)
    {
      uint64_t v13 = *a2;
      uint64_t v19 = v11;
      uint64_t v20 = v13;
      uint64_t v14 = &v20;
      uint64_t v15 = &v19;
      return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
    }
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v11 = *a2;
  }
  *a4 = v11;
  uint64_t v17 = *a2;
  if (*a2 == v5) {
    return 1;
  }
  if (!v17) {
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  }
  uint64_t v18 = v17 - 24;
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(v17 - 24, a3) & 0x80) != 0)return 1; {
  if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(a3, v18) & 0x80) != 0)
  }
  {
    uint64_t v21 = v18;
    uint64_t v22 = v5;
    uint64_t v14 = &v22;
    uint64_t v15 = &v21;
    return boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(a1, v14, v15, a3, a4);
  }
  BOOL result = 0;
  *a4 = v18;
  return result;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *a2;
  uint64_t v11 = *a3;
  uint64_t v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,true>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(&v12, &v11, a4, &v13);
  uint64_t v9 = v13;
  *a5 = v13;
  if (v9 == *a3) {
    return 1;
  }
  if (!v9) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return (std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(a4, v9) & 0x80u) != 0;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,true>,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 != *a1)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((*a2 - *a1) >> 3);
    do
    {
      uint64_t v9 = *a1;
      if (v8 != 1 && !v9) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!v9) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v10 = v8 >> 1;
      uint64_t v11 = v9 + 24 * (v8 >> 1);
      if ((std::operator<=>[abi:ne180100]<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>(v11, a3) & 0x80) != 0)
      {
        *a1 = v11 + 24;
        unint64_t v10 = v8 + ~v10;
      }
      unint64_t v8 = v10;
    }
    while (v10);
    uint64_t v5 = *a1;
  }
  *a4 = v5;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::emplace<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a1[1];
  if (v6 > v5) {
    goto LABEL_11;
  }
  unint64_t v8 = a1[2];
  if (v6) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v5 > v6 + 24 * v8) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v10 = a1[3];
  if (v10 < v8) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v10 == v8)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(a1, v5, (const char *)1, a3, a4);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>>>(a1, v5, 1, a3);
    *a4 = *a2;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = a1[1];
  unint64_t v11 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  uint64_t v14 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v11);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = a1[1] + a2 - v10;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>((uint64_t)a1, v10, a4, v10 + 24 * a1[2], a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = a1[2];
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count **)(v10 + 16);
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v12);
        }
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v13 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v13;
  a1[3] = a3;
}

void sub_1BB28A7EC(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  if (a2 != a3)
  {
    uint64_t v7 = a5;
    do
    {
      *(void *)uint64_t v7 = *(void *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v7 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  }
  *(void *)uint64_t v7 = *(void *)a7;
  __n128 result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  if (a3 != a4)
  {
    BOOL v9 = (__n128 *)(v7 + 32);
    do
    {
      v9[-1].n128_u64[1] = *(void *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *BOOL v9 = result;
      BOOL v9 = (__n128 *)((char *)v9 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)26>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 16))(v4);
  vp::vx::data_flow::State<void>::State(a2, (uint64_t)v4);
  return vp::vx::data_flow::State<void>::~State(v4);
}

void std::__shared_ptr_pointer<vp::vx::IO_Port_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Port_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::insert_or_assign<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(unsigned char *)(a5 + 8) = 0;
  uint64_t v23 = 0;
  if (*a2)
  {
    uint64_t v22 = *a2;
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v22, (uint64_t)a3, (uint64_t *)&v23);
  }
  else
  {
    uint64_t v10 = a1[1];
    uint64_t v11 = a1[2];
    uint64_t v25 = v10;
    if (v10) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v11 == 0;
    }
    if (!v12) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    uint64_t v24 = v10 + 24 * v11;
    BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::dtl::select1st<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,std::less<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>>,boost::container::small_vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,16ul,vp::Allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>>,void>>::priv_insert_unique_prepare((uint64_t)a1, &v25, &v24, (uint64_t)a3, (uint64_t *)&v23);
  }
  *(unsigned char *)(a5 + 8) = inserted;
  if (inserted)
  {
    uint64_t v21 = v23;
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>(a1, &v21, a3, a4, &v25);
    *(void *)a5 = v25;
  }
  else
  {
    uint64_t v13 = a1[1];
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v13) >> 3);
    if (a1[2] < v14) {
      __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
    }
    uint64_t v15 = v13 + 8 * (((uint64_t)v23 - v13) >> 3);
    *(void *)a5 = v15;
    uint64_t v16 = (void *)(v15 + 8);
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    void *v16 = v18;
    uint64_t v19 = v13 + 24 * v14;
    uint64_t v20 = *(std::__shared_weak_count **)(v19 + 16);
    *(void *)(v19 + 16) = v17;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::emplace<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>(void *a1@<X0>, void **a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  unint64_t v6 = *a2;
  unint64_t v7 = a1[1];
  if (v7 > (unint64_t)v6) {
    goto LABEL_11;
  }
  unint64_t v9 = a1[2];
  if (v7) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (!v10) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if ((unint64_t)v6 > v7 + 24 * v9) {
LABEL_11:
  }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,boost::container::dtl::select1st<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,std::less<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>::insert_unique();
  unint64_t v11 = a1[3];
  if (v11 < v9) {
    boost::container::vector<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>,vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<vp::Allocator<boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>*,boost::container::dtl::pair<std::tuple<vp::vx::io::Object_ID<vp::vx::io::Node>,unsigned int>,std::string>>>();
  }
  if (v11 == v9)
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(a1, (uint64_t)v6, (const char *)1, a4, a3, a5);
  }
  else
  {
    boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_expand_forward<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>>*,std::variant<vp::vx::Uplink_DSP_Node_ID,vp::vx::Downlink_DSP_Node_ID>,std::shared_ptr<vp::vx::DSP_Node_Factory>&>>(a1, v6, 1, a4, a3);
    *a5 = *a2;
  }
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = a1[1];
  unint64_t v13 = boost::container::vector_alloc_holder<vp::Allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v13 >= 0xAAAAAAAAAAAAAABLL) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v14);
  }
  uint64_t v15 = v13;
  uint64_t v16 = std::pmr::polymorphic_allocator<boost::container::dtl::pair<vp::vx::io::Object_ID<vp::vx::io::Node>,std::shared_ptr<vp::vx::io::Node_Factory>>>::allocate[abi:ne180100]((uint64_t)a1, v13);
  boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(a1, v16, v15, a2, (uint64_t)a3, a4, a5);
  *a6 = a1[1] + a2 - v12;
}

void boost::container::vector<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v11 = a1[1];
  boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>((uint64_t)a1, v11, a4, v11 + 24 * a1[2], a2, a5, a6, a7);
  if (v11)
  {
    uint64_t v12 = a1[2];
    if (v12)
    {
      unint64_t v13 = (std::__shared_weak_count **)(v11 + 16);
      do
      {
        if (*v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v13);
        }
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(a1, (void *)a1[1]);
  }
  uint64_t v14 = a1[2] + a5;
  a1[1] = a2;
  a1[2] = v14;
  a1[3] = a3;
}

void sub_1BB28AE48(_Unwind_Exception *exception_object)
{
  if (v2) {
    boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>::deallocate(v1, v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,boost::container::dtl::insert_emplace_proxy<boost::container::small_vector_allocator<boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>,vp::Allocator<void>,void>,boost::container::dtl::pair<std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID>,std::shared_ptr<vp::vx::IO_Port_Factory>>*,std::variant<vp::vx::Uplink_Input_Port_ID,vp::vx::Downlink_Input_Port_ID,vp::vx::Uplink_Output_Port_ID,vp::vx::Downlink_Output_Port_ID> const&,std::shared_ptr<vp::vx::IO_Port_Factory>&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v8 = a5;
  if (a2 != a3)
  {
    uint64_t v8 = a5;
    do
    {
      *(void *)uint64_t v8 = *(void *)a2;
      __n128 result = *(__n128 *)(a2 + 8);
      *(__n128 *)(v8 + 8) = result;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v8 += 24;
      a2 += 24;
    }
    while (a2 != a3);
  }
  if (a6 != 1) {
    __assert_rtn("priv_uninitialized_copy_some_and_update", "advanced_insert_int.hpp", 265, "n == 1");
  }
  *(void *)uint64_t v8 = *a8;
  uint64_t v10 = a7[1];
  *(void *)(v8 + 8) = *a7;
  *(void *)(v8 + 16) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (a3 != a4)
  {
    uint64_t v11 = (__n128 *)(v8 + 32);
    do
    {
      v11[-1].n128_u64[1] = *(void *)a3;
      __n128 result = *(__n128 *)(a3 + 8);
      *uint64_t v11 = result;
      uint64_t v11 = (__n128 *)((char *)v11 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      a3 += 24;
    }
    while (a3 != a4);
  }
  return result;
}

void std::__shared_ptr_pointer<vp::vx::IO_Wire_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Wire_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void std::__shared_ptr_pointer<vp::vx::IO_Mic_Ref_Sync_Node_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Mic_Ref_Sync_Node_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void std::__shared_ptr_pointer<vp::vx::IO_Far_End_Voice_Proc_Node_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

uint64_t std::__shared_ptr_pointer<vp::vx::IO_Far_End_Voice_Proc_Node_Factory  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0>(const vp::rpb::Server ***a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*a1)[1];
  vp::rpb::Server::Listener::Listener((vp::rpb::Server::Listener *)&v8, **a1);
  uint64_t v2 = *((void *)v1 + 91);
  unsigned int v3 = (std::__shared_weak_count *)*((void *)v1 + 93);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v12 = 0;
  int v4 = operator new(0x20uLL);
  void *v4 = &unk_1F14A61C0;
  v4[1] = v2;
  v4[2] = v3;
  void v4[3] = v1;
  uint64_t v12 = v4;
  vp::rpb::Server::Listener::on_did_start_running(&v8, (uint64_t)v11);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  uint64_t v5 = *((void *)v1 + 91);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 93);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v10 = 0;
  unint64_t v7 = operator new(0x20uLL);
  *unint64_t v7 = &unk_1F14A6250;
  v7[1] = v5;
  _OWORD v7[2] = v6;
  void v7[3] = v1;
  uint64_t v10 = v7;
  vp::rpb::Server::Listener::on_did_stop_running(&v8, (uint64_t)v9);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v9);
  vp::cf::Predicate::operator=((id *)v1 + 299, &v8);
  vp::cf::Predicate::~Predicate((vp::cf::Predicate *)&v8);
}

void sub_1BB28B20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A61C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A61C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F14A61C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F14A61C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(vp *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    unint64_t v4 = v15;
    uint64_t v5 = __p[1];
    unint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      id v8 = (void **)__p[0];
      if ((v15 & 0x80u) == 0) {
        id v8 = __p;
      }
      if (v7) {
        unint64_t v9 = " ";
      }
      else {
        unint64_t v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = v8;
      __int16 v19 = 2080;
      uint64_t v20 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%s%sRPB server started running", buf, 0x16u);
    }
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = (void *)*((void *)a1 + 1);
      if (v13)
      {
        __p[0] = &unk_1F14A6208;
        uint64_t v16 = __p;
        vp::vx::Voice_Processor::call_async(v13, (uint64_t)__p);
        std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](__p);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F14A6208;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A6208;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  vp::rpb::Server::get_shared_instance((uint64_t)v3);
  v4[0] = v3;
  v4[1] = a2;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"connect RPB server", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>, (uint64_t)v4);
  vp::objc::ID::~ID((vp::objc::ID *)v3);
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A6250;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14A6250;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = &unk_1F14A6250;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F14A6250;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()(vp *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    unint64_t v4 = v15;
    uint64_t v5 = __p[1];
    unint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      id v8 = (void **)__p[0];
      if ((v15 & 0x80u) == 0) {
        id v8 = __p;
      }
      if (v7) {
        unint64_t v9 = " ";
      }
      else {
        unint64_t v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = v8;
      __int16 v19 = 2080;
      uint64_t v20 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEBUG, "%s%sRPB server stopped running", buf, 0x16u);
    }
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = (void *)*((void *)a1 + 1);
      if (v13)
      {
        __p[0] = &unk_1F14A6298;
        uint64_t v16 = __p;
        vp::vx::Voice_Processor::call_async(v13, (uint64_t)__p);
        std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](__p);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::~__func()
{
}

void *std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F14A6298;
  return result;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14A6298;
}

void std::__function::__func<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1},std::allocator<vp::vx::Voice_Processor::register_listener(vp::rpb::Server)::$_0::operator() const(void)::{lambda(void)#2}::operator() const(void)::{lambda(vp::vx::Voice_Processor&)#1}>,void ()(vp::vx::Voice_Processor&)>::operator()(uint64_t a1, uint64_t a2)
{
  vp::rpb::Server::get_shared_instance((uint64_t)&v3);
  uint64_t v4 = a2;
  vp::vx::Voice_Processor::exception_guard(a2, (uint64_t)"disconnect RPB server", (uint64_t (*)(void))caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::disconnect(vp::rpb::Server)::$_0>, (uint64_t)&v4);
  vp::objc::ID::~ID((vp::objc::ID *)&v3);
}

void **caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::unregister_listener(vp::rpb::Server)::$_0>(uint64_t a1)
{
  return vp::rpb::Host::Delegate::operator=((void **)(**(void **)a1 + 2392));
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0>(uint64_t *a1)
{
}

void vp::vx::Voice_Processor::connect(vp::rpb::Server)::$_0::operator()(uint64_t a1)
{
  v215[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  is_running = (vp *)vp::rpb::Server::is_running(*(id **)a1);
  if (is_running)
  {
    log = vp::get_log(is_running);
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
    {
      log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
      unint64_t v6 = (void *)BYTE7(v155);
      unint64_t v7 = __p[1];
      id v8 = vp::get_log(log_context_info);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if ((char)v6 >= 0) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = v7;
        }
        uint64_t v10 = (void **)__p[0];
        if ((SBYTE7(v155) & 0x80u) == 0) {
          uint64_t v10 = __p;
        }
        if (v9) {
          uint64_t v11 = " ";
        }
        else {
          uint64_t v11 = "";
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v11;
        _os_log_impl(&dword_1BB0CE000, v8, OS_LOG_TYPE_DEFAULT, "%s%sconnect RPB", buf, 0x16u);
      }
      if (SBYTE7(v155) < 0) {
        operator delete(__p[0]);
      }
    }
    CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"VoiceProcessor", 14, 0x8000100u, 0);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    vp::rpb::Host::Host((uint64_t)&v198, &cf);
    if (cf) {
      CFRelease(cf);
    }
    CFTypeRef v196 = CFStringCreateWithBytes(0, (const UInt8 *)"Operating System", 16, 0x8000100u, 0);
    if (!v196) {
      goto LABEL_164;
    }
    unsigned int v12 = *(_DWORD *)(v2 + 264) - 1;
    if (v12 > 2) {
      uint64_t v13 = "iOS";
    }
    else {
      uint64_t v13 = off_1E6237BC0[v12];
    }
    __p[0] = (void *)v13;
    vp::rpb::Object::add_user_info<char const*>(&v198, &v196, (char **)__p);
    if (v196) {
      CFRelease(v196);
    }
    CFTypeRef v195 = CFStringCreateWithBytes(0, (const UInt8 *)"Operating System Release Type", 29, 0x8000100u, 0);
    if (!v195) {
      goto LABEL_164;
    }
    vp::rpb::Object::add_user_info<applesauce::CF::StringRef const&>(&v198, &v195, (const void **)(v2 + 272));
    if (v195) {
      CFRelease(v195);
    }
    CFTypeRef v194 = CFStringCreateWithBytes(0, (const UInt8 *)"AppleInternal Build", 19, 0x8000100u, 0);
    if (!v194) {
      goto LABEL_164;
    }
    vp::rpb::Object::add_user_info<BOOL const&>(&v198, &v194, (unsigned char *)(v2 + 280));
    if (v194) {
      CFRelease(v194);
    }
    CFTypeRef v193 = CFStringCreateWithBytes(0, (const UInt8 *)"UI Build", 8, 0x8000100u, 0);
    if (!v193) {
      goto LABEL_164;
    }
    vp::rpb::Object::add_user_info<BOOL const&>(&v198, &v193, (unsigned char *)(v2 + 281));
    if (v193) {
      CFRelease(v193);
    }
    CFTypeRef v192 = CFStringCreateWithBytes(0, (const UInt8 *)"Tuning Directory Path", 21, 0x8000100u, 0);
    if (!v192) {
      goto LABEL_164;
    }
    if (*(char *)(v2 + 311) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v2 + 288), *(void *)(v2 + 296));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 288);
      *(void *)&long long v155 = *(void *)(v2 + 304);
    }
    vp::rpb::Object::add_user_info<std::string>(&v198, &v192, (uint64_t)__p);
    if (SBYTE7(v155) < 0) {
      operator delete(__p[0]);
    }
    if (v192) {
      CFRelease(v192);
    }
    CFTypeRef v191 = CFStringCreateWithBytes(0, (const UInt8 *)"Temporary Directory Path", 24, 0x8000100u, 0);
    if (!v191) {
      goto LABEL_164;
    }
    if (*(char *)(v2 + 335) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v2 + 312), *(void *)(v2 + 320));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 312);
      *(void *)&long long v155 = *(void *)(v2 + 328);
    }
    vp::rpb::Object::add_user_info<std::string>(&v198, &v191, (uint64_t)__p);
    if (SBYTE7(v155) < 0) {
      operator delete(__p[0]);
    }
    if (v191) {
      CFRelease(v191);
    }
    CFTypeRef v190 = CFStringCreateWithBytes(0, (const UInt8 *)"Secret Directory Path", 21, 0x8000100u, 0);
    if (!v190) {
      goto LABEL_164;
    }
    if (*(char *)(v2 + 359) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v2 + 336), *(void *)(v2 + 344));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 336);
      *(void *)&long long v155 = *(void *)(v2 + 352);
    }
    vp::rpb::Object::add_user_info<std::string>(&v198, &v190, (uint64_t)__p);
    if (SBYTE7(v155) < 0) {
      operator delete(__p[0]);
    }
    if (v190) {
      CFRelease(v190);
    }
    CFTypeRef v189 = CFStringCreateWithBytes(0, (const UInt8 *)"Hardware Model", 14, 0x8000100u, 0);
    if (!v189) {
      goto LABEL_164;
    }
    vp::rpb::Object::add_user_info<std::string const&>(&v198, &v189, v2 + 368);
    if (v189) {
      CFRelease(v189);
    }
    CFTypeRef v188 = CFStringCreateWithBytes(0, (const UInt8 *)"Hardware Layout ID", 18, 0x8000100u, 0);
    if (!v188) {
      goto LABEL_164;
    }
    int v14 = *(unsigned __int8 *)(v2 + 396);
    if (*(unsigned char *)(v2 + 396)) {
      int v14 = *(_DWORD *)(v2 + 392);
    }
    LODWORD(__p[0]) = v14;
    vp::rpb::Object::add_user_info<unsigned int>(&v198, &v188, (int *)__p);
    if (v188) {
      CFRelease(v188);
    }
    CFTypeRef v187 = CFStringCreateWithBytes(0, (const UInt8 *)"Product Type", 12, 0x8000100u, 0);
    if (!v187) {
      goto LABEL_164;
    }
    int v15 = *(unsigned __int8 *)(v2 + 404);
    if (*(unsigned char *)(v2 + 404)) {
      int v15 = *(_DWORD *)(v2 + 400);
    }
    LODWORD(__p[0]) = v15;
    vp::rpb::Object::add_user_info<unsigned int>(&v198, &v187, (int *)__p);
    if (v187) {
      CFRelease(v187);
    }
    CFTypeRef v186 = CFStringCreateWithBytes(0, (const UInt8 *)"Acoustic ID", 11, 0x8000100u, 0);
    if (!v186)
    {
LABEL_164:
      long long v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v128, "Could not construct");
    }
    int v16 = *(unsigned __int8 *)(v2 + 416);
    if (*(unsigned char *)(v2 + 416)) {
      int v16 = *(_DWORD *)(v2 + 412);
    }
    LODWORD(__p[0]) = v16;
    vp::rpb::Object::add_user_info<int>(&v198, &v186, (int *)__p);
    if (v186) {
      CFRelease(v186);
    }
    vp::rpb::Host::new_delegate((vp::objc::ID *)&v185);
    uint64_t v17 = *(void *)(v2 + 728);
    uint64_t v18 = *(std::__shared_weak_count **)(v2 + 744);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    v214[0] = &unk_1F14A62E0;
    v214[1] = v17;
    v214[2] = v18;
    v214[3] = v214;
    vp::rpb::Host::Delegate::on_get_property_info(&v185, (uint64_t)v214);
    std::__function::__value_func<vp::Expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error> ()(vp::rpb::Scope)>::~__value_func[abi:ne180100](v214);
    uint64_t v19 = *(void *)(v2 + 728);
    uint64_t v20 = *(std::__shared_weak_count **)(v2 + 744);
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    v213[0] = &unk_1F14A6370;
    v213[1] = v19;
    v213[2] = v20;
    v213[3] = v213;
    vp::rpb::Host::Delegate::on_get_property(&v185, (uint64_t)v213);
    std::__function::__value_func<vp::Expected<applesauce::CF::TypeRef,vp::rpb::Error> ()(unsigned int,vp::rpb::Scope,unsigned int)>::~__value_func[abi:ne180100](v213);
    vp::objc::ID::ID((vp::objc::ID *)&v184, &v185);
    vp::rpb::Host::set_delegate(&v198, &v184);
    vp::objc::ID::~ID((vp::objc::ID *)&v184);
    CFTypeRef v182 = CFStringCreateWithBytes(0, (const UInt8 *)"Audio Client", 12, 0x8000100u, 0);
    if (!v182)
    {
      uint64_t v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v129, "Could not construct");
    }
    uint64_t v21 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)48>(v2 + 8, (uint64_t)v202);
    uint64_t default_resource = std::pmr::get_default_resource(v21);
    vp::vx::data_flow::Value::Value(buf, default_resource);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v202, (vp::vx::data_flow::Value *)buf);
    uint64_t v23 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    uint64_t v24 = *(void *)(v23 + 32);
    long long v25 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v23;
    long long v155 = v25;
    uint64_t v156 = v24;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v207, (const CA::StreamDescription *)__p);
    uint64_t v26 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)49>(v2 + 8, (uint64_t)v199);
    uint64_t v27 = std::pmr::get_default_resource(v26);
    vp::vx::data_flow::Value::Value(&v171, v27);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v199, (vp::vx::data_flow::Value *)&v171);
    uint64_t v28 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v171);
    uint64_t v29 = *(void *)(v28 + 32);
    long long v30 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)buf = *(_OWORD *)v28;
    *(_OWORD *)&buf[16] = v30;
    uint64_t v212 = v29;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v171);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v215, (const CA::StreamDescription *)buf);
    vp::rpb::Item::Item((uint64_t)v183, (id *)&v182, (uint64_t)&v207, 1, (uint64_t)v215, 1);
    vp::objc::ID::~ID((vp::objc::ID *)v215);
    vp::vx::data_flow::State<void>::~State((uint64_t)v199);
    vp::objc::ID::~ID((vp::objc::ID *)&v207);
    vp::vx::data_flow::State<void>::~State((uint64_t)v202);
    if (v182) {
      CFRelease(v182);
    }
    vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)v183);
    CFTypeRef v180 = CFStringCreateWithBytes(0, (const UInt8 *)"Hardware Microphone Input", 25, 0x8000100u, 0);
    if (!v180)
    {
      v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Could not construct");
    }
    long long v31 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)8>(v2 + 8, (uint64_t)&v171);
    uint64_t v32 = std::pmr::get_default_resource(v31);
    vp::vx::data_flow::Value::Value(buf, v32);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v171, (vp::vx::data_flow::Value *)buf);
    uint64_t v33 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    uint64_t v34 = *(void *)(v33 + 32);
    long long v35 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v33;
    long long v155 = v35;
    uint64_t v156 = v34;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v202, (const CA::StreamDescription *)__p);
    vp::rpb::Item::Item((uint64_t)v181, (id *)&v180, 0, 0, (uint64_t)v202, 1);
    vp::objc::ID::~ID((vp::objc::ID *)v202);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v171);
    if (v180) {
      CFRelease(v180);
    }
    vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)v181);
    CFTypeRef v178 = CFStringCreateWithBytes(0, (const UInt8 *)"Hardware Reference Input", 24, 0x8000100u, 0);
    if (!v178)
    {
      v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v131, "Could not construct");
    }
    __int16 v36 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)23>(v2 + 8, (uint64_t)&v171);
    uint64_t v37 = std::pmr::get_default_resource(v36);
    vp::vx::data_flow::Value::Value(buf, v37);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v171, (vp::vx::data_flow::Value *)buf);
    uint64_t v38 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    uint64_t v39 = *(void *)(v38 + 32);
    long long v40 = *(_OWORD *)(v38 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v38;
    long long v155 = v40;
    uint64_t v156 = v39;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v202, (const CA::StreamDescription *)__p);
    vp::rpb::Item::Item((uint64_t)v179, (id *)&v178, 0, 0, (uint64_t)v202, 1);
    vp::objc::ID::~ID((vp::objc::ID *)v202);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v171);
    if (v178) {
      CFRelease(v178);
    }
    vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)v179);
    CFTypeRef v176 = CFStringCreateWithBytes(0, (const UInt8 *)"Hardware Mix Output", 19, 0x8000100u, 0);
    if (!v176)
    {
      uint64_t v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v132, "Could not construct");
    }
    uint64_t v41 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)&v171);
    uint64_t v42 = std::pmr::get_default_resource(v41);
    vp::vx::data_flow::Value::Value(buf, v42);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v171, (vp::vx::data_flow::Value *)buf);
    uint64_t v43 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    uint64_t v44 = *(void *)(v43 + 32);
    long long v45 = *(_OWORD *)(v43 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v43;
    long long v155 = v45;
    uint64_t v156 = v44;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v202, (const CA::StreamDescription *)__p);
    vp::rpb::Item::Item((uint64_t)v177, (id *)&v176, (uint64_t)v202, 1, 0, 0);
    vp::objc::ID::~ID((vp::objc::ID *)v202);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v171);
    if (v176) {
      CFRelease(v176);
    }
    vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)v177);
    uint64_t v46 = *(void *)(v2 + 2400);
    CFTypeRef v174 = CFStringCreateWithBytes(0, (const UInt8 *)"Uplink", 6, 0x8000100u, 0);
    if (!v174)
    {
      v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v133, "Could not construct");
    }
    std::string::size_type v47 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)8>(v2 + 8, (uint64_t)v199);
    uint64_t v48 = std::pmr::get_default_resource(v47);
    vp::vx::data_flow::Value::Value(buf, v48);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v199, (vp::vx::data_flow::Value *)buf);
    uint64_t v49 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
    uint64_t v50 = *(void *)(v49 + 32);
    long long v51 = *(_OWORD *)(v49 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v49;
    long long v155 = v51;
    uint64_t v156 = v50;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v205, (const CA::StreamDescription *)__p);
    int v52 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)23>(v2 + 8, (uint64_t)&v207);
    uint64_t v53 = std::pmr::get_default_resource(v52);
    vp::vx::data_flow::Value::Value(&v171, v53);
    vp::vx::data_flow::State<void>::get_value((uint64_t)&v207, (vp::vx::data_flow::Value *)&v171);
    uint64_t v54 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v171);
    uint64_t v55 = *(void *)(v54 + 32);
    long long v56 = *(_OWORD *)(v54 + 16);
    *(_OWORD *)buf = *(_OWORD *)v54;
    *(_OWORD *)&buf[16] = v56;
    uint64_t v212 = v55;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v171);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v206, (const CA::StreamDescription *)buf);
    char v57 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)48>(v2 + 8, (uint64_t)v215);
    uint64_t v58 = std::pmr::get_default_resource(v57);
    vp::vx::data_flow::Value::Value(v202, v58);
    vp::vx::data_flow::State<void>::get_value((uint64_t)v215, (vp::vx::data_flow::Value *)v202);
    uint64_t v59 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v202);
    uint64_t v60 = *(void *)(v59 + 32);
    long long v61 = *(_OWORD *)(v59 + 16);
    long long v171 = *(_OWORD *)v59;
    long long v172 = v61;
    uint64_t v173 = v60;
    vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v202);
    vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v204, (const CA::StreamDescription *)&v171);
    vp::rpb::Item::Item((uint64_t)&v175, (id *)&v174, (uint64_t)v205, 2, (uint64_t)v204, 1);
    vp::objc::ID::~ID((vp::objc::ID *)v204);
    vp::vx::data_flow::State<void>::~State((uint64_t)v215);
    for (uint64_t i = 8; i != -8; i -= 8)
      vp::objc::ID::~ID((vp::objc::ID *)&v205[i]);
    vp::vx::data_flow::State<void>::~State((uint64_t)&v207);
    vp::vx::data_flow::State<void>::~State((uint64_t)v199);
    if (v174) {
      CFRelease(v174);
    }
    vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)&v175);
    vp::rpb::Wire::Wire((vp::rpb::Wire *)v170, (const vp::rpb::Item *)&v175, 0, (const vp::rpb::Item *)v183, 0);
    vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)v170);
    vp::rpb::Wire::Wire((vp::rpb::Wire *)v169, (const vp::rpb::Item *)v181, 0, (const vp::rpb::Item *)&v175, 0);
    vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)v169);
    vp::rpb::Wire::Wire((vp::rpb::Wire *)v168, (const vp::rpb::Item *)v179, 0, (const vp::rpb::Item *)&v175, 1);
    vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)v168);
    uint64_t v145 = *(void *)(v2 + 2504);
    id v167 = 0;
    if (*(_DWORD *)(v2 + 264) == 3)
    {
      CFTypeRef v166 = CFStringCreateWithBytes(0, (const UInt8 *)"Downlink", 8, 0x8000100u, 0);
      if (!v166)
      {
        v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v136, "Could not construct");
      }
      v63 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)49>(v2 + 8, (uint64_t)v202);
      uint64_t v64 = std::pmr::get_default_resource(v63);
      vp::vx::data_flow::Value::Value(buf, v64);
      vp::vx::data_flow::State<void>::get_value((uint64_t)v202, (vp::vx::data_flow::Value *)buf);
      uint64_t v65 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
      uint64_t v66 = *(void *)(v65 + 32);
      long long v67 = *(_OWORD *)(v65 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v65;
      long long v155 = v67;
      uint64_t v156 = v66;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v215, (const CA::StreamDescription *)__p);
      uint64_t v68 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)v199);
      uint64_t v69 = std::pmr::get_default_resource(v68);
      vp::vx::data_flow::Value::Value(&v171, v69);
      vp::vx::data_flow::State<void>::get_value((uint64_t)v199, (vp::vx::data_flow::Value *)&v171);
      uint64_t v70 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v171);
      uint64_t v71 = *(void *)(v70 + 32);
      long long v72 = *(_OWORD *)(v70 + 16);
      *(_OWORD *)buf = *(_OWORD *)v70;
      *(_OWORD *)&buf[16] = v72;
      uint64_t v212 = v71;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v171);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v205, (const CA::StreamDescription *)buf);
      vp::rpb::Item::Item((uint64_t)&v207, (id *)&v166, (uint64_t)v215, 1, (uint64_t)v205, 1);
      vp::objc::ID::operator=(&v167, &v207);
      vp::objc::ID::~ID((vp::objc::ID *)&v207);
      vp::objc::ID::~ID((vp::objc::ID *)v205);
      vp::vx::data_flow::State<void>::~State((uint64_t)v199);
      vp::objc::ID::~ID((vp::objc::ID *)v215);
      vp::vx::data_flow::State<void>::~State((uint64_t)v202);
      if (v166) {
        CFRelease(v166);
      }
      vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)&v167);
    }
    else
    {
      CFTypeRef v164 = CFStringCreateWithBytes(0, (const UInt8 *)"Downlink", 8, 0x8000100u, 0);
      if (!v164)
      {
        v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v137, "Could not construct");
      }
      uint64_t v73 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)49>(v2 + 8, (uint64_t)v205);
      uint64_t v74 = std::pmr::get_default_resource(v73);
      vp::vx::data_flow::Value::Value(buf, v74);
      vp::vx::data_flow::State<void>::get_value((uint64_t)v205, (vp::vx::data_flow::Value *)buf);
      uint64_t v75 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
      uint64_t v76 = *(void *)(v75 + 32);
      long long v77 = *(_OWORD *)(v75 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v75;
      long long v155 = v77;
      uint64_t v156 = v76;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v207, (const CA::StreamDescription *)__p);
      uint64_t v78 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)v204);
      uint64_t v79 = std::pmr::get_default_resource(v78);
      vp::vx::data_flow::Value::Value(&v171, v79);
      vp::vx::data_flow::State<void>::get_value((uint64_t)v204, (vp::vx::data_flow::Value *)&v171);
      uint64_t v80 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)&v171);
      uint64_t v81 = *(void *)(v80 + 32);
      long long v82 = *(_OWORD *)(v80 + 16);
      *(_OWORD *)buf = *(_OWORD *)v80;
      *(_OWORD *)&buf[16] = v82;
      uint64_t v212 = v81;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)&v171);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v208, (const CA::StreamDescription *)buf);
      uint64_t v83 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)v163);
      uint64_t v84 = std::pmr::get_default_resource(v83);
      vp::vx::data_flow::Value::Value(v202, v84);
      vp::vx::data_flow::State<void>::get_value((uint64_t)v163, (vp::vx::data_flow::Value *)v202);
      uint64_t v85 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v202);
      uint64_t v86 = *(void *)(v85 + 32);
      long long v87 = *(_OWORD *)(v85 + 16);
      long long v171 = *(_OWORD *)v85;
      long long v172 = v87;
      uint64_t v173 = v86;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v202);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v209, (const CA::StreamDescription *)&v171);
      v88 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)v162);
      uint64_t v89 = std::pmr::get_default_resource(v88);
      vp::vx::data_flow::Value::Value(v199, v89);
      vp::vx::data_flow::State<void>::get_value((uint64_t)v162, (vp::vx::data_flow::Value *)v199);
      uint64_t v90 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v199);
      uint64_t v91 = *(void *)(v90 + 32);
      long long v92 = *(_OWORD *)(v90 + 16);
      v202[0] = *(_OWORD *)v90;
      v202[1] = v92;
      uint64_t v203 = v91;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v199);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v210, (const CA::StreamDescription *)v202);
      v93 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)v161);
      uint64_t v94 = std::pmr::get_default_resource(v93);
      vp::vx::data_flow::Value::Value(v215, v94);
      vp::vx::data_flow::State<void>::get_value((uint64_t)v161, (vp::vx::data_flow::Value *)v215);
      uint64_t v95 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)v215);
      uint64_t v96 = *(void *)(v95 + 32);
      long long v97 = *(_OWORD *)(v95 + 16);
      v199[0] = *(_OWORD *)v95;
      v199[1] = v97;
      uint64_t v200 = v96;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)v215);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v201, (const CA::StreamDescription *)v199);
      vp::rpb::Item::Item((uint64_t)&v165, (id *)&v164, (uint64_t)&v207, 4, (uint64_t)v201, 1);
      vp::objc::ID::operator=(&v167, &v165);
      vp::objc::ID::~ID((vp::objc::ID *)&v165);
      vp::objc::ID::~ID((vp::objc::ID *)v201);
      vp::vx::data_flow::State<void>::~State((uint64_t)v161);
      for (uint64_t j = 24; j != -8; j -= 8)
        vp::objc::ID::~ID((vp::objc::ID *)((char *)&v207 + j));
      vp::vx::data_flow::State<void>::~State((uint64_t)v162);
      vp::vx::data_flow::State<void>::~State((uint64_t)v163);
      vp::vx::data_flow::State<void>::~State((uint64_t)v204);
      vp::vx::data_flow::State<void>::~State((uint64_t)v205);
      if (v164) {
        CFRelease(v164);
      }
      vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)&v167);
      CFTypeRef v160 = CFStringCreateWithBytes(0, (const UInt8 *)"Default Audio Output", 20, 0x8000100u, 0);
      if (!v160)
      {
        v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v138, "Could not construct");
      }
      v99 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)&v171);
      uint64_t v100 = std::pmr::get_default_resource(v99);
      vp::vx::data_flow::Value::Value(buf, v100);
      vp::vx::data_flow::State<void>::get_value((uint64_t)&v171, (vp::vx::data_flow::Value *)buf);
      uint64_t v101 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
      uint64_t v102 = *(void *)(v101 + 32);
      long long v103 = *(_OWORD *)(v101 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v101;
      long long v155 = v103;
      uint64_t v156 = v102;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v199, (const CA::StreamDescription *)__p);
      vp::rpb::Item::Item((uint64_t)v202, (id *)&v160, 0, 0, (uint64_t)v199, 1);
      vp::objc::ID::~ID((vp::objc::ID *)v199);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v171);
      if (v160) {
        CFRelease(v160);
      }
      vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)v202);
      vp::rpb::Wire::Wire((vp::rpb::Wire *)__p, (const vp::rpb::Item *)v202, 0, (const vp::rpb::Item *)&v167, 1);
      vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)__p);
      vp::objc::ID::~ID((vp::objc::ID *)__p);
      CFTypeRef v159 = CFStringCreateWithBytes(0, (const UInt8 *)"System Audio Output", 19, 0x8000100u, 0);
      if (!v159)
      {
        v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v139, "Could not construct");
      }
      long long v104 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)&v171);
      uint64_t v105 = std::pmr::get_default_resource(v104);
      vp::vx::data_flow::Value::Value(buf, v105);
      vp::vx::data_flow::State<void>::get_value((uint64_t)&v171, (vp::vx::data_flow::Value *)buf);
      uint64_t v106 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
      uint64_t v107 = *(void *)(v106 + 32);
      long long v108 = *(_OWORD *)(v106 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v106;
      long long v155 = v108;
      uint64_t v156 = v107;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)&v207, (const CA::StreamDescription *)__p);
      vp::rpb::Item::Item((uint64_t)v199, (id *)&v159, 0, 0, (uint64_t)&v207, 1);
      vp::objc::ID::~ID((vp::objc::ID *)&v207);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v171);
      if (v159) {
        CFRelease(v159);
      }
      vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)v199);
      vp::rpb::Wire::Wire((vp::rpb::Wire *)__p, (const vp::rpb::Item *)v199, 0, (const vp::rpb::Item *)&v167, 2);
      vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)__p);
      vp::objc::ID::~ID((vp::objc::ID *)__p);
      CFTypeRef v158 = CFStringCreateWithBytes(0, (const UInt8 *)"Other Audio Output", 18, 0x8000100u, 0);
      if (!v158)
      {
        v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v140, "Could not construct");
      }
      CFTypeRef v109 = (std::pmr *)vp::vx::Voice_Processor_State_Owner::get_property_state<(vp::vx::Property_ID)51>(v2 + 8, (uint64_t)&v171);
      uint64_t v110 = std::pmr::get_default_resource(v109);
      vp::vx::data_flow::Value::Value(buf, v110);
      vp::vx::data_flow::State<void>::get_value((uint64_t)&v171, (vp::vx::data_flow::Value *)buf);
      uint64_t v111 = vp::vx::data_flow::Value::view_storage((vp::vx::data_flow::Value *)buf);
      uint64_t v112 = *(void *)(v111 + 32);
      long long v113 = *(_OWORD *)(v111 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v111;
      long long v155 = v113;
      uint64_t v156 = v112;
      vp::vx::data_flow::Value::~Value((vp::vx::data_flow::Value *)buf);
      vp::rpb::Terminal::Terminal((vp::rpb::Terminal *)v215, (const CA::StreamDescription *)__p);
      vp::rpb::Item::Item((uint64_t)&v207, (id *)&v158, 0, 0, (uint64_t)v215, 1);
      vp::objc::ID::~ID((vp::objc::ID *)v215);
      vp::vx::data_flow::State<void>::~State((uint64_t)&v171);
      if (v158) {
        CFRelease(v158);
      }
      vp::rpb::Host::add_item(&v198, (vp::rpb::Wire *)&v207);
      vp::rpb::Wire::Wire((vp::rpb::Wire *)__p, (const vp::rpb::Item *)&v207, 0, (const vp::rpb::Item *)&v167, 3);
      vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)__p);
      vp::objc::ID::~ID((vp::objc::ID *)__p);
      vp::objc::ID::~ID((vp::objc::ID *)&v207);
      vp::objc::ID::~ID((vp::objc::ID *)v199);
      vp::objc::ID::~ID((vp::objc::ID *)v202);
    }
    vp::rpb::Wire::Wire((vp::rpb::Wire *)v215, (const vp::rpb::Item *)v183, 0, (const vp::rpb::Item *)&v167, 0);
    vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)v215);
    vp::rpb::Wire::Wire((vp::rpb::Wire *)v205, (const vp::rpb::Item *)&v167, 0, (const vp::rpb::Item *)v177, 0);
    uint64_t v144 = v2;
    vp::rpb::Host::add_wire(&v198, (const vp::rpb::Wire *)v205);
    vp::rpb::Server::add_host(*(id **)a1, (const vp::rpb::Host *)&v198);
    memset(buf, 0, 24);
    *(void *)&buf[24] = std::pmr::get_default_resource(v114);
    long long v171 = 0uLL;
    *(void *)&long long v172 = 0;
    *((void *)&v172 + 1) = std::pmr::get_default_resource(*(std::pmr **)&buf[24]);
    vp::objc::ID::ID((vp::objc::ID *)v199, &v175);
    vp::objc::ID::ID((vp::objc::ID *)((char *)v199 + 8), &v167);
    uint64_t v115 = 0;
    v204[0] = (CFTypeRef)0x100000000;
    do
    {
      if (*((_DWORD *)v204 + v115)) {
        uint64_t v116 = v145;
      }
      else {
        uint64_t v116 = v46;
      }
      if (v116)
      {
        v117 = *((_DWORD *)v204 + v115) ? (id *)((char *)v199 + 8) : (id *)v199;
        if (*((void *)v199 + (*((_DWORD *)v204 + v115) != 0)))
        {
          vp::objc::ID::ID((vp::objc::ID *)&v153, v117);
          vp::vx::io::Graph::connect(v116, &v153, __p);
          if (v157)
          {
            vp::objc::ID::~ID((vp::objc::ID *)&v153);
            vp::rpb::Item::get_parameter_info(v117, 1, (uint64_t)__p);
            uint64_t v118 = v46;
            caulk::expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>> const&>((uint64_t *)__p, (uint64_t *)buf, (uint64_t *)v202);
            caulk::__expected_detail::base<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
            v120 = (_DWORD *)*((void *)&v202[0] + 1);
            for (k = *(_DWORD **)&v202[0]; k != v120; k += 8)
            {
              LODWORD(__p[1]) = 0;
              __p[0] = 0;
              LODWORD(__p[0]) = *k;
              HIDWORD(__p[0]) = 4;
              int v208 = 0;
              id v207 = 0;
              LODWORD(v207) = *k;
              HIDWORD(v207) = 1;
              vp::rpb::Host::add_parameter_wire(&v198, (unsigned int *)__p, (vp::rpb::Wire *)v117, (unsigned int *)&v207);
            }
            __p[0] = v202;
            std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
            vp::rpb::Item::get_parameter_info(v117, 2, (uint64_t)__p);
            caulk::expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>> const&>((uint64_t *)__p, (uint64_t *)buf, (uint64_t *)v202);
            caulk::__expected_detail::base<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
            v122 = (_DWORD *)*((void *)&v202[0] + 1);
            for (m = *(_DWORD **)&v202[0]; m != v122; m += 8)
            {
              LODWORD(__p[1]) = 0;
              __p[0] = 0;
              LODWORD(__p[0]) = *m;
              HIDWORD(__p[0]) = 2;
              int v208 = 0;
              id v207 = 0;
              LODWORD(v207) = *m;
              HIDWORD(v207) = 4;
              vp::rpb::Host::add_parameter_wire(&v198, (vp::rpb::Wire *)v117, (unsigned int *)__p, (unsigned int *)&v207);
            }
            __p[0] = v202;
            std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
            vp::rpb::Item::get_property_info(v117, 1, (uint64_t)__p);
            caulk::expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>> const&>((uint64_t *)__p, (uint64_t *)&v171, (uint64_t *)v202);
            caulk::__expected_detail::base<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
            v124 = (_DWORD *)*((void *)&v202[0] + 1);
            for (n = *(_DWORD **)&v202[0]; n != v124; n += 8)
            {
              LODWORD(__p[1]) = 0;
              __p[0] = 0;
              LODWORD(__p[0]) = *n;
              HIDWORD(__p[0]) = 4;
              int v208 = 0;
              id v207 = 0;
              LODWORD(v207) = *n;
              HIDWORD(v207) = 1;
              vp::rpb::Host::add_property_wire(&v198, (unsigned int *)__p, (vp::rpb::Wire *)v117, (unsigned int *)&v207);
            }
            __p[0] = v202;
            std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
            vp::rpb::Item::get_property_info(v117, 2, (uint64_t)__p);
            caulk::expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>> const&>((uint64_t *)__p, (uint64_t *)&v171, (uint64_t *)v202);
            caulk::__expected_detail::base<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::~base((vp::objc::ID *)__p);
            uint64_t v126 = (_DWORD *)*((void *)&v202[0] + 1);
            for (iuint64_t i = *(_DWORD **)&v202[0]; ii != v126; ii += 8)
            {
              LODWORD(__p[1]) = 0;
              __p[0] = 0;
              LODWORD(__p[0]) = *ii;
              HIDWORD(__p[0]) = 2;
              int v208 = 0;
              id v207 = 0;
              LODWORD(v207) = *ii;
              HIDWORD(v207) = 4;
              vp::rpb::Host::add_property_wire(&v198, (vp::rpb::Wire *)v117, (unsigned int *)__p, (unsigned int *)&v207);
            }
            __p[0] = v202;
            std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
            uint64_t v46 = v118;
          }
          else
          {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)__p);
            vp::objc::ID::~ID((vp::objc::ID *)&v153);
          }
        }
      }
      ++v115;
    }
    while (v115 != 2);
    vp::rpb::Item::get_sub_host(&v167, (uint64_t)__p);
    if (__p[0])
    {
      vp::rpb::Item::get_inputs(&v167, (uint64_t)&v207);
      vp::rpb::Array<vp::rpb::Terminal>::operator[](&v207, 0, (uint64_t)v202);
      CFTypeRef v152 = CFStringCreateWithBytes(0, (const UInt8 *)"RGBRPBTerminalSubHostPeerUUIDString", 35, 0x8000100u, 0);
      if (!v152)
      {
        v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v134, "Could not construct");
      }
      CFTypeRef v151 = CFStringCreateWithBytes(0, (const UInt8 *)"Voice_Proc", 10, 0x8000100u, 0);
      if (!v151)
      {
        v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v135, "Could not construct");
      }
      vp::rpb::Host::find_item_by_name(__p, &v151, (uint64_t)v161);
      vp::rpb::Item::get_outputs(v161, (uint64_t)v162);
      vp::rpb::Array<vp::rpb::Terminal>::operator[](v162, 0, (uint64_t)v163);
      vp::rpb::Object::get_uuid(v163, (applesauce::CF::StringRef *)v204);
      vp::rpb::Object::add_user_info<applesauce::CF::StringRef>((id *)v202, &v152, v204);
      if (v204[0]) {
        CFRelease(v204[0]);
      }
      vp::objc::ID::~ID((vp::objc::ID *)v163);
      vp::objc::ID::~ID((vp::objc::ID *)v162);
      vp::objc::ID::~ID((vp::objc::ID *)v161);
      if (v151) {
        CFRelease(v151);
      }
      if (v152) {
        CFRelease(v152);
      }
      vp::objc::ID::~ID((vp::objc::ID *)v202);
      vp::objc::ID::~ID((vp::objc::ID *)&v207);
      if (*(_DWORD *)(v144 + 264) != 3)
      {
        vp::rpb::Item::get_inputs(&v167, (uint64_t)&v207);
        vp::rpb::Array<vp::rpb::Terminal>::operator[](&v207, 1, (uint64_t)v202);
        CFTypeRef v150 = CFStringCreateWithBytes(0, (const UInt8 *)"RGBRPBTerminalSubHostPeerIndex", 30, 0x8000100u, 0);
        if (!v150)
        {
          v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v141, "Could not construct");
        }
        LODWORD(v204[0]) = 0;
        vp::rpb::Object::add_user_info<unsigned int>((id *)v202, &v150, (int *)v204);
        if (v150) {
          CFRelease(v150);
        }
        vp::objc::ID::~ID((vp::objc::ID *)v202);
        vp::objc::ID::~ID((vp::objc::ID *)&v207);
        vp::rpb::Item::get_inputs(&v167, (uint64_t)&v207);
        vp::rpb::Array<vp::rpb::Terminal>::operator[](&v207, 2, (uint64_t)v202);
        CFTypeRef v149 = CFStringCreateWithBytes(0, (const UInt8 *)"RGBRPBTerminalSubHostPeerIndex", 30, 0x8000100u, 0);
        if (!v149)
        {
          v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v142, "Could not construct");
        }
        LODWORD(v204[0]) = 1;
        vp::rpb::Object::add_user_info<unsigned int>((id *)v202, &v149, (int *)v204);
        if (v149) {
          CFRelease(v149);
        }
        vp::objc::ID::~ID((vp::objc::ID *)v202);
        vp::objc::ID::~ID((vp::objc::ID *)&v207);
        vp::rpb::Item::get_inputs(&v167, (uint64_t)&v207);
        vp::rpb::Array<vp::rpb::Terminal>::operator[](&v207, 3, (uint64_t)v202);
        CFTypeRef v148 = CFStringCreateWithBytes(0, (const UInt8 *)"RGBRPBTerminalSubHostPeerIndex", 30, 0x8000100u, 0);
        if (!v148)
        {
          v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v143, "Could not construct");
        }
        LODWORD(v204[0]) = 2;
        vp::rpb::Object::add_user_info<unsigned int>((id *)v202, &v148, (int *)v204);
        if (v148) {
          CFRelease(v148);
        }
        vp::objc::ID::~ID((vp::objc::ID *)v202);
        vp::objc::ID::~ID((vp::objc::ID *)&v207);
      }
    }
    vp::objc::ID::~ID((vp::objc::ID *)__p);
    vp::objc::ID::ID((vp::objc::ID *)v147, *(id **)a1);
    vp::objc::ID::ID((vp::objc::ID *)v146, &v198);
    vp::rpb::Connection::Connection(__p, v147, v146);
    vp::objc::ID::operator=((id *)(v144 + 2368), __p);
    vp::objc::ID::operator=((id *)(v144 + 2376), &__p[1]);
    vp::rpb::Connection::~Connection((vp::rpb::Connection *)__p);
    vp::objc::ID::~ID((vp::objc::ID *)v146);
    vp::objc::ID::~ID((vp::objc::ID *)v147);
    vp::objc::ID::operator=((id *)(v144 + 2384), &v185);
    vp::objc::ID::~ID((vp::objc::ID *)((char *)v199 + 8));
    vp::objc::ID::~ID((vp::objc::ID *)v199);
    __p[0] = &v171;
    std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
    __p[0] = buf;
    std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)__p);
    vp::objc::ID::~ID((vp::objc::ID *)v205);
    vp::objc::ID::~ID((vp::objc::ID *)v215);
    vp::objc::ID::~ID((vp::objc::ID *)&v167);
    vp::objc::ID::~ID((vp::objc::ID *)v168);
    vp::objc::ID::~ID((vp::objc::ID *)v169);
    vp::objc::ID::~ID((vp::objc::ID *)v170);
    vp::objc::ID::~ID((vp::objc::ID *)&v175);
    vp::objc::ID::~ID((vp::objc::ID *)v177);
    vp::objc::ID::~ID((vp::objc::ID *)v179);
    vp::objc::ID::~ID((vp::objc::ID *)v181);
    vp::objc::ID::~ID((vp::objc::ID *)v183);
    vp::objc::ID::~ID((vp::objc::ID *)&v185);
    vp::objc::ID::~ID((vp::objc::ID *)&v198);
  }
}

void sub_1BB28D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, vp::objc::ID *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,__int16 a43,int a44,__int16 a45,int a46,__int16 a47,int a48,__int16 a49,int a50,__int16 a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,__int16 a57,uint64_t a58,__int16 a59,uint64_t a60,__int16 a61,uint64_t a62,__int16 a63)
{
  __cxa_free_exception(v67);
  vp::objc::ID::~ID((vp::objc::ID *)&STACK[0x250]);
  vp::objc::ID::~ID((vp::objc::ID *)&STACK[0x2B0]);
  vp::objc::ID::~ID((vp::objc::ID *)&__p);
  vp::objc::ID::~ID(a11);
  vp::objc::ID::~ID((vp::objc::ID *)&STACK[0x220]);
  std::string __p = &a51;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&__p);
  std::string __p = (void *)(v68 - 240);
  std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&__p);
  vp::objc::ID::~ID((vp::objc::ID *)&STACK[0x298]);
  vp::objc::ID::~ID((vp::objc::ID *)(v68 - 128));
  vp::objc::ID::~ID((vp::objc::ID *)&a43);
  vp::objc::ID::~ID((vp::objc::ID *)&a45);
  vp::objc::ID::~ID((vp::objc::ID *)&a47);
  vp::objc::ID::~ID((vp::objc::ID *)&a49);
  vp::objc::ID::~ID((vp::objc::ID *)&a57);
  vp::objc::ID::~ID((vp::objc::ID *)&a59);
  vp::objc::ID::~ID((vp::objc::ID *)&a61);
  vp::objc::ID::~ID((vp::objc::ID *)&a63);
  vp::objc::ID::~ID((vp::objc::ID *)&a65);
  vp::objc::ID::~ID((vp::objc::ID *)&a67);
  vp::objc::ID::~ID((vp::objc::ID *)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<char const*>(id *a1, CFTypeRef *a2, char **a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v7 = v5;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&cf, *a3);
  vp::rpb::Object::add_user_info(a1, &v7, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1BB28E2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void vp::rpb::Object::add_user_info<applesauce::CF::StringRef const&>(id *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v8 = v5;
  unint64_t v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  CFTypeRef cf = v6;
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BB28E394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void vp::rpb::Object::add_user_info<BOOL const&>(id *a1, CFTypeRef *a2, unsigned char *a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v8 = v5;
  if (*a3) {
    unint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  else {
    unint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef cf = *v6;
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BB28E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void vp::rpb::Object::add_user_info<std::string>(id *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v11 = v5;
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    CFTypeRef v7 = (const UInt8 *)a3;
  }
  else {
    CFTypeRef v7 = *(const UInt8 **)a3;
  }
  if (v6 >= 0) {
    CFIndex v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v8 = *(void *)(a3 + 8);
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v11, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1BB28E54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<std::string const&>(id *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v11 = v5;
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    CFTypeRef v7 = (const UInt8 *)a3;
  }
  else {
    CFTypeRef v7 = *(const UInt8 **)a3;
  }
  if (v6 >= 0) {
    CFIndex v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v8 = *(void *)(a3 + 8);
  }
  CFTypeRef cf = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v11, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1BB28E670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<unsigned int>(id *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v8 = v5;
  int valuePtr = *a3;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BB28E780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void vp::rpb::Object::add_user_info<int>(id *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v8 = v5;
  int valuePtr = *a3;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BB28E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *caulk::expected<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>> const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*((unsigned char *)result + 32))
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    uint64_t v3 = result[3];
    a3[2] = result[2];
    a3[3] = v3;
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    uint64_t v4 = a2[3];
    a3[2] = 0;
    a3[3] = v4;
    return std::vector<vp::rpb::Parameter_Info,vp::Allocator<vp::rpb::Parameter_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Parameter_Info*,vp::rpb::Parameter_Info*>(a3, *a2, a2[1], (a2[1] - *a2) >> 5);
  }
  return result;
}

uint64_t *caulk::expected<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>,vp::rpb::Error>::value_or<std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>> const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*((unsigned char *)result + 32))
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    uint64_t v3 = result[3];
    a3[2] = result[2];
    a3[3] = v3;
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    uint64_t v4 = a2[3];
    a3[2] = 0;
    a3[3] = v4;
    return std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__init_with_size[abi:ne180100]<vp::rpb::Property_Info*,vp::rpb::Property_Info*>(a3, *a2, a2[1], (a2[1] - *a2) >> 5);
  }
  return result;
}

void vp::rpb::Object::add_user_info<applesauce::CF::StringRef>(id *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v8 = v5;
  int v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  CFTypeRef cf = v6;
  vp::rpb::Object::add_user_info(a1, &v8, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BB28E9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void *_ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEED1Ev(void *a1)
{
  *a1 = &unk_1F14A62E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEED0Ev(void *a1)
{
  *a1 = &unk_1F14A62E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A62E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE7__cloneEPNS0_6__baseISL_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A62E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

uint64_t **_ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_E_NS_9allocatorIS9_EEFNS2_8ExpectedINS_6vectorINS5_13Property_InfoENS2_9AllocatorISE_EEEENS5_5ErrorEEENS5_5ScopeEEEclEOSK_@<X0>(std::pmr *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD v19[4] = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  uint64_t v16 = 0;
  long long v13 = 0u;
  long long v15 = 0u;
  uint64_t default_resource = std::pmr::get_default_resource(a1);
  uint64_t v17 = default_resource;
  if (!v5
    && (unint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 2)) != 0
    && (uint64_t v10 = std::__shared_weak_count::lock(v9)) != 0)
  {
    CFTypeRef v11 = v10;
    uint64_t v12 = *((void *)a1 + 1);
    if (v12)
    {
      v19[0] = &unk_1F14A6328;
      v19[1] = &v15;
      v19[3] = v19;
      vp::vx::Voice_Processor::call_sync(v12, (uint64_t)v19);
      std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v19);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    long long v13 = v15;
    uint64_t v7 = v16;
    uint64_t default_resource = v17;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v14[3] = default_resource;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t v18 = &v15;
  std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v18);
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = default_resource;
  memset(v14, 0, 24);
  *(unsigned char *)(a3 + 32) = 1;
  *(void *)&long long v15 = v14;
  return std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__destroy_vector::operator()[abi:ne180100]((uint64_t **)&v15);
}

void _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A6328;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A6328;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_E_clINS5_5ScopeEEEDaS8_EUlRKS4_E_NS_9allocatorISF_EEFvRS4_EEclESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  return vp::vx::Property_Manager::for_each_property(a2 + 968, (uint64_t (*)(uint64_t *, void, _DWORD *))_ZN5caulk12function_refIFvN2vp2vx11Property_IDERKNS2_8PropertyEEE15functor_invokerIZZZZNS2_15Voice_Processor7connectENS1_3rpb6ServerEENK3__0clEvENKUlT_E_clINSB_5ScopeEEEDaSE_ENKUlRKSA_E_clESK_EUlS3_S6_E_EEvRKNS_7details15erased_callableIS7_EES3_S6_, (uint64_t)&v3);
}

void _ZN5caulk12function_refIFvN2vp2vx11Property_IDERKNS2_8PropertyEEE15functor_invokerIZZZZNS2_15Voice_Processor7connectENS1_3rpb6ServerEENK3__0clEvENKUlT_E_clINSB_5ScopeEEEDaSE_ENKUlRKSA_E_clESK_EUlS3_S6_E_EEvRKNS_7details15erased_callableIS7_EES3_S6_(uint64_t ***a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = vp::reflect_value_name_tag<vp::vx::Property_ID,128ul>(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = v4;
  size_t v7 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_p = operator new(v9 + 1);
    CFIndex v31 = v7;
    int64_t v32 = v10 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v32) = v5;
  p_p = &__p;
  if (v5) {
LABEL_8:
  }
    memmove(p_p, v6, v7);
  *((unsigned char *)p_p + v7) = 0;
  uint64_t v12 = (void **)__p;
  CFIndex v11 = v31;
  if (v32 >= 0) {
    long long v13 = (unsigned __int8 *)&__p;
  }
  else {
    long long v13 = (unsigned __int8 *)__p;
  }
  if (v32 >= 0) {
    CFIndex v11 = HIBYTE(v32);
  }
  if (v11)
  {
    do
    {
      int v14 = *v13;
      if (v14 == 95) {
        LOBYTE(v14) = 32;
      }
      *v13++ = v14;
      --v11;
    }
    while (v11);
    unsigned __int8 v15 = HIBYTE(v32);
    uint64_t v12 = (void **)__p;
  }
  else
  {
    unsigned __int8 v15 = HIBYTE(v32);
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = &__p;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v16)
  {
    if ((v15 & 0x80u) == 0) {
      CFIndex v17 = v15;
    }
    else {
      CFIndex v17 = v31;
    }
    CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v18 = 0;
  }
  uint64_t v20 = *v3;
  unint64_t v21 = (*v3)[1];
  unint64_t v22 = (*v3)[2];
  if (v21 >= v22)
  {
    uint64_t v24 = (uint64_t)(v21 - *v20) >> 5;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v22 - *v20;
    if (v26 >> 4 > v25) {
      unint64_t v25 = v26 >> 4;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    v33[4] = v20 + 3;
    uint64_t v28 = std::pmr::polymorphic_allocator<std::function<int ()(AudioBufferList *,AudioTimeStamp *,unsigned int)>>::allocate[abi:ne180100]((uint64_t)(v20 + 3), v27);
    uint64_t v29 = v28 + 32 * v24;
    v33[0] = v28;
    v33[1] = v29;
    v33[3] = v28 + 32 * v27;
    *(_DWORD *)uint64_t v29 = a2;
    *(void *)(v29 + 8) = v18;
    *(void *)(v29 + 16) = 0;
    *(_WORD *)(v29 + 24) = 1;
    _OWORD v33[2] = v29 + 32;
    std::vector<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info>>::__swap_out_circular_buffer(v20, v33);
    uint64_t v23 = v20[1];
    std::__split_buffer<vp::rpb::Property_Info,vp::Allocator<vp::rpb::Property_Info> &>::~__split_buffer((uint64_t)v33);
  }
  else
  {
    *(_DWORD *)unint64_t v21 = a2;
    *(void *)(v21 + 8) = v18;
    *(void *)(v21 + 16) = 0;
    *(_WORD *)(v21 + 24) = 1;
    uint64_t v23 = v21 + 32;
  }
  v20[1] = v23;
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
}

void sub_1BB28F010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEED1Ev(void *a1)
{
  *a1 = &unk_1F14A6370;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEED0Ev(void *a1)
{
  *a1 = &unk_1F14A6370;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C185D370);
}

void *_ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14A6370;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE7__cloneEPNS0_6__baseISL_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14A6370;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvEUlT_T0_T1_E_NS_9allocatorISB_EEFNS2_8ExpectedIN10applesauce2CF7TypeRefENS5_5ErrorEEEjNS5_5ScopeEjEEclEOjOSK_SN_(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = 0;
  void v16[4] = *MEMORY[0x1E4F143B8];
  int v7 = *a3;
  int v8 = *a4;
  int v15 = *a2;
  uint64_t v14 = 0;
  if (!(v8 | v7))
  {
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (v10 && (CFIndex v11 = std::__shared_weak_count::lock(v10)) != 0)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)(a1 + 8);
      if (v13)
      {
        v16[0] = &unk_1F14A63B8;
        v16[1] = &v15;
        void v16[2] = &v14;
        v16[3] = v16;
        vp::vx::Voice_Processor::call_sync(v13, (uint64_t)v16);
        std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::~__value_func[abi:ne180100](v16);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      uint64_t v6 = v14;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  *(void *)a5 = v6;
  *(unsigned char *)(a5 + 8) = 1;
}

void _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14A63B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EE7__cloneEPNS0_6__baseISL_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14A63B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZN2vp2vx15Voice_Processor7connectENS2_3rpb6ServerEENK3__0clEvENKUlT_T0_T1_E_clIjNS5_5ScopeEjEEDaS8_S9_SA_EUlRKS4_E_NS_9allocatorISH_EEFvRS4_EEclESK_(uint64_t a1, uint64_t a2)
{
  vp::vx::Property_Manager::get_property(a2 + 968, **(_DWORD **)(a1 + 8), *(const void ***)(a1 + 16), v2);
}

void **caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::disconnect(vp::rpb::Server)::$_0>(vp *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = **(void **)a1;
  log = vp::get_log(a1);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    log_context_info = (vp *)vp::get_log_context_info((uint64_t)"vp::vx::Voice_Processor]", 23, __p);
    unint64_t v4 = v23;
    unint64_t v5 = __p[1];
    uint64_t v6 = vp::get_log(log_context_info);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((v4 & 0x80u) == 0) {
        unint64_t v7 = v4;
      }
      else {
        unint64_t v7 = (unint64_t)v5;
      }
      int v8 = (void **)__p[0];
      if ((v23 & 0x80u) == 0) {
        int v8 = __p;
      }
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      *(_DWORD *)buf = 136315394;
      int64_t v32 = v8;
      __int16 v33 = 2080;
      uint64_t v34 = v9;
      _os_log_impl(&dword_1BB0CE000, v6, OS_LOG_TYPE_DEFAULT, "%s%sdisconnect RPB", buf, 0x16u);
    }
    if ((char)v23 < 0) {
      operator delete(__p[0]);
    }
  }
  vp::objc::ID::ID((vp::objc::ID *)&v29, (id *)(v1 + 2376));
  if (v29)
  {
    uint64_t v10 = *(void *)(v1 + 2400);
    CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"Uplink", 6, 0x8000100u, 0);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    vp::rpb::Host::find_item_by_name(&v29, &cf, (uint64_t)&v28);
    if (cf) {
      CFRelease(cf);
    }
    uint64_t v11 = *(void *)(v1 + 2504);
    CFTypeRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"Downlink", 8, 0x8000100u, 0);
    if (!v25)
    {
      uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v20, "Could not construct");
    }
    vp::rpb::Host::find_item_by_name(&v29, &v25, (uint64_t)&v26);
    if (v25) {
      CFRelease(v25);
    }
    vp::objc::ID::ID((vp::objc::ID *)buf, &v28);
    vp::objc::ID::ID((vp::objc::ID *)((char *)&v32 + 4), &v26);
    uint64_t v12 = 0;
    uint64_t v30 = 0x100000000;
    do
    {
      int v13 = *(_DWORD *)&buf[v12 - 8];
      BOOL v14 = v13 == 0;
      if (v13) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = v10;
      }
      if (v15)
      {
        BOOL v16 = v13 != 0;
        CFIndex v17 = v14 ? (id *)buf : (id *)((char *)&v32 + 4);
        if (*(void *)&buf[8 * v16])
        {
          vp::objc::ID::ID((vp::objc::ID *)&v21, v17);
          vp::vx::io::Graph::disconnect(v15, &v21, __p);
          if (!v24) {
            vp::vx::io::Error::~Error((vp::vx::io::Error *)__p);
          }
          vp::objc::ID::~ID((vp::objc::ID *)&v21);
        }
      }
      v12 += 4;
    }
    while (v12 != 8);
    vp::objc::ID::~ID((vp::objc::ID *)((char *)&v32 + 4));
    vp::objc::ID::~ID((vp::objc::ID *)buf);
    vp::objc::ID::~ID((vp::objc::ID *)&v26);
    vp::objc::ID::~ID((vp::objc::ID *)&v28);
  }
  vp::objc::ID::~ID((vp::objc::ID *)&v29);
  vp::rpb::Connection::operator=((id *)(v1 + 2368));
  return vp::rpb::Host::Delegate::operator=((void **)(v1 + 2384));
}

void sub_1BB28F6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, CFTypeRef a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_free_exception(v24);
  vp::objc::ID::~ID((vp::objc::ID *)&a20);
  vp::objc::ID::~ID((vp::objc::ID *)&a22);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x38uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((unsigned char *)v11 + 24) = 0;
  *((unsigned char *)v11 + 48) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  id v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  void *v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    id v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1BB28F9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::optional<std::string>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::optional<std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((unsigned char *)__p + 48) && *((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[6],applesauce::CF::StringRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  unint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

uint64_t std::__function::__value_func<void ()(vp::vx::Voice_Processor &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(vp::vx::Voice_Processor const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t OUTLINED_FUNCTION_5(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2] & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v4 = a1 + 3;
  return std::allocator_traits<vp::Real_Time_Safe_Allocator<char>>::deallocate[abi:ne180100](v4, v2, v3);
}

void OUTLINED_FUNCTION_6(void **a1@<X8>, uint64_t a2, void **a3)
{
  a3 = a1;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a3);
}

void vp::vx::Voice_Processor::add_component()
{
}

uint64_t vp::vx::Voice_Processor::write_dsp_data(uint64_t *a1)
{
  return OUTLINED_FUNCTION_5(a1);
}

uint64_t vp::vx::Voice_Processor::create_port_factory()
{
  OUTLINED_FUNCTION_8();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t vp::vx::Voice_Processor::create_wire_factory()
{
  OUTLINED_FUNCTION_8();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void *_ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_20Global_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor24get_global_configurationEvENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSD_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSH_EEERNS4_13State_ManagerESD_SP_EUlPPKNS4_5ValueEPSX_E_NS_9allocatorIS12_EEFvS10_S11_EEclEOS10_OS11__cold_1(void *result)
{
  if (result[5]) {
    return boost::container::small_vector_allocator<vp::vx::Chat_Flavor,vp::Allocator<void>,void>::deallocate(result + 2, (void *)result[3]);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2vp2vx9data_flow8FunctionINS3_22DSP_Node_ConfigurationEEC1IZNS3_29Voice_Processor_State_Manager12create_stateIZZNS3_15Voice_Processor17get_configurationENS3_18Uplink_DSP_Node_IDEENK3__0clEvEUlRKT_E_JNS3_21Configuration_ContextEEEEDaOSE_DpRKNS4_5StateIT0_EEEUlDpRKT_E_JSI_EEERNS4_13State_ManagerESE_SQ_EUlPPKNS4_5ValueEPSY_E_NS_9allocatorIS13_EEFvS11_S12_EEclEOS11_OS12__cold_1(uint64_t a1)
{
  OUTLINED_FUNCTION_6((void **)(a1 + 112), v2, v5);
  OUTLINED_FUNCTION_6((void **)(a1 + 88), v3, v6);
  OUTLINED_FUNCTION_6((void **)(a1 + 64), v4, v7);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__optional_copy_base<std::vector<float>,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void vp::vx::Property::Blob_Type_Converter<BOOL>::convert_to_blob(void *a1, _OWORD *a2)
{
}

uint64_t vp::vx::Voice_Processor::create_dsp_node_factory<vp::vx::Uplink_DSP_Node_ID>()
{
  OUTLINED_FUNCTION_8();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void caulk::function_ref<void ()(void)>::functor_invoker<vp::vx::Voice_Processor::create_tuning_resource_directory_paths(void)::$_0>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_1BB28FDF4(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  unsigned char v3[8] = v2;
  v3[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7ACA0);
  v3[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1BB28FE8C, v2, 0);
}

uint64_t sub_1BB28FE8C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = OBJC_IVAR___ModelManagerMonitor_mCounter;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR___ModelManagerMonitor_mCounter);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v2;
  unint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR___ModelManagerMonitor_mEventObservers);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *v7;
  *unint64_t v7 = 0x8000000000000000;
  sub_1BB29275C((uint64_t)sub_1BB292BCC, v6, v5, isUniquelyReferenced_nonNull_native);
  *unint64_t v7 = v25;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v9 = *(void *)(v3 + v4);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v12 = v0[8];
  *(void *)(v3 + v4) = v11;
  uint64_t v13 = OBJC_IVAR___ModelManagerMonitor_mInferenceTask;
  if (!*(void *)(v12 + OBJC_IVAR___ModelManagerMonitor_mInferenceTask))
  {
    uint64_t v15 = v0[8];
    uint64_t v14 = v0[9];
    uint64_t v16 = sub_1BB815690();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
    uint64_t v17 = sub_1BB293520(&qword_1E9F7ACB0, (void (*)(uint64_t))type metadata accessor for ModelManagerMonitor);
    unint64_t v18 = (void *)swift_allocObject();
    CFTypeRef v18[2] = v15;
    v18[3] = v17;
    v18[4] = v15;
    swift_retain_n();
    *(void *)(v12 + v13) = sub_1BB290DA8(v14, (uint64_t)&unk_1E9F7ACB8, (uint64_t)v18);
    swift_release();
  }
  if (qword_1E9F7DD80 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v19 = sub_1BB815640();
  __swift_project_value_buffer(v19, (uint64_t)qword_1E9F80748);
  uint64_t v20 = sub_1BB815630();
  os_log_type_t v21 = sub_1BB8156C0();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v22 = 134217984;
    v0[5] = v5;
    sub_1BB8156E0();
    _os_log_impl(&dword_1BB0CE000, v20, v21, "ModelManagerMonitor:: added observer[%ld]", v22, 0xCu);
    MEMORY[0x1C185E7B0](v22, -1, -1);
  }

  swift_task_dealloc();
  unsigned __int8 v23 = (uint64_t (*)(uint64_t))v0[1];
  return v23(v5);
}

uint64_t sub_1BB2901A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned char v4[8] = a4;
  uint64_t v6 = sub_1BB815600();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7AD40);
  v4[13] = swift_task_alloc();
  uint64_t v7 = sub_1BB815620();
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1BB290308, a4, 0);
}

uint64_t sub_1BB290308()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 64) + OBJC_IVAR___ModelManagerMonitor_mInferenceMonitor, v3);
  uint64_t v4 = sub_1BB8155E0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v0 + 40) = v4;
  uint64_t v5 = sub_1BB293520(&qword_1E9F7ACB0, (void (*)(uint64_t))type metadata accessor for ModelManagerMonitor);
  uint64_t v6 = OBJC_IVAR___ModelManagerMonitor_mEventObservers;
  *(void *)(v0 + 136) = v5;
  *(void *)(v0 + 144) = v6;
  swift_beginAccess();
  *(_DWORD *)(v0 + 168) = *MEMORY[0x1E4F78DB0];
  uint64_t v7 = sub_1BB8155D0();
  uint64_t v8 = sub_1BB293520(&qword_1E9F7AD48, MEMORY[0x1E4F78DA0]);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1BB2904C0;
  uint64_t v10 = *(void *)(v0 + 104);
  return MEMORY[0x1F4187C78](v10, v7, v8);
}

uint64_t sub_1BB2904C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (*(void *)(v2 + 64))
    {
      swift_getObjectType();
      uint64_t v3 = sub_1BB815660();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = sub_1BB290AE4;
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v6 = sub_1BB29062C;
    uint64_t v7 = *(void *)(v2 + 64);
    uint64_t v5 = 0;
  }
  return MEMORY[0x1F4188298](v6, v7, v5);
}

uint64_t sub_1BB29062C()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
LABEL_4:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 96), v1, v2);
  if (sub_1BB8156B0())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(*(void *)(v0 + 64) + *(void *)(v0 + 144));
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v35 = v6 + 64;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  unint64_t v10 = v8 & v7;
  int64_t v36 = (unint64_t)(63 - v9) >> 6;
  uint64_t v37 = *(void *)(*(void *)(v0 + 64) + *(void *)(v0 + 144));
  uint64_t v11 = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_29;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return MEMORY[0x1F4187C78](v11, v12, v13);
    }
    if (v17 >= v36) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v14);
        if (!v18)
        {
          int64_t v14 = v17 + 3;
          if (v17 + 3 >= v36) {
            goto LABEL_33;
          }
          unint64_t v18 = *(void *)(v35 + 8 * v14);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_29:
    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v22 = *(void *)(v0 + 80);
    unsigned __int8 v23 = *(void (**)(char *))(*(void *)(v37 + 56) + 16 * v16);
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v20, *(unsigned int *)(v0 + 168), v21);
    swift_retain();
    char v24 = sub_1BB8155F0();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    if (qword_1E9F7DD80 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_1BB815640();
    __swift_project_value_buffer(v25, (uint64_t)qword_1E9F80748);
    uint64_t v26 = sub_1BB815630();
    os_log_type_t v27 = sub_1BB8156C0();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 67109120;
      *(_DWORD *)(v28 + 4) = v24 & 1;
      _os_log_impl(&dword_1BB0CE000, v26, v27, "ModelManagerMonitor::register calling observer with inferencesRunning  = %{BOOL}d", (uint8_t *)v28, 8u);
      MEMORY[0x1C185E7B0](v28, -1, -1);
    }

    char v38 = v24 & 1;
    v23(&v38);
    uint64_t v11 = swift_release();
  }
  int64_t v19 = v17 + 4;
  if (v19 < v36)
  {
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v14 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_37;
        }
        if (v14 >= v36) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v14);
        ++v19;
        if (v18) {
          goto LABEL_28;
        }
      }
    }
    int64_t v14 = v19;
    goto LABEL_28;
  }
LABEL_33:
  uint64_t v29 = *(void *)(v0 + 96);
  uint64_t v31 = *(void *)(v0 + 72);
  uint64_t v30 = *(void *)(v0 + 80);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  uint64_t v32 = sub_1BB8155D0();
  uint64_t v33 = sub_1BB293520(&qword_1E9F7AD48, MEMORY[0x1E4F78DA0]);
  uint64_t v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_1BB2904C0;
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = v32;
  uint64_t v13 = v33;
  return MEMORY[0x1F4187C78](v11, v12, v13);
}

uint64_t sub_1BB290AE4()
{
  uint64_t v1 = v0[8];
  v0[6] = v0[20];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7AD50);
  swift_willThrowTypedImpl();
  return MEMORY[0x1F4188298](sub_1BB290B74, v1, 0);
}

uint64_t sub_1BB290B74()
{
  swift_release();
  if (qword_1E9F7DD80 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = sub_1BB815640();
  __swift_project_value_buffer(v2, (uint64_t)qword_1E9F80748);
  id v3 = v1;
  id v4 = v1;
  uint64_t v5 = sub_1BB815630();
  os_log_type_t v6 = sub_1BB8156C0();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[20];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    id v11 = v8;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v12;
    sub_1BB8156E0();
    *unint64_t v10 = v12;

    _os_log_impl(&dword_1BB0CE000, v5, v6, "ModelManagerMonitor:: exception while executing Task...%@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7AD58);
    swift_arrayDestroy();
    MEMORY[0x1C185E7B0](v10, -1, -1);
    MEMORY[0x1C185E7B0](v9, -1, -1);
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1BB290DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1BB815690();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1BB815680();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1BB2931A4(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1BB815660();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1BB2910D4(const void *a1, const void *a2, uint64_t a3)
{
  void v3[2] = a3;
  uint64_t v5 = _Block_copy(a1);
  v3[3] = _Block_copy(a2);
  uint64_t v6 = swift_allocObject();
  v3[4] = v6;
  *(void *)(v6 + 16) = v5;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1BB2911CC;
  return sub_1BB28FDF4((uint64_t)sub_1BB293438, v6);
}

uint64_t sub_1BB2911CC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 24);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, a1);
  _Block_release(*(const void **)(v3 + 24));
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_1BB291340(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  return MEMORY[0x1F4188298](sub_1BB291360, v1, 0);
}

uint64_t sub_1BB291360()
{
  uint64_t v1 = v0[9] + OBJC_IVAR___ModelManagerMonitor_mEventObservers;
  swift_beginAccess();
  if (*(void *)(*(void *)v1 + 16))
  {
    sub_1BB292184(v0[8]);
    if (v2)
    {
      if (qword_1E9F7DD80 != -1) {
        swift_once();
      }
      uint64_t v3 = sub_1BB815640();
      __swift_project_value_buffer(v3, (uint64_t)qword_1E9F80748);
      uint64_t v4 = sub_1BB815630();
      os_log_type_t v5 = sub_1BB8156C0();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = v0[8];
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 134217984;
        v0[5] = v6;
        sub_1BB8156E0();
        _os_log_impl(&dword_1BB0CE000, v4, v5, "ModelManagerMonitor:: removing observer[%ld]", v7, 0xCu);
        MEMORY[0x1C185E7B0](v7, -1, -1);
      }
      uint64_t v8 = v0[8];

      swift_beginAccess();
      uint64_t v9 = sub_1BB292264(v8);
      swift_endAccess();
      if (v9) {
        sub_1BB292D50(v9);
      }
    }
  }
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1BB2916AC(uint64_t a1, void *aBlock, uint64_t a3)
{
  void v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[4] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1BB291780;
  _DWORD v6[8] = a1;
  v6[9] = a3;
  return MEMORY[0x1F4188298](sub_1BB291360, a3, 0);
}

uint64_t sub_1BB291780()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  _Block_release(*(const void **)(v1 + 24));
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1BB2918C8()
{
  if (*(void *)(v0 + OBJC_IVAR___ModelManagerMonitor_mInferenceTask))
  {
    swift_retain();
    sub_1BB8156A0();
    swift_release();
  }
  uint64_t v1 = v0 + OBJC_IVAR___ModelManagerMonitor_mInferenceMonitor;
  uint64_t v2 = sub_1BB815620();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

id sub_1BB2919A4()
{
  uint64_t v1 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  swift_retain();
  sub_1BB815610();
  *(void *)&v1[OBJC_IVAR___ModelManagerMonitor_mInferenceTask] = 0;
  uint64_t v2 = OBJC_IVAR___ModelManagerMonitor_mEventObservers;
  *(void *)&v1[v2] = sub_1BB292A48(MEMORY[0x1E4FBC860]);
  *(void *)&v1[OBJC_IVAR___ModelManagerMonitor_mCounter] = 0;
  swift_release();
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t sub_1BB291AF4()
{
  return v0;
}

uint64_t sub_1BB291B00()
{
  uint64_t v0 = sub_1BB815640();
  __swift_allocate_value_buffer(v0, qword_1E9F80748);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E9F80748);
  sub_1BB2935CC();
  sub_1BB8156D0();
  return sub_1BB815650();
}

uint64_t sub_1BB291B98(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  objc_super v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1BB291C74;
  return v6(a1);
}

uint64_t sub_1BB291C74()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1BB291D6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_1BB29360C;
  return v6();
}

uint64_t sub_1BB291E38(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1BB29360C;
  return v7();
}

uint64_t sub_1BB291F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1BB815690();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1BB815680();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1BB2931A4(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1BB815660();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1BB2920A8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1BB293618;
  return v6(a1);
}

unint64_t sub_1BB292184(uint64_t a1)
{
  uint64_t v2 = sub_1BB815740();

  return sub_1BB2921C8(a1, v2);
}

unint64_t sub_1BB2921C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BB292264(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1BB292184(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1BB29289C();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v5);
  sub_1BB2925C4(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1BB292310(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7AD28);
  uint64_t result = sub_1BB815710();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v29;
              }
              unint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      long long v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = sub_1BB815740();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *unint64_t v3 = v7;
  return result;
}

unint64_t sub_1BB2925C4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_1BB8156F0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = sub_1BB815740();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              _OWORD *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1BB29275C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1BB292184(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1BB29289C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_release();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      CFTypeRef v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1BB292310(result, a4 & 1);
  uint64_t result = sub_1BB292184(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    unint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_1BB815730();
  __break(1u);
  return result;
}

void *sub_1BB29289C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7AD28);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1BB815700();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1BB292A48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7AD28);
  uint64_t v3 = (void *)sub_1BB815720();
  uint64_t v4 = *(void *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 40);
  unint64_t result = sub_1BB292184(v4);
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  unint64_t v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    uint64_t v8 = v3[2];
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      break;
    }
    void v3[2] = v10;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v11 = (_OWORD *)((char *)v7 + 24);
    uint64_t v4 = *((void *)v7 - 1);
    long long v13 = *v7;
    swift_retain();
    unint64_t result = sub_1BB292184(v4);
    unint64_t v7 = v11;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1BB292B94()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1BB292BCC(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for ModelManagerMonitor()
{
  uint64_t result = qword_1E9F7DE30;
  if (!qword_1E9F7DE30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1BB292C7C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1BB292CBC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1BB29360C;
  return sub_1BB2901A8((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_1BB292D50(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1BB292D60()
{
  return type metadata accessor for ModelManagerMonitor();
}

uint64_t sub_1BB292D68()
{
  uint64_t result = sub_1BB815620();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BB292E28()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1BB292E68()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1BB292F1C;
  char v6 = (uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_1E9F7ACC8 + dword_1E9F7ACC8);
  return v6(v2, v3, v4);
}

uint64_t sub_1BB292F1C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1BB293014()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1BB29360C;
  char v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1E9F7ACD8 + dword_1E9F7ACD8);
  return v6(v2, v3, v4);
}

uint64_t sub_1BB2930D8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  char v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1BB29360C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1E9F7ACE8 + dword_1E9F7ACE8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1BB2931A4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9F7ACA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BB293204(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1BB29360C;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1E9F7ACF8 + dword_1E9F7ACF8);
  return v6(a1, v4);
}

uint64_t sub_1BB2932BC()
{
  _Block_release(*(const void **)(v0 + 16));
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1BB293304()
{
  uint64_t v2 = (const void *)v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1BB29360C;
  char v6 = (uint64_t (*)(const void *, const void *, uint64_t))((char *)&dword_1E9F7AD08 + dword_1E9F7AD08);
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_22Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1BB293400()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1BB293438(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_1BB293468(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1BB292F1C;
  char v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1E9F7AD30 + dword_1E9F7AD30);
  return v6(a1, v4);
}

uint64_t sub_1BB293520(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_1BB2935CC()
{
  unint64_t result = qword_1E9F7AD60;
  if (!qword_1E9F7AD60)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9F7AD60);
  }
  return result;
}

void DspLib::XTC::HRIRDatabase::getHRTFwithAngleAndRotation(uint64_t a1, unint64_t *a2, float a3, float a4)
{
  if (*(_DWORD *)(a1 + 4))
  {
    float v5 = a3 * 0.5;
    float v6 = a4 - (float)(a3 * 0.5);
    float v7 = v5 + a4;
    DspLib::XTC::HRIRDatabase::getHRTF(a1, 0, (uint64_t)a2, v6, v7);
  }
  else
  {
    *a2 = 0;
    for (uint64_t i = 2; i != 42; i += 10)
      DspLib::ComplexVector::setLength((DspLib::ComplexVector *)&a2[i], *a2);
    BOOL v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC_HRIRdatabase.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 107);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::XTC::HRIRDatabase::getHRTF(uint64_t a1, int a2, uint64_t a3, float a4, float a5)
{
  *(void *)a3 = (1 << (*(_DWORD *)(a1 + 4) - 1));
  uint64_t v10 = (DspLib::ComplexVector *)(a3 + 16);
  for (uint64_t i = 16; i != 336; i += 80)
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a3 + i), *(void *)a3);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)a1;
  if ((*(unsigned char *)(a1 + 137) & *(unsigned char *)(a1 + 136)) != 0)
  {
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, v10, a4);
    char v12 = (DspLib::ComplexVector *)(a3 + 96);
    long long v13 = (DspLib::XTC::HRIRDatabase *)a1;
    int v14 = 0;
    int v15 = a2;
    float v16 = a5;
  }
  else
  {
    if (*(unsigned char *)(a1 + 136))
    {
      DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, v10, a4);
      DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, (DspLib::ComplexVector *)(a3 + 96), a5);
      DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 0, a2, (DspLib::ComplexVector *)(a3 + 176), -a4);
      float v21 = -a5;
      uint64_t v17 = (DspLib::ComplexVector *)(a3 + 256);
      uint64_t v18 = (DspLib::XTC::HRIRDatabase *)a1;
      int v19 = 0;
      int v20 = a2;
      goto LABEL_8;
    }
    if (!*(unsigned char *)(a1 + 137)) {
      return;
    }
    DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 1, a2, v10, -a4);
    float v16 = -a5;
    char v12 = (DspLib::ComplexVector *)(a3 + 96);
    long long v13 = (DspLib::XTC::HRIRDatabase *)a1;
    int v14 = 1;
    int v15 = a2;
  }
  DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth(v13, v14, v15, v12, v16);
  DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth((DspLib::XTC::HRIRDatabase *)a1, 1, a2, (DspLib::ComplexVector *)(a3 + 176), a4);
  uint64_t v17 = (DspLib::ComplexVector *)(a3 + 256);
  uint64_t v18 = (DspLib::XTC::HRIRDatabase *)a1;
  int v19 = 1;
  int v20 = a2;
  float v21 = a5;
LABEL_8:

  DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth(v18, v19, v20, v17, v21);
}

float DspLib::XTC::HRIRDatabase::getHRTFForEarSpeakerAndAzimuth(DspLib::XTC::HRIRDatabase *a1, int a2, int a3, DspLib::ComplexVector *a4, float a5)
{
  *(void *)float v16 = 0;
  double v9 = DspLib::XTC::HRIRDatabase::indexesAndInterpolationFactorForAzimuth(a1, a5, &v16[1], v16);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v14, 1uLL, 1u);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v13, 1uLL, 1u);
  std::function<void ()(unsigned int,DspLib::XTC::HRTFSet::Ear,DspLib::XTC::HRTFSet::Speaker,DspLibBuffer *)>::operator()((uint64_t)a1 + 104, v16[1], a2, a3, (uint64_t)v14);
  std::function<void ()(unsigned int,DspLib::XTC::HRTFSet::Ear,DspLib::XTC::HRTFSet::Speaker,DspLibBuffer *)>::operator()((uint64_t)a1 + 104, v16[0], a2, a3, (uint64_t)v13);
  if (a4
    && vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v14)
    && vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v13))
  {
    float v10 = v9;
    DspLib::XTC::HRIRDatabase::performFFTandInterpolation(a1, (DspLibBuffer *)v14, (DspLibBuffer *)v13, v10, a4);
  }
  float v11 = v15;
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v13);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v14);
  return v11;
}

void sub_1BB29398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)va);
  _Unwind_Resume(a1);
}

double DspLib::XTC::HRIRDatabase::indexesAndInterpolationFactorForAzimuth(DspLib::XTC::HRIRDatabase *this, float a2, unsigned int *a3, unsigned int *a4)
{
  *a3 = 0;
  *a4 = 0;
  float v7 = (DspLib::XTC::HRIRDatabase *)((char *)this + 16);
  uint64_t v8 = DspLibBuffer::channel((DspLib::XTC::HRIRDatabase *)((char *)this + 16), 0);
  double v9 = 180.0;
  double v10 = 180.0;
  if (vp::utility::CPU_Profiler::get_cycle_count(v7))
  {
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    double v10 = 180.0;
    do
    {
      float v13 = *(float *)(v8 + 4 * v11) - a2;
      double v14 = v13;
      if (v13 <= 180.0)
      {
        if (v13 < -180.0) {
          double v14 = v14 + 360.0;
        }
      }
      else
      {
        double v14 = v14 + -360.0;
      }
      double v15 = fabs(v14);
      if (v14 <= 0.0 && v15 < v10)
      {
        *a3 = v12;
        double v10 = v15;
      }
      unint64_t v11 = v12 + 1;
      unint64_t cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v7);
      unsigned int v12 = v11;
    }
    while (cycle_count > v11);
  }
  if (vp::utility::CPU_Profiler::get_cycle_count(v7))
  {
    unint64_t v18 = 0;
    unsigned int v19 = 0;
    double v9 = 180.0;
    do
    {
      float v20 = *(float *)(v8 + 4 * v18) - a2;
      double v21 = v20;
      if (v20 <= 180.0)
      {
        if (v20 < -180.0) {
          double v21 = v21 + 360.0;
        }
      }
      else
      {
        double v21 = v21 + -360.0;
      }
      if (v19 != *a3)
      {
        double v22 = fabs(v21);
        if (v21 > 0.0 && v22 < v9)
        {
          *a4 = v19;
          double v9 = v22;
        }
      }
      unint64_t v18 = v19 + 1;
      unint64_t v24 = vp::utility::CPU_Profiler::get_cycle_count(v7);
      unsigned int v19 = v18;
    }
    while (v24 > v18);
  }
  return v10 / (v10 + v9);
}

uint64_t std::function<void ()(unsigned int,DspLib::XTC::HRTFSet::Ear,DspLib::XTC::HRTFSet::Speaker,DspLibBuffer *)>::operator()(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  int v9 = a3;
  int v10 = a2;
  int v8 = a4;
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

void DspLib::XTC::HRIRDatabase::performFFTandInterpolation(DspLib::XTC::HRIRDatabase *this, DspLibBuffer *a2, DspLibBuffer *x2_0, float a4, DspLib::ComplexVector *a5)
{
  int v9 = *((_DWORD *)this + 1);
  unint64_t v10 = 1 << v9;
  int cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  unint64_t v12 = *((void *)a5 + 2);
  if (v12 == (unint64_t)(1 << v9) >> 1)
  {
    LODWORD(v13) = cycle_count;
    std::vector<float>::vector(&v27, v10);
    std::vector<float>::vector(&v25, v10);
    DspLib::clear((float *)v27, ((char *)v28 - (char *)v27) >> 2);
    DspLib::clear((float *)v25, ((char *)v26 - (char *)v25) >> 2);
    if (v10 >= v13) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = v10;
    }
    double v14 = (void *)DspLibBuffer::channel(a2, 0);
    DspLib::copy(v14, v13, v27);
    double v15 = (void *)DspLibBuffer::channel(x2_0, 0);
    DspLib::copy(v15, v13, v25);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(v24, v10);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&__Z, v12, 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v22, v12, 0);
    DspLib::multiply((float *)v27, ((char *)v28 - (char *)v27) >> 2, 0.5);
    DspLib::multiply((float *)v25, ((char *)v26 - (char *)v25) >> 2, 0.5);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v24, v27, ((char *)v28 - (char *)v27) >> 2, &__Z);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(v24, v25, ((char *)v26 - (char *)v25) >> 2, &v22);
    unint64_t v16 = v10 >> 1;
    *__Z.imagp = 0.0;
    *v22.imagp = 0.0;
    if (v9)
    {
      unint64_t v17 = 0;
      if (v16 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v16;
      }
      do
      {
        DspLib::FFT::interpolate((DspLib *)1, __Z.realp[v17], __Z.imagp[v17], v22.realp[v17], v22.imagp[v17], a4);
        DspLib::ComplexSpan::setElement(a5, v17++, v29);
      }
      while (v18 != v17);
    }
    float v19 = *(float *)(*(void *)a5 + 4 * (v16 - 1));
    float v20 = *(float *)(*((void *)a5 + 1) + 4 * (v16 - 1));
    **((float **)a5 + 1) = DspLib::sign((DspLib *)1, v20) * sqrtf((float)(v20 * v20) + (float)(v19 * v19));
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v22);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&__Z);
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)v24);
    if (v25)
    {
      BOOL v26 = v25;
      operator delete(v25);
    }
    if (v27)
    {
      uint64_t v28 = v27;
      operator delete(v27);
    }
  }
  else
  {
    double v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC_HRIRdatabase.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v21, 240);
    ++DspLibDebug::mAssertCounter;
  }
}

void sub_1BB293E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)va);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)va1);
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(v3 - 160);
  uint64_t v5 = *(void **)(v3 - 144);
  if (v5)
  {
    *(void *)(v3 - 136) = v5;
    operator delete(v5);
  }
  float v6 = *(void **)(v3 - 120);
  if (v6)
  {
    *(void *)(v3 - 112) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(void *a1, DSPComplex *__C, int a3, DSPSplitComplex *__Z)
{
  vDSP_ctoz(__C, 2, __Z, 1, *a1 >> 1);
  float v6 = (const vDSP_DFT_SetupStruct *)a1[1];
  if (v6)
  {
    realp = __Z->realp;
    imagp = __Z->imagp;
    uint64_t v9 = __Z->realp;
    vDSP_DFT_Execute(v6, realp, imagp, v9, imagp);
  }
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1BB293F90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(uint64_t a1)
{
  uint64_t v2 = *(vDSP_DFT_SetupStruct **)(a1 + 8);
  if (v2) {
    vDSP_DFT_DestroySetup(v2);
  }
  return a1;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

vDSP_Length *DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(vDSP_Length *a1, vDSP_Length a2)
{
  *a1 = a2;
  vDSP_DFT_Setup Setup = vDSP_DFT_zrop_CreateSetup(0, a2, vDSP_DFT_FORWARD);
  a1[1] = (vDSP_Length)Setup;
  if (!Setup)
  {
    uint64_t v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.h");
    printf("DSP Sound assertion in %s at line %d\n", v5, 78);
    ++DspLibDebug::mAssertCounter;
  }
  return a1;
}

DspLib::PowerGuard::Algorithm *DspLib::PowerGuard::Algorithm::Algorithm(DspLib::PowerGuard::Algorithm *this)
{
  uint64_t v2 = (_OWORD *)((char *)this + 428);
  uint64_t v3 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::PowerGuard::Parameters::kDefinition);
  *(void *)uint64_t v3 = &unk_1F14A65B8;
  *(unsigned char *)(v3 + 296) = 1;
  *(void *)(v3 + 304) = 0;
  *(_DWORD *)(v3 + 312) = 0;
  *(void *)(v3 + 320) = 0;
  *(void *)(v3 + 328) = 0;
  int64x2_t v4 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v3 + 352) = v4;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 412) = 0u;
  *(void *)(v3 + 336) = &unk_1F14A8E98;
  *(void *)(v3 + 344) = 0x4097700000000000;
  *uint64_t v2 = xmmword_1BB872A60;
  *(void *)(v3 + 444) = 0x3F40000000000000;
  *(void *)(v3 + 456) = 0;
  *(unsigned char *)(v3 + 464) = 0;
  *(_OWORD *)(v3 + 472) = 0u;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(void *)(v3 + 536) = 1;
  *(_DWORD *)(v3 + 544) = 1065353216;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 568) = 0u;
  *(void *)(v3 + 584) = 1;
  *(_DWORD *)(v3 + 592) = 1065353216;
  *(_OWORD *)(v3 + 600) = 0u;
  *(_OWORD *)(v3 + 616) = 0u;
  *(void *)(v3 + 632) = 0x40E7700000000000;
  *(_OWORD *)(v3 + 640) = 0u;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 672) = 0u;
  *(_DWORD *)(v3 + 688) = 1065353216;
  *(void *)(v3 + 712) = 0;
  *(void *)(v3 + 696) = 0;
  *(void *)(v3 + 704) = 0;
  *(void *)(v3 + 728) = 0x4097700000000000;
  *(_OWORD *)(v3 + 796) = 0u;
  *(_OWORD *)(v3 + 768) = 0u;
  *(_OWORD *)(v3 + 784) = 0u;
  *(int64x2_t *)(v3 + 736) = v4;
  *(_OWORD *)(v3 + 752) = 0u;
  *(void *)(v3 + 720) = &unk_1F14A8E98;
  v2[24] = xmmword_1BB872A60;
  *(void *)(v3 + 828) = 0x3F40000000000000;
  *(void *)(v3 + 840) = 0;
  *(unsigned char *)(v3 + 848) = 0;
  *(_OWORD *)(v3 + 904) = 0u;
  *(_OWORD *)(v3 + 888) = 0u;
  *(_OWORD *)(v3 + 872) = 0u;
  *(_OWORD *)(v3 + 856) = 0u;
  *(void *)(v3 + 920) = 1;
  *(_DWORD *)(v3 + 928) = 1065353216;
  *(_OWORD *)(v3 + 936) = 0u;
  *(_OWORD *)(v3 + 952) = 0u;
  *(void *)(v3 + 968) = 1;
  *(_DWORD *)(v3 + 976) = 1065353216;
  *(_OWORD *)(v3 + 984) = 0u;
  *(_OWORD *)(v3 + 1000) = 0u;
  *(void *)(v3 + 1024) = 0x4097700000000000;
  *(void *)(v3 + 1032) = 1;
  *(void *)(v3 + 1040) = 1;
  *(_OWORD *)(v3 + 1092) = 0u;
  *(_OWORD *)(v3 + 1064) = 0u;
  *(_OWORD *)(v3 + 1080) = 0u;
  *(_OWORD *)(v3 + 1048) = 0u;
  *(void *)(v3 + 1016) = &unk_1F14A8EC8;
  *(void *)(v3 + 1112) = 1;
  *(_DWORD *)(v3 + 1120) = 1065353216;
  *(_OWORD *)(v3 + 1128) = 0u;
  *(_OWORD *)(v3 + 1144) = 0u;
  *(void *)(v3 + 1160) = 0x40E7700000000000;
  *(_OWORD *)(v3 + 1200) = 0u;
  *(_OWORD *)(v3 + 1184) = 0u;
  *(_OWORD *)(v3 + 1168) = 0u;
  *(_DWORD *)(v3 + 1216) = 1065353216;
  *(void *)(v3 + 1232) = 0;
  *(void *)(v3 + 1224) = 0;
  *(void *)(v3 + 1240) = 0;
  *(void *)(v3 + 1256) = 0x4097700000000000;
  *(int64x2_t *)(v3 + 1264) = v4;
  *(_OWORD *)(v3 + 1324) = 0u;
  *(_OWORD *)(v3 + 1312) = 0u;
  *(_OWORD *)(v3 + 1296) = 0u;
  *(_OWORD *)(v3 + 1280) = 0u;
  *(void *)(v3 + 1248) = &unk_1F14A8EC8;
  *(void *)(v3 + 1344) = 1;
  *(_DWORD *)(v3 + 1352) = 1065353216;
  *(_OWORD *)(v3 + 1392) = 0u;
  *(_OWORD *)(v3 + 1376) = 0u;
  *(_OWORD *)(v3 + 1360) = 0u;
  DspLib::PowerGuard::TargetCalculator::TargetCalculator((DspLib::PowerGuard::TargetCalculator *)(v3 + 1408));
  *((void *)this + 223) = 0;
  *((void *)this + 222) = 0;
  *((_DWORD *)this + 450) = 0;
  *((void *)this + 224) = 0;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *(_OWORD *)((char *)this + 1756) = 0u;
  *((unsigned char *)this + 1808) = 0;
  *((_DWORD *)this + 453) = 0;
  (*(void (**)(DspLib::PowerGuard::Algorithm *))(*(void *)this + 136))(this);
  return this;
}

void sub_1BB294358(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  DspLib::PowerGuard::PowerController::~PowerController(v7);
  DspLib::PowerGuard::TweeterPowerAnalyzer::~TweeterPowerAnalyzer(v5);
  DspLib::PowerGuard::GainApplier::~GainApplier((DspLib::PowerGuard::GainApplier *)(v1 + 1160));
  DspLib::PowerGuard::TweeterPowerAnalyzer::~TweeterPowerAnalyzer(v4);
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer(v3);
  DspLib::PowerGuard::GainApplier::~GainApplier((DspLib::PowerGuard::GainApplier *)(v1 + 632));
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer(v2);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters((DspLib::AlgorithmBaseNewParameters *)v1);
  _Unwind_Resume(a1);
}

void DspLib::PowerGuard::PowerController::~PowerController(DspLib::PowerGuard::PowerController *this)
{
  uint64_t v2 = (void *)*((void *)this + 46);
  if (v2)
  {
    *((void *)this + 47) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 42);
  if (v3)
  {
    *((void *)this + 43) = v3;
    operator delete(v3);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    uint64_t v5 = *(void **)((char *)this + i + 168);
    if (v5)
    {
      *(void *)((char *)this + i + 176) = v5;
      operator delete(v5);
    }
  }
  for (uint64_t j = 0; j != -96; j -= 24)
  {
    uint64_t v7 = *(void **)((char *)this + j + 72);
    if (v7)
    {
      *(void *)((char *)this + j + 80) = v7;
      operator delete(v7);
    }
  }
}

void DspLib::PowerGuard::TweeterPowerAnalyzer::~TweeterPowerAnalyzer(DspLib::PowerGuard::TweeterPowerAnalyzer *this)
{
  *(void *)this = &unk_1F14A8EC8;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F14A6700;
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  int64x2_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
}

void DspLib::PowerGuard::GainApplier::~GainApplier(DspLib::PowerGuard::GainApplier *this)
{
  int64x2_t v4 = (void **)((char *)this + 64);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(DspLib::AlgorithmBaseNewParameters *this)
{
  *(void *)this = &unk_1F14A88D8;
  uint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  int64x2_t v4 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_1F14A87D8;
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

uint64_t DspLib::PowerGuard::Algorithm::initialize(void **this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize((DspLib::AlgorithmBase *)this, a2, a3);
  if (v4)
  {
    double v5 = (*((double (**)(void **))*this + 5))(this);
    DspLib::PowerGuard::WooferPowerAnalyzer::initialize(this + 42, v5);
    double v6 = (*((double (**)(void **))*this + 5))(this);
    DspLib::PowerGuard::WooferPowerAnalyzer::initialize(this + 90, v6);
    double v7 = (*((double (**)(void **))*this + 5))(this);
    DspLib::PowerGuard::TweeterPowerAnalyzer::initialize(this + 127, v7);
    double v8 = (*((double (**)(void **))*this + 5))(this);
    DspLib::PowerGuard::TweeterPowerAnalyzer::initialize(this + 156, v8);
    (*((void (**)(void **, uint64_t))*this + 29))(this, 4 * (void)this[45]);
    double v9 = (*((double (**)(void **))*this + 5))(this);
    unint64_t v10 = (*((uint64_t (**)(void **))*this + 27))(this);
    DspLib::PowerGuard::GainApplier::initialize((DspLib::PowerGuard::GainApplier *)(this + 79), v9, 1uLL, v10);
    if ((*((unsigned int (**)(void **))*this + 7))(this)) {
      unint64_t v11 = (*((unsigned int (**)(void **))*this + 7))(this) - 1;
    }
    else {
      unint64_t v11 = 0;
    }
    double v12 = (*((double (**)(void **))*this + 5))(this);
    unint64_t v13 = (*((uint64_t (**)(void **))*this + 27))(this);
    DspLib::PowerGuard::GainApplier::initialize((DspLib::PowerGuard::GainApplier *)(this + 145), v12, v11, v13);
    *((unsigned char *)this + 8) = 1;
    (*((void (**)(void **, char *, void))*this + 33))(this, (char *)this + 264, 0);
  }
  (*((void (**)(void **))*this + 17))(this);
  return v4;
}

BOOL DspLib::PowerGuard::Algorithm::uninitialize(DspLib::PowerGuard::Algorithm *this)
{
  DspLib::PowerGuard::WooferPowerAnalyzer::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 336));
  DspLib::PowerGuard::WooferPowerAnalyzer::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 720));
  DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 131, (unint64_t *)1, 0);
  DspLib::MultiMovingAverage::setLengths((uint64_t *)this + 160, (unint64_t *)1, 0);
  DspLib::PowerGuard::GainApplier::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 632));
  DspLib::PowerGuard::GainApplier::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 1160));

  return DspLib::PowerGuard::PowerController::uninitialize((DspLib::PowerGuard::Algorithm *)((char *)this + 1408));
}

void DspLib::PowerGuard::Algorithm::enforceParameterConstraints(DspLib::PowerGuard::Algorithm *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)((char *)this + 264);
  do
  {
    float v4 = DspLib::AlgorithmParametersInstance::operator[](v3, v2 + 11);
    if (v4 > DspLib::AlgorithmParametersInstance::operator[](v3, v2 + 7))
    {
      double v5 = (float *)((char *)this + 4 * v2);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)v3, v2 + 11, v5[416]);
      DspLib::AlgorithmParametersInstance::setValue((DspLib::AlgorithmParametersInstance *)v3, v2 + 7, v5[420]);
    }
    ++v2;
  }
  while (v2 != 4);
}

char *DspLib::PowerGuard::Algorithm::setParameters(DspLib::PowerGuard::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  unint64_t result = DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((unsigned char *)this + 8))
  {
    DspLib::PowerGuard::Algorithm::enforceParameterConstraints(this);
    *((unsigned char *)this + 296) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) >= 0.5;
    LODWORD(v3) = vcvtad_u64_f64(*((double *)this + 43)* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u)/ 1000.0);
    unint64_t v6 = *((void *)this + 45) * v3;
    *((void *)this + 38) = v6;
    float v7 = (float)((float)v6 * 1000.0) / *((double *)this + 2);
    *((float *)this + 78) = v7;
    uint64_t v8 = DspLib::AlgorithmParametersInstance::group((DspLib::PowerGuard::Algorithm *)((char *)this + 264), 0);
    float v9 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2u);
    float v11 = DspLib::dB2Amp(v10, -v9);
    DspLib::PowerGuard::PowerController::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1408), v3, (const float *)(v8 + 44), (const float *)(v8 + 28), 4uLL, v11);
    if (*((unsigned char *)this + 1808))
    {
      float v12 = *((float *)this + 453);
    }
    else
    {
      float v12 = (*(float (**)(DspLib::PowerGuard::Algorithm *, uint64_t))(*(void *)this + 96))(this, 15);
      *((float *)this + 453) = v12;
    }
    float v13 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x11u);
    uint64_t v14 = (float *)(v8 + 12);
    float v15 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x14u);
    float v16 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x13u);
    DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 336), v12, v13, v14, 4uLL, v15, v16);
    float v17 = *((float *)this + 453);
    float v18 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x11u);
    float v19 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x14u);
    float v20 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x13u);
    DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 720), v17, v18, v14, 4uLL, v19, v20);
    unint64_t v21 = *((void *)this + 38);
    float v22 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u);
    float v23 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x16u);
    DspLib::PowerGuard::GainApplier::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 632), v21, v22, v23);
    float v24 = 1.0 / DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x15u);
    float v25 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x10u);
    float v26 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x12u);
    DspLib::PowerGuard::TweeterPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1016), v25, v24, v26, v14, 4uLL);
    float v27 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x10u);
    float v28 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x12u);
    DspLib::PowerGuard::TweeterPowerAnalyzer::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1248), v27, v24, v28, v14, 4uLL);
    unint64_t v29 = *((void *)this + 38);
    float v30 = *((float *)this + 78);
    float v31 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x17u);
    return (char *)DspLib::PowerGuard::GainApplier::setParameters((DspLib::PowerGuard::Algorithm *)((char *)this + 1160), v29, v30, v31);
  }
  return result;
}

void DspLib::PowerGuard::Algorithm::setSpVACalibration(uint64_t a1, _DWORD *a2)
{
  *(unsigned char *)(a1 + 1808) = 1;
  *(_DWORD *)(a1 + 1812) = *a2;
  unint64_t v3 = (uint64_t *)(a1 + 264);
  float v4 = (float *)(DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)(a1 + 264), 0) + 12);
  float v5 = *(float *)(a1 + 1812);
  float v6 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x11u);
  float v7 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x14u);
  float v8 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x13u);
  DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::WooferPowerAnalyzer *)(a1 + 336), v5, v6, v4, 4uLL, v7, v8);
  float v9 = *(float *)(a1 + 1812);
  float v10 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x11u);
  float v11 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x14u);
  float v12 = DspLib::AlgorithmParametersInstance::operator[](v3, 0x13u);

  DspLib::PowerGuard::WooferPowerAnalyzer::setParameters((DspLib::PowerGuard::WooferPowerAnalyzer *)(a1 + 720), v9, v10, v4, 4uLL, v11, v12);
}

void DspLib::PowerGuard::Algorithm::reset(float **this)
{
  DspLib::PowerGuard::WooferPowerAnalyzer::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)(this + 42));
  DspLib::PowerGuard::WooferPowerAnalyzer::reset((DspLib::PowerGuard::WooferPowerAnalyzer *)(this + 90));
  DspLib::PowerGuard::TweeterPowerAnalyzer::reset((DspLib::PowerGuard::TweeterPowerAnalyzer *)(this + 127));
  DspLib::PowerGuard::TweeterPowerAnalyzer::reset((DspLib::PowerGuard::TweeterPowerAnalyzer *)(this + 156));
  DspLib::PowerGuard::PowerController::reset(this + 176);
  this[40] = 0;
  this[41] = 0;
  *((_OWORD *)this + 87) = 0u;
  DspLib::PowerGuard::GainApplier::reset((DspLib::PowerGuard::GainApplier *)(this + 79));

  DspLib::PowerGuard::GainApplier::reset((DspLib::PowerGuard::GainApplier *)(this + 145));
}

float DspLib::PowerGuard::Algorithm::setAdmittanceModel(uint64_t a1, uint64_t a2)
{
  DspLib::PowerGuard::WooferPowerAnalyzer::setAdmittanceCoeffs(a1 + 336, *(void *)a2, *(void *)(a2 + 8));
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 16);
  DspLib::PowerGuard::WooferPowerAnalyzer::setAdmittanceCoeffs(a1 + 720, *(void *)a2, *(void *)(a2 + 8));
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 816) = result;
  return result;
}

void DspLib::PowerGuard::Algorithm::processBlock(uint64_t a1, uint64_t a2, float *const **a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    }
    long long v35 = 0u;
    *(_OWORD *)__N = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    DspLib::PowerGuard::PowerAnalyzerBase::process((DspLib::PowerGuard::PowerAnalyzerBase *)(a1 + 336), *(const float *const **)a2, 1, v3, &v31, 0);
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = v7 - 1;
    if (v7 == 1) {
      float v9 = 0;
    }
    else {
      float v9 = (const float *const *)(*(void *)a2 + 8);
    }
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    DspLib::PowerGuard::PowerAnalyzerBase::process((DspLib::PowerGuard::PowerAnalyzerBase *)(a1 + 1016), v9, v8, v3, &v25, 0);
    float v10 = DspLib::PowerGuard::PowerController::process(a1 + 1408, (uint64_t)&v31, (uint64_t *)(a1 + 752), (uint64_t)&v25, (uint64_t *)(a1 + 1280));
    if (*(unsigned char *)(a1 + 296)) {
      float v12 = 1.0;
    }
    else {
      float v12 = v11;
    }
    if (*(unsigned char *)(a1 + 296)) {
      float v10 = 1.0;
    }
    DspLib::PowerGuard::GainApplier::process((DspLib::PowerGuard::GainApplier *)(a1 + 632), *(const float *const **)a2, *a3, v3, v10);
    DspLib::PowerGuard::PowerAnalyzerBase::process((DspLib::PowerGuard::PowerAnalyzerBase *)(a1 + 720), (const float *const *)*a3, 1, v3, &v19, v13);
    long long v33 = v21;
    long long v34 = v22;
    long long v35 = v23;
    *(_OWORD *)__N = v24;
    long long v31 = v19;
    long long v32 = v20;
    if (v8) {
      uint64_t v14 = *a3 + 1;
    }
    else {
      uint64_t v14 = 0;
    }
    DspLib::PowerGuard::GainApplier::process((DspLib::PowerGuard::GainApplier *)(a1 + 1160), v9, v14, v3, v12);
    DspLib::PowerGuard::PowerAnalyzerBase::process((DspLib::PowerGuard::PowerAnalyzerBase *)(a1 + 1248), (const float *const *)v14, v8, v3, &v19, v15);
    long long v27 = v21;
    long long v28 = v22;
    long long v29 = v23;
    long long v30 = v24;
    long long v25 = v19;
    long long v26 = v20;
    int v16 = *(unsigned __int8 *)(a1 + 24);
    if (*(unsigned char *)(a1 + 24) && __N[0])
    {
      uint64_t v17 = 0;
      uint64_t v18 = a1;
      do
      {
        *(float *)(v18 + 320) = DspLib::maxv((const float *)((char *)&v32 + v17), __N[0]);
        *(float *)(v18 + 1392) = DspLib::maxv((const float *)((char *)&v26 + v17), __N[0]);
        v17 += 16;
        v18 += 4;
      }
      while (v17 != 64);
      int v16 = *(unsigned __int8 *)(a1 + 24);
    }
    if (v16) {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v3, *(double *)(a1 + 16));
    }
  }
}

float DspLib::PowerGuard::Algorithm::status(uint64_t a1, uint64_t a2)
{
  float v4 = *(double *)(a1 + 456);
  unint64_t v5 = *(void *)(a1 + 520);
  *(float *)(a2 + 52) = v4;
  *(float *)(a2 + 56) = (float)v5;
  if (!v5)
  {
    LODWORD(v7) = 0;
LABEL_7:
    uint64_t v8 = a2 + 20 * v7 + 60;
    uint64_t v9 = v7 + 1;
    do
    {
      int v19 = 0;
      long long v18 = DspLib::Biquad::kBypassSection;
      DspLib::Biquad::write((uint64_t)&v18, v8);
      v8 += 20;
    }
    while (v9++ != 4);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(a1 + 464), v6, 0, &v20);
    DspLib::Biquad::write((uint64_t)&v20, a2 + 20 * v6 + 60);
    unint64_t v7 = (v7 + 1);
    uint64_t v6 = v7;
  }
  while (*(void *)(a1 + 520) > v7);
  if (v7 <= 3) {
    goto LABEL_7;
  }
LABEL_10:
  float v11 = (DspLib *)DspLib::PowerGuard::TargetCalculator::status(a1 + 1408, (char *)a2);
  *(float *)(a2 + 48) = DspLib::amp2dBSafe(v11, *(float *)(a1 + 688), 0.000001);
  DspLib::copy((void *)(a1 + 320), 4, (void *)(a2 + 16));
  float v12 = (DspLib *)DspLib::copy((void *)(a1 + 1392), 4, (void *)(a2 + 156));
  *(float *)(a2 + 188) = DspLib::amp2dBSafe(v12, *(float *)(a1 + 1216), 0.000001);
  float v13 = *(float *)(a1 + 828);
  float v14 = 1.0;
  float v15 = 1.0;
  if (v13 > 0.0) {
    float v15 = *(float *)(a1 + 824) / v13;
  }
  if (*(float *)(a1 + 832) >= v15) {
    float v15 = *(float *)(a1 + 832);
  }
  *(float *)(a2 + 224) = *(float *)(a1 + 816) * v15;
  *(float *)(a2 + 228) = *(float *)(a1 + 816) * *(float *)(a1 + 832);
  *(_DWORD *)(a2 + 232) = *(_DWORD *)(a1 + 816);
  int v16 = *(_DWORD *)(a1 + 312);
  if (!*(unsigned char *)(a1 + 1808)) {
    float v14 = 0.0;
  }
  *(float *)(a2 + 236) = v14;
  *(_DWORD *)(a2 + 240) = v16;
  float result = *(float *)(a1 + 1812);
  *(float *)(a2 + 244) = result;
  return result;
}

void DspLib::PowerGuard::Algorithm::~Algorithm(DspLib::PowerGuard::Algorithm *this)
{
  DspLib::PowerGuard::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  uint64_t j;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v20;

  *(void *)this = &unk_1F14A65B8;
  uint64_t v2 = (void *)*((void *)this + 222);
  if (v2)
  {
    *((void *)this + 223) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 218);
  if (v3)
  {
    *((void *)this + 219) = v3;
    operator delete(v3);
  }
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    unint64_t v5 = *(void **)((char *)this + i + 1576);
    if (v5)
    {
      *(void *)((char *)this + i + 1584) = v5;
      operator delete(v5);
    }
  }
  for (uint64_t j = 0; j != -96; j -= 24)
  {
    unint64_t v7 = *(void **)((char *)this + j + 1480);
    if (v7)
    {
      *(void *)((char *)this + j + 1488) = v7;
      operator delete(v7);
    }
  }
  *((void *)this + 156) = &unk_1F14A8EC8;
  uint64_t v8 = (void *)*((void *)this + 170);
  if (v8)
  {
    *((void *)this + 171) = v8;
    operator delete(v8);
  }
  *((void *)this + 156) = &unk_1F14A6700;
  uint64_t v9 = (void *)*((void *)this + 163);
  if (v9)
  {
    *((void *)this + 164) = v9;
    operator delete(v9);
  }
  float v10 = (void *)*((void *)this + 160);
  if (v10)
  {
    *((void *)this + 161) = v10;
    operator delete(v10);
  }
  float32x4_t v20 = (void **)((char *)this + 1224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  float v11 = (void *)*((void *)this + 149);
  if (v11)
  {
    *((void *)this + 150) = v11;
    operator delete(v11);
  }
  float v12 = (void *)*((void *)this + 146);
  if (v12)
  {
    *((void *)this + 147) = v12;
    operator delete(v12);
  }
  *((void *)this + 127) = &unk_1F14A8EC8;
  float v13 = (void *)*((void *)this + 141);
  if (v13)
  {
    *((void *)this + 142) = v13;
    operator delete(v13);
  }
  *((void *)this + 127) = &unk_1F14A6700;
  float v14 = (void *)*((void *)this + 134);
  if (v14)
  {
    *((void *)this + 135) = v14;
    operator delete(v14);
  }
  float v15 = (void *)*((void *)this + 131);
  if (v15)
  {
    *((void *)this + 132) = v15;
    operator delete(v15);
  }
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer((DspLib::PowerGuard::Algorithm *)((char *)this + 720));
  float32x4_t v20 = (void **)((char *)this + 696);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
  int v16 = (void *)*((void *)this + 83);
  if (v16)
  {
    *((void *)this + 84) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 80);
  if (v17)
  {
    *((void *)this + 81) = v17;
    operator delete(v17);
  }
  DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer((DspLib::PowerGuard::Algorithm *)((char *)this + 336));
  *(void *)this = &unk_1F14A88D8;
  long long v18 = (void *)*((void *)this + 34);
  if (v18)
  {
    *((void *)this + 35) = v18;
    operator delete(v18);
  }
  float32x4_t v20 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v20);
  *(void *)this = &unk_1F14A87D8;
  int v19 = (void *)*((void *)this + 4);
  if (v19)
  {
    *((void *)this + 5) = v19;
    operator delete(v19);
  }
}

uint64_t DspLib::AlgorithmBase::isInitialized(DspLib::AlgorithmBase *this)
{
  return *((unsigned __int8 *)this + 8);
}

double DspLib::AlgorithmBase::sampleRate(DspLib::AlgorithmBase *this)
{
  return *((double *)this + 2);
}

uint64_t DspLib::AlgorithmBase::channelLayout(DspLib::AlgorithmBase *this)
{
  return *((unsigned int *)this + 45);
}

uint64_t DspLib::AlgorithmBase::numberOfChannels(DspLib::AlgorithmBase *this)
{
  return *((unsigned int *)this + 44);
}

double DspLib::PowerGuard::Algorithm::latencySamples(DspLib::PowerGuard::Algorithm *this, double a2)
{
  LODWORD(a2) = *((_DWORD *)this + 76);
  return (double)*(unint64_t *)&a2;
}

uint64_t DspLib::PowerGuard::Algorithm::tailTimeSamples(DspLib::PowerGuard::Algorithm *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t DspLib::AlgorithmBase::parametersAreValid(DspLib::AlgorithmBase *this)
{
  return 1;
}

uint64_t DspLib::AlgorithmBaseNewParameters::numParameters(DspLib::AlgorithmBaseNewParameters *this)
{
  uint64_t v1 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 240))(this);
  return DspLib::algorithmOffset(v1, *(_DWORD *)(v1 + 16) + 1);
}

float DspLib::AlgorithmBaseNewParameters::parameterBounds(DspLib::AlgorithmBaseNewParameters *this, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 240))(this);
  uint64_t v4 = DspLib::parameterAddress(v3, a2);
  return *(float *)(DspLib::SystemParametersDefinition::operator[](v3, v4, v5) + 16);
}

uint64_t DspLib::AlgorithmBase::parameters(DspLib::AlgorithmBase *this)
{
  return *((void *)this + 4);
}

uint64_t DspLib::AlgorithmBase::process(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *a2;
  long long v7 = *(_OWORD *)(a2 + 1);
  long long v4 = *(_OWORD *)a2;
  uint64_t v5 = a2[2];
  v3[0] = 0;
  unsigned char v3[24] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, long long *, unsigned char *))(*(void *)a1 + 144))(a1, &v6, &v4, v3);
}

uint64_t DspLib::AlgorithmBase::process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a4;
  uint64_t v10 = a2;
  v8[0] = &v10;
  v8[1] = 1;
  void v8[2] = a3;
  v7[0] = &v9;
  v7[1] = 1;
  _OWORD v7[2] = a5;
  v6[0] = 0;
  unsigned char v6[24] = 0;
  return (*(uint64_t (**)(uint64_t, void *, void *, unsigned char *))(*(void *)a1 + 144))(a1, v8, v7, v6);
}

uint64_t DspLib::AlgorithmBase::process(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 160))(a1, a2, a3, a2, a3);
}

uint64_t DspLib::PowerGuard::Algorithm::numStatus(DspLib::PowerGuard::Algorithm *this)
{
  return 62;
}

uint64_t DspLib::AlgorithmBase::meteringIsEnabled(DspLib::AlgorithmBase *this)
{
  return *((unsigned __int8 *)this + 24);
}

double DspLib::AlgorithmBase::percentCPU@<D0>(DspLib::AlgorithmBase *this@<X0>, uint64_t a2@<X8>)
{
  return DspLib::CPUMeasure::percentCPU((DspLib::AlgorithmBase *)((char *)this + 56), a2);
}

uint64_t DspLib::AlgorithmBase::maxNumFrames(DspLib::AlgorithmBase *this)
{
  return *((void *)this + 21);
}

uint64_t DspLib::AlgorithmBase::setMaxNumFrames(uint64_t this, uint64_t a2)
{
  *(void *)(this + 168) = a2;
  return this;
}

uint64_t DspLib::AlgorithmBaseNewParameters::systemDefinition(DspLib::AlgorithmBaseNewParameters *this)
{
  return (uint64_t)this + 216;
}

uint64_t DspLib::AlgorithmBaseNewParameters::numAlgorithms(DspLib::AlgorithmBaseNewParameters *this)
{
  return (*(_DWORD *)((*(uint64_t (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 240))(this)
                                  + 16)
                      + 1);
}

DspLib::PowerGuard::TargetCalculator *DspLib::PowerGuard::TargetCalculator::TargetCalculator(DspLib::PowerGuard::TargetCalculator *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 11);
  *((_DWORD *)this + 64) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v2)+ 12);
  uint64_t v3 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 12);
  *((_DWORD *)this + 65) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v3)+ 12);
  uint64_t v4 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 13);
  *((_DWORD *)this + 66) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v4)+ 12);
  uint64_t v5 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 14);
  *((_DWORD *)this + 67) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v5)+ 12);
  uint64_t v6 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 7);
  *((_DWORD *)this + 68) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v6)+ 12);
  uint64_t v7 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 8);
  *((_DWORD *)this + 69) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v7)+ 12);
  uint64_t v8 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 9);
  *((_DWORD *)this + 70) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v8)+ 12);
  uint64_t v9 = DspLib::parameterAddress((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, 10);
  *((_DWORD *)this + 71) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::PowerGuard::Parameters::kDefinition, v9)+ 12);
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 18) = _Q0;
  *((_OWORD *)this + 19) = _Q0;
  return this;
}

void sub_1BB29577C(_Unwind_Exception *a1)
{
  DspLib::PowerGuard::TargetCalculator::TargetCalculator(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t DspLib::AlgorithmParametersDefinition::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 8) <= a2
    || (uint64_t v3 = *(void *)(*(void *)v2 + 16 * a2 + 8), *(_DWORD *)(v3 + 8) <= HIDWORD(a2)))
  {
    abort();
  }
  return *(void *)v3 + 24 * HIDWORD(a2);
}

uint64_t DspLib::parameterAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = v2[1];
  if (!v3) {
LABEL_6:
  }
    abort();
  uint64_t v4 = 0;
  uint64_t v5 = *v2 + 8;
  while (1)
  {
    unsigned int v6 = *(_DWORD *)(*(void *)v5 + 8);
    BOOL v7 = a2 >= v6;
    uint64_t v8 = a2 - v6;
    if (!v7) {
      return v4 + (a2 << 32);
    }
    ++v4;
    v5 += 16;
    a2 = v8;
    if (v3 == v4) {
      goto LABEL_6;
    }
  }
}

{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 16) == -1) {
LABEL_7:
  }
    abort();
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a1 + 8) + 8 * (v4 - 1));
    if (!v4) {
      uint64_t v5 = (uint64_t *)a1;
    }
    unsigned int v6 = *v5;
    if (a2 < DspLib::groupOffset(*v5, *(_DWORD *)(*(void *)(*v5 + 8) + 8))) {
      break;
    }
    a2 = a2 - DspLib::groupOffset(v6, *(_DWORD *)(*(void *)(v6 + 8) + 8));
    if (++v4 >= (unint64_t)(*(_DWORD *)(a1 + 16) + 1)) {
      goto LABEL_7;
    }
  }
  LODWORD(v8) = v4;
  HIDWORD(v8) = DspLib::parameterAddress(v6, a2);
  return v8;
}

void DspLib::PowerGuard::WooferPowerAnalyzer::~WooferPowerAnalyzer(DspLib::PowerGuard::WooferPowerAnalyzer *this)
{
  *(void *)this = &unk_1F14A8E98;
  uint64_t v2 = (void *)*((void *)this + 33);
  if (v2)
  {
    *((void *)this + 34) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::PowerGuard::WooferPowerAnalyzer *)((char *)this + 176));
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  *(void *)this = &unk_1F14A6700;
  uint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

void std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    float result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      float result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t DspLib::algorithmOffset(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(v4) = 0;
  uint64_t v5 = a2;
  do
  {
    if ((*(_DWORD *)(a1 + 16) + 1) <= v3) {
      abort();
    }
    unsigned int v6 = (uint64_t *)(*(void *)(a1 + 8) + 8 * (v3 - 1));
    if (!v3) {
      unsigned int v6 = (uint64_t *)a1;
    }
    uint64_t v4 = DspLib::groupOffset(*v6, *(_DWORD *)(*(void *)(*v6 + 8) + 8)) + v4;
    ++v3;
  }
  while (v5 != v3);
  return v4;
}

uint64_t DspLib::groupOffset(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (*((_DWORD *)v2 + 2) < a2) {
    abort();
  }
  uint64_t result = 0;
  if (a2)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = a2;
    unsigned int v6 = (uint64_t *)(v4 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      uint64_t result = (result + *(_DWORD *)(v7 + 8));
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t DspLib::SystemParametersDefinition::operator[](uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 16) + 1 <= a2) {
    abort();
  }
  if (a2) {
    a1 = *(void *)(a1 + 8) + 8 * (a2 - 1);
  }
  uint64_t v3 = *(void *)a1;

  return DspLib::AlgorithmParametersDefinition::operator[](v3, __SPAIR64__(a3, HIDWORD(a2)));
}

void DspLib::PowerGuard::TargetCalculator::TargetCalculator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  do
  {
    uint64_t v7 = *(void **)(v5 - 24);
    v5 -= 24;
    unsigned int v6 = v7;
    if (v7)
    {
      *(void *)(a1 - 16) = v6;
      operator delete(v6);
    }
    a1 = v5;
  }
  while (v5 != a2);
  uint64_t v8 = a2;
  do
  {
    uint64_t v10 = *(void **)(v8 - 24);
    v8 -= 24;
    uint64_t v9 = v10;
    if (v10)
    {
      *(void *)(a2 - 16) = v9;
      operator delete(v9);
    }
    a2 = v8;
  }
  while (v8 != a3);
}

double DspLib::LoudspeakerManagerV1::Algorithm::Algorithm(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (long long *)&DspLib::LoudspeakerManagerV1::Parameters::kSystemDefinition);
  *(void *)uint64_t v1 = &unk_1F14A6728;
  *(void *)(v1 + 368) = 0;
  *(void *)(v1 + 376) = 0;
  *(void *)(v1 + 360) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 340) = 0u;
  *(_WORD *)(v1 + 384) = 257;
  *(unsigned char *)(v1 + 386) = 0;
  *(void *)(v1 + 388) = 0x3F8000003FC3D70ALL;
  *(void *)(v1 + 400) = 1;
  *(void *)(v1 + 484) = 0;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_OWORD *)(v1 + 465) = 0u;
  *(_OWORD *)(v1 + 556) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_OWORD *)(v1 + 544) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  return result;
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::initialize(DspLib::LoudspeakerManagerV1::Algorithm *this, uint64_t a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBaseNewParameters::initialize((uint64_t **)this, a2, a3);
  if (v4)
  {
    DspLib::LoudspeakerManagerV1::ModelManager::initialize((void **)this + 37);
    uint64_t v5 = DspLib::parameterAddress((uint64_t)&DspLib::LoudspeakerManagerV1::Parameters::kDefinition, 2);
    DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::LoudspeakerManagerV1::Parameters::kDefinition, v5);
    std::vector<DspLib::Biquad::Section>::vector(&__p, 2uLL);
    uint64_t v6 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    DspLib::LoudspeakerManagerV1::ModelManager::coldStartBiquad((uint64_t *)&__p, *(double *)(v6 + 456), 2.8);
    uint64_t v7 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    v10[0] = __p;
    v10[1] = 0xCCCCCCCCCCCCCCCDLL * ((v13 - (unsigned char *)__p) >> 2);
    int v11 = 1052171118;
    float v8 = DspLib::PowerGuard::Algorithm::setAdmittanceModel(v7, (uint64_t)v10);
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::LoudspeakerManagerV1::Algorithm *, char *, void, float))(*(void *)this + 264))(this, (char *)this + 264, 0, v8);
    (*(void (**)(DspLib::LoudspeakerManagerV1::Algorithm *))(*(void *)this + 136))(this);
    if (__p)
    {
      float v13 = __p;
      operator delete(__p);
    }
  }
  return v4;
}

void sub_1BB296074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::uninitialize(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 30);
  uint64_t v3 = (uint64_t *)*((void *)this + 31);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t result = DspLib::LoudspeakerManagerV1::ModelManager::uninitialize((uint64_t)this + 296);
  *((unsigned char *)this + 8) = 0;
  return result;
}

void DspLib::LoudspeakerManagerV1::Algorithm::setParameters(DspLib::LoudspeakerManagerV1::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  *((unsigned char *)this + 386) |= DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u) >= 0.5;
  *((float *)this + 97) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2u);
  *((unsigned char *)this + 384) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) < 0.5;
  uint64_t v4 = (uint64_t *)(*(uint64_t (**)(DspLib::LoudspeakerManagerV1::Algorithm *, uint64_t))(*(void *)this + 256))(this, 2);
  float v5 = DspLib::AlgorithmParametersInstance::operator[](v4, 3);
  float v6 = DspLib::AlgorithmParametersInstance::operator[](v4, 0x100000003);
  uint64_t v7 = (DspLib::AlgorithmParametersInstance *)(*(uint64_t (**)(DspLib::LoudspeakerManagerV1::Algorithm *, uint64_t))(*(void *)this + 256))(this, 1);
  unint64_t v8 = (*(uint64_t (**)(DspLib::LoudspeakerManagerV1::Algorithm *))(*(void *)this + 216))(this);
  double v9 = *((double *)this + 2);
  uint64_t v10 = (const float *)(DspLib::AlgorithmParametersInstance::group(v7, 0) + 12);

  DspLib::LoudspeakerManagerV1::PowerMeter::setParameters((DspLib::LoudspeakerManagerV1::Algorithm *)((char *)this + 400), v5, v6, v8, v9, v10, 4uLL);
}

int32x2_t DspLib::LoudspeakerManagerV1::Algorithm::setCalibrationData(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)a2;
  *(_DWORD *)(a1 + 568) = a2[2];
  *(void *)(a1 + 560) = v4;
  uint64_t v5 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
  DspLib::PowerGuard::Algorithm::setSpVACalibration(v5, a2);
  uint64_t v6 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 2);
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setSpVACalibration(v6 + 320, (uint64_t)a2);

  return DspLib::LoudspeakerManagerV1::PowerMeter::setSpVACalibration(a1 + 400, (uint64_t)a2);
}

void DspLib::LoudspeakerManagerV1::Algorithm::reset(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 30);
  uint64_t v3 = (uint64_t *)*((void *)this + 31);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  }
  *((unsigned char *)this + 386) = 1;
  DspLib::LoudspeakerManagerV1::ModelManager::pageInRootsPath((DspLib::LoudspeakerManagerV1::Algorithm *)((char *)this + 296));

  DspLib::LoudspeakerManagerV1::PowerMeter::reset((DspLib::CircularDelay **)this + 50);
}

void DspLib::LoudspeakerManagerV1::Algorithm::processBlock(DspLib::AlgorithmBaseNewParameters *this, long long *a2, long long *a3, uint64_t a4)
{
  if (*((unsigned char *)this + 24))
  {
    if (!*(unsigned char *)(a4 + 24)
      || (DspLib::LoudspeakerManagerV1::PowerMeter::process((uint64_t)this + 400, **(void **)a4, *(void *)(a4 + 16), *(void *)(*(void *)a4 + 8)), *((unsigned char *)this + 24)))
    {
      DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 56));
    }
  }
  unint64_t v8 = *((void *)a2 + 2);
  double v9 = (DspLib::LoudspeakerSystemIDV1::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  DspLib::LoudspeakerSystemIDV1::Algorithm::singleResonatorPlusLR2Inductance(v9, (uint64_t)v26);
  uint64_t v10 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  char v11 = *(unsigned char *)(v10 + 9458);
  *(unsigned char *)(v10 + 9458) = 0;
  uint64_t v12 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  DspLib::LoudspeakerManagerV1::ModelManager::getAdmittanceModel((DspLib::AlgorithmBaseNewParameters *)((char *)this + 296), v26, v11, (uint64_t)&v27, *(double *)(v12 + 456));
  uint64_t v13 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  long long v24 = v27;
  uint64_t v25 = v28;
  DspLib::PowerGuard::Algorithm::setAdmittanceModel(v13, (uint64_t)&v24);
  uint64_t v14 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  long long v22 = *a2;
  uint64_t v23 = *((void *)a2 + 2);
  long long v20 = *a3;
  uint64_t v21 = *((void *)a3 + 2);
  v19[0] = 0;
  unsigned char v19[24] = 0;
  (*(void (**)(uint64_t, long long *, long long *, unsigned char *))(*(void *)v14 + 144))(v14, &v22, &v20, v19);
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v18, *(float *const **)a3, *((void *)a3 + 2), *((_DWORD *)a3 + 2));
  if (*(unsigned char *)(a4 + 24))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)v17, *(float *const **)a4, *(void *)(a4 + 16), *(_DWORD *)(a4 + 8));
    float v15 = (DspLib::LoudspeakerSystemIDV1::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
    DspLib::LoudspeakerSystemIDV1::Algorithm::processDirect(v15, (DspLibBuffer *)v18, (DspLibBuffer *)v18, (DspLibBuffer *)v17);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v17);
  }
  else
  {
    int v16 = (DspLib::LoudspeakerSystemIDV1::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
    DspLib::LoudspeakerSystemIDV1::Algorithm::processDirect(v16, (DspLibBuffer *)v18, (DspLibBuffer *)v18, 0);
  }
  if (*((unsigned char *)this + 24)) {
    DspLib::CPUMeasure::stop((DspLib::AlgorithmBaseNewParameters *)((char *)this + 56), v8, *((double *)this + 2));
  }
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v18);
}

void sub_1BB29658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)va);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  DspLib::clear(a2, __N);
  DspLib::LoudspeakerManagerV1::PowerMeter::getPeakPowers(a1 + 400, a2);
  DspLib::LoudspeakerManagerV1::PowerMeter::status(a1 + 400, (uint64_t)a2);
  uint64_t v5 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1);
  (*(void (**)(uint64_t, float *, uint64_t))(*(void *)v5 + 184))(v5, a2 + 8, 62);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 2) + 184);

  return v6();
}

void DspLib::LoudspeakerManagerV1::Algorithm::~Algorithm(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  DspLib::LoudspeakerManagerV1::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(void *)this = &unk_1F14A6728;
  uint64_t v2 = (void *)*((void *)this + 67);
  if (v2)
  {
    *((void *)this + 68) = v2;
    operator delete(v2);
  }
  uint64_t v7 = (void **)((char *)this + 496);
  std::vector<DspLib::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 448);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v3 = (void *)*((void *)this + 51);
  if (v3)
  {
    *((void *)this + 52) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    *((void *)this + 46) = v4;
    operator delete(v4);
  }
  *(void *)this = &unk_1F14A88D8;
  uint64_t v5 = (void *)*((void *)this + 34);
  if (v5)
  {
    *((void *)this + 35) = v5;
    operator delete(v5);
  }
  uint64_t v7 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v7);
  *(void *)this = &unk_1F14A87D8;
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

double DspLib::LoudspeakerManagerV1::Algorithm::latencySamples(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  double v3 = (*(double (**)(uint64_t))(*(void *)v2 + 64))(v2);
  uint64_t v4 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  return v3 + (*(double (**)(uint64_t))(*(void *)v4 + 64))(v4);
}

double DspLib::LoudspeakerManagerV1::Algorithm::tailTimeSamples(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  double v3 = (*(double (**)(uint64_t))(*(void *)v2 + 72))(v2);
  uint64_t v4 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2);
  return v3 + (*(double (**)(uint64_t))(*(void *)v4 + 72))(v4);
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::numStatus(DspLib::LoudspeakerManagerV1::Algorithm *this)
{
  return 2735;
}

uint64_t DspLib::LoudspeakerManagerV1::Algorithm::setMeteringIsEnabled(DspLib::LoudspeakerManagerV1::Algorithm *this, char a2)
{
  *((unsigned char *)this + 24) = a2;
  uint64_t v3 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 200))(v3, *((unsigned __int8 *)this + 24));
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 2) + 200);

  return v4();
}

void *std::vector<DspLib::Biquad::Section>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 20 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 1065353216;
      *(void *)(v4 + 12) = 0;
      *(void *)(v4 + 4) = 0;
      v4 += 20;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1BB2968E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

void std::vector<DspLib::MovingAverage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::MovingAverage>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<DspLib::MovingAverage>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 40);
      v4 -= 40;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 32) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

DspLib::AmbienceLeveler::Algorithm *DspLib::AmbienceLeveler::Algorithm::Algorithm(DspLib::AmbienceLeveler::Algorithm *this)
{
  uint64_t v2 = (char *)this + 58648;
  uint64_t v3 = (_DWORD *)((char *)this + 42252);
  uint64_t v4 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition);
  uint64_t v5 = 0;
  *(void *)uint64_t v4 = &unk_1F14A6870;
  *(unsigned char *)(v4 + 296) = 0;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  int32x2_t v6 = vdup_n_s32(0xC3100000);
  do
  {
    *(_DWORD *)((char *)this + v5 + 368) = 0;
    *(int32x2_t *)((char *)this + v5 + 372) = v6;
    v5 += 12;
  }
  while (v5 != 360);
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_DWORD *)this + 186) = 1065353216;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((void *)this + 108) = 0;
  *((void *)this + 109) = 0x3ECBD4B4C1000000;
  uint64_t v7 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 1);
  *((_DWORD *)this + 220) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v7)+ 12);
  uint64_t v8 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 2);
  *((_DWORD *)this + 221) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v8)+ 12);
  uint64_t v9 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 3);
  *((_DWORD *)this + 222) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v9)+ 12);
  uint64_t v10 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 0);
  *((_DWORD *)this + 223) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v10)+ 12);
  uint64_t v11 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 4);
  *((_DWORD *)this + 224) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v11)+ 12);
  uint64_t v12 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 5);
  *((_DWORD *)this + 225) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v12)+ 12);
  uint64_t v13 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 6);
  *((_DWORD *)this + 226) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v13)+ 12);
  uint64_t v14 = DspLib::parameterAddress((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, 7);
  *((_DWORD *)this + 227) = *(_DWORD *)(DspLib::AlgorithmParametersDefinition::operator[]((uint64_t)&DspLib::AmbienceLeveler::Parameters::kDefinition, v14)+ 12);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 17296, (char *)this + 912, 4096, 4096, 0);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 17400, (char *)this + 912, 4096, 4096, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17504), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17584), 0, 0);
  *uint64_t v3 = 0;
  *(void *)uint64_t v2 = 0;
  *((_DWORD *)v2 + 2) = 0;
  v2[16] = 0;
  *((void *)this + 7346) = 0;
  *((_OWORD *)this + 3667) = 0u;
  *((_OWORD *)this + 3668) = 0u;
  *((_OWORD *)this + 3669) = 0u;
  *((_OWORD *)this + 3670) = 0u;
  *((_OWORD *)this + 3671) = 0u;
  *((_OWORD *)this + 3672) = 0u;
  *((_DWORD *)v2 + 32) = 1000000;
  *((void *)this + 7349) = 0;
  *((void *)this + 7350) = 0;
  *((void *)this + 7348) = 0;
  *((_DWORD *)v2 + 40) = -1024458752;
  *((_WORD *)v2 + 82) = 257;
  *((void *)v2 + 21) = 0;
  return this;
}

void sub_1BB296E40(_Unwind_Exception *a1)
{
  int32x2_t v6 = v5;
  DspLib::ComplexVector::~ComplexVector(v6);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v4);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v3);
  DspLib::Biquad::Filter::~Filter(v2);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(v1);
  _Unwind_Resume(a1);
}

void DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(DspLib::FFT::BufferedForwardSTFT *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this);
}

void DspLib::Biquad::Filter::~Filter(DspLib::Biquad::Filter *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::Filter *)((char *)this + 48));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t DspLib::AmbienceLeveler::Algorithm::initialize(DspLib::AmbienceLeveler::Algorithm *this, uint64_t a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBaseNewParameters::initialize((uint64_t **)this, a2, a3);
  if (v4)
  {
    uint64_t v5 = (_DWORD *)((char *)this + 58648);
    *((unsigned char *)this + 8) = 1;
    *((_DWORD *)this + 182) = ((*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 40))(this)
                                           * 3.0);
    *((_DWORD *)this + 183) = ((*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 40))(this)
                                           * 0.100000001);
    double v6 = (*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 40))(this);
    DspLib::Biquad::Design::kWeighting(v6, (uint64_t)v14);
    unsigned int v7 = (*(uint64_t (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 56))(this);
    DspLib::Biquad::Filter::initialize((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 296), v7, 2uLL);
    DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 296, (uint64_t)v14, 2, 0, 0x41uLL);
    double v8 = (*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 40))(this);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 58664), 1uLL, v8, 1uLL);
    DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17504), 0x801uLL);
    DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17584), 0x801uLL);
    float v9 = (*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 40))(this) * 0.5;
    if (v9 <= 7000.0) {
      float v10 = v9;
    }
    else {
      float v10 = 7000.0;
    }
    *uint64_t v5 = (100.0
                       / ((*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 40))(this)
                        * 0.000244140625));
    unsigned int v11 = (v10
                       / ((*(double (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 40))(this)
                        * 0.000244140625));
    unsigned int v12 = v11 - *v5;
    *((_DWORD *)this + 14663) = v11;
    *((_DWORD *)this + 14664) = v12;
    DspLib::makeSymmetricHannWindow((uint64_t)this + 912, 0x1000uLL);
    DspLib::multiply((float *)this + 228, 0x1000uLL, 0.00048828);
    (*(void (**)(DspLib::AmbienceLeveler::Algorithm *, char *, void))(*(void *)this + 264))(this, (char *)this + 264, 0);
    (*(void (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 136))(this);
  }
  return v4;
}

void DspLib::AmbienceLeveler::Algorithm::uninitialize(DspLib::AmbienceLeveler::Algorithm *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 30);
  uint64_t v3 = (uint64_t *)*((void *)this + 31);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  DspLib::Biquad::Filter::uninitialize((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 296));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 58664));
  DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17504), 0);
  DspLib::ComplexVector::setLength((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17584), 0);
  *((unsigned char *)this + 8) = 0;
}

void DspLib::AmbienceLeveler::Algorithm::reset(DspLib::AmbienceLeveler::Algorithm *this)
{
  uint64_t v2 = (char *)this + 58784;
  uint64_t v3 = (_DWORD *)((char *)this + 42252);
  DspLib::Biquad::SetupWrapper::reset((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 344));
  uint64_t v4 = 0;
  *((_DWORD *)this + 186) = 1065353216;
  *((void *)this + 92) = 0;
  *((void *)this + 109) = 0x3ECBD4B4C1000000;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((void *)this + 108) = 0;
  int v5 = *((_DWORD *)this + 182);
  int32x2_t v6 = vdup_n_s32(0xC3100000);
  int v7 = *((_DWORD *)this + 183);
  do
  {
    *(int32x2_t *)((char *)this + v4 + 372) = v6;
    *(_DWORD *)((char *)this + v4 + 368) = v5;
    v5 += v7;
    v4 += 12;
  }
  while (v4 != 360);
  DspLib::FFT::BufferedForwardSTFT::reset((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17400));
  DspLib::FFT::BufferedForwardSTFT::reset((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17296));
  DspLib::clear((float *)this + 10564, 0x801uLL);
  DspLib::clear((float *)this + 12613, 0x801uLL);
  DspLib::clear((float *)this + 8514, 0x801uLL);
  *uint64_t v3 = 0;
  *((void *)v2 + 4) = 0;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 2) = 0;
  *((_DWORD *)v2 + 6) = -1024458752;
  *((_WORD *)v2 + 14) = 256;
}

double DspLib::AmbienceLeveler::Algorithm::setParameters(DspLib::AmbienceLeveler::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if ((*(unsigned int (**)(DspLib::AmbienceLeveler::Algorithm *))(*(void *)this + 32))(this))
  {
    *((float *)this + 220) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 1u);
    float v5 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2u);
    if (*((float *)this + 220) >= v5) {
      float v5 = *((float *)this + 220);
    }
    *((float *)this + 221) = v5;
    *((float *)this + 222) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 3u);
    *((float *)this + 224) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 4u);
    *((float *)this + 225) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 5u);
    *((float *)this + 226) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 6u);
    *((float *)this + 227) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 7u);
    *(float *)&double result = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0);
    if (*(float *)&result != *((float *)this + 223))
    {
      *((_DWORD *)this + 223) = LODWORD(result);
      *((_DWORD *)this + 218) = 0;
      *((_DWORD *)this + 186) = 1065353216;
      double result = 0.0;
      *((void *)this + 92) = 0;
    }
  }
  return result;
}

void DspLib::AmbienceLeveler::Algorithm::processBlock(uint64_t a1, void ***a2, void ***a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  vDSP_Length v3 = (vDSP_Length)a2[2];
  if (a3[1] == (void **)2 && v3 != 0)
  {
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
    }
    MEMORY[0x1F4188790](a1);
    long long v24 = (const float *)(&v19 - v8);
    uint64_t v25 = &v24[v8];
    long long v22 = *(_OWORD *)a2;
    uint64_t v23 = a2[2];
    *(void *)&long long v20 = &v24;
    *((void *)&v20 + 1) = 2;
    vDSP_Length v21 = v3;
    DspLib::Biquad::Filter::process((void *)(a1 + 296), &v22, &v20);
    float v9 = DspLib::rms(v24, v3);
    float v11 = DspLib::amp2dBSafe(v10, v9, 1.0e-20);
    float v12 = DspLib::rms(v25, v3);
    float v14 = DspLib::amp2dBSafe(v13, v12, 1.0e-20);
    DspLib::AmbienceLeveler::RunningStats::process((DspLib::AmbienceLeveler::RunningStats *)(a1 + 832), v14);
    DspLib::AmbienceLeveler::Algorithm::computeAmbienceGain((DspLib::AmbienceLeveler::Algorithm *)a1, v11, v14, v3);
    DspLib::AmbienceLeveler::Algorithm::updateSpectra(a1, (uint64_t)**a2, (unint64_t)a2[2], (uint64_t)(*a2)[1], (uint64_t)a2[2]);
    float v15 = (uint64_t *)*a2;
    int v16 = **a2;
    uint64_t v17 = *a3;
    long long v18 = **a3;
    if (v16 != v18)
    {
      DspLib::copy(v16, (uint64_t)a2[2], v18);
      float v15 = (uint64_t *)*a2;
      uint64_t v17 = *a3;
    }
    DspLib::multiply((const float *)v15[1], (vDSP_Length)a2[2], (float *)v17[1], *(float *)(a1 + 876));
    if (*(unsigned char *)(a1 + 24)) {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), v3, *(double *)(a1 + 16));
    }
  }
}

double DspLib::AmbienceLeveler::RunningStats::process(DspLib::AmbienceLeveler::RunningStats *this, float a2)
{
  uint64_t v2 = *(void *)this + 1;
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  double v5 = a2 - v3;
  double v6 = v5 / (double)(unint64_t)v2;
  double v7 = v5 * v6 * (double)*(unint64_t *)this;
  double v8 = *((double *)this + 3);
  double v9 = *((double *)this + 4)
     + v4 * (v6 * v6 * 6.0)
     + v6
     * v6
     * v7
     * ((double)(unint64_t)v2 * -3.0 + (double)(unint64_t)v2 * (double)(unint64_t)v2 + 3.0)
     + v6 * -4.0 * v8;
  *(void *)this = v2;
  *((double *)this + 3) = v8 + v4 * (v6 * -3.0) + v6 * v7 * ((double)(unint64_t)v2 + -2.0);
  *((double *)this + 4) = v9;
  double result = v4 + v7;
  *((double *)this + 1) = v3 + v6;
  *((double *)this + 2) = result;
  return result;
}

double DspLib::AmbienceLeveler::Algorithm::computeAmbienceGain(DspLib::AmbienceLeveler::Algorithm *this, float a2, float a3, unint64_t a4)
{
  uint64_t v8 = 0;
  float v9 = *((float *)this + 222);
  int32x2_t v10 = vdup_n_s32(0xC3100000);
  do
  {
    float v11 = (char *)this + v8;
    float v12 = *(float *)((char *)this + v8 + 372);
    if (v12 < a2) {
      float v12 = a2;
    }
    *((float *)v11 + 93) = v12;
    float v13 = *((float *)v11 + 94);
    if (v13 < a3) {
      float v13 = a3;
    }
    *((float *)v11 + 94) = v13;
    if (v9 < v12) {
      float v9 = v12;
    }
    unint64_t v14 = *((unsigned int *)v11 + 92);
    if (v14 <= a4)
    {
      DspLib::AmbienceLeveler::Algorithm::updateMeanStats(this, v12, v13);
      int v15 = *((_DWORD *)this + 182);
      *(int32x2_t *)(v11 + 372) = v10;
    }
    else
    {
      int v15 = v14 - a4;
    }
    *((_DWORD *)v11 + 92) = v15;
    v8 += 12;
  }
  while (v8 != 360);
  *(float *)&double result = v9 + -30.0;
  if ((float)(v9 + -30.0) < a2 && *(float *)&result > *((float *)this + 222))
  {
    return DspLib::AmbienceLeveler::RunningStats::process((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 792), a2 - a3);
  }
  return result;
}

void DspLib::AmbienceLeveler::Algorithm::updateSpectra(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    unint64_t v6 = 0;
    int v16 = (unsigned int *)(a1 + 42252);
    double v7 = (DSPSplitComplex *)(a1 + 17504);
    uint64_t v8 = (DSPSplitComplex *)(a1 + 17584);
    float v9 = (float *)(a1 + 17664);
    __C = (float *)(a1 + 25860);
    uint64_t v18 = a4 + 4 * a5;
    uint64_t v19 = a2 + 4 * a3;
    do
    {
      DspLib::FFT::BufferedForwardSTFT::addInput(a1 + 17296, (void *)(v19 - 4 * (a3 - v6)), a3 - v6, v7);
      unint64_t v10 = DspLib::FFT::BufferedForwardSTFT::addInput(a1 + 17400, (void *)(v18 - 4 * (a5 - v6)), a5 - v6, v8);
      if (*(void *)(a1 + 17384))
      {
        DspLib::FFT::amplitude((uint64_t)v7, v9, 0x801uLL);
        DspLib::FFT::amplitude((uint64_t)v8, __C, 0x801uLL);
        uint64_t v11 = *(unsigned int *)(a1 + 58648);
        float v12 = &v9[v11];
        double v13 = DspLib::meanSquare(v12, *(unsigned int *)(a1 + 58656));
        if (*(float *)&v13 > 0.0000001)
        {
          unint64_t v14 = &__C[v11];
          DspLib::vmax((float *)(a1 + 42256 + 4 * *(unsigned int *)(a1 + 58648)), *(unsigned int *)(a1 + 58656), v12);
          DspLib::vmax((float *)(a1 + 50452 + 4 * *(unsigned int *)(a1 + 58648)), *(unsigned int *)(a1 + 58656), v14);
          unsigned int v15 = *v16 + 1;
          unsigned int *v16 = v15;
          DspLib::convexCombination((float *)(a1 + 34056 + 4 * *(unsigned int *)(a1 + 58648)), *(unsigned int *)(a1 + 58656), v14, 1.0 / (float)v15);
        }
      }
      v6 += v10;
    }
    while (v6 < a3);
  }
}

void DspLib::AmbienceLeveler::Algorithm::updateMeanStats(DspLib::AmbienceLeveler::Algorithm *this, float a2, float a3)
{
  if (*((float *)this + 222) < a2)
  {
    DspLib::AmbienceLeveler::RunningStats::process((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 752), (float)(a2 - a3) - *((float *)this + 223));
    float v7 = *((float *)this + 186);
    float v8 = 1.0 / v7;
    *((float *)this + 186) = v7 + 1.0;
    float v9 = *((float *)this + 184) + (float)((float)(1.0 / v7) * (float)(a2 - *((float *)this + 184)));
    *((float *)this + 184) = v9;
    float v10 = *((float *)this + 185) + (float)(v8 * (float)(a3 - *((float *)this + 185)));
    *((float *)this + 185) = v10;
    float v11 = (float)(v9 - v10) - *((float *)this + 223);
    *((float *)this + 218) = v11;
    uint64_t v12 = 872;
    if (*((float *)this + 221) < v11) {
      uint64_t v12 = 884;
    }
    if (v11 < *((float *)this + 220)) {
      uint64_t v12 = 880;
    }
    float v13 = *(float *)((char *)this + v12);
    *((float *)this + 218) = v13;
    *((float *)this + 219) = DspLib::dB2Amp(v6, v13);
  }
}

unint64_t DspLib::AmbienceLeveler::Algorithm::computeEQFilters(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const float *a9, vDSP_Length a10, const float *a11, vDSP_Length a12, uint64_t a13)
{
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (result)
  {
    uint64_t v19 = (unsigned int *)(a1 + 58648);
    long long v20 = *(void **)(a13 + 8);
    void *v20 = 1101004800;
    v20[1] = 1065353216;
    vDSP_Length v21 = *(void **)(a13 + 24);
    void *v21 = 1101004800;
    v21[1] = 1065353216;
    long long v22 = *(void **)(a13 + 40);
    *long long v22 = 1101004800;
    v22[1] = 1065353216;
    float v24 = DspLib::maxv((const float *)(a4 + 4 * *(unsigned int *)(a1 + 58648)), *(unsigned int *)(a1 + 58656));
    float v25 = v24 + -30.0;
    BOOL v26 = v24 <= -100.0;
    float v27 = -130.0;
    if (!v26) {
      float v27 = v25;
    }
    uint64_t v29 = *v19;
    unsigned int v28 = *(_DWORD *)(a1 + 58652);
    unint64_t v54 = a3;
    if (v29 >= v28)
    {
      unsigned int v31 = *v19;
    }
    else
    {
      long long v30 = (float *)(a4 + 4 * v29);
      unsigned int v31 = *v19;
      while (*v30 < v27)
      {
        ++v31;
        ++v30;
        if (v28 == v31)
        {
          unsigned int v31 = *(_DWORD *)(a1 + 58652);
          break;
        }
      }
    }
    while (v28 >= v29 && *(float *)(a4 + 4 * v28) < v27)
      --v28;
    unsigned int v32 = v28 - v31;
    if (v28 > v31)
    {
      long long v33 = (float *)(a6 + 4 * v31);
      long long v34 = (float *)(a4 + 4 * v31);
      long long v35 = (float *)(a1 + 4 * v31 + 17664);
      do
      {
        float v36 = *v33++;
        float v37 = DspLib::amp2dBSafe(v23, v36, 1.0e-20);
        float v38 = *v34++;
        float v40 = (float)(DspLib::amp2dBSafe(v39, v38, 1.0e-20) - v37) + *(float *)(a1 + 896);
        if (v40 <= 0.0) {
          float v41 = v40;
        }
        else {
          float v41 = 0.0;
        }
        if (v40 >= *(float *)(a1 + 900)) {
          float v42 = v41;
        }
        else {
          float v42 = *(float *)(a1 + 900);
        }
        *v35++ = v42;
        --v32;
      }
      while (v32);
    }
    DspLib::clear((float *)(a1 + 25860), 0x801uLL);
    DspLib::AmbienceLeveler::nthOctaveSmoothing(a1 + 17664, 2049, (uint64_t)a11, a12, *(_DWORD *)(a1 + 58652));
    if ((unint64_t)(*(void *)(a13 + 16) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unsigned int v43 = 2;
      uint64_t v44 = 1;
      do
      {
        uint64_t matched = DspLib::AmbienceLeveler::Algorithm::matchBellFilterToTargetResponse(a1, a2, v54, a11, a12, (float *)(a1 + 25860), 0x801uLL, *v19, *(_DWORD *)(a1 + 58652));
        uint64_t v46 = (uint64_t *)(*(void *)(a13 + 8) + 16 * v44);
        *uint64_t v46 = matched;
        v46[1] = v47;
        uint64_t v44 = v43;
        BOOL v26 = *(void *)(a13 + 16) - 1 > (unint64_t)v43++;
      }
      while (v26);
    }
    unsigned int v48 = *(_DWORD *)(a1 + 58656);
    float v49 = 0.0;
    if (v48 >= 2)
    {
      unsigned int v50 = 0;
      int v51 = 1;
      do
      {
        float v49 = v49 + *(float *)(a1 + 25860 + 4 * (*v19 + v51));
        int v51 = 1 << ++v50;
      }
      while (1 << v50 < v48);
      if (v50) {
        float v49 = v49 / (float)v50;
      }
    }
    *(float *)a13 = v49;
    unint64_t result = DspLib::AmbienceLeveler::Algorithm::steadyStateNotch(a1, a2, v54, a9, a10);
    uint64_t v52 = *(void *)(a13 + 8) + 16 * *(void *)(a13 + 16);
    *(void *)(v52 - 16) = result;
    *(void *)(v52 - 8) = v53;
  }
  return result;
}

uint64_t DspLib::AmbienceLeveler::nthOctaveSmoothing(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5)
  {
    for (uint64_t i = 0; i != a5; *(float *)(a3 + 4 * i++) = v9 / (float)v10)
    {
      unsigned int v6 = vcvtas_u32_f32((float)i * 0.8909);
      unsigned int v7 = vcvtas_u32_f32((float)i * 1.1225);
      if (v6 + 1 > v7) {
        unsigned int v8 = v6 + 1;
      }
      else {
        unsigned int v8 = v7;
      }
      float v9 = 0.0;
      uint64_t v10 = v8 - v6;
      if (v10)
      {
        uint64_t v11 = 4 * v10;
        uint64_t v12 = (float *)(result + 4 * v6);
        do
        {
          float v13 = *v12++;
          float v9 = v9 + v13;
          v11 -= 4;
        }
        while (v11);
      }
    }
  }
  return result;
}

uint64_t DspLib::AmbienceLeveler::Algorithm::matchBellFilterToTargetResponse(uint64_t a1, uint64_t a2, unint64_t a3, const float *__A, vDSP_Length __N, float *__B, vDSP_Length a7, unsigned int a8, int a9)
{
  unsigned int v15 = (float *)(a1 + 17664);
  DspLib::subtract(__A, __N, __B, a7, (float *)(a1 + 17664));
  DspLib::clip(v15, 0x801uLL, -70.0, 0.0);
  DspLib::minIndex(&v15[a8], a9 - a8);
  uint64_t v17 = v16 + a8;
  float v18 = __A[v17] - __B[v17];
  if (v18 <= 0.0) {
    float v19 = __A[v17] - __B[v17];
  }
  else {
    float v19 = 0.0;
  }
  if (v18 >= *(float *)(a1 + 900)) {
    float v20 = v19;
  }
  else {
    float v20 = *(float *)(a1 + 900);
  }
  if (fabsf(v20) < 0.1) {
    return 1120403456;
  }
  uint64_t v22 = LODWORD(v20);
  uint64_t v23 = (void *)(a1 + 58664);
  uint64_t v37 = *(unsigned int *)(a2 + 4 * v17);
  unint64_t v24 = (v37 << 32) | 3;
  float v25 = (double *)(a1 + 58736);
  BOOL v26 = (char *)&DspLib::AmbienceLeveler::Algorithm::matchBellFilterToTargetResponse(std::span<float const,18446744073709551615ul>,std::span<float const,18446744073709551615ul>,std::span<float,18446744073709551615ul>,unsigned int,unsigned int)const::kBellFilterQValuesToTest;
  float v27 = 2.0;
  float v28 = 10000000.0;
  do
  {
    float v29 = *(float *)v26;
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v23, v24, (double *)(v22 | ((unint64_t)*(unsigned int *)v26 << 32)), 0, 0);
    DspLib::clear(v15, 0x801uLL);
    DspLib::Biquad::amplitudeResponse(v23, a2, a3, (uint64_t)v15, 2049, 0, *v25, v30, v31);
    DspLib::amp2dBSafe(v15, 0x801uLL, 1.0e-20);
    DspLib::add(v15, 0x801uLL, __B);
    if (__N)
    {
      uint64_t v32 = 0;
      float v33 = 0.0;
      do
      {
        float v34 = __A[v32] - v15[v32];
        float v33 = v33 + (float)(v34 * v34);
        ++v32;
      }
      while (__N > v32);
    }
    else
    {
      float v33 = 0.0;
    }
    if (v33 < v28)
    {
      float v28 = v33;
      float v27 = v29;
    }
    v26 += 4;
  }
  while (v26 != "N6DspLib15AmbienceLeveler9AlgorithmE");
  DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v23, v24, (double *)(v22 | ((unint64_t)LODWORD(v27) << 32)), 0, 0);
  DspLib::clear(v15, 0x801uLL);
  DspLib::Biquad::amplitudeResponse(v23, a2, a3, (uint64_t)v15, 2049, 0, *v25, v35, v36);
  DspLib::amp2dBSafe(v15, 0x801uLL, 1.0e-20);
  DspLib::add(__B, a7, v15);
  return v37 | (v22 << 32);
}

unint64_t DspLib::AmbienceLeveler::Algorithm::steadyStateNotch(uint64_t a1, uint64_t a2, int a3, const float *a4, vDSP_Length __N)
{
  unsigned int v7 = (const float *)(a1 + 17664);
  DspLib::amp2dBSafe(a4, __N, (float *)(a1 + 17664), 0x801uLL, 1.0e-20);
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
  DspLib::AmbienceLeveler::nthOctaveSmoothing((uint64_t)v7, 2049, a1 + 25860, 2049, (3000.0 / (v8 * 0.000244140625)));
  DspLib::subtract(v7, 0x801uLL, (const float *)(a1 + 25860), 2049, (float *)(a1 + 25860));
  uint64_t v9 = (150.0 / ((*(double (**)(uint64_t))(*(void *)a1 + 40))(a1) * 0.000244140625));
  double v10 = (*(double (**)(uint64_t))(*(void *)a1 + 40))(a1);
  float v12 = COERCE_FLOAT(DspLib::maxIndex((const float *)(a1 + 25860 + 4 * v9), (1000.0 / (v10 * 0.000244140625)) - v9));
  *(float *)&uint64_t v14 = -v12;
  if (v12 < 0.0) {
    LODWORD(v14) = 0;
  }
  float v13 = *(float *)(a1 + 904);
  if (v13 <= (float)-v12) {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v14 = LODWORD(v13);
  }
  return *(unsigned int *)(a2 + 4 * (v11 + v9)) | (unint64_t)(v14 << 32);
}

void *DspLib::AmbienceLeveler::Algorithm::status(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 872);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 736);
  float v4 = *(double *)(a1 + 760);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 740);
  *(float *)(a2 + 12) = v4;
  unint64_t v5 = *(void *)(a1 + 752);
  float v6 = 0.0;
  float v7 = 0.0;
  if (v5 >= 2) {
    float v7 = *(double *)(a1 + 768) / (double)(v5 - 1);
  }
  float v8 = *(double *)(a1 + 800);
  *(float *)(a2 + 16) = v7;
  *(float *)(a2 + 20) = v8;
  unint64_t v9 = *(void *)(a1 + 792);
  if (v9 >= 2) {
    float v6 = *(double *)(a1 + 808) / (double)(v9 - 1);
  }
  float v10 = *(double *)(a1 + 840);
  *(float *)(a2 + 24) = v6;
  *(float *)(a2 + 28) = v10;
  unint64_t v11 = *(void *)(a1 + 832);
  float v12 = 0.0;
  if (v11 >= 2) {
    float v12 = *(double *)(a1 + 848) / (double)(v11 - 1);
  }
  *(float *)(a2 + 32) = v12;
  DspLib::copy((void *)(a1 + 42256), 2049, (void *)(a2 + 36));
  DspLib::copy((void *)(a1 + 50452), 2049, (void *)(a2 + 8232));

  return DspLib::copy((void *)(a1 + 34056), 2049, (void *)(a2 + 16428));
}

void DspLib::AmbienceLeveler::Algorithm::~Algorithm(DspLib::AmbienceLeveler::Algorithm *this)
{
  DspLib::AmbienceLeveler::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(void *)this = &unk_1F14A6870;
  float v8 = (void **)((char *)this + 58744);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 58712));
  uint64_t v2 = (void *)*((void *)this + 7336);
  if (v2)
  {
    *((void *)this + 7337) = v2;
    operator delete(v2);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17584));
  DspLib::ComplexVector::~ComplexVector((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 17504));
  double v3 = (void *)*((void *)this + 2180);
  if (v3)
  {
    *((void *)this + 2181) = v3;
    operator delete(v3);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 17400);
  float v4 = (void *)*((void *)this + 2167);
  if (v4)
  {
    *((void *)this + 2168) = v4;
    operator delete(v4);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 17296);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AmbienceLeveler::Algorithm *)((char *)this + 344));
  unint64_t v5 = (void *)*((void *)this + 40);
  if (v5)
  {
    *((void *)this + 41) = v5;
    operator delete(v5);
  }
  *(void *)this = &unk_1F14A88D8;
  float v6 = (void *)*((void *)this + 34);
  if (v6)
  {
    *((void *)this + 35) = v6;
    operator delete(v6);
  }
  float v8 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v8);
  *(void *)this = &unk_1F14A87D8;
  float v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
}

double DspLib::AlgorithmBase::latencySamples(DspLib::AlgorithmBase *this)
{
  return 0.0;
}

uint64_t DspLib::AmbienceLeveler::Algorithm::tailTimeSamples(DspLib::AmbienceLeveler::Algorithm *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t DspLib::AmbienceLeveler::Algorithm::numStatus(DspLib::AmbienceLeveler::Algorithm *this)
{
  return 6156;
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this, unint64_t a2, unsigned int a3)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  DspLibBuffer::initialize(this, a2, a3);
}

void sub_1BB2985E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t DspLibBuffer::initialize(DspLibBuffer *this, unint64_t a2, unsigned int a3)
{
  v27[3] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 4))
  {
    float v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    int v26 = 97;
LABEL_47:
    printf("DSP Sound assertion in %s at line %d\n", v25, v26);
    uint64_t result = 0;
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  if (*((void *)this + 5))
  {
    float v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    int v26 = 98;
    goto LABEL_47;
  }
  if (a2 >= 0x3B9ACA01)
  {
    float v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    int v26 = 99;
    goto LABEL_47;
  }
  if (a2 && !a3)
  {
    float v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    int v26 = 100;
    goto LABEL_47;
  }
  if (a3 >= 0x2711)
  {
    float v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    int v26 = 101;
    goto LABEL_47;
  }
  float v6 = (char *)*((void *)this + 7);
  float v7 = (char *)*((void *)this + 8);
  unint64_t v5 = (uint64_t *)((char *)this + 56);
  if (-1431655765 * ((unint64_t)(v7 - v6) >> 3) == a3 && *(void *)this == a2) {
    return 0;
  }
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 0x5555555555555554 * ((v7 - v6) >> 3) * ((*((void *)v6 + 1) - *(void *)v6) >> 2);
  }
  DspLibBuffer::mCurrentHeapMemoryConsumptionInBytes += v9;
  *(void *)this = a2;
  std::vector<std::vector<float>>::resize(v5, a3);
  if (!a3) {
    goto LABEL_36;
  }
  uint64_t v11 = 0;
  for (unint64_t i = 0; ; ++i)
  {
    if (*((void *)this + 4))
    {
      if (i >= *((unsigned int *)this + 12)) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    if (!*((void *)this + 5)) {
      break;
    }
    if (i >= *((unsigned int *)this + 12)) {
      goto LABEL_23;
    }
LABEL_22:
    std::vector<float>::resize(*((void *)this + 7) + v11, *(void *)this);
    v11 += 24;
  }
  if (i < -1431655765 * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3)) {
    goto LABEL_22;
  }
LABEL_23:
  MEMORY[0x1F4188790](v10);
  unsigned int v15 = (char *)v27 - v14;
  if (v13 >= 0x200) {
    size_t v16 = 512;
  }
  else {
    size_t v16 = v13;
  }
  bzero((char *)v27 - v14, v16);
  unint64_t v17 = 0;
  uint64_t v18 = *((void *)this + 4);
  if (!v18) {
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v19 = *((unsigned int *)this + 12);
    if (v17 >= v19) {
      break;
    }
    while (1)
    {
      *(void *)&v15[8 * v17] = DspLibBuffer::channel(this, v17);
      ++v17;
      if (v18) {
        break;
      }
LABEL_29:
      if (*((void *)this + 5))
      {
        unint64_t v19 = *((unsigned int *)this + 12);
        if (v17 >= v19) {
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
        if (v17 >= v19) {
          goto LABEL_35;
        }
      }
    }
  }
LABEL_35:
  uint64_t v20 = *((void *)this + 1);
  v27[0] = v15;
  v27[1] = v19;
  void v27[2] = v20;
  DspLib::clear(v27);
LABEL_36:
  vDSP_Length v21 = (void *)*((void *)this + 7);
  uint64_t v22 = *((void *)this + 8) - (void)v21;
  if (v22) {
    unint64_t v23 = 0xAAAAAAAAAAAAAAACLL * (v22 >> 3) * ((v21[1] - *v21) >> 2);
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t v24 = DspLibBuffer::mCurrentHeapMemoryConsumptionInBytes + v23;
  DspLibBuffer::mCurrentHeapMemoryConsumptionInBytes = v24;
  if (v24 > DspLibBuffer::mMaxHeapMemoryConsumptionInBytes) {
    DspLibBuffer::mMaxHeapMemoryConsumptionInBytes = v24;
  }
  ++DspLibBuffer::mNumHeapMemoryAllocations;
  return 1;
}

unint64_t *DspLibBuffer::setNumFrames(unint64_t *this, unint64_t a2)
{
  unint64_t v2 = *this;
  if (*this >= a2) {
    unint64_t v2 = a2;
  }
  this[1] = v2;
  return this;
}

uint64_t DspLibBuffer::numChannels(DspLibBuffer *this)
{
  if (*((void *)this + 4) || *((void *)this + 5)) {
    return *((unsigned int *)this + 12);
  }
  else {
    return -1431655765 * ((*((void *)this + 8) - *((void *)this + 7)) >> 3);
  }
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this, float *const *a2, uint64_t a3, int a4)
{
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = a2;
  *((_DWORD *)this + 12) = a4;
  *(void *)this = a3;
}

void DspLibBuffer::DspLibBuffer(DspLibBuffer *this, const DspLibBuffer *a2)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  unint64_t v4 = *(void *)a2;
  if (*((_OWORD *)a2 + 2) == 0) {
    unsigned int v5 = -1431655765 * ((*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  else {
    unsigned int v5 = *((_DWORD *)a2 + 12);
  }
  DspLibBuffer::initialize(this, v4, v5);
  DspLibBuffer::copy((uint64_t)this, a2);
}

void sub_1BB298A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t DspLibBuffer::copy(uint64_t this, const DspLibBuffer *a2)
{
  uint64_t v3 = this;
  if (*((_OWORD *)a2 + 2) == 0) {
    int v4 = -1431655765 * ((*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  else {
    int v4 = *((_DWORD *)a2 + 12);
  }
  uint64_t v5 = *(void *)(this + 32);
  if (*(_OWORD *)(this + 32) == 0) {
    int v11 = -1431655765 * ((*(void *)(this + 64) - *(void *)(this + 56)) >> 3);
  }
  else {
    int v11 = *(_DWORD *)(this + 48);
  }
  if (v4 == v11)
  {
    unsigned int v6 = 0;
    *(void *)(this + 16) = *((void *)a2 + 2);
    unint64_t v7 = *((void *)a2 + 1);
    if (*(void *)this < v7) {
      unint64_t v7 = *(void *)this;
    }
    *(void *)(this + 8) = v7;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    for (unsigned int i = *(_DWORD *)(v3 + 48); v6 < i; unsigned int i = -1431655765 * ((*(void *)(v3 + 64) - *(void *)(v3 + 56)) >> 3))
    {
      uint64_t v9 = (void *)DspLibBuffer::channel((DspLibBuffer *)v3, v6);
      uint64_t v10 = (const void *)DspLibBuffer::channel(a2, v6);
      this = (uint64_t)memcpy(v9, v10, 4 * *(void *)(v3 + 8));
      ++v6;
      if (*(void *)(v3 + 32)) {
        goto LABEL_12;
      }
LABEL_11:
      if (*(void *)(v3 + 40)) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    float v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v12, 253);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

uint64_t DspLibBuffer::DspLibBuffer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 21) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2) {
    std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a1 + 56, *(void *)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

void sub_1BB298CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void DspLibBuffer::~DspLibBuffer(DspLibBuffer *this)
{
  if (*((unsigned char *)this + 28))
  {
    if (*((void *)this + 4) || *((void *)this + 5)) {
      unsigned int v2 = *((_DWORD *)this + 12);
    }
    else {
      unsigned int v2 = -1431655765 * ((*((void *)this + 8) - *((void *)this + 7)) >> 3);
    }
    DspLibBuffer::mCurrentStackMemoryConsumptionInBytes -= 4 * *(void *)this * v2;
  }
  DspLibBuffer::uninitialize(this);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

FILE *DspLibBuffer::uninitialize(DspLibBuffer *this)
{
  if (!*((void *)this + 4) && !*((void *)this + 5)) {
    DspLibBuffer::initialize(this, 0, 0);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t result = (FILE *)*((void *)this + 10);
  if (result)
  {
    uint64_t result = (FILE *)fclose(result);
    *((void *)this + 10) = 0;
  }
  return result;
}

uint64_t DspLibBuffer::resize(DspLibBuffer *this, unint64_t a2)
{
  if (*((void *)this + 4) || *((void *)this + 5)) {
    unsigned int v2 = *((_DWORD *)this + 12);
  }
  else {
    unsigned int v2 = -1431655765 * ((*((void *)this + 8) - *((void *)this + 7)) >> 3);
  }
  return DspLibBuffer::initialize(this, a2, v2);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

uint64_t DspLibBuffer::channel(DspLibBuffer *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)this + 12);
    if (v3) {
      return v2 + 4 * *(void *)this * (a2 % v3);
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 5);
    if (v5)
    {
      unsigned int v6 = *((_DWORD *)this + 12);
      if (v6) {
        return *(void *)(v5 + 8 * (a2 % v6));
      }
    }
    else
    {
      uint64_t v7 = *((void *)this + 7);
      uint64_t v8 = *((void *)this + 8);
      unsigned int v9 = -1431655765 * ((unint64_t)(v8 - v7) >> 3);
      if (v9) {
        BOOL v10 = v8 == v7;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10) {
        return *(void *)(v7 + 24 * (a2 % v9));
      }
    }
  }
  return 0;
}

uint64_t DspLibBuffer::initializeWithExternalChannels(uint64_t this, float *const *a2, uint64_t a3, int a4)
{
  if (*(void *)(this + 56) == *(void *)(this + 64))
  {
    *(void *)(this + 40) = a2;
    *(_DWORD *)(this + 48) = a4;
    *(void *)this = a3;
    *(void *)(this + 8) = a3;
  }
  else
  {
    unint64_t v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
    this = printf("DSP Sound assertion in %s at line %d\n", v4, 141);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

float *DspLibBuffer::channelsPtr(float *this, float **a2)
{
  unsigned int v3 = this;
  for (unint64_t i = 0; ; ++i)
  {
    unint64_t v5 = *((void *)v3 + 4) || *((void *)v3 + 5)
       ? *((unsigned int *)v3 + 12)
       : -1431655765 * ((*((void *)v3 + 8) - *((void *)v3 + 7)) >> 3);
    if (i >= v5) {
      break;
    }
    this = (float *)DspLibBuffer::channel((DspLibBuffer *)v3, i);
    a2[i] = this;
  }
  return this;
}

unint64_t DspLibBuffer::element(DspLibBuffer *this, unint64_t a2, unsigned int a3)
{
  return DspLibBuffer::channel(this, a3) + 4 * (a2 % *(void *)this);
}

void *DspLibBuffer::copy(DspLibBuffer *this, unsigned int a2, const float *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v8 = *(void *)this;
  if (*(void *)this) {
    unsigned int v9 = (void *)(DspLibBuffer::channel(this, a2) + 4 * (a5 % v8));
  }
  else {
    unsigned int v9 = 0;
  }
  unint64_t v10 = v8 - a5;
  if (v8 - a5 >= a4) {
    unint64_t v10 = a4;
  }

  return memcpy(v9, a3, 4 * v10);
}

uint64_t DspLibBuffer::operator[](DspLibBuffer *this, unint64_t a2)
{
  unint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    if (*((void *)this + 4) || *((void *)this + 5))
    {
      LODWORD(v4) = *((_DWORD *)this + 12);
      if (v4) {
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
      }
    }
    else
    {
      unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
      if (v4) {
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
      }
    }
    int v6 = 276;
  }
  else
  {
    int v6 = 275;
  }
  uint64_t v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v7, v6);
  ++DspLibDebug::mAssertCounter;

  return DspLibBuffer::channel(this, 0);
}

unint64_t DspLibBuffer::operator[](DspLibBuffer *this, unint64_t a2)
{
  unint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    if (*((void *)this + 4) || *((void *)this + 5))
    {
      LODWORD(v4) = *((_DWORD *)this + 12);
      if (v4) {
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
      }
    }
    else
    {
      unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
      if (v4) {
        return DspLibBuffer::channel(this, a2 / v3 % v4) + 4 * (a2 % v3);
      }
    }
    int v6 = 291;
  }
  else
  {
    int v6 = 290;
  }
  uint64_t v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Utilities/DspLibBuffer.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v7, v6);
  ++DspLibDebug::mAssertCounter;
  return (unint64_t)this + 24;
}

uint64_t DspLibBuffer::operator=(uint64_t this, const DspLibBuffer *a2)
{
  if ((const DspLibBuffer *)this != a2) {
    return DspLibBuffer::copy(this, a2);
  }
  return this;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    unsigned int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unsigned int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unsigned int v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100]((void *)a1, v11);
    float v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    float v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      unint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      uint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1BB299564(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BB29956C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BB299650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      unint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v4, v11);
    }
    else {
      float v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BB2998B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    long long v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v13);
      long long v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      long long v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void DspLib::FastMedianFilter::initialize(DspLib::FastMedianFilter *this, uint64_t a2)
{
  unint64_t v3 = a2 | 1;
  unint64_t v4 = (a2 | 1) + 1;
  if (v4 != (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2)
  {
    *((void *)this + 1) = *(void *)this;
    std::vector<float>::resize((uint64_t)this, v4);
  }

  DspLib::CircularDelay::setLength((DspLib::FastMedianFilter *)((char *)this + 24), v3);
}

void DspLib::FastMedianFilter::uninitialize(DspLib::FastMedianFilter *this)
{
  *((void *)this + 1) = *(void *)this;
  DspLib::CircularDelay::setLength((DspLib::FastMedianFilter *)((char *)this + 24), 0);
}

void DspLib::FastMedianFilter::reset(DspLib::FastMedianFilter *this)
{
  DspLib::CircularDelay::reset((DspLib::FastMedianFilter *)((char *)this + 24));
  DspLib::fill(*((float **)this + 3), (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2, *((float *)this + 14));
  uint64_t v2 = *(float **)this;
  vDSP_Length v3 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2;
  float v4 = *((float *)this + 14);

  DspLib::fill(v2, v3, v4);
}

uint64_t DspLib::FastMedianFilter::findValueInBuffer(DspLib::FastMedianFilter *this, float a2)
{
  unint64_t v2 = ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 2) - 1;
  unint64_t v3 = v2 >> 1;
  float v4 = *(float *)(*(void *)this + 4 * (v2 >> 1));
  uint64_t v5 = 0;
  if (v4 != a2)
  {
    unint64_t v6 = v2 - v3;
    do
    {
      unint64_t v7 = v3 >> 1;
      unint64_t v8 = v3 - (v3 >> 1);
      uint64_t v9 = v5 + v3;
      unint64_t v3 = v6 >> 1;
      v6 -= v6 >> 1;
      if (v4 < a2)
      {
        uint64_t v5 = v9;
      }
      else
      {
        unint64_t v3 = v7;
        unint64_t v6 = v8;
      }
      float v4 = *(float *)(*(void *)this + 4 * (v5 + v3));
    }
    while (v4 != a2);
  }
  return v5 + v3;
}

unint64_t DspLib::FastMedianFilter::findPlaceForNewValue(DspLib::FastMedianFilter *this, float a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = ((*((void *)this + 1) - *(void *)this) >> 2);
  if (v3 >= 2)
  {
    unint64_t result = 0;
    unint64_t v5 = v3 >> 1;
    unint64_t v6 = v3 - (v3 >> 1);
    do
    {
      float v7 = *(float *)(v2 + 4 * (v5 + result));
      unint64_t v8 = v6 >> 1;
      v6 -= v6 >> 1;
      unint64_t v9 = v5 - (v5 >> 1);
      if (v7 >= a2)
      {
        v5 >>= 1;
      }
      else
      {
        result += v5;
        unint64_t v5 = v8;
      }
      if (v7 >= a2) {
        unint64_t v6 = v9;
      }
    }
    while (v5);
  }
  else
  {
    unint64_t result = 0;
  }
  if (result < v3 - 1 && *(float *)(v2 + 4 * result) < a2) {
    ++result;
  }
  return result;
}

float DspLib::FastMedianFilter::updateMedianFilter(DspLib::FastMedianFilter *this, float a2)
{
  float v16 = a2;
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 2;
  float __dst = 0.0;
  DspLib::CircularDelay::process((void *)this + 3, (char *)&v16, 1uLL, (char *)&__dst, 1uLL);
  unint64_t ValueInBuffer = DspLib::FastMedianFilter::findValueInBuffer(this, __dst);
  float v6 = v16;
  unint64_t PlaceForNewValue = DspLib::FastMedianFilter::findPlaceForNewValue(this, v16);
  unint64_t v8 = PlaceForNewValue;
  unint64_t v9 = ValueInBuffer - PlaceForNewValue;
  if (ValueInBuffer >= PlaceForNewValue)
  {
    if (ValueInBuffer > PlaceForNewValue)
    {
      if (v9 == -1) {
        uint64_t v11 = v3 - PlaceForNewValue;
      }
      else {
        uint64_t v11 = ValueInBuffer - PlaceForNewValue;
      }
      if (v9 == -1) {
        uint64_t v12 = v3 - (PlaceForNewValue + 1);
      }
      else {
        uint64_t v12 = ValueInBuffer - PlaceForNewValue;
      }
      unint64_t v13 = (float *)(v2 + 4 * PlaceForNewValue);
      DspLib::copy_backward(v13, v11, v2 + 4 * (PlaceForNewValue + 1), v12);
      float *v13 = v16;
    }
    else
    {
      *(float *)(v2 + 4 * PlaceForNewValue) = v6;
    }
  }
  else
  {
    if (PlaceForNewValue + ~ValueInBuffer == -1) {
      uint64_t v10 = v3 - (ValueInBuffer + 1);
    }
    else {
      uint64_t v10 = PlaceForNewValue + ~ValueInBuffer;
    }
    DspLib::copy((void *)(v2 + 4 * (ValueInBuffer + 1)), v10, (void *)(v2 + 4 * ValueInBuffer));
    *(float *)(v2 + 4 * v8 - 4) = v16;
  }
  return *(float *)(v2 + ((2 * v3 - 2) & 0xFFFFFFFFFFFFFFFCLL));
}

void DspLib::FastMedianFilter::process(DspLib::FastMedianFilter *this, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      *(float *)(a4 + 4 * v8) = DspLib::FastMedianFilter::updateMedianFilter(this, *(float *)(a2 + 4 * v8));
      uint64_t v8 = v9;
    }
    while (a3 > v9++);
  }
}

void DspLib::LogContext::~LogContext(DspLib::LogContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void Log_FlushBuffer(FILE **a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*a1)
  {
    float v4 = (char *)a1[6];
    unint64_t v5 = ((char *)a1[7] - v4) >> 2;
    while (1)
    {
      int v6 = HIDWORD(v3->_bf._base) - v3->_bf._size;
      if (v6 < 0) {
        v6 += LODWORD(v3->_bf._base);
      }
      if (!v6) {
        break;
      }
      size_t v7 = DspLib::CircularBuffer<float>::read((uint64_t)v3, v4, v5);
      fwrite(v4, v7, 4uLL, *a1);
    }
    fflush(*a1);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BB29A05C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t DspLib::CircularBuffer<float>::read(uint64_t a1, char *__dst, unint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  int v6 = *(_DWORD *)(a1 + 24);
  if ((int)(*(_DWORD *)(a1 + 28) - v5 + (v6 & ((*(_DWORD *)(a1 + 28) - (int)v5) >> 31))) >= a3) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = (int)(*(_DWORD *)(a1 + 28) - v5 + (v6 & ((*(_DWORD *)(a1 + 28) - (int)v5) >> 31)));
  }
  size_t v8 = 4 * v7;
  unint64_t v9 = (v6 - v5);
  if (v7 <= v9)
  {
    uint64_t v12 = (const void *)(*(void *)a1 + 4 * v5);
    uint64_t v11 = __dst;
  }
  else
  {
    size_t v10 = v8 - 4 * v9;
    memcpy(__dst, (const void *)(*(void *)a1 + 4 * v5), 4 * v9);
    uint64_t v11 = &__dst[4 * v9];
    uint64_t v12 = *(const void **)a1;
    size_t v8 = v10;
  }
  memcpy(v11, v12, v8);
  int v13 = *(_DWORD *)(a1 + 36) - v7;
  *(_DWORD *)(a1 + 32) = (v7 + *(unsigned int *)(a1 + 32)) % *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 36) = v13;
  return v7;
}

void LogQueueFinalizer(FILE **a1)
{
  Log_FlushBuffer(a1);
  if (*a1)
  {
    fclose(*a1);
    *a1 = 0;
  }
  DspLib::LogContext::~LogContext((DspLib::LogContext *)a1);

  JUMPOUT(0x1C185D370);
}

void DspLib::Logger::Logger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = 0;
  std::allocate_shared[abi:ne180100]<DspLib::CircularBuffer<float>,std::allocator<DspLib::CircularBuffer<float>>,unsigned long &,void>((unsigned int *)a1, (void *)(a1 + 24));
  if (stat("/private/var/mobile/tmp/com.apple.audiomxd/lsm2/", &v12) == -1) {
    mkdir("/private/var/mobile/tmp/com.apple.audiomxd/lsm2/", 0x1FFu);
  }
  CFStringRef v7 = (const __CFString *)MGGetStringAnswer();
  CStringPtr = CFStringGetCStringPtr(v7, 0x8000100u);
  unint64_t v9 = "";
  if (CStringPtr) {
    unint64_t v9 = CStringPtr;
  }
  unsigned int v10 = llround(*(double *)(a3 + 8));
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v11 = (const char *)a2;
  }
  else {
    uint64_t v11 = *(const char **)a2;
  }
  snprintf(__str, 0x200uLL, "%s%s_%04d%02d%02d_%02d%02d%02d_%s", "/private/var/mobile/tmp/com.apple.audiomxd/lsm2/", v9, *(_DWORD *)a3, *(char *)(a3 + 4), *(char *)(a3 + 5), *(char *)(a3 + 6), *(char *)(a3 + 7), v10, v11);
  operator new();
}

void sub_1BB29A3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,DspLib::LogContext *a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<DspLib::LogContext>::reset[abi:ne180100](&a24, 0);
  int v26 = *(std::__shared_weak_count **)(v24 + 32);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void DspLib::Logger::Logger(uint64_t a1, uint64_t a2)
{
  float v4 = CFTimeZoneCopySystem();
  uint64_t CurrentGregorianDate = CATimeUtilities::GetCurrentGregorianDate(v4);
  uint64_t v7 = v6;
  CFRelease(v4);
  v8[0] = CurrentGregorianDate;
  v8[1] = v7;
  DspLib::Logger::Logger(a1, a2, (uint64_t)v8, 0x20000, 4096);
}

void DspLib::Logger::~Logger(dispatch_object_t *this)
{
  DspLib::Logger::FlushLog((DspLib::Logger *)this);
  dispatch_release(this[5]);
  uint64_t v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void DspLib::Logger::FlushLog(DspLib::Logger *this)
{
  if (*((void *)this + 2))
  {
    uint64_t v2 = *((void *)this + 5);
    context = dispatch_get_context(v2);
    dispatch_async_f(v2, context, (dispatch_function_t)Log_FlushBuffer);
    *((void *)this + 2) = 0;
  }
}

void DspLib::Logger::logData(DspLib::Logger *this, float a2)
{
  float __src = a2;
  DspLib::Logger::logData(this, &__src, 1);
}

void DspLib::Logger::logData(DspLib::Logger *this, float *__src, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = (_DWORD *)*((void *)this + 3);
  int v8 = v7[7] - v7[8];
  if ((unint64_t)a3 + (v7[6] & (v8 >> 31)) + v8 >= v7[6])
  {
    do
    {
      dispatch_sync(*((dispatch_queue_t *)this + 5), &__block_literal_global_1);
      uint64_t v7 = (_DWORD *)*((void *)this + 3);
      int v9 = v7[7] - v7[8];
    }
    while (v6 + (v7[6] & (v9 >> 31)) + v9 >= (unint64_t)v7[6]);
  }
  DspLib::CircularBuffer<float>::write((uint64_t)v7, (char *)__src, a3);
  unint64_t v10 = *((void *)this + 1);
  unint64_t v11 = *((void *)this + 2) + a3;
  *((void *)this + 2) = v11;
  if (v11 >= v10)
  {
    DspLib::Logger::FlushLog(this);
  }
}

void *DspLib::CircularBuffer<float>::write(uint64_t a1, char *__src, unsigned int a3)
{
  float v4 = __src;
  size_t v6 = 4 * a3;
  uint64_t v7 = *(unsigned int *)(a1 + 28);
  unsigned int v8 = *(_DWORD *)(a1 + 24) - v7;
  if (v8 >= a3)
  {
    unint64_t v10 = (void *)(*(void *)a1 + 4 * v7);
  }
  else
  {
    size_t v9 = v6 - 4 * v8;
    memcpy((void *)(*(void *)a1 + 4 * v7), __src, 4 * v8);
    unint64_t v10 = *(void **)a1;
    float __src = &v4[4 * v8];
    size_t v6 = v9;
  }
  unint64_t result = memcpy(v10, __src, v6);
  *(_DWORD *)(a1 + 36) += a3;
  *(_DWORD *)(a1 + 28) = (*(_DWORD *)(a1 + 28) + a3) % *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::shared_ptr<std::vector<char>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A69D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A69D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<std::vector<char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::allocate_shared[abi:ne180100]<DspLib::CircularBuffer<float>,std::allocator<DspLib::CircularBuffer<float>>,unsigned long &,void>@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  float v4 = (char *)operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<DspLib::CircularBuffer<float>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1BB29A858(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<DspLib::CircularBuffer<float>>,0>(uint64_t a1, unsigned int *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F14A6A28;
  int v3 = *a2;
  std::vector<float>::vector((void *)(a1 + 24), *a2);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 52) = 0;
  return a1;
}

void sub_1BB29A8C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A6A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A6A28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<DspLib::CircularBuffer<float>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

DspLib::LogContext *std::unique_ptr<DspLib::LogContext>::reset[abi:ne180100](DspLib::LogContext **a1, DspLib::LogContext *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::LogContext::~LogContext(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void *CASmartPreferences::AddHandler<BOOL>(CASmartPreferences *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = CASmartPreferences::instance(a1);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
  int v13 = 0;
  size_t v9 = operator new(0x30uLL);
  *size_t v9 = &unk_1F14A6A78;
  v9[1] = a3;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)(v9 + 2), (uint64_t)v11);
  int v13 = v9;
  CASmartPreferences::_RegisterFirstHandler((uint64_t)v8, a1, a2, (uint64_t)v12);
  std::__function::__value_func<BOOL ()(void const*)>::~__value_func[abi:ne180100](v12);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v11);
}

void sub_1BB29AAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<BOOL ()(void const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_1F14A6A78;
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(void *a1)
{
  *a1 = &unk_1F14A6A78;
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](a1 + 2);

  JUMPOUT(0x1C185D370);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_1F14A6A78;
  v2[1] = v3;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1BB29ABD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_1F14A6A78;
  a2[1] = v2;
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

void *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
}

void std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](a1 + 2);

  operator delete(a1);
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1} &,void const*>((uint64_t (**)(uint64_t, char *))(a1 + 8), a2);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::target_type()
{
}

BOOL std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1} &,void const*>(uint64_t (**a1)(uint64_t, char *), uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v6 = 0;
  char v4 = (*a1)(v3, &v6);
  if (!v6) {
    return 0;
  }
  std::function<void ()(BOOL)>::operator()((uint64_t)(a1 + 1), v4);
  return v6 != 0;
}

void *std::__function::__value_func<BOOL ()(void const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void DspLib::ToneGenerator::initialize(DspLib::ToneGenerator *this, double a2)
{
  *(unsigned char *)this = 1;
  *((double *)this + 8) = a2;
  *((double *)this + 15) = a2;
  *((double *)this + 2) = a2;
  *((double *)this + 21) = a2;
  DspLib::ToneGenerator::configure((uint64_t)this, *((_DWORD *)this + 1), *((float *)this + 2));

  DspLib::ToneGenerator::reset(this);
}

void DspLib::ToneGenerator::configure(uint64_t a1, int a2, float a3)
{
  *(_DWORD *)(a1 + 4) = a2;
  float v3 = 40.0;
  if (a3 <= 40.0) {
    float v3 = a3;
  }
  if (a3 >= -100.0) {
    float v4 = v3;
  }
  else {
    float v4 = -100.0;
  }
  *(float *)(a1 + 8) = v4;
  if (*(unsigned char *)a1)
  {
    *(float *)(a1 + 72) = DspLib::dB2Amp((DspLib *)a1, v4);
    switch(*(_DWORD *)(a1 + 4))
    {
      case 2:
        float v6 = 6283.18531 / *(double *)(a1 + 168);
        *(float *)(a1 + 180) = v6;
        break;
      case 3:
        double Chunk = DspLib::ToneGenerator::FrequencySequencer::getChunk((DspLib::ToneGenerator::FrequencySequencer *)(a1 + 120));
        DspLib::ToneGenerator::LogSweepGenerator::configure(a1 + 16, Chunk, v8, v9);
        break;
      case 4:
      case 6:
        DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::initialize((void *)(a1 + 192));
        break;
      case 5:
        *(void *)(a1 + 184) = 0;
        break;
      default:
        return;
    }
  }
}

void DspLib::ToneGenerator::reset(DspLib::ToneGenerator *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 5) = *((void *)this + 6);
  *((void *)this + 10) = 0;
  BOOL v1 = *((void *)this + 12) != 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = v1;
  BOOL v2 = *((void *)this + 18) != 0;
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 160) = v2;
  *((void *)this + 16) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 44) = 0;
  uint64_t v3 = *((void *)this + 25);
  if (v3)
  {
    unsigned int v4 = 5489;
    *(_DWORD *)uint64_t v3 = 5489;
    for (uint64_t i = 1; i != 624; ++i)
    {
      unsigned int v4 = i + 1812433253 * (v4 ^ (v4 >> 30));
      *(_DWORD *)(v3 + 4 * i) = v4;
    }
    *(void *)(v3 + 2496) = 0;
  }
  srand(0x98962Fu);
}

uint64_t DspLib::ToneGenerator::uninitialize(DspLib::ToneGenerator *this)
{
  *(unsigned char *)this = 0;
  return DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::uninitialize((DspLib::ToneGenerator *)((char *)this + 192));
}

uint64_t DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::uninitialize(DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x1C185D370](v2, 0x1000C4000313F17);
  }
  uint64_t result = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (result)
  {
    JUMPOUT(0x1C185D370);
  }
  return result;
}

double DspLib::ToneGenerator::LogSweepGenerator::configure(uint64_t a1, double a2, double a3, double a4)
{
  double v6 = a3 * 6.28318548;
  float v7 = log(a4 * 6.28318548 / (a3 * 6.28318548));
  double v8 = v7;
  double v9 = a2 * v6 / v8;
  double v10 = *(double *)a1;
  float v11 = exp(1.0 / (a2 / v8 * *(double *)a1));
  *(double *)(a1 + 32) = v9;
  *(double *)(a1 + 40) = v11;
  *(double *)(a1 + 24) = v9;
  double result = a2 * v10;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = vcvtad_u64_f64(a2 * v10);
  return result;
}

double DspLib::ToneGenerator::FrequencySequencer::getChunk(DspLib::ToneGenerator::FrequencySequencer *this)
{
  double result = 4.0;
  if (*((void *)this + 3))
  {
    if (*((unsigned char *)this + 40)) {
      return *(float *)(*((void *)this + 2) + 24 * *((void *)this + 4) + 4);
    }
  }
  return result;
}

void *DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::initialize(void *this)
{
  if (!*this) {
    operator new();
  }
  if (!this[1]) {
    operator new();
  }
  return this;
}

void DspLib::ToneGenerator::generate(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a1 + 4))
  {
    case 1:
      long long v16 = *(_OWORD *)a2;
      uint64_t v17 = *(void *)(a2 + 16);
      DspLib::ToneGenerator::UnsafeRandomNumberGenerator::generate(a1, &v16);
      break;
    case 2:
      long long v14 = *(_OWORD *)a2;
      uint64_t v15 = *(void *)(a2 + 16);
      DspLib::ToneGenerator::SineGenerator::generate(a1 + 168, (void ***)&v14, a1 + 120);
      break;
    case 3:
      long long v12 = *(_OWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 16);
      DspLib::ToneGenerator::LogSweepGenerator::generate(a1 + 16, (void ***)&v12);
      break;
    case 4:
      long long v10 = *(_OWORD *)a2;
      uint64_t v11 = *(void *)(a2 + 16);
      DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateUniform((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)(a1 + 192), &v10);
      break;
    case 5:
      long long v6 = *(_OWORD *)a2;
      uint64_t v7 = *(void *)(a2 + 16);
      DspLib::ToneGenerator::DiracPulseGenerator::generate((uint64_t *)(a1 + 184), &v6);
      break;
    case 6:
      long long v8 = *(_OWORD *)a2;
      uint64_t v9 = *(void *)(a2 + 16);
      DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateGaussian((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)(a1 + 192), &v8);
      break;
    default:
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a2 + 16);
      DspLib::clear(&v18);
      break;
  }
  long long v4 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  DspLib::ToneGenerator::EnvelopeSequencer::computeEnvelope(a1 + 64, &v4);
}

void DspLib::ToneGenerator::UnsafeRandomNumberGenerator::generate(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = a2[2];
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        unsigned int v8 = 1;
        do
        {
          *(float *)(*(void *)(*a2 + 8 * v4) + 4 * v7) = (float)((float)rand() * 4.6566e-10) + -0.5;
          uint64_t v7 = v8;
          unint64_t v6 = a2[2];
        }
        while (v6 > v8++);
        unint64_t v2 = a2[1];
      }
      uint64_t v4 = ++v5;
    }
    while (v2 > v5);
  }
}

void DspLib::ToneGenerator::SineGenerator::generate(uint64_t a1, void ***a2, uint64_t a3)
{
  DspLib::clear((float *)**a2, (vDSP_Length)a2[2]);
  unint64_t v6 = (unint64_t)a2[2];
  if (v6)
  {
    uint64_t v7 = 0;
    for (i = 0; i < v6; uint64_t v7 = i)
    {
      unint64_t v9 = DspLib::ToneGenerator::FrequencySequencer::advance(a3, v6 - v7);
      *(_DWORD *)(a1 + 12) = v10;
      if (v9)
      {
        LODWORD(v11) = 0;
        long long v12 = (float *)**a2;
        float v13 = *(float *)(a1 + 8);
        do
        {
          v12[i + v11] = sinf(v13);
          float v13 = *(float *)(a1 + 12) + *(float *)(a1 + 8);
          if (v13 > 6.28318531)
          {
            float v14 = v13 + -6.28318531;
            float v13 = v14;
          }
          *(float *)(a1 + 8) = v13;
          unint64_t v11 = (v11 + 1);
        }
        while (v9 > v11);
      }
      unint64_t v6 = (unint64_t)a2[2];
      i += v9;
    }
  }
  if ((unint64_t)a2[1] >= 2)
  {
    unsigned int v15 = 2;
    uint64_t v16 = 1;
    do
    {
      DspLib::copy(**a2, (uint64_t)a2[2], (*a2)[v16]);
      uint64_t v16 = v15;
    }
    while ((unint64_t)a2[1] > v15++);
  }
}

void DspLib::ToneGenerator::LogSweepGenerator::generate(uint64_t a1, void ***a2)
{
  unint64_t v2 = (unint64_t)a2[2];
  if (v2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (*(void *)(a1 + 16) - v5 >= v2) {
      unint64_t v6 = (unint64_t)a2[2];
    }
    else {
      unint64_t v6 = *(void *)(a1 + 16) - v5;
    }
    uint64_t v7 = (float *)**a2;
    if (v6)
    {
      uint64_t v8 = 0;
      double v10 = *(double *)(a1 + 32);
      double v9 = *(double *)(a1 + 40);
      double v11 = *(double *)(a1 + 24);
      do
      {
        float v12 = sin(v11 - v10);
        v7[v8] = v12;
        double v11 = v11 * v9;
        ++v8;
      }
      while (v6 > v8);
      *(double *)(a1 + 24) = v11;
    }
    DspLib::clear(&v7[v2 - (v2 - v6)], v2 - v6);
    *(void *)(a1 + 8) += v6;
    if ((unint64_t)a2[1] >= 2)
    {
      unsigned int v13 = 2;
      uint64_t v14 = 1;
      do
      {
        DspLib::copy(**a2, (uint64_t)a2[2], (*a2)[v14]);
        uint64_t v14 = v13;
      }
      while ((unint64_t)a2[1] > v13++);
    }
  }
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateUniform(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **result, void *a2)
{
  unint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    unint64_t v7 = a2[1];
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        unsigned int v9 = 1;
        do
        {
          double v10 = (float *)*v4;
          float v11 = *(float *)&(*v4)->__x_[1] - *(float *)(*v4)->__x_;
          double result = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4[1]);
          unint64_t v7 = a2[1];
          *(float *)(*(void *)(*a2 + 8 * v8) + 4 * v5) = *v10
                                                         + (float)(v11
                                                                 * (float)((float)result * 2.3283e-10));
          uint64_t v8 = v9;
        }
        while (v7 > v9++);
        unint64_t v2 = a2[2];
      }
      uint64_t v5 = ++v6;
    }
    while (v2 > v6);
  }
  return result;
}

void DspLib::ToneGenerator::ThreadSafeRandomNumberGenerator::generateGaussian(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **a1, long long *a2)
{
  long long v16 = *a2;
  uint64_t v17 = *((void *)a2 + 2);
  DspLib::clear(&v16);
  unint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    unint64_t v7 = *((void *)a2 + 1);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        for (i = 0; i < v7; uint64_t v8 = ++i)
        {
          int v10 = 12;
          do
          {
            float v11 = (float *)*a1;
            float v12 = *(float *)&(*a1)->__x_[1] - *(float *)(*a1)->__x_;
            std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v13 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(a1[1]);
            uint64_t v14 = *(void *)(*(void *)a2 + 8 * v8);
            float v15 = (float)(*v11 + (float)(v12 * (float)((float)v13 * 2.3283e-10))) + *(float *)(v14 + 4 * v5);
            *(float *)(v14 + 4 * v5) = v15;
            --v10;
          }
          while (v10);
          *(float *)(v14 + 4 * v5) = v15 / 12.0;
          unint64_t v7 = *((void *)a2 + 1);
        }
        unint64_t v4 = *((void *)a2 + 2);
      }
      uint64_t v5 = ++v6;
    }
    while (v4 > v6);
  }
}

void DspLib::ToneGenerator::DiracPulseGenerator::generate(uint64_t *a1, long long *a2)
{
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  DspLib::clear(&v7);
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *a1;
  if (v4)
  {
    uint64_t v6 = 0;
    do
    {
      if (!v5) {
        **(_DWORD **)(*(void *)a2 + 8 * v6) = 1065353216;
      }
      ++v6;
    }
    while (v4 > v6);
  }
  if (!v5) {
    *a1 = *((void *)a2 + 2);
  }
}

void DspLib::ToneGenerator::EnvelopeSequencer::computeEnvelope(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[2];
  if (v2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a1 + 40;
    do
    {
      vDSP_Length v7 = v2 - v5;
      if (*(void *)(a1 + 32) && *(unsigned char *)(a1 + 48))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(void *)(a1 + 16);
        uint64_t v10 = *(void *)(a1 + 24);
        uint64_t v11 = v10 + 24 * v8;
        float v12 = *(float *)(v11 + 4);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)v11;
        vDSP_Length v13 = vcvtad_u64_f64(*(double *)a1 * v12) - v9;
        if (v7 <= v13)
        {
          vDSP_Length v14 = v9 + v7;
        }
        else
        {
          vDSP_Length v14 = 0;
          uint64_t v15 = v10 + 24 * v8;
          uint64_t v16 = *(void *)(v15 + 8);
          *(unsigned char *)(v6 + 8) = *(unsigned char *)(v15 + 16);
          *(void *)uint64_t v6 = v16;
          vDSP_Length v7 = v13;
        }
        *(void *)(a1 + 16) = v14;
      }
      if (a2[1])
      {
        uint64_t v17 = 0;
        float v18 = *(float *)(a1 + 8) * *(float *)(a1 + 12);
        unsigned int v19 = 1;
        do
        {
          uint64_t v20 = *(void *)(*a2 + 8 * v17);
          if (v7 == -1) {
            vDSP_Length v21 = a2[2] - v5;
          }
          else {
            vDSP_Length v21 = v7;
          }
          DspLib::multiply((float *)(v20 + 4 * v5), v21, v18);
          uint64_t v17 = v19;
        }
        while (a2[1] > (unint64_t)v19++);
      }
      v5 += v7;
    }
    while (v5 < v2);
  }
}

unint64_t DspLib::ToneGenerator::FrequencySequencer::advance(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (*(void *)(a1 + 24) && *(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    unint64_t v6 = vcvtad_u64_f64(*(double *)a1 * *(float *)(v4 + 24 * v3 + 4)) - v5;
    if (a2 <= v6)
    {
      uint64_t v7 = v5 + a2;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = v4 + 24 * v3;
      uint64_t v9 = *(void *)(v8 + 8);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(v8 + 16);
      *(void *)(a1 + 32) = v9;
      unint64_t v2 = v6;
    }
    *(void *)(a1 + 8) = v7;
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t DspLib::LoudnessNormalizer::Parameters::automationParameter(DspLib::LoudnessNormalizer::Parameters *this, int a2)
{
  int v2 = 0;
  if ((int)this > 12)
  {
    if (this == 13) {
      goto LABEL_8;
    }
    if (this != 38) {
      goto LABEL_9;
    }
LABEL_7:
    int v2 = 2;
    goto LABEL_9;
  }
  if (this == 3) {
    goto LABEL_7;
  }
  if (this == 4) {
LABEL_8:
  }
    int v2 = 1;
LABEL_9:
  if (this == 4 || this == 38) {
    int v4 = 26;
  }
  else {
    int v4 = 20;
  }
  if (a2) {
    int v5 = 3;
  }
  else {
    int v5 = 0;
  }
  return (v4 + v5 + v2);
}

uint64_t DspLib::LoudnessNormalizer::Parameters::automationVolumeForParameterAndPoint(DspLib::LoudnessNormalizer::Parameters *this, int a2)
{
  if (this == 4 || this == 38) {
    int v3 = 26;
  }
  else {
    int v3 = 20;
  }
  if (a2) {
    int v4 = 3;
  }
  else {
    int v4 = 0;
  }
  return (v3 + v4);
}

BOOL DspLib::LoudnessNormalizer::Parameters::resetModeFlagsAreSet(int a1, float a2)
{
  return (a1 & ~vcvtas_u32_f32(a2)) == 0;
}

BOOL DspLib::LoudnessNormalizer::Parameters::shapingFilterIsOn(float *a1)
{
  return a1[33] >= 0.5 && a1[6] >= 0.5 && a1[7] >= 0.5;
}

void DspLib::AudioMeter::Algorithm::initialize(DspLib::AudioMeter::Algorithm *this, unsigned int a2, double a3)
{
  if (*(double *)this == a3)
  {
    uint64_t v6 = *((void *)this + 5);
    uint64_t v5 = *((void *)this + 6);
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 6) == a2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 5);
    uint64_t v5 = *((void *)this + 6);
  }
  *(double *)this = a3;
  while (v5 != v6)
  {
    v5 -= 192;
    std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(v5);
  }
  *((void *)this + 6) = v6;
  std::vector<DspLib::RMS>::resize((uint64_t *)this + 5, a2);
  uint64_t v7 = (DspLib::RMS *)*((void *)this + 5);
  uint64_t v8 = (DspLib::RMS *)*((void *)this + 6);
  if (v7 == v8)
  {
    uint64_t v9 = *((void *)this + 5);
  }
  else
  {
    do
    {
      DspLib::RMS::initialize(v7, 1u, *(double *)this);
      uint64_t v7 = (DspLib::RMS *)((char *)v7 + 192);
    }
    while (v7 != v8);
    uint64_t v7 = (DspLib::RMS *)*((void *)this + 5);
    uint64_t v9 = *((void *)this + 6);
  }
  std::vector<float>::resize((uint64_t)this + 64, 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v7) >> 6));
  std::vector<float>::resize((uint64_t)this + 88, 0x200uLL);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 14, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 6));
  uint64_t v10 = *((void *)this + 14);
  uint64_t v11 = *((void *)this + 15);
  while (v10 != v11)
  {
    std::vector<float>::resize(v10, 1uLL);
    v10 += 24;
  }

  DspLib::AudioMeter::Algorithm::setParameters((uint64_t)this, (uint64_t)this + 8);
}

void std::vector<DspLib::RMS>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 6);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::RMS>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 192 * a2;
    while (v3 != v7)
    {
      v3 -= 192;
      std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(v3);
    }
    a1[1] = v7;
  }
}

void DspLib::AudioMeter::Algorithm::setParameters(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0;
  v27[3] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (float *)(a1 + 8);
  do
  {
    BOOL v5 = (float *)(a2 + v3);
    float v6 = *(float *)(a2 + v3);
    if (*(float *)((char *)&DspLib::AudioMeter::Parameters::kMaximum + v3) < v6) {
      BOOL v5 = (float *)((char *)&DspLib::AudioMeter::Parameters::kMaximum + v3);
    }
    if (v6 < 0.0) {
      BOOL v5 = (float *)((char *)&DspLib::AudioMeter::Parameters::kMinimum + v3);
    }
    v4[v3 / 4] = *v5;
    v3 += 4;
  }
  while (v3 != 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 != v7)
  {
    do
    {
      DspLib::RMS::setParameters(v7, 1, *v4);
      v7 += 192;
    }
    while (v7 != v8);
    double v10 = *(double *)a1 * (float)(*(float *)(a1 + 12) / 1000.0);
    uint64_t v11 = *(void **)(a1 + 112);
    float v12 = *(void **)(a1 + 120);
    uint64_t v13 = v11[1] - *v11;
    *(_DWORD *)(a1 + 136) = v10;
    unint64_t v14 = (v10 >> 6) + 1;
    uint64_t v15 = v13 >> 2;
    while (v11 != v12)
    {
      std::vector<float>::resize((uint64_t)v11, v14);
      v11 += 3;
    }
    if (v15 != v14)
    {
      MEMORY[0x1F4188790](v9);
      float v18 = (char *)v27 - v17;
      if (v16 >= 0x200) {
        size_t v19 = 512;
      }
      else {
        size_t v19 = v16;
      }
      bzero((char *)v27 - v17, v19);
      uint64_t v20 = *(void **)(a1 + 112);
      vDSP_Length v21 = *(void **)(a1 + 120);
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v21 - v20);
      if (v21 == v20) {
        goto LABEL_21;
      }
      uint64_t v23 = 0;
      uint64_t v24 = *(uint64_t **)(a1 + 112);
      do
      {
        uint64_t v25 = *v24;
        v24 += 3;
        *(void *)&v18[8 * v23++] = v25;
      }
      while (v22 > v23);
      if (v21 == v20) {
LABEL_21:
      }
        uint64_t v26 = 0;
      else {
        uint64_t v26 = (uint64_t)(v20[1] - *v20) >> 2;
      }
      v27[0] = v18;
      v27[1] = v22;
      void v27[2] = v26;
      DspLib::clear(v27);
    }
  }
}

void DspLib::AudioMeter::Algorithm::uninitialize(DspLib::AudioMeter::Algorithm *this)
{
  uint64_t v3 = *((void *)this + 5);
  for (uint64_t i = *((void *)this + 6); i != v3; std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(i))
    i -= 192;
  *((void *)this + 6) = v3;
  *((void *)this + 9) = *((void *)this + 8);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 14);
  *((void *)this + 12) = *((void *)this + 11);
}

void DspLib::AudioMeter::Algorithm::reset(DspLib::AudioMeter::Algorithm *this)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  int v2 = (DspLib::RMS *)*((void *)this + 5);
  uint64_t v3 = (DspLib::RMS *)*((void *)this + 6);
  while (v2 != v3)
  {
    DspLib::RMS::reset(v2);
    int v2 = (DspLib::RMS *)((char *)v2 + 192);
  }
  unint64_t v4 = (uint64_t *)*((void *)this + 14);
  BOOL v5 = (uint64_t *)*((void *)this + 15);
  MEMORY[0x1F4188790](this);
  uint64_t v8 = (char *)v14 - v7;
  if (v6 >= 0x200) {
    size_t v9 = 512;
  }
  else {
    size_t v9 = v6;
  }
  bzero((char *)v14 - v7, v9);
  if (v5 == v4) {
    goto LABEL_12;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v4;
  do
  {
    uint64_t v12 = *v11;
    v11 += 3;
    *(void *)&v8[8 * v10++] = v12;
  }
  while (0xAAAAAAAAAAAAAAABLL * (v5 - v4) > v10);
  if (v5 == v4) {
LABEL_12:
  }
    uint64_t v13 = 0;
  else {
    uint64_t v13 = (v4[1] - *v4) >> 2;
  }
  v14[0] = v8;
  v14[1] = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
  void v14[2] = v13;
  DspLib::clear(v14);
  DspLib::clear(*((float **)this + 8), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 2);
  DspLib::clear(*((float **)this + 11), (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 2);
}

void DspLib::AudioMeter::Algorithm::status(void *a1, float *a2, vDSP_Length __N)
{
  DspLib::clear(a2, __N);
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  if (v6 != v7)
  {
    unsigned int v8 = 16;
    do
    {
      *(unsigned char *)(v6 + 188) = 1;
      a2[v8 - 16] = DspLib::amp2dBSafe(v5, sqrtf(fabsf(*(float *)(v6 + 184))), 0.000001);
      a2[v8] = DspLib::amp2dBSafe(v9, *(float *)(a1[8] + 4 * (v8 - 16)), 0.000001);
      v6 += 192;
      ++v8;
    }
    while (v6 != v7);
  }
}

void DspLib::AudioMeter::Algorithm::analyze(double *a1, uint64_t *a2)
{
  v17[1] = *(double **)MEMORY[0x1E4F143B8];
  v17[0] = a1;
  unint64_t v2 = a2[2];
  if (v2)
  {
    if (v2 >= 0x201)
    {
      for (unint64_t i = 0; i < v2; i += v5)
      {
        if (v2 - i >= 0x200) {
          uint64_t v5 = 512;
        }
        else {
          uint64_t v5 = v2 - i;
        }
        MEMORY[0x1F4188790](a1);
        unsigned int v8 = (char *)&v14[-1] - v7;
        if (v6 >= 0x200) {
          size_t v9 = 512;
        }
        else {
          size_t v9 = v6;
        }
        bzero((char *)&v14[-1] - v7, v9);
        unint64_t v10 = a2[1];
        if (v10)
        {
          uint64_t v11 = 0;
          uint64_t v12 = *a2;
          do
          {
            *(void *)&v8[8 * v11] = *(void *)(v12 + 8 * v11) + 4 * i;
            ++v11;
          }
          while (v10 > v11);
        }
        v14[0] = v8;
        v14[1] = v10;
        void v14[2] = v5;
        DspLib::AudioMeter::Algorithm::analyze(DspLib::MultiSpan<float const>)::$_0::operator()(v17, v14);
      }
    }
    else
    {
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a2[2];
      DspLib::AudioMeter::Algorithm::analyze(DspLib::MultiSpan<float const>)::$_0::operator()(v17, &v15);
    }
  }
}

void DspLib::AudioMeter::Algorithm::analyze(DspLib::MultiSpan<float const>)::$_0::operator()(double **a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a2[2];
  float v5 = **a1;
  float v6 = expf(-1.0 / (float)((float)(*((float *)*a1 + 4) * (float)(v5 / (float)v4)) / 1000.0));
  unint64_t v7 = 64;
  if (v4 > 0x40) {
    unint64_t v7 = v4;
  }
  if (a2[1])
  {
    float v8 = v6;
    uint64_t v9 = 0;
    unsigned int v10 = 1;
    vDSP_Length v11 = *((unsigned int *)v3 + 34) / v7;
    do
    {
      float v12 = DspLib::maxMagnitude(*(const float **)(*a2 + 8 * v9), a2[2]);
      std::vector<float>::resize((uint64_t)(v3 + 11), v4);
      uint64_t v13 = *((void *)v3 + 5) + 192 * v9;
      uint64_t v14 = *(void *)(*a2 + 8 * v9);
      long long v15 = (const float *)*((void *)v3 + 11);
      vDSP_Length v16 = (uint64_t)(*((void *)v3 + 12) - (void)v15) >> 2;
      uint64_t v25 = a2[2];
      uint64_t v26 = v14;
      *(void *)&long long v24 = &v26;
      *((void *)&v24 + 1) = 1;
      DspLib::RMS::process(v13, &v24, v15, v16);
      uint64_t v17 = *((void *)v3 + 14) + 24 * v9;
      float v18 = *(float **)v17;
      uint64_t v19 = *(void *)(v17 + 8) - 4;
      if (v19 != *(void *)v17)
      {
        memmove(v18 + 1, v18, v19 - *(void *)v17);
        float v18 = *(float **)(*((void *)v3 + 14) + 24 * v9);
      }
      *float v18 = v12;
      float v20 = DspLib::maxv(v18, v11);
      uint64_t v21 = *((void *)v3 + 8);
      float v22 = *(float *)(v21 + 4 * v9);
      if (v20 < v22) {
        float v20 = v8 * v22;
      }
      *(float *)(v21 + 4 * v9) = v20;
      uint64_t v9 = v10;
    }
    while (a2[1] > (unint64_t)v10++);
  }
}

void DspLib::AudioMeter::Algorithm::analyze(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  v3[0] = (uint64_t)&v4;
  v3[1] = 1;
  void v3[2] = a3;
  DspLib::AudioMeter::Algorithm::analyze(a1, v3);
}

void std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(uint64_t a1)
{
  float v5 = (void **)(a1 + 160);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
}

uint64_t std::vector<DspLib::RMS>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 6) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 192 * a2;
      do
      {
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 176) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 44) = 1137180672;
        *(void *)(v7 + 160) = 0;
        *(void *)(v7 + 168) = 0;
        *(void *)(v7 + 176) = 0;
        *(_DWORD *)(v7 + 80) = 0;
        *(_DWORD *)(v7 + 136) = 0;
        *(_OWORD *)(v7 + 120) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_DWORD *)(v7 + 184) = 730643660;
        v7 += 192;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 6);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x155555555555555) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 6);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x155555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    void v16[4] = result;
    if (v11) {
      float v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::RMS>>(result, v11);
    }
    else {
      float v12 = 0;
    }
    uint64_t v14 = &v12[192 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[192 * v11];
    long long v15 = &v14[192 * a2];
    do
    {
      *((_OWORD *)v14 + 10) = 0uLL;
      *((_OWORD *)v14 + 11) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 11) = 1137180672;
      *((void *)v14 + 20) = 0;
      *((void *)v14 + 21) = 0;
      *((void *)v14 + 22) = 0;
      *((_DWORD *)v14 + 20) = 0;
      *((_DWORD *)v14 + 34) = 0;
      *(_OWORD *)(v14 + 120) = 0uLL;
      *(_OWORD *)(v14 + 104) = 0uLL;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *((_DWORD *)v14 + 46) = 730643660;
      v14 += 192;
    }
    while (v14 != v15);
    unsigned int v16[2] = v15;
    std::vector<DspLib::RMS>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<DspLib::RMS>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1BB29C7C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::RMS>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::RMS>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 192;
    v4 -= 12;
    std::construct_at[abi:ne180100]<DspLib::RMS,DspLib::RMS,DspLib::RMS*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::RMS>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a2);
}

__n128 std::construct_at[abi:ne180100]<DspLib::RMS,DspLib::RMS,DspLib::RMS*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  uint64_t v4 = *((void *)a2 + 9);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  long long v5 = *(long long *)((char *)a2 + 136);
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *(_OWORD *)(a1 + 136) = v5;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  __n128 result = (__n128)a2[10];
  *(__n128 *)(a1 + 160) = result;
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  LODWORD(v4) = *((_DWORD *)a2 + 46);
  *(unsigned char *)(a1 + 188) = *((unsigned char *)a2 + 188);
  *(_DWORD *)(a1 + 184) = v4;
  return result;
}

uint64_t std::__split_buffer<DspLib::RMS>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(i - 192);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

float DspLib::elapsedTimeInMilliseconds(DspLib *this, unint64_t *a2)
{
  uint64_t v3 = mach_absolute_time();
  uint64_t v4 = *(void *)this;
  *(void *)this = v3;
  unsigned int v5 = dword_1E9F7DE44;
  if (!dword_1E9F7DE44)
  {
    mach_timebase_info((mach_timebase_info_t)&DspLib::elapsedTimeInMilliseconds(unsigned long long &)::timeBaseInfo);
    unsigned int v5 = dword_1E9F7DE44;
  }
  return (float)((float)((float)(v3 - v4)
                       * (float)DspLib::elapsedTimeInMilliseconds(unsigned long long &)::timeBaseInfo)
               / (float)v5)
       * 0.000001;
}

void DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this)
{
  *((unsigned char *)this + 32) = 0;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      unsigned int v5 = (void **)(v2 - 24);
      std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v5);
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  *((void *)this + 2) = v3;
}

uint64_t DspLib::PeakPowerGuard::readPresets(const __CFDictionary *a1, uint64_t *a2)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"presets");
  if (!Value) {
    return 1;
  }
  CFArrayRef v4 = Value;
  CFIndex Count = CFArrayGetCount(Value);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::resize(a2, Count);
  if (a2[1] == *a2 || 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > 8) {
    return 1;
  }
  CFIndex v8 = 0;
  unsigned int v35 = 0;
LABEL_9:
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v8);
  if (!ValueAtIndex) {
    return 1;
  }
  CFDictionaryRef v10 = ValueAtIndex;
  uint64_t v11 = *a2;
  float v12 = CFDictionaryGetValue(ValueAtIndex, @"name");
  *(void *)(v11 + 40 * v8) = v12;
  if (!v12) {
    return 1;
  }
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v10, @"samplerateInHz");
  if (!v13) {
    return 1;
  }
  float valuePtr = 0.0;
  CFNumberGetValue(v13, kCFNumberFloat32Type, &valuePtr);
  if (valuePtr < 1.0) {
    return 1;
  }
  *(float *)(v11 + 40 * v8 + 8) = valuePtr;
  CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(v10, @"FIRarray");
  if (!v14) {
    return 1;
  }
  CFArrayRef v15 = v14;
  uint64_t v16 = v11 + 40 * v8;
  uint64_t v17 = (uint64_t *)(v16 + 16);
  CFIndex v18 = CFArrayGetCount(v14);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::resize((uint64_t *)(v16 + 16), v18);
  uint64_t v19 = (void *)(v16 + 24);
  uint64_t result = 1;
  unint64_t v20 = *(void *)(v16 + 24) - *(void *)(v16 + 16);
  if (v20 && v20 <= 0x800)
  {
    CFIndex v21 = 0;
    unsigned int v22 = 0;
    while (1)
    {
      CFDictionaryRef v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v21);
      if (!v23) {
        return 1;
      }
      CFDictionaryRef v24 = v23;
      uint64_t v25 = *v17;
      CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(v23, @"temperatureInDegreeCelcius");
      if (!v26) {
        return 1;
      }
      float valuePtr = 0.0;
      CFNumberGetValue(v26, kCFNumberFloat32Type, &valuePtr);
      if (valuePtr > 200.0 || valuePtr < -20.0) {
        return 1;
      }
      *(float *)(v25 + 32 * v21 + 24) = valuePtr;
      CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v24, @"numberOfCoefficients");
      if (!v28) {
        return 1;
      }
      float valuePtr = 0.0;
      CFNumberGetValue(v28, kCFNumberSInt32Type, &valuePtr);
      uint64_t v29 = LODWORD(valuePtr);
      if (LODWORD(valuePtr) > 0x1000) {
        return 1;
      }
      double v30 = (void *)(v25 + 32 * v21);
      std::vector<float>::resize((uint64_t)v30, LODWORD(valuePtr));
      CFArrayRef v31 = (const __CFArray *)CFDictionaryGetValue(v24, @"FIRcoefficients");
      if (!v31) {
        return 1;
      }
      if (v29)
      {
        CFArrayRef v32 = v31;
        for (CFIndex i = 0; i != v29; *(float *)(*v30 + 4 * i++) = valuePtr)
        {
          CFNumberRef v34 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, i);
          if (!v34) {
            return 1;
          }
          float valuePtr = 0.0;
          CFNumberGetValue(v34, kCFNumberFloat32Type, &valuePtr);
        }
      }
      CFIndex v21 = ++v22;
      if (v22 >= (unint64_t)((*v19 - *v17) >> 5))
      {
        uint64_t result = 0;
        CFIndex v8 = ++v35;
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v35) {
          goto LABEL_9;
        }
        return result;
      }
    }
  }
  return result;
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 40;
        uint64_t v9 = (void **)(v3 - 24);
        std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v9);
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::setCoeffSet(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this, const __CFDictionary *a2)
{
  DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(this);
  *((unsigned char *)this + 32) = 1;
  if (!a2)
  {
    uint64_t v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuardAdmittanceFilterCoeffSet.cpp");
    int v12 = 147;
LABEL_14:
    printf("DSP Sound assertion in %s at line %d\n", v11, v12);
    ++DspLibDebug::mAssertCounter;
    DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::cleanUp(this);
    return *((unsigned __int8 *)this + 32);
  }
  CFRetain(a2);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v13, a2);
  CFDictionaryRef v4 = (const __CFDictionary *)*((void *)this + 5);
  CFDictionaryRef v5 = v13;
  *((void *)this + 5) = v13;
  CFDictionaryRef v13 = v4;
  if (v4)
  {
    CFRelease(v4);
    CFDictionaryRef v5 = (const __CFDictionary *)*((void *)this + 5);
  }
  CFArrayRef Value = CFDictionaryGetValue(v5, @"name");
  uint64_t v7 = Value;
  if (Value) {
    CFRetain(Value);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v13, v7);
  CFDictionaryRef v8 = *(const __CFDictionary **)this;
  CFDictionaryRef v9 = v13;
  *(void *)this = v13;
  CFDictionaryRef v13 = v8;
  if (v8)
  {
    CFRelease(v8);
    CFDictionaryRef v9 = *(const __CFDictionary **)this;
  }
  if (!v9)
  {
    uint64_t v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuardAdmittanceFilterCoeffSet.cpp");
    int v12 = 150;
    goto LABEL_14;
  }
  if (DspLib::PeakPowerGuard::readPresets(*((const __CFDictionary **)this + 5), (uint64_t *)this + 1))
  {
    uint64_t v11 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/PeakPowerGuard/dsp/DspLibPeakPowerGuardAdmittanceFilterCoeffSet.cpp");
    int v12 = 151;
    goto LABEL_14;
  }
  return *((unsigned __int8 *)this + 32);
}

uint64_t DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::filterCoefficientsForTemperature(DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet *this, float a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 40 * *((unsigned int *)this + 12) + 16);
  uint64_t v3 = *(void *)(*((void *)this + 1) + 40 * *((unsigned int *)this + 12) + 24);
  uint64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    unint64_t v6 = v4 >> 5;
    uint64_t v7 = (float *)(v2 + 24);
    unsigned int v8 = 1;
    float v9 = *(float *)"(knN";
    do
    {
      float v10 = *v7;
      v7 += 8;
      float v11 = vabds_f32(v10, a2);
      if (v11 >= v9) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = v8 - 1;
      }
      if (v11 < v9) {
        float v9 = v11;
      }
    }
    while (v6 > v8++);
  }
  return v2 + 32 * v5;
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    CFArrayRef v15 = v12;
    uint64_t v16 = &v12[40 * v8];
    CFIndex v18 = &v12[40 * v11];
    size_t v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::~__split_buffer(&v15);
  }
}

void sub_1BB29D1E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 8);
      *(void *)(v7 - 40) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 8) = *(void *)(a3 + 32);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 16);
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 40;
  }
}

void **std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::Preset>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v4 = (void **)(i - 24);
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          uint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__append(a1, v5);
  }
}

void std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = v13;
    CFArrayRef v15 = &v13[32 * v10];
    uint64_t v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    uint64_t v16 = &v15[32 * a2];
    std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1BB29D608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

DspLib::LoudspeakerSystemIDV1::Algorithm *DspLib::LoudspeakerSystemIDV1::Algorithm::Algorithm(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (uint64_t)&DspLib::LoudspeakerSystemIDV1::Parameters::kDefinition);
  *(void *)uint64_t v2 = &unk_1F14A6B08;
  *(void *)(v2 + 296) = 1;
  *(void *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 311) = 0;
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)(v2 + 320));
  *((_WORD *)this + 4644) = 0;
  *((unsigned char *)this + 9290) = 0;
  *((_DWORD *)this + 2323) = 1;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9296), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9376), 0, 0);
  *((_WORD *)this + 4728) = 0;
  *((unsigned char *)this + 9458) = 0;
  *((void *)this + 1183) = 0;
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::SingleResonanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9472));
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::LR2InductanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 10520));
  *((_DWORD *)this + 2884) = 0;
  *((void *)this + 1443) = 1;
  *((_OWORD *)this + 727) = 0u;
  *((_OWORD *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 11660) = 0u;
  *((void *)this + 1460) = 0;
  *((void *)this + 1462) = 0;
  *((void *)this + 1461) = 0;
  *(void *)((char *)this + 11701) = 0;
  *((_OWORD *)this + 722) = 0u;
  *((_OWORD *)this + 723) = 0u;
  *((_OWORD *)this + 724) = 0u;
  *((_OWORD *)this + 725) = 0u;
  *(_OWORD *)((char *)this + 11610) = 0u;
  *((unsigned char *)this + 11709) = 1;
  *((void *)this + 1464) = 0;
  DspLib::LoudspeakerSystemIDV1::TestToneGenerator::TestToneGenerator((uint64_t)this + 11720);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11848), 0, 0);
  if (++DspLib::LoudspeakerSystemIDV1::gInstanceCounter >= 2)
  {
    uint64_t v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 23);
    ++DspLibDebug::mAssertCounter;
  }
  return this;
}

void sub_1BB29DA1C(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;
  DspLib::ComplexVector::~ComplexVector(v7);
  DspLibBuffer::~DspLibBuffer(v6);
  uint64_t v9 = (void *)*((void *)v1 + 1460);
  if (v9)
  {
    *((void *)v1 + 1461) = v9;
    operator delete(v9);
  }
  DspLib::FIRDecimator::~FIRDecimator(v4);
  DspLib::LoudspeakerSystemIDV1::ModelFit::~ModelFit(v3);
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::~ImpedanceMeasurement(v2);
  DspLib::AlgorithmBaseNewParameters::~AlgorithmBaseNewParameters(v1);
  _Unwind_Resume(a1);
}

void DspLib::FIRDecimator::~FIRDecimator(DspLib::FIRDecimator *this)
{
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV1::ModelFit::~ModelFit(DspLib::LoudspeakerSystemIDV1::ModelFit *this)
{
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::~Algorithm(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  *(void *)this = &unk_1F14A6B08;
  --DspLib::LoudspeakerSystemIDV1::gInstanceCounter;
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11848));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760));
  uint64_t v2 = (void *)*((void *)this + 1460);
  if (v2)
  {
    *((void *)this + 1461) = v2;
    operator delete(v2);
  }
  uint64_t v6 = (void **)((char *)this + 11592);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = (void *)*((void *)this + 1444);
  if (v3)
  {
    *((void *)this + 1445) = v3;
    operator delete(v3);
  }
  DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::~LR2InductanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 10520));
  DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::~SingleResonanceModel((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9472));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9376));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9296));
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::~ImpedanceMeasurement((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320));
  *(void *)this = &unk_1F14A88D8;
  uint64_t v4 = (void *)*((void *)this + 34);
  if (v4)
  {
    *((void *)this + 35) = v4;
    operator delete(v4);
  }
  uint64_t v6 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *(void *)this = &unk_1F14A87D8;
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
}

{
  uint64_t vars8;

  DspLib::LoudspeakerSystemIDV1::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

uint64_t DspLib::LoudspeakerSystemIDV1::Algorithm::initialize(DspLib::LoudspeakerSystemIDV1::Algorithm *this, int a2, double a3)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  uint64_t v6 = v5;
  if (v5)
  {
    float v7 = a3 / 2000.0;
    float v8 = fmaxf(roundf(v7), 1.0);
    vDSP_Length v9 = (16 * v8) | 1;
    MEMORY[0x1F4188790](v5);
    uint64_t v11 = (char *)&v18[-1] - v10;
    v18[0] = &unk_1F14A6C50;
    v18[1] = DspLib::makeChebychevWindow;
    v18[3] = v18;
    DspLib::makeSincWindow((float *)((char *)&v18[-1] - v10), v9, v12, 0x10u, (uint64_t)v18, 0.5);
    std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](v18);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 1449, 2uLL);
    unint64_t v13 = (*(uint64_t (**)(DspLib::LoudspeakerSystemIDV1::Algorithm *))(*(void *)this + 216))(this);
    DspLib::FIRDecimator::setSrcParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11544), (unint64_t)v8, v13);
    DspLib::FIRDecimator::setCoefficients((uint64_t)this + 11544, v11, v9);
    double v14 = v8;
    DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), *((double *)this + 2) / v14);
    DspLibBuffer::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760), 0x201uLL, 1u);
    unint64_t instruction_count = vp::utility::CPU_Profiler::get_instruction_count((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760));
    DspLibBuffer::setNumFrames((unint64_t *)this + 1470, instruction_count);
    DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11848), 0x200uLL);
    DspLib::LoudspeakerSystemIDV1::ModelFit::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9288), *((double *)this + 2) / v14);
    DspLib::LoudspeakerSystemIDV1::PilotTone::initialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11624), *((double *)this + 2));
    DspLib::LoudspeakerSystemIDV1::TestToneGenerator::initialize((uint64_t)this + 11720, *((double *)this + 2));
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::LoudspeakerSystemIDV1::Algorithm *, char *, void))(*(void *)this + 264))(this, (char *)this + 264, 0);
    (*(void (**)(DspLib::LoudspeakerSystemIDV1::Algorithm *))(*(void *)this + 136))(this);
  }
  return v6;
}

void sub_1BB29DF50(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100]((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t DspLib::LoudspeakerSystemIDV1::Algorithm::uninitialize(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 1449, 0);
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::uninitialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320));
  DspLibBuffer::uninitialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11848), 0);
  DspLib::LoudspeakerSystemIDV1::ModelFit::uninitialize((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9288));
  vp::vx::io::Object::Log_Context::get_user_info((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11624));

  return vp::vx::io::Object::Log_Context::get_user_info((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11720));
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::reset(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  uint64_t v1 = this;
  *((void *)this + 38) = 0;
  DspLib::FIRDecimator::reset((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11544));
  DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::reset((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)v1 + 320));
  DspLib::LoudspeakerSystemIDV1::ModelFit::reset((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)v1 + 9288));
  DspLib::LoudspeakerSystemIDV1::PilotTone::reset((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)v1 + 11624));
  DspLib::LoudspeakerSystemIDV1::TestToneGenerator::reset((uint64_t)v1 + 11720);
  *((_DWORD *)v1 + 2884) = 0;
  DspLib::ComplexVector::operator=((char *)v1 + 11848, 0.0);
  uint64_t v1 = (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)v1 + 11760);
  uint64_t v2 = (float *)DspLibBuffer::channel(v1, 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);

  DspLib::clear(v2, cycle_count);
}

void DspLib::FIRDecimator::reset(DspLib::FIRDecimator *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7);
  while (v2 != v3)
  {
    uint64_t v4 = *(float **)v2;
    uint64_t v5 = *(void *)(v2 + 8);
    v2 += 24;
    DspLib::clear(v4, (v5 - (uint64_t)v4) >> 2);
  }
  *((void *)this + 9) = *(void *)this - 1;
}

uint64_t DspLib::LoudspeakerSystemIDV1::Algorithm::numStatus(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  return 2665;
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::setParameters(DspLib::LoudspeakerSystemIDV1::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((unsigned char *)this + 8))
  {
    DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::setParameters((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)&DspLib::LoudspeakerSystemIDV1::gNonVolatileRecord, (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    *((unsigned char *)this + 313) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0) >= 0.5;
    LODWORD(v4) = vcvtad_u64_f64(*((double *)this + 2)* DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x300000003));
    *((void *)this + 37) = v4;
    DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    DspLib::LoudspeakerSystemIDV1::ModelFit::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9288), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    DspLib::LoudspeakerSystemIDV1::PilotTone::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11624), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    DspLib::LoudspeakerSystemIDV1::TestToneGenerator::setParameters((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11720), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 264));
    *((unsigned char *)this + 312) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 2) >= 0.5;
    *((unsigned char *)this + 314) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000004) >= 0.5;
  }
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::setParameters(DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *this, const DspLib::AlgorithmParametersInstance *a2)
{
  *((float *)this + 23) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 1) * 1000.0;
  *((float *)this + 24) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000001) * 1000.0;
  *((float *)this + 1) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000004);
  *((float *)this + 22) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0xB00000006);
  if (!*((unsigned char *)this + 12))
  {
    int v4 = *((_DWORD *)this + 1);
    *(_DWORD *)this = v4;
    *((_DWORD *)this + 2) = v4;
  }
  float v5 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x200000007);
  float v6 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x300000007) * 0.001;
  DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x400000007);
  DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x500000007);
  *((float *)this + 11) = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(v5, v6);
  *((_DWORD *)this + 12) = v7;
  *((_DWORD *)this + 13) = v8;
  if (!*((unsigned char *)this + 56))
  {
    *((void *)this + 4) = *(void *)((char *)this + 44);
    *((_DWORD *)this + 10) = *((_DWORD *)this + 13);
  }
  float v9 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 6);
  float v10 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x100000006);
  float v11 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0x200000006);
  *((float *)this + 18) = v9;
  *((float *)this + 19) = v10;
  *((float *)this + 20) = v11;
  float v12 = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(v9, v10, v11);
  if (!*((unsigned char *)this + 84))
  {
    *((float *)this + 15) = v12;
    *((_DWORD *)this + 16) = v13;
    *((_DWORD *)this + 17) = v14;
  }
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::processDirect(DspLib::LoudspeakerSystemIDV1::Algorithm *this, DspLibBuffer *a2, DspLibBuffer *a3, DspLibBuffer *a4)
{
  _OWORD v47[2] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 313))
  {
    DspLibBuffer::operator=((uint64_t)a3, a2);
  }
  else
  {
    uint64_t cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
    if (cycle_count)
    {
      unint64_t v9 = cycle_count;
      if (*((unsigned char *)this + 24)) {
        DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 56));
      }
      DspLibBuffer::setNumFrames((unint64_t *)a3, v9);
      uint64_t v10 = DspLibBuffer::numChannels(a2);
      MEMORY[0x1F4188790](v10);
      int v13 = (float **)((char *)&v44[-1] - v12);
      if (v11 >= 0x200) {
        size_t v14 = 512;
      }
      else {
        size_t v14 = v11;
      }
      bzero((char *)&v44[-1] - v12, v14);
      DspLibBuffer::channelsPtr((float *)a2, v13);
      uint64_t v15 = DspLibBuffer::numChannels(a3);
      MEMORY[0x1F4188790](v15);
      uint64_t v18 = (float **)((char *)&v44[-1] - v17);
      if (v16 >= 0x200) {
        size_t v19 = 512;
      }
      else {
        size_t v19 = v16;
      }
      bzero((char *)&v44[-1] - v17, v19);
      uint64_t v20 = (uint64_t)DspLibBuffer::channelsPtr((float *)a3, v18);
      if (a2 != a3) {
        uint64_t v20 = DspLibBuffer::operator=((uint64_t)a3, a2);
      }
      if (*((unsigned char *)this + 314)) {
        DspLib::LoudspeakerSystemIDV1::PilotTone::process((uint64_t)this + 11624, *v18, v9);
      }
      if (*((unsigned char *)this + 312)) {
        DspLib::LoudspeakerSystemIDV1::TestToneGenerator::process((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11720), *v18, v9);
      }
      if (a4)
      {
        MEMORY[0x1F4188790](v20);
        v47[0] = &v44[-v21 - 1];
        v47[1] = v47[0] + 4 * v21;
        uint64_t v23 = v22 / *((void *)this + 1443) + 1;
        v45[0] = v47;
        v45[1] = 2;
        unint64_t v46 = v23;
        uint64_t v24 = DspLibBuffer::numChannels(a4);
        MEMORY[0x1F4188790](v24);
        float v27 = (char *)&v44[-1] - v26;
        if (v25 >= 0x200) {
          size_t v28 = 512;
        }
        else {
          size_t v28 = v25;
        }
        bzero((char *)&v44[-1] - v26, v28);
        if (DspLibBuffer::numChannels(a4))
        {
          unint64_t v29 = 0;
          do
          {
            *(void *)&v27[8 * v29] = DspLibBuffer::channel(a4, v29);
            ++v29;
          }
          while (v29 < DspLibBuffer::numChannels(a4));
        }
        uint64_t v30 = DspLibBuffer::numChannels(a4);
        uint64_t v31 = vp::utility::CPU_Profiler::get_cycle_count(a4);
        v44[0] = v27;
        v44[1] = v30;
        _OWORD v44[2] = v31;
        DspLib::FIRDecimator::process((void *)this + 1443, v44, v45);
        if (*((unsigned char *)this + 11708)
          || DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000004) < 0.5)
        {
          BOOL v32 = 0;
        }
        else
        {
          float v41 = *(float *)DspLibBuffer::operator[]((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760), *((unsigned int *)this + 2912));
          BOOL v32 = v41 > DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x200000004);
        }
        *((unsigned char *)this + 352) = v32;
        DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::process((uint64_t)this + 320, *(float **)(v45[0] + 8), *(float **)v45[0], v46);
        unint64_t v33 = *((void *)this + 37);
        unint64_t v34 = *((void *)this + 38) + v9;
        BOOL v35 = v34 >= v33;
        if (v34 >= v33) {
          unint64_t v34 = 0;
        }
        *((void *)this + 38) = v34;
        if (v35)
        {
          DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::impedance((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), (DSPSplitComplex *)((char *)this + 11848));
          DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::coherence((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760));
          *((_DWORD *)this + 2323) = 1;
        }
        else
        {
          float v36 = *((float *)this + 90);
          uint64_t v37 = (const DspLib::ComplexSpan *)DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::voltagePowerSpectrum((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 320));
          if (*((unsigned char *)this + 352))
          {
            float v38 = *((float *)this + 91);
            BOOL v39 = v38 >= DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x900000004);
          }
          else
          {
            BOOL v39 = 1;
          }
          DspLib::LoudspeakerSystemIDV1::ModelFit::process((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9288), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11848), (DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 11760), v36, v37, v39);
        }
        unsigned int v42 = *((_DWORD *)this + 2884) + 1;
        *((_DWORD *)this + 2884) = v42;
        if (v42 >= 0x1F5)
        {
          DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::pageInMatrixFunctions((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9472));
          *((_DWORD *)this + 2884) = 0;
        }
        DspLib::elapsedTimeInMilliseconds((DspLib *)&unk_1E9F7AD78, v40);
      }
      if (*((unsigned char *)this + 24)) {
        DspLib::CPUMeasure::stop((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 56), v9, *((double *)this + 2));
      }
    }
  }
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::processBlock(DspLib::LoudspeakerSystemIDV1::Algorithm *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v9, *(float *const **)a2, *(void *)(a2 + 16), *(_DWORD *)(a2 + 8));
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v8, *(float *const **)a3, *(void *)(a3 + 16), *(_DWORD *)(a3 + 8));
  if (*(unsigned char *)(a4 + 24))
  {
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)v7, *(float *const **)a4, *(void *)(a4 + 16), *(_DWORD *)(a4 + 8));
    DspLib::LoudspeakerSystemIDV1::Algorithm::processDirect(a1, (DspLibBuffer *)v9, (DspLibBuffer *)v8, (DspLibBuffer *)v7);
    DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v7);
  }
  else
  {
    DspLib::LoudspeakerSystemIDV1::Algorithm::processDirect(a1, (DspLibBuffer *)v9, (DspLibBuffer *)v8, 0);
  }
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v8);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v9);
}

void sub_1BB29E8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)va);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v13 - 120));
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  DspLib::clear(a2, __N);
  if (*(unsigned char *)(a1 + 24))
  {
    DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::status(a1 + 320, (uint64_t)a2);
    DspLib::FFT::amplitude(a1 + 11848, a2 + 100, 0x201uLL);
    long long v6 = *(_OWORD *)(a1 + 11848);
    uint64_t v7 = *(void *)(a1 + 11864);
    DspLib::FFT::phase((uint64_t)&v6, a2 + 613, 0x201uLL);
    float v5 = (void *)DspLibBuffer::channel((DspLibBuffer *)(a1 + 11760), 0);
    DspLib::copy(v5, 513, a2 + 1126);
    DspLib::LoudspeakerSystemIDV1::ModelFit::status(a1 + 9288);
    DspLib::LoudspeakerSystemIDV1::PilotTone::status(a1 + 11624, (uint64_t)a2);
    DspLib::LoudspeakerSystemIDV1::TestToneGenerator::status(a1 + 11720, (uint64_t)a2);
  }
}

void DspLib::LoudspeakerSystemIDV1::Algorithm::singleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::Algorithm *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 1;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 20) = 0;
  uint64_t v4 = a2 + 20;
  *(void *)(a2 + 28) = 0;
  *(void *)(a2 + 33) = 0;
  uint64_t v5 = a2 + 44;
  for (uint64_t i = 44; i != 116; i += 24)
  {
    uint64_t v7 = (void *)(a2 + i);
    *uint64_t v7 = 0;
    v7[1] = 0;
    *(void *)((char *)v7 + 13) = 0;
  }
  *(void *)(a2 + 120) = 0;
  int v8 = *((_DWORD *)this + 93);
  *(_DWORD *)(a2 + 4) = *((_DWORD *)this + 90);
  *(_DWORD *)(a2 + 8) = v8;
  float v9 = *((float *)this + 91);
  *(float *)(a2 + 12) = v9;
  char v10 = *((unsigned char *)this + 352);
  if (v10) {
    char v10 = v9 < DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x900000004);
  }
  *(unsigned char *)(a2 + 16) = v10;
  *(void *)uint64_t v4 = *((void *)this + 1434);
  *(_DWORD *)(v4 + 8) = *((_DWORD *)this + 2870);
  float v11 = DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 10520));
  float v12 = *((float *)this + 2734);
  *(float *)(a2 + 32) = v11;
  *(float *)(a2 + 36) = v12;
  *(unsigned char *)(a2 + 40) = v12 < DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x1400000006);
  *(void *)uint64_t v5 = *((void *)this + 1304);
  *(_DWORD *)(v5 + 8) = *((_DWORD *)this + 2610);
  float v13 = DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::coherenceMin((DspLib::LoudspeakerSystemIDV1::Algorithm *)((char *)this + 9472));
  float v14 = *((float *)this + 2473);
  *(float *)(a2 + 56) = v13;
  *(float *)(a2 + 60) = v14;
  *(unsigned char *)(a2 + 64) = v14 < DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x1800000007);
  *(unsigned char *)a2 = byte_1E9F7ADCC;
}

float DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::coherenceMin(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  uint64_t v1 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680);
  uint64_t v2 = (const float *)DspLibBuffer::channel((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680), 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);

  return DspLib::minv(v2, cycle_count);
}

float DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::coherenceMin(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  uint64_t v1 = (DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688);
  uint64_t v2 = (const float *)DspLibBuffer::channel((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688), 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(v1);

  return DspLib::minv(v2, cycle_count);
}

float DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::takeRdcProcessTimeStamp(DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *this, unint64_t *a2)
{
  return DspLib::elapsedTimeInMilliseconds((DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *)((char *)this + 24), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeRdc(uint64_t this, float a2, float a3)
{
  *(float *)this = a2;
  *(float *)(this + 8) = a3;
  *(unsigned char *)(this + 12) = 1;
  return this;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readRdc(DspLib::LoudspeakerSystemIDV1::NonVolatileMemory *this, float *a2, float *a3, BOOL *a4)
{
  uint64_t v13 = *((void *)this + 3);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v13, (unint64_t *)a2) >= *((float *)this + 23))
  {
    *((unsigned char *)this + 100) = 1;
    uint64_t v13 = *((void *)this + 2);
    float v11 = -DspLib::elapsedTimeInMilliseconds((DspLib *)&v13, v8);
    *a2 = *((float *)this + 1)
        + (float)(expf(v11 / *((float *)this + 24)) * (float)(*(float *)this - *((float *)this + 1)));
    float v12 = expf(v11 / *((float *)this + 24));
    BOOL v10 = 0;
    float v9 = *((float *)this + 1) + (float)(v12 * (float)(*((float *)this + 2) - *((float *)this + 1)));
  }
  else
  {
    *((unsigned char *)this + 100) = 0;
    *a2 = *(float *)this;
    float v9 = *((float *)this + 2);
    BOOL v10 = 1;
  }
  *a3 = v9;
  *a4 = v10;
}

uint64_t DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeSingleResonanceModel(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 2);
  *(void *)(result + 32) = v2;
  *(unsigned char *)(result + 56) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readSingleResonanceModel(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v12 = *(void *)(a1 + 24);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v12, (unint64_t *)a2) >= *(float *)(a1 + 92))
  {
    uint64_t v12 = *(void *)(a1 + 16);
    float v9 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v12, v6);
    float v10 = expf((float)-v9 / *(float *)(a1 + 96));
    for (uint64_t i = 0; i != 12; i += 4)
      *(float *)(a2 + i) = *(float *)(a1 + i + 44)
                         + (float)(v10 * (float)(*(float *)(a1 + i + 32) - *(float *)(a1 + i + 44)));
    char v8 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 40);
    *(void *)a2 = v7;
    char v8 = 1;
  }
  *a3 = v8;
}

uint64_t DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::writeInductanceModel(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 68) = *((_DWORD *)a2 + 2);
  *(void *)(result + 60) = v2;
  *(unsigned char *)(result + 84) = 1;
  return result;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::readInductanceModel(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v10 = *(void *)(a1 + 24);
  if (DspLib::elapsedTimeInMilliseconds((DspLib *)&v10, (unint64_t *)a2) >= *(float *)(a1 + 92))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    float v9 = DspLib::elapsedTimeInMilliseconds((DspLib *)&v10, v6);
    DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::decayInductanceModel(a1, (float *)(a1 + 72), a1 + 60, a2, v9);
    char v8 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 60);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 68);
    *(void *)a2 = v7;
    char v8 = 1;
  }
  *a3 = v8;
}

void DspLib::LoudspeakerSystemIDV1::NonVolatileMemory::decayInductanceModel(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float a5)
{
  float v8 = expf((float)-a5 / *(float *)(a1 + 96));
  LODWORD(v9) = *(_DWORD *)a3;
  float v10 = DspLib::LoudspeakerSystemIDV1::coeffsToTsParameters(v9, *(float *)(a3 + 4));
  *(float *)a4 = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(*a2 + (float)(v8 * (float)(v10 - *a2)), a2[1] + (float)(v8 * (float)(v11 - a2[1])), a2[2] + (float)(v8 * (float)(v12 - a2[2])));
  *(_DWORD *)(a4 + 4) = v13;
  *(_DWORD *)(a4 + 8) = v14;
}

double DspLib::LoudspeakerSystemIDV1::Algorithm::latencySamples(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  return 0.0;
}

double DspLib::LoudspeakerSystemIDV1::Algorithm::tailTimeSamples(DspLib::LoudspeakerSystemIDV1::Algorithm *this)
{
  return (*(double (**)(DspLib::LoudspeakerSystemIDV1::Algorithm *))(*(void *)this + 64))(this)
       + (double)vcvtpd_u64_f64(*((double *)this + 1454) * 0.2);
}

DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  *(unsigned char *)this = 0;
  *(void *)((char *)this + 36) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *(_DWORD *)((char *)this + 31) = 0;
  *((_DWORD *)this + 11) = 1120403456;
  *((unsigned char *)this + 48) = 0;
  *((_DWORD *)this + 13) = 0;
  *((unsigned char *)this + 56) = 0;
  *(void *)((char *)this + 60) = 0;
  *((_DWORD *)this + 17) = 1065353216;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 80) = 0;
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 8280, (char *)this + 84, 1024, 512, 0);
  DspLib::FFT::BufferedForwardSTFT::BufferedForwardSTFT((char *)this + 8384, (char *)this + 4180, 1024, 512, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8488), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8568), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8648), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8728), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8808), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8888), 0, 0);
  return this;
}

void sub_1BB29F0B8(_Unwind_Exception *a1)
{
  DspLib::ComplexVector::~ComplexVector(v7);
  DspLib::ComplexVector::~ComplexVector(v6);
  DspLib::ComplexVector::~ComplexVector(v5);
  DspLib::ComplexVector::~ComplexVector(v4);
  DspLib::ComplexVector::~ComplexVector(v3);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v2);
  DspLib::FFT::BufferedForwardSTFT::~BufferedForwardSTFT(v1);
  _Unwind_Resume(a1);
}

void sub_1BB29F11C()
{
}

void sub_1BB29F124()
{
}

DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::SingleResonanceModel(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  *(_OWORD *)((char *)this + 26) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320), 0, 0);
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((_DWORD *)this + 106) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 776), 0, 0);
  *((_WORD *)this + 436) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 880), 0, 0);
  *((_DWORD *)this + 260) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 60) = 0u;
  return this;
}

void sub_1BB29F274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  uint64_t v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BB29F2F8()
{
}

void sub_1BB29F300()
{
}

void sub_1BB29F308()
{
}

void sub_1BB29F310()
{
}

void sub_1BB29F318()
{
}

DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::LR2InductanceModel(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  *(_OWORD *)((char *)this + 30) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 144), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320), 0, 0);
  *((_DWORD *)this + 100) = 0;
  *((_WORD *)this + 202) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 424), 0, 0);
  DspLib::ComplexMatrix::ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504), 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600), 0, 0);
  DspLibBuffer::DspLibBuffer((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 768), 0, 0);
  *((_DWORD *)this + 216) = 0;
  *((_OWORD *)this + 53) = 0u;
  DspLib::ComplexVector::ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 872), 0, 0);
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  return this;
}

void sub_1BB29F45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  DspLib::ComplexVector::~ComplexVector(v16);
  DspLibBuffer::~DspLibBuffer(v19);
  DspLib::ComplexVector::~ComplexVector(v18);
  DspLib::ComplexMatrix::~ComplexMatrix(v17);
  DspLib::ComplexVector::~ComplexVector(v15);
  DspLib::ComplexVector::~ComplexVector(v14);
  DspLib::ComplexMatrix::~ComplexMatrix(v13);
  DspLib::ComplexVector::~ComplexVector(v12);
  DspLib::ComplexMatrix::~ComplexMatrix(v11);
  uint64_t v20 = *(void **)(v10 + 8);
  if (v20)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1BB29F4E0()
{
}

void sub_1BB29F4E8()
{
}

void sub_1BB29F4F0()
{
}

void sub_1BB29F4F8()
{
}

void sub_1BB29F500()
{
}

void DspLib::LoudspeakerSystemIDV1::SingleResonanceModel::~SingleResonanceModel(DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *this)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 880));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 776));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 688));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 608));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 512));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 432));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 320));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 224));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 144));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::SingleResonanceModel *)((char *)this + 48));
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV1::LR2InductanceModel::~LR2InductanceModel(DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *this)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 872));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 768));
  DspLibBuffer::~DspLibBuffer((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 680));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 600));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 504));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 424));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 320));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 224));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 144));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)((char *)this + 48));
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement::~ImpedanceMeasurement(DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *this)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8888));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8808));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8728));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8648));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8568));
  DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ImpedanceMeasurement *)((char *)this + 8488));
  uint64_t v2 = (void *)*((void *)this + 1053);
  if (v2)
  {
    *((void *)this + 1054) = v2;
    operator delete(v2);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 8384);
  uint64_t v3 = (void *)*((void *)this + 1040);
  if (v3)
  {
    *((void *)this + 1041) = v3;
    operator delete(v3);
  }
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)this + 8280);
}

void std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::~__func()
{
}

void *std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14A6C50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14A6C50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, a2[1]);
}

uint64_t std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(std::span<float,18446744073709551615ul>),std::allocator<void (*)(std::span<float,18446744073709551615ul>)>,void ()(std::span<float,18446744073709551615ul>)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float32x2_t *DspLib::LoudspeakerManagerV2::modelPolynomial@<X0>(float32x2_t *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  float v5 = result[8].f32[0];
  BOOL v7 = v5 != 0.0 && *a4 != 0;
  switch(a2)
  {
    case 0:
      if (result[6].i8[0])
      {
        if (result[11].i8[4])
        {
          if (result[17].i8[0])
          {
            if (v7)
            {
              double v8 = result->f32[1];
              float v9 = result[2].f32[1];
              float v10 = result[3].f32[0];
              float v11 = result[3].f32[1];
              float v12 = result[6].f32[1];
              float v13 = result[7].f32[0];
              float v14 = result[7].f32[1];
              float v15 = result[8].f32[1];
              float v16 = result[12].f32[1];
              float v17 = result[13].f32[0];
              float v18 = result[14].f32[0];
              double v19 = v8 * v9;
              double v20 = v19 * v14;
              double v21 = v19 * v13;
              double v22 = v8 * v14;
              *(double *)(a5 + 48) = v21 * v17
                                   + v20 * v16
                                   + v22 * v17
                                   + (float)((float)(v9 * v14) * v18)
                                   + (float)((float)(v9 * v15) * v17)
                                   + (float)((float)(v11 * v14) * v17);
              *(double *)(a5 + 56) = v20 * v17;
              double v23 = v19 * v12;
              double v24 = v21 * v16 + v20 + v23 * v17 + v22 * v16;
              double v25 = v8 * v13;
              double v26 = v24
                  + v25 * v17
                  + (float)((float)(v9 * v13) * v18)
                  + (float)((float)(v9 * v15) * v16)
                  + (float)((float)(v5 * v9) * v17)
                  + (float)((float)(v11 * v14) * v16)
                  + (float)((float)(v11 * v13) * v17);
              double v27 = v23 * v16 + v21 + v19 * v17 + v8 * v14 + v25 * v16;
              double v28 = v8 * v12;
              *(double *)(a5 + 32) = v27
                                   + v28 * v17
                                   + (float)((float)(v9 * v12) * v18)
                                   + (float)(v9 * v15)
                                   + (float)((float)(v5 * v9) * v16)
                                   + (float)(v11 * v14)
                                   + (float)((float)(v11 * v13) * v16)
                                   + (float)((float)(v11 * v12) * v17)
                                   + (float)((float)(v10 * v14) * v16)
                                   + (float)((float)(v10 * v13) * v17)
                                   + (float)(v13 * v18)
                                   + (float)(v15 * v16)
                                   + (float)(v5 * v17);
              *(double *)(a5 + 40) = v26 + (float)((float)(v10 * v14) * v17) + (float)(v14 * v18) + (float)(v15 * v17);
              *(double *)(a5 + 16) = v28
                                   + v19
                                   + v8 * v16
                                   + (float)(v11 * v12)
                                   + (float)(v11 * v16)
                                   + (float)(v10 * v13)
                                   + (float)((float)(v10 * v12) * v16)
                                   + (float)(v10 * v17)
                                   + v5
                                   + v18;
              *(double *)(a5 + 24) = v19 * v16
                                   + v23
                                   + v8 * v13
                                   + v28 * v16
                                   + v8 * v17
                                   + (float)(v5 * v9)
                                   + (float)(v9 * v18)
                                   + (float)(v11 * v13)
                                   + (float)((float)(v11 * v12) * v16)
                                   + (float)(v11 * v17)
                                   + (float)(v10 * v14)
                                   + (float)((float)(v10 * v13) * v16)
                                   + (float)((float)(v10 * v12) * v17)
                                   + (float)(v12 * v18)
                                   + v15
                                   + (float)(v5 * v16);
              *(double *)a5 = v10;
              *(double *)(a5 + 8) = v8 + v11 + (float)(v10 * v12) + (float)(v10 * v16);
              *(_OWORD *)(a5 + 120) = xmmword_1BB8725D0;
              *(double *)(a5 + 104) = (float)((float)((float)((float)(v9 * v13) * v17) + (float)((float)(v9 * v14) * v16))
                                            + (float)(v14 * v17));
              *(double *)(a5 + 112) = (float)((float)(v9 * v14) * v17);
              *(double *)(a5 + 88) = (float)((float)((float)(v14
                                                           + (float)((float)((float)((float)(v9 * v12) * v16)
                                                                           + (float)(v9 * v13))
                                                                   + (float)(v9 * v17)))
                                                   + (float)(v13 * v16))
                                           + (float)(v12 * v17));
              *(double *)(a5 + 96) = (float)((float)((float)((float)((float)((float)(v9 * v13) * v16) + (float)(v9 * v14))
                                                           + (float)((float)(v9 * v12) * v17))
                                                   + (float)(v14 * v16))
                                           + (float)(v13 * v17));
              *(double *)(a5 + 72) = (float)((float)(v9 + v12) + v16);
              *(double *)(a5 + 80) = (float)(v17
                                           + (float)((float)(v13 + (float)((float)(v9 * v16) + (float)(v9 * v12)))
                                                   + (float)(v12 * v16)));
              goto LABEL_57;
            }
            double v230 = result->f32[1];
            float v231 = result[2].f32[1];
            float v232 = result[3].f32[0];
            float v233 = result[3].f32[1];
            float v234 = result[7].f32[0];
            float v235 = result[7].f32[1];
            float v236 = result[8].f32[1];
            float v237 = result[12].f32[1];
            float v238 = result[13].f32[0];
            float v239 = result[14].f32[0];
            *(_OWORD *)(a5 + 56) = 0u;
            *(_OWORD *)(a5 + 72) = 0u;
            *(_OWORD *)(a5 + 88) = 0u;
            *(_OWORD *)(a5 + 104) = 0u;
            double v240 = v230 * v231;
            double v241 = v240 * v235;
            *(double *)(a5 + 48) = v241 * v238;
            double v242 = v240 * v238;
            double v243 = v230 * v235;
            *(double *)(a5 + 32) = v242
                                 + v241
                                 + v240 * v234 * v237
                                 + v243 * v237
                                 + v230 * v238 * v234
                                 + (float)((float)(v231 * v234) * v239)
                                 + (float)(v236 * (float)(v231 * v237))
                                 + (float)(v232 * (float)(v235 * v238))
                                 + (float)(v233 * (float)(v235 * v237))
                                 + (float)(v235 * v239)
                                 + (float)(v233 * (float)(v234 * v238))
                                 + (float)(v236 * v238);
            *(double *)(a5 + 40) = v242 * v234
                                 + v241 * v237
                                 + v243 * v238
                                 + (float)((float)(v231 * v235) * v239)
                                 + (float)(v236 * (float)(v231 * v238))
                                 + (float)(v233 * (float)(v235 * v238));
            double v244 = v230 * v234;
            *(double *)(a5 + 16) = v244
                                 + v240
                                 + v230 * v237
                                 + (float)(v232 * v235)
                                 + (float)(v232 * v238)
                                 + (float)(v232 * (float)(v234 * v234))
                                 + (float)(v233 * v234)
                                 + (float)(v233 * v237)
                                 + v236
                                 + v239;
            *(double *)(a5 + 24) = v240 * v237
                                 + v240 * v234
                                 + v243
                                 + v230 * v238
                                 + v244 * v237
                                 + (float)(v231 * v236)
                                 + (float)(v231 * v239)
                                 + (float)(v232 * (float)(v235 * v237))
                                 + (float)(v233 * v235)
                                 + (float)(v232 * (float)(v234 * v238))
                                 + (float)(v233 * v238)
                                 + (float)(v233 * (float)(v234 * v237))
                                 + (float)(v234 * v239)
                                 + (float)(v236 * v237);
            *(double *)a5 = v232;
            *(double *)(a5 + 8) = v230 + (float)(v232 * v234) + (float)(v232 * v237) + v233;
            *(void *)(a5 + 120) = 0;
            *(void *)(a5 + 128) = 7;
            *(double *)(a5 + 96) = (float)((float)((float)(v234 * (float)(v231 * v238))
                                                 + (float)((float)(v231 * v235) * v237))
                                         + (float)(v235 * v238));
            *(double *)(a5 + 104) = (float)((float)(v231 * v235) * v238);
            *(double *)(a5 + 80) = (float)((float)(v238
                                                 + (float)(v235 + (float)((float)(v231 * v237) + (float)(v231 * v234))))
                                         + (float)(v234 * v237));
            *(double *)(a5 + 88) = (float)((float)((float)((float)((float)(v231 * v238) + (float)(v231 * v235))
                                                         + (float)((float)(v231 * v234) * v237))
                                                 + (float)(v235 * v237))
                                         + (float)(v238 * v234));
            *(double *)(a5 + 72) = (float)((float)(v231 + v234) + v237);
            *(void *)(a5 + 64) = 0x3FF0000000000000;
            uint64_t v39 = 6;
          }
          else
          {
            double v222 = result->f32[1];
            float v223 = result[2].f32[1];
            float v224 = result[3].f32[0];
            float v225 = result[3].f32[1];
            float v226 = result[7].f32[0];
            float v227 = result[7].f32[1];
            float v228 = result[8].f32[1];
            *(_OWORD *)(a5 + 40) = 0u;
            *(_OWORD *)(a5 + 56) = 0u;
            *(_OWORD *)(a5 + 72) = 0u;
            *(_OWORD *)(a5 + 88) = 0u;
            *(_OWORD *)(a5 + 104) = 0u;
            double v229 = v222 * v223;
            *(double *)(a5 + 24) = v222 * v227 + v229 * v226 + (float)(v223 * v228) + (float)(v225 * v227);
            *(double *)(a5 + 32) = v229 * v227;
            *(double *)(a5 + 16) = v222 * v226 + v229 + (float)(v224 * v227) + (float)(v225 * v226) + v228;
            *(double *)a5 = v224;
            *(double *)(a5 + 8) = v222 + (float)(v224 * v226) + v225;
            *(void *)(a5 + 120) = 0;
            *(void *)(a5 + 128) = 5;
            *(double *)(a5 + 80) = (float)(v227 + (float)(v223 * v226));
            *(double *)(a5 + 88) = (float)(v223 * v227);
            *(double *)(a5 + 72) = (float)(v223 + v226);
            *(void *)(a5 + 64) = 0x3FF0000000000000;
            uint64_t v39 = 4;
          }
        }
        else
        {
          double v165 = result->f32[1];
          float v166 = result[2].f32[1];
          float v167 = result[3].f32[0];
          float v168 = result[3].f32[1];
          *(_OWORD *)(a5 + 56) = 0u;
          *(_OWORD *)(a5 + 72) = 0u;
          *(_OWORD *)(a5 + 24) = 0u;
          *(_OWORD *)(a5 + 40) = 0u;
          *(_OWORD *)(a5 + 88) = 0u;
          *(_OWORD *)(a5 + 104) = 0u;
          *(double *)a5 = v167;
          *(double *)(a5 + 8) = v165 + v168;
          double v169 = v166;
          *(double *)(a5 + 16) = v165 * v169;
          *(void *)(a5 + 120) = 0;
          *(void *)(a5 + 128) = 3;
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          *(double *)(a5 + 72) = v169;
          uint64_t v39 = 2;
        }
        goto LABEL_70;
      }
      if (result[11].i8[4])
      {
        if (result[17].i8[0])
        {
          double v79 = result->f32[1];
          float v80 = result[7].f32[0];
          float v81 = result[7].f32[1];
          float v82 = result[8].f32[1];
          float v83 = result[12].f32[1];
          float v84 = result[13].f32[0];
          float v85 = result[14].f32[0];
          *(_OWORD *)(a5 + 40) = 0u;
          *(_OWORD *)(a5 + 56) = 0u;
          *(_OWORD *)(a5 + 72) = 0u;
          *(_OWORD *)(a5 + 88) = 0u;
          *(_OWORD *)(a5 + 104) = 0u;
          *(double *)a5 = v79;
          *(double *)(a5 + 8) = v79 * v83 + v79 * v80 + v82 + v85;
          double v86 = v79 * v80;
          double v87 = v86 * v83 + v79 * v81 + v79 * v84 + (float)(v80 * v85) + (float)(v82 * v83);
          double v88 = v79 * v81;
          *(double *)(a5 + 16) = v87;
          *(double *)(a5 + 24) = v86 * v84 + v88 * v83 + (float)(v81 * v85) + (float)(v82 * v84);
          *(double *)(a5 + 32) = v88 * v84;
          uint64_t v39 = 5;
          *(void *)(a5 + 120) = 0;
          *(void *)(a5 + 128) = 5;
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          *(double *)(a5 + 72) = (float)(v80 + v83);
          *(double *)(a5 + 80) = (float)((float)(v81 + (float)(v80 * v83)) + v84);
          *(double *)(a5 + 88) = (float)((float)(v80 * v84) + (float)(v81 * v83));
          *(double *)(a5 + 96) = (float)(v81 * v84);
          goto LABEL_70;
        }
        double v255 = result->f32[1];
        float v256 = result[7].f32[0];
        float v257 = result[7].f32[1];
        float v258 = result[8].f32[1];
        *(_OWORD *)(a5 + 72) = 0u;
        *(_OWORD *)(a5 + 56) = 0u;
        *(_OWORD *)(a5 + 24) = 0u;
        *(_OWORD *)(a5 + 40) = 0u;
        *(_OWORD *)(a5 + 88) = 0u;
        *(_OWORD *)(a5 + 104) = 0u;
        double v259 = v257;
        double v260 = v256;
        *(double *)(a5 + 8) = v258 + v255 * v260;
        *(double *)(a5 + 16) = v255 * v259;
        *(double *)a5 = v255;
        uint64_t v39 = 3;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 3;
        *(double *)(a5 + 72) = v260;
        *(double *)(a5 + 80) = v259;
      }
      else
      {
        *(_OWORD *)(a5 + 56) = 0u;
        *(_OWORD *)(a5 + 104) = 0u;
        *(_OWORD *)(a5 + 88) = 0u;
        *(_OWORD *)(a5 + 72) = 0u;
        *(_OWORD *)(a5 + 40) = 0u;
        *(_OWORD *)(a5 + 24) = 0u;
        *(_OWORD *)(a5 + 8) = 0u;
        *(double *)a5 = result->f32[1];
        uint64_t v39 = 1;
        *(void *)(a5 + 120) = 0;
        *(void *)(a5 + 128) = 1;
      }
      goto LABEL_69;
    case 1:
      int v29 = result[17].u8[0];
      int v30 = result[11].u8[4];
      if (result[17].i8[0]) {
        BOOL v31 = v30 == 0;
      }
      else {
        BOOL v31 = 1;
      }
      char v32 = v31;
      if (result[6].i8[0])
      {
        if (v32)
        {
          double v33 = result->f32[1];
          float v34 = result[2].f32[1];
          float v35 = result[3].f32[0];
          float v36 = result[3].f32[1];
          if (v29 | v30)
          {
            float v184 = result[7].f32[0];
            float v185 = result[7].f32[1];
            float v186 = result[8].f32[1];
            *(_OWORD *)(a5 + 32) = 0u;
            *(_OWORD *)(a5 + 48) = 0u;
            *(_OWORD *)(a5 + 64) = 0u;
            *(_OWORD *)(a5 + 80) = 0u;
            *(_OWORD *)(a5 + 96) = 0u;
            *(_OWORD *)(a5 + 112) = 0u;
            double v187 = 1.0 / v35;
            *(double *)(a5 + 16) = v187 * (float)(v185 + (float)(v34 * v184));
            *(double *)(a5 + 24) = v187 * (float)(v34 * v185);
            *(double *)a5 = v187;
            *(double *)(a5 + 8) = v187 * (float)(v34 + v184);
            *(void *)(a5 + 128) = 4;
            double v188 = v33 * v34;
            *(double *)(a5 + 88) = v187 * (v33 * v185 + v188 * v184 + (float)(v34 * v186) + (float)(v36 * v185));
            *(double *)(a5 + 96) = v187 * (v188 * v185);
            *(double *)(a5 + 72) = v187 * (v33 + v36 + (float)(v35 * v184));
            *(double *)(a5 + 80) = v187 * (v33 * v184 + v188 + (float)(v36 * v184) + (float)(v35 * v185) + v186);
            *(void *)(a5 + 64) = 0x3FF0000000000000;
            uint64_t v39 = 5;
          }
          else
          {
            *(_OWORD *)(a5 + 16) = 0u;
            *(_OWORD *)(a5 + 32) = 0u;
            *(_OWORD *)(a5 + 48) = 0u;
            *(_OWORD *)(a5 + 64) = 0u;
            *(_OWORD *)(a5 + 80) = 0u;
            *(_OWORD *)(a5 + 96) = 0u;
            *(_OWORD *)(a5 + 112) = 0u;
            double v37 = 1.0 / v35;
            double v38 = v34;
            *(double *)a5 = v37;
            *(double *)(a5 + 8) = v37 * v38;
            *(void *)(a5 + 128) = 2;
            *(double *)(a5 + 72) = v37 * (v33 + v36);
            *(double *)(a5 + 80) = v33 * v38 * v37;
            *(void *)(a5 + 64) = 0x3FF0000000000000;
            uint64_t v39 = 3;
          }
        }
        else if (v7)
        {
          double v109 = result->f32[1];
          float v111 = result[2].f32[1];
          float v110 = result[3].f32[0];
          float v112 = result[3].f32[1];
          float v113 = result[6].f32[1];
          float v114 = result[7].f32[0];
          float v115 = result[7].f32[1];
          float v116 = result[8].f32[1];
          float v117 = result[12].f32[1];
          float v118 = result[13].f32[0];
          float v119 = result[14].f32[0];
          double v120 = 1.0 / v110;
          *(double *)(a5 + 40) = v120
                               * (float)((float)((float)((float)(v111 * v114) * v118)
                                               + (float)((float)(v111 * v115) * v117))
                                       + (float)(v115 * v118));
          *(double *)(a5 + 48) = v120 * (float)((float)(v111 * v115) * v118);
          *(double *)(a5 + 24) = v120
                               * (float)((float)((float)(v115
                                                       + (float)((float)((float)((float)(v111 * v113) * v117)
                                                                       + (float)(v111 * v114))
                                                               + (float)(v111 * v118)))
                                               + (float)(v114 * v117))
                                       + (float)(v113 * v118));
          *(double *)(a5 + 32) = v120
                               * (float)((float)((float)((float)((float)((float)(v111 * v114) * v117)
                                                               + (float)(v111 * v115))
                                                       + (float)((float)(v111 * v113) * v118))
                                               + (float)(v115 * v117))
                                       + (float)(v114 * v118));
          *(double *)(a5 + 16) = v120
                               * (float)(v118
                                       + (float)((float)(v114 + (float)((float)(v111 * v117) + (float)(v111 * v113)))
                                               + (float)(v113 * v117)));
          double v121 = v109 * v111;
          double v122 = v115;
          double v123 = v121 * v115;
          *(double *)(a5 + 120) = v120 * (v123 * v118);
          double v124 = v121 * v114;
          double v125 = v109 * v115;
          float v126 = v112 * v115;
          double v127 = v124 * v118
               + v123 * v117
               + v125 * v118
               + (float)((float)(v111 * v115) * v119)
               + (float)((float)(v111 * v116) * v118)
               + (float)((float)(v112 * v115) * v118);
          double v128 = v121 * v113;
          double v129 = v124 * v117 + v123 + v128 * v118 + v125 * v117;
          double v130 = v109 * v114;
          float v131 = v110 * v115;
          *(double *)a5 = v120;
          *(double *)(a5 + 8) = v120 * (float)((float)(v111 + v113) + v117);
          *(void *)(a5 + 128) = 7;
          *(double *)(a5 + 104) = v120
                                * (v129
                                 + v130 * v118
                                 + (float)((float)(v111 * v114) * v119)
                                 + (float)((float)(v111 * v116) * v117)
                                 + (float)((float)(v5 * v111) * v118)
                                 + (float)((float)(v112 * v115) * v117)
                                 + (float)((float)(v112 * v114) * v118)
                                 + (float)((float)(v110 * v115) * v118)
                                 + (float)(v115 * v119)
                                 + (float)(v116 * v118));
          *(double *)(a5 + 112) = v120 * v127;
          double v132 = v109 * v113;
          *(double *)(a5 + 88) = v120
                               * (v121 * v117
                                + v128
                                + v130
                                + v132 * v117
                                + v109 * v118
                                + (float)(v5 * v111)
                                + (float)(v111 * v119)
                                + (float)(v112 * v114)
                                + (float)((float)(v112 * v113) * v117)
                                + (float)(v112 * v118)
                                + v131
                                + (float)((float)(v110 * v114) * v117)
                                + (float)((float)(v110 * v113) * v118)
                                + (float)(v113 * v119)
                                + v116
                                + (float)(v5 * v117));
          *(double *)(a5 + 96) = v120
                               * (v128 * v117
                                + v124
                                + v121 * v118
                                + v109 * v122
                                + v130 * v117
                                + v132 * v118
                                + (float)((float)(v111 * v113) * v119)
                                + (float)(v111 * v116)
                                + (float)((float)(v5 * v111) * v117)
                                + v126
                                + (float)((float)(v112 * v114) * v117)
                                + (float)((float)(v112 * v113) * v118)
                                + (float)(v131 * v117)
                                + (float)((float)(v110 * v114) * v118)
                                + (float)(v114 * v119)
                                + (float)(v116 * v117)
                                + (float)(v5 * v118));
          *(double *)(a5 + 72) = v120 * (v109 + v112 + (float)(v110 * v113) + (float)(v110 * v117));
          *(double *)(a5 + 80) = v120
                               * (v132
                                + v121
                                + v109 * v117
                                + (float)(v112 * v113)
                                + (float)(v112 * v117)
                                + (float)(v110 * v114)
                                + (float)((float)(v110 * v113) * v117)
                                + (float)(v110 * v118)
                                + v5
                                + v119);
          *(void *)(a5 + 56) = 0;
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          uint64_t v39 = 8;
        }
        else
        {
          double v189 = result->f32[1];
          float v191 = result[2].f32[1];
          float v190 = result[3].f32[0];
          float v192 = result[3].f32[1];
          float v193 = result[7].f32[0];
          float v194 = result[7].f32[1];
          float v195 = result[8].f32[1];
          float v196 = result[12].f32[1];
          float v197 = result[13].f32[0];
          float v198 = result[14].f32[0];
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)(a5 + 64) = 0u;
          *(_OWORD *)(a5 + 80) = 0u;
          *(_OWORD *)(a5 + 96) = 0u;
          *(_OWORD *)(a5 + 112) = 0u;
          double v199 = 1.0 / v190;
          *(double *)(a5 + 32) = v199
                               * (float)((float)((float)((float)(v191 * v193) * v197)
                                               + (float)((float)(v191 * v194) * v196))
                                       + (float)(v194 * v197));
          *(double *)(a5 + 40) = v199 * (float)((float)(v191 * v194) * v197);
          *(double *)(a5 + 16) = v199
                               * (float)(v197
                                       + (float)((float)(v194 + (float)((float)(v191 * v196) + (float)(v191 * v193)))
                                               + (float)(v193 * v196)));
          *(double *)(a5 + 24) = v199
                               * (float)((float)((float)((float)((float)((float)(v191 * v193) * v196)
                                                               + (float)(v191 * v194))
                                                       + (float)(v191 * v197))
                                               + (float)(v194 * v196))
                                       + (float)(v193 * v197));
          double v200 = v189 * v191;
          double v201 = v200 * v194;
          *(double *)(a5 + 112) = v199 * (v201 * v197);
          double v202 = v200 * v193;
          double v203 = v189 * v194;
          double v204 = v202 * v197 + v201 * v196 + v203 * v197 + (float)((float)(v191 * v194) * v198);
          double v205 = v202 * v196 + v201 + v200 * v197 + v203 * v196;
          double v206 = v189 * v193;
          *(double *)a5 = v199;
          *(double *)(a5 + 8) = v199 * (float)((float)(v191 + v193) + v196);
          *(void *)(a5 + 128) = 6;
          *(double *)(a5 + 96) = v199
                               * (v205
                                + v206 * v197
                                + (float)((float)(v191 * v193) * v198)
                                + (float)((float)(v191 * v195) * v196)
                                + (float)((float)(v192 * v194) * v196)
                                + (float)((float)(v192 * v193) * v197)
                                + (float)((float)(v190 * v194) * v197)
                                + (float)(v194 * v198)
                                + (float)(v195 * v197));
          *(double *)(a5 + 104) = v199
                                * (v204 + (float)((float)(v191 * v195) * v197) + (float)((float)(v192 * v194) * v197));
          *(double *)(a5 + 80) = v199
                               * (v206
                                + v200
                                + v189 * v196
                                + (float)(v192 * v193)
                                + (float)(v192 * v196)
                                + (float)(v190 * v194)
                                + (float)((float)(v190 * v193) * v196)
                                + (float)(v190 * v197)
                                + v195
                                + v198);
          *(double *)(a5 + 88) = v199
                               * (v200 * v196
                                + v200 * v193
                                + v189 * v194
                                + v206 * v196
                                + v189 * v197
                                + (float)(v191 * v195)
                                + (float)(v191 * v198)
                                + (float)(v192 * v194)
                                + (float)((float)(v192 * v193) * v196)
                                + (float)(v192 * v197)
                                + (float)((float)(v190 * v194) * v196)
                                + (float)((float)(v190 * v193) * v197)
                                + (float)(v193 * v198)
                                + (float)(v195 * v196));
          *(double *)(a5 + 72) = v199 * (v189 + v192 + (float)(v190 * v193) + (float)(v190 * v196));
LABEL_57:
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          uint64_t v39 = 7;
        }
      }
      else
      {
        if (v32)
        {
          if (!(v29 | v30))
          {
            *(_OWORD *)(a5 + 56) = 0u;
            *(_OWORD *)(a5 + 104) = 0u;
            *(_OWORD *)(a5 + 88) = 0u;
            *(_OWORD *)(a5 + 72) = 0u;
            *(_OWORD *)(a5 + 40) = 0u;
            *(_OWORD *)(a5 + 24) = 0u;
            *(_OWORD *)(a5 + 8) = 0u;
            *(void *)a5 = 0x3FF0000000000000;
            uint64_t v39 = 1;
            *(void *)(a5 + 120) = 0;
            *(void *)(a5 + 128) = 1;
            *(double *)(a5 + 64) = result->f32[1];
            goto LABEL_70;
          }
          double v251 = result->f32[1];
          float v252 = result[8].f32[1];
          *(_OWORD *)(a5 + 72) = 0u;
          *(_OWORD *)(a5 + 56) = 0u;
          *(_OWORD *)(a5 + 24) = 0u;
          *(_OWORD *)(a5 + 40) = 0u;
          *(_OWORD *)(a5 + 88) = 0u;
          *(_OWORD *)(a5 + 104) = 0u;
          double v253 = 1.0 / v251;
          float64x2_t v254 = vcvtq_f64_f32(result[7]);
          *(float64x2_t *)(a5 + 8) = vmulq_n_f64(v254, v253);
          *(double *)a5 = v253;
          uint64_t v39 = 3;
          *(void *)(a5 + 120) = 0;
          *(void *)(a5 + 128) = 3;
          *(float64_t *)(a5 + 80) = v254.f64[1];
          double v183 = v254.f64[0] + v252 * v253;
        }
        else
        {
          double v170 = result->f32[1];
          float v171 = result[7].f32[0];
          float v172 = result[7].f32[1];
          float v173 = result[8].f32[1];
          float v174 = result[12].f32[1];
          float v175 = result[13].f32[0];
          float v176 = result[14].f32[0];
          *(_OWORD *)(a5 + 40) = 0u;
          *(_OWORD *)(a5 + 56) = 0u;
          *(_OWORD *)(a5 + 72) = 0u;
          *(_OWORD *)(a5 + 88) = 0u;
          *(_OWORD *)(a5 + 104) = 0u;
          double v177 = 1.0 / v170;
          double v178 = (float)(v172 * v175);
          double v179 = (float)((float)(v171 * v175) + (float)(v172 * v174));
          double v180 = (float)((float)(v172 + (float)(v171 * v174)) + v175);
          *(double *)(a5 + 24) = v177 * v179;
          *(double *)(a5 + 32) = v177 * v178;
          double v181 = (float)(v171 + v174);
          *(double *)(a5 + 8) = v177 * v181;
          *(double *)(a5 + 16) = v177 * v180;
          *(double *)a5 = v177;
          uint64_t v39 = 5;
          *(void *)(a5 + 120) = 0;
          *(void *)(a5 + 128) = 5;
          *(double *)(a5 + 88) = v179 + (float)((float)(v173 * v175) + (float)(v172 * v176)) * v177;
          *(double *)(a5 + 96) = v178;
          double v182 = v180 + (float)((float)(v173 * v174) + (float)(v171 * v176)) * v177;
          double v183 = v181 + (float)(v173 + v176) * v177;
          *(double *)(a5 + 80) = v182;
        }
        *(double *)(a5 + 72) = v183;
LABEL_69:
        *(void *)(a5 + 64) = 0x3FF0000000000000;
      }
LABEL_70:
      *(void *)(a5 + 136) = v39;
      return result;
    case 2:
      int v40 = *(_DWORD *)(a3 + 8);
      float v42 = *(float *)a3;
      float v41 = *(float *)(a3 + 4);
      if (result[17].i8[0])
      {
        if (v7)
        {
          double v43 = result->f32[1];
          float v44 = result[6].f32[1];
          float v45 = result[7].f32[0];
          float v46 = result[7].f32[1];
          float v47 = result[12].f32[1];
          float v48 = result[13].f32[0];
          float v49 = result[14].f32[0];
          float v50 = result[8].f32[1];
          double v51 = result[9].f32[0];
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)(a5 + 64) = 0u;
          *(_OWORD *)(a5 + 80) = 0u;
          *(_OWORD *)(a5 + 96) = 0u;
          *(_OWORD *)(a5 + 112) = 0u;
          double v52 = 1.0 / (v43 * v51);
          *(double *)(a5 + 16) = v52 * (float)((float)((float)(v50 * v47) + (float)(v45 * v49)) + (float)(v5 * v48));
          *(double *)(a5 + 24) = v52 * (float)((float)(v50 * v48) + (float)(v46 * v49));
          *(double *)a5 = v52 * (float)(v5 + v49);
          *(double *)(a5 + 8) = v52 * (float)((float)(v50 + (float)(v44 * v49)) + (float)(v5 * v47));
          double v53 = v47;
          double v54 = v45;
          *(double *)(a5 + 96) = 1.0
                               / v43
                               * ((float)(v46 * v49) + v43 * v46 * v47 + v43 * v45 * v48 + (float)(v50 * v48));
          *(double *)(a5 + 104) = (float)(v46 * v48);
          double v55 = 1.0
              / v43
              * ((float)(v45 * v49)
               + v43 * v46
               + v43 * v45 * v47
               + v43 * v44 * v48
               + (float)(v50 * v47)
               + (float)(v5 * v48));
          double v56 = 1.0 / v43 * ((float)(v44 * v49) + v43 * v54 + v43 * v44 * v47 + v43 * v48 + v50 + (float)(v5 * v47));
          double v57 = 1.0 / v43 * (v49 + v43 * v44 + v43 * v53 + v5);
          *(double *)(a5 + 80) = v56;
          *(double *)(a5 + 88) = v55;
        }
        else
        {
          if ((v40 & 1) == 0)
          {
            double v133 = result->f32[1];
            float v134 = result[7].f32[0];
            float v135 = result[7].f32[1];
            float v136 = result[12].f32[1];
            float v137 = result[13].f32[0];
            float v138 = result[14].f32[0];
            float v139 = result[8].f32[1];
            double v140 = result[9].f32[0];
            *(_OWORD *)(a5 + 88) = 0u;
            *(_OWORD *)(a5 + 24) = 0u;
            *(_OWORD *)(a5 + 40) = 0u;
            *(_OWORD *)(a5 + 56) = 0u;
            *(_OWORD *)(a5 + 72) = 0u;
            *(_OWORD *)(a5 + 104) = 0u;
            double v141 = 1.0 / (v133 * v140);
            float v142 = v139 * v136;
            *(double *)(a5 + 8) = v141 * (float)((float)(v139 * v136) + (float)(v134 * v138));
            *(double *)(a5 + 16) = v141 * (float)((float)(v139 * v137) + (float)(v135 * v138));
            *(double *)a5 = v141 * (float)(v139 + v138);
            double v143 = v136;
            *(void *)(a5 + 120) = 0;
            *(double *)(a5 + 88) = 1.0
                                 / v133
                                 * (v133 * v134 * v137 + v133 * v135 * v143 + (float)(v135 * v138) + (float)(v139 * v137));
            *(double *)(a5 + 96) = (float)(v135 * v137);
            *(double *)(a5 + 72) = 1.0 / v133 * (v133 * v143 + v133 * v134 + v139 + v138);
            *(double *)(a5 + 80) = 1.0
                                 / v133
                                 * (v133 * v134 * v143 + v133 * v135 + v133 * v137 + (float)(v134 * v138) + v142);
            *(void *)(a5 + 64) = 0x3FF0000000000000;
            int64x2_t v67 = (int64x2_t)xmmword_1BB872EE0;
            goto LABEL_60;
          }
          double v207 = result->f32[1];
          float v208 = result[7].f32[0];
          float v209 = result[7].f32[1];
          float v210 = result[12].f32[1];
          float v211 = result[13].f32[0];
          float v212 = result[14].f32[0];
          float v213 = result[8].f32[1];
          double v214 = result[9].f32[0];
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)(a5 + 64) = 0u;
          *(_OWORD *)(a5 + 80) = 0u;
          *(_OWORD *)(a5 + 96) = 0u;
          *(_OWORD *)(a5 + 112) = 0u;
          double v215 = 1.0 / (v207 * v214);
          *(double *)(a5 + 16) = v215
                               * (float)((float)((float)((float)((float)(v213 * v42) * v210)
                                                       + (float)((float)(v208 * v42) * v212))
                                               + (float)(v209 * v212))
                                       + (float)(v213 * v211));
          *(double *)(a5 + 24) = v215 * (float)((float)((float)(v213 * v211) + (float)(v209 * v212)) * v42);
          *(double *)a5 = v215 * (float)(v213 + v212);
          *(double *)(a5 + 8) = v215
                              * (float)((float)((float)((float)(v212 * v42) + (float)(v42 * v213)) + (float)(v208 * v212))
                                      + (float)(v213 * v210));
          double v216 = v41;
          double v217 = v41 * v207;
          double v218 = v217 * v208;
          double v219 = v207 * v209;
          *(double *)(a5 + 96) = 1.0
                               / v207
                               * (v218 * v211
                                + v217 * v209 * v210
                                + v219 * v211
                                + (float)((float)(v209 * v41) * v212)
                                + (float)((float)(v213 * v41) * v211));
          *(double *)(a5 + 104) = (float)((float)(v209 * v41) * v211);
          double v220 = v207 * v208;
          *(double *)(a5 + 88) = 1.0
                               / v207
                               * (v218 * v210
                                + v217 * v209
                                + v217 * v211
                                + v219 * v210
                                + v220 * v211
                                + (float)((float)(v208 * v41) * v212)
                                + (float)((float)(v213 * v41) * v210)
                                + (float)(v209 * v212)
                                + (float)(v213 * v211));
          double v221 = 1.0
               / v207
               * (v217 * v210
                + v218
                + v219
                + v220 * v210
                + v207 * v211
                + (float)(v213 * v41)
                + (float)(v212 * v41)
                + (float)(v208 * v212)
                + (float)(v213 * v210));
          double v57 = 1.0 / v207 * (v220 + v207 * v216 + v207 * v210 + v213 + v212);
          *(double *)(a5 + 80) = v221;
        }
        *(double *)(a5 + 72) = v57;
        *(void *)(a5 + 64) = 0x3FF0000000000000;
        int64x2_t v67 = (int64x2_t)xmmword_1BB872ED0;
      }
      else
      {
        if (!result[11].i8[4]) {
          goto LABEL_45;
        }
        if (v7)
        {
          double v89 = result->f32[1];
          float v90 = result[6].f32[1];
          float v91 = result[7].f32[0];
          float v92 = result[7].f32[1];
          float v93 = result[8].f32[1];
          double v94 = result[9].f32[0];
          *(_OWORD *)(a5 + 16) = 0u;
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)(a5 + 64) = 0u;
          *(_OWORD *)(a5 + 80) = 0u;
          *(_OWORD *)(a5 + 96) = 0u;
          double v95 = 1.0 / (v89 * v94);
          double v96 = v93;
          double v97 = v5;
          *(double *)a5 = v95 * v97;
          *(double *)(a5 + 8) = v95 * v96;
          *(double *)(a5 + 80) = 1.0 / v89 * (v96 + v89 * v91);
          *(double *)(a5 + 88) = v92;
          *(double *)(a5 + 72) = 1.0 / v89 * (v97 + v89 * v90);
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          int64x2_t v67 = (int64x2_t)xmmword_1BB872EF0;
          *(_OWORD *)(a5 + 112) = 0u;
        }
        else
        {
          double v245 = result->f32[1];
          if (v40)
          {
            float v261 = result[7].f32[0];
            float v262 = result[7].f32[1];
            float v263 = result[8].f32[1];
            double v264 = 1.0 / (v245 * result[9].f32[0]);
            *(double *)a5 = v264 * v263;
            *(double *)(a5 + 8) = v264 * (float)(v263 * v42);
            double v265 = v261;
            *(_OWORD *)(a5 + 16) = 0u;
            *(_OWORD *)(a5 + 32) = 0u;
            *(_OWORD *)(a5 + 48) = 0u;
            *(_OWORD *)(a5 + 64) = 0u;
            *(_OWORD *)(a5 + 80) = 0u;
            *(_OWORD *)(a5 + 96) = 0u;
            *(double *)(a5 + 80) = 1.0 / v245 * (v245 * v262 + v41 * v245 * v265 + (float)(v263 * v41));
            *(double *)(a5 + 88) = (float)(v262 * v41);
            *(double *)(a5 + 72) = 1.0 / v245 * (v245 * v265 + v245 * v41 + v263);
            *(void *)(a5 + 64) = 0x3FF0000000000000;
            int64x2_t v67 = (int64x2_t)xmmword_1BB872EF0;
            *(_OWORD *)(a5 + 112) = 0u;
          }
          else
          {
            float v246 = result[7].f32[0];
            float v247 = result[7].f32[1];
            float v248 = result[8].f32[1];
            double v249 = result[9].f32[0];
            *(_OWORD *)(a5 + 72) = 0u;
            *(_OWORD *)(a5 + 56) = 0u;
            *(_OWORD *)(a5 + 8) = 0u;
            *(_OWORD *)(a5 + 24) = 0u;
            *(_OWORD *)(a5 + 40) = 0u;
            *(_OWORD *)(a5 + 88) = 0u;
            *(_OWORD *)(a5 + 104) = 0u;
            *(void *)(a5 + 120) = 0;
            double v250 = v248;
            *(double *)a5 = 1.0 / (v245 * v249) * v250;
            *(double *)(a5 + 72) = 1.0 / v245 * (v250 + v245 * v246);
            *(double *)(a5 + 80) = v247;
            *(void *)(a5 + 64) = 0x3FF0000000000000;
            int64x2_t v67 = (int64x2_t)xmmword_1BB872F00;
          }
        }
      }
      goto LABEL_60;
    case 3:
      if (result[17].i8[0])
      {
        if (v7)
        {
          double v58 = result->f32[1];
          float v59 = result[6].f32[1];
          float v60 = result[7].f32[0];
          float v61 = result[7].f32[1];
          float v62 = result[12].f32[1];
          float v63 = result[13].f32[0];
          float v64 = result[14].f32[0];
          float v65 = result[8].f32[1];
          double v66 = 1.0 / (v58 * result[9].f32[0]);
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)(a5 + 64) = 0u;
          *(_OWORD *)(a5 + 80) = 0u;
          *(_OWORD *)(a5 + 96) = 0u;
          *(_OWORD *)(a5 + 112) = 0u;
          *(double *)(a5 + 16) = v66 * (float)((float)((float)(v65 * v62) + (float)(v60 * v64)) + (float)(v5 * v63));
          *(double *)(a5 + 24) = v66 * (float)((float)(v65 * v63) + (float)(v61 * v64));
          *(double *)a5 = v66 * (float)(v5 + v64);
          *(double *)(a5 + 8) = v66 * (float)((float)(v65 + (float)(v59 * v64)) + (float)(v5 * v62));
          *(double *)(a5 + 96) = 1.0
                               / v58
                               * (v58 * v60 * v63 + v58 * v61 * v62 + (float)(v61 * v64) + (float)(v65 * v63));
          *(double *)(a5 + 104) = (float)(v61 * v63);
          *(double *)(a5 + 80) = 1.0
                               / v58
                               * (v58 * v59 * v62 + v58 * v60 + v58 * v63 + (float)(v59 * v64) + v65 + (float)(v5 * v62));
          *(double *)(a5 + 88) = 1.0
                               / v58
                               * (v58 * v60 * v62
                                + v58 * v61
                                + v58 * v59 * v63
                                + (float)(v60 * v64)
                                + (float)(v65 * v62)
                                + (float)(v5 * v63));
          *(double *)(a5 + 72) = 1.0 / v58 * (v58 * v62 + v58 * v59 + v5 + v64);
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          int64x2_t v67 = (int64x2_t)xmmword_1BB872EB0;
        }
        else
        {
          double v144 = result->f32[1];
          float v145 = result[7].f32[0];
          float v146 = result[7].f32[1];
          float v147 = result[12].f32[1];
          float v148 = result[13].f32[0];
          float v149 = result[14].f32[0];
          float v150 = result[8].f32[1];
          double v151 = 1.0 / (v144 * result[9].f32[0]);
          *(_OWORD *)(a5 + 88) = 0u;
          *(_OWORD *)(a5 + 24) = 0u;
          *(_OWORD *)(a5 + 40) = 0u;
          *(_OWORD *)(a5 + 56) = 0u;
          *(_OWORD *)(a5 + 72) = 0u;
          *(_OWORD *)(a5 + 104) = 0u;
          float v152 = v150 * v147;
          *(double *)(a5 + 8) = v151 * (float)((float)(v150 * v147) + (float)(v145 * v149));
          *(double *)(a5 + 16) = v151 * (float)((float)(v150 * v148) + (float)(v146 * v149));
          *(double *)a5 = v151 * (float)(v150 + v149);
          double v153 = v147;
          *(void *)(a5 + 120) = 0;
          *(double *)(a5 + 88) = 1.0
                               / v144
                               * (v144 * v145 * v148 + v144 * v146 * v153 + (float)(v146 * v149) + (float)(v150 * v148));
          *(double *)(a5 + 96) = (float)(v146 * v148);
          *(double *)(a5 + 72) = 1.0 / v144 * (v144 * v153 + v144 * v145 + v150 + v149);
          *(double *)(a5 + 80) = 1.0
                               / v144
                               * (v144 * v145 * v153 + v144 * v146 + v144 * v148 + (float)(v145 * v149) + v152);
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          int64x2_t v67 = (int64x2_t)xmmword_1BB872EA0;
        }
      }
      else
      {
        if (!result[11].i8[4]) {
          goto LABEL_45;
        }
        double v98 = result->f32[1];
        float v99 = result[7].f32[0];
        float v100 = result[7].f32[1];
        double v101 = result[8].f32[1];
        double v102 = 1.0 / (v98 * result[9].f32[0]) * v101;
        *(_OWORD *)(a5 + 72) = 0u;
        *(_OWORD *)(a5 + 56) = 0u;
        *(_OWORD *)(a5 + 8) = 0u;
        *(_OWORD *)(a5 + 24) = 0u;
        *(_OWORD *)(a5 + 40) = 0u;
        *(_OWORD *)(a5 + 88) = 0u;
        *(_OWORD *)(a5 + 104) = 0u;
        *(void *)(a5 + 120) = 0;
        *(double *)a5 = v102;
        *(double *)(a5 + 72) = 1.0 / v98 * (v101 + v98 * v99);
        *(double *)(a5 + 80) = v100;
        *(void *)(a5 + 64) = 0x3FF0000000000000;
        int64x2_t v67 = (int64x2_t)xmmword_1BB872EC0;
      }
      goto LABEL_60;
    case 4:
      if (result[17].i8[0])
      {
        if (v7)
        {
          double v68 = result->f32[1];
          float v69 = result[6].f32[1];
          float v70 = result[7].f32[0];
          float v71 = result[7].f32[1];
          float v72 = result[12].f32[1];
          float v73 = result[13].f32[0];
          float v74 = result[14].f32[0];
          float v75 = result[8].f32[1];
          double v76 = result[9].f32[0];
          *(_OWORD *)(a5 + 64) = 0u;
          *(_OWORD *)(a5 + 80) = 0u;
          *(_OWORD *)(a5 + 96) = 0u;
          *(_OWORD *)(a5 + 112) = 0u;
          double v77 = 1.0 / (v68 * v76);
          *(int64x2_t *)(a5 + 32) = vdupq_n_s64(0x3DA5FD7FE0000000uLL);
          *(_OWORD *)(a5 + 48) = 0u;
          *(double *)(a5 + 16) = v77 * (float)((float)((float)(v75 * v72) + (float)(v70 * v74)) + (float)(v5 * v73));
          *(double *)(a5 + 24) = v77 * (float)((float)(v75 * v73) + (float)(v71 * v74));
          *(double *)a5 = v77 * (float)(v5 + v74);
          *(double *)(a5 + 8) = v77 * (float)((float)(v75 + (float)(v69 * v74)) + (float)(v5 * v72));
          *(double *)(a5 + 96) = 1.0
                               / v68
                               * (v68 * v70 * v73 + v68 * v71 * v72 + (float)(v71 * v74) + (float)(v75 * v73));
          *(double *)(a5 + 104) = (float)(v71 * v73);
          *(double *)(a5 + 80) = 1.0
                               / v68
                               * (v68 * v69 * v72 + v68 * v70 + v68 * v73 + (float)(v69 * v74) + v75 + (float)(v5 * v72));
          *(double *)(a5 + 88) = 1.0
                               / v68
                               * (v68 * v70 * v72
                                + v68 * v71
                                + v68 * v69 * v73
                                + (float)(v70 * v74)
                                + (float)(v75 * v72)
                                + (float)(v5 * v73));
          *(double *)(a5 + 72) = 1.0 / v68 * (v68 * v72 + v68 * v69 + v5 + v74);
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          unint64_t v78 = 6;
        }
        else
        {
          double v154 = result->f32[1];
          float v155 = result[7].f32[0];
          float v156 = result[7].f32[1];
          float v157 = result[12].f32[1];
          float v158 = result[13].f32[0];
          float v159 = result[14].f32[0];
          float v160 = result[8].f32[1];
          double v161 = result[9].f32[0];
          *(_OWORD *)(a5 + 88) = 0u;
          *(_OWORD *)(a5 + 40) = 0u;
          *(_OWORD *)(a5 + 56) = 0u;
          *(_OWORD *)(a5 + 72) = 0u;
          *(_OWORD *)(a5 + 104) = 0u;
          double v162 = 1.0 / (v154 * v161);
          *(int64x2_t *)(a5 + 24) = vdupq_n_s64(0x3DA5FD7FE0000000uLL);
          float v163 = v160 * v157;
          *(double *)(a5 + 8) = v162 * (float)((float)(v160 * v157) + (float)(v155 * v159));
          *(double *)(a5 + 16) = v162 * (float)((float)(v160 * v158) + (float)(v156 * v159));
          *(double *)a5 = v162 * (float)(v160 + v159);
          double v164 = v157;
          *(void *)(a5 + 120) = 0;
          *(double *)(a5 + 88) = 1.0
                               / v154
                               * (v154 * v155 * v158 + v154 * v156 * v164 + (float)(v156 * v159) + (float)(v160 * v158));
          *(double *)(a5 + 96) = (float)(v156 * v158);
          *(double *)(a5 + 72) = 1.0 / v154 * (v154 * v164 + v154 * v155 + v160 + v159);
          *(double *)(a5 + 80) = 1.0
                               / v154
                               * (v154 * v155 * v164 + v154 * v156 + v154 * v158 + (float)(v155 * v159) + v163);
          *(void *)(a5 + 64) = 0x3FF0000000000000;
          unint64_t v78 = 5;
        }
      }
      else
      {
        if (!result[11].i8[4])
        {
LABEL_45:
          *(_OWORD *)(a5 + 112) = 0u;
          *(_OWORD *)(a5 + 128) = 0u;
          *(_OWORD *)(a5 + 80) = 0u;
          *(_OWORD *)(a5 + 96) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)(a5 + 64) = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)a5 = 0u;
          return result;
        }
        double v103 = result->f32[1];
        float v104 = result[7].f32[0];
        float v105 = result[7].f32[1];
        float v106 = result[8].f32[1];
        double v107 = result[9].f32[0];
        *(_OWORD *)(a5 + 72) = 0u;
        *(_OWORD *)(a5 + 56) = 0u;
        *(_OWORD *)(a5 + 24) = 0u;
        *(_OWORD *)(a5 + 40) = 0u;
        *(_OWORD *)(a5 + 88) = 0u;
        *(_OWORD *)(a5 + 104) = 0u;
        *(void *)(a5 + 120) = 0;
        *(int64x2_t *)(a5 + 8) = vdupq_n_s64(0x3DA5FD7FE0000000uLL);
        double v108 = v106;
        *(double *)a5 = v108 / (v103 * v107);
        *(double *)(a5 + 72) = (v108 + v103 * v104) / v103;
        *(double *)(a5 + 80) = v105;
        *(void *)(a5 + 64) = 0x3FF0000000000000;
        unint64_t v78 = 3;
      }
      int64x2_t v67 = vdupq_n_s64(v78);
LABEL_60:
      *(int64x2_t *)(a5 + 128) = v67;
      return result;
    default:
      goto LABEL_45;
  }
}

void DspLib::LoudspeakerManagerV2::ModelManager::initialize(void **this, unint64_t a2)
{
  this[12] = this[11];
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)(this + 17), 1uLL);
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)(this + 20), a2);
  std::vector<DspLib::Biquad::Section>::reserve(this + 23, 3uLL);
  this[24] = this[23];
}

void std::vector<DspLib::Biquad::Section>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 20;
    long long v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(v3, a2);
    BOOL v7 = &v6[20 * v5];
    float v9 = &v6[20 * v8];
    float v11 = (char *)*a1;
    float v10 = (char *)a1[1];
    float v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v13;
        v12 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      float v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<DspLib::Biquad::SDomainSection>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    long long v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v3, a2);
    BOOL v7 = &v6[24 * v5];
    float v9 = &v6[24 * v8];
    float v11 = (char *)*a1;
    float v10 = (char *)a1[1];
    float v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      float v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<DspLib::LoudspeakerManagerV2::ModelCollection>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xF02806ABC74BE1FBLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::LoudspeakerManagerV2::ModelCollection>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 2456 * a2;
  }
}

__n128 DspLib::LoudspeakerManagerV2::ModelManager::pageInRootsPath(DspLib::LoudspeakerManagerV2::ModelManager *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v29[0] = xmmword_1BB872F90;
  v29[1] = unk_1BB872FA0;
  v29[2] = xmmword_1BB872FB0;
  v29[3] = unk_1BB872FC0;
  v28[0] = xmmword_1BB872FD0;
  v28[1] = unk_1BB872FE0;
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 12);
  unint64_t v4 = (uint64_t *)((char *)this + 88);
  v28[2] = xmmword_1BB872FF0;
  v28[3] = unk_1BB873000;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - v2) >> 2);
  MEMORY[0x1F4188790](this);
  BOOL v7 = (char *)v28 - v6;
  float v9 = (char *)v28 + 4 * v8 - v6;
  float v10 = (char *)v28 - v6;
  do
  {
    *(_DWORD *)float v10 = 1065353216;
    *(void *)(v10 + 12) = 0;
    *(void *)(v10 + 4) = 0;
    v10 += 20;
  }
  while (v10 != v9);
  uint64_t v11 = *((void *)this + 11);
  uint64_t v12 = *((void *)this + 12) - v11;
  if (v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 2);
    unsigned int v15 = 1;
    do
    {
      uint64_t v16 = 5 * v13;
      float v17 = (long long *)(v11 + 4 * v16);
      float v18 = &v7[4 * v16];
      long long v19 = *v17;
      *((_DWORD *)v18 + 4) = *((_DWORD *)v17 + 4);
      *(_OWORD *)float v18 = v19;
      uint64_t v13 = v15;
      BOOL v20 = v14 > v15++;
    }
    while (v20);
  }
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v4, 3uLL);
  DspLib::sPolynomialToBiquadCoefficients((double *)v29, 6000.0, 8, (DspLib *)v28, (const double *)8, v4, *((_DWORD *)this + 3));
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v4, v5);
  uint64_t v22 = *((void *)this + 11);
  if (*((void *)this + 12) != v22)
  {
    uint64_t v23 = 0;
    unsigned int v24 = 1;
    do
    {
      uint64_t v25 = 5 * v23;
      double v26 = (__n128 *)&v7[4 * v25];
      double v27 = (__n128 *)(v22 + 4 * v25);
      __n128 result = *v26;
      v27[1].n128_u32[0] = v26[1].n128_u32[0];
      *double v27 = result;
      uint64_t v23 = v24;
      uint64_t v22 = *((void *)this + 11);
      BOOL v20 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 12) - v22) >> 2) > v24++;
    }
    while (v20);
  }
  return result;
}

void std::vector<DspLib::Biquad::Section>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::Biquad::Section>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 20 * a2;
  }
}

void *DspLib::LoudspeakerManagerV2::ModelManager::uninitialize(void *this)
{
  this[12] = this[11];
  this[9] = this[8];
  this[18] = this[17];
  this[21] = this[20];
  this[24] = this[23];
  return this;
}

void DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::LoudspeakerManagerV2::ModelManager *this, const DspLib::AlgorithmParametersInstance *a2)
{
  unint64_t v4 = (float *)DspLib::AlgorithmParametersInstance::group(a2, 2u);
  *(unsigned char *)this = v4[3] != 0.0;
  *((unsigned char *)this + 1) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, 0) != 0.0;
  float v5 = v4[12] * 0.01;
  *((float *)this + 13) = v5;
  float v6 = v4[13] * 0.01;
  *((float *)this + 14) = v6;
  uint64_t v7 = *((void *)this + 8);
  if (*((void *)this + 9) != v7)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 4;
    do
    {
      int v10 = (int)v4[v9];
      uint64_t v11 = v7 + 2456 * v8;
      BOOL v31 = a2;
      int v32 = v10;
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v31, (long long *)v11);
      if (!*((unsigned char *)this + 60))
      {
        long long v12 = *(_OWORD *)(v11 + 128);
        uint64_t v13 = v7 + 2456 * v8;
        *(_OWORD *)(v13 + 2384) = *(_OWORD *)(v11 + 144);
        long long v14 = *(_OWORD *)(v11 + 176);
        *(_OWORD *)(v13 + 2400) = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v13 + 2416) = v14;
        long long v15 = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(v13 + 2320) = *(_OWORD *)(v11 + 80);
        long long v16 = *(_OWORD *)(v11 + 112);
        *(_OWORD *)(v13 + 2336) = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v13 + 2352) = v16;
        *(_OWORD *)(v13 + 2368) = v12;
        long long v17 = *(_OWORD *)v11;
        *(_OWORD *)(v13 + 2256) = *(_OWORD *)(v11 + 16);
        long long v18 = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(v13 + 2272) = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v13 + 2288) = v18;
        *(_OWORD *)(v13 + 2304) = v15;
        *(void *)(v13 + 2432) = *(void *)(v11 + 192);
        *(_OWORD *)(v13 + 2240) = v17;
        *(unsigned char *)(v13 + 2256) = 1;
      }
      uint64_t v19 = v7 + 2456 * v8;
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v31, (long long *)(v19 + 424));
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v31, (long long *)(v19 + 848));
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v31, (long long *)(v19 + 1272));
      DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()((uint64_t)&v31, (long long *)(v19 + 1696));
      uint64_t v20 = DspLib::AlgorithmParametersInstance::group(a2, v10 + 18);
      DspLib::LoudspeakerManagerV2::ThermalCoefficients::setParameters(v19 + 2120, v20, 15, *((unsigned __int8 *)this + 48));
      uint64_t v21 = (v10 + 15);
      *(unsigned char *)(v19 + 2188) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1800000000) != 0.0;
      *(double *)(v19 + 2192) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1900000000)
                              * 6.28318531;
      *(double *)(v19 + 2200) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1A00000000);
      float v22 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1B00000000);
      *(double *)(v19 + 2208) = DspLib::dB2Amp(v23, v22);
      float v24 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v21 | 0x1C00000000);
      *(double *)(v19 + 2216) = DspLib::dB2Amp(v25, -v24);
      uint64_t v26 = (v10 + 9);
      *(unsigned char *)(v19 + 2440) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v26 | 0x1D00000000) != 0.0;
      *(unsigned char *)(v19 + 2441) = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v26 | 0x1E00000000) != 0.0;
      float v27 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v26 | 0x2000000000) * 0.0001;
      float v28 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v26 | 0x2100000000) * 0.0001;
      float v29 = (float)(DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v26 | 0x2200000000) * 0.000001)
          / 140002.31;
      float v30 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v26 | 0x2300000000) * 0.001;
      *(double *)(v19 + 2448) = (float)((float)(v27 * v28)
                                      / (float)((float)(v30
                                                      + (float)((float)(v28
                                                                      * DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)a2, v26 | 0x2400000000))* v28))* v29));
      unint64_t v8 = v9 - 3;
      uint64_t v7 = *((void *)this + 8);
      ++v9;
    }
    while (0xF02806ABC74BE1FBLL * ((*((void *)this + 9) - v7) >> 3) > v8);
  }
}

void DspLib::LoudspeakerManagerV2::ModelManager::setParameters(DspLib::AlgorithmParametersInstance const&)::$_0::operator()(uint64_t a1, long long *a2)
{
  BOOL v3 = *(DspLib::AlgorithmParametersInstance **)a1;
  int v4 = *(_DWORD *)(a1 + 8) + 3 * *((_DWORD *)a2 + 105);
  uint64_t v5 = (v4 + 3);
  uint64_t v6 = DspLib::AlgorithmParametersInstance::group(*(DspLib::AlgorithmParametersInstance **)a1, v4 + 3);
  *((_DWORD *)a2 + 1) = *(_DWORD *)(v6 + 4);
  *((unsigned char *)a2 + 200) = *(float *)v6 >= 0.5;
  *((unsigned char *)a2 + 201) = *(float *)(v6 + 12) >= 0.5;
  *((unsigned char *)a2 + 202) = *(float *)(v6 + 36) >= 0.5;
  *((unsigned char *)a2 + 203) = *(float *)(v6 + 56) >= 0.5;
  *((unsigned char *)a2 + 217) = *(float *)(v6 + 92) >= 0.5;
  if (DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)v3, v5 | 0x200000000) == 0.0)
  {
    char v14 = 0;
    *(void *)((char *)a2 + 60) = 0;
    *(void *)((char *)a2 + 52) = 0;
    float v8 = 0.0;
    *((unsigned char *)a2 + 76) = 0;
    int v12 = 0;
    int v13 = 0;
    *(void *)((char *)a2 + 68) = 0;
  }
  else
  {
    float v8 = *(float *)(v6 + 16);
    float v9 = *(float *)(v6 + 20) * 0.001;
    *(void *)&long long v10 = *(void *)(v6 + 24);
    uint64_t v31 = *(void *)(v6 + 84);
    BOOL v11 = *(float *)(v6 + 72) == 2;
    *((unsigned char *)a2 + 216) = v11;
    v36[0] = v8;
    v36[1] = v9;
    *((void *)&v10 + 1) = v31;
    long long v37 = v10;
    uint64_t v7 = (DspLib *)DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v36, v11, (uint64_t)v38);
    int v12 = v31;
    *(long long *)((char *)a2 + 52) = *(_OWORD *)v38;
    *(long long *)((char *)a2 + 61) = *(_OWORD *)&v38[9];
    int v13 = HIDWORD(v31);
    char v14 = 1;
  }
  *((unsigned char *)a2 + 92) = v14;
  if (*(float *)(v6 + 32) == 0.0 || *(float *)(v6 + 8) == 0.0)
  {
    char v16 = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((unsigned char *)a2 + 120) = 0;
    *((void *)a2 + 14) = 0;
  }
  else
  {
    float v15 = *(float *)(v6 + 40) * 0.001;
    v32[0] = v8;
    v32[1] = v15;
    uint64_t v33 = *(void *)(v6 + 44);
    int v34 = v12;
    int v35 = v13;
    uint64_t v7 = (DspLib *)DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(v32, 0, (uint64_t)v38);
    a2[6] = *(_OWORD *)v38;
    *(long long *)((char *)a2 + 105) = *(_OWORD *)&v38[9];
    char v16 = 1;
  }
  *((unsigned char *)a2 + 136) = v16;
  if (*(float *)(v6 + 52) == 0.0)
  {
    char v19 = 0;
    *(void *)((char *)a2 + 25) = 0;
    *(void *)((char *)a2 + 20) = 0;
  }
  else
  {
    uint64_t v7 = (DspLib *)DspLib::LoudspeakerSystemIDV2::tsParametersToCoeffs(*(float *)(v6 + 64), *(float *)(v6 + 68), *(float *)(v6 + 60));
    *(void *)((char *)a2 + 20) = v7;
    *((_DWORD *)a2 + 7) = v17;
    *((unsigned char *)a2 + 32) = v18;
    char v19 = 1;
  }
  *((unsigned char *)a2 + 48) = v19;
  float v20 = *(float *)(v6 + 76) * 6.2832;
  *((float *)a2 + 51) = v20 * DspLib::dB2Amp(v7, *(float *)(v6 + 80));
  *((float *)a2 + 52) = v20;
  BOOL v21 = *(float *)(v6 + 72) < 0.5;
  long long v22 = a2[10];
  long long v23 = a2[11];
  long long v24 = a2[8];
  *(long long *)((char *)a2 + 364) = a2[9];
  *(long long *)((char *)a2 + 380) = v22;
  *(long long *)((char *)a2 + 396) = v23;
  long long v25 = a2[6];
  long long v26 = a2[7];
  long long v27 = a2[4];
  *(long long *)((char *)a2 + 300) = a2[5];
  *(long long *)((char *)a2 + 316) = v25;
  *(long long *)((char *)a2 + 332) = v26;
  *(long long *)((char *)a2 + 348) = v24;
  long long v28 = *a2;
  *(long long *)((char *)a2 + 236) = a2[1];
  long long v29 = a2[3];
  *(long long *)((char *)a2 + 252) = a2[2];
  char v30 = !v21;
  *((unsigned char *)a2 + 212) = v30;
  *(void *)((char *)a2 + 412) = *((void *)a2 + 24);
  *(long long *)((char *)a2 + 268) = v29;
  *(long long *)((char *)a2 + 284) = v27;
  *(long long *)((char *)a2 + 220) = v28;
}

float DspLib::LoudspeakerManagerV2::ThermalCoefficients::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v4 = *(float *)(a2 + 48);
  *(float *)(a1 + 40) = v4;
  float v5 = *(float *)(a2 + 52);
  *(float *)(a1 + 44) = v5;
  float v6 = *(float *)(a2 + 40);
  *(float *)(a1 + 48) = v6;
  float v7 = *(float *)(a2 + 44);
  *(float *)(a1 + 52) = v7;
  if (*(float *)(a2 + 56) >= 0.5)
  {
    float v9 = *(float *)(a2 + 4);
    *(float *)(a1 + 4) = v9;
    float v8 = *(float *)a2;
  }
  else if (a4)
  {
    float v9 = *(float *)(a1 + 56);
    float v8 = *(float *)(a1 + 60);
    *(float *)(a1 + 4) = v9;
  }
  else
  {
    *(_DWORD *)(a1 + 4) = -998637568;
    float v8 = -1000.0;
    float v9 = -1000.0;
  }
  *(float *)(a1 + 8) = v8;
  if (v9 < v4 || v9 > v5 || v8 < v6)
  {
    *(unsigned char *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    float v12 = 0.0;
  }
  else
  {
    BOOL v13 = v8 > v7;
    *(unsigned char *)(a1 + 64) = v8 <= v7;
    float v14 = *(float *)(a2 + 32);
    *(float *)(a1 + 32) = v14;
    float v15 = *(float *)(a2 + 36);
    *(float *)(a1 + 36) = v15;
    float v12 = 0.0;
    if (!v13) {
      float v12 = (float)(v14 + (float)((float)((float)(v15 - v14) / 15.0) * -20.0))
    }
          + (float)((float)((float)(v15 - v14) / 15.0) * v8);
  }
  *(float *)a1 = v12;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

double DspLib::LoudspeakerManagerV2::ModelManager::getSDomainModel@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, int a5@<W4>, _OWORD *a6@<X8>)
{
  long long v8 = *(_OWORD *)(a2 + 176);
  v37[10] = *(_OWORD *)(a2 + 160);
  v37[11] = v8;
  uint64_t v38 = *(void *)(a2 + 192);
  long long v9 = *(_OWORD *)(a2 + 112);
  v37[6] = *(_OWORD *)(a2 + 96);
  v37[7] = v9;
  long long v10 = *(_OWORD *)(a2 + 144);
  v37[8] = *(_OWORD *)(a2 + 128);
  v37[9] = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  v37[2] = *(_OWORD *)(a2 + 32);
  v37[3] = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  v37[4] = *(_OWORD *)(a2 + 64);
  v37[5] = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  v37[0] = *(_OWORD *)a2;
  v37[1] = v13;
  long long v14 = *(_OWORD *)(a3 + 176);
  v35[10] = *(_OWORD *)(a3 + 160);
  v35[11] = v14;
  v36[0] = *(_OWORD *)(a3 + 192);
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)(a3 + 204);
  long long v15 = *(_OWORD *)(a3 + 112);
  v35[6] = *(_OWORD *)(a3 + 96);
  v35[7] = v15;
  long long v16 = *(_OWORD *)(a3 + 144);
  v35[8] = *(_OWORD *)(a3 + 128);
  v35[9] = v16;
  long long v17 = *(_OWORD *)(a3 + 48);
  _OWORD v35[2] = *(_OWORD *)(a3 + 32);
  v35[3] = v17;
  long long v18 = *(_OWORD *)(a3 + 80);
  v35[4] = *(_OWORD *)(a3 + 64);
  v35[5] = v18;
  long long v19 = *(_OWORD *)(a3 + 16);
  v35[0] = *(_OWORD *)a3;
  v35[1] = v19;
  uint64_t v20 = a3 + 204;
  BOOL v21 = (float32x2_t *)(a3 + 220);
  *a4 = DspLib::LoudspeakerManagerV2::updateAppliedModel((uint64_t)v37, (uint64_t)v35, (long long *)(a3 + 220), *(unsigned char *)a1, a5, *(float *)(a1 + 52), *(float *)(a1 + 56));
  DspLib::LoudspeakerManagerV2::modelPolynomial(v21, *(_DWORD *)(a3 + 420), v20, (unsigned char *)(a3 + 216), (uint64_t)v32);
  if ((void)v34)
  {
    uint64_t v22 = 0;
    unsigned int v23 = 1;
    while ((*((void *)v32 + v22) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      uint64_t v22 = v23;
      BOOL v24 = (unint64_t)v34 > v23++;
      if (!v24) {
        goto LABEL_5;
      }
    }
    goto LABEL_10;
  }
LABEL_5:
  if (*((void *)&v34 + 1))
  {
    uint64_t v25 = 0;
    unsigned int v26 = 1;
    while ((*((void *)v33 + v25) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      uint64_t v25 = v26;
      BOOL v24 = *((void *)&v34 + 1) > (unint64_t)v26++;
      if (!v24) {
        goto LABEL_9;
      }
    }
LABEL_10:
    *(void *)&long long v30 = 0;
    a6[7] = 0u;
    a6[8] = 0u;
    a6[5] = 0u;
    a6[6] = 0u;
    a6[3] = 0u;
    a6[4] = 0u;
    a6[1] = 0u;
    a6[2] = 0u;
    *a6 = 0u;
    return *(double *)&v30;
  }
LABEL_9:
  long long v27 = v33[3];
  a6[6] = v33[2];
  a6[7] = v27;
  a6[8] = v34;
  long long v28 = v32[3];
  a6[2] = v32[2];
  a6[3] = v28;
  long long v29 = v33[1];
  a6[4] = v33[0];
  a6[5] = v29;
  long long v30 = v32[1];
  *a6 = v32[0];
  a6[1] = v30;
  return *(double *)&v30;
}

uint64_t DspLib::LoudspeakerManagerV2::updateAppliedModel(uint64_t a1, uint64_t a2, long long *a3, char a4, int a5, float a6, float a7)
{
  long long v40 = a3[10];
  long long v41 = a3[11];
  long long v13 = (void *)((char *)a3 + 52);
  long long v14 = (long long *)(a2 + 52);
  uint64_t v42 = *((void *)a3 + 24);
  long long v36 = a3[6];
  long long v37 = a3[7];
  long long v38 = a3[8];
  long long v39 = a3[9];
  long long v32 = a3[2];
  long long v33 = a3[3];
  long long v34 = a3[4];
  long long v35 = a3[5];
  long long v30 = *a3;
  long long v31 = a3[1];
  if (*(unsigned char *)a1 || (a4 & 1) != 0 || *(unsigned char *)(a2 + 217))
  {
    *((float *)a3 + 1) = *((float *)a3 + 1) + (float)((float)(*(float *)(a2 + 4) - *((float *)a3 + 1)) * 0.2);
    *((float *)a3 + 7) = *((float *)a3 + 7) + (float)((float)(*(float *)(a2 + 28) - *((float *)a3 + 7)) * 0.2);
    float32x2_t v15 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
    *(float32x2_t *)((char *)a3 + 20) = vmla_f32(*(float32x2_t *)((char *)a3 + 20), v15, vsub_f32(*(float32x2_t *)(a2 + 20), *(float32x2_t *)((char *)a3 + 20)));
    float v16 = *((float *)a3 + 16);
    char v17 = 1;
    if (v16 <= 0.0) {
      char v17 = *(unsigned char *)(a2 + 216) != 0;
    }
    DspLib::LoudspeakerManagerV2::smoothResonatorCoefficients((uint64_t)v13, (uint64_t)v14, v17);
    *(float32x2_t *)((char *)a3 + 100) = vmla_f32(*(float32x2_t *)((char *)a3 + 100), v15, vsub_f32(*(float32x2_t *)(a2 + 100), *(float32x2_t *)((char *)a3 + 100)));
    *((float32x2_t *)a3 + 14) = vmla_f32((float32x2_t)a3[7], v15, vsub_f32(*(float32x2_t *)(a2 + 112), (float32x2_t)a3[7]));
    *((_DWORD *)a3 + 24) = 0;
    *((_DWORD *)a3 + 27) = 0;
    *(unsigned char *)a3 = 1;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_7;
  }
  *((float *)a3 + 1) = *((float *)a3 + 1) + (float)((float)(*(float *)(a1 + 4) - *((float *)a3 + 1)) * 0.2);
  if (!*(unsigned char *)(a1 + 48) || !*(unsigned char *)(a2 + 48))
  {
    char v24 = 0;
    *(void *)((char *)a3 + 25) = 0;
    *(void *)((char *)a3 + 20) = 0;
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    *((float *)a3 + 7) = *((float *)a3 + 7) + (float)((float)(*(float *)(a1 + 28) - *((float *)a3 + 7)) * 0.2);
    *(float32x2_t *)((char *)a3 + 20) = vmla_f32(*(float32x2_t *)((char *)a3 + 20), (float32x2_t)vdup_n_s32(0x3E4CCCCDu), vsub_f32(*(float32x2_t *)(a1 + 20), *(float32x2_t *)((char *)a3 + 20)));
    char v24 = 1;
LABEL_34:
    *((unsigned char *)a3 + 48) = v24;
  }
  if (!*(unsigned char *)(a1 + 92) || !*(unsigned char *)(a2 + 92))
  {
    char v27 = 0;
    void *v13 = 0;
    *(void *)((char *)a3 + 60) = 0;
    *((unsigned char *)a3 + 76) = 0;
    *(void *)((char *)a3 + 68) = 0;
LABEL_45:
    *((unsigned char *)a3 + 92) = v27;
    goto LABEL_46;
  }
  if (*(unsigned char *)(a1 + 88))
  {
    float v25 = *(float *)(a1 + 64);
    if (*(unsigned char *)(a2 + 216))
    {
      if (v25 != 0.0)
      {
        char v26 = 1;
LABEL_44:
        DspLib::LoudspeakerManagerV2::smoothResonatorCoefficients((uint64_t)v13, a1 + 52, v26);
        char v27 = 1;
        goto LABEL_45;
      }
    }
    else if (v25 == 0.0)
    {
      char v26 = 0;
      goto LABEL_44;
    }
    long long v28 = *v14;
    *(_OWORD *)(a1 + 61) = *(long long *)((char *)v14 + 9);
    *(_OWORD *)(a1 + 52) = v28;
    char v26 = *(unsigned char *)(a2 + 216) != 0;
    goto LABEL_44;
  }
LABEL_46:
  if (*(unsigned char *)(a1 + 136) && *(unsigned char *)(a2 + 136))
  {
    if (*(unsigned char *)(a1 + 132))
    {
      float32x2_t v29 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
      *(float32x2_t *)((char *)a3 + 100) = vmla_f32(*(float32x2_t *)((char *)a3 + 100), v29, vsub_f32(*(float32x2_t *)(a1 + 100), *(float32x2_t *)((char *)a3 + 100)));
      *((float32x2_t *)a3 + 14) = vmla_f32((float32x2_t)a3[7], v29, vsub_f32(*(float32x2_t *)(a1 + 112), (float32x2_t)a3[7]));
      *((_DWORD *)a3 + 24) = 0;
      *((_DWORD *)a3 + 27) = 0;
      *((unsigned char *)a3 + 136) = 1;
    }
  }
  else
  {
    *((void *)a3 + 12) = 0;
    *((void *)a3 + 13) = 0;
    *((unsigned char *)a3 + 120) = 0;
    *((void *)a3 + 14) = 0;
    *((unsigned char *)a3 + 136) = 0;
  }
LABEL_7:
  float v18 = *((float *)a3 + 1);
  BOOL v19 = (float)(vabds_f32(v18, *(float *)(a1 + 4)) / *(float *)(a1 + 4)) <= a6 || *(unsigned char *)(a1 + 16) == 0;
  if (v19
    && ((float)(vabds_f32(*((float *)a3 + 15), *(float *)(a1 + 60)) / *(float *)(a1 + 60)) > a7
      ? (BOOL v20 = *(unsigned char *)(a1 + 132) == 0)
      : (BOOL v20 = 1),
        v20))
  {
    BOOL v22 = (float)(vabds_f32(v18, *(float *)(a2 + 4)) / *(float *)(a2 + 4)) > a6 && *(unsigned char *)a1 != 0;
    uint64_t result = 1;
    if (a5 != 1 && !v22)
    {
      uint64_t result = 0;
      *((void *)a3 + 24) = v42;
      a3[10] = v40;
      a3[11] = v41;
      a3[6] = v36;
      a3[7] = v37;
      a3[8] = v38;
      a3[9] = v39;
      a3[2] = v32;
      a3[3] = v33;
      a3[4] = v34;
      a3[5] = v35;
      *a3 = v30;
      a3[1] = v31;
    }
  }
  else
  {
    uint64_t result = 1;
  }
  *((unsigned char *)a3 + 1) = result;
  return result;
}

void DspLib::LoudspeakerManagerV2::ModelManager::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  float v7 = (float32x2_t *)(v4 + 2456 * v6);
  BOOL v9 = v5 < 2 && v7[305].i8[0] == 0;
  long long v10 = v7 + 280;
  int v73 = v7[305].u8[0];
  switch(v5)
  {
    case 1u:
      uint64_t v11 = v4 + 2456 * v6 + 424;
      goto LABEL_11;
    case 2u:
      BOOL v71 = v9;
      float v16 = (float32x2_t *)(v4 + 2456 * v6);
      uint64_t v11 = (uint64_t)&v16[106];
      float64x2_t v119 = 0u;
      uint64x2_t v120 = 0u;
      float64x2_t v117 = 0u;
      float64x2_t v118 = 0u;
      long long v115 = 0u;
      float64x2_t v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v112 = 0u;
      float v72 = (float *)&v16[288];
      BOOL v93 = v16[288].f32[0] != 0.0;
      int v17 = v16[158].i32[1];
      DspLib::LoudspeakerManagerV2::modelPolynomial(v16 + 106, v17, (uint64_t)&v16[131] + 4, &v16[133], (uint64_t)v85);
      float64x2_t v100 = v90;
      float64x2_t v101 = v91;
      uint64x2_t v102 = v92;
      long long v96 = v86;
      long long v97 = v87;
      float64x2_t v98 = v88;
      float64x2_t v99 = v89;
      float v18 = v16[280].f32[1];
      long long v94 = *(_OWORD *)v85;
      long long v95 = *(_OWORD *)&v85[16];
      if (v18 <= 0.0)
      {
        float64x2_t v109 = v100;
        float64x2_t v110 = v101;
        uint64x2_t v111 = v102;
        long long v105 = v96;
        long long v106 = v97;
        float64x2_t v107 = v98;
        float64x2_t v108 = v99;
        long long v20 = v94;
        long long v19 = v95;
      }
      else
      {
        DspLib::LoudspeakerManagerV2::modelPolynomial(v10, 2, (uint64_t)&v16[131] + 4, &v93, (uint64_t)v85);
        float64x2_t v109 = v90;
        float64x2_t v110 = v91;
        uint64x2_t v111 = v92;
        long long v105 = v86;
        long long v106 = v87;
        float64x2_t v107 = v88;
        float64x2_t v108 = v89;
        long long v20 = *(_OWORD *)v85;
        long long v19 = *(_OWORD *)&v85[16];
      }
      long long v103 = v20;
      long long v104 = v19;
      DspLib::LoudspeakerManagerV2::modelPolynomial((float32x2_t *)(v4 + 2456 * v6 + 1068), v17, (uint64_t)&v16[131] + 4, &v16[133], (uint64_t)&v112);
      long long v13 = (long long *)((char *)&v16[286] + 4);
      BOOL v9 = v71;
      goto LABEL_22;
    case 3u:
      uint64_t v11 = v4 + 2456 * v6 + 1272;
      goto LABEL_11;
    case 4u:
      uint64_t v11 = v4 + 2456 * v6 + 1696;
LABEL_11:
      float64x2_t v119 = 0u;
      uint64x2_t v120 = 0u;
      float64x2_t v117 = 0u;
      float64x2_t v118 = 0u;
      long long v115 = 0u;
      float64x2_t v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      uint64x2_t v111 = 0u;
      long long v112 = 0u;
      float64x2_t v109 = 0u;
      float64x2_t v110 = 0u;
      float64x2_t v107 = 0u;
      float64x2_t v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      float64x2_t v101 = 0u;
      uint64x2_t v102 = 0u;
      float64x2_t v99 = 0u;
      float64x2_t v100 = 0u;
      long long v97 = 0u;
      float64x2_t v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v94 = 0u;
      uint64_t v12 = v4 + 2456 * v6;
      long long v13 = (long long *)(v12 + 2292);
      float v72 = (float *)(v12 + 2304);
      BOOL v93 = *(float *)(v12 + 2304) != 0.0;
      goto LABEL_12;
    default:
      float64x2_t v119 = 0u;
      uint64x2_t v120 = 0u;
      uint64_t v11 = v4 + 2456 * v6;
      float64x2_t v117 = 0u;
      float64x2_t v118 = 0u;
      long long v115 = 0u;
      float64x2_t v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      uint64x2_t v111 = 0u;
      long long v112 = 0u;
      float64x2_t v109 = 0u;
      float64x2_t v110 = 0u;
      float64x2_t v107 = 0u;
      float64x2_t v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      float64x2_t v101 = 0u;
      uint64x2_t v102 = 0u;
      float64x2_t v99 = 0u;
      float64x2_t v100 = 0u;
      long long v97 = 0u;
      float64x2_t v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v94 = 0u;
      long long v13 = (long long *)(v11 + 2292);
      float v72 = (float *)(v11 + 2304);
      BOOL v93 = *(float *)(v11 + 2304) != 0.0;
      if (!v5)
      {
LABEL_12:
        DspLib::LoudspeakerManagerV2::modelPolynomial((float32x2_t *)v11, *(_DWORD *)(v11 + 420), v11 + 204, (unsigned char *)(v11 + 216), (uint64_t)v85);
        float64x2_t v100 = v90;
        float64x2_t v101 = v91;
        uint64x2_t v102 = v92;
        long long v96 = v86;
        long long v97 = v87;
        float64x2_t v98 = v88;
        float64x2_t v99 = v89;
        long long v94 = *(_OWORD *)v85;
        long long v95 = *(_OWORD *)&v85[16];
        if (*(float *)(v4 + 2456 * v6 + 2244) <= 0.0)
        {
          float64x2_t v109 = v100;
          float64x2_t v110 = v101;
          uint64x2_t v111 = v102;
          long long v105 = v96;
          long long v106 = v97;
          float64x2_t v107 = v98;
          float64x2_t v108 = v99;
          long long v15 = v94;
          long long v14 = v95;
        }
        else
        {
          DspLib::LoudspeakerManagerV2::modelPolynomial(v10, v5, v11 + 204, &v93, (uint64_t)v85);
          float64x2_t v109 = v90;
          float64x2_t v110 = v91;
          uint64x2_t v111 = v92;
          long long v105 = v86;
          long long v106 = v87;
          float64x2_t v107 = v88;
          float64x2_t v108 = v89;
          long long v15 = *(_OWORD *)v85;
          long long v14 = *(_OWORD *)&v85[16];
        }
        long long v103 = v15;
        long long v104 = v14;
        DspLib::LoudspeakerManagerV2::modelPolynomial((float32x2_t *)(v11 + 220), *(_DWORD *)(v11 + 420), v11 + 204, (unsigned char *)(v11 + 216), (uint64_t)v85);
        float64x2_t v118 = v90;
        float64x2_t v119 = v91;
        uint64x2_t v120 = v92;
        long long v114 = v86;
        long long v115 = v87;
        float64x2_t v116 = v88;
        float64x2_t v117 = v89;
        long long v112 = *(_OWORD *)v85;
        long long v113 = *(_OWORD *)&v85[16];
      }
LABEL_22:
      uint64_t v21 = 0;
      int v22 = *(unsigned __int8 *)(v11 + 221);
      unsigned int v23 = (float32x4_t *)(a2 + 8960);
      do
      {
        *v23++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&v103 + v21)), *(float64x2_t *)((char *)&v103 + v21 + 16));
        v21 += 32;
      }
      while (v21 != 64);
      uint64_t v24 = 0;
      *(float32x4_t *)(a2 + 8992) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v107), v108);
      *(float32x4_t *)(a2 + 9008) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v109), v110);
      *(float32x2_t *)(a2 + 9024) = vcvt_f32_f64(vcvtq_f64_u64(v111));
      float v25 = (float32x4_t *)(a2 + 9032);
      do
      {
        *v25++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&v94 + v24)), *(float64x2_t *)((char *)&v94 + v24 + 16));
        v24 += 32;
      }
      while (v24 != 64);
      *(float32x4_t *)(a2 + 9064) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v98), v99);
      *(float32x4_t *)(a2 + 9080) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100), v101);
      *(float32x2_t *)(a2 + 9096) = vcvt_f32_f64(vcvtq_f64_u64(v102));
      float v26 = 0.0;
      if (v22) {
        float v26 = 1.0;
      }
      *(float *)(a2 + 8928) = v26;
      uint64_t v27 = *(void *)(a1 + 160) + 20 * v6;
      int v28 = *(_DWORD *)(v27 + 16);
      long long v83 = *(_OWORD *)v27;
      int v84 = v28;
      DspLib::Biquad::write((uint64_t)&v83, a2 + 9184);
      uint64_t v29 = *(void *)(a1 + 64) + 2456 * *(unsigned int *)(a1 + 4);
      DspLib::LoudspeakerManagerV2::displacementPassiveRadiatorPolynomial(v29 + 848, v29 + 2440, *(unsigned __int8 *)(v29 + 1064), (uint64_t)v85);
      uint64_t v30 = 0;
      float64x2_t v100 = v90;
      float64x2_t v101 = v91;
      uint64x2_t v102 = v92;
      long long v96 = v86;
      long long v97 = v87;
      float64x2_t v98 = v88;
      float64x2_t v99 = v89;
      long long v31 = (float32x4_t *)(a2 + 9204);
      long long v94 = *(_OWORD *)v85;
      long long v95 = *(_OWORD *)&v85[16];
      do
      {
        *v31++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&v94 + v30)), *(float64x2_t *)((char *)&v94 + v30 + 16));
        v30 += 32;
      }
      while (v30 != 64);
      *(float32x4_t *)(a2 + 9236) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v98), v99);
      *(float32x4_t *)(a2 + 9252) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100), v101);
      *(float32x2_t *)(a2 + 9268) = vcvt_f32_f64(vcvtq_f64_u64(v102));
      uint64_t v32 = *(void *)(a1 + 64) + 2456 * *(unsigned int *)(a1 + 4);
      DspLib::LoudspeakerManagerV2::displacementPassiveRadiatorPolynomial(v32 + 2240, v32 + 2440, *(float *)(v32 + 2304) != 0.0, (uint64_t)v85);
      uint64_t v33 = 0;
      float64x2_t v100 = v90;
      float64x2_t v101 = v91;
      uint64x2_t v102 = v92;
      long long v96 = v86;
      long long v97 = v87;
      float64x2_t v98 = v88;
      float64x2_t v99 = v89;
      long long v34 = (float32x4_t *)(a2 + 9276);
      long long v94 = *(_OWORD *)v85;
      long long v95 = *(_OWORD *)&v85[16];
      do
      {
        *v34++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&v94 + v33)), *(float64x2_t *)((char *)&v94 + v33 + 16));
        v33 += 32;
      }
      while (v33 != 64);
      *(float32x4_t *)(a2 + 9308) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v98), v99);
      *(float32x4_t *)(a2 + 9324) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100), v101);
      *(float32x2_t *)(a2 + 9340) = vcvt_f32_f64(vcvtq_f64_u64(v102));
      DspLib::Biquad::write(*(void *)(a1 + 184), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 2), a2 + 9348);
      unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 2);
      if (v35 <= 3)
      {
        unint64_t v36 = v35 - 4;
        uint64_t v37 = a2 + 4 * ((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 2) + 9348;
        do
        {
          int v82 = 0;
          long long v81 = DspLib::Biquad::kBypassSection;
          DspLib::Biquad::write((uint64_t)&v81, v37);
          v37 += 20;
          BOOL v38 = __CFADD__(v36++, 1);
        }
        while (!v38);
      }
      float v39 = 0.0;
      if (v73) {
        float v39 = 1.0;
      }
      *(float *)(a2 + 9432) = v39;
      v80[6] = v118;
      v80[7] = v119;
      v80[8] = v120;
      v80[2] = v114;
      v80[3] = v115;
      v80[4] = v116;
      v80[5] = v117;
      v80[0] = v112;
      v80[1] = v113;
      DspLib::LoudspeakerManagerV2::updateBiquadCoefficients(v80, (uint64_t *)(a1 + 88), (uint64_t *)(a1 + 112), *(_DWORD *)(a1 + 8), v9, 48000.0);
      DspLib::Biquad::write(*(void *)(a1 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 2), a2 + 9104);
      unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 2);
      if (v40 <= 3)
      {
        unint64_t v41 = v40 - 4;
        uint64_t v42 = a2 + 4 * ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 2) + 9104;
        do
        {
          int v79 = 0;
          long long v78 = DspLib::Biquad::kBypassSection;
          DspLib::Biquad::write((uint64_t)&v78, v42);
          v42 += 20;
          BOOL v38 = __CFADD__(v41++, 1);
        }
        while (!v38);
      }
      uint64_t v43 = *(void *)(a1 + 64);
      uint64_t v44 = *(void *)(a1 + 72) - v43;
      if (v44)
      {
        unint64_t v45 = 0xF02806ABC74BE1FBLL * (v44 >> 3);
        uint64_t v46 = v43 + 2120;
        unsigned int v47 = 2207;
        do
        {
          if (*(float *)v46 == 0.0) {
            float v48 = 1000.0;
          }
          else {
            float v48 = *(float *)(v46 + 8)
          }
                + (float)((float)(1.0 / *(float *)v46)
                        * (float)((float)(*(float *)(v46 + 124) / *(float *)(v46 + 4)) + -1.0));
          *(float *)(a2 + 4 * (v47 - DspLib::ComplexVector::~ComplexVector((DspLib::LoudspeakerSystemIDV1::ModelFit *)((char *)this + 8)) = v48;
          if (*(unsigned char *)(v46 + 136)) {
            float v49 = 1.0;
          }
          else {
            float v49 = 0.0;
          }
          *(float *)(a2 + 4 * v47) = v49;
          unint64_t v50 = v47 - 2206;
          v46 += 2456;
          ++v47;
        }
        while (v45 > v50);
      }
      uint64_t v51 = v4 + 2456 * v6;
      *(_DWORD *)(a2 + 8860) = *(_DWORD *)(v51 + 2244);
      *(_DWORD *)(a2 + 8864) = *(_DWORD *)(v51 + 2252);
      float v52 = *(float *)(v51 + 2312);
      long long v53 = *v13;
      *(_OWORD *)((char *)v77 + 12) = *(long long *)((char *)v13 + 12);
      v77[0] = v53;
      DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v77, 1, *v72 > 0.0, (uint64_t)v85, v52, 1.0, 1.0);
      if (!*(unsigned char *)(v51 + 2332))
      {
        *(void *)(a2 + 8868) = 0;
        *(void *)(a2 + 8876) = 0;
        *(_DWORD *)(a2 + 8892) = 0;
        *(void *)(a2 + 8884) = 0;
LABEL_58:
        int v57 = 0;
        if (*(unsigned char *)(v4 + 2456 * v6 + 2376))
        {
          uint64_t v58 = v4 + 2456 * v6;
          long long v59 = *(_OWORD *)(v58 + 2336);
          *(_OWORD *)((char *)v74 + 12) = *(_OWORD *)(v58 + 2348);
          v74[0] = v59;
          DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v74, 1, 0, (uint64_t)&v75, v52, 1.0, 1.0);
          *(_OWORD *)float v85 = v75;
          *(void *)&v85[16] = v76;
          uint64_t v60 = v75 >> 32;
          int v61 = HIDWORD(v75);
          float v62 = 0.0;
          if (*(unsigned char *)(v58 + 2372)) {
            float v62 = 1.0;
          }
        }
        else
        {
          uint64_t v60 = 0;
          int v61 = 0;
          float v62 = 0.0;
        }
        *(void *)(a2 + 8896) = v60;
        *(_DWORD *)(a2 + 8904) = v61;
        *(float *)(a2 + 8908) = v62;
        float v63 = 0.0;
        int v64 = 0;
        float v65 = 0.0;
        if (*(unsigned char *)(v4 + 2456 * v6 + 2288))
        {
          uint64_t v66 = v4 + 2456 * v6;
          float v63 = DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters(*(void *)(v66 + 2260));
          int v57 = v67;
          float v65 = 0.0;
          if (*(unsigned char *)(v66 + 2284)) {
            float v65 = 1.0;
          }
        }
        *(_DWORD *)(a2 + 8912) = v57;
        *(float *)(a2 + 8916) = v63;
        *(_DWORD *)(a2 + 8920) = v64;
        *(float *)(a2 + 8924) = v65;
        float v68 = 0.0;
        if (*(unsigned char *)(a1 + 48)) {
          float v69 = 1.0;
        }
        else {
          float v69 = 0.0;
        }
        *(float *)(a2 + 8932) = v69;
        uint64_t v70 = *(void *)(a1 + 64) + 2456 * *(unsigned int *)(a1 + 4);
        *(_DWORD *)(a2 + 8936) = *(_DWORD *)(v70 + 2124);
        *(_DWORD *)(a2 + 8940) = *(_DWORD *)(v70 + 2128);
        *(_DWORD *)(a2 + 8944) = *(_DWORD *)(v70 + 2176);
        *(_DWORD *)(a2 + 8948) = *(_DWORD *)(v70 + 2180);
        *(_DWORD *)(a2 + 8952) = *(_DWORD *)(v70 + 2120);
        if (*(unsigned char *)(v70 + 2184)) {
          float v68 = 1.0;
        }
        *(float *)(a2 + 8956) = v68;
        return;
      }
      *(float *)(a2 + 8868) = v52;
      float v54 = *(float *)&v85[16];
      *(_OWORD *)(a2 + 8872) = *(_OWORD *)&v85[4];
      float v55 = *(float *)&v85[20];
      *(_DWORD *)(a2 + 8888) = *(_DWORD *)&v85[20];
      float v56 = 0.0;
      if (*(unsigned char *)(v4 + 2456 * v6 + 2328)) {
        float v56 = 1.0;
      }
      *(float *)(a2 + 8892) = v56;
      if (v55 >= 0.0 && v54 >= 0.0) {
        goto LABEL_58;
      }
      return;
  }
}

void DspLib::LoudspeakerManagerV2::displacementPassiveRadiatorPolynomial(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(a1 + 92)) {
    BOOL v5 = *(unsigned char *)(a1 + 136) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)(a4 + 120) = 0;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)a4 = 0x3FF0000000000000;
    *(double *)(a4 + 64) = *(float *)(a1 + 4);
    int64x2_t v6 = vdupq_n_s64(1uLL);
  }
  else
  {
    double v7 = *(double *)(a2 + 8);
    if (!a3 || (float v8 = *(float *)(a1 + 64), v8 == 0.0))
    {
      double v19 = *(float *)(a1 + 4);
      float v20 = *(float *)(a1 + 56);
      float v21 = *(float *)(a1 + 60);
      float v22 = *(float *)(a1 + 100);
      float v23 = *(float *)(a1 + 104);
      float v24 = *(float *)(a1 + 112);
      float v25 = *(float *)(a1 + 68);
      double v26 = *(float *)(a1 + 72);
      *(_OWORD *)(a4 + 88) = 0u;
      *(_OWORD *)(a4 + 8) = 0u;
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_OWORD *)(a4 + 72) = 0u;
      *(_OWORD *)(a4 + 104) = 0u;
      *(void *)(a4 + 120) = 0;
      *(double *)a4 = v7 * (-v26 / v19 * (v26 * v26 / v25 + v26 * v26 / v24) / (v26 * v26 / v25 * (v26 * v26 / v24)));
      *(double *)(a4 + 88) = 1.0 / v19 * (v19 * v20 * v23 + v19 * v21 * v22 + (float)(v21 * v24) + (float)(v25 * v23));
      *(double *)(a4 + 96) = (float)(v21 * v23);
      *(double *)(a4 + 72) = 1.0 / v19 * (v19 * v22 + v19 * v20 + v25 + v24);
      *(double *)(a4 + 80) = 1.0
                           / v19
                           * (v19 * v20 * v22 + v19 * v21 + v19 * v23 + (float)(v20 * v24) + (float)(v25 * v22));
      *(void *)(a4 + 64) = 0x3FF0000000000000;
      int64x2_t v6 = (int64x2_t)xmmword_1BB872F10;
    }
    else
    {
      double v9 = *(float *)(a1 + 4);
      float v10 = *(float *)(a1 + 60);
      float v29 = *(float *)(a1 + 68);
      float v30 = *(float *)(a1 + 52);
      float v11 = *(float *)(a1 + 104);
      float v31 = *(float *)(a1 + 100);
      float v27 = *(float *)(a1 + 112);
      float v28 = *(float *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 72);
      float v12 = *(float *)&v33;
      double v13 = *(float *)&v33;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 128) = 0u;
      double v14 = v13 * v13 / v8;
      *(float *)uint64_t v32 = v30;
      *(float *)&v32[1] = v28;
      *(float *)&float v32[2] = v10;
      *(float *)&v32[3] = v8;
      *(float *)&_OWORD v32[4] = v29;
      float v15 = v14;
      DspLib::LoudspeakerSystemIDV2::coeffsToTsParameters((uint64_t)v32, 1, 1, (uint64_t)v34, v12, v15, v15);
      double v16 = v7 * (-v13 / v9 * (v14 + v13 * v13 / v27) / (v14 * (v13 * v13 / v27)));
      double v17 = v16 * (float)((float)(v35 + v37) / v36);
      *(double *)a4 = v16;
      *(double *)(a4 + 8) = v17;
      *(double *)(a4 + 104) = (float)(v10 * v11);
      double v18 = v9 * v28;
      *(double *)(a4 + 88) = 1.0
                           / v9
                           * ((float)(v28 * v27)
                            + v9 * v10
                            + v18 * v31
                            + v9 * v30 * v11
                            + (float)(v29 * v31)
                            + (float)(v8 * v11));
      *(double *)(a4 + 96) = 1.0 / v9 * ((float)(v10 * v27) + v9 * v10 * v31 + v18 * v11 + (float)(v29 * v11));
      *(double *)(a4 + 72) = 1.0 / v9 * (v27 + v9 * v30 + v9 * v31 + v8);
      *(double *)(a4 + 80) = 1.0 / v9 * ((float)(v30 * v27) + v18 + v9 * v30 * v31 + v9 * v11 + v29 + (float)(v8 * v31));
      *(void *)(a4 + 64) = 0x3FF0000000000000;
      int64x2_t v6 = (int64x2_t)xmmword_1BB872F20;
    }
  }
  *(int64x2_t *)(a4 + 128) = v6;
}

void DspLib::LoudspeakerManagerV2::updateBiquadCoefficients(_OWORD *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, double a6)
{
  long long v8 = a1[7];
  v26[2] = a1[6];
  void v26[3] = v8;
  long long v27 = a1[8];
  long long v9 = a1[3];
  void v25[2] = a1[2];
  v25[3] = v9;
  long long v10 = a1[5];
  v26[0] = a1[4];
  v26[1] = v10;
  long long v11 = a1[1];
  v25[0] = *a1;
  v25[1] = v11;
  DspLib::sPolynomialToBiquadCoefficients((uint64_t)v25, a6, v27, (DspLib *)v26, *((const double **)&v27 + 1), a3, a2, a5);
  switch(a4)
  {
    case 3:
      unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2);
      if (v17 <= 2)
      {
        std::vector<DspLib::Biquad::Section>::resize((uint64_t)a2, 3uLL);
        unint64_t v18 = v17 - 3;
        uint64_t v19 = 20 * v17;
        do
        {
          uint64_t v20 = *a2 + v19;
          *(_OWORD *)uint64_t v20 = DspLib::Biquad::kBypassSection;
          *(_DWORD *)(v20 + 16) = 0;
          v19 += 20;
          BOOL v16 = __CFADD__(v18++, 1);
        }
        while (!v16);
      }
      break;
    case 2:
      unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2);
      if (v21 <= 3)
      {
        std::vector<DspLib::Biquad::Section>::resize((uint64_t)a2, 4uLL);
        unint64_t v22 = v21 - 4;
        uint64_t v23 = 20 * v21;
        do
        {
          uint64_t v24 = *a2 + v23;
          *(_OWORD *)uint64_t v24 = DspLib::Biquad::kBypassSection;
          *(_DWORD *)(v24 + 16) = 0;
          v23 += 20;
          BOOL v16 = __CFADD__(v22++, 1);
        }
        while (!v16);
      }
      break;
    case 1:
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2);
      if (v12 <= 3)
      {
        std::vector<DspLib::Biquad::Section>::resize((uint64_t)a2, 4uLL);
        unint64_t v13 = v12 - 4;
        uint64_t v14 = 20 * v12;
        do
        {
          uint64_t v15 = *a2 + v14;
          *(_OWORD *)uint64_t v15 = DspLib::Biquad::kBypassSection;
          *(_DWORD *)(v15 + 16) = 0;
          v14 += 20;
          BOOL v16 = __CFADD__(v13++, 1);
        }
        while (!v16);
      }
      break;
  }
}

void DspLib::LoudspeakerManagerV2::ModelManager::setSpTSCalibration(uint64_t a1, char **a2)
{
  uint64_t v4 = *a2;
  BOOL v5 = a2[1];
  if (*a2 == v5)
  {
    long long v11 = *a2;
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 32);
    do
    {
      uint64_t v7 = *(void *)v4;
      if (v6 >= *(void *)(a1 + 40))
      {
        unint64_t v6 = std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__push_back_slow_path<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties const&>((uint64_t *)(a1 + 24), (long long *)v7);
      }
      else
      {
        long long v8 = *(_OWORD *)v7;
        *(void *)(v6 + 14) = *(void *)(v7 + 14);
        *(_OWORD *)unint64_t v6 = v8;
        uint64_t v9 = *(void *)(v7 + 32);
        *(void *)(v6 + 24) = *(void *)(v7 + 24);
        *(void *)(v6 + 32) = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v7 + 48);
        *(void *)(v6 + 40) = *(void *)(v7 + 40);
        *(void *)(v6 + 48) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        v6 += 56;
      }
      *(void *)(a1 + 32) = v6;
      v4 += 8;
    }
    while (v4 != v5);
    uint64_t v4 = *a2;
    long long v11 = a2[1];
  }
  uint64_t v12 = v11 - v4;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  if (0xF02806ABC74BE1FBLL * ((v14 - v13) >> 3) == v12 >> 3)
  {
    *(unsigned char *)(a1 + 16) = 1;
    if (v14 != v13)
    {
      uint64_t v15 = 0;
      unsigned int v16 = 1;
      do
      {
        DspLib::LoudspeakerManagerV2::ThermalCoefficients::setCalibration(v13 + 2456 * v15 + 2120, *(void *)&(*a2)[8 * v15]);
        uint64_t v15 = v16;
        uint64_t v13 = *(void *)(a1 + 64);
      }
      while (0xF02806ABC74BE1FBLL * ((*(void *)(a1 + 72) - v13) >> 3) > v16++);
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
}

float DspLib::LoudspeakerManagerV2::ThermalCoefficients::setCalibration(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 4);
  float v3 = *(float *)(a2 + 8);
  *(float *)(a1 + 4) = v2;
  *(float *)(a1 + 8) = v3;
  *(float *)(a1 + 56) = v2;
  *(float *)(a1 + 60) = v3;
  float v4 = *(float *)(a1 + 40);
  float v5 = *(float *)(a1 + 44);
  uint64_t v6 = 4;
  if (v5 < v2) {
    uint64_t v6 = 44;
  }
  if (v2 < v4) {
    uint64_t v6 = 40;
  }
  float v7 = *(float *)(a1 + v6);
  *(float *)(a1 + 4) = v7;
  float v8 = *(float *)(a1 + 48);
  float v9 = *(float *)(a1 + 52);
  uint64_t v10 = 8;
  if (v9 < v3) {
    uint64_t v10 = 52;
  }
  if (v3 < v8) {
    uint64_t v10 = 48;
  }
  float v11 = *(float *)(a1 + v10);
  *(float *)(a1 + 8) = v11;
  BOOL v12 = v7 >= v4;
  if (v7 > v5) {
    BOOL v12 = 0;
  }
  if (v11 < v8) {
    BOOL v12 = 0;
  }
  if (v11 > v9) {
    BOOL v12 = 0;
  }
  *(unsigned char *)(a1 + 64) = v12;
  float result = (float)(*(float *)(a1 + 32)
                 + (float)((float)((float)(*(float *)(a1 + 36) - *(float *)(a1 + 32)) / 15.0) * -20.0))
         + (float)((float)((float)(*(float *)(a1 + 36) - *(float *)(a1 + 32)) / 15.0) * v11);
  *(float *)a1 = result;
  return result;
}

__n128 DspLib::LoudspeakerManagerV2::ModelManager::getZDomainVoiceCoilThermalModel@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>, double a4@<D0>)
{
  uint64_t v7 = *(void *)(a1 + 64) + 2456 * a2;
  float v8 = *(float *)(v7 + 2136);
  float v9 = *(float *)(v7 + 2132) / v8;
  std::vector<DspLib::Biquad::Section>::resize(a1 + 88, 1uLL);
  uint64_t v10 = *(void *)(a1 + 88);
  *(_DWORD *)uint64_t v10 = 0;
  *(float *)(v10 + 4) = v9;
  *(_DWORD *)(v10 + 8) = 0;
  *(float *)(v10 + 12) = 1.0 / v8;
  *(_DWORD *)(v10 + 16) = 0;
  DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)v10, a4);
  float v11 = *(__n128 **)(a1 + 88);
  __n128 result = *v11;
  *a3 = *v11;
  a3[1].n128_u32[0] = v11[1].n128_u32[0];
  return result;
}

__n128 DspLib::LoudspeakerManagerV2::ModelManager::getZDomainMagnetThermalModel@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>, double a4@<D0>)
{
  uint64_t v7 = *(void *)(a1 + 64) + 2456 * a2;
  float v8 = *(float *)(v7 + 2144);
  float v9 = *(float *)(v7 + 2140) / v8;
  std::vector<DspLib::Biquad::Section>::resize(a1 + 88, 1uLL);
  uint64_t v10 = *(void *)(a1 + 88);
  *(_DWORD *)uint64_t v10 = 0;
  *(float *)(v10 + 4) = v9;
  *(_DWORD *)(v10 + 8) = 0;
  *(float *)(v10 + 12) = 1.0 / v8;
  *(_DWORD *)(v10 + 16) = 0;
  DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)v10, a4);
  float v11 = *(__n128 **)(a1 + 88);
  __n128 result = *v11;
  *a3 = *v11;
  a3[1].n128_u32[0] = v11[1].n128_u32[0];
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::ModelManager::getZDomainLoudspeakerModel(void *a1, uint64_t a2, int a3, int a4, unsigned char *a5, int a6, double a7)
{
  uint64_t v13 = a1[8];
  uint64_t v14 = v13 + 2456 * a2;
  uint64_t v15 = v14 + 2240;
  switch(a3)
  {
    case 1:
      uint64_t v14 = v13 + 2456 * a2 + 424;
      break;
    case 2:
      uint64_t v14 = v13 + 2456 * a2 + 848;
      break;
    case 3:
      uint64_t v14 = v13 + 2456 * a2 + 1272;
      break;
    case 4:
      uint64_t v14 = v13 + 2456 * a2 + 1696;
      break;
    default:
      break;
  }
  DspLib::LoudspeakerManagerV2::ModelManager::getSDomainModel((uint64_t)a1, v15, v14, a5, a6, v18);
  if (*a5)
  {
    v17[6] = v18[6];
    v17[7] = v18[7];
    v17[8] = v18[8];
    v17[2] = v18[2];
    void v17[3] = v18[3];
    _OWORD v17[4] = v18[4];
    void v17[5] = v18[5];
    v17[0] = v18[0];
    v17[1] = v18[1];
    DspLib::LoudspeakerManagerV2::updateBiquadCoefficients(v17, a1 + 11, a1 + 14, a3, a4, a7);
  }
  return a1[11];
}

uint64_t DspLib::LoudspeakerManagerV2::ModelManager::appliedAccelerationModelDidChange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 64) + 2456 * a2;
  long long v6 = *(_OWORD *)(v5 + 2384);
  long long v7 = *(_OWORD *)(v5 + 2416);
  v22[10] = *(_OWORD *)(v5 + 2400);
  v22[11] = v7;
  uint64_t v23 = *(void *)(v5 + 2432);
  long long v8 = *(_OWORD *)(v5 + 2320);
  long long v9 = *(_OWORD *)(v5 + 2352);
  v22[6] = *(_OWORD *)(v5 + 2336);
  v22[7] = v9;
  v22[8] = *(_OWORD *)(v5 + 2368);
  v22[9] = v6;
  long long v10 = *(_OWORD *)(v5 + 2256);
  long long v11 = *(_OWORD *)(v5 + 2288);
  v22[2] = *(_OWORD *)(v5 + 2272);
  v22[3] = v11;
  v22[4] = *(_OWORD *)(v5 + 2304);
  void v22[5] = v8;
  v22[0] = *(_OWORD *)(v5 + 2240);
  v22[1] = v10;
  long long v12 = *(_OWORD *)(v5 + 1872);
  v20[10] = *(_OWORD *)(v5 + 1856);
  v20[11] = v12;
  v21[0] = *(_OWORD *)(v5 + 1888);
  *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(v5 + 1900);
  long long v13 = *(_OWORD *)(v5 + 1808);
  v20[6] = *(_OWORD *)(v5 + 1792);
  v20[7] = v13;
  long long v14 = *(_OWORD *)(v5 + 1840);
  v20[8] = *(_OWORD *)(v5 + 1824);
  v20[9] = v14;
  long long v15 = *(_OWORD *)(v5 + 1744);
  v20[2] = *(_OWORD *)(v5 + 1728);
  v20[3] = v15;
  long long v16 = *(_OWORD *)(v5 + 1776);
  v20[4] = *(_OWORD *)(v5 + 1760);
  void v20[5] = v16;
  long long v17 = *(_OWORD *)(v5 + 1712);
  v20[0] = *(_OWORD *)(v5 + 1696);
  v20[1] = v17;
  uint64_t result = DspLib::LoudspeakerManagerV2::updateAppliedModel((uint64_t)v22, (uint64_t)v20, (long long *)(v5 + 1916), *(unsigned char *)a1, a3, *(float *)(a1 + 52), *(float *)(a1 + 56));
  if (result)
  {
    uint64_t v19 = *(void *)(a1 + 64) + 2456 * a2;
    return *(float *)(v19 + 1700) > 0.0 && *(float *)(v19 + 1768) > 0.0;
  }
  return result;
}

_OWORD *DspLib::LoudspeakerManagerV2::findCompensator@<X0>(_OWORD *result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  long long v3 = result[5];
  *(_OWORD *)a3 = result[4];
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = result[7];
  *(_OWORD *)(a3 + 32) = result[6];
  *(_OWORD *)(a3 + 48) = v4;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 3;
  *(void *)(a3 + 64) = 0x3FF0000000000000;
  double v6 = *(double *)(a3 + 8);
  double v5 = *(double *)(a3 + 16);
  double v7 = v5 / a2[276];
  if (a2[274] * a2[274] >= v7) {
    double v7 = a2[274] * a2[274];
  }
  double v8 = a2[278];
  BOOL v9 = v8 == 1.0;
  double v10 = 1.0 / v8 * v7;
  if (!v9) {
    double v7 = v10;
  }
  *(double *)(a3 + 80) = v7;
  double v11 = (v7 - v5) * (v7 - v5) / v5;
  double v12 = v7 / (a2[275] * a2[275]);
  double v13 = fmax(v6 * v6 / (a2[277] * a2[277]) - v11, 0.0);
  if (v13 >= v12) {
    double v13 = v12;
  }
  double v14 = sqrt(v13);
  double v15 = a2[279];
  if (v15 != 1.0) {
    double v14 = sqrt(v11 * (1.0 - v15 * v15) + v14 * v14) / v15;
  }
  *(double *)(a3 + 72) = v14;
  *(void *)(a3 + 136) = 3;
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::ModelManager::getZDomainAcousticResonanceControl(DspLib::LoudspeakerManagerV2::ModelManager *this, double a2, uint64_t a3)
{
  uint64_t v5 = *((void *)this + 8);
  if (*(unsigned char *)(v5 + 2456 * a3 + 2188))
  {
    uint64_t v7 = v5 + 2456 * a3;
    double v8 = *(float *)(v7 + 1920);
    if (*(unsigned char *)(v7 + 1912)) {
      BOOL v9 = (float *)(v7 + 2012);
    }
    else {
      BOOL v9 = (float *)(v7 + 1968);
    }
    float v10 = v9[1];
    float v11 = v9[2];
    float v12 = v9[4];
    double v13 = *(float *)(v7 + 1988);
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
    int64x2_t v22 = vdupq_n_s64(0x3DA5FD7FE0000000uLL);
    double v14 = v12;
    double v21 = v14 / (v8 * v13);
    double v28 = v11;
    double v27 = (v14 + v8 * v10) / v8;
    uint64_t v26 = 0x3FF0000000000000;
    int64x2_t v32 = vdupq_n_s64(3uLL);
    memcpy(__dst, (const void *)v7, sizeof(__dst));
    DspLib::LoudspeakerManagerV2::findCompensator(&v21, __dst, (uint64_t)v33);
    DspLib::sPolynomialToBiquadCoefficients(v33, a2, v34[8], (DspLib *)v34, (const double *)v34[9], (uint64_t *)this + 17, 0);
  }
  else
  {
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)this + 136, 1uLL);
    uint64_t v15 = *((void *)this + 17);
    *(_OWORD *)uint64_t v15 = DspLib::Biquad::kBypassSection;
    *(_DWORD *)(v15 + 16) = 0;
  }
  long long v16 = (long long *)*((void *)this + 17);
  uint64_t v17 = *((void *)this + 20) + 20 * a3;
  long long v18 = *v16;
  *(_DWORD *)(v17 + 16) = *((_DWORD *)v16 + 4);
  *(_OWORD *)uint64_t v17 = v18;
  return *((void *)this + 17);
}

uint64_t DspLib::LoudspeakerManagerV2::ModelManager::passiveRadiatorZDomainCoefficients(DspLib::LoudspeakerManagerV2::ModelManager *this, double a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = v4 + 2456 * a3;
  if (*(unsigned char *)(v5 + 2440))
  {
    if (*(unsigned char *)(v4 + 2456 * a3 + 2441)) {
      uint64_t v7 = v4 + 2456 * a3 + 1068;
    }
    else {
      uint64_t v7 = v4 + 2456 * a3 + 848;
    }
    DspLib::LoudspeakerManagerV2::displacementPassiveRadiatorPolynomial(v7, v5 + 2440, *(unsigned __int8 *)(v4 + 2456 * *((unsigned int *)this + 1) + 1064), (uint64_t)v11);
    void v14[2] = v11[6];
    void v14[3] = v11[7];
    void v14[4] = v12;
    uint64_t v13[2] = v11[2];
    v13[3] = v11[3];
    v14[0] = v11[4];
    v14[1] = v11[5];
    v13[0] = v11[0];
    v13[1] = v11[1];
    DspLib::sPolynomialToBiquadCoefficients((uint64_t)v13, a2, v12, (DspLib *)v14, *((const double **)&v12 + 1), (uint64_t *)this + 14, (uint64_t *)this + 23, 0);
  }
  else
  {
    uint64_t v8 = *((void *)this + 23);
    *(_OWORD *)uint64_t v8 = DspLib::Biquad::kBypassSection;
    *(_DWORD *)(v8 + 16) = 0;
    uint64_t v9 = *((void *)this + 23);
    *(_OWORD *)(v9 + 20) = DspLib::Biquad::kBypassSection;
    *(_DWORD *)(v9 + 36) = 0;
  }
  return *((void *)this + 23);
}

void std::vector<DspLib::LoudspeakerManagerV2::ModelCollection>::__append(void **a1, unint64_t a2)
{
  double v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(DspLib::LoudspeakerManagerV2::ModelCollection **)(v4 - 8);
  if (0xF02806ABC74BE1FBLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      double v13 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)v7 + 2456 * a2);
      uint64_t v14 = 2456 * a2;
      do
      {
        DspLib::LoudspeakerManagerV2::ModelCollection::ModelCollection(v7);
        uint64_t v7 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)v7 + 2456);
        v14 -= 2456;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xF02806ABC74BE1FBLL * ((v7 - (DspLib::LoudspeakerManagerV2::ModelCollection *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1AAF1D2F87EBFCLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF02806ABC74BE1FBLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xD578E97C3F5FELL) {
      unint64_t v11 = 0x1AAF1D2F87EBFCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::ModelCollection>>(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v15 = (DspLib::LoudspeakerManagerV2::ModelCollection *)&v12[2456 * v8];
    long long v16 = &v12[2456 * v11];
    uint64_t v17 = 2456 * a2;
    long long v18 = (char *)v15 + v17;
    uint64_t v19 = v15;
    do
    {
      uint64_t v19 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)DspLib::LoudspeakerManagerV2::ModelCollection::ModelCollection(v19)
                                                            + 2456);
      v17 -= 2456;
    }
    while (v17);
    double v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v20 -= 2456;
        uint64_t v15 = (DspLib::LoudspeakerManagerV2::ModelCollection *)((char *)v15 - 2456);
        memcpy(v15, v20, 0x998uLL);
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v18;
    a1[2] = v16;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

void sub_1BB2A4344(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

DspLib::LoudspeakerManagerV2::ModelCollection *DspLib::LoudspeakerManagerV2::ModelCollection::ModelCollection(DspLib::LoudspeakerManagerV2::ModelCollection *this)
{
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this, 0);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault(v2 + 424, 1);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this + 848, 2);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this + 1272, 3);
  DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault((uint64_t)this + 1696, 4);
  *((unsigned char *)this + 2184) = 0;
  *(_OWORD *)((char *)this + 2152) = 0u;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2136) = 0u;
  *((unsigned char *)this + 2188) = 0;
  *((_OWORD *)this + 137) = 0u;
  *((_OWORD *)this + 138) = xmmword_1BB872F30;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 139) = _Q0;
  *((_WORD *)this + 1120) = 1;
  *(void *)((char *)this + 2244) = 0;
  *(void *)((char *)this + 2249) = 0;
  *(void *)((char *)this + 2260) = 0;
  *(void *)((char *)this + 2265) = 0;
  *((unsigned char *)this + 2284) = 0;
  *(void *)((char *)this + 2276) = 0;
  uint64_t v8 = 2292;
  *((unsigned char *)this + 2288) = 0;
  do
  {
    unint64_t v9 = (char *)this + v8;
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    unsigned char v9[24] = 0;
    *((void *)v9 + 2) = 0;
    *(void *)(v9 + 28) = 0;
    v9[36] = 0;
    v8 += 44;
    v9[40] = 0;
  }
  while (v9 + 44 != (char *)this + 2424);
  *((int32x2_t *)this + 303) = vdup_n_s32(0xC2C80000);
  *((_DWORD *)this + 608) = 1065353216;
  *((unsigned char *)this + 2436) = 0;
  *((_WORD *)this + 1220) = 0;
  *((void *)this + 306) = 0;
  return this;
}

double DspLib::LoudspeakerManagerV2::ModelWithDefault::ModelWithDefault(uint64_t a1, int a2)
{
  *(_WORD *)a1 = 1;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 9) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 25) = 0;
  *(void *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  uint64_t v2 = 52;
  *(unsigned char *)(a1 + 48) = 0;
  do
  {
    uint64_t v3 = a1 + v2;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 24) = 0;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 28) = 0;
    *(unsigned char *)(v3 + 36) = 0;
    v2 += 44;
    *(unsigned char *)(v3 + 40) = 0;
  }
  while (v3 + 44 != a1 + 184);
  *(int32x2_t *)(a1 + 184) = vdup_n_s32(0xC2C80000);
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(unsigned char *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 205) = 0;
  *(_WORD *)(a1 + 220) = 1;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 229) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 245) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  uint64_t v4 = 272;
  do
  {
    uint64_t v5 = a1 + v4;
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 24) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 28) = 0;
    *(unsigned char *)(v5 + 36) = 0;
    v4 += 44;
    *(unsigned char *)(v5 + 40) = 0;
  }
  while (v5 + 44 != a1 + 404);
  *(_DWORD *)(a1 + 404) = -1027080192;
  double result = 0.00781250567;
  *(void *)(a1 + 408) = 0x3F800000C2C80000;
  *(unsigned char *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 420) = a2;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::ModelCollection>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AAF1D2F87EBFDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2456 * a2);
}

void std::vector<DspLib::Biquad::Section>::__append(void **a1, unint64_t a2)
{
  double v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      double v13 = &v7[20 * a2];
      do
      {
        *(_DWORD *)uint64_t v7 = 1065353216;
        *(void *)(v7 + 12) = 0;
        *(void *)(v7 + 4) = 0;
        v7 += 20;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v14 = &v12[20 * v8];
    uint64_t v15 = &v14[20 * a2];
    long long v16 = v14;
    do
    {
      *(_DWORD *)long long v16 = 1065353216;
      *(void *)(v16 + 12) = 0;
      *(void *)(v16 + 4) = 0;
      v16 += 20;
    }
    while (v16 != v15);
    uint64_t v17 = &v12[20 * v11];
    uint64_t v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v20;
        v14 -= 20;
        v18 -= 20;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t DspLib::LoudspeakerManagerV2::smoothResonatorCoefficients(uint64_t result, uint64_t a2, char a3)
{
  float32x2_t v3 = (float32x2_t)vdup_n_s32(0x3E4CCCCDu);
  *(float32x2_t *)(result + 4) = vmla_f32(*(float32x2_t *)(result + 4), v3, vsub_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)(result + 4)));
  *(float32x2_t *)(result + 16) = vmla_f32(*(float32x2_t *)(result + 16), v3, vsub_f32(*(float32x2_t *)(a2 + 16), *(float32x2_t *)(result + 16)));
  if (a3)
  {
    *(float *)double result = *(float *)result + (float)((float)(*(float *)a2 - *(float *)result) * 0.2);
    *(float *)(result + 12) = *(float *)(result + 12)
                            + (float)((float)(*(float *)(a2 + 12) - *(float *)(result + 12)) * 0.2);
  }
  else
  {
    *(_DWORD *)double result = 0;
    *(_DWORD *)(result + 12) = 0;
  }
  return result;
}

uint64_t std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__push_back_slow_path<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v18[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[56 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[56 * v9];
  long long v12 = *a2;
  *(void *)(v11 + 14) = *(void *)((char *)a2 + 14);
  *(_OWORD *)unint64_t v11 = v12;
  *((void *)v11 + 3) = *((void *)a2 + 3);
  uint64_t v13 = *((void *)a2 + 4);
  *((void *)v11 + 4) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = &v10[56 * v4];
  *((void *)v14 + 5) = *((void *)a2 + 5);
  uint64_t v15 = *((void *)a2 + 6);
  *((void *)v14 + 6) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  CFTypeRef v18[2] = v11 + 56;
  std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1BB2A48F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 56;
      long long v6 = *(_OWORD *)(v3 - 56);
      *(void *)(v4 - 42) = *(void *)(v3 - 42);
      *(_OWORD *)(v4 - 56) = v6;
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v3 -= 56;
      v4 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  void *result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

void std::__destroy_at[abi:ne180100]<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__split_buffer<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::__destroy_at[abi:ne180100]<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties,0>(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::initialize(DspLib::LoudspeakerSystemIDV2::ModelFit *this, double a2)
{
  *((double *)this + 164) = a2;
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2480), a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3632), a2);
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::initialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4784), a2);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 8), *((void *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 88), *((void *)this + 367));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 168), *((void *)this + 511));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 248), *((void *)this + 653));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 328), *((void *)this + 367));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 408), *((void *)this + 511));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 488), *((void *)this + 653));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 568), *((void *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 648), *((void *)this + 511));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 736), *((void *)this + 653));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 816), *((void *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 896), *((void *)this + 367));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 976), *((void *)this + 223));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1056), *((void *)this + 367));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1136), *((void *)this + 511));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1216), *((void *)this + 653));
  *(unsigned char *)this = 1;

  DspLib::LoudspeakerSystemIDV2::ModelFit::reset(this);
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::reset(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
  *((unsigned char *)this + 1304) = 0;
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::uninitialize(DspLib::LoudspeakerSystemIDV2::ModelFit *this)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2480));
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3632));
  DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::uninitialize((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4784));
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 8), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 88), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 168), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 248), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 328), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 408), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 488), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 568), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 648), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 736), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 816), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 896), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 976), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1056), 0);
  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1136), 0);

  DspLib::ComplexVector::setLength((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1216), 0);
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::setParameters(uint64_t a1, uint64_t *a2, int a3, unint64_t *a4)
{
  if (*(unsigned char *)a1)
  {
    unsigned int v4 = a4;
    DspLib::LoudspeakerSystemIDV2::ModelFit::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)a1, a4);
    uint64_t v8 = (7 * a3 + 6);
    *(unsigned char *)(a1 + 1296) = DspLib::AlgorithmParametersInstance::operator[](a2, v8) >= 0.5;
    uint64_t v9 = (7 * a3 + 7);
    *(unsigned char *)(a1 + 1297) = DspLib::AlgorithmParametersInstance::operator[](a2, v9) >= 0.5;
    uint64_t v10 = (7 * a3 + 8);
    *(unsigned char *)(a1 + 1298) = DspLib::AlgorithmParametersInstance::operator[](a2, v10) >= 0.5;
    int v31 = 7 * a3;
    uint64_t v11 = (7 * a3 + 5);
    *(unsigned char *)(a1 + 1302) = DspLib::AlgorithmParametersInstance::operator[](a2, v11 | 0x1500000000) >= 0.5;
    *(unsigned char *)(a1 + 1299) = DspLib::AlgorithmParametersInstance::operator[](a2, v8 | 0x100000000) >= 0.5;
    *(unsigned char *)(a1 + 1300) = DspLib::AlgorithmParametersInstance::operator[](a2, v9 | 0x100000000) >= 0.5;
    *(unsigned char *)(a1 + 1301) = DspLib::AlgorithmParametersInstance::operator[](a2, v10 | 0x100000000) >= 0.5;
    *(unsigned char *)(a1 + 1303) = DspLib::AlgorithmParametersInstance::operator[](a2, v11 | 0x300000000) >= 0.5;
    LODWORD(v11) = *(unsigned char *)(a1 + 2216) != 0;
    long long v12 = (const float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v8);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 1328), v12);
    if (v11 != (*(unsigned char *)(a1 + 2216) != 0)) {
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::resetNvm((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 1328), v4);
    }
    uint64_t v13 = (DSPSplitComplex *)(a1 + 2480);
    uint64_t v14 = (const float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v9);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 2480), v14);
    uint64_t v15 = (const float *)DspLib::AlgorithmParametersInstance::group((DspLib::AlgorithmParametersInstance *)a2, v10);
    long long v23 = (DSPSplitComplex *)(a1 + 3632);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::setParameters((DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)(a1 + 3632), v15);
    long long v24 = (DSPSplitComplex *)(a1 + 4784);
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::setParameters(a1 + 4784, (DspLib::AlgorithmParametersInstance *)a2, a3);
    double v28 = (DSPSplitComplex *)(a1 + 8);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 8), *(void *)(a1 + 1784));
    long long v29 = (DSPSplitComplex *)(a1 + 88);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 88), *(void *)(a1 + 2936));
    long long v30 = (DSPSplitComplex *)(a1 + 168);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 168), *(void *)(a1 + 4088));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 248), *(void *)(a1 + 5224));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 328), *(void *)(a1 + 2936));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 408), *(void *)(a1 + 4088));
    uint64_t v16 = (DSPSplitComplex *)(a1 + 488);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 488), *(void *)(a1 + 5224));
    uint64_t v17 = (DSPSplitComplex *)(a1 + 568);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 568), *(void *)(a1 + 1784));
    long long v18 = (DSPSplitComplex *)(a1 + 648);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 648), *(void *)(a1 + 4088));
    double v27 = (DSPSplitComplex *)(a1 + 736);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 736), *(void *)(a1 + 5224));
    uint64_t v25 = (DSPSplitComplex *)(a1 + 816);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 816), *(void *)(a1 + 1784));
    uint64_t v26 = (DSPSplitComplex *)(a1 + 896);
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 896), *(void *)(a1 + 2936));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 976), *(void *)(a1 + 1784));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1056), *(void *)(a1 + 2936));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1136), *(void *)(a1 + 4088));
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + 1216), *(void *)(a1 + 5224));
    if (*(unsigned char *)(a1 + 1296))
    {
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)(a1 + 1328), (DSPSplitComplex *)(a1 + 328), (DspLib::ComplexMatrixSpan *)(a1 + 3000), (float *)(a1 + 2304), *(unsigned __int8 *)(a1 + 2216));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)(a1 + 1328), (DSPSplitComplex *)(a1 + 408), (DspLib::ComplexMatrixSpan *)(a1 + 4152), (float *)(a1 + 2304), *(unsigned __int8 *)(a1 + 2216));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)(a1 + 1328), (DSPSplitComplex *)(a1 + 248), (DspLib::ComplexMatrixSpan *)(a1 + 5288), (float *)(a1 + 2304), *(unsigned __int8 *)(a1 + 2216));
      uint64_t v16 = (DSPSplitComplex *)(a1 + 488);
      uint64_t v13 = (DSPSplitComplex *)(a1 + 2480);
      long long v18 = (DSPSplitComplex *)(a1 + 648);
      uint64_t v17 = (DSPSplitComplex *)(a1 + 568);
      float v19 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(*(float *)(a1 + 1320), *(float *)(a1 + 1324), a1 + 1328, (float *)(a1 + 2304), *(unsigned __int8 *)(a1 + 2216));
    }
    else
    {
      float v19 = 0.0;
      DspLib::ComplexVector::operator=(a1 + 328, 0.0);
      DspLib::ComplexVector::operator=(a1 + 408, 0.0);
      DspLib::ComplexVector::operator=(a1 + 248, 0.0);
    }
    *(float *)(a1 + 728) = v19;
    if (*(unsigned char *)(a1 + 1297))
    {
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v13, v17, (DspLib::ComplexMatrixSpan *)(a1 + 1848), (float *)(a1 + 3456), *(unsigned __int8 *)(a1 + 3368));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v13, v18, (DspLib::ComplexMatrixSpan *)(a1 + 4152), (float *)(a1 + 3456), *(unsigned __int8 *)(a1 + 3368));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v13, v16, (DspLib::ComplexMatrixSpan *)(a1 + 5288), (float *)(a1 + 3456), *(unsigned __int8 *)(a1 + 3368));
    }
    else
    {
      DspLib::ComplexVector::operator=(v17, 0.0);
      DspLib::ComplexVector::operator=(v18, 0.0);
      DspLib::ComplexVector::operator=(v16, 0.0);
    }
    if (*(unsigned char *)(a1 + 1298))
    {
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v23, v25, (DspLib::ComplexMatrixSpan *)(a1 + 1848), (float *)(a1 + 4608), *(unsigned __int8 *)(a1 + 4520));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v23, v26, (DspLib::ComplexMatrixSpan *)(a1 + 3000), (float *)(a1 + 4608), *(unsigned __int8 *)(a1 + 4520));
      DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(v23, v27, (DspLib::ComplexMatrixSpan *)(a1 + 5288), (float *)(a1 + 4608), *(unsigned __int8 *)(a1 + 4520));
    }
    else
    {
      DspLib::ComplexVector::operator=(v25, 0.0);
      DspLib::ComplexVector::operator=(v26, 0.0);
      DspLib::ComplexVector::operator=(v27, 0.0);
    }
    if (*(unsigned char *)(a1 + 1302))
    {
      DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v24, v28, (DspLib::ComplexMatrixSpan *)(a1 + 1848), (float *)(a1 + 5736));
      DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v24, v29, (DspLib::ComplexMatrixSpan *)(a1 + 3000), (float *)(a1 + 5736));
      DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel(v24, v30, (DspLib::ComplexMatrixSpan *)(a1 + 4152), (float *)(a1 + 5736));
    }
    else
    {
      DspLib::ComplexVector::operator=(v28, 0.0);
      DspLib::ComplexVector::operator=(v29, 0.0);
      DspLib::ComplexVector::operator=(v30, 0.0);
    }
    *(float *)(a1 + 1324) = DspLib::AlgorithmParametersInstance::operator[](a2, (v31 + 4)) * 6.2832;
    float v20 = DspLib::AlgorithmParametersInstance::operator[](a2, 0x100000000);
    BOOL v21 = v20 >= 0.5;
    if (v20 >= 0.5 && !*(unsigned char *)(a1 + 2)) {
      DspLib::LoudspeakerSystemIDV2::ModelFit::reset((DspLib::LoudspeakerSystemIDV2::ModelFit *)a1);
    }
    *(unsigned char *)(a1 + 2) = v21;
    *(unsigned char *)(a1 + 1) = 1;
  }
  else
  {
    int64x2_t v22 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v22, 89);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::LoudspeakerSystemIDV2::ModelFit::readFromNvm(DspLib::LoudspeakerSystemIDV2::ModelFit *this, unint64_t *a2)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), 0, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2480), (unint64_t *)1, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3632), (unint64_t *)2, a2);

  return DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::readFromNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4784), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ModelFit::writeToNvm(DspLib::LoudspeakerSystemIDV2::ModelFit *this, unsigned int a2)
{
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), 0, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2480), (unint64_t *)1, a2);
  DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3632), (unint64_t *)2, a2);

  return DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::writeToNvm((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4784), a2);
}

uint64_t DspLib::LoudspeakerSystemIDV2::ModelFit::process(DspLib::LoudspeakerSystemIDV2::ModelFit *this, const DspLib::ComplexSpan *a2, const DspLibBuffer *a3, float a4, const DspLib::ComplexSpan *a5, char a6, unint64_t *a7)
{
  if (*((unsigned char *)this + 1))
  {
    unsigned int v7 = a7;
    DspLib::LoudspeakerSystemIDV2::ModelFit::readFromNvm(this, a7);
    if (a6)
    {
      switch(*((_DWORD *)this + 1))
      {
        case 1:
          if (*((unsigned char *)this + 1296) && *((unsigned char *)this + 1299))
          {
            float v14 = DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel(*((float *)this + 330), *((float *)this + 331), (uint64_t)this + 1328, (float *)this + 576, *((unsigned __int8 *)this + 2216));
            float v15 = v14 + (float)((float)(*((float *)this + 182) - v14) * 0.1);
            if (v15 > 0.1) {
              float v15 = 0.1;
            }
            *((float *)this + 182) = v15;
            DspLib::ComplexVector::operator=((char *)this + 976, (char *)this + 8);
            DspLib::operator+=((char *)this + 976, (char *)this + 568);
            DspLib::operator+=((char *)this + 976, (char *)this + 816);
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1328), a2, a3, a4, a5, (DSPSplitComplex *)this + 61);
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 83, (DSPSplitComplex *)((char *)this + 328), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3000), (float *)this + 576, *((unsigned __int8 *)this + 2216));
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 83, (DSPSplitComplex *)((char *)this + 408), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4152), (float *)this + 576, *((unsigned __int8 *)this + 2216));
            DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 83, (DSPSplitComplex *)((char *)this + 248), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 5288), (float *)this + 576, *((unsigned __int8 *)this + 2216));
          }
          else
          {
            *((unsigned char *)this + 1732) = 0;
          }
          int v16 = 2;
          goto LABEL_30;
        case 2:
          if (*((unsigned char *)this + 1297))
          {
            if (*((unsigned char *)this + 1300) && *((unsigned char *)this + 1732))
            {
              DspLib::ComplexVector::operator=((char *)this + 1056, (char *)this + 88);
              DspLib::operator+=((char *)this + 1056, (char *)this + 328);
              DspLib::operator+=((char *)this + 1056, (char *)this + 896);
              *((_DWORD *)this + 896) = *((_DWORD *)this + 590);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 2480), a2, a3, a4, a5, (DSPSplitComplex *)this + 66);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 155, (DSPSplitComplex *)((char *)this + 568), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1848), (float *)this + 864, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 155, (DSPSplitComplex *)((char *)this + 648), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4152), (float *)this + 864, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 155, (DSPSplitComplex *)((char *)this + 488), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 5288), (float *)this + 864, 0);
            }
            else
            {
              *((_WORD *)this + 1442) = 0;
            }
          }
          else
          {
            *((unsigned char *)this + 2884) = 0;
          }
          int v16 = 3;
          goto LABEL_30;
        case 3:
          if (*((unsigned char *)this + 1298))
          {
            if (*((unsigned char *)this + 1301))
            {
              DspLib::ComplexVector::operator=((char *)this + 1136, (char *)this + 168);
              DspLib::operator+=((char *)this + 1136, (char *)this + 408);
              DspLib::operator+=((char *)this + 1136, (char *)this + 648);
              *((_DWORD *)this + 1184) = *((_DWORD *)this + 590);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3632), a2, a3, a4, a5, (DSPSplitComplex *)this + 71);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 227, (DSPSplitComplex *)this + 51, (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1848), (float *)this + 1152, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 227, (DSPSplitComplex *)this + 56, (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3000), (float *)this + 1152, 0);
              DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)this + 227, (DSPSplitComplex *)this + 46, (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 5288), (float *)this + 1152, 0);
            }
            else
            {
              *((_WORD *)this + 2018) = 0;
            }
          }
          else
          {
            *((unsigned char *)this + 4036) = 0;
          }
          int v16 = 4;
LABEL_30:
          *((_DWORD *)this + 1) = v16;
          break;
        case 4:
          if (*((unsigned char *)this + 1302) && *((unsigned char *)this + 1303))
          {
            DspLib::ComplexVector::operator=((char *)this + 1216, (char *)this + 248);
            DspLib::operator+=((char *)this + 1216, (char *)this + 488);
            DspLib::operator+=((char *)this + 1216, (char *)this + 736);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::process((DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4784), a2, a3, a4, a5, (DSPSplitComplex *)this + 76);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)this + 299, (DSPSplitComplex *)((char *)this + 8), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 1848), (float *)this + 1434);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)this + 299, (DSPSplitComplex *)((char *)this + 88), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 3000), (float *)this + 1434);
            DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)this + 299, (DSPSplitComplex *)((char *)this + 168), (DspLib::LoudspeakerSystemIDV2::ModelFit *)((char *)this + 4152), (float *)this + 1434);
          }
          else
          {
            *((unsigned char *)this + 5188) = 0;
          }
          *((unsigned char *)this + 1304) = 1;
          *((_DWORD *)this + 1) = 0;
          break;
        default:
          break;
      }
    }
    else
    {
      *((unsigned char *)this + 1732) = 0;
      *((unsigned char *)this + 2884) = 0;
      *((unsigned char *)this + 4036) = 0;
      *((unsigned char *)this + 5188) = 0;
    }
    return DspLib::LoudspeakerSystemIDV2::ModelFit::writeToNvm(this, v7);
  }
  else
  {
    long long v18 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ModelFit.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v18, 226);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

DSPSplitComplex *DspLib::LoudspeakerSystemIDV2::updateEstimatedModel(DspLib::LoudspeakerSystemIDV2 *this, DSPSplitComplex *a2, float a3, DspLib::ComplexSpan *a4, float a5, const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *a6, uint64_t a7, const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *a8, uint64_t a9, const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *a10, uint64_t a11, const DspLib::LoudspeakerSystemIDV2::LR2InductanceModel *a12, BOOL a13, BOOL a14)
{
  int v14 = (int)a10;
  int v16 = (int)a8;
  int v18 = (int)a6;
  v37[5] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = MEMORY[0x1F4188790](this);
  unsigned int v23 = MEMORY[0x1F4188790](v22);
  v37[0] = v25;
  v37[1] = (char *)&v34 - v24;
  v37[2] = 3 * v23;
  v37[3] = 3;
  v37[4] = v23;
  DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector((DspLib::LoudspeakerSystemIDV2 *)v37, 0.0, v27, v26);
  uint64_t v28 = DspLib::ComplexSpan::operator=((uint64_t)a2, a5);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t result = (DSPSplitComplex *)MEMORY[0x1F4188790](v29);
  __B.realp = v32;
  __B.imagp = (float *)((char *)&v34 - v31);
  uint64_t v36 = v33;
  if (v18)
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)a4, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)a4 + 244, BYTE1(a12));
    uint64_t result = DspLib::operator+=(a2, &__B);
  }
  if (v16)
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)a7, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)(a7 + 976), 0);
    uint64_t result = DspLib::operator+=(a2, &__B);
  }
  if (v14)
  {
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::calculateEstimatedResonanceModel((DSPSplitComplex *)a9, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)(a9 + 976), 0);
    uint64_t result = DspLib::operator+=(a2, &__B);
  }
  if ((_BYTE)a12)
  {
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::calculateEstimatedInductanceModel((DSPSplitComplex *)a11, &__B, (DspLib::ComplexMatrixSpan *)v37, (float *)(a11 + 952));
    return DspLib::operator+=(a2, &__B);
  }
  return result;
}

void DspLib::LoudspeakerSystemIDV2::calculateSPlaneFrequencyVector(DspLib::LoudspeakerSystemIDV2 *this, float a2, float a3, DspLib::ComplexMatrixSpan *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 4))
  {
    uint64_t v7 = MEMORY[0x1F4188790](this);
    MEMORY[0x1F4188790](v7);
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    __A.realp = v11;
    __A.imagp = (float *)((char *)&v20 - v10);
    unint64_t v24 = v12;
    do
    {
      v26.imag = (float)(a2 + (float)((float)v9 * a3)) * 6.2832;
      v26.real = 0.0;
      uint64_t v13 = DspLib::ComplexSpan::setElement(&__A, v8, v26);
      unint64_t v8 = ++v9;
    }
    while (v24 > v9);
    uint64_t v14 = MEMORY[0x1F4188790](v13);
    MEMORY[0x1F4188790](v14);
    __C.realp = v16;
    __C.imagp = (float *)((char *)&v20 - v15);
    uint64_t v22 = v17;
    DspLib::ComplexSpan::operator=(&__C, &__A);
    DspLib::ComplexMatrixSpan::setRow(this, 0, &__C);
    if (*((void *)this + 3) >= 2uLL)
    {
      unsigned int v18 = 3;
      do
      {
        DspLib::operator*=(&__C, &__A);
        DspLib::ComplexMatrixSpan::setRow(this, v18 - 2, &__C);
      }
      while (*((void *)this + 3) >= (unint64_t)v18++);
    }
  }
}

void DspLib::LoudspeakerSystemIDV2::ModelFit::status(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v21[513] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)v1)
  {
    float v5 = v4;
    unint64_t v6 = v3;
    uint64_t v7 = v2;
    uint64_t v8 = v1;
    float v9 = *(double *)(v1 + 1312) * 0.00048828125;
    __A.realp = (float *)v21;
    __A.imagp = (float *)&v20;
    vDSP_Length v19 = 1025;
    uint64_t v10 = v1 + 1328;
    uint64_t v11 = v1 + 2480;
    uint64_t v12 = v1 + 3632;
    uint64_t v13 = (DspLib::LoudspeakerSystemIDV1::LR2InductanceModel *)(v1 + 4784);
    BYTE1(v16) = *(unsigned char *)(v1 + 2216);
    LOBYTE(v16) = *(unsigned char *)(v1 + 1302);
    DspLib::LoudspeakerSystemIDV2::updateEstimatedModel((DspLib::LoudspeakerSystemIDV2 *)0x401, &__A, v9, (DspLib::ComplexSpan *)(v1 + 1328), v5, (const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)*(unsigned __int8 *)(v1 + 1296), v1 + 2480, (const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)*(unsigned __int8 *)(v1 + 1297), v1 + 3632, (const DspLib::LoudspeakerSystemIDV2::SingleResonanceModel *)*(unsigned __int8 *)(v1 + 1298), v1 + 4784, v16, v17, SHIBYTE(v17));
    vDSP_zvabs(&__A, 1, (float *)(v7 + 12604), 1, v19);
    vDSP_zvphas(&__A, 1, (float *)(v7 + 16704), 1, v19);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(v10, v7, v6, 0);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(v11, v7, v6, 1);
    DspLib::LoudspeakerSystemIDV2::SingleResonanceModel::status(v12, v7, v6, 2);
    DspLib::LoudspeakerSystemIDV2::LR2InductanceModel::status(v13, v7);
    *(_DWORD *)(v7 + 20804) = *(_DWORD *)(v8 + 728);
    if (v6)
    {
      uint64_t v14 = 0;
      do
      {
        if ((*(_DWORD *)(v7 + 4 * v14) & 0x7FFFFFFFu) >= 0x7F800000) {
          *(_DWORD *)(v7 + 4 * v14) = 0;
        }
        ++v14;
      }
      while (v6 > v14);
    }
  }
  else
  {
    uint64_t v15 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV2/LoudspeakerSystemIDV2/dsp/DspLibLoudspeakerSystemIDV2ModelFit.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v15, 406);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerManagerV1::ModelManager::coldStartBiquad(uint64_t *a1, double a2, float a3)
{
  float v19 = a3;
  int v18 = 1065353216;
  DspLib::sPolynomialToBiquadCoefficients((float *)&v18, a2, 1, (DspLib *)&v19, (const float *)1, a1, 1);
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 2);
  if (v6 <= 1)
  {
    uint64_t v7 = (unint64_t *)(a1 + 2);
    do
    {
      if (v5 >= *v7)
      {
        unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v7 - v4) >> 2);
        uint64_t v9 = 2 * v8;
        if (2 * v8 <= v6 + 1) {
          uint64_t v9 = v6 + 1;
        }
        if (v8 >= 0x666666666666666) {
          unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v10 = v9;
        }
        uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::Section>>((uint64_t)(a1 + 2), v10);
        uint64_t v13 = &v11[20 * v6];
        *(_OWORD *)uint64_t v13 = DspLib::Biquad::kBypassSection;
        *((_DWORD *)v13 + 4) = 0;
        uint64_t v15 = *a1;
        uint64_t v14 = (char *)a1[1];
        uint64_t v16 = (uint64_t)v13;
        if (v14 != (char *)*a1)
        {
          do
          {
            long long v17 = *(_OWORD *)(v14 - 20);
            *(_DWORD *)(v16 - 4) = *((_DWORD *)v14 - 1);
            *(_OWORD *)(v16 - 20) = v17;
            v16 -= 20;
            v14 -= 20;
          }
          while (v14 != (char *)v15);
          uint64_t v14 = (char *)*a1;
        }
        unint64_t v5 = (unint64_t)(v13 + 20);
        *a1 = v16;
        a1[1] = (uint64_t)(v13 + 20);
        a1[2] = (uint64_t)&v11[20 * v12];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)(v5 + 16) = 0;
        *(_OWORD *)unint64_t v5 = DspLib::Biquad::kBypassSection;
        v5 += 20;
      }
      a1[1] = v5;
      uint64_t v4 = *a1;
      unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 2);
    }
    while (v6 < 2);
  }
}

void DspLib::LoudspeakerManagerV1::ModelManager::initialize(void **this)
{
  this[9] = this[8];
}

void DspLib::LoudspeakerManagerV1::ModelManager::pageInRootsPath(DspLib::LoudspeakerManagerV1::ModelManager *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v28 = xmmword_1BB873050;
  int v29 = 1084227584;
  long long v26 = xmmword_1BB873070;
  int v27 = 1092616192;
  uint64_t v2 = (uint64_t *)((char *)this + 64);
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 2);
  MEMORY[0x1F4188790](this);
  unint64_t v5 = (char *)&v26 - v4;
  uint64_t v7 = (char *)&v26 + 4 * v6 - v4;
  unint64_t v8 = (char *)&v26 - v4;
  do
  {
    *(_DWORD *)unint64_t v8 = 1065353216;
    *(void *)(v8 + 12) = 0;
    *(void *)(v8 + 4) = 0;
    v8 += 20;
  }
  while (v8 != v7);
  uint64_t v9 = *((void *)this + 8);
  uint64_t v10 = *((void *)this + 9) - v9;
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 2);
    unsigned int v13 = 1;
    do
    {
      uint64_t v14 = 5 * v11;
      uint64_t v15 = (long long *)(v9 + 4 * v14);
      uint64_t v16 = &v5[4 * v14];
      long long v17 = *v15;
      *((_DWORD *)v16 + 4) = *((_DWORD *)v15 + 4);
      *(_OWORD *)uint64_t v16 = v17;
      uint64_t v11 = v13;
      BOOL v18 = v12 > v13++;
    }
    while (v18);
  }
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v2, 2uLL);
  DspLib::sPolynomialToBiquadCoefficients((float *)&v28, 6000.0, 5, (DspLib *)&v26, (const float *)5, v2, 1);
  std::vector<DspLib::Biquad::Section>::resize((uint64_t)v2, v3);
  uint64_t v19 = *((void *)this + 8);
  if (*((void *)this + 9) != v19)
  {
    uint64_t v20 = 0;
    unsigned int v21 = 1;
    do
    {
      uint64_t v22 = 5 * v20;
      unsigned int v23 = &v5[4 * v22];
      uint64_t v24 = v19 + 4 * v22;
      long long v25 = *(_OWORD *)v23;
      *(_DWORD *)(v24 + 16) = *((_DWORD *)v23 + 4);
      *(_OWORD *)uint64_t v24 = v25;
      uint64_t v20 = v21;
      uint64_t v19 = *((void *)this + 8);
      BOOL v18 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 9) - v19) >> 2) > v21++;
    }
    while (v18);
  }
  *((_DWORD *)this + 14) = 0;
}

uint64_t DspLib::LoudspeakerManagerV1::ModelManager::uninitialize(uint64_t this)
{
  *(void *)(this + 72) = *(void *)(this + 64);
  return this;
}

void DspLib::LoudspeakerManagerV1::ModelManager::getAdmittanceModel(DspLib::LoudspeakerManagerV1::ModelManager *this@<X0>, unsigned __int8 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  _OWORD v47[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 8);
  uint64_t v11 = (uint64_t *)((char *)this + 64);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 9) - v10) >> 2);
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v12;
  *(float *)(a4 + 16) = 1.0 / *((float *)this + 24);
  ++*((_DWORD *)this + 14);
  if (*((unsigned char *)this + 90))
  {
    DspLib::LoudspeakerManagerV1::ModelManager::coldStartBiquad((uint64_t *)this + 8, a5, *((float *)this + 23));
    uint64_t v13 = *((void *)this + 8);
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 9) - v13) >> 2);
    *(void *)a4 = v13;
    *(void *)(a4 + 8) = v14;
    *(float *)(a4 + 16) = 1.0 / *((float *)this + 23);
    *((unsigned char *)this + 90) = 0;
  }
  if (*((unsigned char *)this + 88))
  {
    int v15 = *a2;
    float v16 = *((float *)a2 + 1);
    int v17 = a2[16];
    v47[0] = *(void *)(a2 + 17);
    *(void *)((char *)v47 + 7) = *((void *)a2 + 3);
    int v18 = a2[40];
    v46[0] = *(void *)(a2 + 41);
    *(void *)((char *)v46 + 7) = *((void *)a2 + 6);
    int v19 = a2[64];
    if ((a3 & 1) != 0 || !*((unsigned char *)this + 89) || vabds_f32(v16, *((float *)this + 24)) > 0.01)
    {
      *((float *)this + 24) = v16;
      memset(v42, 0, sizeof(v42));
      long long v41 = 0u;
      v45[0] = v47[0];
      *(void *)((char *)v45 + 7) = *(void *)((char *)v47 + 7);
      uint64_t v43 = 0;
      v44[0] = v46[0];
      *(void *)((char *)v44 + 7) = *(void *)((char *)v46 + 7);
      int v20 = *((_DWORD *)this + 23);
      {
        float v31 = v16;
        int v36 = v19;
        int v37 = v15;
        int v32 = v17;
        int v33 = v18;
        int v35 = v20;
        int v20 = v35;
        int v18 = v33;
        int v19 = v36;
        int v15 = v37;
        int v17 = v32;
        float v16 = v31;
        if (v34)
        {
          DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re = v35;
          int v20 = v35;
          int v18 = v33;
          int v19 = v36;
          int v15 = v37;
          int v17 = v32;
          float v16 = v31;
        }
      }
      if (v15)
      {
        DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re = v20;
        LODWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es) = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(0.0000215, 0.000016, 1.9);
        HIDWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es) = v21;
        dword_1E9F7DE60 = v22;
        LODWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms) = DspLib::LoudspeakerSystemIDV1::tsParametersToCoeffs(5.006, 0.0282);
        HIDWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms) = v23;
        dword_1E9F7DE6C = v24;
      }
      else if (v17)
      {
        DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re = LODWORD(v16);
        if (v18)
        {
          DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es = *(void *)((char *)v45 + 3);
          dword_1E9F7DE60 = *(_DWORD *)((char *)&v45[1] + 3);
        }
        if (v19)
        {
          DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms = *(void *)((char *)v44 + 3);
          dword_1E9F7DE6C = *(_DWORD *)((char *)&v44[1] + 3);
        }
      }
      uint64_t v25 = 0;
      float v26 = *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re;
      LODWORD(v41) = HIDWORD(DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es);
      *((float *)&v41 + 1) = *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es
                           + (float)(*(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re
                                   + (float)(*(float *)&dword_1E9F7DE6C
                                           * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es
                                             + 1)));
      *((float *)&v41 + 2) = *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                           + (float)((float)((float)((float)(v26 * *(float *)&dword_1E9F7DE6C)
                                                   + (float)(v26 * *(float *)&dword_1E9F7DE60))
                                           + (float)(*((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                                                     + 1)
                                                   * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es
                                                     + 1)))
                                   + (float)(*(float *)&dword_1E9F7DE6C
                                           * *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es));
      *((float *)&v41 + 3) = (float)((float)((float)(v26
                                                   * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                                                     + 1))
                                           + (float)((float)(v26 * *(float *)&dword_1E9F7DE60)
                                                   * *(float *)&dword_1E9F7DE6C))
                                   + (float)(*(float *)&dword_1E9F7DE60
                                           * *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms))
                           + (float)(*((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                                     + 1)
                                   * *(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::es);
      v42[0].f32[0] = (float)(*(float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::Re
                            * *(float *)&dword_1E9F7DE60)
                    * *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                      + 1);
      v42[0].i32[1] = 1065353216;
      v42[0].f32[2] = *(float *)&dword_1E9F7DE60 + *(float *)&dword_1E9F7DE6C;
      v42[0].f32[3] = *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms
                      + 1)
                    + (float)(*(float *)&dword_1E9F7DE60 * *(float *)&dword_1E9F7DE6C);
      v42[1].i64[0] = COERCE_UNSIGNED_INT(*(float *)&dword_1E9F7DE60* *((float *)&DspLib::LoudspeakerManagerV1::impedancePolynomialSingleResonatorPlusLR2Inductance(DspLib::LoudspeakerSystemIDV1::SpeakerModel,float)::ms+ 1));
      do
        ++v25;
      while ((v25 - 1) < 4);
      int8x8_t v27 = (int8x8_t)vdup_n_s16(0);
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)veor_s8(vorr_s8((int8x8_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)((char *)v42 + 4)), (int8x16_t)vcgezq_f32(*(float32x4_t *)((char *)v42 + 4))))), v27), v27), 0xFuLL))) & 1) == 0)
      {
        *(_OWORD *)((char *)this + 20) = v41;
        *((_DWORD *)this + 9) = v42[0].i32[0];
        *(float32x4_t *)this = *(float32x4_t *)((char *)v42 + 4);
        *((_DWORD *)this + 4) = v42[1].i32[1];
        *(_OWORD *)((char *)this + 40) = xmmword_1BB872EA0;
      }
      long long v28 = *((_OWORD *)this + 2);
      v39[0] = *((_OWORD *)this + 1);
      v39[1] = v28;
      long long v38 = *(_OWORD *)this;
      unint64_t v40 = (const float *)*((void *)this + 6);
      DspLib::sPolynomialToBiquadCoefficients((float *)&v38, a5, *((uint64_t *)&v28 + 1), (DspLib *)((char *)v39 + 4), v40, v11, 1);
      *((_DWORD *)this + 14) = 0;
      uint64_t v29 = *((void *)this + 8);
      unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 9) - v29) >> 2);
      *(void *)a4 = v29;
      *(void *)(a4 + 8) = v30;
      *(float *)(a4 + 16) = 1.0 / *((float *)this + 24);
    }
    *((unsigned char *)this + 89) = 1;
  }
  else
  {
    *((unsigned char *)this + 89) = 0;
  }
  if (*((_DWORD *)this + 14) >= 0x1F5u) {
    DspLib::LoudspeakerManagerV1::ModelManager::pageInRootsPath(this);
  }
}

double DspLib::LoudspeakerManagerV2::Algorithm::Algorithm(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBaseNewParameters::AlgorithmBaseNewParameters((uint64_t)this, (long long *)&DspLib::LoudspeakerManagerV2::Parameters::kSystemDefinition);
  *(void *)uint64_t v1 = &unk_1F14A6D00;
  *(_WORD *)(v1 + 296) = 256;
  *(unsigned char *)(v1 + 298) = 0;
  *(void *)(v1 + 300) = 0;
  *(void *)(v1 + 305) = 0;
  *(void *)(v1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 328) = 0u;
  *(unsigned char *)(v1 + 344) = 0;
  *(void *)(v1 + 348) = 0;
  *(unsigned char *)(v1 + 356) = 0;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 516) = 0u;
  *(unsigned char *)(v1 + 532) = 1;
  *(void *)(v1 + 552) = 0;
  *(_OWORD *)(v1 + 536) = 0u;
  *(unsigned char *)(v1 + 560) = 0;
  *(void *)(v1 + 584) = 0;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_DWORD *)(v1 + 592) = 1;
  *(void *)(v1 + 600) = 0;
  *(unsigned char *)(v1 + 608) = 0;
  *(_OWORD *)(v1 + 612) = 0u;
  *(_OWORD *)(v1 + 628) = 0u;
  *(_OWORD *)(v1 + 644) = 0u;
  *(_OWORD *)(v1 + 660) = 0u;
  *(_OWORD *)(v1 + 676) = 0u;
  *(_OWORD *)(v1 + 692) = 0u;
  *(_OWORD *)(v1 + 708) = 0u;
  *(_OWORD *)(v1 + 724) = 0u;
  *(_OWORD *)(v1 + 740) = 0u;
  *(_OWORD *)(v1 + 756) = 0u;
  *(_OWORD *)(v1 + 772) = 0u;
  *(_OWORD *)(v1 + 788) = 0u;
  *(_OWORD *)(v1 + 804) = 0u;
  *(unsigned char *)(v1 + 820) = 0;
  *(unsigned char *)(v1 + 824) = 0;
  *(_OWORD *)(v1 + 832) = 0u;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_OWORD *)(v1 + 864) = 0u;
  return result;
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::initialize(DspLib::LoudspeakerManagerV2::Algorithm *this, uint64_t a2, double a3)
{
  uint64_t v5 = DspLib::AlgorithmBaseNewParameters::initialize((uint64_t **)this, a2, a3);
  if (v5)
  {
    unsigned int v6 = (*(uint64_t (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 56))(this);
    DspLib::LoudspeakerManagerV2::ModelManager::initialize((void **)this + 37, v6);
    unsigned int v7 = (*(uint64_t (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 56))(this);
    std::vector<float>::resize((uint64_t)this + 536, v7);
    std::vector<DspLib::Biquad::Section>::vector(&__p, 4uLL);
    for (unint64_t i = 0;
          i < (*(unsigned int (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 56))(this);
          ++i)
    {
      uint64_t v9 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
      DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v9, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * ((v16 - (unsigned char *)__p) >> 2), 1, i);
    }
    unsigned int v10 = (*(uint64_t (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::PilotToneV2::PilotTone>::resize((uint64_t *)this + 63, v10);
    uint64_t v11 = (DspLib::PilotToneV2::PilotTone *)*((void *)this + 63);
    unint64_t v12 = (DspLib::PilotToneV2::PilotTone *)*((void *)this + 64);
    while (v11 != v12)
    {
      DspLib::PilotToneV2::PilotTone::initialize(v11, *((double *)this + 2));
      uint64_t v11 = (DspLib::PilotToneV2::PilotTone *)((char *)v11 + 280);
    }
    unsigned int v13 = (*(uint64_t (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 56))(this);
    DspLib::LoudspeakerHealth::initialize((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 600), a3, v13);
    *((unsigned char *)this + 8) = 1;
    (*(void (**)(DspLib::LoudspeakerManagerV2::Algorithm *, char *, void))(*(void *)this + 264))(this, (char *)this + 264, 0);
    (*(void (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 136))(this);
    if (__p)
    {
      float v16 = __p;
      operator delete(__p);
    }
  }
  return v5;
}

void sub_1BB2A697C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<DspLib::PilotToneV2::PilotTone>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = (void *)a1[1];
  unint64_t v4 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::PilotToneV2::PilotTone>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 280 * a2;
    while (v3 != (void *)v7)
    {
      v3 -= 35;
      std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(v3);
    }
    a1[1] = v7;
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::uninitialize(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 30);
  unint64_t v3 = (uint64_t *)*((void *)this + 31);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  DspLib::LoudspeakerManagerV2::ModelManager::uninitialize((void *)this + 37);
  BOOL v5 = (unsigned char *)*((void *)this + 63);
  unint64_t v6 = (unsigned char *)*((void *)this + 64);
  if (v5 != v6)
  {
    do
    {
      DspLib::PilotToneV2::PilotTone::uninitialize(v5);
      v5 += 280;
    }
    while (v5 != v6);
    BOOL v5 = (unsigned char *)*((void *)this + 63);
    for (unint64_t i = (void *)*((void *)this + 64);
          i != (void *)v5;
          std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(i))
    {
      i -= 35;
    }
  }
  *((void *)this + 64) = v5;
  DspLib::LoudspeakerHealth::uninitialize((uint64_t)this + 600);
  *((unsigned char *)this + 8) = 0;

  DspLib::LoudspeakerManagerV2::Algorithm::uninitializeLogging(this);
}

void DspLib::LoudspeakerManagerV2::Algorithm::uninitializeLogging(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v2 = (DspLib::Logger *)*((void *)this + 104);
  if (v2)
  {
    DspLib::Logger::FlushLog(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 105);
    *((_OWORD *)this + 52) = 0u;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  uint64_t v4 = (DspLib::Logger *)*((void *)this + 106);
  if (v4)
  {
    DspLib::Logger::FlushLog(v4);
    BOOL v5 = (std::__shared_weak_count *)*((void *)this + 107);
    *((_OWORD *)this + 53) = 0u;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  unint64_t v6 = (DspLib::Logger *)*((void *)this + 108);
  if (v6)
  {
    DspLib::Logger::FlushLog(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 109);
    *((_OWORD *)this + 54) = 0u;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

char *DspLib::LoudspeakerManagerV2::Algorithm::setParameters(DspLib::LoudspeakerManagerV2::Algorithm *this, const DspLib::AlgorithmParametersInstance *a2, int a3)
{
  double result = DspLib::AlgorithmBaseNewParameters::setParameters((char *)this, a2, a3);
  if (*((unsigned char *)this + 8))
  {
    double v5 = *((double *)this + 2) * DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x200000000);
    *((void *)this + 71) = vcvtad_u64_f64(v5/ (double)(4* (unint64_t)(*(unsigned int (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 56))(this)));
    float v6 = DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, 0x100000000);
    *((unsigned char *)this + 532) = v6 != 0.0;
    if (v6 == 0.0)
    {
      uint64_t v7 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
      DspLib::LoudspeakerController::Algorithm::resetClosedLoopTemperature(v7);
    }
    DspLib::LoudspeakerManagerV2::ModelManager::setParameters((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 296), (DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 264));
    if (*((void *)this + 46) != *((void *)this + 45))
    {
      uint64_t v8 = 0;
      unsigned int v9 = 1;
      do
      {
        if (DspLib::LoudspeakerManagerV2::ModelManager::appliedAccelerationModelDidChange((uint64_t)this + 296, v8, 1))
        {
          uint64_t v10 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
          double v11 = (*(double (**)(uint64_t))(*(void *)v10 + 40))(v10);
          uint64_t ZDomainAcousticResonanceControl = DspLib::LoudspeakerManagerV2::ModelManager::getZDomainAcousticResonanceControl((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 296), v11, v8);
          uint64_t v14 = v13;
          uint64_t v15 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
          DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v15, ZDomainAcousticResonanceControl, v14, 6, v8);
        }
        float v16 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        DspLib::LoudspeakerController::Algorithm::setHasPassiveRadiator(v16, v8, *(unsigned char *)(*((void *)this + 45) + 2456 * v8 + 2440));
        uint64_t v8 = v9;
      }
      while (0xF02806ABC74BE1FBLL * ((uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 3) > v9++);
    }
    uint64_t v18 = *((void *)this + 63);
    uint64_t v19 = *((void *)this + 64);
    if (v18 != v19)
    {
      uint64_t v20 = 0;
      do
      {
        int v21 = (int)DspLib::AlgorithmParametersInstance::operator[]((uint64_t *)this + 33, (v20 << 32) | 0x15);
        if (v21 == 1) {
          int v22 = 22;
        }
        else {
          int v22 = 1;
        }
        if (v21 == 2) {
          unsigned int v23 = 23;
        }
        else {
          unsigned int v23 = v22;
        }
        int v24 = (float *)DspLib::AlgorithmParametersInstance::group((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 264), v23);
        DspLib::PilotToneV2::PilotTone::setParameters(v18, v24);
        uint64_t v20 = (v20 + 1);
        v18 += 280;
      }
      while (v18 != v19);
    }
    double result = (char *)(*(uint64_t (**)(DspLib::LoudspeakerManagerV2::Algorithm *))(*(void *)this + 56))(this);
    if (result)
    {
      unint64_t v25 = 0;
      uint64_t v26 = 3112;
      uint64_t v27 = 184;
      do
      {
        uint64_t v28 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        uint64_t v29 = *((void *)this + 63);
        float v30 = *(float *)(v29 + v27);
        if (v30 <= 1.0) {
          float v31 = *(float *)(v29 + v27);
        }
        else {
          float v31 = 1.0;
        }
        if (v30 >= 0.0) {
          float v32 = v31;
        }
        else {
          float v32 = 0.0;
        }
        *(float *)(*(void *)(v28 + 576) + v26 - 3076) = v32;
        uint64_t v33 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        float v34 = DspLib::LoudspeakerHealth::setAmplifierVoltsPerFullScale((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 600), v25++, *(float *)(*(void *)(v33 + 576) + v26));
        double result = (char *)(*(uint64_t (**)(DspLib::LoudspeakerManagerV2::Algorithm *, float))(*(void *)this + 56))(this, v34);
        v26 += 4544;
        v27 += 280;
      }
      while (v25 < result);
    }
  }
  return result;
}

uint64_t DspLib::LoudspeakerController::Algorithm::setHasPassiveRadiator(DspLib::LoudspeakerController::Algorithm *this, uint64_t a2, char a3)
{
  uint64_t v5 = *((void *)this + 72) + 4544 * a2;
  DspLib::LoudspeakerController::SpeakerSystemModel::setHasPassiveRadiator((DspLib::LoudspeakerController::SpeakerSystemModel *)(v5 + 208), a3);
  DspLib::LoudspeakerController::SpeakerSystemModel::setHasPassiveRadiator((DspLib::LoudspeakerController::SpeakerSystemModel *)(v5 + 3280), a3);
  uint64_t v6 = (*(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *, void))(*(void *)this + 256))(this, 0);
  uint64_t v7 = *(uint64_t (**)(DspLib::LoudspeakerController::Algorithm *, uint64_t, void))(*(void *)this + 264);

  return v7(this, v6, 0);
}

void DspLib::LoudspeakerManagerV2::Algorithm::reset(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 30);
  unint64_t v3 = (uint64_t *)*((void *)this + 31);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  }
  uint64_t v5 = (DspLib::PilotToneV2::PilotTone *)*((void *)this + 63);
  uint64_t v6 = (DspLib::PilotToneV2::PilotTone *)*((void *)this + 64);
  while (v5 != v6)
  {
    DspLib::PilotToneV2::PilotTone::reset(v5);
    uint64_t v5 = (DspLib::PilotToneV2::PilotTone *)((char *)v5 + 280);
  }
  *((unsigned char *)this + 560) = 0;
  DspLib::fill(*((float **)this + 67), (uint64_t)(*((void *)this + 68) - *((void *)this + 67)) >> 2, NAN);
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 1;
  DspLib::LoudspeakerHealth::reset((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 600));

  DspLib::LoudspeakerManagerV2::Algorithm::resetLogging(this);
}

void DspLib::LoudspeakerManagerV2::Algorithm::resetLogging(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v2 = (DspLib::Logger *)*((void *)this + 104);
  if (v2) {
    DspLib::Logger::FlushLog(v2);
  }
  unint64_t v3 = (DspLib::Logger *)*((void *)this + 106);
  if (v3) {
    DspLib::Logger::FlushLog(v3);
  }
  uint64_t v4 = (DspLib::Logger *)*((void *)this + 108);
  if (v4)
  {
    DspLib::Logger::FlushLog(v4);
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::configureLogging(DspLib::LoudspeakerManagerV2::Algorithm *this, uint64_t a2)
{
  if (a2 == 1)
  {
    *((unsigned char *)this + 824) = 1;
    std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[16],void>((uint64_t)&v4, "LsmFrameLog.bin");
  }
  *((unsigned char *)this + 824) = 0;
  DspLib::LoudspeakerManagerV2::Algorithm::uninitializeLogging(this);
  unint64_t v3 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  DspLib::LoudspeakerController::Algorithm::configureLogging(v3, *((unsigned __int8 *)this + 824));
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::processLogging(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (DspLib::Logger *)a1[104];
  if (v6) {
    DspLib::Logger::logData(v6, (float)(unint64_t)a2[2]);
  }
  uint64_t v7 = (DspLib::Logger *)a1[106];
  if (v7) {
    DspLib::Logger::logData(v7, (float)(unint64_t)a2[2]);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  if (result)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 2120;
    do
    {
      double v11 = (DspLib::Logger *)a1[104];
      if (v11)
      {
        uint64_t v12 = a1[45];
        float v13 = *(float *)(v12 + v10);
        if (v13 == 0.0) {
          float v14 = 1000.0;
        }
        else {
          float v14 = *(float *)(v12 + v10 + 8)
        }
              + (float)((float)(1.0 / v13)
                      * (float)((float)(*(float *)(v12 + v10 + 124) / *(float *)(v12 + v10 + 4)) + -1.0));
        DspLib::Logger::logData(v11, v14);
      }
      uint64_t v15 = (DspLib::Logger *)a1[106];
      if (v15) {
        DspLib::Logger::logData(v15, *(float **)(*a2 + 8 * v9), a2[2]);
      }
      if (*(unsigned char *)(a3 + 24))
      {
        float v16 = (DspLib::Logger *)a1[106];
        if (v16) {
          DspLib::Logger::logData(v16, *(float **)(*(void *)a3 + 8 * v9), *(void *)(a3 + 16));
        }
      }
      ++v9;
      uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
      v10 += 2456;
    }
    while (v9 < result);
  }
  return result;
}

void DspLib::LoudspeakerManagerV2::Algorithm::updateAcousticResonanceControlIfNeeded(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v2 = (DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 296);
  if (DspLib::LoudspeakerManagerV2::ModelManager::appliedAccelerationModelDidChange((uint64_t)this + 296, *((void *)this + 73), 0))
  {
    uint64_t v3 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    double v4 = (*(double (**)(uint64_t))(*(void *)v3 + 40))(v3);
    uint64_t ZDomainAcousticResonanceControl = DspLib::LoudspeakerManagerV2::ModelManager::getZDomainAcousticResonanceControl(v2, v4, *((void *)this + 73));
    uint64_t v7 = v6;
    uint64_t v8 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
    uint64_t v9 = *((void *)this + 73);
    DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v8, ZDomainAcousticResonanceControl, v7, 6, v9);
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::AlgorithmBaseNewParameters *this, long long *a2, long long *a3, _OWORD *a4)
{
  if (*((unsigned char *)this + 24)) {
    DspLib::CPUMeasure::start((int8x16_t *)((char *)this + 56));
  }
  v48[0] = (uint64_t)this;
  uint64_t v8 = *((void *)a2 + 2);
  unint64_t v39 = v8;
  if (*((unsigned char *)this + 297))
  {
    if (!*((unsigned char *)this + 560))
    {
      if ((*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this))
      {
        unint64_t v9 = 0;
        do
        {
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::optional<DspLib::MultiSpan<float const>>)::$_0::operator()(v48, v9, 1u, 1);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::optional<DspLib::MultiSpan<float const>>)::$_0::operator()(v48, v9, 2u, 1);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::optional<DspLib::MultiSpan<float const>>)::$_0::operator()(v48, v9, 3u, 1);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::optional<DspLib::MultiSpan<float const>>)::$_0::operator()(v48, v9, 4u, 1);
          DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::optional<DspLib::MultiSpan<float const>>)::$_0::operator()(v48, v9++, 5u, 1);
        }
        while (v9 < (*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this));
      }
      *((unsigned char *)this + 560) = 1;
    }
    if ((*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this))
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
        DspLib::LoudspeakerController::Algorithm::setAmbientTemperature(v12, *(float *)(*((void *)this + 45) + v10 + 2148), v11);
        uint64_t v13 = *((void *)this + 45);
        if (*((unsigned char *)this + 532) && *(unsigned char *)(v13 + v10 + 2184) && *(unsigned char *)(v13 + v10 + 2256))
        {
          float v14 = (float *)(v13 + v10);
          float v15 = v14[530];
          if (v15 == 0.0) {
            float v16 = 1000.0;
          }
          else {
            float v16 = v14[532] + (float)((float)(1.0 / v15) * (float)((float)(v14[561] / v14[531]) + -1.0));
          }
          if (v16 != *(float *)(*((void *)this + 67) + 4 * v11))
          {
            uint64_t v18 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
            DspLib::LoudspeakerController::Algorithm::setClosedLoopTemperature(v18, v16, v11);
            *(float *)(*((void *)this + 67) + 4 * v11) = v16;
          }
        }
        else if (*(unsigned char *)(v13 + v10 + 2240))
        {
          int v17 = (DspLib::LoudspeakerController::Algorithm *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
          DspLib::LoudspeakerController::Algorithm::decayClosedLoopTemperatureOffset(v17, v11, v8);
        }
        ++v11;
        v10 += 2456;
      }
      while (v11 < (*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this));
    }
    unint64_t v19 = *((void *)this + 72) + v8;
    *((void *)this + 72) = v19;
    if (v19 >= *((void *)this + 71))
    {
      DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::optional<DspLib::MultiSpan<float const>>)::$_0::operator()(v48, *((void *)this + 73), *((void *)this + 74), 0);
      *((void *)this + 72) = 0;
      unint64_t v20 = *((void *)this + 73);
      uint64_t v21 = *((void *)this + 74);
      if (v20 >= (unint64_t)(*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this)
                - 1)
      {
        unint64_t v22 = 0;
        if ((v21 - 1) > 2) {
          LODWORD(v21) = 1;
        }
        else {
          LODWORD(v21) = dword_1BB8730FC[(int)v21 - 1];
        }
      }
      else
      {
        unint64_t v22 = v20 + 1;
      }
      *((void *)this + 73) = v22;
      *((_DWORD *)this + 148) = v21;
      for (uint64_t i = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
            *(void *)(i + 504);
            uint64_t i = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1))
      {
        if ((v21 & 0xFFFFFFFE) != 2) {
          break;
        }
        unint64_t v24 = *((void *)this + 73);
        if (*(_DWORD *)(*(void *)(i + 512) + 16 * v24) != 2) {
          break;
        }
        LODWORD(v21) = *((_DWORD *)this + 148);
        if (v24 >= (unint64_t)(*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this)
                  - 1)
        {
          unint64_t v25 = 0;
          if ((v21 - 1) > 2) {
            LODWORD(v21) = 1;
          }
          else {
            uint64_t v21 = qword_1BB873108[(int)v21 - 1];
          }
        }
        else
        {
          unint64_t v25 = v24 + 1;
        }
        *((void *)this + 73) = v25;
        *((_DWORD *)this + 148) = v21;
      }
      DspLib::LoudspeakerManagerV2::Algorithm::updateAcousticResonanceControlIfNeeded(this);
    }
  }
  uint64_t v26 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
  long long v46 = *a2;
  uint64_t v47 = *((void *)a2 + 2);
  long long v27 = *a3;
  uint64_t v45 = *((void *)a3 + 2);
  long long v28 = a4[1];
  long long v38 = a4;
  v43[0] = *a4;
  v43[1] = v28;
  long long v44 = v27;
  (*(void (**)(uint64_t, long long *, long long *, _OWORD *))(*(void *)v26 + 144))(v26, &v46, &v44, v43);
  if ((*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this))
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    uint64_t v32 = 2240;
    do
    {
      uint64_t v33 = *((void *)this + 63) + v30;
      float v34 = *(float **)(*(void *)a3 + 8 * v31);
      unint64_t v35 = *((void *)a3 + 2);
      uint64_t v36 = DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1);
      DspLib::PilotToneV2::PilotTone::process(v33, v34, v35, *(void *)(*(void *)(v36 + 576) + v29), (uint64_t)(*(void *)(*(void *)(v36 + 576) + v29 + 8) - *(void *)(*(void *)(v36 + 576) + v29)) >> 2);
      DspLib::LoudspeakerHealth::process((uint64_t)this + 600, *(void *)(*(void *)a3 + 8 * v31), *((void *)a3 + 2), *((void *)this + 45) + v32, v31);
      ++v31;
      v30 += 280;
      v32 += 2456;
      v29 += 4544;
    }
    while (v31 < (*(unsigned int (**)(DspLib::AlgorithmBaseNewParameters *))(*(void *)this + 56))(this));
  }
  if (*((unsigned char *)this + 824))
  {
    uint64_t v41 = *(void *)a3;
    long long v42 = *(long long *)((char *)a3 + 8);
    long long v37 = v38[1];
    v40[0] = *v38;
    v40[1] = v37;
    DspLib::LoudspeakerManagerV2::Algorithm::processLogging(this, &v41, (uint64_t)v40);
  }
  if (*((unsigned char *)this + 24)) {
    DspLib::CPUMeasure::stop((DspLib::AlgorithmBaseNewParameters *)((char *)this + 56), v39, *((double *)this + 2));
  }
}

void DspLib::LoudspeakerManagerV2::Algorithm::processBlock(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>,std::optional<DspLib::MultiSpan<float const>>)::$_0::operator()(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *a1;
  unint64_t v9 = (DspLib::LoudspeakerManagerV2::ModelManager *)(*a1 + 296);
  BOOL v11 = a3 < 2 && *(unsigned char *)(*(void *)(*a1 + 360) + 2456 * a2 + 2440) == 0;
  switch(a3)
  {
    case 0u:
    case 1u:
    case 3u:
    case 4u:
      double v4 = *(double *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1) + 16);
      goto LABEL_9;
    case 2u:
      double v4 = *(double *)(DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1) + 16);
      goto LABEL_12;
    case 5u:
      uint64_t v20 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1);
      double v21 = *(double *)(v20 + 16) / (double)*(unint64_t *)(v20 + 304);
      DspLib::LoudspeakerManagerV2::ModelManager::getZDomainVoiceCoilThermalModel((uint64_t)v9, a2, &v31, v21);
      uint64_t v22 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v8, 1);
      __n128 v29 = v31;
      int v30 = v32;
      DspLib::LoudspeakerController::Algorithm::setVoiceCoilModel(v22, (uint64_t)&v29, a2);
      DspLib::LoudspeakerManagerV2::ModelManager::getZDomainMagnetThermalModel((uint64_t)v9, a2, &v27, v21);
      uint64_t v23 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v8, 1);
      __n128 v25 = v27;
      int v26 = v28;
      DspLib::LoudspeakerController::Algorithm::setMagnetModel(v23, (uint64_t)&v25, a2);
      return;
    case 6u:
      unint64_t v24 = *(void (**)(void))(*(void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm(*a1, 1) + 40);
      v24();
      return;
    default:
LABEL_9:
      if ((a3 | 2) != 3) {
        return;
      }
LABEL_12:
      v31.n128_u8[0] = 0;
      uint64_t ZDomainLoudspeakerModel = DspLib::LoudspeakerManagerV2::ModelManager::getZDomainLoudspeakerModel(v9, a2, a3, v11, &v31, a4, v4);
      if (v31.n128_u8[0])
      {
        uint64_t v14 = ZDomainLoudspeakerModel;
        uint64_t v15 = v13;
        uint64_t v16 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v8, 1);
        DspLib::LoudspeakerController::Algorithm::setSpeakerModel(v16, v14, v15, a3, a2);
        if (a3 == 2)
        {
          if (*(unsigned char *)(*(void *)(v8 + 360) + 2456 * a2 + 2440))
          {
            uint64_t v17 = DspLib::AlgorithmBaseNewParameters::subAlgorithm(v8, 1);
            uint64_t v18 = DspLib::LoudspeakerManagerV2::ModelManager::passiveRadiatorZDomainCoefficients(v9, v4, a2);
            DspLib::LoudspeakerController::Algorithm::setPassiveRadiatorDisplacementModel(v17, v18, v19, a2);
          }
        }
      }
      return;
  }
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::status(uint64_t a1, float *a2, vDSP_Length __N)
{
  DspLib::clear(a2, __N);
  unsigned int v5 = *(_DWORD *)(a1 + 528);
  if (v5 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1)) {
    DspLib::PilotToneV2::PilotTone::status(*(void *)(a1 + 504) + 280 * *(unsigned int *)(a1 + 528), (uint64_t)(a2 + 2196));
  }
  DspLib::LoudspeakerManagerV2::ModelManager::status(a1 + 296, (uint64_t)a2);
  DspLib::LoudspeakerHealth::status(a1 + 600, (uint64_t)(a2 + 2359), 50);
  DspLib::clear(a2, 7uLL);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm(a1, 1) + 184);

  return v6();
}

void DspLib::LoudspeakerManagerV2::Algorithm::~Algorithm(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  DspLib::LoudspeakerManagerV2::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(void *)this = &unk_1F14A6D00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 105);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  DspLib::LoudspeakerHealth::~LoudspeakerHealth((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 600));
  unsigned int v5 = (void *)*((void *)this + 67);
  if (v5)
  {
    *((void *)this + 68) = v5;
    operator delete(v5);
  }
  uint64_t v8 = (void **)((char *)this + 504);
  std::vector<DspLib::PilotToneV2::PilotTone>::__destroy_vector::operator()[abi:ne180100](&v8);
  DspLib::LoudspeakerManagerV2::ModelManager::~ModelManager((DspLib::LoudspeakerManagerV2::Algorithm *)((char *)this + 296));
  *(void *)this = &unk_1F14A88D8;
  uint64_t v6 = (void *)*((void *)this + 34);
  if (v6)
  {
    *((void *)this + 35) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)((char *)this + 240);
  std::vector<std::unique_ptr<DspLib::AlgorithmBaseNewParameters>>::__destroy_vector::operator()[abi:ne180100](&v8);
  *(void *)this = &unk_1F14A87D8;
  uint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::latencySamples(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1) + 64);

  return v1();
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::tailTimeSamples(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)DspLib::AlgorithmBaseNewParameters::subAlgorithm((uint64_t)this, 1) + 72);

  return v1();
}

uint64_t DspLib::LoudspeakerManagerV2::Algorithm::numStatus(DspLib::LoudspeakerManagerV2::Algorithm *this)
{
  return 2409;
}

uint64_t std::vector<DspLib::PilotToneV2::PilotTone>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAF8AF8AF8AF8AF8BLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 280 * a2;
      do
      {
        *(_OWORD *)(v7 + 224) = 0uLL;
        *(_OWORD *)(v7 + 240) = 0uLL;
        *(_OWORD *)(v7 + 192) = 0uLL;
        *(_OWORD *)(v7 + 208) = 0uLL;
        *(_OWORD *)(v7 + 160) = 0uLL;
        *(_OWORD *)(v7 + 176) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(unsigned char *)(v7 + 104) = 1;
        *(void *)(v7 + 112) = 0;
        *(void *)(v7 + 118) = 0;
        *(void *)(v7 + 128) = 0;
        *(void *)(v7 + 136) = 0;
        *(_DWORD *)(v7 + 144) = 0;
        *(void *)(v7 + 152) = 0;
        *(void *)(v7 + 160) = 0;
        *(_OWORD *)(v7 + 192) = 0uLL;
        *(_OWORD *)(v7 + 208) = 0uLL;
        *(void *)(v7 + 221) = 0;
        *(void *)(v7 + 248) = 0;
        *(void *)(v7 + 256) = 0;
        *(void *)(v7 + 232) = 0;
        *(void *)(v7 + 240) = 0;
        *(unsigned char *)(v7 + 256) = 0;
        uint64_t v14 = (void *)(v7 + 260);
        *(void *)(v7 + 268) = 0;
        *(_DWORD *)(v7 + 276) = 0;
        v7 += 280;
        *uint64_t v14 = 0;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xEA0EA0EA0EA0EALL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x75075075075075) {
      unint64_t v11 = 0xEA0EA0EA0EA0EALL;
    }
    else {
      unint64_t v11 = v9;
    }
    v18[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = &v12[280 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[280 * v11];
    uint64_t v16 = &v15[280 * a2];
    do
    {
      *((_OWORD *)v15 + 14) = 0uLL;
      *((_OWORD *)v15 + 15) = 0uLL;
      *((_OWORD *)v15 + 12) = 0uLL;
      *((_OWORD *)v15 + 13) = 0uLL;
      *((_OWORD *)v15 + 10) = 0uLL;
      *((_OWORD *)v15 + 11) = 0uLL;
      *((_OWORD *)v15 + 8) = 0uLL;
      *((_OWORD *)v15 + 9) = 0uLL;
      *((_OWORD *)v15 + 6) = 0uLL;
      *((_OWORD *)v15 + 7) = 0uLL;
      *((_OWORD *)v15 + 4) = 0uLL;
      *((_OWORD *)v15 + 5) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *((_OWORD *)v15 + 3) = 0uLL;
      *(_OWORD *)uint64_t v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      v15[104] = 1;
      *((void *)v15 + 14) = 0;
      *(void *)(v15 + 118) = 0;
      *((void *)v15 + 16) = 0;
      *((void *)v15 + 17) = 0;
      *((_DWORD *)v15 + 36) = 0;
      *((void *)v15 + 19) = 0;
      *((void *)v15 + 20) = 0;
      *((_OWORD *)v15 + 12) = 0uLL;
      *((_OWORD *)v15 + 13) = 0uLL;
      *(void *)(v15 + 221) = 0;
      *((void *)v15 + 31) = 0;
      *((void *)v15 + 32) = 0;
      *((void *)v15 + 29) = 0;
      *((void *)v15 + 30) = 0;
      v15[256] = 0;
      uint64_t v17 = v15 + 260;
      *(void *)(v15 + 268) = 0;
      *((_DWORD *)v15 + 69) = 0;
      v15 += 280;
      void *v17 = 0;
    }
    while (v15 != v16);
    CFTypeRef v18[2] = v16;
    std::vector<DspLib::PilotToneV2::PilotTone>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<DspLib::PilotToneV2::PilotTone>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1BB2A80E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::PilotToneV2::PilotTone>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::PilotToneV2::PilotTone>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(280 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::PilotToneV2::PilotTone>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>,std::reverse_iterator<DspLib::PilotToneV2::PilotTone*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 280;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 280;
    std::construct_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone,DspLib::PilotToneV2::PilotTone*>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 56), (__n128 *)(a2 + 56));
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  long long v7 = *(_OWORD *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 128) = v7;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  uint64_t v10 = *(void *)(a2 + 216);
  *(void *)(a1 + 221) = *(void *)(a2 + 221);
  *(void *)(a1 + 216) = v10;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  long long v11 = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = v11;
  return a1;
}

void sub_1BB2A8354(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(void *a1)
{
  uint64_t v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 7));
  long long v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
}

uint64_t std::__split_buffer<DspLib::PilotToneV2::PilotTone>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 280;
    std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>((void *)(i - 280));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void DspLib::LoudspeakerController::SpeakerSystemModel::setHasPassiveRadiator(DspLib::LoudspeakerController::SpeakerSystemModel *this, char a2)
{
  if (a2)
  {
    if (!*((unsigned char *)this + 888))
    {
      memset(v9, 0, sizeof(v9));
      *(_OWORD *)std::string __p = 0u;
      memset(v7, 0, sizeof(v7));
      *(_OWORD *)long long v5 = 0u;
      long long v6 = 0u;
      long long v4 = 0u;
      uint64_t v2 = (DspLib::LoudspeakerController::SpeakerSystemModel *)((char *)this + 736);
      uint64_t v10 = -1;
      std::optional<DspLib::LoudspeakerController::BiquadModel>::operator=[abi:ne180100]<DspLib::LoudspeakerController::BiquadModel,void>((uint64_t)this + 736, (uint64_t)&v4);
      DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v9 + 8));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)v7);
      if (v5[1])
      {
        *(void **)&long long v6 = v5[1];
        operator delete(v5[1]);
      }
      DspLib::LoudspeakerController::BiquadModel::initialize(v2, 3uLL);
    }
  }
  else
  {
    uint64_t v3 = (char *)this + 736;
    std::__optional_destruct_base<DspLib::LoudspeakerController::BiquadModel,false>::reset[abi:ne180100]((uint64_t)v3);
  }
}

void sub_1BB2A8504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__optional_destruct_base<DspLib::LoudspeakerController::BiquadModel,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 120));
    uint64_t v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(void *)(a1 + 104) = v2;
      operator delete(v2);
    }
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 48));
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
    *(unsigned char *)(a1 + 152) = 0;
  }
}

uint64_t std::optional<DspLib::LoudspeakerController::BiquadModel>::operator=[abi:ne180100]<DspLib::LoudspeakerController::BiquadModel,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 152))
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    std::vector<float>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
    DspLib::Biquad::SetupWrapper::operator=((DspLib::Biquad::SetupWrapper *)(a1 + 48), (__n128 *)(a2 + 48));
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    std::vector<float>::__move_assign(a1 + 96, (__n128 *)(a2 + 96));
    DspLib::Biquad::SetupWrapper::operator=((DspLib::Biquad::SetupWrapper *)(a1 + 120), (__n128 *)(a2 + 120));
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
  }
  else
  {
    DspLib::LoudspeakerController::BiquadModel::BiquadModel(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
  return a1;
}

void DspLib::LoudspeakerController::BiquadModel::~BiquadModel(DspLib::LoudspeakerController::BiquadModel *this)
{
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::BiquadModel *)((char *)this + 120));
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerController::BiquadModel *)((char *)this + 48));
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

uint64_t DspLib::LoudspeakerController::BiquadModel::BiquadModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 120), (__n128 *)(a2 + 120));
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

void sub_1BB2A873C(_Unwind_Exception *a1)
{
  long long v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 104) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup(v2);
  long long v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void DspLib::LoudspeakerHealth::~LoudspeakerHealth(DspLib::LoudspeakerHealth *this)
{
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 11);
  if (v6)
  {
    *((void *)this + 12) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)this + 8);
  if (v7)
  {
    *((void *)this + 9) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)this + 5);
  if (v8)
  {
    *((void *)this + 6) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    *((void *)this + 3) = v9;
    operator delete(v9);
  }
}

void std::vector<DspLib::PilotToneV2::PilotTone>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    long long v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 35;
        std::__destroy_at[abi:ne180100]<DspLib::PilotToneV2::PilotTone,0>(v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::LoudspeakerManagerV2::ModelManager::~ModelManager(DspLib::LoudspeakerManagerV2::ModelManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  long long v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 11);
  if (v6)
  {
    *((void *)this + 12) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)this + 8);
  if (v7)
  {
    *((void *)this + 9) = v7;
    operator delete(v7);
  }
  long long v8 = (void **)((char *)this + 24);
  std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void std::vector<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<DspLib::LoudspeakerManagerV2::Calibration::SpTS::SpeakerCalibrationProperties,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[16],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x48uLL);
  std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[16],std::allocator<DspLib::Logger>,0>(v3, a2);
}

void sub_1BB2A8B10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[16],std::allocator<DspLib::Logger>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F14A6E48;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[16],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
}

void sub_1BB2A8B6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A6E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DspLib::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14A6E48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C185D370);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__on_zero_shared(uint64_t a1)
{
}

void std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[16],DspLib::Logger*>(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
}

void sub_1BB2A8C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[17],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x48uLL);
  std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],std::allocator<DspLib::Logger>,0>(v3, a2);
}

void sub_1BB2A8CB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],std::allocator<DspLib::Logger>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F14A6E48;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[17],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
}

void sub_1BB2A8D10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[17],DspLib::Logger*>(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
}

void sub_1BB2A8D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<DspLib::Logger,std::allocator<DspLib::Logger>,char const(&)[24],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x48uLL);
  std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[24],std::allocator<DspLib::Logger>,0>(v3, a2);
}

void sub_1BB2A8DD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DspLib::Logger>::__shared_ptr_emplace[abi:ne180100]<char const(&)[24],std::allocator<DspLib::Logger>,0>(void *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F14A6E48;
  std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[24],DspLib::Logger*>((uint64_t)(a1 + 3), a2);
}

void sub_1BB2A8E34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::construct_at[abi:ne180100]<DspLib::Logger,char const(&)[24],DspLib::Logger*>(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  DspLib::Logger::Logger(a1, (uint64_t)__p);
}

void sub_1BB2A8E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::TestToneGenerator(uint64_t this)
{
  *(void *)this = 0;
  *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::initialize(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(unsigned char *)(this + 8) = 1;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::reset(uint64_t this)
{
  *(void *)(this + 24) = 0;
  return this;
}

void DspLib::LoudspeakerSystemIDV1::TestToneGenerator::setParameters(DspLib::LoudspeakerSystemIDV1::TestToneGenerator *this, const DspLib::AlgorithmParametersInstance *a2)
{
  uint64_t v4 = (float *)DspLib::AlgorithmParametersInstance::group(a2, 2u);
  LODWORD(v2) = vcvtad_u64_f64(*(double *)this / v4[1]);
  float v5 = *(double *)this / (double)v2;
  float v6 = v5 * 6.28318531 / *(double *)this;
  *((float *)this + 3) = v6;
  *((float *)this + 4) = DspLib::dB2Amp((DspLib *)v4, v4[2]);
  *((unsigned char *)this + 9) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = v2;
}

void DspLib::LoudspeakerSystemIDV1::TestToneGenerator::process(DspLib::LoudspeakerSystemIDV1::TestToneGenerator *this, float *a2, vDSP_Length a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 9))
  {
    float v5 = (DspLib::LoudspeakerSystemIDV1::TestToneGenerator *)MEMORY[0x1F4188790](this);
    long long v7 = (const float *)((char *)v10 - v6);
    DspLib::LoudspeakerSystemIDV1::TestToneGenerator::updateTestToneGeneratorVector(v5, (float *)((char *)v10 - v6), v8);
    DspLib::add(a2, a3, v7);
  }
  else
  {
    long long v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1TestToneGenerator.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 53);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::LoudspeakerSystemIDV1::TestToneGenerator::updateTestToneGeneratorVector(DspLib::LoudspeakerSystemIDV1::TestToneGenerator *this, float *__C, vDSP_Length __N)
{
  uint64_t v6 = *((void *)this + 3);
  if (__N)
  {
    uint64_t v7 = 0;
    do
    {
      __C[v7] = sinf(*((float *)this + 3) * (float)(unint64_t)(v6 + v7));
      ++v7;
    }
    while (__N > v7);
  }
  *((void *)this + 3) = v6 + __N;
  unint64_t v8 = *((void *)this + 4);
  if (v6 + __N >= v8) {
    *((void *)this + 3) = v6 + __N - v8;
  }
  float v9 = *((float *)this + 4);

  DspLib::multiply(__C, __N, v9);
}

uint64_t DspLib::LoudspeakerSystemIDV1::TestToneGenerator::status(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 8))
  {
    float v2 = *(double *)result * (*(float *)(result + 12) / 6.28318531);
    *(float *)(a2 + 228) = v2;
  }
  else
  {
    uint64_t v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LoudspeakerManagerV1/LoudspeakerSystemIDV1/dsp/DspLibLoudspeakerSystemIDV1TestToneGenerator.cpp");
    uint64_t result = printf("DSP Sound assertion in %s at line %d\n", v3, 62);
    ++DspLibDebug::mAssertCounter;
  }
  return result;
}

float DspLib::Biquad::Design::lengthThreeFIR(float a1, float a2, float a3, float a4)
{
  float v8 = cosf(a4);
  float v9 = cosf(a4 + a4);
  float v10 = (float)((float)((float)((float)(a2 * a2) - (float)(a3 * a3)) / (float)(v8 * 4.0)) * -4.0) + (float)(a1 * a1);
  BOOL v11 = v10 < 0.0;
  float v12 = sqrtf(-(float)(v10 - (float)(a1 * a1)));
  float v13 = a1 - sqrtf(v10);
  if (v11) {
    float v13 = v12;
  }
  float v14 = v13 * 0.5;
  float v15 = (float)(1.0 - v9) + (float)(1.0 - v9);
  float v16 = a1 - v14;
  float v17 = (float)(v9 + -1.0) * (float)(v16 + v16);
  float v18 = (float)((float)(v15 * -4.0)
              * (float)((float)((float)((float)(v14 * v14) + (float)(v16 * v16))
                              + (float)((float)(v14 * (float)(v16 + v16)) * v8))
                      - (float)(a2 * a2)))
      + (float)(v17 * v17);
  float v19 = sqrtf(-(float)(v18 - (float)(v17 * v17)));
  float v20 = (float)-v17 - sqrtf(v18);
  if (v18 < 0.0) {
    float v20 = v19;
  }
  return v16 - (float)(v20 / (float)(v15 + v15));
}

float *DspLib::Biquad::Design::bilinearTransformStoZUnwarped(float *result, double a2)
{
  float v3 = result[1];
  float v2 = result[2];
  float v4 = result[3];
  float v5 = result[4];
  if (v3 != 0.0 || v4 != 0.0 || v2 != 0.0 || v5 != 0.0)
  {
    if (v5 == 0.0 && v2 == 0.0)
    {
      if (v4 == 0.0)
      {
        int v30 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/Biquad/dsp/DspLibBiquadDesigns.cpp");
        uint64_t result = (float *)printf("DSP Sound assertion in %s at line %d\n", v30, 56);
        ++DspLibDebug::mAssertCounter;
      }
      else
      {
        double v6 = a2 + a2;
        double v7 = v4;
        double v8 = v6 + v4;
        double v9 = *result;
        double v10 = v3;
        float v11 = (v3 + v9 * v6) / v8;
        *(float *)&double v9 = (v10 - v9 * v6) / v8;
        *(float *)&double v6 = (v7 - v6) / v8;
        char *result = v11;
        result[1] = *(float *)&v9;
        result[3] = *(float *)&v6;
      }
    }
    else
    {
      double v12 = a2 + a2;
      double v13 = v12 * v12;
      double v14 = v4;
      if (v5 == 0.0)
      {
        double v15 = *result;
        double v16 = v12 * v3;
        double v17 = v2;
        float v18 = (v16 + v15 * v13 + v2) / (v13 + v14);
        float v19 = ((float)(v2 + v2) + v15 * -2.0 * v13) / (v13 + v14);
        *(float *)&double v16 = (v17 - (v16 - v15 * v13)) / (v13 + v14);
        float v20 = (float)(v4 + v4) / (v13 + v14);
        char *result = v18;
        result[1] = v19;
        float v21 = (v14 - v12) / (v13 + v14);
        result[2] = *(float *)&v16;
        result[3] = v20;
      }
      else
      {
        double v22 = v5;
        double v23 = v13 + v14 * v12 + v5;
        double v24 = *result;
        double v25 = v12 * v3;
        double v26 = v2;
        float v27 = (v25 + v24 * v13 + v2) / v23;
        float v28 = ((float)(v2 + v2) - (float)(*result + *result) * v13) / v23;
        *(float *)&double v25 = (v26 - (v25 - v24 * v13)) / v23;
        float v29 = ((float)(v5 + v5) + v13 * -2.0) / v23;
        char *result = v27;
        result[1] = v28;
        float v21 = (v13 - v14 * v12 + v22) / v23;
        result[2] = *(float *)&v25;
        result[3] = v29;
      }
      result[4] = v21;
    }
  }
  return result;
}

float *DspLib::Biquad::Design::zeroOrderNumeratorbilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  double v4 = a4 + a4;
  if (a2 == 2)
  {
    double v9 = v4 * v4;
    double v10 = result[5];
    float v11 = result[3];
    double v12 = v4 * result[4];
    double v13 = v11;
    double v14 = 1.0 / (v12 + v4 * v4 * v10 + v11);
    float v8 = v14 * *result;
    float v7 = v14 * (float)(*result + *result);
    float v6 = ((float)(v11 + v11) + v9 * -2.0 * v10) * v14;
    float v15 = (v13 - (v12 - v9 * v10)) * v14;
    float v5 = v8;
  }
  else
  {
    float v5 = 0.0;
    if (a2 == 1)
    {
      double v16 = result[4];
      double v17 = result[3];
      double v18 = 1.0 / (v17 + v4 * v16);
      float v8 = v18 * *result;
      float v6 = (v17 - v4 * v16) * v18;
      float v7 = v8;
    }
    else if (a2)
    {
      float v8 = 0.0;
      float v7 = 0.0;
      float v6 = 0.0;
    }
    else
    {
      float v6 = 1.0;
      float v7 = *result * (float)(1.0 / result[3]);
      float v8 = 0.0;
    }
    float v15 = 0.0;
  }
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v5;
  a3[3] = v6;
  a3[4] = v15;
  return result;
}

float *DspLib::Biquad::Design::firstOrderNumeratorbilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  double v4 = a4 + a4;
  if (a2 == 2)
  {
    double v12 = result[5];
    float v13 = result[3];
    double v14 = v4 * result[4];
    double v15 = v13;
    double v16 = 1.0 / (v14 + v4 * v4 * v12 + v13);
    double v17 = result[1];
    double v18 = *result;
    float v10 = (v18 + v4 * v17) * v16;
    float v11 = v16 * (float)(*result + *result);
    float v5 = (v18 - v4 * v17) * v16;
    float v6 = ((float)(v13 + v13) + v4 * v4 * -2.0 * v12) * v16;
    float v19 = (v15 - (v14 - v4 * v4 * v12)) * v16;
  }
  else
  {
    float v5 = 0.0;
    if (a2 == 1)
    {
      double v20 = result[4];
      double v21 = result[3];
      double v22 = 1.0 / (v21 + v4 * v20);
      double v23 = result[1];
      double v24 = *result;
      float v10 = v22 * (v24 + v4 * v23);
      float v11 = v22 * (v24 - v4 * v23);
      float v6 = (v21 - v4 * v20) * v22;
    }
    else if (a2)
    {
      float v10 = 0.0;
      float v11 = 0.0;
      float v6 = 0.0;
    }
    else
    {
      float v6 = 1.0;
      double v7 = (float)(1.0 / result[3]);
      double v8 = result[1];
      double v9 = *result;
      float v10 = (v9 + v4 * v8) * v7;
      float v11 = (v9 - v4 * v8) * v7;
    }
    float v19 = 0.0;
  }
  *a3 = v10;
  a3[1] = v11;
  a3[2] = v5;
  a3[3] = v6;
  a3[4] = v19;
  return result;
}

float *DspLib::Biquad::Design::secondOrderNumeratorbilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X1>, float *a3@<X8>, double a4@<D0>)
{
  double v4 = a4 + a4;
  double v5 = v4 * v4;
  if (a2 == 2)
  {
    double v10 = result[5];
    double v11 = v4 * result[4];
    float v12 = result[3];
    double v13 = v12;
    double v14 = 1.0 / (v11 + v5 * v10 + v12);
    double v15 = result[2];
    double v16 = v4 * result[1];
    double v17 = *result;
    float v6 = v14 * (v16 + v5 * v15 + v17);
    float v8 = v14 * ((float)(*result + *result) + v5 * -2.0 * v15);
    float v9 = v14 * (v17 - (v16 - v5 * v15));
    float v7 = ((float)(v12 + v12) + v5 * -2.0 * v10) * v14;
    double v18 = (v13 - (v11 - v5 * v10)) * v14;
LABEL_7:
    float v25 = v18;
    goto LABEL_10;
  }
  if (a2 == 1)
  {
    double v19 = result[4];
    double v20 = result[3];
    double v21 = 1.0 / (v20 + v4 * v19);
    double v22 = result[2];
    double v23 = v4 * result[1];
    double v24 = *result;
    float v6 = v21 * (v23 + v5 * v22 + v24);
    float v8 = v21 * ((float)(*result + *result) + v5 * -2.0 * v22);
    float v9 = v21 * (v24 - (v23 - v5 * v22));
    float v7 = (v20 + v20) * v21;
    double v18 = (v20 - v4 * v19) * v21;
    goto LABEL_7;
  }
  float v6 = 0.0;
  if (a2)
  {
    float v8 = 0.0;
    float v9 = 0.0;
    float v7 = 0.0;
  }
  else
  {
    float v7 = 1.0;
    float v8 = *result * (float)(1.0 / result[3]);
    float v9 = 0.0;
  }
  float v25 = 0.0;
LABEL_10:
  *a3 = v6;
  a3[1] = v8;
  a3[2] = v9;
  a3[3] = v7;
  a3[4] = v25;
  return result;
}

float *DspLib::Biquad::Design::bilinearTransformStoZUnwarped@<X0>(float *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (*result == 0.0)
  {
    float v3 = result[1];
    if (v3 == 0.0 && result[2] == 0.0 && result[3] == 0.0 && result[4] == 0.0 && result[5] == 0.0)
    {
      *(_DWORD *)(a2 + 16) = 0;
      *(_OWORD *)a2 = DspLib::Biquad::kBypassSection;
      return result;
    }
  }
  else
  {
    float v3 = result[1];
  }
  uint64_t v4 = v3 != 0.0;
  if (result[2] != 0.0) {
    uint64_t v4 = 2;
  }
  if (result[5] == 0.0) {
    uint64_t v5 = result[4] != 0.0;
  }
  else {
    uint64_t v5 = 2;
  }
  if (v4 == 2) {
    return DspLib::Biquad::Design::secondOrderNumeratorbilinearTransformStoZUnwarped(result, v5, (float *)a2, a3);
  }
  if (v4 == 1) {
    return DspLib::Biquad::Design::firstOrderNumeratorbilinearTransformStoZUnwarped(result, v5, (float *)a2, a3);
  }
  return DspLib::Biquad::Design::zeroOrderNumeratorbilinearTransformStoZUnwarped(result, v5, (float *)a2, a3);
}

void DspLib::Biquad::Design::ParametricEQ::design(DspLib::Biquad::Design::ParametricEQ *this@<X0>, float a2@<S0>, int a3@<W1>, double *a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (*(_DWORD *)this > 0x13u || ((1 << *(_DWORD *)this) & 0xB4007) == 0)
    {
      puts("ERROR: prototypeForPhaseCompensation not available for this filter type.");
      *(_DWORD *)a5 = 1065353216;
      *(void *)(a5 + 12) = 0;
      *(void *)(a5 + 4) = 0;
      return;
    }
    float v7 = *(DspLib **)this;
    uint64_t v8 = *((void *)this + 1);
    LODWORD(v9) = HIDWORD(*(void *)this);
    float v10 = *((float *)&v8 + 1);
    float v11 = 0.5;
    float v12 = 0.125;
    float v13 = 1000000.0;
    if ((int)*(void *)this <= 1)
    {
      if (v7)
      {
        LODWORD(v14) = HIDWORD(*((void *)this + 1));
        float v15 = 0.5;
        if (v7 == 1)
        {
          if (*((float *)&v8 + 1) <= 0.3) {
            float v14 = 0.3;
          }
          else {
            LODWORD(v14) = HIDWORD(*((void *)this + 1));
          }
          float v15 = -0.5;
          float v11 = 1.0;
          float v12 = 1.25;
          float v13 = 0.025;
        }
      }
      else
      {
        if (*((float *)&v8 + 1) <= 0.3) {
          float v14 = 0.3;
        }
        else {
          LODWORD(v14) = HIDWORD(*((void *)this + 1));
        }
        float v15 = -0.5;
        float v11 = 1.0;
        float v13 = 0.025;
        float v12 = 0.8;
      }
      goto LABEL_27;
    }
    if (v7 == 19)
    {
      float v15 = -0.5;
      float v11 = 0.25;
      float v12 = 0.5;
    }
    else
    {
      if (v7 == 17)
      {
        float v11 = 0.25;
        float v12 = 0.5;
        LODWORD(v14) = HIDWORD(*((void *)this + 1));
        float v15 = 0.5;
LABEL_27:
        float v18 = sqrtf(*((float *)&v8 + 1));
        float v19 = logf(v11);
        v48[0] = expf(v19 / v18) * v9;
        float v20 = logf(v12);
        v48[1] = expf(v20 / v18) * v9;
        LOBYTE(v42) = 0;
        long long v43 = 0u;
        long long v44 = 0u;
        memset(v45, 0, sizeof(v45));
        DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v42, 1uLL, 1uLL);
        LOBYTE(v38) = 0;
        long long v39 = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v41, 0, sizeof(v41));
        DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v38, 1uLL, 1uLL);
        float v21 = fabsf(*(float *)&v8);
        DspLib::Biquad::Design::parametricSectionRegular(v7, LODWORD(v21) | ((unint64_t)LODWORD(v14) << 32), v22, &v37, a2);
        DspLib::Biquad::Filter::setCoefficients((uint64_t)&v42, (uint64_t)&v37, 1, 0, 0x41uLL);
        DspLib::Biquad::amplitudeResponse(&v42, (uint64_t)v48, 2uLL, (uint64_t)&__B, 2, 0, 44100.0, v23, v24);
        DspLib::amp2dB(&__B, 2uLL, 1.0);
        int v26 = 99;
        do
        {
          DspLib::Biquad::Design::parametricSectionRegular(v7, COERCE_UNSIGNED_INT(v21 * 0.5) | ((unint64_t)LODWORD(v10) << 32), v25, &v36, a2);
          DspLib::Biquad::Filter::setCoefficients((uint64_t)&v38, (uint64_t)&v36, 1, 0, 0x41uLL);
          DspLib::Biquad::amplitudeResponse(&v38, (uint64_t)v48, 2uLL, (uint64_t)&__C, 2, 0, 44100.0, v27, v28);
          DspLib::amp2dB(&__C, 2uLL, 1.0);
          DspLib::multiply(&__C, 2uLL, 2.0);
          DspLib::subtract(&__C, 2uLL, &__B);
          float v29 = v15 * DspLib::mean(&__C, 2uLL);
          float v31 = v10 * DspLib::dB2Amp(v30, v29);
          if (v31 <= 19.9) {
            float v32 = v31;
          }
          else {
            float v32 = 19.9;
          }
          if (v31 >= 0.1) {
            float v10 = v32;
          }
          else {
            float v10 = 0.1;
          }
        }
        while ((v29 >= v13 || v29 <= -0.025) && v26-- != 0);
        DspLib::Biquad::Design::parametricSectionRegular(v7, COERCE_UNSIGNED_INT(*(float *)&v8 * 0.5) | ((unint64_t)LODWORD(v10) << 32), v25, (float32x4_t *)a5, a2);
        DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v41 + 8));
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v45[8]);
        if ((void)v44)
        {
          *((void *)&v44 + 1) = v44;
          operator delete((void *)v44);
        }
        return;
      }
      LODWORD(v14) = HIDWORD(*((void *)this + 1));
      float v15 = 0.5;
      if (v7 != 2) {
        goto LABEL_27;
      }
      float v15 = -0.5;
      float v12 = 0.5;
      float v13 = 0.1;
      float v11 = 0.8;
    }
    LODWORD(v14) = HIDWORD(*((void *)this + 1));
    goto LABEL_27;
  }
  uint64_t v16 = *((void *)this + 1);
  double v17 = *(DspLib **)this;

  DspLib::Biquad::Design::parametricSectionRegular(v17, v16, a4, (float32x4_t *)a5, a2);
}

void sub_1BB2A9D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::Biquad::Design::parametricSectionRegular@<X0>(DspLib *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, float32x4_t *a4@<X8>, float a5@<S0>)
{
  float v7 = *((float *)&a1 + 1);
  float v8 = *(float *)&a2;
  switch((int)a1)
  {
    case 0:
      float v9 = *((float *)&a2 + 1);
      __double2 v10 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      double v11 = 1.0;
      double v12 = v10.__sinval * sinh(1.0 / (v9 + v9));
      double v13 = 1.0 / (v12 + 1.0);
      double cosval = v10.__cosval;
      v15.f64[0] = 1.0 - v10.__cosval;
      double v16 = (1.0 - v10.__cosval) * v13;
      goto LABEL_4;
    case 1:
      float v17 = *((float *)&a2 + 1);
      __double2 v18 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      double v11 = 1.0;
      double v12 = v18.__sinval * sinh(1.0 / (v17 + v17));
      double v13 = 1.0 / (v12 + 1.0);
      double cosval = v18.__cosval;
      v15.f64[0] = v18.__cosval + 1.0;
      double v16 = (-1.0 - v18.__cosval) * v13;
LABEL_4:
      v15.f64[1] = cosval;
      float64x2_t v19 = vmulq_n_f64(vmulq_f64(v15, (float64x2_t)xmmword_1BB873130), v13);
      *(float64_t *)double v204 = v19.f64[0];
      *(double *)&v204[8] = v16;
      *(float64x2_t *)&v204[16] = v19;
      double v20 = (v11 - v12) * v13;
      goto LABEL_47;
    case 2:
      float v21 = *((float *)&a2 + 1);
      __double2 v22 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      long double v23 = v22.__sinval * sinh(1.0 / (v21 + v21));
      double v24 = 1.0 / (v23 + 1.0);
      *(double *)double v204 = v24;
      *(double *)&v204[8] = v22.__cosval * -2.0 * v24;
      *(double *)&v204[16] = v24;
      *(double *)&v204[24] = *(double *)&v204[8];
      double v25 = 1.0 - v23;
      goto LABEL_16;
    case 3:
      if (*(float *)&a2 == 0.0) {
        goto LABEL_7;
      }
      float v196 = *((float *)&a2 + 1);
      __double2 v197 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      long double v198 = v197.__sinval * sinh(1.0 / (v196 + v196));
      double v199 = __exp10(v8 * 0.025);
      double v33 = 1.0 / (v198 / v199 + 1.0);
      *(double *)double v204 = (v198 * v199 + 1.0) * v33;
      *(double *)&v204[8] = v197.__cosval * -2.0 * v33;
      *(double *)&v204[16] = (1.0 - v198 * v199) * v33;
      *(double *)&v204[24] = *(double *)&v204[8];
      double v42 = 1.0 - v198 / v199;
      goto LABEL_11;
    case 4:
      __double2 v26 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      double sinval = v26.__sinval;
      double v28 = __exp10(v8 * 0.025);
      double v29 = v28 + -1.0;
      double v30 = sqrt((v28 * v28 + 1.0) / 0.707106781 - v29 * v29);
      double v31 = v28 + 1.0;
      double v32 = v28 + 1.0 + (v28 + -1.0) * v26.__cosval;
      double v33 = 1.0 / (v32 + v30 * v26.__sinval);
      double v34 = v28 + 1.0 - (v28 + -1.0) * v26.__cosval;
      *(double *)double v204 = v28 * (v34 + v30 * v26.__sinval) * v33;
      *(double *)&v204[8] = (v28 + v28) * (v28 + -1.0 - (v28 + 1.0) * v26.__cosval) * v33;
      double v35 = v28 * (v34 - v30 * v26.__sinval) * v33;
      double v36 = (v29 + v31 * v26.__cosval) * -2.0;
      goto LABEL_10;
    case 5:
      __double2 v37 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      double sinval = v37.__sinval;
      double v38 = __exp10(v8 * 0.025);
      double v39 = v38 + -1.0;
      double v30 = sqrt((v38 * v38 + 1.0) / 0.707106781 - v39 * v39);
      double v40 = v38 + 1.0;
      double v32 = v38 + 1.0 - (v38 + -1.0) * v37.__cosval;
      double v33 = 1.0 / (v32 + v30 * v37.__sinval);
      double v41 = v38 + 1.0 + (v38 + -1.0) * v37.__cosval;
      *(double *)double v204 = v38 * (v41 + v30 * v37.__sinval) * v33;
      *(double *)&v204[8] = v38 * -2.0 * (v38 + -1.0 + (v38 + 1.0) * v37.__cosval) * v33;
      double v35 = v38 * (v41 - v30 * v37.__sinval) * v33;
      double v36 = v39 - v40 * v37.__cosval + v39 - v40 * v37.__cosval;
LABEL_10:
      *(double *)&v204[16] = v35;
      *(double *)&v204[24] = v36 * v33;
      double v42 = v32 - v30 * sinval;
LABEL_11:
      double v20 = v42 * v33;
      goto LABEL_47;
    case 6:
      long double v43 = 1.0 / tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      *(double *)double v204 = 1.0 / (v43 + 1.0);
      *(double *)&v204[8] = *(double *)v204;
      *(void *)&v204[16] = 0;
      double v44 = (1.0 - v43) * *(double *)v204;
      goto LABEL_42;
    case 7:
      long double v45 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      long double v46 = 1.0 / (v45 + 1.0);
      *(double *)double v204 = v46;
      *(double *)&v204[8] = -v46;
      *(void *)&v204[16] = 0;
      double v44 = (v45 + -1.0) * v46;
      goto LABEL_42;
    case 8:
      long double v47 = 1.0 / tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      long double v48 = 1.0 / (v47 * v47 + v47 * 1.41421356 + 1.0);
      *(double *)double v204 = v48;
      *(double *)&v204[8] = v48 + v48;
      *(double *)&v204[16] = v48;
      *(double *)&v204[24] = (1.0 - v47 * v47 + 1.0 - v47 * v47) * v48;
      double v20 = (v47 * -1.41421356 + 1.0 + v47 * v47) * v48;
      goto LABEL_47;
    case 9:
      long double v49 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      double v24 = 1.0 / (v49 * 1.41421356 + v49 * v49 + 1.0);
      *(double *)double v204 = v24;
      *(double *)&v204[8] = v24 * -2.0;
      *(double *)&v204[16] = v24;
      *(double *)&v204[24] = (v49 * v49 + -1.0 + v49 * v49 + -1.0) * v24;
      double v25 = v49 * -1.41421356 + 1.0 + v49 * v49;
LABEL_16:
      double v20 = v25 * v24;
      goto LABEL_47;
    case 10:
      long double v50 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      double v44 = (1.0 - 1.0 / v50) * (1.0 / (1.0 / v50 + 1.0));
      *(double *)double v204 = v44;
      *(_OWORD *)&v204[8] = xmmword_1BB872F30;
      goto LABEL_42;
    case 11:
      float v51 = *((float *)&a2 + 1);
      __double2 v52 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      long double v53 = v52.__sinval * sinh(1.0 / (v51 + v51));
      long double v54 = v53 / __exp10(v8 * 0.025);
      long double v55 = 1.0 / (v54 + 1.0);
      double v56 = (1.0 - v54) * v55;
      double v57 = v52.__cosval * -2.0 * v55;
      *(double *)double v204 = v56;
      *(double *)&v204[8] = v57;
      *(void *)&v204[16] = 0x3FF0000000000000;
      goto LABEL_24;
    case 12:
      double v58 = tan(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      double v59 = v58 * v58;
      double v60 = __exp10(v8 * 0.05);
      double v61 = v58 * 1.41421356 + 1.0 + v58 * v58;
      double v62 = sqrt(v60 + v60);
      *(double *)double v204 = (v58 * v58 + v60 + v62 * v58) / v61;
      *(double *)&v204[8] = (v59 - v60 + v59 - v60) / v61;
      *(double *)&v204[16] = (v58 * v58 + v60 - v62 * v58) / v61;
      *(double *)&v204[24] = (v59 + -1.0 + v59 + -1.0) / v61;
      double v20 = (v58 * -1.41421356 + 1.0 + v58 * v58) / v61;
      goto LABEL_47;
    case 13:
      float v63 = *((float *)&a2 + 1);
      double v64 = a5;
      __double2 v66 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      double v67 = v66.__cosval / v66.__sinval * (v66.__cosval / v66.__sinval);
      double v68 = v67 * 1102.5 / (v63 * 3.14159265 * v64);
      double v69 = v67 + v68 + 1.0;
      double v200 = v68 / v69;
      double v70 = -v68 / v69;
      double v71 = (1.0 - v67 + 1.0 - v67) / v69;
      double v72 = v67 + 1.0 - v68;
      goto LABEL_22;
    case 14:
      float v73 = *((float *)&a2 + 1);
      __double2 v74 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5 * 0.5);
      double v75 = v74.__cosval / v74.__sinval * (v74.__cosval / v74.__sinval);
      double v76 = v74.__cosval / v74.__sinval / v73;
      double v69 = v75 + v76 + 1.0;
      double v200 = v76 / v69;
      double v70 = -v76 / v69;
      double v71 = (1.0 - v75 + 1.0 - v75) / v69;
      double v72 = v75 + 1.0 - v76;
LABEL_22:
      *(double *)&v204[24] = v71;
      *(double *)&v204[32] = v72 / v69;
      double v77 = DspLib::dB2Amp(v65, v8);
      *(float64x2_t *)double v204 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v200, v77);
      *(double *)&v204[16] = v70 * v77;
      break;
    case 15:
      double v78 = 1.0 / *((float *)&a2 + 1) * 0.5;
      __double2 v79 = __sincos_stret(*((float *)&a1 + 1) * 6.28318531 / a5);
      double v56 = (1.0 - v78 * v79.__sinval) / (v78 * v79.__sinval + 1.0);
      double v80 = (v56 + 1.0 + v79.__cosval * (v56 + 1.0)) * 0.25;
      *(double *)double v204 = v80;
      *(double *)&v204[8] = v80 * -2.0;
      double v57 = -(v79.__cosval * (v56 + 1.0));
      *(double *)&v204[16] = v80;
LABEL_24:
      *(double *)&v204[24] = v57;
      *(double *)&v204[32] = v56;
      break;
    case 16:
      float v81 = *((float *)&a2 + 1);
      float v83 = DspLib::dB2Amp(a1, *(float *)&a2);
      if (v83 >= 1.0) {
        double v84 = v83;
      }
      else {
        double v84 = 1.0 / v83;
      }
      double v85 = v81;
      double v86 = v7 * 6.28318531 / a5;
      memset(v204, 0, sizeof(v204));
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v86, v85, 1.0, (double *)&v204[32], v82);
      double v87 = *(double *)&v204[24];
      double v88 = *(double *)&v204[32];
      double v201 = 1.0 / (*(double *)&v204[24] + 1.0 + *(double *)&v204[32]);
      double v89 = 1.0
          / sqrt(fabs(*(double *)&v204[24] + 1.0 - *(double *)&v204[32] + v87 * v87 + v87 * *(double *)&v204[32] + v88 * v88));
      double v90 = 1.0
          / sqrt(fabs(1.0 - *(double *)&v204[24] - *(double *)&v204[32] + v87 * v87 - v87 * *(double *)&v204[32] + v88 * v88));
      *(float *)&double v88 = 1.04719755 / v86;
      *(float *)&double v86 = *(float *)&v88 + *(float *)&v88;
      LODWORD(v87) = 0;
      float v205 = DspLib::Biquad::Design::analogBell(v91, *(DSPComplex *)&v87, v84, v85);
      int v206 = v92;
      double v94 = DspLib::abs((DspLib *)&v205, v93);
      v207.real = 0.0;
      v207.imag = *(float *)&v86;
      float v205 = DspLib::Biquad::Design::analogBell(v95, v207, v84, v85);
      int v206 = v96;
      float v98 = DspLib::abs((DspLib *)&v205, v97);
      DspLib::Biquad::Design::secondOrderFIRWithGains((DspLib::Biquad::Design *)v204, 1.0 / v201, v94 / v89, v98 / v90, (double *)&v204[8], (double *)&v204[16], v99);
      if (v83 < 1.0)
      {
        uint64_t v100 = *(void *)v204;
        *(double *)double v204 = 1.0 / *(double *)v204;
        float64x2_t v101 = (float64x2_t)vdupq_lane_s64(v100, 0);
        float64x2_t v102 = *(float64x2_t *)&v204[8];
        *(float64x2_t *)&v204[8] = vdivq_f64(*(float64x2_t *)&v204[24], v101);
        *(float64x2_t *)&v204[24] = vdivq_f64(v102, v101);
      }
      break;
    case 17:
      float v103 = *((float *)&a2 + 1);
      double v104 = *((float *)&a1 + 1) * 6.28318531 / a5;
      double v105 = DspLib::dB2Amp(a1, *(float *)&a2);
      memset(v204, 0, sizeof(v204));
      double v106 = v103;
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v104, v106, v105, (double *)&v204[32], v107);
      double v108 = *(double *)&v204[24];
      double v109 = *(double *)&v204[32];
      double v110 = 1.0 / (*(double *)&v204[24] + 1.0 + *(double *)&v204[32]);
      double v111 = 1.0
           / sqrt(fabs(*(double *)&v204[24]+ 1.0- *(double *)&v204[32]+ v108 * v108+ v108 * *(double *)&v204[32]+ v109 * v109));
      double v112 = 1.0
           / sqrt(fabs(1.0- *(double *)&v204[24]- *(double *)&v204[32]+ v108 * v108- v108 * *(double *)&v204[32]+ v109 * v109));
      *(float *)&double v109 = 1.04719755 / v104;
      *(float *)&double v104 = *(float *)&v109 + *(float *)&v109;
      LODWORD(v108) = 0;
      float v205 = DspLib::Biquad::Design::analogHighShelf(v113, *(DSPComplex *)&v108, v105, v106);
      int v206 = v114;
      double v116 = DspLib::abs((DspLib *)&v205, v115);
      v208.real = 0.0;
      v208.imag = *(float *)&v104;
      float v205 = DspLib::Biquad::Design::analogHighShelf(v117, v208, v105, v106);
      int v206 = v118;
      double v121 = DspLib::abs((DspLib *)&v205, v119);
      double v122 = 1.0 / v110;
      double v123 = v116 / v111;
      double v124 = v121 / v112;
      goto LABEL_50;
    case 18:
      double v125 = *((float *)&a1 + 1) * 6.28318531 / a5;
      memset(v204, 0, sizeof(v204));
      double v126 = *((float *)&a2 + 1);
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v125, *((float *)&a2 + 1), 1.0, (double *)&v204[32], a3);
      double v127 = *(double *)&v204[24];
      double v128 = *(double *)&v204[32];
      double v129 = 1.0
           / sqrt(*(double *)&v204[24]+ 1.0- *(double *)&v204[32]+ v127 * v127+ v127 * *(double *)&v204[32]+ v128 * v128);
      double v130 = 1.0
           / sqrt(1.0- *(double *)&v204[24]- *(double *)&v204[32]+ v127 * v127- v127 * *(double *)&v204[32]+ v128 * v128);
      *(float *)&double v128 = 1.04719755 / v125;
      *(float *)&double v125 = *(float *)&v128 + *(float *)&v128;
      LODWORD(v127) = 0;
      float v205 = DspLib::Biquad::Design::analogHighPass(v131, *(DSPComplex *)&v127, v126);
      int v206 = v132;
      double v134 = DspLib::abs((DspLib *)&v205, v133);
      v209.real = 0.0;
      v209.imag = *(float *)&v125;
      float v205 = DspLib::Biquad::Design::analogHighPass(v135, v209, v126);
      int v206 = v136;
      float v138 = DspLib::abs((DspLib *)&v205, v137);
      double v123 = v134 / v129;
      double v124 = v138 / v130;
      double v122 = 0.0;
      goto LABEL_50;
    case 19:
      float v139 = *((float *)&a2 + 1);
      double v140 = *((float *)&a1 + 1) * 6.28318531 / a5;
      double v141 = DspLib::dB2Amp(a1, *(float *)&a2);
      memset(v204, 0, sizeof(v204));
      double v142 = v139;
      DspLib::Biquad::Design::matchedZtransform((DspLib::Biquad::Design *)&v204[24], v140, v142, 1.0 / v141, (double *)&v204[32], v143);
      double v144 = *(double *)&v204[24];
      double v145 = *(double *)&v204[32];
      double v146 = 1.0 / (*(double *)&v204[24] + 1.0 + *(double *)&v204[32]);
      double v147 = 1.0
           / sqrt(fabs(*(double *)&v204[24]+ 1.0- *(double *)&v204[32]+ v144 * v144+ v144 * *(double *)&v204[32]+ v145 * v145));
      double v148 = 1.0
           / sqrt(fabs(1.0- *(double *)&v204[24]- *(double *)&v204[32]+ v144 * v144- v144 * *(double *)&v204[32]+ v145 * v145));
      *(float *)&double v145 = 1.04719755 / v140;
      *(float *)&double v140 = *(float *)&v145 + *(float *)&v145;
      LODWORD(v144) = 0;
      float v205 = DspLib::Biquad::Design::analogLowShelf(v149, *(DSPComplex *)&v144, v141, v142);
      int v206 = v150;
      double v152 = DspLib::abs((DspLib *)&v205, v151);
      v210.real = 0.0;
      v210.imag = *(float *)&v140;
      float v205 = DspLib::Biquad::Design::analogLowShelf(v153, v210, v141, v142);
      int v206 = v154;
      double v156 = DspLib::abs((DspLib *)&v205, v155);
      double v122 = v141 / v146;
      double v123 = v152 / v147;
      double v124 = v156 / v148;
      goto LABEL_50;
    case 20:
      double v157 = *((float *)&a2 + 1);
      double v158 = 1.0 / (v157 + v157);
      double v159 = v158 * v158;
      double v160 = *((float *)&a1 + 1) * 6.28318531 / a5;
      memset(v204, 0, 24);
      double v161 = -v160;
      if (*((float *)&a2 + 1) >= 0.5)
      {
        long double v181 = exp(v158 * v161) * -2.0;
        double v164 = v181 * cos(v160 * sqrt(1.0 - v159));
      }
      else
      {
        double v162 = sqrt(v159 + -1.0);
        double v163 = exp((v158 + v162) * v161);
        double v164 = -(v163 + exp((v158 - v162) * v161));
      }
      *(double *)&v204[24] = v164;
      *(void *)&v204[32] = exp(v158 * (v160 * -2.0));
      double v182 = 1.0 / (*(double *)&v204[32] + v164 + 1.0);
      double v183 = 1.0
           / sqrt(fabs(v164+ 1.0- *(double *)&v204[32]+ v164 * v164+ v164 * *(double *)&v204[32]+ *(double *)&v204[32] * *(double *)&v204[32]));
      double v184 = 1.0
           / sqrt(fabs(1.0- v164- *(double *)&v204[32]+ v164 * v164- v164 * *(double *)&v204[32]+ *(double *)&v204[32] * *(double *)&v204[32]));
      v211.imag = 1.04719755 / v160;
      float v185 = v211.imag + v211.imag;
      v211.real = 0.0;
      float v205 = DspLib::Biquad::Design::analogLowPass(v186, v211, v157);
      int v206 = v187;
      double v189 = DspLib::abs((DspLib *)&v205, v188);
      v212.real = 0.0;
      v212.imag = v185;
      float v205 = DspLib::Biquad::Design::analogLowPass(v190, v212, v157);
      int v206 = v191;
      double v193 = DspLib::abs((DspLib *)&v205, v192);
      double v122 = 1.0 / v182;
      double v123 = v189 / v183;
      double v124 = v193 / v184;
LABEL_50:
      DspLib::Biquad::Design::secondOrderFIRWithGains((DspLib::Biquad::Design *)v204, v122, v123, v124, (double *)&v204[8], (double *)&v204[16], v120);
      break;
    case 21:
      double v165 = a5;
      double v166 = *(float *)&a2;
      double v167 = *((float *)&a1 + 1);
      uint64_t v168 = 0;
      goto LABEL_38;
    case 22:
      double v165 = a5;
      double v166 = *(float *)&a2;
      double v167 = *((float *)&a1 + 1);
      uint64_t v168 = 1;
LABEL_38:
      DspLib::Biquad::Design::easttyBaxandallToneControl((DspLib::Biquad::Design *)v168, v165, v166, v167, (double *)v204);
      break;
    case 23:
LABEL_7:
      *(_OWORD *)double v204 = DspLib::Biquad::Design::kBypassDouble;
      memset(&v204[16], 0, 24);
      break;
    case 26:
      memset(&v204[8], 0, 32);
      *(double *)double v204 = DspLib::dB2Amp(a1, *(float *)&a2);
      break;
    case 27:
      float v169 = expf(-1.0 / (float)((float)(*((float *)&a1 + 1) * a5) / 1000.0));
      *(double *)double v204 = (float)(1.0 - v169);
      *(void *)&v204[8] = 0;
      *(void *)&v204[16] = 0;
      double v44 = (float)-v169;
LABEL_42:
      *(double *)&v204[24] = v44;
      *(void *)&v204[32] = 0;
      break;
    case 28:
      double v170 = *((float *)&a2 + 1);
      float v171 = DspLib::dB2Amp(a1, *(float *)&a2);
      double v172 = v171;
      if (v8 >= 0.0) {
        double v173 = 1.0;
      }
      else {
        double v173 = v171;
      }
      double v174 = v173 * v170;
      long double v175 = 1.0 / tan(v7 * 3.14159265 / a5);
      long double v176 = v175 * v175;
      long double v177 = v175 / v174;
      long double v178 = v175 * v175 + v175 / v174 + 1.0;
      long double v179 = (1.0 - v175 * v175 + 1.0 - v175 * v175) * (1.0 / v178);
      long double v180 = v175 * v172 / v174;
      *(double *)double v204 = (v176 + v180 + 1.0) * (1.0 / v178);
      *(long double *)&v204[8] = v179;
      *(double *)&v204[16] = (v176 + 1.0 - v180) * (1.0 / v178);
      *(long double *)&v204[24] = v179;
      double v20 = (v176 + 1.0 - v177) / v178;
LABEL_47:
      *(double *)&v204[32] = v20;
      break;
    default:
      memset(v204, 0, sizeof(v204));
      break;
  }
  *a4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v204), *(float64x2_t *)&v204[16]);
  float32_t v194 = *(double *)&v204[32];
  a4[1].f32[0] = v194;
  __int32 v203 = a4[1].i32[0];
  float32x4_t v202 = *a4;
  uint64_t result = DspLib::Biquad::validate((uint64_t)&v202);
  if ((result & 1) == 0)
  {
    uint64_t result = printf("a1 = %f and a2 =%f, create a biquad filter which is not stable\n", *(double *)&v204[24], *(double *)&v204[32]);
    a4[1].i32[0] = 0;
    *a4 = (float32x4_t)DspLib::Biquad::kBypassSection;
  }
  return result;
}

void DspLib::Biquad::Design::butterworthLowPass(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, int a4@<W1>, void *a5@<X8>)
{
  if (this >= 0x14) {
    int v7 = 20;
  }
  else {
    int v7 = (int)this;
  }
  if (this) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 1;
  }
  float v9 = a3 * 0.49;
  if ((float)(a3 * 0.49) >= a2) {
    float v9 = a2;
  }
  if (a2 >= 1.0) {
    float v10 = v9;
  }
  else {
    float v10 = 1.0;
  }
  if (a4)
  {
    float v11 = (float)v8;
    if (v8) {
      float v10 = powf(1.6, 1.0 / v11) * v10;
    }
    unsigned int v8 = vcvtas_u32_f32(v11 * 0.5);
  }
  std::vector<DspLib::Biquad::Section>::vector(a5, (v8 + 1) >> 1);
  float v12 = (float)(a3 * 0.5) * 0.9;
  if (v12 >= v10) {
    float v12 = v10;
  }
  float v13 = v12 * 6.28318531 / a3;
  double v14 = v13;
  __double2 v15 = __sincos_stret(v13);
  if (v8 < 2)
  {
    LODWORD(v16) = 0;
    if ((v8 & 1) == 0) {
      return;
    }
LABEL_24:
    float v24 = 1.0 / tan(v14 * 0.5);
    float v25 = (float)(1.0 - v24) / (float)(v24 + 1.0);
    float v26 = 1.0 / (float)(2.0 / (float)(v25 + 1.0));
    uint64_t v27 = *a5 + 20 * v16;
    *(float *)uint64_t v27 = v26;
    *(float *)(v27 + 4) = v26;
    *(_DWORD *)(v27 + 8) = 0;
    *(float *)(v27 + 12) = v25;
    *(_DWORD *)(v27 + 16) = 0;
    return;
  }
  uint64_t v17 = 0;
  float cosval = v15.__cosval;
  uint64_t v16 = v8 >> 1;
  double v20 = (float *)(*a5 + 8);
  do
  {
    float v21 = sin(((double)++v17 * 2.0 + -1.0) * 3.14159265 * 0.5 / (double)v8);
    float sinval = v15.__sinval;
    float v22 = (float)(1.0 - (float)(v21 * sinval)) / (float)((float)(v21 * sinval) + 1.0);
    float v23 = (float)((float)(v22 + 1.0) - (float)((float)(v22 + 1.0) * cosval)) * 0.25;
    *(v20 - 2) = v23;
    *(v20 - 1) = v23 + v23;
    float *v20 = v23;
    v20[1] = -(float)((float)(v22 + 1.0) * cosval);
    v20[2] = v22;
    v20 += 5;
  }
  while (v16 != v17);
  if (v8) {
    goto LABEL_24;
  }
}

void DspLib::Biquad::Design::butterworthHighPass(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, int a4@<W1>, float **a5@<X8>)
{
  float v6 = a2;
  if (a4)
  {
    float v8 = (float)this;
    if (this) {
      float v6 = a2 / powf(1.6, 1.0 / v8);
    }
    LODWORD(this) = vcvtas_u32_f32(v8 * 0.5);
  }
  DspLib::Biquad::Design::butterworthLowPass(this, v6, a3, 0, a5);
  float v9 = *a5;
  float v10 = a5[1];
  if (*a5 != v10)
  {
    do
    {
      float v11 = v9[2];
      float v12 = v9[1];
      float v13 = (float)((float)(1.0 - v9[3]) + v9[4]) / (float)((float)(*v9 + v12) + v11);
      *float v9 = *v9 * v13;
      v9[1] = -(float)(v12 * v13);
      _OWORD v9[2] = v11 * v13;
      v9 += 5;
    }
    while (v9 != v10);
  }
}

uint64_t DspLib::Biquad::Design::easttyBaxandallToneTilt@<X0>(DspLib::Biquad::Design *this@<X0>, unsigned int a2@<S0>, unsigned int a3@<S1>, float a4@<S2>, double *a5@<X2>, uint64_t a6@<X8>)
{
  if (this) {
    *(float *)&a3 = *(float *)&a3 * 0.5;
  }
  uint64_t v8 = a2;
  unsigned int v9 = a3;
  DspLib::Biquad::Design::parametricSectionRegular((DspLib *)(((unint64_t)a2 << 32) | 0x15), a3 | 0x3F40000000000000, a5, (float32x4_t *)a6, a4);
  return DspLib::Biquad::Design::parametricSectionRegular((DspLib *)((v8 << 32) | 0x16), v9 ^ 0x80000000 | 0x3F40000000000000, v10, (float32x4_t *)(a6 + 20), a4);
}

void DspLib::Biquad::Design::fractionalOrderShelf(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, void *a7@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a2 == a3)
  {
    std::vector<DspLib::Biquad::Section>::vector(a7, 1uLL);
  }
  else if (this)
  {
    if (a2 < 0.0 || a3 < 0.0)
    {
      *a7 = 0;
      a7[1] = 0;
      a7[2] = 0;
      double v32 = operator new(0x14uLL);
      a7[1] = v32 + 5;
      a7[2] = v32 + 5;
      _OWORD v32[4] = 0;
      *(_OWORD *)double v32 = xmmword_1BB873378;
      *a7 = v32;
    }
    else
    {
      DspLib::Biquad::Design::fractionalOrderShelfRegular(this, a2, a3, a4, a5, a6, (float32x2_t **)&v43);
      LOBYTE(v39) = 0;
      long long v40 = 0u;
      *(_OWORD *)double v41 = 0u;
      memset(v42, 0, sizeof(v42));
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v39, 1uLL, 1uLL);
      LOBYTE(v35) = 0;
      long long v36 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v38, 0, sizeof(v38));
      DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)&v35, 1uLL, 1uLL);
      DspLib::Biquad::Filter::setNumberOfStages((DspLib::Biquad::Filter *)&v39, -858993459 * ((unint64_t)(v44 - (unsigned char *)v43) >> 2));
      DspLib::Biquad::Filter::setCoefficients((uint64_t)&v39, (uint64_t)v43, 0xCCCCCCCCCCCCCCCDLL * ((v44 - (unsigned char *)v43) >> 2), 0, 0x41uLL);
      float v11 = logf((float)((float)(a2 * a2) * a2) * a3);
      float v12 = expf(v11 * 0.25);
      v48[0] = sqrtf(v12 * a2);
      *(float *)&v48[1] = v12;
      if (a3 > a2) {
        float v15 = a3 / a2;
      }
      else {
        float v15 = a2 / a3;
      }
      *(float *)&double v13 = a3 / a2;
      DspLib::Biquad::amplitudeResponse(&v39, (uint64_t)v48, 2uLL, (uint64_t)&__A, 2, 0, 44100.0, v13, v14);
      DspLib::amp2dB(&__A, 2uLL, 1.0);
      uint64_t v16 = (DspLib::Biquad::Design *)std::vector<DspLib::Biquad::Section>::vector(a7, 0xCCCCCCCCCCCCCCCDLL * ((v44 - (unsigned char *)v43) >> 2));
      float v17 = fmaxf(sqrtf(v15) * 0.999, 1.0);
      float v18 = a4 * 0.5;
      int v19 = 50;
      float v20 = 1.0;
      do
      {
        float v21 = v20 * a3;
        float v22 = a2 / v20;
        if (a3 > a2)
        {
          float v22 = v20 * a2;
          float v21 = a3 / v20;
        }
        DspLib::Biquad::Design::fractionalOrderShelfRegular(v16, v22, v21, v18, a5, a6, &__C);
        float v23 = (void *)*a7;
        if (*a7)
        {
          a7[1] = v23;
          operator delete(v23);
          *a7 = 0;
          a7[1] = 0;
          a7[2] = 0;
        }
        float v24 = __C;
        *a7 = __C;
        uint64_t v25 = v46;
        *(_OWORD *)(a7 + 1) = v46;
        DspLib::Biquad::Filter::setNumberOfStages((DspLib::Biquad::Filter *)&v35, -858993459 * ((unint64_t)(v25 - (void)v24) >> 2));
        DspLib::Biquad::Filter::setCoefficients((uint64_t)&v35, *a7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a7[1] - *a7) >> 2), 0, 0x41uLL);
        DspLib::Biquad::amplitudeResponse(&v35, (uint64_t)v48, 2uLL, (uint64_t)&__C, 2, 0, 44100.0, v26, v27);
        DspLib::amp2dB((float *)&__C, 2uLL, 1.0);
        DspLib::multiply((float *)&__C, 2uLL, 2.0);
        if (*((float *)&__C + 1) == 0.0 || *(float *)&__C == 0.0) {
          break;
        }
        DspLib::divide(&__A, 2uLL, (const float *)&__C, 2, (float *)&__C);
        float v28 = fabsf(sqrtf(*(float *)&__C * *((float *)&__C + 1)));
        float v29 = INFINITY;
        if ((float)(*(float *)&__C * *((float *)&__C + 1)) != -INFINITY) {
          float v29 = v28;
        }
        if (v29 < 1.001 && v29 > 0.999) {
          break;
        }
        float v30 = v20 * sqrtf(v29);
        float v31 = v17 >= v30 ? v30 : v17;
        float v20 = v30 >= 1.0 ? v31 : 1.0;
        --v19;
      }
      while (v19);
      DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v38 + 8));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v42 + 8));
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      if (v43)
      {
        double v44 = v43;
        operator delete(v43);
      }
    }
  }
  else
  {
    DspLib::Biquad::Design::fractionalOrderShelfRegular(this, a2, a3, a4, a5, a6, (float32x2_t **)a7);
  }
}

void sub_1BB2AB6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void DspLib::Biquad::Design::fractionalOrderShelfRegular(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float32x2_t **a7@<X8>)
{
  v115[10] = *MEMORY[0x1E4F143B8];
  float v10 = fminf(a5 * 0.499, 20000.0);
  if (v10 >= a2) {
    float v11 = a2;
  }
  else {
    float v11 = v10;
  }
  if (a2 >= 20.0) {
    float v12 = v11;
  }
  else {
    float v12 = 20.0;
  }
  if (v10 >= a3) {
    float v13 = a3;
  }
  else {
    float v13 = v10;
  }
  if (a3 >= 20.0) {
    float v14 = v13;
  }
  else {
    float v14 = 20.0;
  }
  float v15 = 40.0;
  if (a4 <= 40.0) {
    float v15 = a4;
  }
  if (a4 >= -40.0) {
    float v16 = v15;
  }
  else {
    float v16 = -40.0;
  }
  std::vector<DspLib::Biquad::Section>::vector(a7, 1uLL);
  if (v12 != v14)
  {
    float v17 = v12;
    float v110 = a5;
    if (v12 <= v14)
    {
      double v107 = 0.0;
      float v17 = v14;
    }
    else
    {
      double v107 = v16;
      float v16 = -v16;
      float v12 = v14;
    }
    double v18 = fabsf(v16);
    float v108 = v17;
    double v19 = log(v17);
    float v109 = v12;
    long double v21 = log(v12);
    double v22 = v18 / (v19 - v21) * 0.693147181 / 6.0 + v18 / (v19 - v21) * 0.693147181 / 6.0;
    if (v22 <= a6) {
      double v23 = v22;
    }
    else {
      double v23 = a6;
    }
    if (v22 >= 1.0) {
      double v24 = v23;
    }
    else {
      double v24 = 1.0;
    }
    MEMORY[0x1F4188790](v20);
    float v29 = (char *)&v107 - ((v28 + 23) & 0xFFFFFFFFFFFFFFF0);
    unsigned int v30 = v24;
    if (v24) {
      unsigned int v31 = v30 + 1;
    }
    else {
      unsigned int v31 = v24;
    }
    unint64_t v32 = v31 >> 1;
    if (v31 >= 2)
    {
      unsigned int v33 = v30 + 1;
      double v34 = v24 - (double)v30;
      if (v32 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v32;
      }
      *(double *)&uint64_t v36 = v25 - v34;
      *(float *)v27.i32 = (float)v30 * 0.5;
      *(float *)v26.i32 = (float)v33 * 0.5;
      uint64x2_t v37 = (uint64x2_t)vdupq_n_s64(v35 - 1);
      float32x2_t v38 = (float32x2_t)vdup_lane_s32(v26, 0);
      float32x2_t v39 = (float32x2_t)vdup_lane_s32(v27, 0);
      int8x8_t v40 = (int8x8_t)vdup_n_s32((v24 & 1) == 0);
      float64x2_t v41 = (float64x2_t)vdupq_lane_s64(v36, 0);
      float64x2_t v42 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0);
      float64x2_t v43 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v30), 0);
      uint64_t v44 = (v35 + 1) & 0xFFFFFFFE;
      int8x8_t v45 = vmvn_s8(v40);
      int32x2_t v46 = (int32x2_t)0x100000000;
      int64x2_t v47 = (int64x2_t)xmmword_1BB872720;
      long double v48 = v29 + 8;
      __asm
      {
        FMOV            V20.2D, #2.0
        FMOV            V21.2D, #-1.0
        FMOV            V22.2D, #0.5
      }
      float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
      int64x2_t v56 = vdupq_n_s64(2uLL);
      do
      {
        int8x8_t v57 = (int8x8_t)vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)v47));
        float32x2_t v58 = vcvt_f32_u32((uint32x2_t)vadd_s32(vmovn_s64(v47), (int32x2_t)0x100000001));
        int8x8_t v59 = (int8x8_t)vcgt_f32(v58, v38);
        int8x8_t v60 = vand_s8(v57, v40);
        int8x8_t v61 = vand_s8(v57, v45);
        int8x8_t v62 = vbic_s8(v61, v59);
        int32x2_t v63 = (int32x2_t)vand_s8(v61, v59);
        int32x2_t v64 = (int32x2_t)vmvn_s8((int8x8_t)v46);
        int32x2_t v65 = vsub_s32(vcltz_s32(vshl_n_s32(v63, 0x1FuLL)), v64);
        v66.i64[0] = v65.u32[0];
        v66.i64[1] = v65.u32[1];
        float64x2_t v67 = vmulq_f64(vsubq_f64(_Q22, vdivq_f64(vmulq_f64(vmlaq_f64(_Q21, _Q20, vcvtq_f64_u64(v66)), _Q22), v43)), v55);
        int32x2_t v68 = vsub_s32((int32x2_t)vand_s8(v60, (int8x8_t)vcgt_f32(v58, v39)), v64);
        v66.i64[0] = v68.u32[0];
        v66.i64[1] = v68.u32[1];
        float64x2_t v69 = vmlaq_f64(vmulq_n_f64(vmulq_f64(vsubq_f64(_Q22, vdivq_f64(vmulq_f64(vmlaq_f64(_Q21, _Q20, vcvtq_f64_u64(v66)), _Q22), v42)), v55), v34), v67, v41);
        int8x8_t v70 = vorr_s8(vorr_s8(v60, v62), (int8x8_t)v63);
        if (v70.i8[0]) {
          *(v48 - 1) = *(void *)&v69.f64[0];
        }
        if (v70.i8[4]) {
          *long double v48 = *(void *)&v69.f64[1];
        }
        int64x2_t v47 = vaddq_s64(v47, v56);
        int32x2_t v46 = vadd_s32(v46, (int32x2_t)0x200000002);
        v48 += 2;
        v44 -= 2;
      }
      while (v44);
    }
    unint64_t v71 = (v32 + 1);
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a7, v71);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v115, v71, 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v114, v71, 0);
    double v72 = v16 / (v24 * 40.0);
    if (v31 >= 2)
    {
      unint64_t v73 = 0;
      if (v32 <= 1) {
        uint64_t v74 = 1;
      }
      else {
        uint64_t v74 = v32;
      }
      do
      {
        double v75 = __exp10(-v72);
        double v76 = __exp10(v72);
        __double2 v77 = __sincos_stret(*(double *)&v29[8 * v73]);
        v116.real = v77.__cosval * -v75;
        v116.imag = v75 * v77.__sinval;
        DspLib::ComplexSpan::setElement(v115, v73, v116);
        v117.real = -(v76 * v77.__cosval);
        v117.imag = v76 * v77.__sinval;
        DspLib::ComplexSpan::setElement(v114, v73++, v117);
      }
      while (v74 != v73);
    }
    double v78 = ceil(v24);
    double v79 = floor(v24);
    if (((int)v24 & 1) == 0) {
      double v78 = v79;
    }
    float v80 = v72 * (v78 - v24);
    v118.real = -__exp10f(v80);
    v118.imag = 0.0;
    DspLib::ComplexSpan::setElement(v115, v32, v118);
    v119.real = -__exp10f(-v80);
    v119.imag = 0.0;
    DspLib::ComplexSpan::setElement(v114, v32, v119);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v113, (v32 + 1), 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v112, (v32 + 1), 0);
    long double v81 = tan(sqrtf(v108 * v109) * 6.28318531 / v110 * 0.5);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v111, (v32 + 1), 0);
    DspLib::ComplexVector::operator=(v113, v115);
    *(float *)&long double v81 = v81;
    DspLib::operator*=(v113, *(float *)&v81);
    DspLib::operator+=((uint64_t)v113, 1.0);
    DspLib::ComplexVector::operator=(v111, v115);
    DspLib::operator*=(v111, -*(float *)&v81);
    DspLib::operator+=((uint64_t)v111, 1.0);
    DspLib::operator/=(v113, v111);
    DspLib::ComplexVector::operator=(v112, v114);
    DspLib::operator*=(v112, *(float *)&v81);
    DspLib::operator+=((uint64_t)v112, 1.0);
    DspLib::ComplexVector::operator=(v111, v114);
    DspLib::operator*=(v111, -*(float *)&v81);
    DspLib::operator+=((uint64_t)v111, 1.0);
    DspLib::operator/=(v112, v111);
    int v82 = (float *)v113[0];
    float v83 = (float *)v113[1];
    double v84 = (float *)v112[0];
    double v85 = (float *)v112[1];
    double v86 = (float *)&(*a7)[1];
    do
    {
      float v87 = *v82++;
      float v88 = v87;
      float v89 = *v83++;
      float v90 = v89;
      float v91 = -v88;
      float v92 = *v84++;
      float v93 = v92;
      float v94 = -v92;
      float v95 = *v85++;
      float v96 = v95;
      _ZF = v90 == 0.0;
      double v98 = (float)-v88;
      float v99 = v88 * -2.0;
      double v100 = (float)-v95;
      float v101 = (float)-v90 * (float)-v90 + v98 * v98;
      if (_ZF) {
        float v99 = v91;
      }
      float v102 = v93 * -2.0;
      if (_ZF) {
        float v101 = 0.0;
      }
      float v103 = v100 * v100 + v94 * v94;
      if (v96 == 0.0)
      {
        float v102 = v94;
        float v103 = 0.0;
      }
      float v104 = (float)((float)(1.0 - v102) + v103) / (float)((float)(1.0 - v99) + v101);
      v86[1] = v99;
      v86[2] = v101;
      *(v86 - 2) = 1.0 / v104;
      *(v86 - 1) = v102 / v104;
      *double v86 = v103 / v104;
      v86 += 5;
      --v71;
    }
    while (v71);
    double v105 = __exp10(v107 / 20.0);
    double v106 = *a7;
    *double v106 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(**a7), v105));
    *(float *)&double v105 = v105 * v106[1].f32[0];
    v106[1].i32[0] = LODWORD(v105);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v111);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v112);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v113);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v114);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v115);
  }
}

void sub_1BB2ABE2C(_Unwind_Exception *a1)
{
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 104));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 184));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 264));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v3 - 232));
  uint64_t v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void DspLib::Biquad::Design::fractionalOrderBandShelf(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>, float a8@<S6>, void **a9@<X8>)
{
  DspLib::Biquad::Design::fractionalOrderShelf(this, a2, a3, -a6, a8, a7, &__p);
  DspLib::Biquad::Design::fractionalOrderShelf(this, a4, a5, a6, a8, a7, &v17);
  std::vector<DspLib::Biquad::Section>::vector(a9, 0xCCCCCCCCCCCCCCCDLL * ((v20 - (unsigned char *)__p) >> 2) - 0x3333333333333333 * ((v18 - v17) >> 2));
  if (v20 != __p) {
    memmove(*a9, __p, v20 - (unsigned char *)__p);
  }
  float v16 = v17;
  if (v18 != v17)
  {
    memmove((char *)*a9 + v20 - (unsigned char *)__p, v17, v18 - v17);
    float v16 = v17;
  }
  if (v16)
  {
    double v18 = v16;
    operator delete(v16);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_1BB2ABFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DspLib::Biquad::Design::allpass@<X0>(DspLib::Biquad::Design *this@<X0>, unsigned int a2@<S0>, unsigned int a3@<S1>, float a4@<S2>, unint64_t a5@<X1>, void *a6@<X8>)
{
  float v10 = (float)this;
  if (this > 0x13) {
    float v10 = 19.9;
  }
  if (!this) {
    float v10 = 1.0;
  }
  unsigned int v11 = vcvtas_u32_f32(v10);
  LODWORD(a5) = vcvtps_u32_f32((float)roundf(v10) * 0.5);
  uint64_t result = (uint64_t)std::vector<DspLib::Biquad::Section>::vector(a6, a5);
  if (v11 >= 2)
  {
    uint64_t v15 = 0;
    unsigned int v14 = v11 >> 1;
    do
    {
      uint64_t result = DspLib::Biquad::Design::parametricSectionRegular((DspLib *)(((unint64_t)a2 << 32) | 0xB), (unint64_t)a3 << 32, v13, &v18, a4);
      float v16 = (float32x4_t *)(*a6 + v15);
      float32x4_t *v16 = v18;
      v16[1].i32[0] = v19;
      v15 += 20;
    }
    while (20 * (v11 >> 1) != v15);
  }
  else
  {
    unsigned int v14 = 0;
  }
  if (v11)
  {
    uint64_t result = DspLib::Biquad::Design::parametricSectionRegular((DspLib *)(((unint64_t)a2 << 32) | 0xA), (unint64_t)a3 << 32, v13, &v18, a4);
    float v17 = (float32x4_t *)(*a6 + 20 * v14);
    float32x4_t *v17 = v18;
    v17[1].i32[0] = v19;
  }
  return result;
}

void sub_1BB2AC140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *DspLib::Biquad::Design::allpassFromPoles@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t result = std::vector<DspLib::Biquad::Section>::vector(a4, a2);
  if (a2)
  {
    uint64_t v8 = *result;
    unsigned int v9 = (float *)(a1 + 16);
    unsigned int v10 = 1;
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      float v16 = *v9;
      if ((a3 & 1) != 0 || fabsf(v16) > 1.0e-12 || fabsf(*(v9 - 2)) > 1.0e-12)
      {
        *(float *)uint64_t v8 = v16;
        unsigned int v17 = *((_DWORD *)v9 - 1);
        unint64_t v18 = __PAIR64__(HIDWORD(_D0), v17);
      }
      else
      {
        unsigned int v17 = *((_DWORD *)v9 - 1);
        *(_DWORD *)uint64_t v8 = v17;
        unint64_t v18 = 1065353216;
      }
      *(void *)(v8 + 4) = v18;
      *(_DWORD *)(v8 + 12) = v17;
      *(float *)(v8 + 16) = v16;
      v8 += 20;
      BOOL v19 = a2 > v10++;
      v9 += 5;
    }
    while (v19);
  }
  return result;
}

float DspLib::Biquad::Design::phaseComplement@<S0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section const*>,std::__wrap_iter<DspLib::Biquad::Section const*>>(a3, a1, (uint64_t)a1 + 20 * a2, 0xCCCCCCCCCCCCCCCDLL * ((20 * a2) >> 2));
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    do
    {
      float result = *(float *)v5;
      *(_DWORD *)uint64_t v5 = *(_DWORD *)(v5 + 8);
      *(float *)(v5 + 8) = result;
      v5 += 20;
    }
    while (v5 != v6);
  }
  return result;
}

void DspLib::Biquad::Design::integrator(DspLib::Biquad::Design *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, uint64_t a5@<X8>)
{
  if (this >= 2) {
    int v8 = 2;
  }
  else {
    int v8 = (int)this;
  }
  if (!this || v8 == 1)
  {
    double v14 = a3 * 3.14159265 / a4;
    double v15 = cos(a2 * 6.28318531 / a4);
    double v16 = v14 * sqrt(v15 * 2.0 + 2.0) / ((float)(a3 / a2) * 0.707106781);
    double v17 = v15 * v15 + -1.0 + v16 * v16;
    if (v17 >= 0.0)
    {
      double v19 = sqrt(v17);
      double v20 = v15 + v19;
      double v21 = v15 - v19;
      if (v20 <= 1.0) {
        double v21 = v20;
      }
      float v18 = v21;
    }
    else
    {
      float v18 = 0.999;
    }
    float v22 = v14 + v14;
    *(float *)a5 = v22;
    *(_DWORD *)(a5 + 4) = 0;
    *(_DWORD *)(a5 + 8) = 0;
    *(float *)(a5 + 12) = -v18;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    __double2 v9 = __sincos_stret(a2 * 6.28318531 / a4);
    double v10 = 1.0 / (v9.__sinval * 0.62275067 + 1.0);
    float v11 = ((1.0 - v9.__cosval) * 0.5 * v10 + (1.0 - v9.__cosval) * 0.5 * v10 + (1.0 - v9.__cosval) * v10)
        * (float)((float)(a3 / a2) * (float)(a3 / a2));
    *(float *)a5 = v11;
    *(_DWORD *)(a5 + 4) = 0;
    *(_DWORD *)(a5 + 8) = 0;
    float v12 = v9.__cosval * -2.0 * v10;
    float v13 = (1.0 - v9.__sinval * 0.62275067) * v10;
    *(float *)(a5 + 12) = v12;
    *(float *)(a5 + 16) = v13;
  }
}

void DspLib::Biquad::Design::phaseEqualizer(double a1@<D0>, double a2@<D1>, double a3@<D2>, double a4@<D3>, uint64_t a5@<X8>)
{
  double v7 = 192000.0;
  if (a4 <= 192000.0) {
    double v7 = a4;
  }
  if (a4 >= 8000.0) {
    double v8 = v7;
  }
  else {
    double v8 = 8000.0;
  }
  double v9 = v8 * 0.49;
  if (v8 * 0.49 >= a1) {
    double v9 = a1;
  }
  if (a1 >= 10.0) {
    double v10 = v9;
  }
  else {
    double v10 = 10.0;
  }
  double v11 = 20.0;
  if (a2 <= 20.0) {
    double v11 = a2;
  }
  if (a2 >= 0.5) {
    double v12 = v11;
  }
  else {
    double v12 = 0.5;
  }
  double v13 = 180.0;
  if (a3 <= 180.0) {
    double v13 = a3;
  }
  LOBYTE(v33) = 0;
  long long v34 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v36, 0, 32);
  if (a3 >= -180.0) {
    double v14 = v13;
  }
  else {
    double v14 = -180.0;
  }
  memset(&v36[2], 0, 32);
  DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)&v33, 2uLL, v8, 1uLL);
  double v15 = dbl_1BB873140[v14 >= 0.0];
  *(float *)&unsigned int v16 = v12;
  double v17 = (double *)((unint64_t)v16 << 32);
  float v18 = v10;
  float v31 = v18;
  int v19 = 19;
  double v20 = 0.0014 / v12;
  do
  {
    *(float *)&unsigned int v21 = v10 / v15;
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)&v33, ((unint64_t)v21 << 32) | 0xB, v17, 0, 0);
    *(float *)&unsigned int v22 = v10 * v15;
    DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)&v33, ((unint64_t)v22 << 32) | 0xB, v17, 0, 1uLL);
    *(float *)&uint64x2_t v37 = v31;
    uint64_t v32 = 0;
    DspLib::Biquad::phaseResponse(&v33, (uint64_t)&v37, 1uLL, (uint64_t)&v32 + 4, 1, 0, *(double *)&v36[2], v23, v24);
    DspLib::Biquad::phaseResponse(&v33, (uint64_t)&v37, 1uLL, (uint64_t)&v32, 1, 1, *(double *)&v36[2], v25, v26);
    double v27 = (float)(*(float *)&v32 - *((float *)&v32 + 1));
    double v28 = v27 * 57.2957795 + 360.0;
    double v29 = v27 * 57.2957795 + -360.0;
    if (v14 >= 0.0) {
      double v29 = v28;
    }
    if (vabdd_f64(v14, v29) < 1.0) {
      break;
    }
    double v15 = v15 * ((v14 - v29) * v20 + 1.0);
    if (v15 > 3.0) {
      break;
    }
  }
  while (v15 >= 0.333333333 && v19-- != 0);
  DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)&v33, 0, 0, (float32x4_t *)a5);
  DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)&v33, 0, 1, (float32x4_t *)(a5 + 20));
  uint64x2_t v37 = (void **)&v36[2] + 1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v37);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v36 + 8));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1BB2AC6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DspLib::Biquad::ParametricFilter::~ParametricFilter((DspLib::Biquad::ParametricFilter *)va);
  _Unwind_Resume(a1);
}

void DspLib::Biquad::ParametricFilter::~ParametricFilter(DspLib::Biquad::ParametricFilter *this)
{
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::ParametricFilter *)((char *)this + 48));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

float *DspLib::Biquad::Design::aWeighting@<X0>(double a1@<D0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = 0;
  *a2 = xmmword_1BB8732BC;
  a2[1] = unk_1BB8732CC;
  a2[2] = xmmword_1BB8732DC;
  *(_OWORD *)((char *)a2 + 44) = *(long long *)((char *)&xmmword_1BB8732DC + 12);
  do
  {
    float result = DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)((char *)a2 + v5), a1);
    v5 += 20;
  }
  while (v5 != 60);
  return result;
}

float *DspLib::Biquad::Design::cWeighting@<X0>(double a1@<D0>, uint64_t a2@<X8>)
{
  uint64_t v5 = 0;
  *(_OWORD *)a2 = xmmword_1BB8732F8;
  *(_OWORD *)(a2 + 16) = unk_1BB873308;
  *(void *)(a2 + 32) = 0x4FAEF1FF4815A495;
  do
  {
    float result = DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)(a2 + v5), a1);
    v5 += 20;
  }
  while (v5 != 40);
  return result;
}

void DspLib::Biquad::Design::kWeighting(double a1@<D0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 40; i += 20)
  {
    uint64_t v6 = a2 + i;
    *(_DWORD *)uint64_t v6 = 1065353216;
    *(void *)(v6 + 12) = 0;
    *(void *)(v6 + 4) = 0;
  }
  if (a1 == 48000.0)
  {
    *(_OWORD *)a2 = xmmword_1BB873150;
    *(_DWORD *)(a2 + 16) = 1060864988;
    float v7 = 0.99007;
    float v8 = -1.99;
  }
  else
  {
    long double v9 = tan(5284.07858 / a1);
    long double v10 = v9 / 0.707175237 + 1.0 + v9 * v9;
    long double v11 = v9 * 1.25872093 / 0.707175237;
    long double v12 = (v11 + 1.5848647 + v9 * v9) / v10;
    long double v13 = (v9 * v9 + -1.5848647 + v9 * v9 + -1.5848647) / v10;
    long double v14 = (1.5848647 - v11 + v9 * v9) / v10;
    long double v15 = (v9 * v9 + -1.0 + v9 * v9 + -1.0) / v10;
    long double v16 = (1.0 - v9 / 0.707175237 + v9 * v9) / v10;
    float v17 = v12;
    *(float *)&long double v10 = v13;
    *(float *)&long double v14 = v14;
    *(float *)&long double v15 = v15;
    *(float *)&long double v16 = v16;
    *(float *)a2 = v17;
    *(_DWORD *)(a2 + 4) = LODWORD(v10);
    *(_DWORD *)(a2 + 8) = LODWORD(v14);
    *(_DWORD *)(a2 + 12) = LODWORD(v15);
    *(_DWORD *)(a2 + 16) = LODWORD(v16);
    long double v18 = tan(119.806115 / a1);
    long double v19 = v18 / 0.500327037 + 1.0 + v18 * v18;
    float v8 = (v18 * v18 + -1.0 + v18 * v18 + -1.0) / v19;
    float v7 = (1.0 - v18 / 0.500327037 + v18 * v18) / v19;
  }
  *(void *)(a2 + 20) = 0xC00000003F800000;
  *(_DWORD *)(a2 + 28) = 1065353216;
  *(float *)(a2 + 32) = v8;
  *(float *)(a2 + 36) = v7;
}

void DspLib::Biquad::Design::fromSDomain(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, float32x2_t **a5@<X8>, float a6@<S0>, double a7@<D1>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v82, a2, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v80, a4, 0);
  float v13 = 1.0;
  float v14 = 1.0;
  if (v83)
  {
    unint64_t v15 = 0;
    float v16 = a7 + a7;
    float v17 = 1.0 / v16;
    unsigned int v18 = 1;
    do
    {
      long double v19 = (float *)(a1 + 8 * v15);
      float v20 = *v19;
      float v21 = v19[1];
      float v22 = v17 * *v19;
      float v23 = v17 * v21;
      float v24 = v22 + 1.0;
      float v25 = 1.0 - v22;
      float v26 = (float)(v24 * v25) - (float)(v23 * v23);
      float v27 = (float)((float)(v17 * v21) * v25) + (float)(v24 * (float)(v17 * v21));
      float v28 = 1.0 / (float)((float)(v23 * v23) + (float)(v25 * v25));
      v90.real = v26 * v28;
      v90.imag = v27 * v28;
      DspLib::ComplexSpan::setElement(v82, v15, v90);
      float v29 = (float)(v21 * v21) + (float)(v20 * v20);
      if (v21 == 0.0) {
        float v29 = v20;
      }
      float v14 = v14 * fabsf(v29);
      unint64_t v15 = v18;
      BOOL v30 = v83 > v18++;
    }
    while (v30);
  }
  if (v81)
  {
    unint64_t v31 = 0;
    float v32 = a7 + a7;
    float v33 = 1.0 / v32;
    unsigned int v34 = 1;
    float v13 = 1.0;
    do
    {
      uint64_t v35 = (float *)(a3 + 8 * v31);
      float v36 = *v35;
      float v37 = v35[1];
      float v38 = v33 * *v35;
      float v39 = v33 * v37;
      float v40 = v38 + 1.0;
      float v41 = 1.0 - v38;
      float v42 = (float)(v40 * v41) - (float)(v39 * v39);
      float v43 = (float)((float)(v33 * v37) * v41) + (float)(v40 * (float)(v33 * v37));
      float v44 = 1.0 / (float)((float)(v39 * v39) + (float)(v41 * v41));
      v91.real = v42 * v44;
      v91.imag = v43 * v44;
      DspLib::ComplexSpan::setElement(v80, v31, v91);
      float v45 = (float)(v37 * v37) + (float)(v36 * v36);
      if (v37 == 0.0) {
        float v45 = v36;
      }
      float v13 = v13 * fabsf(v45);
      unint64_t v31 = v34;
      BOOL v30 = v81 > v34++;
    }
    while (v30);
  }
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v78, 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v77, 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v75, 0, 0);
  DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v74, 0, 0);
  unsigned int v46 = DspLib::Biquad::Design::fromSDomain(std::span<DSPComplex const,18446744073709551615ul>,std::span<DSPComplex const,18446744073709551615ul>,float,double)::$_2::operator()(v82, (DspLib::ComplexVector *)v78, (DspLib::ComplexVector *)v77);
  unsigned int v47 = DspLib::Biquad::Design::fromSDomain(std::span<DSPComplex const,18446744073709551615ul>,std::span<DSPComplex const,18446744073709551615ul>,float,double)::$_2::operator()(v80, (DspLib::ComplexVector *)v75, (DspLib::ComplexVector *)v74);
  if (v46 <= v47) {
    unint64_t v48 = v47;
  }
  else {
    unint64_t v48 = v46;
  }
  std::vector<DspLib::Biquad::Section>::vector(a5, v48);
  uint64_t v49 = a5[1];
  if (v49 == *a5)
  {
    unint64_t v60 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unsigned int v51 = 0;
    unsigned int v52 = 0;
    unsigned int v53 = 1;
    do
    {
      memset(v84, 0, 12);
      if (v77[2] <= (unint64_t)v51)
      {
        unint64_t v57 = v52 + 1;
        if (v79 <= v57)
        {
          LODWORD(v84[0]) = 1065353216;
          if (v79 == v57)
          {
            float v55 = -*(float *)(v78[0] + 4 * v52);
            *((float *)v84 + 1) = v55;
            LODWORD(v84[1]) = 0;
            ++v52;
          }
          else
          {
            *(void *)((char *)v84 + 4) = 0;
            float v55 = 0.0;
          }
        }
        else
        {
          int v87 = 1065353216;
          float v88 = -*(float *)(v78[0] + 4 * v52);
          int v85 = 1065353216;
          float v86 = -*(float *)(v78[0] + 4 * v57);
          DspLib::convolve((float *)v84, 3, (uint64_t)&v87, 2uLL, (uint64_t)&v85, 2);
          v52 += 2;
          float v55 = *((float *)v84 + 1);
        }
      }
      else
      {
        float v54 = DspLib::ComplexSpan::operator[](v77, v51);
        LODWORD(v84[0]) = 1065353216;
        float v55 = v54 * -2.0;
        *((float *)v84 + 1) = v54 * -2.0;
        *(float *)&v84[1] = (float)(v56 * v56) + (float)(v54 * v54);
        ++v51;
      }
      uint64_t v49 = *a5;
      uint64_t v58 = (uint64_t)*a5 + 20 * v50;
      *(float *)(v58 + 12) = v55;
      *(_DWORD *)(v58 + 16) = v84[1];
      uint64_t v50 = v53;
      int8x8_t v59 = a5[1];
      unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v59 - (char *)v49) >> 2);
      BOOL v30 = v60 > v53++;
    }
    while (v30);
    if (v59 != v49)
    {
      uint64_t v61 = 0;
      unsigned int v62 = 0;
      unsigned int v63 = 0;
      unsigned int v64 = 1;
      while (1)
      {
        memset(v84, 0, 12);
        if (v74[2] > (unint64_t)v62) {
          break;
        }
        unint64_t v67 = v63 + 1;
        if (v76 <= v67)
        {
          LODWORD(v84[0]) = 1065353216;
          if (v76 != v67)
          {
            *(void *)((char *)v84 + 4) = 0;
            goto LABEL_33;
          }
          *((float *)v84 + 1) = -*(float *)(v75[0] + 4 * v63);
          LODWORD(v84[1]) = 0;
          float v68 = 1.0;
          ++v63;
        }
        else
        {
          int v87 = 1065353216;
          float v88 = -*(float *)(v75[0] + 4 * v63);
          int v85 = 1065353216;
          float v86 = -*(float *)(v75[0] + 4 * v67);
          DspLib::convolve((float *)v84, 3, (uint64_t)&v87, 2uLL, (uint64_t)&v85, 2);
          v63 += 2;
          float v68 = *(float *)v84;
        }
LABEL_34:
        float64x2_t v69 = *a5;
        int8x8_t v70 = (float *)*a5 + 5 * v61;
        *int8x8_t v70 = v68;
        v70[1] = *((float *)v84 + 1);
        v70[2] = *(float *)&v84[1];
        uint64_t v61 = v64;
        uint64_t v49 = a5[1];
        unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v49 - (char *)v69) >> 2);
        BOOL v30 = v60 > v64++;
        if (!v30) {
          goto LABEL_38;
        }
      }
      float v65 = DspLib::ComplexSpan::operator[](v74, v62);
      LODWORD(v84[0]) = 1065353216;
      *((float *)v84 + 1) = v65 * -2.0;
      *(float *)&v84[1] = (float)(v66 * v66) + (float)(v65 * v65);
      ++v62;
LABEL_33:
      float v68 = 1.0;
      goto LABEL_34;
    }
  }
  float64x2_t v69 = v49;
LABEL_38:
  if (COERCE_INT(fabs((float)(v13 / v14) * a6)) >= 2139095040) {
    goto LABEL_46;
  }
  if (v49 == v69)
  {
    float v71 = 1.0;
  }
  else
  {
    float v71 = 1.0;
    double v72 = (float *)v69;
    do
    {
      float v71 = v71 * (float)((float)((float)(*v72 + v72[1]) + v72[2]) / (float)((float)(v72[3] + 1.0) + v72[4]));
      v72 += 5;
    }
    while (v72 != (float *)((char *)v69 + 20 * v60));
  }
  float v73 = (float)((float)(v13 / v14) * a6) / fabsf(v71);
  *float64x2_t v69 = vmul_n_f32(*v69, v73);
  v69[1].f32[0] = v73 * v69[1].f32[0];
  if ((DspLib::Biquad::validate((long long *)v69, v60) & 1) == 0) {
LABEL_46:
  }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a5, 0);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v74);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v75);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v77);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v78);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v80);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v82);
}

void sub_1BB2ACF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  unsigned int v62 = *(void **)v60;
  if (*(void *)v60)
  {
    *(void *)(v60 + 8) = v62;
    operator delete(v62);
  }
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a10);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a20);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a30);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a40);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a50);
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&a60);
  _Unwind_Resume(a1);
}

uint64_t DspLib::Biquad::Design::fromSDomain(std::span<DSPComplex const,18446744073709551615ul>,std::span<DSPComplex const,18446744073709551615ul>,float,double)::$_2::operator()(void *a1, DspLib::ComplexVector *a2, DspLib::ComplexVector *a3)
{
  if (a1[2])
  {
    unint64_t v6 = 0;
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 1;
    do
    {
      DspLib::ComplexSpan::operator[](a1, v6);
      if (v10 == 0.0) {
        ++v7;
      }
      else {
        ++v8;
      }
      unint64_t v6 = v9;
      BOOL v11 = a1[2] > (unint64_t)v9++;
    }
    while (v11);
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v7 = 0;
  }
  DspLib::ComplexVector::setLength(a2, v7);
  DspLib::ComplexVector::setLength(a3, v8);
  if (a1[2])
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 1;
    do
    {
      float v16 = DspLib::ComplexSpan::operator[](a1, v12);
      if (v17 == 0.0) {
        DspLib::ComplexSpan::setElement(a2, v13++, *(DSPComplex *)&v16);
      }
      else {
        DspLib::ComplexSpan::setElement(a3, v14++, *(DSPComplex *)&v16);
      }
      unint64_t v12 = v15;
      BOOL v11 = a1[2] > (unint64_t)v15++;
    }
    while (v11);
  }
  return v8 + vcvtps_u32_f32((float)v7 * 0.5);
}

uint64_t DspLib::Biquad::Design::iso226LoudnessEQ@<X0>(float a1@<S0>, float a2@<S1>, float a3@<S2>, double a4@<D3>, uint64_t a5@<X8>)
{
  float v22 = a1;
  float v21 = 0.0;
  uint64_t v20 = 0;
  DspLib::poly(DspLib::Biquad::Design::iso226LoudnessEQ(float,float,float,double)::kLowShelfGainPolynomial, 4, &v22, 1uLL, &v21);
  DspLib::poly(DspLib::Biquad::Design::iso226LoudnessEQ(float,float,float,double)::kBellGainPolynomial, 4, &v22, 1uLL, (float *)&v20 + 1);
  DspLib::poly(DspLib::Biquad::Design::iso226LoudnessEQ(float,float,float,double)::kHighShelfGainPolynomial, 4, &v22, 1uLL, (float *)&v20);
  if (v21 >= 0.0) {
    float v10 = a3;
  }
  else {
    float v10 = a2;
  }
  float v11 = v10 * sinf(fminf(v21 / v10, 1.5708));
  float v21 = v11;
  if (*((float *)&v20 + 1) >= 0.0) {
    float v12 = a3;
  }
  else {
    float v12 = a2;
  }
  float v13 = v12 * sinf(fminf(*((float *)&v20 + 1) / v12, 1.5708));
  *((float *)&v20 + 1) = v13;
  if (*(float *)&v20 < 0.0) {
    a3 = a2;
  }
  *(float *)&unsigned int v14 = a3 * sinf(fminf(*(float *)&v20 / a3, 1.5708));
  LODWORD(v20) = v14;
  float v15 = a4;
  DspLib::Biquad::Design::parametricSectionRegular((DspLib *)0x430C000000000013, LODWORD(v11) | 0x3ECCCCCD00000000, v16, (float32x4_t *)a5, v15);
  DspLib::Biquad::Design::parametricSectionRegular((DspLib *)0x4525600000000010, LODWORD(v13) | 0x3ECCCCCD00000000, v17, (float32x4_t *)(a5 + 20), v15);
  return DspLib::Biquad::Design::parametricSectionRegular((DspLib *)0x466A600000000011, v14 | 0x3F33333300000000, v18, (float32x4_t *)(a5 + 40), v15);
}

double DspLib::Biquad::Design::easttyBaxandallToneControl@<D0>(DspLib::Biquad::Design *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double *a5@<X8>)
{
  int v6 = (int)this;
  double v8 = tan(a4 * 3.14159265 / a2);
  double v9 = exp(a3 * 0.11512925);
  if (v9 > 0.9999999 && v9 < 1.0000001) {
    double v11 = 1.0000001;
  }
  else {
    double v11 = v9;
  }
  double v12 = sqrt(v11);
  double v13 = 1.0;
  double v14 = sqrt(v11 * (v11 + 34.0) + 1.0);
  long double v15 = log(v11);
  long double v16 = exp((v14 + (v11 + 1.0) * 3.0) * v15 / ((v11 + -1.0) * -8.0));
  double v17 = sqrt(v12);
  double v18 = v17 * v16;
  double v19 = v16 / v17;
  if (v6)
  {
    double v20 = v18 * v8;
    double v21 = v19 * v8;
    double v13 = v11;
  }
  else
  {
    double v20 = v8 / v18;
    double v21 = v8 / v19;
  }
  double v22 = sqrt((v11 + v12 * 4.0 + 1.0 + v14) / (v12 * 8.0));
  double v23 = v22 + v22;
  double v24 = v23 * v20 + 1.0 + v20 * v20;
  double v25 = v23 * v21 + 1.0 + v21 * v21;
  double v26 = v13 * (v21 * v21 * v24 / (v20 * v20 * v25));
  *a5 = v26;
  a5[1] = (v20 * v20 + -1.0) * (v26 + v26) / v24;
  a5[2] = (v20 * v20 - v23 * v20 + 1.0) * v26 / v24;
  a5[3] = (v21 * v21 + -1.0 + v21 * v21 + -1.0) / v25;
  double result = (v21 * v21 - v23 * v21 + 1.0) / v25;
  a5[4] = result;
  return result;
}

double DspLib::Biquad::Design::matchedZtransform(DspLib::Biquad::Design *this, double a2, double a3, double a4, double *a5, double *a6)
{
  float v10 = 1.0 / (a3 + a3);
  float v11 = 1.0 / (a3 * 4.0 * a3) + -1.0;
  float v12 = sqrtf(sqrtf((float)(v11 * v11) + 0.0));
  float v13 = atan2f(0.0, v11);
  __float2 v14 = __sincosf_stret(v13 * 0.5);
  float v15 = (float)(v12 * v14.__cosval) + v10;
  float v16 = v10 - (float)(v12 * v14.__cosval);
  float v17 = -(sqrt(sqrt(a4)) * a2);
  *(float *)&a4 = (float)((float)(v12 * v14.__sinval) + 0.0) * v17;
  *(float *)&a2 = v16 * v17;
  float v18 = (float)(0.0 - (float)(v12 * v14.__sinval)) * v17;
  float v19 = (float)(v16 * v17) + (float)(v15 * v17);
  float v20 = v18 + *(float *)&a4;
  float v21 = expf(v15 * v17);
  float v22 = v21 * cosf(*(float *)&a4);
  LODWORD(a4) = expf(*(float *)&a2);
  *(double *)this = (float)-(float)((float)(*(float *)&a4 * cosf(v18)) + v22);
  LODWORD(a4) = expf(v19);
  double result = (float)(*(float *)&a4 * cosf(v20));
  *a5 = result;
  return result;
}

float DspLib::Biquad::Design::analogBell(DspLib::Biquad::Design *this, DSPComplex a2, double a3, double a4)
{
  float v4 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  float v5 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  float v6 = a3 / a4;
  float v7 = 1.0 / a4;
  return (float)((float)((float)(v5 + (float)((float)(a2.imag * v6) + 0.0))
                       * (float)(v5 + (float)((float)(a2.imag * v7) + 0.0)))
               + (float)((float)(v4 + (float)((float)(a2.real * v6) + 1.0))
                       * (float)(v4 + (float)((float)(a2.real * v7) + 1.0))))
       * (float)(1.0
               / (float)((float)((float)(v5 + (float)((float)(a2.imag * v7) + 0.0))
                               * (float)(v5 + (float)((float)(a2.imag * v7) + 0.0)))
                       + (float)((float)(v4 + (float)((float)(a2.real * v7) + 1.0))
                               * (float)(v4 + (float)((float)(a2.real * v7) + 1.0)))));
}

double DspLib::Biquad::Design::secondOrderFIRWithGains(DspLib::Biquad::Design *this, double a2, double a3, double a4, double *a5, double *a6, double *a7)
{
  float v12 = a3 * -2.0 * a3 + a2 * a2 + (a4 + a4) * a4;
  float v13 = sqrtf(sqrtf((float)(v12 * v12) + 0.0));
  float v14 = atan2f(0.0, v12);
  __float2 v16 = __sincosf_stret(v14 * 0.5);
  float v17 = a2;
  float v18 = v17 - (float)(v13 * v16.__cosval);
  *(float *)BOOL v30 = v18;
  *(float *)&v30[1] = -(float)(v13 * v16.__sinval);
  if (v12 < 0.0) {
    float v18 = DspLib::abs((DspLib *)v30, v15);
  }
  double v19 = (float)(v18 * 0.5);
  *a5 = v19;
  float v20 = a3 * 12.0 * a3 + a2 * -3.0 * a2 + a2 * -6.0 * v19 + v19 * -3.0 * v19;
  float v21 = sqrtf(sqrtf((float)(v20 * v20) + 0.0));
  float v22 = atan2f(0.0, v20);
  __float2 v24 = __sincosf_stret(v22 * 0.5);
  float v25 = (a2 - v19) * 3.0;
  float v26 = v25 - (float)(v24.__cosval * v21);
  *(float *)float v29 = v26;
  *(float *)&v29[1] = -(float)(v24.__sinval * v21);
  if (v20 < 0.0) {
    float v26 = DspLib::abs((DspLib *)v29, v23);
  }
  double v27 = (float)(v26 / 6.0);
  *a6 = v27;
  double result = a2 - *a5 - v27;
  *(double *)this = result;
  return result;
}

float DspLib::Biquad::Design::analogHighShelf(DspLib::Biquad::Design *this, DSPComplex a2, double a3, double a4)
{
  double v4 = sqrt(a3);
  float v5 = sqrt(v4) / a4;
  float v6 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  float v7 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  float v8 = a2.real * v5;
  *(float *)&double v4 = v4;
  return (float)((float)((float)(v7 + (float)((float)(a2.imag * v5) + 0.0))
                       * (float)((float)((float)(v7 * *(float *)&v4) + (float)((float)(a2.imag * v5) + 0.0))
                               * *(float *)&v4))
               + (float)((float)((float)((float)(v6 * *(float *)&v4) + (float)(v8 + 1.0)) * *(float *)&v4)
                       * (float)(v6 + (float)(v8 + *(float *)&v4))))
       * (float)(1.0
               / (float)((float)((float)(v7 + (float)((float)(a2.imag * v5) + 0.0))
                               * (float)(v7 + (float)((float)(a2.imag * v5) + 0.0)))
                       + (float)((float)(v6 + (float)(v8 + *(float *)&v4)) * (float)(v6 + (float)(v8 + *(float *)&v4)))));
}

float DspLib::Biquad::Design::analogHighPass(DspLib::Biquad::Design *this, DSPComplex a2, double a3)
{
  float v3 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  float v4 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  float v5 = 1.0 / a3;
  return (float)((float)((float)(v4 + 0.0) * (float)(v4 + (float)((float)(a2.imag * v5) + 0.0)))
               + (float)(v3 * (float)(v3 + (float)((float)(a2.real * v5) + 1.0))))
       * (float)(1.0
               / (float)((float)((float)(v4 + (float)((float)(a2.imag * v5) + 0.0))
                               * (float)(v4 + (float)((float)(a2.imag * v5) + 0.0)))
                       + (float)((float)(v3 + (float)((float)(a2.real * v5) + 1.0))
                               * (float)(v3 + (float)((float)(a2.real * v5) + 1.0)))));
}

float DspLib::Biquad::Design::analogLowShelf(DspLib::Biquad::Design *this, DSPComplex a2, double a3, double a4)
{
  double v4 = sqrt(a3);
  float v5 = sqrt(v4) / a4;
  float v6 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  float v7 = (float)(a2.imag * a2.real) + (float)(a2.real * a2.imag);
  *(float *)&double v4 = v4;
  float v8 = (float)(a2.imag * v5) + 0.0;
  return (float)((float)((float)((float)(v7 * *(float *)&v4) + v8) * (float)((float)(v7 + v8) * *(float *)&v4))
               + (float)((float)((float)(v6 + (float)((float)(a2.real * v5) + *(float *)&v4)) * *(float *)&v4)
                       * (float)((float)(v6 * *(float *)&v4) + (float)((float)(a2.real * v5) + 1.0))))
       * (float)(1.0
               / (float)((float)((float)((float)(v7 * *(float *)&v4) + v8) * (float)((float)(v7 * *(float *)&v4) + v8))
                       + (float)((float)((float)(v6 * *(float *)&v4) + (float)((float)(a2.real * v5) + 1.0))
                               * (float)((float)(v6 * *(float *)&v4) + (float)((float)(a2.real * v5) + 1.0)))));
}

float DspLib::Biquad::Design::analogLowPass(DspLib::Biquad::Design *this, DSPComplex a2, double a3)
{
  float v3 = (float)(a2.real * a2.real) - (float)(a2.imag * a2.imag);
  float v4 = 1.0 / a3;
  return (float)((float)(v3 + (float)((float)(a2.real * v4) + 1.0))
               + (float)((float)((float)((float)(a2.imag * a2.real) + (float)(a2.real * a2.imag))
                               + (float)((float)(a2.imag * v4) + 0.0))
                       * 0.0))
       * (float)(1.0
               / (float)((float)((float)((float)((float)(a2.imag * a2.real) + (float)(a2.real * a2.imag))
                                       + (float)((float)(a2.imag * v4) + 0.0))
                               * (float)((float)((float)(a2.imag * a2.real) + (float)(a2.real * a2.imag))
                                       + (float)((float)(a2.imag * v4) + 0.0)))
                       + (float)((float)(v3 + (float)((float)(a2.real * v4) + 1.0))
                               * (float)(v3 + (float)((float)(a2.real * v4) + 1.0)))));
}

void *std::vector<DspLib::Biquad::Section>::__init_with_size[abi:ne180100]<std::__wrap_iter<DspLib::Biquad::Section const*>,std::__wrap_iter<DspLib::Biquad::Section const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    double result = std::vector<DspLib::Biquad::Section>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BB2AD990(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::Biquad::Design::fractionalOrderShelf(uint64_t a1, uint64_t a2)
{
  float v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  float v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

DspLib::BassQueen::Algorithm *DspLib::BassQueen::Algorithm::Algorithm(DspLib::BassQueen::Algorithm *this)
{
  uint64_t v7 = (char *)this + 6688;
  uint64_t v2 = (char *)this + 6176;
  float v6 = (char *)this + 5824;
  float v3 = (char *)this + 5312;
  float v4 = (void *)DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::BassQueen::Parameters::kDefault, 0x59uLL, (uint64_t)&DspLib::BassQueen::Parameters::kMinimum, 89, (uint64_t)&DspLib::BassQueen::Parameters::kMaximum, 89);
  void *v4 = &unk_1F14A6E98;
  memcpy(v4 + 27, &DspLib::BassQueen::Parameters::kMinimum, 0x164uLL);
  memcpy((char *)this + 572, &DspLib::BassQueen::Parameters::kMaximum, 0x164uLL);
  *((_OWORD *)this + 66) = xmmword_1BB873864;
  *((_OWORD *)this + 67) = unk_1BB873874;
  *(_OWORD *)((char *)this + 6040) = DspLib::AudioMeter::Parameters::kDefault;
  *(_OWORD *)((char *)this + 6056) = unk_1BB8739E8;
  *(_OWORD *)((char *)this + 5176) = DspLib::AudioMeter::Parameters::kDefault;
  *(_OWORD *)((char *)this + 5192) = unk_1BB8739E8;
  *((_OWORD *)this + 68) = xmmword_1BB873884;
  *(_OWORD *)((char *)this + 1100) = *(long long *)((char *)&xmmword_1BB873884 + 12);
  *(_OWORD *)((char *)this + 1928) = xmmword_1BB873864;
  *(_OWORD *)((char *)this + 1944) = unk_1BB873874;
  *(_OWORD *)((char *)this + 2660) = *(long long *)((char *)&xmmword_1BB873884 + 12);
  *(_OWORD *)((char *)this + 2632) = unk_1BB873874;
  *(_OWORD *)((char *)this + 2648) = xmmword_1BB873884;
  *(_OWORD *)((char *)this + 2616) = xmmword_1BB873864;
  *(_OWORD *)((char *)this + 3348) = *(long long *)((char *)&xmmword_1BB873884 + 12);
  *(_OWORD *)((char *)this + 3320) = unk_1BB873874;
  *(_OWORD *)((char *)this + 3336) = xmmword_1BB873884;
  *(_OWORD *)((char *)this + 3304) = xmmword_1BB873864;
  *((_OWORD *)this + 341) = unk_1BB873874;
  *((_OWORD *)this + 340) = xmmword_1BB873864;
  *((_OWORD *)this + 394) = xmmword_1BB873864;
  *((_OWORD *)this + 395) = unk_1BB873874;
  *(_OWORD *)((char *)this + 1960) = xmmword_1BB873884;
  *(_OWORD *)(v3 + 172) = *(long long *)((char *)&xmmword_1BB873884 + 12);
  *((_OWORD *)this + 342) = xmmword_1BB873884;
  *((_OWORD *)this + 396) = xmmword_1BB873884;
  *((_OWORD *)this + 62) = xmmword_1BB873824;
  *((_OWORD *)this + 63) = unk_1BB873834;
  *(_OWORD *)((char *)this + 1972) = *(long long *)((char *)&xmmword_1BB873884 + 12);
  *(_OWORD *)((char *)this + 1864) = xmmword_1BB873824;
  *(_OWORD *)((char *)this + 1880) = unk_1BB873834;
  *(_OWORD *)((char *)this + 2552) = xmmword_1BB873824;
  *(_OWORD *)((char *)this + 2568) = unk_1BB873834;
  *(_OWORD *)((char *)this + 3240) = xmmword_1BB873824;
  *(_OWORD *)((char *)this + 3256) = unk_1BB873834;
  *((_OWORD *)this + 336) = xmmword_1BB873824;
  *(_OWORD *)(v2 + 172) = *(long long *)((char *)&xmmword_1BB873884 + 12);
  *((_OWORD *)this + 390) = xmmword_1BB873824;
  *((_OWORD *)this + 337) = unk_1BB873834;
  *((_OWORD *)this + 391) = unk_1BB873834;
  *(_OWORD *)((char *)this + 2584) = xmmword_1BB873844;
  *(_OWORD *)((char *)this + 2600) = unk_1BB873854;
  *(_OWORD *)((char *)this + 3272) = xmmword_1BB873844;
  *(_OWORD *)((char *)this + 3288) = unk_1BB873854;
  *((_OWORD *)this + 64) = xmmword_1BB873844;
  *((_OWORD *)this + 338) = xmmword_1BB873844;
  *((_OWORD *)this + 392) = xmmword_1BB873844;
  *(_OWORD *)((char *)this + 1896) = xmmword_1BB873844;
  *(_OWORD *)((char *)this + 1912) = unk_1BB873854;
  *((_OWORD *)this + 65) = unk_1BB873854;
  *((_OWORD *)this + 339) = unk_1BB873854;
  *((_OWORD *)this + 393) = unk_1BB873854;
  *(_OWORD *)((char *)this + 2520) = DspLib::LoudspeakerModel::Parameters::kDefault;
  *(_OWORD *)((char *)this + 2536) = xmmword_1BB873814;
  *(_OWORD *)((char *)this + 3208) = DspLib::LoudspeakerModel::Parameters::kDefault;
  *(_OWORD *)((char *)this + 3224) = xmmword_1BB873814;
  *((_OWORD *)this + 60) = DspLib::LoudspeakerModel::Parameters::kDefault;
  *((_OWORD *)this + 61) = xmmword_1BB873814;
  *(_OWORD *)((char *)this + 1832) = DspLib::LoudspeakerModel::Parameters::kDefault;
  *(_OWORD *)((char *)this + 1848) = xmmword_1BB873814;
  *((_OWORD *)this + 334) = DspLib::LoudspeakerModel::Parameters::kDefault;
  *((_OWORD *)this + 388) = DspLib::LoudspeakerModel::Parameters::kDefault;
  *((_OWORD *)this + 335) = xmmword_1BB873814;
  *((_OWORD *)this + 389) = xmmword_1BB873814;
  *(_OWORD *)((char *)this + 1228) = xmmword_1BB873910;
  *(_OWORD *)((char *)this + 1244) = xmmword_1BB873920;
  *(_OWORD *)((char *)this + 2788) = xmmword_1BB873910;
  *(_OWORD *)((char *)this + 2804) = xmmword_1BB873920;
  *(_OWORD *)((char *)this + 3476) = xmmword_1BB873910;
  *(_OWORD *)((char *)this + 3492) = xmmword_1BB873920;
  *(_OWORD *)(v3 + 300) = xmmword_1BB873910;
  *(_OWORD *)(v3 + 316) = xmmword_1BB873920;
  *(_OWORD *)(v2 + 300) = xmmword_1BB873910;
  *(_OWORD *)(v2 + 316) = xmmword_1BB873920;
  *(_OWORD *)((char *)this + 2100) = xmmword_1BB873910;
  *(_OWORD *)((char *)this + 2116) = xmmword_1BB873920;
  *(_OWORD *)((char *)this + 1256) = *(long long *)((char *)&xmmword_1BB873920 + 12);
  *((_OWORD *)this + 133) = *(long long *)((char *)&xmmword_1BB873920 + 12);
  *((_OWORD *)this + 176) = *(long long *)((char *)&xmmword_1BB873920 + 12);
  *((_OWORD *)this + 219) = *(long long *)((char *)&xmmword_1BB873920 + 12);
  *(_OWORD *)(v3 + 328) = *(long long *)((char *)&xmmword_1BB873920 + 12);
  *(_OWORD *)(v2 + 328) = *(long long *)((char *)&xmmword_1BB873920 + 12);
  *(_OWORD *)((char *)this + 1148) = xmmword_1BB8738C0;
  *(_OWORD *)((char *)this + 1164) = unk_1BB8738D0;
  *(_OWORD *)((char *)this + 2020) = xmmword_1BB8738C0;
  *(_OWORD *)((char *)this + 2036) = unk_1BB8738D0;
  *(_OWORD *)((char *)this + 2708) = xmmword_1BB8738C0;
  *(_OWORD *)((char *)this + 2724) = unk_1BB8738D0;
  *(_OWORD *)((char *)this + 3396) = xmmword_1BB8738C0;
  *(_OWORD *)((char *)this + 3412) = unk_1BB8738D0;
  *(_OWORD *)(v3 + 220) = xmmword_1BB8738C0;
  *(_OWORD *)(v3 + 236) = unk_1BB8738D0;
  *(_OWORD *)(v2 + 220) = xmmword_1BB8738C0;
  *(_OWORD *)(v2 + 236) = unk_1BB8738D0;
  *(_OWORD *)((char *)this + 1180) = xmmword_1BB8738E0;
  *(_OWORD *)((char *)this + 2052) = xmmword_1BB8738E0;
  *(_OWORD *)((char *)this + 2740) = xmmword_1BB8738E0;
  *(_OWORD *)((char *)this + 3428) = xmmword_1BB8738E0;
  *(_OWORD *)(v3 + 252) = xmmword_1BB8738E0;
  *(_OWORD *)(v2 + 252) = xmmword_1BB8738E0;
  *(_OWORD *)((char *)this + 1196) = unk_1BB8738F0;
  *(_OWORD *)((char *)this + 1212) = xmmword_1BB873900;
  *(_OWORD *)((char *)this + 2068) = unk_1BB8738F0;
  *(_OWORD *)((char *)this + 2084) = xmmword_1BB873900;
  *(_OWORD *)((char *)this + 2756) = unk_1BB8738F0;
  *(_OWORD *)((char *)this + 2772) = xmmword_1BB873900;
  *(_OWORD *)((char *)this + 3444) = unk_1BB8738F0;
  *(_OWORD *)((char *)this + 3460) = xmmword_1BB873900;
  *(_OWORD *)(v3 + 268) = unk_1BB8738F0;
  *(_OWORD *)(v3 + 284) = xmmword_1BB873900;
  *(_OWORD *)(v2 + 268) = unk_1BB8738F0;
  *(_OWORD *)(v2 + 284) = xmmword_1BB873900;
  *(_OWORD *)((char *)this + 1116) = DspLib::LoudspeakerModel::Parameters::kMinimum;
  *(_OWORD *)((char *)this + 1132) = unk_1BB8738B0;
  *(_OWORD *)((char *)this + 1988) = DspLib::LoudspeakerModel::Parameters::kMinimum;
  *(_OWORD *)((char *)this + 2004) = unk_1BB8738B0;
  *(_OWORD *)((char *)this + 2676) = DspLib::LoudspeakerModel::Parameters::kMinimum;
  *(_OWORD *)((char *)this + 2692) = unk_1BB8738B0;
  *(_OWORD *)((char *)this + 3364) = DspLib::LoudspeakerModel::Parameters::kMinimum;
  *(_OWORD *)((char *)this + 3380) = unk_1BB8738B0;
  *(_OWORD *)(v3 + 188) = DspLib::LoudspeakerModel::Parameters::kMinimum;
  *(_OWORD *)(v3 + 204) = unk_1BB8738B0;
  *(_OWORD *)(v2 + 188) = DspLib::LoudspeakerModel::Parameters::kMinimum;
  *(_OWORD *)(v2 + 204) = unk_1BB8738B0;
  *(_OWORD *)((char *)this + 1368) = xmmword_1BB87399C;
  *(_OWORD *)((char *)this + 1384) = unk_1BB8739AC;
  *((_OWORD *)this + 140) = xmmword_1BB87399C;
  *((_OWORD *)this + 183) = xmmword_1BB87399C;
  *((_OWORD *)this + 226) = xmmword_1BB87399C;
  *(_OWORD *)((char *)this + 6616) = xmmword_1BB87399C;
  *(_OWORD *)((char *)this + 6632) = unk_1BB8739AC;
  *(_OWORD *)((char *)this + 5752) = xmmword_1BB87399C;
  *(_OWORD *)((char *)this + 5768) = unk_1BB8739AC;
  *(_OWORD *)((char *)this + 1400) = xmmword_1BB8739BC;
  *((_OWORD *)this + 141) = unk_1BB8739AC;
  *((_OWORD *)this + 184) = unk_1BB8739AC;
  *((_OWORD *)this + 227) = unk_1BB8739AC;
  *(_OWORD *)((char *)this + 1412) = *(long long *)((char *)&xmmword_1BB8739BC + 12);
  *((_OWORD *)this + 142) = xmmword_1BB8739BC;
  *(_OWORD *)((char *)this + 2284) = *(long long *)((char *)&xmmword_1BB8739BC + 12);
  *((_OWORD *)this + 185) = xmmword_1BB8739BC;
  *(_OWORD *)((char *)this + 2972) = *(long long *)((char *)&xmmword_1BB8739BC + 12);
  *((_OWORD *)this + 228) = xmmword_1BB8739BC;
  *(_OWORD *)((char *)this + 3660) = *(long long *)((char *)&xmmword_1BB8739BC + 12);
  *(_OWORD *)((char *)this + 5784) = xmmword_1BB8739BC;
  *(_OWORD *)((char *)this + 5796) = *(long long *)((char *)&xmmword_1BB8739BC + 12);
  *(_OWORD *)((char *)this + 6648) = xmmword_1BB8739BC;
  *(_OWORD *)((char *)this + 6660) = *(long long *)((char *)&xmmword_1BB8739BC + 12);
  *(_OWORD *)((char *)this + 1304) = xmmword_1BB87395C;
  *(_OWORD *)((char *)this + 1320) = unk_1BB87396C;
  *((_OWORD *)this + 136) = xmmword_1BB87395C;
  *((_OWORD *)this + 137) = unk_1BB87396C;
  *((_OWORD *)this + 179) = xmmword_1BB87395C;
  *((_OWORD *)this + 180) = unk_1BB87396C;
  *((_OWORD *)this + 222) = xmmword_1BB87395C;
  *((_OWORD *)this + 223) = unk_1BB87396C;
  *(_OWORD *)((char *)this + 5688) = xmmword_1BB87395C;
  *(_OWORD *)((char *)this + 5704) = unk_1BB87396C;
  *(_OWORD *)((char *)this + 6552) = xmmword_1BB87395C;
  *(_OWORD *)((char *)this + 6568) = unk_1BB87396C;
  *(_OWORD *)((char *)this + 1336) = xmmword_1BB87397C;
  *(_OWORD *)((char *)this + 1352) = unk_1BB87398C;
  *((_OWORD *)this + 138) = xmmword_1BB87397C;
  *((_OWORD *)this + 139) = unk_1BB87398C;
  *((_OWORD *)this + 181) = xmmword_1BB87397C;
  *((_OWORD *)this + 182) = unk_1BB87398C;
  *((_OWORD *)this + 224) = xmmword_1BB87397C;
  *((_OWORD *)this + 225) = unk_1BB87398C;
  *(_OWORD *)((char *)this + 5720) = xmmword_1BB87397C;
  *(_OWORD *)((char *)this + 5736) = unk_1BB87398C;
  *(_OWORD *)((char *)this + 6584) = xmmword_1BB87397C;
  *(_OWORD *)((char *)this + 6600) = unk_1BB87398C;
  *((_OWORD *)this + 134) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *((_OWORD *)this + 177) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *((_OWORD *)this + 220) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)((char *)this + 5656) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)((char *)this + 5672) = *(_OWORD *)algn_1BB87394C;
  *(_OWORD *)((char *)this + 6520) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)((char *)this + 6536) = *(_OWORD *)algn_1BB87394C;
  *(_OWORD *)((char *)this + 1272) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)((char *)this + 1288) = *(_OWORD *)algn_1BB87394C;
  *((_OWORD *)this + 135) = *(_OWORD *)algn_1BB87394C;
  *((_OWORD *)this + 178) = *(_OWORD *)algn_1BB87394C;
  *((_OWORD *)this + 221) = *(_OWORD *)algn_1BB87394C;
  *((_OWORD *)this + 59) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *((void *)this + 211) = 0;
  *((_DWORD *)this + 424) = 1;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *((_DWORD *)this + 442) = 0;
  *((void *)this + 228) = 0;
  *((_OWORD *)this + 113) = 0u;
  *((void *)this + 224) = 0;
  *((_OWORD *)this + 111) = 0u;
  *((unsigned char *)this + 1800) = 0;
  *(void *)((char *)this + 2300) = 0;
  *((unsigned char *)this + 2312) = 0;
  *(_OWORD *)((char *)this + 2392) = 0u;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2440) = 0u;
  *((void *)this + 310) = 0;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *((unsigned char *)this + 2384) = 0;
  *((unsigned char *)this + 2488) = 0;
  *((void *)this + 312) = 0;
  *(_OWORD *)((char *)this + 3080) = 0u;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *(_OWORD *)((char *)this + 3112) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *((_OWORD *)this + 188) = 0u;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 190) = 0u;
  *((_OWORD *)this + 191) = 0u;
  *(_OWORD *)((char *)this + 3768) = 0u;
  *(_OWORD *)((char *)this + 3784) = 0u;
  *(_OWORD *)((char *)this + 3800) = 0u;
  *(_OWORD *)((char *)this + 3816) = 0u;
  *((_OWORD *)this + 231) = 0u;
  *((_OWORD *)this + 232) = 0u;
  *((_OWORD *)this + 233) = 0u;
  *((_OWORD *)this + 234) = 0u;
  *(_OWORD *)((char *)this + 4440) = 0u;
  *((_OWORD *)this + 252) = 0u;
  *((_OWORD *)this + 251) = 0u;
  *((_OWORD *)this + 250) = 0u;
  *((_OWORD *)this + 249) = 0u;
  *((_OWORD *)this + 248) = 0u;
  *((_OWORD *)this + 247) = 0u;
  *(_OWORD *)((char *)this + 4136) = 0u;
  *(_OWORD *)((char *)this + 4120) = 0u;
  *(_OWORD *)((char *)this + 4104) = 0u;
  *(_OWORD *)((char *)this + 4088) = 0u;
  *(_OWORD *)((char *)this + 4072) = 0u;
  *(_OWORD *)((char *)this + 4056) = 0u;
  *((_OWORD *)this + 260) = 0u;
  *((_OWORD *)this + 261) = 0u;
  *((_OWORD *)this + 262) = 0u;
  *((_OWORD *)this + 263) = 0u;
  *((_OWORD *)this + 264) = 0u;
  *((_OWORD *)this + 265) = 0u;
  *(_OWORD *)((char *)this + 4264) = 0u;
  *(_OWORD *)((char *)this + 4280) = 0u;
  *(_OWORD *)((char *)this + 4296) = 0u;
  *(_OWORD *)((char *)this + 4312) = 0u;
  *(_OWORD *)((char *)this + 4328) = 0u;
  *(_OWORD *)((char *)this + 4344) = 0u;
  *((_OWORD *)this + 275) = 0u;
  *((_OWORD *)this + 274) = 0u;
  *((_OWORD *)this + 273) = 0u;
  *((_OWORD *)this + 318) = 0u;
  *((_OWORD *)this + 242) = 0u;
  *((_OWORD *)this + 243) = 0u;
  *((_OWORD *)this + 244) = 0u;
  *((_OWORD *)this + 245) = 0u;
  *(_OWORD *)((char *)this + 3929) = 0u;
  *((_OWORD *)this + 281) = 0u;
  *((_OWORD *)this + 280) = 0u;
  *((_OWORD *)this + 279) = 0u;
  *(_OWORD *)((char *)this + 4600) = 0u;
  *(_OWORD *)((char *)this + 4584) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *(_OWORD *)((char *)this + 4552) = 0u;
  *(_OWORD *)((char *)this + 4536) = 0u;
  *(_OWORD *)((char *)this + 4520) = 0u;
  *(_OWORD *)((char *)this + 4777) = 0u;
  *((_OWORD *)this + 298) = 0u;
  *((_OWORD *)this + 297) = 0u;
  *((_OWORD *)this + 296) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *((_OWORD *)this + 294) = 0u;
  *((_OWORD *)this + 293) = 0u;
  *((_OWORD *)this + 292) = 0u;
  *((_OWORD *)this + 291) = 0u;
  *((_OWORD *)this + 290) = 0u;
  *((_OWORD *)this + 289) = 0u;
  *(_DWORD *)((char *)this + 5023) = 0;
  *((_OWORD *)this + 313) = 0u;
  *((_OWORD *)this + 312) = 0u;
  *((_OWORD *)this + 311) = 0u;
  *((_OWORD *)this + 310) = 0u;
  *((_OWORD *)this + 309) = 0u;
  *((_OWORD *)this + 308) = 0u;
  *((_OWORD *)this + 307) = 0u;
  *((_OWORD *)this + 306) = 0u;
  *((_OWORD *)this + 305) = 0u;
  *(_OWORD *)((char *)this + 5272) = 0u;
  *(_OWORD *)((char *)this + 5288) = 0u;
  *(_OWORD *)((char *)this + 5240) = 0u;
  *(_OWORD *)((char *)this + 5256) = 0u;
  *(_OWORD *)((char *)this + 5208) = 0u;
  *(_OWORD *)((char *)this + 5224) = 0u;
  *((_OWORD *)this + 369) = 0u;
  *((_OWORD *)this + 370) = 0u;
  *((_OWORD *)this + 371) = 0u;
  *((_OWORD *)this + 372) = 0u;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)((char *)this + 5992) = 0u;
  *(_OWORD *)((char *)this + 6008) = 0u;
  *(_OWORD *)((char *)this + 6136) = 0u;
  *(_OWORD *)((char *)this + 6152) = 0u;
  *(_OWORD *)((char *)this + 6104) = 0u;
  *(_OWORD *)((char *)this + 6120) = 0u;
  *(_OWORD *)((char *)this + 6072) = 0u;
  *(_OWORD *)((char *)this + 6088) = 0u;
  *((_OWORD *)this + 387) = 0u;
  *((_OWORD *)this + 423) = 0u;
  *((_OWORD *)this + 424) = 0u;
  *((_OWORD *)this + 425) = 0u;
  *((_OWORD *)this + 426) = 0u;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)((char *)this + 6856) = 0u;
  *(_OWORD *)((char *)this + 6872) = 0u;
  *((unsigned char *)this + 928) = 0;
  *((void *)this + 117) = 0;
  *((unsigned char *)this + 1512) = 0;
  *((void *)this + 202) = 1;
  *(void *)((char *)this + 1428) = 1;
  *((unsigned char *)this + 1440) = 0;
  *((void *)this + 201) = 0;
  *(void *)((char *)this + 2988) = 0;
  *((unsigned char *)this + 3000) = 0;
  *((void *)this + 396) = 0;
  *((unsigned char *)this + 3072) = 0;
  *((unsigned char *)this + 3176) = 0;
  *((void *)this + 398) = 0;
  *(void *)((char *)this + 3676) = 0;
  *((unsigned char *)this + 3688) = 0;
  *((void *)this + 482) = 0;
  *((unsigned char *)this + 3760) = 0;
  *((unsigned char *)this + 3864) = 0;
  *((void *)this + 554) = 0;
  *((unsigned char *)this + 4048) = 0;
  *((unsigned char *)this + 4152) = 0;
  *((unsigned char *)this + 4256) = 0;
  *((unsigned char *)this + 4360) = 0;
  *((void *)this + 638) = 0;
  *((unsigned char *)this + 4512) = 0;
  *((unsigned char *)this + 4616) = 0;
  *((_DWORD *)this + 1290) = 1063756653;
  *((void *)this + 646) = 0;
  *((_DWORD *)this + 1326) = 0;
  *float v3 = 0;
  *((void *)this + 666) = 0;
  *((void *)this + 665) = 0;
  *((void *)this + 667) = 0;
  *(void *)((char *)this + 5812) = 0;
  *float v6 = 0;
  *((unsigned char *)this + 5896) = 0;
  *((_DWORD *)this + 1506) = 1063756653;
  *((void *)this + 754) = 0;
  *((_DWORD *)this + 1542) = 0;
  *uint64_t v2 = 0;
  *((void *)this + 773) = 0;
  *(void *)((char *)this + 6676) = 0;
  *uint64_t v7 = 0;
  *((unsigned char *)this + 6760) = 0;
  (*(void (**)(DspLib::BassQueen::Algorithm *, uint64_t))(*(void *)this + 232))(this, 256);
  *((_DWORD *)this + 1263) = 0;
  return this;
}

void sub_1BB2AE1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, DspLib::BassQueen::FilterBankWeights *a14, DspLib::Biquad::ParametricFilter *a15, DspLib::Biquad::Filter *a16, DspLib::LoudspeakerModel::Algorithm *a17, uint64_t a18, _Unwind_Exception *exception_object, uint64_t a20)
{
  DspLib::BassQueen::Algorithm::MeteringChain::~MeteringChain(v26);
  DspLib::BassQueen::Algorithm::MeteringChain::~MeteringChain(v22);
  BOOL v30 = *a10;
  if (*a10)
  {
    v20[637] = v30;
    operator delete(v30);
  }
  unint64_t v31 = (void *)v20[625];
  if (v31)
  {
    v20[626] = v31;
    operator delete(v31);
  }
  DspLib::BassQueen::FilterBankWeights::~FilterBankWeights(a14);
  a20 = a11;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = a12;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = a13;
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  DspLib::Biquad::ParametricFilter::~ParametricFilter(a15);
  DspLib::Biquad::ParametricFilter::~ParametricFilter(v29);
  DspLib::ConstantQFilterbank::Modifier::~Modifier(v21);
  DspLib::Biquad::Filter::~Filter(a16);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(v25);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(v24);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(v23);
  DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator(v28);
  DspLib::FIRDecimator::~FIRDecimator(v27);
  DspLib::LoudspeakerModel::Algorithm::~Algorithm(a17);
  void *v20 = &unk_1F14A87D8;
  float v32 = (void *)v20[4];
  if (v32)
  {
    void v20[5] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void DspLib::BassQueen::FilterBankWeights::~FilterBankWeights(DspLib::BassQueen::FilterBankWeights *this)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 11);
  if (v3)
  {
    *((void *)this + 12) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 5);
  if (v5)
  {
    *((void *)this + 6) = v5;
    operator delete(v5);
  }
  float v6 = (void **)((char *)this + 16);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void DspLib::LoudspeakerModel::Algorithm::~Algorithm(DspLib::LoudspeakerModel::Algorithm *this)
{
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100]((void *)this + 82);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 632));
  uint64_t v2 = (void *)*((void *)this + 76);
  if (v2)
  {
    *((void *)this + 77) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 560));
  float v3 = (void *)*((void *)this + 67);
  if (v3)
  {
    *((void *)this + 68) = v3;
    operator delete(v3);
  }
}

void DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator(DspLib::PolyPhaseInterpolator *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  float v3 = (void **)((char *)this + 48);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  float v3 = (void **)((char *)this + 16);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t DspLib::BassQueen::Algorithm::initialize(DspLib::BassQueen::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4)
  {
    *((unsigned char *)this + 8) = 1;
    unsigned int v5 = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 208, v5);
    unsigned int v6 = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 56))(this);
    std::vector<std::vector<float>>::resize((uint64_t *)this + 218, v6);
    unsigned int v7 = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 56))(this);
    DspLib::ConstantQFilterbank::Modifier::initialize((DspLib::BassQueen::Algorithm *)((char *)this + 3936), v7, *((double *)this + 2));
    unsigned int v8 = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 596, v8);
    unsigned int v9 = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 56))(this);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)this + 593, v9);
    (*(void (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 128))(this);
    (*(void (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 136))(this);
  }
  return v4;
}

void DspLib::BassQueen::Algorithm::uninitialize(DspLib::BassQueen::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 1440));
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 1512));
  *((unsigned char *)this + 928) = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 208, 0);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 218, 0);
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 2312));
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 2384));
  *((unsigned char *)this + 1800) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3000));
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3072));
  *((unsigned char *)this + 2488) = 0;
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3688));
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3760));
  *((unsigned char *)this + 3176) = 0;
  *((void *)this + 637) = *((void *)this + 636);
  DspLib::BassQueen::FilterBankWeights::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 4864));
  DspLib::ConstantQFilterbank::Modifier::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3936));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 4512));
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 4616));
  *((void *)this + 626) = *((void *)this + 625);
  DspLib::Biquad::Filter::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 3864));
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 590);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 593);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__clear[abi:ne180100]((uint64_t *)this + 596);
  DspLib::BassQueen::Algorithm::MeteringChain::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 5160));

  DspLib::BassQueen::Algorithm::MeteringChain::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 6024));
}

void DspLib::BassQueen::FilterBankWeights::uninitialize(DspLib::BassQueen::FilterBankWeights *this)
{
  uint64_t v3 = *((void *)this + 2);
  for (uint64_t i = *((void *)this + 3); i != v3; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i))
    i -= 104;
  *((void *)this + 3) = v3;
  *((void *)this + 6) = *((void *)this + 5);
  *((void *)this + 9) = *((void *)this + 8);
  *((void *)this + 12) = *((void *)this + 11);
  *((void *)this + 15) = *((void *)this + 14);
}

void DspLib::BassQueen::Algorithm::MeteringChain::uninitialize(DspLib::BassQueen::Algorithm::MeteringChain *this)
{
  *((unsigned char *)this + 152) = 0;
  *((void *)this + 106) = *((void *)this + 105);
}

void DspLib::BassQueen::Algorithm::reset(DspLib::BassQueen::Algorithm *this)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 1488));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 1560));
  DspLib::FIRDecimator::reset((DspLib::BassQueen::Algorithm *)((char *)this + 1616));
  uint64_t v2 = *((void *)this + 218);
  uint64_t v3 = *((void *)this + 219);
  while (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if (*(void *)v2 != v4) {
      bzero(*(void **)v2, (v4 - *(void *)v2) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v2 += 24;
  }
  *((_DWORD *)this + 442) = 0;
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 2360));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 2432));
  DspLib::BassQueen::FilterBankWeights::reset((DspLib::BassQueen::Algorithm *)((char *)this + 4864));
  DspLib::ConstantQFilterbank::Modifier::reset((DspLib::BassQueen::Algorithm *)((char *)this + 3936));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 4560));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 4664));
  *((void *)this + 604) = 0;
  *((void *)this + 603) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 605) = _D0;
  *((void *)this + 601) = 0;
  *(void *)((char *)this + 4853) = 0;
  *((void *)this + 606) = 0;
  *((_DWORD *)this + 1284) = 0;
  uint64_t v10 = *((void *)this + 613);
  vDSP_Length v11 = (*((void *)this + 614) - v10) >> 2;
  float v12 = (const float *)MEMORY[0x1F4188790](v10);
  DspLib::multiply(v12, v11, (float *)((char *)v20 - v13), 0.0);
  DspLib::ConstantQFilterbank::Modifier::setGains((uint64_t)this + 3936);
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm *)((char *)this + 3912));
  float v14 = (DspLib::CircularDelay *)*((void *)this + 596);
  float v15 = (DspLib::CircularDelay *)*((void *)this + 597);
  while (v14 != v15)
  {
    DspLib::CircularDelay::reset(v14);
    float v14 = (DspLib::CircularDelay *)((char *)v14 + 32);
  }
  __float2 v16 = (DspLib::CircularDelay *)*((void *)this + 590);
  float v17 = (DspLib::CircularDelay *)*((void *)this + 591);
  while (v16 != v17)
  {
    DspLib::CircularDelay::reset(v16);
    __float2 v16 = (DspLib::CircularDelay *)((char *)v16 + 32);
  }
  float v18 = (DspLib::CircularDelay *)*((void *)this + 593);
  double v19 = (DspLib::CircularDelay *)*((void *)this + 594);
  while (v18 != v19)
  {
    DspLib::CircularDelay::reset(v18);
    float v18 = (DspLib::CircularDelay *)((char *)v18 + 32);
  }
  DspLib::BassQueen::Algorithm::MeteringChain::reset((DspLib::BassQueen::Algorithm *)((char *)this + 5160));
  DspLib::BassQueen::Algorithm::MeteringChain::reset((DspLib::BassQueen::Algorithm *)((char *)this + 6024));
  *((void *)this + 643) = 0;
  *((_DWORD *)this + 1288) = 0;
  *((unsigned char *)this + 5140) = 0;
}

void DspLib::BassQueen::FilterBankWeights::reset(DspLib::BassQueen::FilterBankWeights *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  while (v2 != v3)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 48));
    v2 += 104;
  }
  uint64_t v4 = (float *)*((void *)this + 8);
  vDSP_Length v5 = (uint64_t)(*((void *)this + 9) - (void)v4) >> 2;

  DspLib::clear(v4, v5);
}

void DspLib::BassQueen::Algorithm::MeteringChain::reset(DspLib::BassQueen::Algorithm::MeteringChain *this)
{
  DspLib::AudioMeter::Algorithm::reset((DspLib::BassQueen::Algorithm::MeteringChain *)((char *)this + 8));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm::MeteringChain *)((char *)this + 712));
  DspLib::Biquad::SetupWrapper::reset((DspLib::BassQueen::Algorithm::MeteringChain *)((char *)this + 784));
  uint64_t v2 = (float *)*((void *)this + 105);
  vDSP_Length v3 = (uint64_t)(*((void *)this + 106) - (void)v2) >> 2;

  DspLib::clear(v2, v3);
}

uint64_t DspLib::BassQueen::Algorithm::numStatus(DspLib::BassQueen::Algorithm *this)
{
  return 111;
}

double DspLib::BassQueen::Algorithm::latencySamples(DspLib::BassQueen::Algorithm *this, double a2)
{
  if (*((unsigned char *)this + 8))
  {
    LODWORD(a2) = *((_DWORD *)this + 1261);
    return (double)*(unint64_t *)&a2;
  }
  else
  {
    vDSP_Length v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassQueen/dsp/DspLibBassQueen.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v3, 127);
    ++DspLibDebug::mAssertCounter;
    return 0.0;
  }
}

void DspLib::BassQueen::Algorithm::setMeteringIsEnabled(DspLib::BassQueen::Algorithm *this, int a2)
{
  if (*((unsigned __int8 *)this + 24) != a2)
  {
    *((unsigned char *)this + 24) = a2;
    if (a2)
    {
      unsigned int v3 = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 56))(this);
      double v4 = (*(double (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 40))(this);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::BassQueen::Algorithm *)((char *)this + 5168), v3, v4);
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::BassQueen::Algorithm *)((char *)this + 5312), v3, v4);
      unsigned int v5 = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 56))(this);
      double v6 = (*(double (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 40))(this);
      DspLib::AudioMeter::Algorithm::initialize((DspLib::BassQueen::Algorithm *)((char *)this + 6032), v5, v6);
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::BassQueen::Algorithm *)((char *)this + 6176), v5, v6);
      unsigned int v7 = *(void (**)(DspLib::BassQueen::Algorithm *))(*(void *)this + 128);
      v7(this);
    }
    else
    {
      DspLib::BassQueen::Algorithm::MeteringChain::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 5160));
      DspLib::BassQueen::Algorithm::MeteringChain::uninitialize((DspLib::BassQueen::Algorithm *)((char *)this + 6024));
    }
  }
}

uint64_t DspLib::BassQueen::Algorithm::setParameter(DspLib::BassQueen::Algorithm *this, uint64_t a2, float a3)
{
  if ((unint64_t)(a2 - 31) > 1)
  {
    return DspLib::AlgorithmBase::setParameter(this, a2, a3);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(DspLib::BassQueen::Algorithm *, uint64_t))(*(void *)this + 104))(this, a2);
    if (v8 >= a3) {
      float v8 = a3;
    }
    if (v7 <= a3) {
      float v7 = v8;
    }
    uint64_t v9 = *((void *)this + 4);
    *(float *)(v9 + 4 * a2) = v7;
    *((float *)this + 1279) = 100.0 / *(float *)(v9 + 124);
    *((float *)this + 1280) = 100.0 / *(float *)(v9 + 128);
  }
  return result;
}

void DspLib::BassQueen::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3)
{
  DspLib::BassQueen::Parameters::setBoundaries((uint64_t)a2, a3, a1 + 216, 89, a1 + 572);
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, v6);
  if (*(unsigned char *)(a1 + 8))
  {
    float v7 = *(float **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 5024) = *v7 >= 0.5;
    *(unsigned char *)(a1 + 5025) = v7[22] >= 0.5;
    *(unsigned char *)(a1 + 5026) = v7[23] >= 0.5;
    *(unsigned char *)(a1 + 5027) = vcvtas_u32_f32(v7[1]) > 6;
    *(float *)(a1 + 5128) = DspLib::BassQueen::Algorithm::findZerodBFrequency(a1, (uint64_t)v7, 10.0, 10000.0, 10.0, (v8 - (uint64_t)v7) >> 2, 0);
    *(float *)(a1 + 5132) = DspLib::BassQueen::Algorithm::findZerodBFrequency(a1, *(void *)(a1 + 32), 10.0, 10000.0, 10000.0, (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2, 1);
    isEqual = (DspLib *)DspLib::isEqual(v9, *(float *)(a1 + 5128), 10000.0, 1.0e-20);
    if ((isEqual & 1) != 0
      || (isEqual = (DspLib *)DspLib::isEqual(isEqual, *(float *)(a1 + 5132), 10.0, 1.0e-20),
          (isEqual & 1) != 0))
    {
      *(int32x2_t *)(a1 + 5128) = vdup_n_s32(0x42C80000u);
      float v11 = 100.0;
    }
    else
    {
      float v11 = *(float *)(a1 + 5132);
    }
    float v12 = v11 * 6.0;
    float v13 = 20000.0;
    if (v12 <= 20000.0) {
      float v13 = v12;
    }
    if (v12 < 1000.0) {
      float v13 = 1000.0;
    }
    double v14 = *(double *)(a1 + 16);
    unsigned int v15 = (v14 / v13 * 0.5);
    if (v15 >= 0x20) {
      unsigned int v16 = 32;
    }
    else {
      unsigned int v16 = (v14 / v13 * 0.5);
    }
    if (v15) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = 1;
    }
    int v18 = *(_DWORD *)(a1 + 5052);
    *(_DWORD *)(a1 + 5052) = v17;
    if (v17 != v18)
    {
      double v19 = v14 / (double)v17;
      *(double *)(a1 + 5064) = v19;
      *(double *)(a1 + 5072) = v19 / (double)(0x100u / (unsigned __int16)v17);
      std::string __p = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      *(float *)(a1 + 5112) = DspLib::BassQueen::Algorithm::makeSRCCoefficients(a1, (float **)&__p);
      unint64_t v20 = *(unsigned int *)(a1 + 5052);
      unint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      DspLib::FIRDecimator::setSrcParameters((DspLib::FIRDecimator *)(a1 + 1616), v20, v21);
      DspLib::FIRDecimator::setCoefficients(a1 + 1616, __p, (v74 - (unsigned char *)__p) >> 2);
      DspLib::multiply((float *)__p, (v74 - (unsigned char *)__p) >> 2, (float)*(unsigned int *)(a1 + 5052));
      LODWORD(v20) = *(_DWORD *)(a1 + 5052);
      unint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 1696), v20, v22 / *(unsigned int *)(a1 + 5052) + 1);
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 1696), (uint64_t)__p, (v74 - (unsigned char *)__p) >> 2);
      unint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      LODWORD(v24) = *(_DWORD *)(a1 + 5052);
      LODWORD(v25) = vcvtpd_u64_f64((double)v23 / (double)v24);
      *(_DWORD *)(a1 + 5056) = v25;
      *(void *)(a1 + 4872) = *(void *)(a1 + 5064);
      std::vector<float>::resize(a1 + 4952, v25);
      DspLib::ConstantQFilterbank::Modifier::setMaxFrameSize((DspLib::ConstantQFilterbank::Modifier *)(a1 + 3936), *(unsigned int *)(a1 + 5056));
      unsigned int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 1800), v26, *(double *)(a1 + 5064));
      unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 2488), v27, *(double *)(a1 + 5064));
      unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 3176), v28, *(double *)(a1 + 5064));
      DspLib::ConstantQFilterbank::Modifier::setSampleRate((DspLib::ConstantQFilterbank::Modifier *)(a1 + 3936), (double)vcvtad_u64_f64(*(double *)(a1 + 5064)));
      isEqual = (DspLib *)__p;
      if (__p)
      {
        uint64_t v74 = __p;
        operator delete(__p);
      }
    }
    *(float *)(a1 + 5028) = DspLib::dB2Amp(isEqual, *(float *)(*(void *)(a1 + 32) + 8));
    *(float *)(a1 + 5036) = DspLib::dB2Amp(v29, *(float *)(*(void *)(a1 + 32) + 96));
    BOOL v31 = DspLib::isEqual(v30, *(float *)(*(void *)(a1 + 32) + 8), 0.0, 1.0e-20);
    *(unsigned char *)(a1 + 5032) = !v31;
    *(unsigned char *)(a1 + 5040) = !DspLib::isEqual((DspLib *)v31, *(float *)(*(void *)(a1 + 32) + 96), 0.0, 1.0e-20);
    float v32 = *(float **)(a1 + 32);
    *(float *)(a1 + 5116) = 100.0 / v32[31];
    *(float *)(a1 + 5120) = 100.0 / v32[32];
    float v33 = v32 + 50;
    DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 1800, v32 + 50, 39);
    DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 2488, v33, 39);
    DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 3176, v33, 39);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 192))(a1)) {
      unsigned int v34 = (const DspLib::LoudspeakerModel::Algorithm *)(a1 + 1800);
    }
    else {
      unsigned int v34 = 0;
    }
    DspLib::BassQueen::Algorithm::MeteringChain::setParameters((DspLib::BassQueen::Algorithm::MeteringChain *)(a1 + 5160), v34);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 192))(a1)) {
      uint64_t v35 = (const DspLib::LoudspeakerModel::Algorithm *)(a1 + 1800);
    }
    else {
      uint64_t v35 = 0;
    }
    DspLib::BassQueen::Algorithm::MeteringChain::setParameters((DspLib::BassQueen::Algorithm::MeteringChain *)(a1 + 6024), v35);
    if (*(unsigned char *)(a1 + 5025))
    {
      DspLib::LoudspeakerModel::Algorithm::setParameters(a1 + 928, v33, 39);
      unsigned int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)(a1 + 928), v36, *(double *)(a1 + 16));
    }
    else
    {
      DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 1440));
      DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 1512));
      *(unsigned char *)(a1 + 928) = 0;
    }
    unsigned int v37 = vcvtpd_u64_f64(logf(*(float *)(a1 + 5132) / *(float *)(a1 + 5128))/ (*(float *)(*(void *)(a1 + 32) + 40)* 0.693147181)+ 1.0);
    if (v37 >= 0x14) {
      unint64_t v38 = 20;
    }
    else {
      unint64_t v38 = v37;
    }
    std::vector<float>::resize(a1 + 5088, v38);
    float v39 = *(float **)(a1 + 5088);
    vDSP_Length v40 = (uint64_t)(*(void *)(a1 + 5096) - (void)v39) >> 2;
    float v41 = *(float *)(a1 + 5128);
    if (v38 < 2) {
      DspLib::fill(v39, v40, v41);
    }
    else {
      DspLib::ramp(v39, v40, 1, v41, *(float *)(a1 + 5132));
    }
    std::string __p = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    DspLib::LoudspeakerModel::Algorithm::frequencyResponse(a1 + 1800, *(const float **)(a1 + 5088), (uint64_t)(*(void *)(a1 + 5096) - *(void *)(a1 + 5088)) >> 2, (uint64_t *)&__p);
    float v42 = (uint64_t *)__p;
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v74 - (unsigned char *)__p) >> 3);
    if (v43 >= 2) {
      unint64_t v43 = 2;
    }
    if (v43 > 1)
    {
      DspLib::vmax(*(float **)__p, (uint64_t)(*((void *)__p + 1) - *(void *)__p) >> 2, *((const float **)__p + 3));
      float v42 = (uint64_t *)__p;
    }
    DspLib::BassQueen::FilterBankWeights::setParameters(a1 + 4864, *(void *)(a1 + 5088), (uint64_t)(*(void *)(a1 + 5096) - *(void *)(a1 + 5088)) >> 2, *v42, *(float *)(*(void *)(a1 + 32) + 48), *(float *)(*(void *)(a1 + 32) + 52));
    float v45 = *(float **)(a1 + 32);
    if (v45[15] >= 0.5)
    {
      LODWORD(v44) = vcvtas_u32_f32(v45[17]);
      float v46 = *(double *)(a1 + 5064);
      DspLib::Biquad::Design::butterworthHighPass(v44, v45[16], v46, 0, (float **)&p_p);
      if (!*(unsigned char *)(a1 + 3864)
        || (unsigned int v47 = p_p, v48 = 0xCCCCCCCCCCCCCCCDLL * ((v72 - (unsigned char *)p_p) >> 2), *(void *)(a1 + 3920) != v48))
      {
        unsigned int v49 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 3864), v49, 0xCCCCCCCCCCCCCCCDLL * ((v72 - (unsigned char *)p_p) >> 2));
        unsigned int v47 = p_p;
        uint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((v72 - (unsigned char *)p_p) >> 2);
      }
      DspLib::Biquad::Filter::setCoefficients(a1 + 3864, (uint64_t)v47, v48, 0, 0x41uLL);
      if (p_p)
      {
        double v72 = p_p;
        operator delete(p_p);
      }
    }
    else
    {
      DspLib::Biquad::Filter::uninitialize((DspLib::Biquad::Filter *)(a1 + 3864));
    }
    unint64_t v57 = *(void *)(a1 + 5088);
    uint64_t v50 = *(void *)(a1 + 5096);
    float v51 = *(float *)(*(void *)(a1 + 32) + 44);
    char v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
    DspLib::ConstantQFilterbank::Modifier::setParameters(a1 + 3936, (void *)v57, (uint64_t)(v50 - v57) >> 2, v52, *(float *)(*(void *)(a1 + 32) + 112) >= 0.5, v51);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 4512), *(void *)(a1 + 3992), *(double *)(a1 + 4016), *(void *)(a1 + 4000));
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 4616), *(void *)(a1 + 3992), *(double *)(a1 + 4016), *(void *)(a1 + 4000));
    uint64_t v53 = *(void *)(a1 + 32);
    int v54 = *(_DWORD *)(v53 + 76);
    *(_DWORD *)(a1 + 4800) = *(_DWORD *)(v53 + 80);
    *(_DWORD *)(a1 + 4820) = v54;
    *(_DWORD *)(a1 + 4804) = -1056245401;
    *(unsigned char *)(a1 + 4792) = 1;
    std::vector<float>::resize(a1 + 5000, (uint64_t)(*(void *)(a1 + 4912) - *(void *)(a1 + 4904)) >> 2);
    uint64_t v55 = *(void *)(a1 + 32);
    double v56 = *(double *)(a1 + 5064);
    LODWORD(v57) = vcvtad_u64_f64(v56 * (float)(*(float *)(v55 + 28) / 1000.0));
    if (*(unsigned char *)(a1 + 5027)) {
      unsigned int v58 = vcvtad_u64_f64(v56 * (float)(*(float *)(v55 + 24) / 1000.0));
    }
    else {
      unsigned int v58 = v57;
    }
    *(_DWORD *)(a1 + 5048) = v58;
    unsigned int v59 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    std::vector<DspLib::CircularDelay>::resize((uint64_t *)(a1 + 4720), v59);
    uint64_t v60 = *(DspLib::CircularDelay **)(a1 + 4720);
    uint64_t v61 = *(DspLib::CircularDelay **)(a1 + 4728);
    if (v60 != v61)
    {
      unint64_t v62 = (*(_DWORD *)(a1 + 5056) + *(_DWORD *)(a1 + 5048));
      do
      {
        DspLib::CircularDelay::setLength(v60, v62);
        uint64_t v60 = (DspLib::CircularDelay *)((char *)v60 + 32);
      }
      while (v60 != v61);
    }
    LODWORD(v60) = vcvtas_u32_f32((float)(*(_DWORD *)(a1 + 5052) * v57) + (float)(*(float *)(a1 + 5112)
                                                                                              * 2.0));
    *(_DWORD *)(a1 + 5044) = v60;
    unsigned int v63 = *(DspLib::CircularDelay **)(a1 + 4768);
    unsigned int v64 = *(DspLib::CircularDelay **)(a1 + 4776);
    while (v63 != v64)
    {
      DspLib::CircularDelay::setLength(v63, (unint64_t)v60);
      unsigned int v63 = (DspLib::CircularDelay *)((char *)v63 + 32);
    }
    float v65 = *(DspLib::CircularDelay **)(a1 + 4744);
    float v66 = *(DspLib::CircularDelay **)(a1 + 4752);
    while (v65 != v66)
    {
      DspLib::CircularDelay::setLength(v65, v57);
      float v65 = (DspLib::CircularDelay *)((char *)v65 + 32);
    }
    float v67 = *(float *)(*(void *)(a1 + 32) + 108);
    double v68 = *(double *)(a1 + 16);
    float v69 = v68 / (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    *(float *)(a1 + 5124) = 1.0 - expf(-1.0 / (float)((float)(v67 * v69) / 1000.0));
    uint64_t v70 = *(void *)(a1 + 32);
    *(float *)(a1 + 5080) = (float)(*(float *)(v70 + 72) / 200.0) + 1.0;
    *(float *)(a1 + 5084) = 1.0 - (float)(*(float *)(v70 + 72) / 200.0);
    p_p = &__p;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  }
}

void sub_1BB2AF798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::string __p = &a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

float DspLib::BassQueen::Algorithm::findZerodBFrequency(uint64_t a1, uint64_t a2, float a3, float a4, float a5, uint64_t a6, int a7)
{
  v80[4] = *MEMORY[0x1E4F143B8];
  float v26 = a5;
  std::vector<float>::vector(&v24, 1uLL, &v26);
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  v54[0] = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  long long v64 = xmmword_1BB873864;
  long long v65 = unk_1BB873874;
  memset(v66, 0, sizeof(v66));
  long long v60 = xmmword_1BB873824;
  long long v61 = unk_1BB873834;
  long long v62 = xmmword_1BB873844;
  long long v63 = unk_1BB873854;
  long long v58 = DspLib::LoudspeakerModel::Parameters::kDefault;
  long long v59 = xmmword_1BB873814;
  memset(v72, 0, 76);
  long long v69 = xmmword_1BB8738C0;
  long long v70 = unk_1BB8738D0;
  long long v71 = xmmword_1BB8738E0;
  long long v67 = DspLib::LoudspeakerModel::Parameters::kMinimum;
  long long v68 = unk_1BB8738B0;
  *(_OWORD *)((char *)&v72[21] + 4) = xmmword_1BB87399C;
  *(_OWORD *)((char *)&v72[23] + 4) = unk_1BB8739AC;
  memset((char *)&v72[25] + 4, 0, 28);
  *(_OWORD *)((char *)&v72[13] + 4) = xmmword_1BB87395C;
  *(_OWORD *)((char *)&v72[15] + 4) = unk_1BB87396C;
  *(_OWORD *)((char *)&v72[17] + 4) = xmmword_1BB87397C;
  *(_OWORD *)((char *)&v72[19] + 4) = unk_1BB87398C;
  *(_OWORD *)((char *)&v72[9] + 4) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)((char *)&v72[11] + 4) = *(_OWORD *)algn_1BB87394C;
  v72[29] = 0;
  char v73 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  memset(v79, 0, sizeof(v79));
  v80[3] = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  memset(v76, 0, 33);
  v27[0] = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  long long v37 = xmmword_1BB873864;
  long long v38 = unk_1BB873874;
  memset(v39, 0, sizeof(v39));
  long long v33 = xmmword_1BB873824;
  long long v34 = unk_1BB873834;
  long long v35 = xmmword_1BB873844;
  long long v36 = unk_1BB873854;
  long long v31 = DspLib::LoudspeakerModel::Parameters::kDefault;
  long long v32 = xmmword_1BB873814;
  memset(v45, 0, 76);
  long long v42 = xmmword_1BB8738C0;
  long long v43 = unk_1BB8738D0;
  long long v44 = xmmword_1BB8738E0;
  long long v40 = DspLib::LoudspeakerModel::Parameters::kMinimum;
  long long v41 = unk_1BB8738B0;
  *(_OWORD *)((char *)&v45[21] + 4) = xmmword_1BB87399C;
  *(_OWORD *)((char *)&v45[23] + 4) = unk_1BB8739AC;
  memset((char *)&v45[25] + 4, 0, 28);
  *(_OWORD *)((char *)&v45[13] + 4) = xmmword_1BB87395C;
  *(_OWORD *)((char *)&v45[15] + 4) = unk_1BB87396C;
  *(_OWORD *)((char *)&v45[17] + 4) = xmmword_1BB87397C;
  *(_OWORD *)((char *)&v45[19] + 4) = unk_1BB87398C;
  *(_OWORD *)((char *)&v45[9] + 4) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)((char *)&v45[11] + 4) = *(_OWORD *)algn_1BB87394C;
  v45[29] = 1;
  char v46 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  memset(v52, 0, sizeof(v52));
  v53[3] = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, 33);
  memset(v20, 0, sizeof(v20));
  if (a7) {
    float v11 = 0.7;
  }
  else {
    float v11 = 1.4286;
  }
  DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v54, (float *)(a2 + 200), 39);
  DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v54, 1, 48000.0);
  if (*(float *)(a2 + 88) >= 0.5)
  {
    DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v27, (float *)(a2 + 200), 39);
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v27, 1, 48000.0);
  }
  int v12 = 0;
  BOOL v13 = 0;
  double v14 = (float *)v24;
  float v15 = a3;
  while (1)
  {
    DspLib::BassQueen::Algorithm::totalStaticFrequencyResponse(a1, v14, (v25 - (unsigned char *)v14) >> 2, (uint64_t)&v21, 48000.0);
    DspLib::add((float *)v21, (v22 - (unsigned char *)v21) >> 2, *(float *)(*(void *)(a1 + 32) + 12));
    float v16 = *(float *)v21;
    if (*(float *)v21 < 0.0 && fabsf(v16) < 0.1 || !v12 && v16 > 0.0)
    {
LABEL_16:
      float v15 = *(float *)v24;
      goto LABEL_19;
    }
    if (v13 != v16 > 0.0)
    {
      float v11 = sqrtf(1.0 / v11);
      BOOL v13 = v16 > 0.0;
    }
    double v14 = (float *)v24;
    float v17 = v11 * *(float *)v24;
    *(float *)unint64_t v24 = v17;
    if (v17 < a3)
    {
      *double v14 = a3;
      goto LABEL_19;
    }
    if (v17 > a4) {
      break;
    }
    if (--v12 == -100) {
      goto LABEL_16;
    }
  }
  *double v14 = a4;
  float v15 = a4;
LABEL_19:
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)((char *)v20 + 8));
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100](v53);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v52[8]);
  if ((void)v51)
  {
    *((void *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v49[8]);
  if ((void)v48)
  {
    *((void *)&v48 + 1) = v48;
    operator delete((void *)v48);
  }
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100](v80);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v79[8]);
  if ((void)v78)
  {
    *((void *)&v78 + 1) = v78;
    operator delete((void *)v78);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v76[8]);
  if ((void)v75)
  {
    *((void *)&v75 + 1) = v75;
    operator delete((void *)v75);
  }
  if (v21)
  {
    unint64_t v22 = v21;
    operator delete(v21);
  }
  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }
  return v15;
}

void sub_1BB2AFCF0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

float DspLib::BassQueen::Algorithm::makeSRCCoefficients(uint64_t a1, float **a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  std::vector<float>::resize((uint64_t)a2, (10 * *(_DWORD *)(a1 + 5052)) | 1u);
  double v4 = *a2;
  vDSP_Length v5 = a2[1] - *a2;
  unsigned int v6 = *(_DWORD *)(a1 + 5052);
  v9[0] = &unk_1F14A6C50;
  v9[1] = DspLib::makeChebychevWindow;
  void v9[3] = v9;
  float SincWindow = DspLib::makeSincWindow(v4, v5, v6, 0xAu, (uint64_t)v9, 0.6);
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100](v9);
  return SincWindow;
}

void sub_1BB2AFE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::span<float,18446744073709551615ul>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void DspLib::BassQueen::Algorithm::MeteringChain::setParameters(DspLib::BassQueen::Algorithm::MeteringChain *this, const DspLib::LoudspeakerModel::Algorithm *a2)
{
  if (a2 && *((unsigned char *)a2 + 512))
  {
    DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)this + 152, (float *)a2 + 8, 39);
    unint64_t v4 = *((void *)a2 + 2) / *((void *)a2 + 1);
    std::vector<float>::resize((uint64_t)this + 840, v4);
  }
  else
  {
    *((void *)this + 106) = *((void *)this + 105);
  }
}

void DspLib::BassQueen::FilterBankWeights::setParameters(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, float a5, float a6)
{
  *(float *)a1 = a6;
  std::vector<float>::resize(a1 + 40, a3);
  std::vector<float>::resize(a1 + 64, a3);
  std::vector<float>::resize(a1 + 112, a3);
  float v11 = *(float **)(a1 + 112);
  vDSP_Length v12 = (uint64_t)(*(void *)(a1 + 120) - (void)v11) >> 2;
  float v14 = DspLib::dB2Power(v13, -20.0);
  DspLib::fill(v11, v12, v14);
  double v15 = *(double *)(a1 + 8);

  DspLib::ConstantQFilterbank::Analyzer::setParameters((uint64_t *)(a1 + 16), a2, a3, a4, a5, v15);
}

uint64_t DspLib::BassQueen::Algorithm::parametersAreValid(DspLib::BassQueen::Algorithm *this)
{
  return *((unsigned __int8 *)this + 2312);
}

float DspLib::BassQueen::Algorithm::computeMaxExcursion(float *a1, void *a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(float *))(*(void *)a1 + 56))(a1)) {
    return 0.0;
  }
  unint64_t v6 = 0;
  float v7 = 0.0;
  do
  {
    float v8 = a1[1279];
    (*(void (**)(float *))(*(void *)a1 + 56))(a1);
    float v9 = v8 * DspLib::maxMagnitude(*(const float **)(*a2 + 8 * v6), a2[2]);
    if (v7 < v9) {
      float v7 = v9;
    }
    if (a3 == 2)
    {
      float v10 = a1[1280];
      int v11 = (*(uint64_t (**)(float *))(*(void *)a1 + 56))(a1);
      float v12 = v10 * DspLib::maxMagnitude(*(const float **)(*a2 + 8 * (v6 + v11)), a2[2]);
      if (v7 < v12) {
        float v7 = v12;
      }
    }
    ++v6;
  }
  while (v6 < (*(unsigned int (**)(float *))(*(void *)a1 + 56))(a1));
  return v7;
}

void DspLib::BassQueen::Algorithm::processBlock(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v190 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 24)) {
    DspLib::CPUMeasure::start((int8x16_t *)(a1 + 56));
  }
  uint64_t v6 = **a3;
  uint64_t v7 = **a2;
  float v135 = a3;
  if (v6 != v7)
  {
    long long v184 = *(_OWORD *)a2;
    float v185 = a2[2];
    long long v182 = *(_OWORD *)a3;
    double v183 = a3[2];
    DspLib::copy(&v184, &v182);
    a3 = v135;
  }
  if (!*(unsigned char *)(a1 + 2312))
  {
    long long v180 = *(_OWORD *)a3;
    long double v181 = a3[2];
    DspLib::clear(&v180);
    return;
  }
  if (!a3[2]) {
    return;
  }
  unint64_t v118 = (unint64_t)a3[2];
  float v8 = (unsigned char *)(a1 + 4860);
  int v9 = *(unsigned __int8 *)(a1 + 5024);
  float v131 = (unsigned char *)(a1 + 4860);
  if (!v9)
  {
    if (*(unsigned char *)(a1 + 5032))
    {
      long long v178 = *(_OWORD *)a3;
      long double v179 = a3[2];
      DspLib::multiply((uint64_t *)&v178, *(float *)(a1 + 5028));
      a3 = v135;
      float v8 = v131;
    }
    if (v8[165])
    {
      long double v176 = *a3;
      long long v177 = *(_OWORD *)(a3 + 1);
      long long v174 = *(_OWORD *)a3;
      long double v175 = a3[2];
      DspLib::LoudspeakerModel::Algorithm::process(a1 + 928, (long long *)&v176, &v174);
      a3 = v135;
      float v8 = v131;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    DspLib::CPUMeasure::pause((DspLib::CPUMeasure *)(a1 + 56));
    double v172 = *v135;
    long long v173 = *(_OWORD *)(v135 + 1);
    DspLib::BassQueen::Algorithm::MeteringChain::process(a1 + 5160, (uint64_t)&v172);
    DspLib::CPUMeasure::resume((DspLib::CPUMeasure *)(a1 + 56));
    a3 = v135;
    float v8 = v131;
  }
  if (!v8[164])
  {
    if (!v8[166])
    {
      unsigned int v10 = 0;
LABEL_112:
      if (v8[180])
      {
        long long v140 = *(_OWORD *)a3;
        double v141 = a3[2];
        DspLib::multiply((uint64_t *)&v140, *(float *)(a1 + 5036));
        a3 = v135;
      }
      goto LABEL_114;
    }
    unsigned int v11 = *(_DWORD *)(a1 + 5056);
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) == 1) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 4 * (((v12 - 1) >> 2) + 1);
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v115 = (uint64_t)&v115;
    MEMORY[0x1F4188790](v14);
    float v16 = (char *)&v115 - v15;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    MEMORY[0x1F4188790](v17);
    unint64_t v20 = (char *)&v115 - v19;
    if (v18 >= 0x200) {
      size_t v21 = 512;
    }
    else {
      size_t v21 = v18;
    }
    bzero((char *)&v115 - v19, v21);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unint64_t v22 = 0;
      uint64_t v23 = 4 * v13;
      do
      {
        *(void *)&v20[8 * v22++] = v16;
        v16 += v23;
      }
      while (v22 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v25 = *(unsigned int *)(a1 + 5056);
    *(void *)float v171 = v20;
    *(void *)&v171[8] = v24;
    *(void *)&v171[16] = v25;
    float v169 = *v135;
    long long v170 = *(_OWORD *)(v135 + 1);
    DspLib::FIRDecimator::process((void *)(a1 + 1616), &v169, v171);
    v168[0] = *(void *)v171;
    v168[1] = *(void *)&v171[8];
    unint64_t v136 = *(void *)&v171[16];
    v168[2] = *(void *)&v171[16];
    DspLib::BassQueen::FilterBankWeights::compute(a1 + 4864, (uint64_t)v168);
    if (v131[167]) {
      unint64_t v132 = *(unsigned int *)(a1 + 5048);
    }
    else {
      unint64_t v132 = (*(_DWORD *)(a1 + 5056) + *(_DWORD *)(a1 + 5048)) - v136;
    }
    uint64_t v166 = *(void *)v171;
    long long v167 = *(_OWORD *)&v171[8];
    DspLib::MultiChannelCircularDelay::write((char **)(a1 + 4720), &v166);
    uint64_t v26 = v136;
    if (v136 <= 1) {
      uint64_t v26 = 1;
    }
    unint64_t v117 = v26;
    int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    unint64_t v116 = ((v117 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if (v27 == 1) {
      unint64_t v28 = v117;
    }
    else {
      unint64_t v28 = ((v117 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    MEMORY[0x1F4188790](v29);
    long long v31 = (char *)&v115 - v30;
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    MEMORY[0x1F4188790](v32);
    if (v33 >= 0x200) {
      size_t v35 = 512;
    }
    else {
      size_t v35 = v33;
    }
    double v134 = (char *)&v115 - v34;
    bzero((char *)&v115 - v34, v35);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unint64_t v36 = 0;
      uint64_t v37 = 4 * v28;
      do
      {
        *(void *)&v134[8 * v36++] = v31;
        v31 += v37;
      }
      while (v36 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    unsigned int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    unint64_t v39 = v136 + *(unsigned int *)(a1 + 5048);
    v165[0] = v134;
    uint64_t v123 = v38;
    v165[1] = v38;
    v165[2] = v136;
    DspLib::MultiChannelCircularDelay::read((char **)(a1 + 4720), v39, v165);
    if (v132 <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = v132;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) == 1) {
      unint64_t v41 = v40;
    }
    else {
      unint64_t v41 = ((v40 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    MEMORY[0x1F4188790](v42);
    long long v44 = (char *)&v115 - v43;
    uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    MEMORY[0x1F4188790](v45);
    if (v46 >= 0x200) {
      size_t v48 = 512;
    }
    else {
      size_t v48 = v46;
    }
    double v133 = (char *)&v115 - v47;
    bzero((char *)&v115 - v47, v48);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
    {
      unint64_t v49 = 0;
      uint64_t v50 = 4 * v41;
      do
      {
        *(void *)&v133[8 * v49++] = v44;
        v44 += v50;
      }
      while (v49 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
    }
    unsigned int v51 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    unint64_t v52 = *(unsigned int *)(a1 + 5048);
    v164[0] = v133;
    uint64_t v122 = v51;
    v164[1] = v51;
    v164[2] = v132;
    DspLib::MultiChannelCircularDelay::read((char **)(a1 + 4720), v52, v164);
    double v126 = (const DspLib::Biquad::Filter *)(a1 + 4512);
    float v137 = (const DspLib::Biquad::Filter *)(a1 + 3944);
    DspLib::Biquad::Filter::copyStatesFrom((DspLib::Biquad::Filter *)(a1 + 4512), (const DspLib::Biquad::Filter *)(a1 + 3944));
    DSPComplex v119 = (const DspLib::LoudspeakerModel::Algorithm *)(a1 + 2488);
    DspLib::LoudspeakerModel::Algorithm::copyStatesFrom((DspLib::LoudspeakerModel::Algorithm *)(a1 + 2488), (const DspLib::LoudspeakerModel::Algorithm *)(a1 + 1800));
    unint64_t v53 = v136;
    if (v136 <= v132) {
      unint64_t v53 = v132;
    }
    if (v53 <= 1) {
      unint64_t v53 = 1;
    }
    unint64_t v125 = v53;
    unint64_t v124 = ((v53 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    double v129 = (DspLib::Biquad::Filter *)(a1 + 4616);
    uint64_t v127 = a1 + 3936;
    double v128 = (DspLib::LoudspeakerModel::Algorithm *)(a1 + 3176);
    double v130 = (DspLib::BassQueen::MitigationAdaptation *)(a1 + 4792);
    unsigned int v10 = 1;
    double v121 = (const float **)(a1 + 5000);
    uint64x2_t v120 = (void *)(a1 + 5008);
    do
    {
      unint64_t v54 = *(void *)(a1 + 1816);
      unint64_t v55 = v54 / (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v55 * (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) == 1) {
        unint64_t v56 = v125;
      }
      else {
        unint64_t v56 = v124;
      }
      uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      MEMORY[0x1F4188790](v57);
      long long v59 = (char *)&v115 - v58;
      uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      MEMORY[0x1F4188790](v60);
      long long v63 = (char *)&v115 - v62;
      if (v61 >= 0x200) {
        size_t v64 = 512;
      }
      else {
        size_t v64 = v61;
      }
      bzero((char *)&v115 - v62, v64);
      if (v55 * (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        unint64_t v65 = 0;
        unsigned int v66 = 1;
        do
        {
          *(void *)&v63[8 * v65] = &v59[4 * v65 * v56];
          unsigned int v67 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
          unint64_t v65 = v66++;
        }
        while (v55 * v67 > v65);
      }
      unsigned int v68 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      unsigned int v69 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      *(void *)&long long v188 = v134;
      *((void *)&v188 + 1) = v123;
      uint64_t v70 = v69;
      unint64_t v189 = v136;
      *(void *)&long long v186 = v63;
      *((void *)&v186 + 1) = v69;
      unint64_t v187 = v136;
      DspLib::Biquad::Filter::process(v137, &v188, &v186);
      *(void *)&long long v162 = v63;
      *((void *)&v162 + 1) = v70;
      unint64_t v71 = v55 * v68;
      unint64_t v163 = v136;
      *(void *)&long long v160 = v63;
      *((void *)&v160 + 1) = v71;
      unint64_t v161 = v136;
      DspLib::LoudspeakerModel::Algorithm::process(a1 + 1800, &v162, &v160);
      v159[0] = v63;
      v159[1] = v71;
      v159[2] = v136;
      float v72 = DspLib::BassQueen::Algorithm::computeMaxExcursion((float *)a1, v159, v55);
      DspLib::Biquad::Filter::copyStatesFrom(v129, v137);
      DspLib::LoudspeakerModel::Algorithm::copyStatesFrom(v128, (const DspLib::LoudspeakerModel::Algorithm *)(a1 + 1800));
      *(void *)&long long v188 = v133;
      *((void *)&v188 + 1) = v122;
      unint64_t v189 = v132;
      *(void *)&long long v186 = v63;
      *((void *)&v186 + 1) = v70;
      unint64_t v187 = v132;
      DspLib::Biquad::Filter::process(v137, &v188, &v186);
      *(void *)&long long v157 = v63;
      *((void *)&v157 + 1) = v70;
      unint64_t v158 = v132;
      *(void *)&long long v155 = v63;
      *((void *)&v155 + 1) = v71;
      unint64_t v156 = v132;
      DspLib::LoudspeakerModel::Algorithm::process(a1 + 1800, &v157, &v155);
      v154[0] = v63;
      v154[1] = v71;
      v154[2] = v132;
      float v74 = DspLib::BassQueen::Algorithm::computeMaxExcursion((float *)a1, v154, v55);
      if (v72 < v74) {
        float v72 = v74;
      }
      BOOL v75 = !DspLib::isEqual(v73, *(float *)(a1 + 4808), 0.0, 1.0e-20) && v72 <= *(float *)(a1 + 5084);
      if (v72 <= 1.0 && !v75) {
        break;
      }
      DspLib::BassQueen::MitigationAdaptation::update(v130, v72 * *(float *)(a1 + 5080), v10);
      if (*v131) {
        break;
      }
      unint64_t v76 = DspLib::copy(*(void **)(a1 + 4904), (uint64_t)(*(void *)(a1 + 4912) - *(void *)(a1 + 4904)) >> 2, *(void **)(a1 + 5000));
      MEMORY[0x1F4188790](v76);
      DspLib::multiply(*v121, (uint64_t)(*v120 - (void)*v121) >> 2, (float *)((char *)&v115 - v77), *(float *)(a1 + 4808));
      DspLib::ConstantQFilterbank::Modifier::setGains(v127);
      DspLib::Biquad::Filter::copyStatesFrom(v137, v126);
      DspLib::LoudspeakerModel::Algorithm::copyStatesFrom((DspLib::LoudspeakerModel::Algorithm *)(a1 + 1800), v119);
      if (DspLib::BassQueen::MitigationAdaptation::mitigationIsAtLimit(v130)) {
        break;
      }
      ++v10;
    }
    while (v10 != 30);
    DspLib::Biquad::Filter::copyStatesFrom(v137, v129);
    DspLib::LoudspeakerModel::Algorithm::copyStatesFrom((DspLib::LoudspeakerModel::Algorithm *)(a1 + 1800), v128);
    float v78 = *(float *)(a1 + 4808);
    float v79 = *(float *)(a1 + 5136);
    if (v78 >= v79)
    {
      if (v78 <= v79)
      {
LABEL_85:
        long long v188 = *(_OWORD *)v171;
        unint64_t v189 = v136;
        long long v186 = *(_OWORD *)v171;
        unint64_t v187 = v136;
        DspLib::MultiChannelCircularDelay::process((uint64_t *)(a1 + 4744), &v188, &v186);
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) == 1) {
          unint64_t v80 = v117;
        }
        else {
          unint64_t v80 = v116;
        }
        uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        MEMORY[0x1F4188790](v81);
        unint64_t v83 = (char *)&v115 - v82;
        uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        MEMORY[0x1F4188790](v84);
        int v87 = (char *)&v115 - v86;
        if (v85 >= 0x200) {
          size_t v88 = 512;
        }
        else {
          size_t v88 = v85;
        }
        bzero((char *)&v115 - v86, v88);
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v89 = 0;
          uint64_t v90 = 4 * v80;
          do
          {
            *(void *)&v87[8 * v89++] = v83;
            v83 += v90;
          }
          while (v89 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        unsigned int v92 = v91;
        uint64_t v93 = (uint64_t)(*(void *)(a1 + 4912) - *(void *)(a1 + 4904)) >> 2;
        MEMORY[0x1F4188790](v91);
        float v95 = (char *)&v115 - v94;
        DspLib::multiply(*(const float **)(a1 + 5000), (uint64_t)(*(void *)(a1 + 5008) - *(void *)(a1 + 5000)) >> 2, (float *)((char *)&v115 - v94), *(float *)(a1 + 5136));
        long long v153 = *(_OWORD *)&v171[8];
        v151[0] = v87;
        v151[1] = v92;
        v151[2] = v136;
        uint64_t v152 = *(void *)v171;
        if (v131[167]) {
          float v96 = 0;
        }
        else {
          float v96 = v126;
        }
        DspLib::ConstantQFilterbank::Modifier::apply(v127, (uint64_t)&v152, (uint64_t)v151, (uint64_t)v95, v93, (uint64_t)v96);
        if (*(unsigned char *)(a1 + 3864))
        {
          *(void *)&long long v188 = v87;
          *((void *)&v188 + 1) = v92;
          unint64_t v189 = v136;
          *(void *)&long long v186 = v87;
          *((void *)&v186 + 1) = v92;
          unint64_t v187 = v136;
          DspLib::Biquad::Filter::process((void *)(a1 + 3864), &v188, &v186);
        }
        long long v149 = *(_OWORD *)v171;
        uint64_t v150 = *(void *)&v171[16];
        v148[0] = v87;
        v148[1] = v92;
        v148[2] = v136;
        DspLib::subtract(&v149, v148);
        long long v97 = v135[1];
        unint64_t v98 = (unint64_t)v135[2];
        *(void *)&long long v188 = *v135;
        *((void *)&v188 + 1) = v97;
        unint64_t v189 = v98;
        *(void *)&long long v186 = v188;
        *((void *)&v186 + 1) = v97;
        unint64_t v187 = v98;
        DspLib::MultiChannelCircularDelay::process((uint64_t *)(a1 + 4768), &v188, &v186);
        if (v118 <= 1) {
          uint64_t v99 = 1;
        }
        else {
          uint64_t v99 = v118;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) == 1) {
          unint64_t v100 = v99;
        }
        else {
          unint64_t v100 = ((v99 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        }
        uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        MEMORY[0x1F4188790](v101);
        float v103 = (char *)&v115 - v102;
        uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        MEMORY[0x1F4188790](v104);
        double v107 = (char *)&v115 - v106;
        if (v105 >= 0x200) {
          size_t v108 = 512;
        }
        else {
          size_t v108 = v105;
        }
        bzero((char *)&v115 - v106, v108);
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
        {
          unint64_t v109 = 0;
          uint64_t v110 = 4 * v100;
          do
          {
            *(void *)&v107[8 * v109++] = v103;
            v103 += v110;
          }
          while (v109 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
        }
        uint64_t v111 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1);
        long long v147 = *(_OWORD *)&v171[8];
        v145[0] = v107;
        v145[1] = v111;
        v145[2] = v118;
        uint64_t v146 = *(void *)v171;
        DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 1696), &v146, v145);
        long long v143 = *(_OWORD *)v135;
        double v144 = v135[2];
        v142[0] = v107;
        v142[1] = v111;
        v142[2] = v118;
        DspLib::subtract(&v143, v142);
        a3 = v135;
        float v8 = v131;
        goto LABEL_112;
      }
      float v78 = v79 + (float)((float)(v78 - v79) * *(float *)(a1 + 5124));
    }
    *(float *)(a1 + 5136) = v78;
    goto LABEL_85;
  }
  unsigned int v10 = 0;
LABEL_114:
  if (*(unsigned char *)(a1 + 24))
  {
    DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(a1 + 56), (unint64_t)a3[2], *(double *)(a1 + 16));
    uint64_t v112 = v10;
    if (*(void *)(a1 + 5144) > (unint64_t)v10) {
      uint64_t v112 = *(void *)(a1 + 5144);
    }
    *(void *)(a1 + 5144) = v112;
    float v113 = *(double *)(a1 + 5072);
    float v114 = expf(-1.0 / (float)((float)(v113 * 1000.0) / 1000.0));
    *(float *)(a1 + 5152) = (float)((float)(1.0 - v114) * (float)v10) + (float)(*(float *)(a1 + 5152) * v114);
    float v138 = *v135;
    long long v139 = *(_OWORD *)(v135 + 1);
    DspLib::BassQueen::Algorithm::MeteringChain::process(a1 + 6024, (uint64_t)&v138);
  }
}

uint64_t DspLib::LoudspeakerModel::Algorithm::process(uint64_t result, long long *a2, long long *a3)
{
  if (*(unsigned char *)(result + 512))
  {
    long long v6 = *a2;
    uint64_t v7 = *((void *)a2 + 2);
    long long v4 = *a3;
    uint64_t v5 = *((void *)a3 + 2);
    uint64_t v3 = *(void *)(result + 680);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)v3 + 48))(v3, &v6, &v4);
  }
  return result;
}

void DspLib::BassQueen::Algorithm::MeteringChain::process(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v30 = *(_OWORD *)a2;
  uint64_t v31 = *(void *)(a2 + 16);
  DspLib::AudioMeter::Algorithm::analyze((double *)(a1 + 8), (uint64_t *)&v30);
  if (*(unsigned char *)(a1 + 664))
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    if (*(void *)(a1 + 168) == 1) {
      unint64_t v6 = v5;
    }
    else {
      unint64_t v6 = ((v5 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    uint64_t v7 = MEMORY[0x1F4188790](v4);
    int v9 = (char *)&v25 - v8;
    unint64_t v10 = *(void *)(a1 + 168);
    MEMORY[0x1F4188790](v7);
    uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v11 >= 0x200) {
      size_t v13 = 512;
    }
    else {
      size_t v13 = v11;
    }
    bzero((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    if (v10)
    {
      uint64_t v14 = 0;
      do
      {
        *(void *)&v12[8 * v14++] = v9;
        v9 += 4 * v6;
      }
      while (v10 > v14);
    }
    vDSP_Length v15 = *(void *)(a2 + 16);
    long long v28 = *(_OWORD *)a2;
    vDSP_Length v29 = v15;
    *(void *)&long long v26 = v12;
    *((void *)&v26 + 1) = v10;
    vDSP_Length v27 = v15;
    DspLib::LoudspeakerModel::Algorithm::process(a1 + 152, &v28, &v26);
    uint64_t v16 = *(void *)(a1 + 848);
    uint64_t v17 = *(void *)(a1 + 840);
    if (v16 != v17)
    {
      uint64_t v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = *(void *)(a2 + 8);
      do
      {
        if (v20)
        {
          uint64_t v21 = 0;
          unsigned int v22 = 1;
          do
          {
            float v23 = DspLib::maxMagnitude(*(const float **)&v12[8 * v21 + 8 * v20 * v18], v15);
            if (*(float *)(v17 + 4 * v18) >= v23) {
              float v23 = *(float *)(v17 + 4 * v18);
            }
            *(float *)(v17 + 4 * v18) = v23;
            uint64_t v21 = v22;
            unint64_t v20 = *(void *)(a2 + 8);
          }
          while (v20 > v22++);
          uint64_t v16 = *(void *)(a1 + 848);
          uint64_t v17 = *(void *)(a1 + 840);
        }
        uint64_t v18 = ++v19;
      }
      while (v19 < (unint64_t)((v16 - v17) >> 2));
    }
  }
}

void DspLib::BassQueen::FilterBankWeights::compute(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    v21[1] = v21;
    MEMORY[0x1F4188790](a1);
    unint64_t v6 = (float *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v7 = *((void *)v4 + 1);
    if (v7 < 2)
    {
      unint64_t v6 = **(float ***)v4;
      uint64_t v8 = *((void *)v4 + 2);
    }
    else
    {
      long long v22 = *v4;
      uint64_t v23 = *((void *)v4 + 2);
      DspLib::sum((uint64_t)&v22, v6, v2);
      DspLib::multiply(v6, v2, 1.0 / (float)v7);
      uint64_t v8 = v2;
    }
    DspLib::clear(*(float **)(a1 + 40), (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
    float v9 = exp(-1.0 / (*(double *)(a1 + 8) * (*(float *)a1 * 1000.0 / (double)v2) / 1000.0));
    DspLib::multiply(*(float **)(a1 + 64), (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 2, v9);
    unint64_t v10 = *(float **)(a1 + 40);
    if (*(void *)(a1 + 48) == (void)v10)
    {
      vDSP_Length v18 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(const float **)(a1 + 88);
      unsigned int v13 = 1;
      do
      {
        DspLib::Biquad::Filter::process((void *)(*(void *)(a1 + 16) + 104 * v11), (uint64_t)v6, v8, (uint64_t)v12, v2);
        float v14 = DspLib::maxMagnitude(v12, v2);
        uint64_t v15 = *(void *)(a1 + 64);
        float v16 = v14 * v14;
        if (*(float *)(v15 + 4 * v11) >= v16) {
          float v16 = *(float *)(v15 + 4 * v11);
        }
        *(float *)(v15 + 4 * v11) = v16;
        unint64_t v10 = *(float **)(a1 + 40);
        uint64_t v17 = *(void *)(a1 + 48);
        v10[v11] = v16 + *(float *)(*(void *)(a1 + 112) + 4 * v11);
        uint64_t v11 = v13;
        vDSP_Length v18 = (v17 - (uint64_t)v10) >> 2;
      }
      while (v18 > v13++);
    }
    float v20 = DspLib::sum(v10, v18);
    DspLib::multiply(v10, v18, 1.0 / v20);
  }
}

void DspLib::LoudspeakerModel::Algorithm::copyStatesFrom(DspLib::LoudspeakerModel::Algorithm *this, const DspLib::LoudspeakerModel::Algorithm *a2)
{
  DspLib::Biquad::Filter::copyStatesFrom((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 512), (const DspLib::LoudspeakerModel::Algorithm *)((char *)a2 + 512));
  if (*((unsigned char *)this + 584))
  {
    DspLib::Biquad::Filter::copyStatesFrom((DspLib::LoudspeakerModel::Algorithm *)((char *)this + 584), (const DspLib::LoudspeakerModel::Algorithm *)((char *)a2 + 584));
  }
}

void DspLib::BassQueen::MitigationAdaptation::update(DspLib::BassQueen::MitigationAdaptation *this, float a2, unsigned int a3)
{
  if (*(unsigned char *)this)
  {
    float v4 = a2;
    if (a3 == 1) {
      *((_DWORD *)this + 6) = 1065353216;
    }
    float v6 = DspLib::sign(0, (float)(a2 - *((float *)this + 16)));
    BOOL v7 = 0;
    *((float *)this + 15) = v6;
    *((float *)this + 16) = v4;
    if (a3 >= 3)
    {
      BOOL v7 = v6 > 0.0;
      if (*((float *)this + 14) >= 0.0) {
        BOOL v7 = 0;
      }
    }
    *((unsigned char *)this + 68) = v7;
    if (v4 < 1.0 && (float)((float)(*((float *)this + 7) / -100.0) + 1.0) < v4) {
      float v4 = (float)(*((float *)this + 7) / -100.0) + 1.0;
    }
    if (v4 > 1.0 && v4 < (float)((float)(*((float *)this + 7) / 100.0) + 1.0)) {
      float v4 = (float)(*((float *)this + 7) / 100.0) + 1.0;
    }
    if (!v7)
    {
      float v8 = *((float *)this + 4);
      *((float *)this + 5) = v8;
      float v9 = *((float *)this + 3) * *((float *)this + 6);
      float v10 = v8 + (float)(v9 * logf(v4));
      *((float *)this + 4) = v10;
      int v15 = 0;
      uint64_t v11 = (_DWORD *)((char *)this + 8);
      uint64_t v12 = (char *)&v15;
      if (v10 <= 0.0) {
        uint64_t v12 = (char *)this + 16;
      }
      if (v10 >= *((float *)this + 2)) {
        uint64_t v11 = v12;
      }
      *((_DWORD *)this + 4) = *v11;
    }
    float v13 = DspLib::sign(0, (float)(1.0 - v4));
    *((float *)this + 14) = v13;
    if (*((float *)this + 12) != v13)
    {
      *((float *)this + 6) = *((float *)this + 6) * 0.7;
      *((float *)this + 12) = v13;
    }
  }
  else
  {
    float v14 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/BassQueen/dsp/DspLibMitigationAdaptation.h");
    printf("DSP Sound assertion in %s at line %d\n", v14, 64);
    ++DspLibDebug::mAssertCounter;
  }
}

BOOL DspLib::BassQueen::MitigationAdaptation::mitigationIsAtLimit(DspLib::BassQueen::MitigationAdaptation *this)
{
  BOOL isEqual = DspLib::isEqual(this, *((float *)this + 4), *((float *)this + 2), 1.0e-20);
  if (isEqual) {
    return 1;
  }
  double v4 = *((float *)this + 4);

  return DspLib::isEqual((DspLib *)isEqual, v4, 0.0, 1.0e-20);
}

float DspLib::BassQueen::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  DspLib::clear((float *)a2, __N);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 192))(a1))
  {
    DspLib::BassQueen::Algorithm::MeteringChain::status(a1 + 5160, (float *)a2, 0x20uLL, (float *)(a2 + 428), (float *)(a2 + 432));
    DspLib::BassQueen::Algorithm::MeteringChain::status(a1 + 6024, (float *)(a2 + 128), 0x20uLL, (float *)(a2 + 436), (float *)(a2 + 440));
    *(float *)(a2 + 256) = (float)*(unint64_t *)(a1 + 5144);
    *(_DWORD *)(a2 + 260) = *(_DWORD *)(a1 + 5152);
    if (!*(unsigned char *)(a1 + 5024))
    {
      uint64_t v6 = *(void *)(a1 + 5008);
      uint64_t v7 = *(void *)(a1 + 5000);
      uint64_t v8 = v6 - v7;
      if (v6 != v7)
      {
        uint64_t v9 = 0;
        unint64_t v10 = v8 >> 2;
        uint64_t v11 = *(void *)(a1 + 4904);
        do
        {
          *(float *)(a2 + 4 * (v9 + 66)) = *(float *)(v7 + 4 * v9) * *(float *)(a1 + 5136);
          *(_DWORD *)(a2 + 4 * (v9 + 86)) = *(_DWORD *)(v11 + 4 * v9);
          ++v9;
        }
        while (v10 > v9);
      }
    }
    float result = *(float *)(a1 + 5136);
    *(float *)(a2 + 424) = result;
  }
  return result;
}

void DspLib::BassQueen::Algorithm::MeteringChain::status(uint64_t a1, float *a2, vDSP_Length a3, float *a4, float *a5)
{
  DspLib::AudioMeter::Algorithm::status((void *)(a1 + 8), a2, a3);
  uint64_t v8 = *(float **)(a1 + 848);
  uint64_t v9 = *(float **)(a1 + 840);
  if (v8 == v9)
  {
    float v10 = -100.0;
    uint64_t v11 = *(void *)(a1 + 848);
  }
  else
  {
    float v10 = DspLib::amp2dBSafe((DspLib *)v8, *v9, 0.000001);
    uint64_t v11 = *(void *)(a1 + 848);
    uint64_t v8 = *(float **)(a1 + 840);
  }
  *a4 = v10;
  uint64_t v12 = v11 - (void)v8;
  if (v12 == 8)
  {
    float v13 = DspLib::amp2dBSafe((DspLib *)v8, v8[1], 0.000001);
    uint64_t v8 = *(float **)(a1 + 840);
    uint64_t v12 = *(void *)(a1 + 848) - (void)v8;
  }
  else
  {
    float v13 = -100.0;
  }
  *a5 = v13;
  float v14 = *(float *)a1;

  DspLib::multiply(v8, v12 >> 2, v14);
}

void DspLib::BassQueen::Algorithm::totalStaticFrequencyResponse(uint64_t a1, const float *a2, unint64_t a3, uint64_t a4, double a5)
{
  v68[4] = *MEMORY[0x1E4F143B8];
  std::vector<float>::resize(a4, a3);
  float v10 = (float *)(*(void *)(a1 + 32) + 200);
  v42[0] = 0;
  uint64_t v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  long long v52 = xmmword_1BB873864;
  long long v53 = unk_1BB873874;
  memset(v54, 0, sizeof(v54));
  long long v48 = xmmword_1BB873824;
  long long v49 = unk_1BB873834;
  long long v50 = xmmword_1BB873844;
  long long v51 = unk_1BB873854;
  long long v46 = DspLib::LoudspeakerModel::Parameters::kDefault;
  long long v47 = xmmword_1BB873814;
  memset(v60, 0, 76);
  long long v57 = xmmword_1BB8738C0;
  long long v58 = unk_1BB8738D0;
  long long v59 = xmmword_1BB8738E0;
  long long v55 = DspLib::LoudspeakerModel::Parameters::kMinimum;
  long long v56 = unk_1BB8738B0;
  memset((char *)&v60[25] + 4, 0, 28);
  *(_OWORD *)((char *)&v60[13] + 4) = xmmword_1BB87395C;
  *(_OWORD *)((char *)&v60[15] + 4) = unk_1BB87396C;
  *(_OWORD *)((char *)&v60[17] + 4) = xmmword_1BB87397C;
  memset((char *)&v60[19] + 4, 0, 48);
  *(_OWORD *)((char *)&v60[9] + 4) = DspLib::LoudspeakerModel::Parameters::kMaximum;
  *(_OWORD *)((char *)&v60[11] + 4) = *(_OWORD *)algn_1BB87394C;
  v60[29] = 0;
  char v61 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  memset(v67, 0, sizeof(v67));
  v68[3] = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  memset(v64, 0, 33);
  DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v42, v10, 39);
  DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v42, 1, a5);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  DspLib::LoudspeakerModel::Algorithm::frequencyResponse((uint64_t)v42, a2, a3, &v14);
  uint64_t v11 = *(void **)v14;
  uint64_t v12 = (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) < 2) {
    DspLib::copy(v11, v12, *(void **)a4);
  }
  else {
    DspLib::vmax((const float *)v11, v12, *(const float **)(v14 + 24), (uint64_t)(*(void *)(v14 + 32) - *(void *)(v14 + 24)) >> 2, *(float **)a4);
  }
  if (*(unsigned char *)(a1 + 5025))
  {
    LOBYTE(v18[0]) = 0;
    memset(&v18[1], 0, 24);
    long long v26 = unk_1BB873874;
    memset(v27, 0, sizeof(v27));
    long long v21 = xmmword_1BB873824;
    long long v22 = unk_1BB873834;
    long long v23 = xmmword_1BB873844;
    long long v24 = unk_1BB873854;
    long long v25 = xmmword_1BB873864;
    long long v19 = DspLib::LoudspeakerModel::Parameters::kDefault;
    long long v20 = xmmword_1BB873814;
    memset(v33, 0, 76);
    long long v30 = xmmword_1BB8738C0;
    long long v31 = unk_1BB8738D0;
    long long v32 = xmmword_1BB8738E0;
    long long v28 = DspLib::LoudspeakerModel::Parameters::kMinimum;
    long long v29 = unk_1BB8738B0;
    memset((char *)&v33[25] + 4, 0, 28);
    *(_OWORD *)((char *)&v33[13] + 4) = xmmword_1BB87395C;
    *(_OWORD *)((char *)&v33[15] + 4) = unk_1BB87396C;
    *(_OWORD *)((char *)&v33[17] + 4) = xmmword_1BB87397C;
    memset((char *)&v33[19] + 4, 0, 48);
    *(_OWORD *)((char *)&v33[9] + 4) = DspLib::LoudspeakerModel::Parameters::kMaximum;
    *(_OWORD *)((char *)&v33[11] + 4) = *(_OWORD *)algn_1BB87394C;
    v33[29] = 1;
    char v34 = 0;
    long long v38 = 0u;
    long long __p = 0u;
    memset(v40, 0, sizeof(v40));
    v41[3] = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    memset(v37, 0, 33);
    DspLib::LoudspeakerModel::Algorithm::setParameters((uint64_t)v18, v10, 39);
    DspLib::LoudspeakerModel::Algorithm::initialize((DspLib::LoudspeakerModel::Algorithm *)v18, 1, a5);
    memset(v13, 0, sizeof(v13));
    DspLib::LoudspeakerModel::Algorithm::frequencyResponse((uint64_t)v18, a2, a3, v13);
    DspLib::add(*(float **)a4, (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2, *(const float **)v13[0]);
    uint64_t v17 = (void **)v13;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
    std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100](v41);
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v40[8]);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v37[8]);
    if ((void)v36)
    {
      *((void *)&v36 + 1) = v36;
      operator delete((void *)v36);
    }
  }
  v18[0] = (void **)&v14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v18);
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100](v68);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v67[8]);
  if ((void)v66)
  {
    *((void *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)&v64[8]);
  if ((void)v63)
  {
    *((void *)&v63 + 1) = v63;
    operator delete((void *)v63);
  }
}

void sub_1BB2B219C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void DspLib::BassQueen::Algorithm::~Algorithm(DspLib::BassQueen::Algorithm *this)
{
  DspLib::BassQueen::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void **v22;

  *(void *)this = &unk_1F14A6E98;
  DspLib::BassQueen::Algorithm::MeteringChain::~MeteringChain((DspLib::BassQueen::Algorithm *)((char *)this + 6024));
  DspLib::BassQueen::Algorithm::MeteringChain::~MeteringChain((DspLib::BassQueen::Algorithm *)((char *)this + 5160));
  unint64_t v2 = (void *)*((void *)this + 636);
  if (v2)
  {
    *((void *)this + 637) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 625);
  if (v3)
  {
    *((void *)this + 626) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 622);
  if (v4)
  {
    *((void *)this + 623) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 619);
  if (v5)
  {
    *((void *)this + 620) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 616);
  if (v6)
  {
    *((void *)this + 617) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 613);
  if (v7)
  {
    *((void *)this + 614) = v7;
    operator delete(v7);
  }
  long long v22 = (void **)((char *)this + 4880);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v22);
  long long v22 = (void **)((char *)this + 4768);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v22);
  long long v22 = (void **)((char *)this + 4744);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v22);
  long long v22 = (void **)((char *)this + 4720);
  std::vector<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::__destroy_vector::operator()[abi:ne180100](&v22);
  long long v22 = (void **)((char *)this + 4696);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 4664));
  uint64_t v8 = (void *)*((void *)this + 580);
  if (v8)
  {
    *((void *)this + 581) = v8;
    operator delete(v8);
  }
  long long v22 = (void **)((char *)this + 4592);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 4560));
  uint64_t v9 = (void *)*((void *)this + 567);
  if (v9)
  {
    *((void *)this + 568) = v9;
    operator delete(v9);
  }
  DspLib::ConstantQFilterbank::Modifier::~Modifier((DspLib::BassQueen::Algorithm *)((char *)this + 3936));
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3912));
  float v10 = (void *)*((void *)this + 486);
  if (v10)
  {
    *((void *)this + 487) = v10;
    operator delete(v10);
  }
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100]((void *)this + 479);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3808));
  uint64_t v11 = (void *)*((void *)this + 473);
  if (v11)
  {
    *((void *)this + 474) = v11;
    operator delete(v11);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3736));
  uint64_t v12 = (void *)*((void *)this + 464);
  if (v12)
  {
    *((void *)this + 465) = v12;
    operator delete(v12);
  }
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100]((void *)this + 393);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3120));
  float v13 = (void *)*((void *)this + 387);
  if (v13)
  {
    *((void *)this + 388) = v13;
    operator delete(v13);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 3048));
  uint64_t v14 = (void *)*((void *)this + 378);
  if (v14)
  {
    *((void *)this + 379) = v14;
    operator delete(v14);
  }
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100]((void *)this + 307);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 2432));
  uint64_t v15 = (void *)*((void *)this + 301);
  if (v15)
  {
    *((void *)this + 302) = v15;
    operator delete(v15);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 2360));
  uint64_t v16 = (void *)*((void *)this + 292);
  if (v16)
  {
    *((void *)this + 293) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 222);
  if (v17)
  {
    *((void *)this + 223) = v17;
    operator delete(v17);
  }
  long long v22 = (void **)((char *)this + 1744);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  long long v22 = (void **)((char *)this + 1712);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  long long v22 = (void **)((char *)this + 1664);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v22);
  vDSP_Length v18 = (void *)*((void *)this + 203);
  if (v18)
  {
    *((void *)this + 204) = v18;
    operator delete(v18);
  }
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100]((void *)this + 198);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 1560));
  long long v19 = (void *)*((void *)this + 192);
  if (v19)
  {
    *((void *)this + 193) = v19;
    operator delete(v19);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm *)((char *)this + 1488));
  long long v20 = (void *)*((void *)this + 183);
  if (v20)
  {
    *((void *)this + 184) = v20;
    operator delete(v20);
  }
  *(void *)this = &unk_1F14A87D8;
  long long v21 = (void *)*((void *)this + 4);
  if (v21)
  {
    *((void *)this + 5) = v21;
    operator delete(v21);
  }
}

double DspLib::AlgorithmBase::tailTimeSamples(DspLib::AlgorithmBase *this)
{
  return (*(double (**)(DspLib::AlgorithmBase *))(*(void *)this + 64))(this)
       + ceil(*((double *)this + 2) * 0.001);
}

uint64_t DspLib::AlgorithmBase::numParameters(DspLib::AlgorithmBase *this)
{
  return (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2;
}

float DspLib::AlgorithmBase::parameter(DspLib::AlgorithmBase *this, uint64_t a2)
{
  return *(float *)(*((void *)this + 4) + 4 * a2);
}

float DspLib::BassQueen::Algorithm::parameterBounds(DspLib::BassQueen::Algorithm *this, uint64_t a2)
{
  return *((float *)this + a2 + 54);
}

void std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::__destroy_at[abi:ne180100]<DspLib::RMS,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DspLib::BassQueen::Algorithm::MeteringChain::~MeteringChain(DspLib::BassQueen::Algorithm::MeteringChain *this)
{
  unint64_t v2 = (void *)*((void *)this + 105);
  if (v2)
  {
    *((void *)this + 106) = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100]((void *)this + 101);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm::MeteringChain *)((char *)this + 784));
  uint64_t v3 = (void *)*((void *)this + 95);
  if (v3)
  {
    *((void *)this + 96) = v3;
    operator delete(v3);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::BassQueen::Algorithm::MeteringChain *)((char *)this + 712));
  uint64_t v4 = (void *)*((void *)this + 86);
  if (v4)
  {
    *((void *)this + 87) = v4;
    operator delete(v4);
  }
  uint64_t v7 = (void **)((char *)this + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void **)((char *)this + 48);
  std::vector<DspLib::RMS>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::Biquad::SetupWrapper *)(a1 + 48));
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void DspLib::ConstantQFilterbank::Modifier::~Modifier(DspLib::ConstantQFilterbank::Modifier *this)
{
  unint64_t v2 = (void *)*((void *)this + 69);
  if (v2)
  {
    *((void *)this + 70) = v2;
    operator delete(v2);
  }
  float v10 = (void **)((char *)this + 528);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v3 = (void *)*((void *)this + 62);
  if (v3)
  {
    *((void *)this + 63) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 57);
  if (v4)
  {
    *((void *)this + 58) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 54);
  if (v5)
  {
    *((void *)this + 55) = v5;
    operator delete(v5);
  }
  float v10 = (void **)((char *)this + 400);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 368));
  uint64_t v6 = (void *)*((void *)this + 43);
  if (v6)
  {
    *((void *)this + 44) = v6;
    operator delete(v6);
  }
  float v10 = (void **)((char *)this + 296);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 264));
  uint64_t v7 = (void *)*((void *)this + 30);
  if (v7)
  {
    *((void *)this + 31) = v7;
    operator delete(v7);
  }
  float v10 = (void **)((char *)this + 192);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 160));
  uint64_t v8 = (void *)*((void *)this + 17);
  if (v8)
  {
    *((void *)this + 18) = v8;
    operator delete(v8);
  }
  float v10 = (void **)((char *)this + 88);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::ConstantQFilterbank::Modifier *)((char *)this + 56));
  uint64_t v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
}

void *std::__function::__value_func<void ()(DspLib::MultiSpan<float const>,DspLib::MultiSpan<float>)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<DspLib::CircularDelay>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          uint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<DspLib::CircularDelay>::__append(a1, v5);
  }
}

void std::vector<DspLib::CircularDelay>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<vp::vx::io::Node,vp::Allocator_Delete<vp::vx::io::Node>>>>(v4, v12);
    }
    else {
      float v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[32 * v10];
    uint64_t v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    uint64_t v16 = &v15[32 * a2];
    std::vector<DspLib::CircularDelay>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1BB2B2820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::CircularDelay>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>,std::reverse_iterator<DspLib::CircularDelay*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *((_OWORD *)a3 - 2);
      a3 -= 4;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = a3[2];
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      *(void *)(v7 - 8) = a3[3];
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::CircularDelay>,std::reverse_iterator<DspLib::CircularDelay*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter>,std::reverse_iterator<DspLib::PeakPowerGuard::AdmittanceFilterCoeffSet::FIRfilter*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

double DspLib::NotchFilterBank::FilterBank::FilterBank(DspLib::NotchFilterBank::FilterBank *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::NotchFilterBank::Parameters::kDefault, 0x10uLL, (uint64_t)&DspLib::NotchFilterBank::Parameters::kMinimum, 16, (uint64_t)&DspLib::NotchFilterBank::Parameters::kMaximum, 16);
  *(void *)uint64_t v1 = &unk_1F14A6FB0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 296) = 0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 496) = 1065353216;
  *(void *)(v1 + 532) = 0x3F80000000000000;
  *(void *)(v1 + 520) = 0;
  *(_OWORD *)(v1 + 504) = 0u;
  *(unsigned char *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(void *)(v1 + 560) = 0;
  *(_OWORD *)(v1 + 544) = 0u;
  *(unsigned char *)(v1 + 568) = 0;
  *(void *)(v1 + 672) = 0x447A000000000017;
  double result = 0.0078125;
  *(void *)(v1 + 680) = 0x3F80000000000000;
  return result;
}

void DspLib::NotchFilterBank::FilterBank::~FilterBank(DspLib::NotchFilterBank::FilterBank *this)
{
  *(void *)this = &unk_1F14A6FB0;
  DspLib::NotchFilterBank::FilterBank::cleanUp(this);
  *((unsigned char *)this + 8) = 0;
  long long v13 = (void **)((char *)this + 648);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::NotchFilterBank::FilterBank *)((char *)this + 616));
  unint64_t v2 = (void *)*((void *)this + 74);
  if (v2)
  {
    *((void *)this + 75) = v2;
    operator delete(v2);
  }
  long long v13 = (void **)((char *)this + 544);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v13);
  long long v13 = (void **)((char *)this + 504);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v3 = (void *)*((void *)this + 59);
  if (v3)
  {
    *((void *)this + 60) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 56);
  if (v4)
  {
    *((void *)this + 57) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 53);
  if (v5)
  {
    *((void *)this + 54) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 50);
  if (v6)
  {
    *((void *)this + 51) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 47);
  if (v7)
  {
    *((void *)this + 48) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)this + 44);
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 41);
  if (v9)
  {
    *((void *)this + 42) = v9;
    operator delete(v9);
  }
  long long v13 = (void **)((char *)this + 304);
  std::vector<DspLib::Biquad::ParametricFilter>::__destroy_vector::operator()[abi:ne180100](&v13);
  long long v13 = (void **)((char *)this + 264);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v10 = (void *)*((void *)this + 30);
  if (v10)
  {
    *((void *)this + 31) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 27);
  if (v11)
  {
    *((void *)this + 28) = v11;
    operator delete(v11);
  }
  *(void *)this = &unk_1F14A87D8;
  char v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 5) = v12;
    operator delete(v12);
  }
}

{
  uint64_t vars8;

  DspLib::NotchFilterBank::FilterBank::~FilterBank(this);

  JUMPOUT(0x1C185D370);
}

uint64_t DspLib::NotchFilterBank::FilterBank::initialize(DspLib::NotchFilterBank::FilterBank *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if (v4)
  {
    if ((*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this) >= 0x41)
    {
      uint64_t v44 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      int v45 = 35;
    }
    else
    {
      unint64_t v5 = *((unsigned int *)this + 73);
      if (v5)
      {
        unsigned int v46 = v4;
        *((void *)this + 84) = 0x447A000000000000;
        *((_DWORD *)this + 170) = 0;
        std::vector<float>::resize((uint64_t)this + 376, v5);
        std::vector<float>::resize((uint64_t)this + 400, *((unsigned int *)this + 73));
        std::vector<float>::resize((uint64_t)this + 424, *((unsigned int *)this + 73));
        std::vector<float>::resize((uint64_t)this + 448, *((unsigned int *)this + 73));
        std::vector<float>::resize((uint64_t)this + 472, *((unsigned int *)this + 73));
        DspLib::fill(*((float **)this + 47), (uint64_t)(*((void *)this + 48) - *((void *)this + 47)) >> 2, 1000.0);
        DspLib::fill(*((float **)this + 50), (uint64_t)(*((void *)this + 51) - *((void *)this + 50)) >> 2, 1000.0);
        DspLib::clear(*((float **)this + 53), (uint64_t)(*((void *)this + 54) - *((void *)this + 53)) >> 2);
        DspLib::fill(*((float **)this + 56), (uint64_t)(*((void *)this + 57) - *((void *)this + 56)) >> 2, 1.0);
        DspLib::clear(*((float **)this + 59), (uint64_t)(*((void *)this + 60) - *((void *)this + 59)) >> 2);
        uint64_t v6 = *((void *)this + 63);
        for (uint64_t i = *((void *)this + 64); i != v6; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i))
          i -= 104;
        *((void *)this + 64) = v6;
        if (*((_DWORD *)this + 73))
        {
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          uint64_t v10 = (void *)((char *)this + 504);
          do
          {
            unint64_t v11 = *((void *)this + 64);
            unint64_t v12 = *((void *)this + 65);
            if (v11 >= v12)
            {
              uint64_t v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v11 - *v10) >> 3);
              unint64_t v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) > 0x276276276276276) {
LABEL_53:
              }
                std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
              unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - *v10) >> 3);
              if (2 * v16 > v15) {
                unint64_t v15 = 2 * v16;
              }
              if (v16 >= 0x13B13B13B13B13BLL) {
                unint64_t v17 = 0x276276276276276;
              }
              else {
                unint64_t v17 = v15;
              }
              long long v51 = (char *)this + 520;
              if (v17) {
                uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>((uint64_t)this + 520, v17);
              }
              else {
                uint64_t v18 = 0;
              }
              long long v19 = &v18[104 * v14];
              long long v47 = v18;
              long long v48 = v19;
              long long v50 = &v18[104 * v17];
              *(_OWORD *)long long v19 = 0u;
              *((_OWORD *)v19 + 1) = 0u;
              *((_OWORD *)v19 + 2) = 0u;
              *((_OWORD *)v19 + 3) = 0u;
              *((_OWORD *)v19 + 4) = 0u;
              *((_OWORD *)v19 + 5) = 0u;
              *((void *)v19 + 12) = 0;
              long long v49 = v19 + 104;
              std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer((uint64_t *)this + 63, &v47);
              unint64_t v13 = *((void *)this + 64);
              std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)&v47);
            }
            else
            {
              *(void *)(v11 + 96) = 0;
              *(_OWORD *)(v11 + 64) = 0u;
              *(_OWORD *)(v11 + 80) = 0u;
              *(_OWORD *)(v11 + 32) = 0u;
              *(_OWORD *)(v11 + 48) = 0u;
              *(_OWORD *)unint64_t v11 = 0u;
              *(_OWORD *)(v11 + 16) = 0u;
              unint64_t v13 = v11 + 104;
              *((void *)this + 64) = v11 + 104;
            }
            *((void *)this + 64) = v13;
            DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(*((void *)this + 63) + v8), 1uLL, *((double *)this + 2), 1uLL);
            ++v9;
            v8 += 104;
          }
          while (v9 < *((unsigned int *)this + 73));
        }
        DspLib::Biquad::ParametricFilter::initialize((DspLib::NotchFilterBank::FilterBank *)((char *)this + 568), 1uLL, *((double *)this + 2), 1uLL);
        int v20 = *((_DWORD *)this + 72);
        if (v20)
        {
          if (v20 != 1)
          {
            long long v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
            printf("DSP Sound assertion in %s at line %d\n", v25, 82);
            ++DspLibDebug::mAssertCounter;
            return v46;
          }
          int v21 = *((_DWORD *)this + 73);
          int v22 = (*(uint64_t (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this);
          std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::resize((uint64_t)this + 328, (v22 * v21));
        }
        else
        {
          uint64_t v23 = *((void *)this + 38);
          for (uint64_t j = *((void *)this + 39); j != v23; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(j))
            j -= 104;
          *((void *)this + 39) = v23;
          if (*((_DWORD *)this + 73))
          {
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            long long v28 = (void *)((char *)this + 304);
            do
            {
              unint64_t v29 = *((void *)this + 39);
              unint64_t v30 = *((void *)this + 40);
              if (v29 >= v30)
              {
                uint64_t v32 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v29 - *v28) >> 3);
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) > 0x276276276276276) {
                  goto LABEL_53;
                }
                unint64_t v34 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v30 - *v28) >> 3);
                if (2 * v34 > v33) {
                  unint64_t v33 = 2 * v34;
                }
                if (v34 >= 0x13B13B13B13B13BLL) {
                  unint64_t v35 = 0x276276276276276;
                }
                else {
                  unint64_t v35 = v33;
                }
                long long v51 = (char *)this + 320;
                if (v35) {
                  long long v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>((uint64_t)this + 320, v35);
                }
                else {
                  long long v36 = 0;
                }
                uint64_t v37 = &v36[104 * v32];
                long long v47 = v36;
                long long v48 = v37;
                long long v50 = &v36[104 * v35];
                *(_OWORD *)uint64_t v37 = 0u;
                *((_OWORD *)v37 + 1) = 0u;
                *((_OWORD *)v37 + 2) = 0u;
                *((_OWORD *)v37 + 3) = 0u;
                *((_OWORD *)v37 + 4) = 0u;
                *((_OWORD *)v37 + 5) = 0u;
                *((void *)v37 + 12) = 0;
                long long v49 = v37 + 104;
                std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer((uint64_t *)this + 38, &v47);
                unint64_t v31 = *((void *)this + 39);
                std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)&v47);
              }
              else
              {
                *(void *)(v29 + 96) = 0;
                *(_OWORD *)(v29 + 64) = 0u;
                *(_OWORD *)(v29 + 80) = 0u;
                *(_OWORD *)(v29 + 32) = 0u;
                *(_OWORD *)(v29 + 48) = 0u;
                *(_OWORD *)unint64_t v29 = 0u;
                *(_OWORD *)(v29 + 16) = 0u;
                unint64_t v31 = v29 + 104;
                *((void *)this + 39) = v29 + 104;
              }
              *((void *)this + 39) = v31;
              long long v38 = (DspLib::Biquad::ParametricFilter *)(*((void *)this + 38) + v26);
              unsigned int v39 = (*(uint64_t (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this);
              DspLib::Biquad::ParametricFilter::initialize(v38, v39, *((double *)this + 2), 1uLL);
              ++v27;
              v26 += 104;
            }
            while (v27 < *((unsigned int *)this + 73));
          }
        }
        std::vector<float>::resize((uint64_t)this + 216, 0x200uLL);
        std::vector<float>::resize((uint64_t)this + 240, 0x200uLL);
        unsigned int v40 = (*(uint64_t (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this);
        std::vector<std::vector<float>>::resize((uint64_t *)this + 33, v40);
        uint64_t v42 = *((void *)this + 33);
        uint64_t v41 = *((void *)this + 34);
        while (v42 != v41)
        {
          std::vector<float>::resize(v42, 0x200uLL);
          v42 += 24;
        }
        std::vector<BOOL>::resize((uint64_t)this + 352, *((unsigned int *)this + 73), 0);
        *((unsigned char *)this + 8) = 1;
        (*(void (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 128))(this);
        return v46;
      }
      uint64_t v44 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      int v45 = 36;
    }
    printf("DSP Sound assertion in %s at line %d\n", v44, v45);
    ++DspLibDebug::mAssertCounter;
  }
  return v4;
}

void sub_1BB2B3524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 36 * a2;
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      int v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      unint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      uint64_t v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      unint64_t v17 = v19;
      LODWORD(v18) = v20;
      unint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      int v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      unint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        int v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        int v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1BB2B36E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DspLib::NotchFilterBank::FilterBank::uninitialize(DspLib::NotchFilterBank::FilterBank *this)
{
  *((unsigned char *)this + 8) = 0;
}

void DspLib::NotchFilterBank::FilterBank::cleanUp(DspLib::NotchFilterBank::FilterBank *this)
{
  *((void *)this + 45) = 0;
  *((void *)this + 28) = *((void *)this + 27);
  *((void *)this + 31) = *((void *)this + 30);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 33);
  *((void *)this + 48) = *((void *)this + 47);
  *((void *)this + 51) = *((void *)this + 50);
  *((void *)this + 54) = *((void *)this + 53);
  *((void *)this + 57) = *((void *)this + 56);
  *((void *)this + 60) = *((void *)this + 59);
  uint64_t v2 = *((void *)this + 69);
  uint64_t v3 = *((void *)this + 68);
  while (v2 != v3)
  {
    v2 -= 104;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v2);
  }
  *((void *)this + 69) = v3;
  uint64_t v5 = *((void *)this + 63);
  for (uint64_t i = *((void *)this + 64); i != v5; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i))
    i -= 104;
  *((void *)this + 64) = v5;
  uint64_t v7 = *((void *)this + 38);
  for (uint64_t j = *((void *)this + 39); j != v7; std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(j))
    j -= 104;
  *((void *)this + 39) = v7;
  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::NotchFilterBank::FilterBank *)((char *)this + 568));
  int v8 = *((_DWORD *)this + 72);
  if (v8)
  {
    if (v8 == 1)
    {
      *((void *)this + 42) = *((void *)this + 41);
    }
    else
    {
      unint64_t v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v9, 139);
      ++DspLibDebug::mAssertCounter;
    }
  }
}

void DspLib::NotchFilterBank::FilterBank::reset(DspLib::NotchFilterBank::FilterBank *this)
{
  uint64_t v2 = *((void *)this + 38);
  uint64_t v3 = *((void *)this + 39);
  while (v2 != v3)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 48));
    v2 += 104;
  }
  uint64_t v4 = *((void *)this + 63);
  uint64_t v5 = *((void *)this + 64);
  while (v4 != v5)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v4 + 48));
    v4 += 104;
  }
  if (*((void *)this + 41) != *((void *)this + 42))
  {
    int v6 = *((_DWORD *)this + 73);
    if ((*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this) * v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *((void *)this + 41) + v7;
        *(_DWORD *)(v9 + 4) = 0;
        *(void *)(v9 + 12) = 0;
        *(void *)(v9 + 24) = 0;
        ++v8;
        int v10 = *((_DWORD *)this + 73);
        v7 += 36;
      }
      while (v8 < (*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this)
                 * v10);
    }
  }
  unint64_t v11 = *((void *)this + 45);
  if (v11)
  {
    uint64_t v14 = *((void *)this + 44);
    int v15 = 0;
    std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)&v14, v11);
  }
  *((unsigned char *)this + 528) = 0;
  uint64_t v12 = *((void *)this + 68);
  uint64_t v13 = *((void *)this + 69);
  while (v12 != v13)
  {
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v12 + 48));
    v12 += 104;
  }
  DspLib::Biquad::SetupWrapper::reset((DspLib::NotchFilterBank::FilterBank *)((char *)this + 616));
  *((_DWORD *)this + 74) = 0;
}

void DspLib::NotchFilterBank::FilterBank::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    double v5 = round(*(double *)(a1 + 16));
    int v6 = *(DspLib::Biquad::ParametricFilter **)(a1 + 504);
    unint64_t v7 = *(void *)(a1 + 512);
    unint64_t v8 = ((unint64_t)COERCE_UNSIGNED_INT(1000.0 / *(float *)(*(void *)(a1 + 32) + 16)) << 32) | 6;
    while (v6 != (DspLib::Biquad::ParametricFilter *)v7)
    {
      DspLib::Biquad::ParametricFilter::initialize(v6, 1uLL, v5, 1uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)v6, v8, (double *)0x3F00000000000000, 0, 0x41uLL);
      int v6 = (DspLib::Biquad::ParametricFilter *)((char *)v6 + 104);
    }
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)(a1 + 568), 1uLL, v5, 1uLL);
    DspLib::Biquad::ParametricFilter::setParametricEQ(a1 + 568, v8, (double *)0x3F00000000000000, 0, 0x41uLL);
    if (*(_DWORD *)(a1 + 288) == 1)
    {
      float v10 = -1.0 / (*(double *)(a1 + 16) * *(float *)(*(void *)(a1 + 32) + 20) / 1000.0);
      float v11 = expf(v10);
      int v12 = *(_DWORD *)(a1 + 292);
      uint64_t v9 = (DspLib *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      if (v9 * v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        float v15 = 1.0 - v11;
        HIDWORD(v7) = 0;
        do
        {
          uint64_t v16 = *(void *)(a1 + 328) + v13;
          *(float *)(v16 + 8) = v15;
          float v17 = *(float *)(*(void *)(a1 + 32) + 24);
          float v18 = 0.0;
          if (v17 >= 100.0) {
            float v18 = 2500.0 / (*(double *)(a1 + 16) * v17);
          }
          *(float *)(v16 + 32) = v18;
          ++v14;
          int v19 = *(_DWORD *)(a1 + 292);
          uint64_t v9 = (DspLib *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
          v13 += 36;
        }
        while (v14 < (v9 * v19));
      }
    }
    LODWORD(v7) = vcvtas_u32_f32(*(float *)(*(void *)(a1 + 32) + 28));
    uint64_t v20 = *(void *)(a1 + 552);
    int v21 = *(DspLib::Biquad::ParametricFilter **)(a1 + 544);
    if (0x4EC4EC4EC4EC4EC5 * ((v20 - (uint64_t)v21) >> 3) != v7)
    {
      while ((DspLib::Biquad::ParametricFilter *)v20 != v21)
      {
        v20 -= 104;
        std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v20);
      }
      *(void *)(a1 + 552) = v21;
      std::vector<DspLib::Biquad::ParametricFilter>::resize((uint64_t *)(a1 + 544), v7);
      int v21 = *(DspLib::Biquad::ParametricFilter **)(a1 + 544);
      uint64_t v20 = *(void *)(a1 + 552);
    }
    while (v21 != (DspLib::Biquad::ParametricFilter *)v20)
    {
      unsigned int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      DspLib::Biquad::ParametricFilter::initialize(v21, v22, v5, 1uLL);
      int v21 = (DspLib::Biquad::ParametricFilter *)((char *)v21 + 104);
    }
    *(float *)(a1 + 496) = DspLib::dB2Amp(v9, *(float *)(*(void *)(a1 + 32) + 12));
    *(float *)(a1 + 536) = DspLib::dB2Amp(v23, *(float *)(*(void *)(a1 + 32) + 12)/ (float)(unint64_t)(0x4EC4EC4EC4EC4EC5* ((uint64_t)(*(void *)(a1 + 552) - *(void *)(a1 + 544)) >> 3)));
    DspLib::NotchFilterBank::FilterBank::setFilterBankParameters((DspLib::NotchFilterBank::FilterBank *)a1, *(_DWORD *)(a1 + 292));
    int v24 = *(DspLib::Biquad::ParametricFilter **)(a1 + 304);
    long long v25 = *(DspLib::Biquad::ParametricFilter **)(a1 + 312);
    while (v24 != v25)
    {
      unsigned int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      DspLib::Biquad::ParametricFilter::initialize(v24, v26, v5, 1uLL);
      int v24 = (DspLib::Biquad::ParametricFilter *)((char *)v24 + 104);
    }
    float v27 = *(float *)(*(void *)(a1 + 32) + 32);
    DspLib::NotchFilterBank::FilterBank::setLowShelveQuality((DspLib::NotchFilterBank::FilterBank *)a1, v27);
  }
}

void std::vector<DspLib::Biquad::ParametricFilter>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<DspLib::Biquad::ParametricFilter>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 104 * a2;
    while (v3 != v7)
    {
      v3 -= 104;
      std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(v3);
    }
    a1[1] = v7;
  }
}

void DspLib::NotchFilterBank::FilterBank::setFilterBankParameters(DspLib::NotchFilterBank::FilterBank *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 4);
  unsigned int v4 = *(float *)(v3 + 8);
  uint64_t v5 = 23;
  if (v4 == 1) {
    uint64_t v5 = 14;
  }
  if (v4) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 13;
  }
  int v7 = *((_DWORD *)this + 72);
  if (v7 != 1)
  {
    if (v7)
    {
      uint64_t v20 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v20, 404);
      ++DspLibDebug::mAssertCounter;
    }
    else if (a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a2;
      do
      {
        uint64_t v10 = *((void *)this + 4);
        uint64_t v11 = *((void *)this + 56);
        uint64_t v12 = *((void *)this + 50);
        float v13 = *(float *)(v10 + 4) * *(float *)(v11 + 4 * v8);
        uint64_t v14 = *((void *)this + 47);
        float v15 = *(float *)(v14 + 4 * v8);
        uint64_t v16 = *((void *)this + 59);
        if (*(float *)(v12 + 4 * v8) != v15 || v13 != *(float *)(v16 + 4 * v8))
        {
          *(float *)(v12 + 4 * v8) = v15;
          *(float *)(v16 + 4 * v8) = v13;
          DspLib::Biquad::ParametricFilter::setParametricEQ(*((void *)this + 38) + 104 * v8, v6 | ((unint64_t)*(unsigned int *)(v14 + 4 * v8) << 32), (double *)((unint64_t)COERCE_UNSIGNED_INT(*(float *)(v10 + 4) * *(float *)(v11 + 4 * v8)) << 32), 0, 0x41uLL);
        }
        ++v8;
      }
      while (v8 != v9);
    }
    return;
  }
  float v17 = 6.28318531 / *((double *)this + 2);
  float v18 = 0.0;
  if (v4)
  {
    if (v4 == 1)
    {
      float v19 = v17 / *(float *)(v3 + 4);
      if (!a2) {
        return;
      }
      goto LABEL_22;
    }
  }
  else
  {
    float v18 = (float)(v17 * 140.37) / *(float *)(v3 + 4);
  }
  float v19 = 0.0;
  if (!a2) {
    return;
  }
LABEL_22:
  uint64_t v21 = 0;
  uint64_t v22 = a2;
  do
  {
    float v23 = *(float *)(*((void *)this + 47) + 4 * v21);
    float v24 = *(float *)(*((void *)this + 56) + 4 * v21);
    if ((*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this))
    {
      unsigned int v25 = 0;
      float v26 = v18 + (float)(v19 * v23);
      if ((float)(v26 * (float)(1.0 / v24)) <= 1.0) {
        float v27 = v26 * (float)(1.0 / v24);
      }
      else {
        float v27 = 1.0;
      }
      float v28 = v23 * v17;
      do
      {
        *(float *)(*((void *)this + 41)
                 + 36
                 * (v25
                  + v21
                  * (*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this))
                 + 20) = v27;
        *(float *)(*((void *)this + 41)
                 + 36
                 * (v25
                  + v21
                  * (*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this))) = v28;
        ++v25;
      }
      while (v25 < (*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this));
    }
    ++v21;
  }
  while (v21 != v22);
}

void DspLib::NotchFilterBank::FilterBank::setLowShelveQuality(DspLib::NotchFilterBank::FilterBank *this, float a2)
{
  *((float *)this + 171) = a2;
  uint64_t v2 = *((void *)this + 68);
  for (uint64_t i = *((void *)this + 69); v2 != i; v2 += 104)
    DspLib::Biquad::ParametricFilter::setParametricEQ(v2, *((void *)this + 84), *((double **)this + 85), 0, 0x41uLL);
}

uint64_t DspLib::NotchFilterBank::FilterBank::setFilterMode(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v3 = 260;
LABEL_7:
    double result = printf("DSP Sound assertion in %s at line %d\n", v2, v3);
    ++DspLibDebug::mAssertCounter;
    return result;
  }
  if (a2 >= 2)
  {
    uint64_t v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v3 = 261;
    goto LABEL_7;
  }
  *(_DWORD *)(result + 288) = a2;
  return result;
}

uint64_t DspLib::NotchFilterBank::FilterBank::setNumNotchFilters(uint64_t this, unsigned int a2)
{
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v3 = 273;
LABEL_9:
    this = printf("DSP Sound assertion in %s at line %d\n", v2, v3);
    ++DspLibDebug::mAssertCounter;
    return this;
  }
  if (a2 >= 0x65)
  {
    uint64_t v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v3 = 274;
    goto LABEL_9;
  }
  if (!a2)
  {
    uint64_t v2 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v3 = 275;
    goto LABEL_9;
  }
  *(_DWORD *)(this + 292) = a2;
  return this;
}

void DspLib::NotchFilterBank::FilterBank::setNotchFilters(DspLib::NotchFilterBank::FilterBank *this, float *__src, float *a3, float *a4, unsigned int a5)
{
  if (*((_DWORD *)this + 73) < a5)
  {
    uint64_t v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v17 = 287;
LABEL_25:
    printf("DSP Sound assertion in %s at line %d\n", v16, v17);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!__src)
  {
    uint64_t v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v17 = 288;
    goto LABEL_25;
  }
  if (!a3)
  {
    uint64_t v16 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v17 = 289;
    goto LABEL_25;
  }
  if (a5)
  {
    int v7 = (float *)*((void *)this + 53);
    uint64_t v8 = a5;
    uint64_t v9 = (float *)*((void *)this + 56);
    uint64_t v10 = a5;
    uint64_t v11 = a4;
    uint64_t v12 = __src;
    do
    {
      if (*v12 <= 20000.0) {
        float v13 = v12;
      }
      else {
        float v13 = (float *)&DspLib::NotchFilterBank::kMaxFilterFrequency;
      }
      if (*v12 < 20.0) {
        float v13 = (float *)&DspLib::NotchFilterBank::kMinFilterFrequency;
      }
      *uint64_t v12 = *v13;
      float v14 = 0.0;
      if (*a3 >= 0.0)
      {
        float v14 = 1.0;
        if (*a3 <= 1.0) {
          float v14 = *a3;
        }
      }
      *a3 = v14;
      float v15 = 1.0;
      *int v7 = 1.0 - v14;
      if (a4) {
        float v15 = *v11;
      }
      *v9++ = v15;
      ++v12;
      ++a3;
      ++v11;
      ++v7;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v8 = 0;
  }
  DspLib::copy(__src, v8, *((void **)this + 47));

  DspLib::NotchFilterBank::FilterBank::setFilterBankParameters(this, a5);
}

void DspLib::NotchFilterBank::FilterBank::setLowShelveFrequency(DspLib::NotchFilterBank::FilterBank *this, float a2)
{
  float v2 = 20000.0;
  if (a2 <= 20000.0) {
    float v2 = a2;
  }
  if (a2 >= 20.0) {
    float v3 = v2;
  }
  else {
    float v3 = 20.0;
  }
  *((float *)this + 169) = v3;
  uint64_t v4 = *((void *)this + 68);
  for (uint64_t i = *((void *)this + 69); v4 != i; v4 += 104)
    DspLib::Biquad::ParametricFilter::setParametricEQ(v4, *((void *)this + 84), *((double **)this + 85), 0, 0x41uLL);
}

float DspLib::NotchFilterBank::FilterBank::setLowShelveGain(DspLib::NotchFilterBank::FilterBank *this, float a2)
{
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  float result = 1.0
         - powf(fmaxf(a2, 0.00001), 1.0/ (float)(unint64_t)(0x4EC4EC4EC4EC4EC5* ((uint64_t)(*((void *)this + 69) - *((void *)this + 68)) >> 3)));
  *((float *)this + 133) = result;
  return result;
}

void DspLib::NotchFilterBank::FilterBank::processBlock(uint64_t a1, long long *a2, long long *a3)
{
  if (*((void *)a2 + 2) >= 0x201uLL)
  {
    uint64_t v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v6 = 413;
LABEL_9:
    printf("DSP Sound assertion in %s at line %d\n", v5, v6);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v6 = 414;
    goto LABEL_9;
  }
  if (**(void **)a3 != **(void **)a2)
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    long long v11 = *a3;
    uint64_t v12 = *((void *)a3 + 2);
    DspLib::copy(&v13, &v11);
  }
  *(_DWORD *)(a1 + 296) = 0;
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  DspLib::NotchFilterBank::FilterBank::processLowShelveBlock(a1, &v9);
  long long v7 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  DspLib::NotchFilterBank::FilterBank::processNotchFilterBlock(a1, &v7);
}

void DspLib::NotchFilterBank::FilterBank::processLowShelveBlock(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2[2];
  if (v2)
  {
    if (*(float *)(a1 + 532) <= *(float *)(a1 + 536))
    {
      if (!*(unsigned char *)(a1 + 528)) {
        return;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 528) = 1;
    }
    ++*(_DWORD *)(a1 + 296);
    std::vector<float>::resize(a1 + 216, v2);
    DspLib::fill(*(float **)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2, *(float *)(a1 + 532));
    DspLib::Biquad::Filter::process((void *)(a1 + 568), *(void *)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2, *(void *)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2);
    if (*(float *)(*(void *)(a1 + 216) + 4 * v2 - 4) < *(float *)(a1 + 536)) {
      *(unsigned char *)(a1 + 528) = 0;
    }
    int v6 = *(void **)(a1 + 544);
    for (uint64_t i = *(void **)(a1 + 552); v6 != i; v6 += 13)
    {
      MEMORY[0x1F4188790](v5);
      uint64_t v10 = (char *)&v19[-1] - v9;
      if (v8 >= 0x200) {
        size_t v11 = 512;
      }
      else {
        size_t v11 = v8;
      }
      bzero((char *)&v19[-1] - v9, v11);
      uint64_t v12 = *(uint64_t **)(a1 + 264);
      uint64_t v13 = *(void *)(a1 + 272) - (void)v12;
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
      if (v13)
      {
        uint64_t v15 = 0;
        do
        {
          uint64_t v16 = *v12;
          v12 += 3;
          *(void *)&v10[8 * v15++] = v16;
        }
        while (v14 > v15);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        unint64_t v17 = 0;
        do
        {
          DspLib::multiply(*(const float **)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2, *(const float **)(*a2 + 8 * v17), a2[2], *(float **)&v10[8 * v17]);
          ++v17;
        }
        while (v17 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
      *(void *)&long long v22 = v10;
      *((void *)&v22 + 1) = v14;
      unint64_t v23 = v2;
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v14;
      unint64_t v25 = v2;
      DspLib::Biquad::Filter::process(v6, &v24, &v22);
      long long v20 = *(_OWORD *)a2;
      uint64_t v21 = a2[2];
      v19[0] = v10;
      v19[1] = v14;
      v19[2] = v2;
      DspLib::subtract(&v20, v19);
    }
  }
}

void DspLib::NotchFilterBank::FilterBank::processNotchFilterBlock(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2[2];
  if (v2 && *(_DWORD *)(a1 + 292))
  {
    unint64_t v5 = 0;
    uint64_t v6 = a1 + 216;
    unint64_t v7 = v2 - 1;
    uint64_t v32 = a1 + 240;
    do
    {
      float v8 = *(float *)(*(void *)(a1 + 424) + 4 * v5);
      uint64_t v9 = *(void *)(a1 + 352);
      unint64_t v10 = v5 >> 6;
      uint64_t v11 = 1 << v5;
      if (v8 > *(float *)(a1 + 496)) {
        *(void *)(v9 + 8 * v10) |= v11;
      }
      if ((*(void *)(v9 + 8 * v10) & v11) != 0)
      {
        ++*(_DWORD *)(a1 + 296);
        std::vector<float>::resize(v6, v2);
        DspLib::fill(*(float **)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2, v8);
        DspLib::Biquad::Filter::process((void *)(*(void *)(a1 + 504) + 104 * v5), *(void *)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2, *(void *)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2);
        if (*(float *)(*(void *)(a1 + 216) + 4 * v7) < *(float *)(a1 + 496)) {
          *(void *)(*(void *)(a1 + 352) + 8 * v10) &= ~v11;
        }
        int v13 = *(_DWORD *)(a1 + 288);
        if (v13 == 1)
        {
          std::vector<float>::resize(v32, v2);
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
          {
            unint64_t v27 = 0;
            do
            {
              DspLib::multiply(*(const float **)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2, *(const float **)(*a2 + 8 * v27), a2[2], *(float **)(a1 + 240));
              float v28 = *(float **)(a1 + 240);
              uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
              DspLib::NotchFilterBank::FilterBank::adaptiveNotchFilter(v29, v28, v28, (float *)(*(void *)(a1 + 328) + 36 * (v27 + v5 * v29)), v2);
              DspLib::subtract(*(float **)(*a2 + 8 * v27++), a2[2], *(const float **)(a1 + 240));
            }
            while (v27 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
          }
        }
        else
        {
          if (v13)
          {
            unint64_t v30 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
            printf("DSP Sound assertion in %s at line %d\n", v30, 519);
            ++DspLibDebug::mAssertCounter;
            return;
          }
          uint64_t v14 = v6;
          unint64_t v15 = v7;
          unint64_t v33 = &v31;
          MEMORY[0x1F4188790](v12);
          float v18 = (char *)&v31 - v17;
          if (v16 >= 0x200) {
            size_t v19 = 512;
          }
          else {
            size_t v19 = v16;
          }
          bzero((char *)&v31 - v17, v19);
          long long v20 = *(uint64_t **)(a1 + 264);
          uint64_t v21 = *(void *)(a1 + 272) - (void)v20;
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
          if (v21)
          {
            uint64_t v23 = 0;
            do
            {
              uint64_t v24 = *v20;
              v20 += 3;
              *(void *)&v18[8 * v23++] = v24;
            }
            while (v22 > v23);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
          {
            unint64_t v25 = 0;
            do
            {
              DspLib::multiply(*(const float **)(a1 + 216), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2, *(const float **)(*a2 + 8 * v25), a2[2], *(float **)&v18[8 * v25]);
              ++v25;
            }
            while (v25 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
          }
          uint64_t v26 = (void *)(*(void *)(a1 + 304) + 104 * v5);
          *(void *)&long long v37 = v18;
          *((void *)&v37 + 1) = v22;
          unint64_t v38 = v2;
          *(void *)&long long v39 = v18;
          *((void *)&v39 + 1) = v22;
          unint64_t v40 = v2;
          DspLib::Biquad::Filter::process(v26, &v39, &v37);
          long long v35 = *(_OWORD *)a2;
          uint64_t v36 = a2[2];
          v34[0] = v18;
          v34[1] = v22;
          v34[2] = v2;
          DspLib::subtract(&v35, v34);
          unint64_t v7 = v15;
          uint64_t v6 = v14;
        }
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 292));
  }
}

void DspLib::NotchFilterBank::FilterBank::adaptiveNotchFilter(uint64_t a1, float *a2, float *a3, float *a4, unsigned int a5)
{
  if (a2)
  {
    unint64_t v5 = a3;
    if (a3)
    {
      if (a4)
      {
        float v7 = *a4;
        float v8 = a4[1];
        float v9 = a4[3];
        float v10 = a4[4];
        float v11 = a4[6];
        float v29 = a4[7];
        if (a5)
        {
          uint64_t v12 = a2;
          float v27 = a4[5];
          float v28 = a4[2];
          float v13 = a4[8];
          uint64_t v14 = a5;
          do
          {
            float v8 = v8 + (float)((float)(v7 - v8) * v28);
            __float2 v15 = __sincosf_stret(v11);
            double v16 = (float)(v11 + v8);
            if (v16 >= 6.28318531)
            {
              float v17 = v16 + -6.28318531;
              float v11 = v17;
            }
            else
            {
              float v11 = v11 + v8;
            }
            float v18 = (float)(v10 * v15.__sinval) + (float)(v9 * v15.__cosval);
            float v19 = v27 * (float)(*v12 - v18);
            float v9 = v9 + (float)(v19 * v15.__cosval);
            float v10 = v10 + (float)(v19 * v15.__sinval);
            *unint64_t v5 = v18;
            if (v13 > 0.0)
            {
              float v20 = atan2f(v9, v10);
              float v21 = v20 - v29;
              double v22 = (float)(v20 - v29);
              if (v22 < 3.14159265)
              {
                float v23 = v22 + 6.28318531;
                float v21 = v23;
              }
              if (v21 > 3.14159265)
              {
                float v24 = v21 + -6.28318531;
                float v21 = v24;
              }
              float v8 = v7 + (float)(v21 * v13);
              float v29 = v20;
              float v7 = v8;
            }
            ++v12;
            ++v5;
            --v14;
          }
          while (v14);
        }
        if (v9 > 10.0)
        {
          unint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          int v26 = 595;
        }
        else if (v9 < -10.0)
        {
          unint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          int v26 = 596;
        }
        else if (v10 > 10.0)
        {
          unint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          int v26 = 597;
        }
        else
        {
          if (v10 >= -10.0)
          {
            a4[3] = v9;
            a4[4] = v10;
            a4[6] = v11;
            a4[7] = v29;
            *a4 = v7;
            a4[1] = v8;
            return;
          }
          unint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
          int v26 = 598;
        }
      }
      else
      {
        unint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
        int v26 = 535;
      }
    }
    else
    {
      unint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
      int v26 = 534;
    }
  }
  else
  {
    unint64_t v25 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v26 = 533;
  }
  printf("DSP Sound assertion in %s at line %d\n", v25, v26);
  ++DspLibDebug::mAssertCounter;
}

void DspLib::NotchFilterBank::FilterBank::getAmplitudeResponseLowShelvingFilter(DspLib::NotchFilterBank::FilterBank *this, float *a2, float *__b, unsigned int a4)
{
  if (!a2)
  {
    unint64_t v33 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v34 = 615;
LABEL_23:
    printf("DSP Sound assertion in %s at line %d\n", v33, v34);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!__b)
  {
    unint64_t v33 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v34 = 616;
    goto LABEL_23;
  }
  if (a4 >= 0xF4241)
  {
    unint64_t v33 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    int v34 = 617;
    goto LABEL_23;
  }
  float v7 = *((float *)this + 133);
  if (v7 <= *((float *)this + 134))
  {
    if (a4)
    {
      memset_pattern16(__b, &unk_1BB873A60, 4 * a4);
    }
  }
  else
  {
    float v9 = (DspLib::Biquad::Filter *)*((void *)this + 69);
    float v10 = (DspLib::Biquad::Filter *)*((void *)this + 68);
    if (v9 == v10)
    {
      float v36 = 0.0;
      long long v35 = DspLib::Biquad::kBypassSection;
      if (!a4) {
        return;
      }
    }
    else
    {
      DspLib::Biquad::Filter::section(v10, 0, 0, (float32x4_t *)&v35);
      if (!a4) {
        return;
      }
    }
    uint64_t v11 = 0;
    float v12 = 6.28318531 / *((double *)this + 2);
    uint64_t v13 = v35;
    float v15 = *((float *)&v35 + 3);
    float v14 = v36;
    float v16 = *((float *)&v35 + 2);
    float v17 = -v7;
    do
    {
      float v18 = a2[v11] * v12;
      float v19 = 1.0;
      if (v18 < 3.14159265)
      {
        __float2 v20 = __sincosf_stret(v18);
        float v19 = 1.0;
        uint64_t v21 = *((void *)this + 69) - *((void *)this + 68);
        if (v21)
        {
          float v22 = (float)(v20.__cosval * v20.__cosval) - (float)(v20.__sinval * v20.__sinval);
          float v23 = (float)-(float)(v20.__sinval * v20.__cosval) - (float)(v20.__sinval * v20.__cosval);
          float v24 = *(float *)&v13 + (float)((float)(v20.__cosval * *((float *)&v13 + 1)) + (float)(v22 * v16));
          float v25 = (float)(v23 * v16) - (float)(v20.__sinval * *((float *)&v13 + 1));
          float v26 = (float)((float)(v20.__cosval * v15) + (float)(v22 * v14)) + 1.0;
          float v27 = (float)(v23 * v14) - (float)(v20.__sinval * v15);
          float v28 = (float)(v27 * v27) + (float)(v26 * v26);
          float v29 = sqrtf((float)((float)((float)((float)((float)(v25 * v26) - (float)(v24 * v27)) / v28) * v17)* (float)((float)((float)((float)(v25 * v26) - (float)(v24 * v27)) / v28) * v17))+ (float)((float)((float)((float)((float)((float)(v25 * v27) + (float)(v24 * v26)) / v28) * v17) + 1.0)* (float)((float)((float)((float)((float)(v25 * v27) + (float)(v24 * v26)) / v28) * v17) + 1.0)));
          unint64_t v30 = 0x4EC4EC4EC4EC4EC5 * (v21 >> 3);
          unsigned int v31 = 1;
          do
            float v19 = v29 * v19;
          while (v30 > v31++);
        }
      }
      __b[v11++] = v19;
    }
    while (v11 != a4);
  }
}

void DspLib::NotchFilterBank::FilterBank::getAmplitudeResponse(DspLib::NotchFilterBank::FilterBank *this, float *a2, float *__b, unsigned int a4)
{
  if (!a2)
  {
    int v50 = 680;
    goto LABEL_34;
  }
  if (!__b)
  {
    int v50 = 681;
    goto LABEL_34;
  }
  if (a4 > 0xF4240)
  {
    int v50 = 682;
    goto LABEL_34;
  }
  float v8 = 6.28318531 / *((double *)this + 2);
  DspLib::NotchFilterBank::FilterBank::getAmplitudeResponseLowShelvingFilter(this, a2, __b, a4);
  int v9 = *((_DWORD *)this + 72);
  if (!v9)
  {
    unint64_t v29 = *((unsigned int *)this + 73);
    if (!v29) {
      return;
    }
    unint64_t v30 = 0;
    unsigned int v31 = __b;
    while (1)
    {
      float v32 = *(float *)(*((void *)this + 53) + 4 * v30);
      if (v32 > *((float *)this + 124)) {
        break;
      }
LABEL_31:
      if (++v30 >= v29) {
        return;
      }
    }
    uint64_t v33 = *((void *)this + 38);
    if (0x4EC4EC4EC4EC4EC5 * ((*((void *)this + 39) - v33) >> 3) >= v30)
    {
      DspLib::Biquad::Filter::section((DspLib::Biquad::Filter *)(v33 + 104 * v30), 0, 0, (float32x4_t *)&v52);
      if (!a4)
      {
LABEL_30:
        unint64_t v29 = *((unsigned int *)this + 73);
        goto LABEL_31;
      }
    }
    else
    {
      float v53 = 0.0;
      long long v52 = DspLib::Biquad::kBypassSection;
      if (!a4) {
        goto LABEL_30;
      }
    }
    uint64_t v34 = v52;
    uint64_t v36 = a4;
    long long v37 = v31;
    unint64_t v38 = a2;
    uint64_t v40 = *((void *)&v52 + 1);
    float v39 = v53;
    do
    {
      float v41 = *v38 * v8;
      if (v41 < 3.14159265)
      {
        __float2 v42 = __sincosf_stret(v41);
        float v43 = (float)(v42.__cosval * v42.__cosval) - (float)(v42.__sinval * v42.__sinval);
        float v44 = (float)-(float)(v42.__sinval * v42.__cosval) - (float)(v42.__sinval * v42.__cosval);
        float v45 = *(float *)&v34 + (float)((float)(v42.__cosval * *((float *)&v34 + 1)) + (float)(v43 * *(float *)&v40));
        float v46 = (float)(v44 * *(float *)&v40) - (float)(v42.__sinval * *((float *)&v34 + 1));
        float v47 = (float)((float)(v42.__cosval * *((float *)&v40 + 1)) + (float)(v43 * v39)) + 1.0;
        float v48 = (float)(v44 * v39) - (float)(v42.__sinval * *((float *)&v40 + 1));
        float v49 = (float)(v48 * v48) + (float)(v47 * v47);
        float v35 = -v32;
        *long long v37 = *v37
             * sqrtf((float)((float)((float)((float)((float)(v46 * v47) - (float)(v45 * v48)) / v49) * v35)* (float)((float)((float)((float)(v46 * v47) - (float)(v45 * v48)) / v49) * v35))+ (float)((float)((float)((float)((float)((float)(v46 * v48) + (float)(v45 * v47)) / v49) * v35) + 1.0)* (float)((float)((float)((float)((float)(v46 * v48) + (float)(v45 * v47)) / v49) * v35) + 1.0)));
      }
      ++v38;
      ++v37;
      --v36;
    }
    while (v36);
    goto LABEL_30;
  }
  if (v9 != 1)
  {
    int v50 = 778;
LABEL_34:
    long long v51 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/NotchFilterBank/dsp/DspLibNotchFilterBank.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v51, v50);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  unint64_t v10 = *((unsigned int *)this + 73);
  if (v10)
  {
    for (unint64_t i = 0; i < v10; ++i)
    {
      float v12 = *(float *)(*((void *)this + 53) + 4 * i);
      if (v12 > *((float *)this + 124) && a4 != 0)
      {
        float v14 = -v12;
        uint64_t v15 = a4;
        float v16 = __b;
        float v17 = a2;
        do
        {
          float v18 = *v17 * v8;
          if (v18 < 3.14159265)
          {
            int v19 = (*(uint64_t (**)(DspLib::NotchFilterBank::FilterBank *, double))(*(void *)this + 56))(this, v18);
            float v20 = cosf(*(float *)(*((void *)this + 41) + 36 * (v19 * i)));
            float v21 = *(float *)(*((void *)this + 41)
                           + 36
                           * (*(unsigned int (**)(DspLib::NotchFilterBank::FilterBank *))(*(void *)this + 56))(this)
                           * i
                           + 20);
            __float2 v22 = __sincosf_stret(v18);
            float v23 = (float)((float)(v22.__cosval * v20) + -1.0) * v21;
            float v24 = -(float)(v22.__sinval * v20);
            float v25 = v24 * v21;
            float v26 = (float)(1.0 - v21)
                + (float)((float)((float)(v22.__cosval * v22.__cosval) - (float)(v22.__sinval * v22.__sinval))
                        + (float)((float)(v22.__cosval * v20) * (float)(v21 + -2.0)));
            float v27 = (float)((float)-(float)(v22.__sinval * v22.__cosval) - (float)(v22.__sinval * v22.__cosval))
                + (float)(v24 * (float)(v21 + -2.0));
            float v28 = (float)(v27 * v27) + (float)(v26 * v26);
            float *v16 = *v16
                 * sqrtf((float)((float)((float)((float)((float)(v25 * v26) - (float)(v23 * v27)) / v28) * v14)* (float)((float)((float)((float)(v25 * v26) - (float)(v23 * v27)) / v28) * v14))+ (float)((float)((float)((float)((float)((float)(v25 * v27) + (float)(v23 * v26)) / v28) * v14) + 1.0)* (float)((float)((float)((float)((float)(v25 * v27) + (float)(v23 * v26)) / v28) * v14) + 1.0)));
          }
          ++v17;
          ++v16;
          --v15;
        }
        while (v15);
        unint64_t v10 = *((unsigned int *)this + 73);
      }
    }
  }
}

float DspLib::NotchFilterBank::FilterBank::status(uint64_t a1, float *a2)
{
  float result = (float)*(unsigned int *)(a1 + 296);
  *a2 = result;
  return result;
}

double DspLib::NotchFilterBank::FilterBank::latencySamples(DspLib::NotchFilterBank::FilterBank *this)
{
  return 0.0;
}

float DspLib::AlgorithmBase::parameterBounds(DspLib::AlgorithmBase *this, uint64_t a2)
{
  return *(float *)(*((void *)this + 23) + 4 * a2);
}

uint64_t DspLib::NotchFilterBank::FilterBank::numStatus(DspLib::NotchFilterBank::FilterBank *this)
{
  return 1;
}

uint64_t DspLib::AlgorithmBase::setMeteringIsEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2;
  return this;
}

uint64_t std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>,std::reverse_iterator<DspLib::Biquad::ParametricFilter*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 104;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 104;
    std::construct_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter,DspLib::Biquad::ParametricFilter*>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  DspLib::Biquad::SetupWrapper::SetupWrapper((__n128 *)(a1 + 48), (__n128 *)(a2 + 48));
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  return a1;
}

void sub_1BB2B5768(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::__destroy_at[abi:ne180100]<DspLib::Biquad::ParametricFilter,0>(i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x71C71C71C71C71CLL) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x38E38E38E38E38ELL) {
      unint64_t v11 = 0x71C71C71C71C71CLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    float v14 = &v12[36 * v8];
    uint64_t v15 = &v12[36 * v11];
    size_t v16 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v14, v16);
    float v17 = &v14[v16];
    int v19 = (char *)*a1;
    float v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 36);
        long long v21 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v21;
        *(_OWORD *)(v14 - 36) = v20;
        v14 -= 36;
        v18 -= 36;
      }
      while (v18 != v19);
      float v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::NotchFilterBank::FilterBank::AdaptiveFilterStates>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(36 * a2);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    size_t v16 = *(unint64_t **)a5;
  }
  else
  {
    unint64_t v9 = __src;
    float __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *float __src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      float __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      float __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    size_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      unint64_t *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    float *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::vector<DspLib::Biquad::ParametricFilter>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 104 * ((104 * a2 - 104) / 0x68) + 104;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x13B13B13B13B13BLL) {
      unint64_t v11 = 0x276276276276276;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::Biquad::ParametricFilter>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    size_t v16 = &v12[104 * v8];
    float v18 = &v12[104 * v11];
    size_t v14 = 104 * ((104 * a2 - 104) / 0x68) + 104;
    bzero(v16, v14);
    float v17 = &v16[v14];
    std::vector<DspLib::Biquad::ParametricFilter>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BB2B5D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::Biquad::ParametricFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void DspLib::MovingAverage::setLength(DspLib::MovingAverage *this, unint64_t a2)
{
  DspLib::CircularDelay::setLength(this, a2);
  uint64_t v3 = *((void *)this + 1) - *(void *)this;
  float v4 = 1.0;
  if ((unint64_t)v3 >= 5) {
    float v4 = 1.0 / (float)(unint64_t)(v3 >> 2);
  }
  *((float *)this + 9) = v4;
  *((_DWORD *)this + 8) = 0;

  DspLib::CircularDelay::reset(this);
}

char **DspLib::MovingAverage::process(char **result, void *a2, vDSP_Length a3, char *a4, unint64_t a5)
{
  if (a3)
  {
    unint64_t v9 = result;
    DspLib::processKernel(result, a2, a3, a4, a5, (result[1] - *result) >> 2, *((float *)result + 8), *((float *)result + 9));
    *((_DWORD *)v9 + 8) = *(_DWORD *)&a4[4 * a5 - 4];
    return DspLib::CircularDelay::write(v9, (char *)a2, a3);
  }
  return result;
}

float DspLib::processKernel(char **a1, void *a2, vDSP_Length a3, char *__dst, unint64_t a5, unint64_t a6, float a7, float a8)
{
  if (a6)
  {
    uint64_t v14 = a3 - a6;
    if (a3 <= a6)
    {
      DspLib::CircularDelay::read(a1, a6, __dst, a5);
    }
    else
    {
      DspLib::CircularDelay::read(a1, a6, __dst, a6);
      DspLib::copy(a2, v14, &__dst[4 * a5 + -4 * v14]);
    }
    DspLib::subtract((const float *)a2, a3, (const float *)__dst, a5, (float *)__dst);
    if (a3 < 2)
    {
      float result = (float)(*(float *)__dst * a8) + a7;
      *(float *)float __dst = result;
    }
    else
    {
      DspLib::runningSum((float *)__dst, a5, a8, a7);
    }
  }
  else
  {
    DspLib::copy(a2, a3, __dst);
  }
  return result;
}

void DspLib::zeroInputKernel(char **a1, char *a2, vDSP_Length __N, unint64_t a4, float a5, float a6)
{
  if (__N)
  {
    if (a4)
    {
      vDSP_Length v11 = __N - a4;
      if (__N <= a4)
      {
        DspLib::CircularDelay::read(a1, a4, a2, __N);
        DspLib::negate((float *)a2, __N);
      }
      else
      {
        DspLib::CircularDelay::read(a1, a4, a2, a4);
        DspLib::negate((float *)a2, a4);
        DspLib::clear((float *)&a2[4 * __N + -4 * v11], __N - a4);
      }
      if (__N < 2)
      {
        *(float *)a2 = (float)(*(float *)a2 * a6) + a5;
      }
      else
      {
        DspLib::runningSum((float *)a2, __N, a6, a5);
      }
    }
    else
    {
      DspLib::clear((float *)a2, __N);
    }
  }
}

void DspLib::zeroStateKernel(void *__src, unint64_t a2, float *__dst, vDSP_Length a4, unint64_t a5, float a6)
{
  if (a2)
  {
    if (a5)
    {
      vDSP_Length v11 = a2 - a5;
      if (a2 <= a5)
      {
        DspLib::copy(__src, a2, __dst);
      }
      else
      {
        DspLib::copy(__src, a5, __dst);
        DspLib::subtract((const float *)__src + a2 - v11, v11, (const float *)__src, v11, &__dst[a4 - v11]);
      }
      if (a2 < 2)
      {
        *float __dst = *__dst * a6;
      }
      else
      {
        DspLib::runningSum(__dst, a4, a6, 0.0);
      }
    }
    else
    {
      DspLib::copy(__src, a2, __dst);
    }
  }
}

void DspLib::MovingAverage::recalculateState(DspLib::MovingAverage *this)
{
  double v2 = DspLib::recalculateStateKernel(this, (const DspLib::CircularDelay *)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 2));
  *((_DWORD *)this + 8) = LODWORD(v2);
}

double DspLib::recalculateStateKernel(DspLib *this, const DspLib::CircularDelay *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char **)MEMORY[0x1F4188790](this);
  uint64_t v5 = (const float *)((char *)v8 - v4);
  DspLib::CircularDelay::read(v3, v6, (char *)v8 - v4, v6);
  if (!a2) {
    return 0.0;
  }
  *(float *)&double result = DspLib::mean(v5, (vDSP_Length)a2);
  return result;
}

void DspLib::MultiMovingAverage::setLengths(uint64_t *a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  BOOL v6 = a3 != (a1[1] - *a1) >> 4;
  std::vector<DspLib::MultiMovingAverage::LengthEntry>::resize((uint64_t)a1, a3);
  unint64_t v7 = 0;
  if (v3)
  {
    uint64_t v8 = *a1;
    do
    {
      unint64_t v10 = *a2++;
      unint64_t v9 = v10;
      if (v10 != *(void *)v8)
      {
        *(void *)uint64_t v8 = v9;
        BOOL v6 = 1;
      }
      float v11 = 1.0;
      if (v9 >= 2) {
        float v11 = 1.0 / (float)v9;
      }
      *(float *)(v8 + 12) = v11;
      if (v9 > v7) {
        unint64_t v7 = v9;
      }
      v8 += 16;
      --v3;
    }
    while (v3);
  }
  DspLib::CircularDelay::setLength((DspLib::CircularDelay *)(a1 + 3), v7);
  if (v6)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = a1[1];
    while (v12 != v13)
    {
      *(_DWORD *)(v12 + 8) = 0;
      v12 += 16;
    }
    DspLib::CircularDelay::reset((DspLib::CircularDelay *)(a1 + 3));
  }
}

void std::vector<DspLib::MultiMovingAverage::LengthEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<DspLib::MultiMovingAverage::LengthEntry>::__append((void **)a1, a2 - v2);
  }
}

char **DspLib::MultiMovingAverage::process(char **result, void *a2, vDSP_Length a3, uint64_t *a4)
{
  if (a3)
  {
    BOOL v6 = result;
    unint64_t v7 = *result;
    if (result[1] != *result)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = *a4;
      unint64_t v12 = a4[2];
      do
      {
        DspLib::processKernel(v6 + 3, a2, a3, *(char **)(v11 + 8 * v10), v12, *(void *)&v7[v9], *(float *)&v7[v9 + 8], *(float *)&v7[v9 + 12]);
        uint64_t v11 = *a4;
        unint64_t v12 = a4[2];
        unint64_t v7 = *v6;
        uint64_t v13 = v6[1];
        *(_DWORD *)&(*v6)[v9 + 8] = *(_DWORD *)(*(void *)(*a4 + 8 * v10++) + 4 * v12 - 4);
        v9 += 16;
      }
      while (v10 < (v13 - v7) >> 4);
    }
    return DspLib::CircularDelay::write(v6 + 3, (char *)a2, a3);
  }
  return result;
}

void DspLib::MultiMovingAverage::zeroInputResponse(void *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = (char **)(a1 + 3);
    do
    {
      DspLib::zeroInputKernel(v7, *(char **)(*a2 + 8 * v6++), a2[2], *(void *)(v2 + v5), *(float *)(v2 + v5 + 8), *(float *)(v2 + v5 + 12));
      uint64_t v2 = *a1;
      v5 += 16;
    }
    while (v6 < (uint64_t)(a1[1] - *a1) >> 4);
  }
}

void DspLib::MultiMovingAverage::zeroStateResponse(uint64_t *a1, void *__src, unint64_t a3, void *a4)
{
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      DspLib::zeroStateKernel(__src, a3, *(float **)(*a4 + 8 * v10++), a4[2], *(void *)(v4 + v9), *(float *)(v4 + v9 + 12));
      uint64_t v4 = *a1;
      v9 += 16;
    }
    while (v10 < (a1[1] - *a1) >> 4);
  }
}

void DspLib::MultiMovingAverage::recalculateState(DspLib::MultiMovingAverage *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this != v2)
  {
    unint64_t v3 = (DspLib::MultiMovingAverage *)((char *)this + 24);
    do
    {
      double v4 = DspLib::recalculateStateKernel(v3, *(const DspLib::CircularDelay **)v1);
      *(_DWORD *)(v1 + 8) = LODWORD(v4);
      v1 += 16;
    }
    while (v1 != v2);
  }
}

void DspLib::OnePoleSmoother::initialize(DspLib::OnePoleSmoother *this, double a2)
{
  *(double *)this = a2;
  DspLib::Biquad::Filter::initialize((DspLib::OnePoleSmoother *)((char *)this + 8), 1uLL, 1uLL);
  DspLib::OnePoleSmoother::configure(this, *((double *)this + 10), *((double *)this + 11));

  DspLib::Biquad::SetupWrapper::reset((DspLib::OnePoleSmoother *)((char *)this + 56));
}

void DspLib::OnePoleSmoother::configure(DspLib::OnePoleSmoother *this, double a2, double a3)
{
  *((double *)this + 10) = a2;
  long double v5 = exp(-1.0 / (*(double *)this * a2));
  float v6 = 1.0 - v5;
  *(float *)&long double v5 = v5;
  float v7 = v6 * a3;
  float v8 = a3 * 0.0;
  *(float *)uint64_t v9 = v7;
  *(float *)&v9[1] = v8;
  *(float *)&_OWORD v9[2] = v8;
  *(float *)&void v9[3] = -*(float *)&v5;
  void v9[4] = 0;
  DspLib::Biquad::Filter::setCoefficients((uint64_t)this + 8, (uint64_t)v9, 1, 0, 0x41uLL);
}

void DspLib::OnePoleSmoother::process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void std::vector<DspLib::MultiMovingAverage::LengthEntry>::__append(void **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long double v5 = v6;
  float v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = &v7[2 * a2];
      do
      {
        *float v7 = 0;
        v7[1] = 0;
        *((_DWORD *)v7 + 3) = 1065353216;
        v7 += 2;
      }
      while (v7 != v14);
      float v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned int,applesauce::CF::DictionaryRef>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = &v13[16 * v10];
    size_t v16 = &v15[16 * a2];
    float v17 = v15;
    do
    {
      *(void *)float v17 = 0;
      *((void *)v17 + 1) = 0;
      *((_DWORD *)v17 + 3) = 1065353216;
      v17 += 16;
    }
    while (v17 != v16);
    float v18 = &v13[16 * v12];
    long long v20 = (char *)*a1;
    uint64_t v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

void DspLib::DownSampler::process(unsigned int *a1, void *a2, void *a3)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a2[2];
  unint64_t v6 = *a1;
  unsigned int v7 = a1[1];
  unint64_t v8 = v5 % v6;
  if (v7) {
    unsigned int v9 = a1[1];
  }
  else {
    unsigned int v9 = *a1;
  }
  if (v8 + v9 - 1 < v6) {
    unint64_t v10 = v5 / v6;
  }
  else {
    unint64_t v10 = v5 / v6 + 1;
  }
  if (v5 && v10)
  {
    unsigned int v12 = v6 - v7;
    if (v7) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = a2[1];
    if (*a2 == *a3)
    {
      if (v14)
      {
        uint64_t v18 = 0;
        unsigned int v19 = 1;
        do
        {
          MEMORY[0x1F4188790](a1);
          long long v21 = (char *)v26 - v20;
          DspLib::copy(*(void **)(*a2 + 8 * v18), a2[2], (char *)v26 - v20);
          DspLib::copyWithStrides((DspLib *)&v21[4 * v13], (const float *)*a1, *(char **)(*a3 + 8 * v18), (float *)1, v10);
          uint64_t v18 = v19;
          BOOL v17 = a2[1] > (unint64_t)v19++;
        }
        while (v17);
      }
    }
    else if (v14)
    {
      uint64_t v15 = 0;
      unsigned int v16 = 1;
      do
      {
        DspLib::copyWithStrides((DspLib *)(*(void *)(*a2 + 8 * v15) + 4 * v13), (const float *)*a1, *(char **)(*a3 + 8 * v15), (float *)1, v10);
        uint64_t v15 = v16;
        BOOL v17 = a2[1] > (unint64_t)v16++;
      }
      while (v17);
    }
  }
  unsigned int v22 = *a1;
  unsigned int v23 = a1[1] + v8;
  a1[1] = v23;
  BOOL v24 = v23 >= v22;
  unsigned int v25 = v23 - v22;
  if (v24) {
    a1[1] = v25;
  }
  a3[2] = v10;
}

void DspLib::UpSampler::process(unsigned int *a1, void *a2, void *a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a1[1];
  if (v6) {
    uint64_t v7 = *a1 - v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a2[1];
  if (*a2 == *a3)
  {
    if (v8)
    {
      uint64_t v12 = 0;
      unsigned int v13 = 1;
      do
      {
        MEMORY[0x1F4188790](a1);
        uint64_t v15 = (DspLib *)((char *)v16 - v14);
        DspLib::copy(*(void **)(*a2 + 8 * v12), a2[2], (char *)v16 - v14);
        DspLib::clear(*(float **)(*a3 + 8 * v12), a3[2]);
        DspLib::copyWithStrides(v15, (const float *)1, (char *)(*(void *)(*a3 + 8 * v12) + 4 * v7), (float *)*a1, a2[2]);
        uint64_t v12 = v13;
        BOOL v11 = a2[1] > (unint64_t)v13++;
      }
      while (v11);
    }
  }
  else if (v8)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      DspLib::clear(*(float **)(*a3 + 8 * v9), a3[2]);
      DspLib::copyWithStrides(*(DspLib **)(*a2 + 8 * v9), (const float *)1, (char *)(*(void *)(*a3 + 8 * v9) + 4 * v7), (float *)*a1, a2[2]);
      uint64_t v9 = v10;
      BOOL v11 = a2[1] > (unint64_t)v10++;
    }
    while (v11);
  }
  a1[1] = (a3[2] + (unint64_t)a1[1]) % *a1;
}

void DspLib::PolyPhaseInterpolator::setSrcParameters(DspLib::PolyPhaseInterpolator *this, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    int v8 = 78;
LABEL_11:
    printf("DSP Sound assertion in %s at line %d\n", v7, v8);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!a3)
  {
    uint64_t v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    int v8 = 79;
    goto LABEL_11;
  }
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 10) = a3 * a2;
  *((_DWORD *)this + 11) = a3;
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *((void *)this + 7);
  while (v4 != v5)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    if (*(void *)v4 != v6) {
      bzero(*(void **)v4, (v6 - *(void *)v4) & 0xFFFFFFFFFFFFFFFCLL);
    }
    v4 += 24;
  }
  *((_DWORD *)this + 18) = 0;
}

void DspLib::PolyPhaseInterpolator::setCoefficients(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v6 = *a1;
    *((void *)a1 + 1) = (a3 - 1) / v6 + 1;
    uint64_t v7 = a1 + 4;
    std::vector<std::vector<float>>::resize((uint64_t *)a1 + 2, v6);
    uint64_t v8 = *((void *)a1 + 2);
    uint64_t v9 = *((void *)a1 + 3);
    while (v8 != v9)
    {
      std::vector<float>::resize(v8, *((void *)a1 + 1));
      v8 += 24;
    }
    uint64_t v10 = *((void *)a1 + 6);
    uint64_t v11 = *((void *)a1 + 7);
    while (v10 != v11)
    {
      std::vector<float>::resize(v10, *((void *)a1 + 1) + a1[11] + 1);
      v10 += 24;
    }
    uint64_t v12 = *a1;
    if (v12)
    {
      uint64_t v13 = 0;
      unint64_t v14 = *((void *)a1 + 1);
      do
      {
        if (v14)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *(void *)(*v7 + 24 * v13);
          unsigned int v17 = v13;
          do
          {
            int v18 = 0;
            if (a3 > v17) {
              int v18 = *(_DWORD *)(a2 + 4 * v17);
            }
            *(_DWORD *)(v16 + 4 * v15++) = v18;
            v17 += v12;
          }
          while (v14 > v15);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    unint64_t v19 = a1[11] + 1;
    std::vector<float>::resize((uint64_t)(a1 + 20), v19);
  }
}

void DspLib::PolyPhaseInterpolator::process(unsigned int *a1, void *a2, void *a3)
{
  uint64_t v4 = a2[2];
  unint64_t v5 = a3[2];
  unint64_t v6 = *a1;
  if (v5 <= v4 * v6) {
    vDSP_Length v7 = a2[2];
  }
  else {
    vDSP_Length v7 = v4 + 1;
  }
  uint64_t v8 = *((void *)a1 + 6);
  if (*((void *)a1 + 7) != v8)
  {
    uint64_t v10 = a2;
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      int v26 = v12;
      uint64_t v13 = (char **)(v8 + 24 * v11);
      uint64_t v25 = (v13[1] - *v13) >> 2;
      float __dst = *v13;
      DspLib::copy(*(void **)(*v10 + 8 * v11), v10[2], &(*v13)[4 * *((void *)a1 + 1)]);
      if (a3[2])
      {
        unsigned int v14 = 0;
        unsigned int v15 = 0;
        unsigned int v16 = a1[18];
        if (v16) {
          uint64_t v17 = -1;
        }
        else {
          uint64_t v17 = 0;
        }
        int v18 = (const float *)&__dst[4 * v17 + 4];
        do
        {
          vDSP_conv(v18, 1, (const float *)(*(void *)(*((void *)a1 + 2) + 24 * v16) + 4 * *((void *)a1 + 1) - 4), -1, *((float **)a1 + 10), 1, v7, *((void *)a1 + 1));
          unint64_t v19 = *a1;
          unint64_t v20 = (a3[2] + ~(unint64_t)v14) / v19 + 1;
          DspLib::copyWithStrides(*((DspLib **)a1 + 10), (const float *)1, (char *)(*(void *)(*a3 + 8 * v11) + 4 * v14), (float *)v19, v20);
          v15 += v20;
          ++v14;
          BOOL v21 = v16 + 1 >= *a1;
          if (v16 + 1 < *a1) {
            ++v16;
          }
          else {
            unsigned int v16 = 0;
          }
          v18 += v21;
        }
        while (a3[2] > (unint64_t)v15);
      }
      uint64_t v10 = a2;
      uint64_t v22 = a2[2];
      if (v22)
      {
        if (*((void *)a1 + 1) == -1) {
          uint64_t v23 = v25 - v22;
        }
        else {
          uint64_t v23 = *((void *)a1 + 1);
        }
        DspLib::copy(&__dst[4 * v22], v23, __dst);
      }
      unint64_t v11 = (v26 + 1);
      uint64_t v8 = *((void *)a1 + 6);
      int v12 = v26 + 1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 7) - v8) >> 3) > v11);
    unint64_t v5 = a3[2];
    unint64_t v6 = *a1;
  }
  a1[18] = (v5 + a1[18]) % v6;
}

void DspLib::FIRDecimator::setSrcParameters(DspLib::FIRDecimator *this, unint64_t a2, unint64_t a3)
{
  if (!a2)
  {
    unint64_t v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    int v4 = 160;
LABEL_8:
    printf("DSP Sound assertion in %s at line %d\n", v3, v4);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  if (!a3)
  {
    unint64_t v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
    int v4 = 161;
    goto LABEL_8;
  }
  *(void *)this = a2;
  *((void *)this + 4) = a3 / a2 + 1;
  *((void *)this + 5) = a3;

  DspLib::FIRDecimator::reset(this);
}

void DspLib::FIRDecimator::setCoefficients(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3)
  {
    std::vector<float>::resize(a1 + 8, a3);
    unint64_t v6 = *(void **)(a1 + 8);
    if (a3 == (uint64_t)(*(void *)(a1 + 16) - (void)v6) >> 2)
    {
      DspLib::copy(a2, a3, v6);
      DspLib::reverse(*(float **)(a1 + 8), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      if (v7 != v8)
      {
        unint64_t v9 = a3 - 1;
        do
        {
          std::vector<float>::resize(v7, v9 + *(void *)(a1 + 40));
          v7 += 24;
        }
        while (v7 != v8);
      }
    }
    else
    {
      uint64_t v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/SampleRateConverter/dsp/DspLibSampleRateConverter.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v10, 174);
      ++DspLibDebug::mAssertCounter;
    }
  }
}

void *DspLib::FIRDecimator::process(void *result, void *a2, void *a3)
{
  unint64_t v3 = result[9] + a2[2];
  a3[2] = v3 / *result;
  if (a2[2])
  {
    int v4 = result;
    unint64_t v19 = v3 % *result;
    uint64_t v5 = result[6];
    if (result[7] != v5)
    {
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      unsigned int v9 = 0;
      uint64_t v10 = result[9] - *result + ((uint64_t)(result[2] - result[1]) >> 2);
      do
      {
        uint64_t v11 = v5 + 24 * v8;
        int v12 = *(float **)v11;
        uint64_t v13 = (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2;
        double result = DspLib::copy(*(void **)(*v7 + 8 * v8), v7[2], (void *)(*(void *)v11 + 4 * v10));
        if (a3[2])
        {
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          unsigned int v16 = 1;
          do
          {
            *(float *)(*(void *)(*a3 + 8 * v8) + 4 * v14) = DspLib::dotProduct((const float *)v4[1], (uint64_t)(v4[2] - v4[1]) >> 2, &v12[v15]);
            v15 += *v4;
            uint64_t v14 = v16;
          }
          while (a3[2] > (unint64_t)v16++);
          uint64_t v7 = a2;
          if (v10 - v15 + a2[2] == -1) {
            uint64_t v18 = v13 - v15;
          }
          else {
            uint64_t v18 = v10 - v15 + a2[2];
          }
          double result = DspLib::copy(&v12[v15], v18, v12);
        }
        uint64_t v5 = v4[6];
        uint64_t v8 = ++v9;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v4[7] - v5) >> 3) > v9);
    }
    v4[9] = v19;
  }
  return result;
}

void DspLib::SampleAndHoldUpSampler::process(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned int v11 = *((_DWORD *)a1 + 1);
    do
    {
      if (v11)
      {
        if (a5 - v9 >= v11) {
          vDSP_Length v12 = v11;
        }
        else {
          vDSP_Length v12 = a5 - v9;
        }
        DspLib::fill((float *)(a4 + 4 * v9), v12, a1[2]);
        v9 += v12;
        unsigned int v11 = *((_DWORD *)a1 + 1) - v12;
      }
      else
      {
        a1[2] = *(float *)(a2 + 4 * v10++);
        unsigned int v11 = *(_DWORD *)a1;
      }
      *((_DWORD *)a1 + 1) = v11;
    }
    while (v9 < a5);
  }
}

void DspLib::AveragingDecimator::reset(DspLib::AveragingDecimator *this)
{
  std::vector<float>::resize((uint64_t)this + 16, *((void *)this + 5));
  uint64_t v2 = (float *)*((void *)this + 2);
  vDSP_Length v3 = (uint64_t)(*((void *)this + 3) - (void)v2) >> 2;

  DspLib::clear(v2, v3);
}

void DspLib::AveragingDecimator::setSrcFactor(void **this, char *a2, uint64_t a3)
{
  uint64_t v4 = ~a3;
  if (*this != a2 || &a2[v4] != this[5])
  {
    *this = a2;
    std::vector<float>::reserve(this + 2, (unint64_t)(a2 - 1));
    uint64_t v5 = *this;
    this[5] = (char *)*this + v4;
    *((float *)this + 2) = 1.0 / (float)(unint64_t)v5;
    DspLib::AveragingDecimator::reset((DspLib::AveragingDecimator *)this);
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    unsigned int v11 = (char *)a1[1];
    vDSP_Length v12 = v7;
    if (v11 != *a1)
    {
      vDSP_Length v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void DspLib::AveragingDecimator::processKernel(uint64_t a1, void *__src, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  v27[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)a1 == 1)
  {
    uint64_t v10 = *(float **)a4;
    *(void *)(a4 + 8) = a3;
    DspLib::copy(__src, a3, v10);
  }
  else
  {
    unint64_t v14 = (unint64_t)(float)(*(float *)(a1 + 8)
                                  * (float)(unint64_t)(a3
                                                            + ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2)));
    *(void *)(a4 + 8) = v14;
    if (a6 || a3 != *(void *)a1 * v14)
    {
      uint64_t v20 = a6 + a3;
      MEMORY[0x1F4188790](a1);
      uint64_t v22 = (char *)v27 - v21;
      DspLib::copy(v23, a6, (char *)v27 - v21);
      DspLib::copy(__src, a3, &v22[4 * a6]);
      if (v14)
      {
        uint64_t v24 = 0;
        unsigned int v25 = 1;
        do
        {
          *(float *)(*(void *)a4 + 4 * v24) = DspLib::sum((const float *)&v22[4 * *(void *)a1 * v24], *(void *)a1);
          uint64_t v24 = v25;
          BOOL v19 = v14 > v25++;
        }
        while (v19);
      }
      if (a7)
      {
        unint64_t v26 = *(void *)a1 * v14;
        std::vector<float>::resize((uint64_t)a7, v20 - v26);
        if (v20 != v26) {
          DspLib::copy(&v22[4 * v20 + -4 * (v20 - v26)], v20 - v26, *a7);
        }
      }
    }
    else if (v14)
    {
      uint64_t v15 = 0;
      unsigned int v16 = 1;
      do
      {
        uint64_t v17 = *(void *)a1 * v15;
        if (*(void *)a1 == -1) {
          vDSP_Length v18 = a3 - v17;
        }
        else {
          vDSP_Length v18 = *(void *)a1;
        }
        *(float *)(*(void *)a4 + 4 * v15) = DspLib::sum((const float *)__src + v17, v18);
        uint64_t v15 = v16;
        BOOL v19 = v14 > v16++;
      }
      while (v19);
    }
    DspLib::multiply(*(float **)a4, *(void *)(a4 + 8), *(float *)(a1 + 8));
  }
}

void DspLib::AveragingDecimator::zeroInputResponse(uint64_t a1, float *a2, vDSP_Length __N)
{
  DspLib::clear(a2, __N);
  int64_t v5 = *(const float **)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24) - (void)v5;
  if (v6)
  {
    float v7 = *(float *)(a1 + 8);
    *a2 = v7 * DspLib::sum(v5, v6 >> 2);
  }
}

void DspLib::AveragingDecimator::zeroStateResponse(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v8 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2;
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v12[-1] - v9;
  DspLib::clear((float *)((char *)&v12[-1] - v9), v8);
  DspLib::AveragingDecimator::processKernel(a1, a2, a3, (uint64_t)v12, (uint64_t)v10, v8, 0);
}

void DspLib::MeisterStueck::OSCFilter::uninitialize(DspLib::MeisterStueck::OSCFilter *this)
{
  DspLib::Biquad::ParametricFilter::uninitialize(this);

  DspLib::Biquad::ParametricFilter::uninitialize((DspLib::MeisterStueck::OSCFilter *)((char *)this + 104));
}

BOOL DspLib::MeisterStueck::OSCFilter::isInitialized(DspLib::MeisterStueck::OSCFilter *this)
{
  return *(unsigned char *)this && *((unsigned char *)this + 104) != 0;
}

void DspLib::MeisterStueck::OSCFilter::reset(DspLib::MeisterStueck::OSCFilter *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::MeisterStueck::OSCFilter *)((char *)this + 48));

  DspLib::Biquad::SetupWrapper::reset((DspLib::MeisterStueck::OSCFilter *)((char *)this + 152));
}

void DspLib::MeisterStueck::OSCFilter::setParameters(DspLib::Biquad::ParametricFilter *this, uint64_t a2)
{
  if (*(unsigned char *)a2
    && ((v4 = *(float *)(a2 + 16), v5 = *(float *)(a2 + 20), v4 <= 10.0) ? (BOOL v6 = v5 <= 10.0) : (BOOL v6 = 0),
        !v6 && (unsigned int v7 = *(_DWORD *)(a2 + 24)) != 0))
  {
    if (v4 <= 10.0) {
      vDSP_Length v8 = v5 > 10.0;
    }
    else {
      vDSP_Length v8 = (v5 > 10.0) + 1;
    }
    float v9 = (float)((float)v7 * 0.32091) + -0.1;
    float v10 = 1.0
        - expf((float)((float)((float)((float)((float)v7 * (float)v7) * 0.038869)+ (float)((float)((float)((float)v7 * (float)v7) * (float)v7) * -0.00095057))+ (float)((float)v7 * -0.54832))+ 0.0021239);
    DspLib::Biquad::ParametricFilter::initialize(this, *(unsigned int *)(a2 + 4), *(double *)(a2 + 8), v8);
    DspLib::Biquad::ParametricFilter::initialize((DspLib::Biquad::ParametricFilter *)((char *)this + 104), *(unsigned int *)(a2 + 4), *(double *)(a2 + 8), v8);
    float v11 = *(float *)(a2 + 16);
    if (v11 <= 10.0)
    {
      uint64_t v13 = 0;
    }
    else
    {
      unint64_t v12 = ((unint64_t)COERCE_UNSIGNED_INT(v11 / v10) << 32) | 0x10;
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this, v12, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), 0, 0x41uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 104, v12, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), 0, 0x41uLL);
      uint64_t v13 = 1;
    }
    float v14 = *(float *)(a2 + 20);
    if (v14 > 10.0)
    {
      unint64_t v15 = ((unint64_t)COERCE_UNSIGNED_INT(v10 * v14) << 32) | 0x10;
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this, v15, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), v13, 0x41uLL);
      DspLib::Biquad::ParametricFilter::setParametricEQ((uint64_t)this + 104, v15, (double *)(((unint64_t)LODWORD(v9) << 32) | 0x405A3D71), v13, 0x41uLL);
    }
  }
  else
  {
    DspLib::Biquad::ParametricFilter::uninitialize(this);
    DspLib::Biquad::ParametricFilter::uninitialize((DspLib::Biquad::ParametricFilter *)((char *)this + 104));
  }
}

void DspLib::MeisterStueck::OSCFilter::process(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  long long v8 = *(_OWORD *)a4;
  uint64_t v9 = *(void *)(a4 + 16);
  DspLib::Biquad::Filter::process(a1, &v10, &v8);
  long long v10 = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  long long v8 = *(_OWORD *)a5;
  uint64_t v9 = *(void *)(a5 + 16);
  DspLib::Biquad::Filter::process(a1 + 13, &v10, &v8);
}

void DspLib::MeisterStueck::OSCFilter::process(void *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  long long v3 = *(_OWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 16);
  DspLib::Biquad::Filter::process(a1, &v5, &v3);
}

void DspLib::LowFlow::PhysicalModel::setParameters(_DWORD *a1, uint64_t a2)
{
  void v27[2] = *(__CLPK_doublereal *)MEMORY[0x1E4F143B8];
  *a1 = *(_DWORD *)a2;
  float v3 = *(float *)(a2 + 4);
  float v4 = v3 / *(float *)(a2 + 8);
  float v5 = *(float *)(a2 + 12);
  float v6 = *(float *)(a2 + 16);
  float v7 = *(float *)(a2 + 20);
  float v8 = *(float *)(a2 + 24);
  v21[0] = v4 * (float)(v5 + v6);
  v21[1] = v4 * (float)(v7 + v8);
  float v9 = *(float *)(a2 + 28);
  float v10 = *(float *)(a2 + 32);
  void v21[2] = v4 * (float)(v9 + v10);
  float v11 = v3 * v4;
  v20[0] = v5 * v6;
  v20[1] = (float)((float)(v6 * v7) + (float)(v5 * v8)) + (float)(v11 * (float)(v5 + v6));
  _OWORD v20[2] = (float)((float)((float)(v7 * v8) + (float)(v5 * v10)) + (float)(v9 * v6)) + (float)(v11 * (float)(v7 + v8));
  v20[3] = (float)((float)(v7 * v10) + (float)(v9 * v8)) + (float)(v11 * (float)(v9 + v10));
  v20[4] = v9 * v10;
  v27[0] = 0.0;
  v27[1] = 0.0;
  v26[0] = 0.0;
  v26[1] = 0.0;
  v28.realp = v26;
  v28.imagp = (double *)2;
  DspLib::roots((DspLib *)v21, (const float *)3, v27, v28);
  long long v24 = 0u;
  *(_OWORD *)unsigned int v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  v29.realp = (double *)&v22;
  v29.imagp = (double *)4;
  DspLib::roots((DspLib *)v20, (const float *)5, (__CLPK_doublereal *)&v24, v29);
  uint64_t v12 = 0;
  float v13 = v27[0] * -2.0;
  float v14 = v26[0] * v26[0] + v27[0] * v27[0];
  *(float *)&v19[1] = v13;
  *(float *)&v19[2] = v14;
  float v15 = *(double *)&v24 * -2.0;
  float v16 = *(double *)&v22 * *(double *)&v22 + *(double *)&v24 * *(double *)&v24;
  *(float *)&void v19[3] = v15;
  *(float *)&_OWORD v19[4] = v16;
  v19[0] = 1065353216;
  void v19[5] = 0;
  *(float *)&v19[6] = v21[0] / v20[0];
  v19[7] = 0;
  float v17 = v25[0] * -2.0;
  float v18 = *(double *)&v23 * *(double *)&v23 + v25[0] * v25[0];
  *(float *)&v19[8] = v17;
  *(float *)&v19[9] = v18;
  do
  {
    DspLib::Biquad::Design::bilinearTransformStoZUnwarped((float *)&v19[v12], 48000.0);
    v12 += 5;
  }
  while (v12 != 10);
  DspLib::Biquad::Filter::setCoefficients((uint64_t)(a1 + 2), (uint64_t)v19, 2, 0, 0x41uLL);
}

void DspLib::LowFlow::PressureAnalyzer::initialize(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 16) = a3;
  if (a3) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 4128);
  *(void *)(a1 + 4128) = 0;
  if (v4) {
    MEMORY[0x1C185D370](v4, 0x1000C40BAFFE814);
  }
  *(_DWORD *)(a1 + 4984) = 1065353216;
  *(void *)(a1 + 5012) = 0;

  DspLib::clear((float *)(a1 + 5024), 0x63uLL);
}

uint64_t DspLib::LowFlow::PressureAnalyzer::updatePressureMapping(DspLib::LowFlow::PressureAnalyzer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, vDSP_Length a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = *MEMORY[0x1E4F143B8];
  std::vector<float>::resize((uint64_t)this + 4144, (*((void *)this + 1) >> 1) + 1);
  if (*((unsigned char *)this + 16)) {
    std::vector<float>::resize((uint64_t)this + 4168, (*((void *)this + 1) >> 1) + 1);
  }
  else {
    *((void *)this + 522) = *((void *)this + 521);
  }
  float v13 = DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::Transform(&a9, *((void *)this + 1));
  MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = *((void *)this + 1);
  var8.realp = v17;
  var8.imagp = (float *)(((unint64_t)&v19 - v15) & 0xFFFFFFFFFFFFFFC0);
  unint64_t vars8 = v16 >> 1;
  DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(&a9, (DSPComplex *)this + 4, v16, &var8);
  DspLib::FFT::amplitude((uint64_t)&var8, *((float **)this + 518), (uint64_t)(*((void *)this + 519) - *((void *)this + 518)) >> 2);
  DspLib::multiply(*((float **)this + 518), (uint64_t)(*((void *)this + 519) - *((void *)this + 518)) >> 2, 0.5);
  if (*((unsigned char *)this + 16))
  {
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::process<(DspLib::FFT::Direction)1>(&a9, *((DSPComplex **)this + 516), *((void *)this + 1), &var8);
    DspLib::FFT::amplitude((uint64_t)&var8, *((float **)this + 521), (uint64_t)(*((void *)this + 522) - *((void *)this + 521)) >> 2);
    DspLib::multiply(*((float **)this + 521), (uint64_t)(*((void *)this + 522) - *((void *)this + 521)) >> 2, *((float *)this + 1034) * 0.5);
  }
  return DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform((uint64_t)&a9);
}

void sub_1BB2B800C(_Unwind_Exception *exception_object)
{
}

float DspLib::LowFlow::PressureAnalyzer::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(void *)(a1 + 8) != a4)
  {
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a4;
    double v7 = (double)a4 / 48000.0;
    do
    {
      v52[v6] = v7 * DspLib::bark2Hz((DspLib *)a1, (double)v6 * 0.25);
      ++v6;
    }
    while (v6 != 99);
    double v8 = v52[0];
    unint64_t v9 = vcvtad_u64_f64(v52[0]);
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    v51[0] = v9;
    uint64_t v10 = 1;
    unint64_t v11 = v9;
    do
    {
      double v12 = v52[v10];
      unint64_t v13 = vcvtad_u64_f64(v12 - v8);
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      v11 += v13;
      v51[v10++] = v11;
      double v8 = v12;
    }
    while (v10 != 99);
    uint64_t v14 = 0;
    v50[0] = v9;
    int64x2_t v15 = vdupq_n_s64(1uLL);
    do
    {
      int8x16_t v16 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)&v52[v14 + 1]));
      int8x16_t v17 = (int8x16_t)vaddq_s64(*(int64x2_t *)&v51[v14], v15);
      *(int8x16_t *)&v50[v14 + 1] = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v17, (uint64x2_t)v16), v17, v16);
      v14 += 2;
    }
    while (v14 != 98);
    uint64_t v18 = 0;
    int8x16_t v19 = (int8x16_t)vdupq_n_s64(v9);
    do
    {
      int64x2_t v20 = *(int64x2_t *)&v50[v18 + 1];
      *(int64x2_t *)&__src[v18 + 99] = vsubq_s64(v20, (int64x2_t)vextq_s8(v19, (int8x16_t)v20, 8uLL));
      v18 += 2;
      int8x16_t v19 = (int8x16_t)v20;
    }
    while (v18 != 98);
    __src[197] = v50[98];
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    uint64_t v21 = 0;
    uint64_t v22 = 1;
    __src[0] = 1;
    do
    {
      v22 += __src[v21 + 99];
      __src[++v21] = v22;
    }
    while (v21 != 98);
    memcpy((void *)(a1 + 4192), __src, 0x318uLL);
    DspLib::LowFlow::PressureAnalyzer::updatePressureMapping((DspLib::LowFlow::PressureAnalyzer *)a1, v23, v24, v25, v26, v27, v28, v29, v48, __src[0], __src[1], __src[2]);
  }
  int v30 = 24 * *(_DWORD *)a1;
  float v31 = *(float *)(a2 + 4 * (v30 + 10));
  float v32 = *(float *)(a2 + 4 * (v30 + 11));
  if (v31 <= v32)
  {
    *(float *)(a1 + 4988) = v31;
    *(float *)(a1 + 4992) = v32;
  }
  else
  {
    float v31 = *(float *)(a1 + 4988);
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unsigned int v35 = 0;
  float v36 = fabsf(v31);
  uint64_t v37 = a1 + 4192;
  float v38 = (float)*(unint64_t *)(a1 + 8);
  do
  {
    uint64_t v39 = *(void *)(v37 + 8 * v33);
    float v40 = vabds_f32(v31, (float)(unint64_t)(48000 * v34) / v38);
    if (v40 < v36)
    {
      unsigned int v35 = v33;
      float v36 = v40;
    }
    ++v33;
    uint64_t v34 = v39;
  }
  while (v33 != 99);
  uint64_t v41 = 0;
  unsigned int v42 = 0;
  if (v35 >= 0x62) {
    unsigned int v35 = 98;
  }
  *(_DWORD *)(a1 + 4996) = v35;
  float v43 = *(float *)(a1 + 4992);
  float v44 = fabsf(v43);
  do
  {
    float v45 = vabds_f32(v43, (float)(unint64_t)(48000 * *(void *)(v37 + 8 * v41)) / v38);
    if (v45 < v44)
    {
      float v44 = v45;
      unsigned int v42 = v41;
    }
    ++v41;
  }
  while (v41 != 99);
  if (v42 <= v35 + 1) {
    unsigned int v46 = v35 + 1;
  }
  else {
    unsigned int v46 = v42;
  }
  *(_DWORD *)(a1 + 5000) = v46;
  *(float *)(a1 + 5004) = 1.0
                        - expf(-1.0/ (float)((float)((float)(*(float *)(a2 + 4 * (v30 + 19)) * 1000.0) * 375.0)/ 1000.0));
  float result = 1.0
         - expf(-1.0 / (float)((float)((float)(*(float *)(a2 + 4 * (v30 + 20)) * 1000.0) * 375.0)
                             / 1000.0));
  *(float *)(a1 + 5008) = result;
  return result;
}

uint64_t DspLib::LowFlow::PressureAnalyzer::setPressureMapping(uint64_t a1, const void *a2, const void *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, vDSP_Length a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  memcpy((void *)(a1 + 32), a2, 0x1000uLL);
  int v22 = *(unsigned __int8 *)(a1 + 16);
  if (a3 && *(unsigned char *)(a1 + 16))
  {
    memcpy(*(void **)(a1 + 4128), a3, 0x1000uLL);
    int v22 = *(unsigned __int8 *)(a1 + 16);
  }
  if (a4 && v22) {
    *(_DWORD *)(a1 + 4136) = *a4;
  }

  return DspLib::LowFlow::PressureAnalyzer::updatePressureMapping((DspLib::LowFlow::PressureAnalyzer *)a1, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

void DspLib::LowFlow::PressureAnalyzer::process(const float **this, const float *a2, vDSP_Length a3, const float *a4, unint64_t a5, int a6)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](this);
  unint64_t v11 = (float *)((char *)v36 - v10);
  DspLib::multiply(v13, a3, *(const float **)(v12 + 4144), (uint64_t)(*(void *)(v12 + 4152) - *(void *)(v12 + 4144)) >> 2, (float *)((char *)v36 - v10));
  if (a4)
  {
    MEMORY[0x1F4188790](v14);
    uint64_t v16 = (float *)((char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    DspLib::multiply(a4, a3, this[521], this[522] - this[521], v16);
    DspLib::add(v11, a3, v16);
  }
  float v17 = DspLib::sum(v11, a3);
  DspLib::square(v11, a3);
  *((float *)this + 1246) = *((float *)this + 1246) * 0.1;
  *((float *)this + 1246) = *((float *)this + 1246)
                          + (float)((float)((float)(sqrtf((float)a3) * sqrtf(DspLib::sum(v11, a3)))
                                          / (float)(v17 + 0.000000001))
                                  * 0.9);
  if (a6)
  {
    unsigned int v18 = 0;
    uint64_t v19 = (char *)(this + 524);
    uint64_t v20 = (char *)(this + 628);
    unsigned int v21 = 99;
  }
  else
  {
    unsigned int v18 = *((_DWORD *)this + 1249);
    unsigned int v21 = *((_DWORD *)this + 1250);
    uint64_t v19 = (char *)(this + 524);
    uint64_t v20 = (char *)(this + 628);
    if (v18 > 0x49) {
      goto LABEL_7;
    }
  }
  DspLib::copy(&v11[v18], 74 - v18, (char *)this + 4 * v18 + 5024);
LABEL_7:
  if (v18 <= 0x4A) {
    unsigned int v22 = 74;
  }
  else {
    unsigned int v22 = v18;
  }
  if (v22 < v21)
  {
    unsigned int v23 = v21 - v22;
    uint64_t v24 = (float *)&v20[4 * v22];
    uint64_t v25 = &v19[8 * v22];
    do
    {
      vDSP_meanv(&v11[*((void *)v25 - 1)], 1, v24++, *(void *)v25 - *((void *)v25 - 1));
      v25 += 8;
      --v23;
    }
    while (v23);
  }
  float v26 = *((float *)this + 1246);
  float Median = DspLib::LowFlow::getMedian((DspLib::LowFlow *)&v20[4 * *((unsigned int *)this + 1249)], (const float *)(*((_DWORD *)this + 1250) - *((_DWORD *)this + 1249)));
  float v29 = DspLib::power2dBSafe(v28, Median + 1.0e-30, 1.0e-20) + 97.0;
  float v30 = 1.0;
  if (v26 >= 1.0) {
    float v30 = v26;
  }
  if (v30 <= 4.0) {
    float v31 = (float)(v30 + -1.0) * 4.0;
  }
  else {
    float v31 = 12.0;
  }
  float v32 = v29 - v31;
  float v33 = *((float *)this + 1253);
  if ((float)(v33 + 3.0) < v32 || (float v32 = v32 + 12.0, v32 < v33))
  {
    *((float *)this + 1253) = v32;
    float v33 = v32;
  }
  float v34 = *((float *)this + 1254);
  uint64_t v35 = 5008;
  if (v34 < v33) {
    uint64_t v35 = 5004;
  }
  *((float *)this + 1254) = v34 + (float)(*(float *)((char *)this + v35) * (float)(v33 - v34));
}

void *DspLib::LowFlow::PressureAnalyzer::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (float *)(a1 + 5024);
  uint64_t v5 = -396;
  do
  {
    float v6 = *(float *)(a1 + v5 + 5420);
    if (v6 < 1.0e-30) {
      float v6 = 1.0e-30;
    }
    *(float *)(a1 + v5 + 5420) = v6;
    v5 += 4;
  }
  while (v5);
  DspLib::add((float *)(a1 + 5024), 0x63uLL, 1.0e-30);
  DspLib::power2dB(v4, 0x63uLL, 1.0);
  DspLib::add(v4, 0x63uLL, 97.0);
  double v7 = (void *)(a2 + 4 * (750 * *(_DWORD *)a1 + 324));

  return DspLib::copy(v4, 99, v7);
}

double DspLib::LowFlow::AnalysisPath::initialize(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  DspLib::Biquad::Filter::initialize((DspLib::Biquad::Filter *)(a1 + 32), 1uLL, 2uLL);
  DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(a1 + 80));
  *(unsigned char *)(a1 + 4) = a3;
  DspLib::LowFlow::PressureAnalyzer::initialize(a1 + 176, *(_DWORD *)a1, a3);

  return DspLib::LowFlow::AnalysisPath::reset((DspLib::LowFlow::AnalysisPath *)a1);
}

double DspLib::LowFlow::AnalysisPath::reset(DspLib::LowFlow::AnalysisPath *this)
{
  DspLib::Biquad::SetupWrapper::reset((DspLib::LowFlow::AnalysisPath *)((char *)this + 80));
  uint64_t v2 = (DspLib::FFT::BufferedForwardSTFT *)*((void *)this + 16);
  if (v2) {
    DspLib::FFT::BufferedForwardSTFT::reset(v2);
  }
  float v3 = (DspLib::FFT::BufferedForwardSTFT *)*((void *)this + 17);
  if (v3) {
    DspLib::FFT::BufferedForwardSTFT::reset(v3);
  }
  DspLib::clear(*((float **)this + 18), (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2);
  *((_DWORD *)this + 1290) = 1065353216;
  *(void *)((char *)this + 5188) = 0;
  DspLib::clear((float *)this + 1300, 0x63uLL);
  double result = 5.27765581e13;
  *((void *)this + 2) = 0x42C8000000000000;
  *((unsigned char *)this + 5600) = 0;
  return result;
}

uint64_t DspLib::LowFlow::AnalysisPath::uninitialize(DspLib::LowFlow::AnalysisPath *this)
{
  DspLib::Biquad::Filter::uninitialize((DspLib::LowFlow::AnalysisPath *)((char *)this + 32));
  uint64_t v2 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v2) {
    std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100]((uint64_t)this + 136, v2);
  }
  uint64_t v3 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v3) {
    std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100]((uint64_t)this + 128, v3);
  }
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 0;
  *((void *)this + 544) = *((void *)this + 543);
  uint64_t result = *((void *)this + 538);
  *((void *)this + 538) = 0;
  if (result) {
    uint64_t result = MEMORY[0x1C185D370](result, 0x1000C40BAFFE814);
  }
  *((void *)this + 19) = *((void *)this + 18);
  *((void *)this + 14) = *((void *)this + 13);
  *((unsigned char *)this + 4) = 0;
  *((void *)this + 1) = 0;
  return result;
}

float DspLib::LowFlow::AnalysisPath::setParameters(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(void *)(a1 + 8) != a4)
  {
    *(void *)(a1 + 8) = a4;
    std::vector<float>::resize(a1 + 104, a4);
    DspLib::makePeriodicHannWindow(*(_DWORD **)(a1 + 104), (uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 2);
    uint64_t v5 = *(float **)(a1 + 104);
    vDSP_Length v6 = (uint64_t)(*(void *)(a1 + 112) - (void)v5) >> 2;
    float v7 = DspLib::norm(v5, v6);
    DspLib::multiply(v5, v6, 1.0 / v7);
    std::vector<float>::resize(a1 + 144, (*(void *)(a1 + 8) >> 1) + 1);
    operator new();
  }
  uint64_t v8 = a1 + 176;
  unint64_t v9 = *(void *)(a1 + 8);

  return DspLib::LowFlow::PressureAnalyzer::setParameters(v8, a2, a3, v9);
}

void sub_1BB2B8A74(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10E0C4037C7F6FFLL);
  _Unwind_Resume(a1);
}

uint64_t DspLib::LowFlow::AnalysisPath::setModelParameters(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, vDSP_Length a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  DspLib::LowFlow::PhysicalModel::setParameters((_DWORD *)(a1 + 24), a2);

  return DspLib::LowFlow::PressureAnalyzer::setPressureMapping(a1 + 176, a3, a4, a5, v16, v17, v18, v19, a9, a10, a11, a12);
}

unint64_t DspLib::LowFlow::AnalysisPath::process(DspLib::LowFlow::AnalysisPath *this, const float *a2, vDSP_Length a3, float *a4, int a5)
{
  uint64_t vars8 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (char *)this + 5600;
  *((unsigned char *)this + 5600) = 0;
  uint64_t v9 = *((void *)this + 16);
  unint64_t v10 = *(void *)(v9 + 80);
  unint64_t v11 = *(void *)(v9 + 16);
  if (v10 >= v11) {
    unint64_t v10 = 0;
  }
  vDSP_Length v12 = v11 - v10;
  if (v12 >= a3) {
    vDSP_Length v13 = a3;
  }
  else {
    vDSP_Length v13 = v12;
  }
  MEMORY[0x1F4188790](this);
  uint64_t v15 = (char *)&v48 - v14;
  DspLib::multiply(v17, v13, (float *)((char *)&v48 - v14), *(float *)(v16 + 24));
  DspLib::Biquad::Filter::process((void *)this + 4, (uint64_t)v15, v13, (uint64_t)v15, v13);
  MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v19);
  v51.realp = v21;
  v51.imagp = (float *)(((unint64_t)&v48 - v20) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v52 = v22;
  unint64_t v23 = DspLib::FFT::BufferedForwardSTFT::addInput(*((void *)this + 16), v15, v13, &v51);
  unint64_t v24 = v23;
  if (a4)
  {
    MEMORY[0x1F4188790](v23);
    MEMORY[0x1F4188790](v25);
    uint64_t v27 = *((void *)this + 1) >> 1;
    v49.realp = v28;
    v49.imagp = (float *)(((unint64_t)&v48 - v26) & 0xFFFFFFFFFFFFFFC0);
    uint64_t v50 = v27;
    if (DspLib::FFT::BufferedForwardSTFT::addInput(*((void *)this + 17), a4, v13, &v49) == v24)
    {
      float v29 = (void *)*((void *)this + 16);
      if (v29[11])
      {
        uint64_t v30 = 0;
        uint64_t v31 = v29[8] + 4 * *v29 - 4 * v29[2];
        float v32 = 0.0;
        do
        {
          float v33 = DspLib::rms((const float *)(v31 + v30), 8uLL);
          if (v33 > v32) {
            float v32 = v33;
          }
          v30 += 32;
        }
        while (v30 != 512);
        DspLib::FFT::amplitude((uint64_t)&v51, *((float **)this + 18), (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2);
        MEMORY[0x1F4188790](v34);
        float v36 = (float *)((char *)&v48 - ((v35 + 19) & 0xFFFFFFFFFFFFFFF0));
        DspLib::FFT::amplitude((uint64_t)&v49, v36, (*((void *)this + 1) >> 1) + 1);
        DspLib::LowFlow::PressureAnalyzer::process((const float **)this + 22, *((const float **)this + 18), (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2, v36, v37, a5);
        *((float *)this + 4) = v32;
        *((_DWORD *)this + 5) = v38;
        unsigned char *v8 = 1;
      }
    }
    else
    {
      float v47 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/LowFlow/dsp/DspLibLowFlowAnalysisPath.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v47, 515);
      ++DspLibDebug::mAssertCounter;
    }
  }
  else
  {
    uint64_t v39 = (void *)*((void *)this + 16);
    if (v39[11])
    {
      uint64_t v40 = 0;
      uint64_t v41 = v39[8] + 4 * *v39 - 4 * v39[2];
      float v42 = 0.0;
      do
      {
        float v43 = DspLib::rms((const float *)(v41 + v40), 8uLL);
        if (v43 > v42) {
          float v42 = v43;
        }
        v40 += 32;
      }
      while (v40 != 512);
      DspLib::FFT::amplitude((uint64_t)&v51, *((float **)this + 18), (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2);
      DspLib::LowFlow::PressureAnalyzer::process((const float **)this + 22, *((const float **)this + 18), (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2, 0, v44, a5);
      *((float *)this + 4) = v42;
      *((_DWORD *)this + 5) = v45;
      unsigned char *v8 = 1;
    }
  }
  return v24;
}

void *DspLib::LowFlow::AnalysisPath::status(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 4 * (750 * *(_DWORD *)a1 + 2));
  unint64_t v5 = *(void *)(a1 + 8);
  DspLib::copy(*(void **)(a1 + 144), (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2, v4);
  DspLib::clear((float *)v4 + (v5 >> 1) + 1, 320 - (v5 >> 1));

  return DspLib::LowFlow::PressureAnalyzer::status(a1 + 176, a2);
}

float DspLib::LowFlow::getMedian(DspLib::LowFlow *this, const float *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1.0;
  }
  unsigned int v2 = a2;
  MEMORY[0x1F4188790](this);
  uint64_t v4 = (char *)v9 - v3;
  DspLib::copy(v5, v6, (char *)v9 - v3);
  std::__sort<std::__less<float,float> &,float *>();
  unsigned int v7 = v2 >> 1;
  if (v2) {
    return *(float *)&v4[4 * v7];
  }
  else {
    return (float)(*(float *)&v4[4 * v7 - 4] + *(float *)&v4[4 * v7]) * 0.5;
  }
}

void std::default_delete<DspLib::FFT::BufferedForwardSTFT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 40);
    if (v3)
    {
      *(void *)(a2 + 48) = v3;
      operator delete(v3);
    }
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(a2);
    JUMPOUT(0x1C185D370);
  }
}

DspLib::MeisterStueck::Kernel::Algorithm *DspLib::MeisterStueck::Kernel::Algorithm::Algorithm(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  uint64_t v2 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::MeisterStueck::Kernel::Parameters::kDefault, 0x19uLL, (uint64_t)&DspLib::MeisterStueck::Kernel::Parameters::kMinimum, 25, (uint64_t)&DspLib::MeisterStueck::Kernel::Parameters::kMaximum, 25);
  *(void *)uint64_t v2 = &unk_1F14A70C8;
  *(_OWORD *)(v2 + 216) = xmmword_1BB873AA0;
  *(_DWORD *)(v2 + 232) = 1;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_DWORD *)(v2 + 304) = 0;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(unsigned char *)(v2 + 416) = 0;
  *(_DWORD *)(v2 + 420) = 0;
  *(void *)(v2 + 320) = 0;
  *(void *)(v2 + 328) = 0;
  *(void *)(v2 + 312) = 0;
  *(unsigned char *)(v2 + 336) = 0;
  *(void *)(v2 + 408) = &unk_1F14A84D8;
  *(unsigned char *)(v2 + 424) = 0;
  *(_OWORD *)(v2 + 696) = 0u;
  *(_OWORD *)(v2 + 712) = 0u;
  *(_OWORD *)(v2 + 664) = 0u;
  *(_OWORD *)(v2 + 680) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_OWORD *)(v2 + 528) = 0u;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_OWORD *)(v2 + 560) = 0u;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_OWORD *)(v2 + 608) = 0u;
  *(unsigned char *)(v2 + 624) = 0;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_OWORD *)(v2 + 505) = 0u;
  *(_DWORD *)(v2 + 728) = 1065353216;
  *(void *)(v2 + 988) = 0;
  *(_DWORD *)(v2 + 764) = 0;
  *(_OWORD *)(v2 + 732) = 0u;
  *(_OWORD *)(v2 + 748) = 0u;
  *((float *)this + 249) = DspLib::dB2Amp((DspLib *)v2, -100.0);
  *((void *)this + 125) = 0;
  *((_DWORD *)this + 252) = 1065353216;
  *(_OWORD *)((char *)this + 1012) = 0u;
  *(_OWORD *)((char *)this + 1028) = xmmword_1BB873AB0;
  *((_DWORD *)this + 261) = 1065353216;
  *((_WORD *)this + 524) = 0;
  *(void *)((char *)this + 1052) = 0;
  return this;
}

void sub_1BB2B9224(_Unwind_Exception *a1)
{
  unsigned int v7 = (void *)v1[93];
  if (v7)
  {
    v1[94] = v7;
    operator delete(v7);
  }
  DspLib::MeisterStueck::OSCFilter::~OSCFilter(v5);
  DspLib::AnalyticSignalTransformAllpass::~AnalyticSignalTransformAllpass(v4);
  DspLib::Biquad::Filter::~Filter(v3);
  DspLib::PolyPhaseInterpolator::~PolyPhaseInterpolator(v2);
  void *v1 = &unk_1F14A87D8;
  uint64_t v8 = (void *)v1[4];
  if (v8)
  {
    v1[5] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void DspLib::MeisterStueck::OSCFilter::~OSCFilter(DspLib::MeisterStueck::OSCFilter *this)
{
  uint64_t v4 = (void **)((char *)this + 184);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::OSCFilter *)((char *)this + 152));
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)((char *)this + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::OSCFilter *)((char *)this + 48));
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void DspLib::AnalyticSignalTransformAllpass::~AnalyticSignalTransformAllpass(DspLib::AnalyticSignalTransformAllpass *this)
{
  *(void *)this = &unk_1F14A84D8;
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 64));
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14A84D8;
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::AnalyticSignalTransformAllpass *)((char *)this + 64));
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x1C185D370);
}

uint64_t DspLib::MeisterStueck::Kernel::Algorithm::initialize(DspLib::MeisterStueck::Kernel::Algorithm *this, int a2, double a3)
{
  *((unsigned char *)this + 8) = 1;
  (*(void (**)(DspLib::MeisterStueck::Kernel::Algorithm *))(*(void *)this + 128))(this);
  return 1;
}

void DspLib::MeisterStueck::Kernel::Algorithm::uninitialize(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 94) = *((void *)this + 93);
  DspLib::Biquad::Filter::uninitialize((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 336));
  DspLib::AnalyticSignalTransformAllpass::uninitialize((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 408));

  DspLib::MeisterStueck::OSCFilter::uninitialize((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 520));
}

void DspLib::MeisterStueck::Kernel::Algorithm::reset(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v2 = v1;
    DspLib::AnalyticSignalTransformAllpass::reset((DspLib::AnalyticSignalTransformAllpass *)(v1 + 408));
    DspLib::Biquad::SetupWrapper::reset((DspLib::Biquad::SetupWrapper *)(v2 + 384));
    *(_DWORD *)(v2 + 220) = 0;
    *(_DWORD *)(v2 + 228) = 0;
    uint64_t v3 = *(void *)(v2 + 280);
    uint64_t v4 = *(void *)(v2 + 288);
    while (v3 != v4)
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (*(void *)v3 != v5) {
        bzero(*(void **)v3, (v5 - *(void *)v3) & 0xFFFFFFFFFFFFFFFCLL);
      }
      v3 += 24;
    }
    *(_DWORD *)(v2 + 304) = 0;
    DspLib::MeisterStueck::OSCFilter::reset((DspLib::MeisterStueck::OSCFilter *)(v2 + 520));
    DspLib::clear(*(float **)(v2 + 744), (uint64_t)(*(void *)(v2 + 752) - *(void *)(v2 + 744)) >> 2);
    *(void *)(v2 + 1008) = 1065353216;
    *(void *)(v2 + 1016) = 0;
    *(_DWORD *)(v2 + 1028) = 1065353216;
    *(void *)(v2 + 1032) = 1065353216;
    *(_DWORD *)(v2 + 1044) = 1065353216;
    DspLib::fill(__C, 0x400uLL, 1.0);
    DspLib::Biquad::Filter::process((void *)(v2 + 336), (uint64_t)__C, 1024, (uint64_t)__C, 1024);
    uint64_t v6 = *(void *)(v2 + 280);
    for (uint64_t i = *(void *)(v2 + 288); v6 != i; v6 += 24)
    {
      uint64_t v8 = *(void *)(v6 + 8);
      if (*(void *)v6 != v8) {
        memset_pattern16(*(void **)v6, &unk_1BB873A60, ((v8 - *(void *)v6 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      }
    }
    *(_DWORD *)(v2 + 1052) = 0;
  }
  else
  {
    uint64_t v9 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueckKernel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v9, 42);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (*(float *)(v5 + 20) >= 0.5 && *(float *)(v5 + 96) >= 0.5)
    {
      if (!*(unsigned char *)(a1 + 416)) {
        DspLib::AnalyticSignalTransformAllpass::initialize((DspLib::AnalyticSignalTransformAllpass *)(a1 + 408), 1u);
      }
    }
    else
    {
      DspLib::AnalyticSignalTransformAllpass::uninitialize((DspLib::AnalyticSignalTransformAllpass *)(a1 + 408));
    }
    uint64_t v6 = *(float **)(a1 + 32);
    DspLib::MeisterStueck::Kernel::Algorithm::createGainTable((DspLib::MeisterStueck::Kernel::Algorithm *)a1, v6[4], v6[9], v6[10], v6[12], v6[14], v6[13], v6[20], v6[21], v6[1]);
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = vcvtas_u32_f32(*(float *)(v8 + 64));
    if (v9 <= 1) {
      unsigned int v9 = 1;
    }
    *(_DWORD *)(a1 + 732) = v9;
    unsigned int v10 = vcvtad_u64_f64(*(double *)(a1 + 16) * *(float *)(v8 + 28) / 1000.0 / (double)v9);
    unsigned int v11 = v10 | 1;
    if ((v10 | 1) == *(_DWORD *)(a1 + 1004)) {
      goto LABEL_20;
    }
    vDSP_Length v12 = (uint64_t *)(a1 + 744);
    uint64_t v13 = (*(void *)(a1 + 752) - *(void *)(a1 + 744)) >> 2;
    unint64_t v14 = (int)((v10 & 0xFFFFFFFE) + (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1));
    std::vector<float>::resize(a1 + 744, v14);
    if (v13)
    {
      if (v11 > *(_DWORD *)(a1 + 1004) && (int)v14 > (int)v13)
      {
        uint64_t v16 = *v12;
        uint64_t v17 = (_DWORD *)(*v12 + 4 * (int)v13);
        int v18 = ~v13 + v13;
        unint64_t v19 = v14 - (int)v13;
        do
        {
          *v17++ = *(_DWORD *)(v16 + 4 * (v18 & ~(v18 >> 31)));
          --v18;
          --v19;
        }
        while (v19);
      }
    }
    else
    {
      DspLib::clear(*(float **)(a1 + 744), (uint64_t)(*(void *)(a1 + 752) - *(void *)(a1 + 744)) >> 2);
    }
    *(_DWORD *)(a1 + 1004) = v11;
    unsigned int v9 = *(_DWORD *)(a1 + 732);
    if (v9)
    {
LABEL_20:
      *(_DWORD *)(a1 + 216) = v9;
      *(_DWORD *)(a1 + 220) = 0;
      *(_DWORD *)(a1 + 224) = v9;
      *(_DWORD *)(a1 + 228) = 0;
    }
    double v20 = *(double *)(a1 + 16);
    unsigned int v21 = vcvtad_u64_f64(v20 / 1000.0);
    if (v21 <= 1) {
      int v22 = 1;
    }
    else {
      int v22 = v21;
    }
    int v23 = v22 + 2 * v9 - 2;
    if (v9 != *(_DWORD *)(a1 + 736) || *(_DWORD *)(a1 + 740) != v23)
    {
      MEMORY[0x1F4188790](v7);
      uint64_t v28 = (float *)&v50[-v27];
      int v29 = *(_DWORD *)(a1 + 732);
      if (v25 + (unint64_t)(2 * v29) >= v26) {
        unint64_t v30 = v26;
      }
      else {
        unint64_t v30 = v25 + (2 * v29);
      }
      DspLib::makeLinearInterpolatorAndRaisedCosineCoeffs(v28, v30, v29, v24);
      int v31 = *(_DWORD *)(a1 + 732);
      unint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
      DspLib::PolyPhaseInterpolator::setSrcParameters((DspLib::PolyPhaseInterpolator *)(a1 + 232), v31, v32 / *(unsigned int *)(a1 + 732) + 1);
      DspLib::PolyPhaseInterpolator::setCoefficients((unsigned int *)(a1 + 232), (uint64_t)v28, v30);
      uint64_t v33 = *(void *)(a1 + 280);
      for (uint64_t i = *(void *)(a1 + 288); v33 != i; v33 += 24)
      {
        uint64_t v35 = *(void *)(v33 + 8);
        if (*(void *)v33 != v35) {
          memset_pattern16(*(void **)v33, &unk_1BB873A60, ((v35 - *(void *)v33 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        }
      }
      *(_DWORD *)(a1 + 736) = *(_DWORD *)(a1 + 732);
      *(_DWORD *)(a1 + 740) = v23;
      double v20 = *(double *)(a1 + 16);
    }
    float v36 = *(float *)(*(void *)(a1 + 32) + 60);
    if (v36 >= 1.0)
    {
      float v38 = v20;
      float v39 = v38 * 0.49;
      if (v39 < v36) {
        float v36 = v39;
      }
      double v37 = v36 * 3.14159265;
    }
    else
    {
      double v37 = 3.14159265;
    }
    float v40 = v37 / v20;
    __float2 v41 = __sincosf_stret(v40);
    *(float *)&v50[4] = 1.0 / (float)((float)(v41.__cosval / v41.__sinval) + 1.0);
    *(float *)&v50[8] = *(float *)&v50[4];
    *(_DWORD *)&v50[12] = 0;
    *(float *)&v50[16] = (float)(1.0 - (float)(v41.__cosval / v41.__sinval))
                       / (float)((float)(v41.__cosval / v41.__sinval) + 1.0);
    *(_DWORD *)&v50[20] = 0;
    DspLib::Biquad::Filter::setCoefficients(a1 + 336, (uint64_t)&v50[4], 1, 0, 0x41uLL);
    uint64_t v42 = *(void *)(a1 + 32);
    float v43 = *(double *)(a1 + 16);
    *(_DWORD *)(a1 + 1024) = (float)((float)(*(float *)(v42 + 44) / 1000.0) * v43);
    float v45 = DspLib::dB2Amp(v44, *(float *)(v42 + 76));
    char v46 = 0;
    *(float *)(a1 + 728) = v45;
    float v47 = *(float **)(a1 + 32);
    float v48 = v47[2];
    if (v48 > 1.0)
    {
      float v49 = *(double *)(a1 + 16);
      *(float *)(a1 + 1040) = 1.0
                            - expf(-1.0/ (float)((float)(v48 * (float)(v49 / (float)*(unsigned int *)(a1 + 732))) / 1000.0));
      char v46 = 1;
    }
    *(unsigned char *)(a1 + 1048) = v46;
    *(unsigned char *)(a1 + 1049) = v47[17] >= 0.5;
    *(_DWORD *)(a1 + 1056) = llroundf(fmaxf(v47[3], 0.0));
  }
}

float DspLib::MeisterStueck::Kernel::Algorithm::createGainTable(DspLib::MeisterStueck::Kernel::Algorithm *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  *((_DWORD *)this + 247) = 1120403456;
  uint64_t v18 = *((void *)this + 4);
  *((float *)this + 248) = 10.0 / (float)(*(float *)(v18 + 32) + 100.0);
  uint64_t v19 = 0;
  *((float *)this + 250) = DspLib::dB2Amp(this, *(float *)(v18 + 32));
  float v31 = (float)(-1.0 / a4) + 1.0;
  float v33 = (float)(-1.0 / a7) + 1.0;
  float v21 = a9 + -1.0;
  int v22 = (char *)this + 768;
  float v23 = -100.0;
  do
  {
    if (v23 >= a5)
    {
      float v25 = a10;
      if (v23 < a2) {
        goto LABEL_10;
      }
      float v24 = v31 * (float)(a2 - v23);
      if (v24 < a3) {
        float v24 = a3;
      }
    }
    else
    {
      float v24 = v33 * (float)(a5 - v23);
      if (v24 > a6) {
        float v24 = a6;
      }
    }
    float v25 = v24 + a10;
LABEL_10:
    float v26 = DspLib::dB2Amp(v20, v25);
    *(float *)&v22[v19] = v26;
    if (v23 < a8)
    {
      float v27 = v26 * DspLib::dB2Amp(v20, v21 * (float)(v23 - a8));
      float v29 = DspLib::dB2Amp(v28, a10);
      if (v27 >= v29) {
        float v29 = v27;
      }
      *(float *)&v22[v19] = v29;
    }
    float v23 = v23 + (float)(1.0 / *((float *)this + 248));
    v19 += 4;
  }
  while (v19 != 44);

  return DspLib::createInterpolationTable((uint64_t)this + 768, 11, (uint64_t)this + 812, 0x2CuLL);
}

uint64_t DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope(uint64_t a1, long long *a2, long long *a3, float *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a6 + 24);
  unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v13 = *((void *)a2 + 2);
  *(void *)unint64_t v44 = v11;
  *(void *)&v44[8] = v12;
  *(void *)&v44[16] = v13;
  uint64_t v14 = *(void *)(a6 + 72);
  unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v16 = *((void *)a3 + 2);
  *(void *)float v43 = v14;
  *(void *)&v43[8] = v15;
  *(void *)&v43[16] = v16;
  if (DspLib::MeisterStueck::OSCFilter::isInitialized((DspLib::MeisterStueck::OSCFilter *)(a1 + 520)))
  {
    long long v41 = *a2;
    uint64_t v42 = *((void *)a2 + 2);
    long long v39 = *a3;
    uint64_t v40 = *((void *)a3 + 2);
    long long v37 = *(_OWORD *)v44;
    uint64_t v38 = *(void *)&v44[16];
    uint64_t v36 = *(void *)&v43[16];
    long long v35 = *(_OWORD *)v43;
    DspLib::MeisterStueck::OSCFilter::process((void *)(a1 + 520), (uint64_t)&v41, (uint64_t)&v39, (uint64_t)&v37, (uint64_t)&v35);
    uint64_t v33 = *(void *)v44;
    long long v34 = *(_OWORD *)&v44[8];
    DspLib::DownSampler::process((unsigned int *)(a1 + 216), &v33, v44);
    uint64_t v31 = *(void *)v43;
    long long v32 = *(_OWORD *)&v43[8];
    DspLib::DownSampler::process((unsigned int *)(a1 + 224), &v31, v43);
  }
  else
  {
    long long v29 = *a2;
    uint64_t v30 = *((void *)a2 + 2);
    DspLib::DownSampler::process((unsigned int *)(a1 + 216), &v29, v44);
    long long v27 = *a3;
    uint64_t v28 = *((void *)a3 + 2);
    DspLib::DownSampler::process((unsigned int *)(a1 + 224), &v27, v43);
  }
  if (*(void *)&v44[16])
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if (v17)
    {
      unint64_t v18 = 0;
      do
      {
        MEMORY[0x1F4188790](v17);
        double v20 = (float *)((char *)&v24 - v19);
        uint64_t v21 = *(void *)&v44[16];
        int v22 = *(float **)(*(void *)(a6 + 72) + 8 * v18);
        v25.realp = *(float **)(*(void *)(a6 + 24) + 8 * v18);
        v25.imagp = v22;
        uint64_t v26 = *(void *)&v44[16];
        vDSP_zvabs(&v25, 1, (float *)((char *)&v24 - v19), 1, *(vDSP_Length *)&v44[16]);
        if (v18) {
          DspLib::vmax(a4, *(vDSP_Length *)&v44[16], v20);
        }
        else {
          DspLib::copy(v20, v21, a4);
        }
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        ++v18;
      }
      while (v18 < v17);
    }
  }
  return *(void *)&v44[16];
}

uint64_t DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope(uint64_t a1, long long *a2, float *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a5 + 24);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v10 = *((void *)a2 + 2);
  *(void *)DSPSplitComplex v25 = v8;
  *(void *)&v25[8] = v9;
  *(void *)&v25[16] = v10;
  if (DspLib::MeisterStueck::OSCFilter::isInitialized((DspLib::MeisterStueck::OSCFilter *)(a1 + 520)))
  {
    long long v23 = *a2;
    uint64_t v24 = *((void *)a2 + 2);
    long long v21 = *(_OWORD *)v25;
    uint64_t v22 = *(void *)&v25[16];
    DspLib::MeisterStueck::OSCFilter::process((void *)(a1 + 520), (uint64_t)&v23, (uint64_t)&v21);
    uint64_t v19 = *(void *)v25;
    long long v20 = *(_OWORD *)&v25[8];
    DspLib::DownSampler::process((unsigned int *)(a1 + 216), &v19, v25);
  }
  else
  {
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    DspLib::DownSampler::process((unsigned int *)(a1 + 216), &v17, v25);
  }
  if (*(void *)&v25[16])
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if (v11)
    {
      unint64_t v12 = 0;
      do
      {
        MEMORY[0x1F4188790](v11);
        uint64_t v14 = (float *)((char *)&v17 - v13);
        uint64_t v15 = *(void *)&v25[16];
        DspLib::abs(*(const float **)(*(void *)v25 + 8 * v12), *(vDSP_Length *)&v25[16], (float *)((char *)&v17 - v13));
        if (v12) {
          DspLib::vmax(a3, *(vDSP_Length *)&v25[16], v14);
        }
        else {
          DspLib::copy(v14, v15, a3);
        }
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        ++v12;
      }
      while (v12 < v11);
    }
  }
  return *(void *)&v25[16];
}

void DspLib::MeisterStueck::Kernel::Algorithm::processDetector(uint64_t a1, void *__src, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v10 = *(float **)(a1 + 744);
    DspLib::copy(__src, a3, &v10[*(_DWORD *)(a1 + 1004) - 1]);
    DspLib::slidingWindowMaxima(v10, a3 + *(unsigned int *)(a1 + 1004) - 1, (float *)__src, a3);
    DspLib::copy(&v10[a3], (*(_DWORD *)(a1 + 1004) - 1), v10);
    DspLib::multiply((float *)__src, a3, *(float *)(a1 + 728));
    if (*(unsigned char *)(a1 + 24))
    {
      float v11 = *(double *)(a1 + 16);
      float v12 = expf(-1.0/ (float)((float)((float)((float)(v11 / (float)a3) / (float)*(unsigned int *)(a1 + 732)) * 20.0) / 1000.0));
      float v13 = COERCE_FLOAT(DspLib::maxIndex((const float *)__src, a3));
      uint64_t v15 = v14;
      *(float *)(a1 + 1028) = v13;
      float v16 = *(float *)(a1 + 1012) * v12;
      if (v16 <= v13) {
        float v16 = v13;
      }
      *(float *)(a1 + 1012) = fmaxf(v16, 0.000001);
      float v17 = *(float *)(a1 + 1016);
      if (v17 >= v13)
      {
        unsigned int v18 = *(_DWORD *)(a1 + 1020);
        if (v18 >= *(_DWORD *)(a1 + 1024)) {
          *(float *)(a1 + 1016) = v12 * v17;
        }
        else {
          *(_DWORD *)(a1 + 1020) = v18 + a5;
        }
      }
      else
      {
        *(float *)(a1 + 1016) = v13;
        *(_DWORD *)(a1 + 1020) = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    DspLib::MeisterStueck::Kernel::Algorithm::gainForEnvelope(a1, (const float *)__src, a3, (float *)__src, a3);
    if (*(unsigned char *)(a1 + 1048))
    {
      uint64_t v19 = 0;
      do
      {
        float v20 = *((float *)__src + v19);
        float v21 = *(float *)(a1 + 1044);
        if (v20 >= v21)
        {
          float v22 = v21 + (float)((float)(v20 - v21) * *(float *)(a1 + 1040));
          *(float *)(a1 + 1044) = v22;
          *((float *)__src + v19) = v22;
        }
        else
        {
          *(float *)(a1 + 1044) = v20;
        }
        ++v19;
      }
      while (a3 > v19);
    }
    if (*(unsigned char *)(a1 + 24))
    {
      *(_DWORD *)(a1 + 1032) = *((_DWORD *)__src + v15);
      *(float *)(a1 + 1008) = DspLib::minv((const float *)__src, a3);
    }
  }
  DSPSplitComplex v25 = __src;
  uint64_t v26 = a4;
  v24[0] = &v25;
  v24[1] = 1;
  vDSP_Length v24[2] = a3;
  v23[0] = &v26;
  v23[1] = 1;
  v23[2] = a5;
  DspLib::PolyPhaseInterpolator::process((unsigned int *)(a1 + 232), v24, v23);
}

void DspLib::MeisterStueck::Kernel::Algorithm::gainForEnvelope(uint64_t a1, const float *a2, vDSP_Length __N, float *__D, vDSP_Length a5)
{
  uint64_t v7 = *(float **)(a1 + 32);
  if (*v7 >= 0.5 || v7[18] >= 0.5)
  {
    DspLib::fill(__D, a5, 1.0);
  }
  else
  {
    DspLib::clip(a2, __N, __D, *(float *)(a1 + 996), *(float *)(a1 + 1000));
    DspLib::amp2dB(__D, a5, 1.0);
    DspLib::add(__D, a5, *(float *)(a1 + 988));
    DspLib::multiply(__D, a5, *(float *)(a1 + 992));
    DspLib::elementAtIndexWithInterpolation(a1 + 812, 44, __D, a5, (uint64_t)__D, a5);
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::processTransientCrossFader(uint64_t a1, const float *__A, vDSP_Length __N, const float *__B, uint64_t a5, float *a6, vDSP_Length a7, int a8, float *a9, vDSP_Length a10)
{
  DspLib::divide(__A, __N, __B, a5, a6);
  DspLib::square(a6, a7);
  DspLib::negate(a6, a7);
  DspLib::add(a6, a7, 1.0);
  DspLib::clip(a6, a7, 0.0, 1.0);
  DspLib::negate(a6, a7, a9);
  DspLib::add(a9, a10, 1.0);
  if (*(unsigned char *)(a1 + 24))
  {
    float v13 = DspLib::maxv(a6, a7);
    if (v13 < *(float *)(a1 + 1036)) {
      float v13 = *(float *)(a1 + 1036);
    }
    *(float *)(a1 + 1036) = v13;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::processBlock(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v47 = a3;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    if (**(float **)(a1 + 32) >= 0.5)
    {
      long long v66 = *(_OWORD *)a2;
      uint64_t v67 = *(void *)(a2 + 16);
      long long v64 = *(_OWORD *)v47;
      uint64_t v65 = *(void *)(v47 + 16);
      long long v62 = *a4;
      uint64_t v63 = *((void *)a4 + 2);
      DspLib::add(&v66, &v64, &v62);
      long long v60 = *a4;
      uint64_t v61 = *((void *)a4 + 2);
      DspLib::multiply((uint64_t *)&v60, 0.70711);
    }
    else
    {
      _OWORD v38[2] = v38;
      uint64_t v7 = *(const void **)(a2 + 16);
      MEMORY[0x1F4188790](a1);
      unsigned int v9 = (float *)((char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      MEMORY[0x1F4188790](v10);
      char v46 = (const float *)((char *)v38 - v11);
      uint64_t v44 = v12;
      MEMORY[0x1F4188790](v13);
      uint64_t v45 = (const float *)((char *)v38 - v14);
      long long v58 = *(_OWORD *)a2;
      uint64_t v59 = *(void *)(a2 + 16);
      long long v56 = *(_OWORD *)v47;
      uint64_t v57 = *(void *)(v47 + 16);
      unint64_t v16 = DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope(a1, &v58, &v56, v9, (uint64_t)v7, v15);
      DspLib::MeisterStueck::Kernel::Algorithm::processDetector(a1, v9, v16, (uint64_t)v46, (uint64_t)v7);
      DspLib::Biquad::Filter::process((void *)(a1 + 336), (uint64_t)v46, (uint64_t)v7, (uint64_t)v45, (uint64_t)v7);
      MEMORY[0x1F4188790](v17);
      MEMORY[0x1F4188790](v18);
      uint64_t v42 = (const float *)((char *)v38 - v19);
      float v43 = v20;
      DspLib::MeisterStueck::Kernel::Algorithm::processTransientCrossFader(a1, v46, (vDSP_Length)v7, v45, (uint64_t)v7, v20, (vDSP_Length)v7, v21, (float *)((char *)v38 - v19), (vDSP_Length)v7);
      if (*(float *)(*(void *)(a1 + 32) + 20) >= 0.5)
      {
        v38[1] = v38;
        MEMORY[0x1F4188790](v22);
        unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
        long long v41 = (float *)((char *)v38 - v28);
        DspLib::subtract(v46, (vDSP_Length)v7, v45, (uint64_t)v7, (float *)((char *)v38 - v28));
        MEMORY[0x1F4188790](v29);
        MEMORY[0x1F4188790](v30);
        long long v39 = (const float *)((char *)v38 - v28);
        uint64_t v40 = v31;
        unint64_t v54 = (char *)v38 - v28;
        long long v55 = v31;
        v52[2] = v7;
        float v53 = v41;
        v52[0] = &v53;
        v52[1] = 1;
        v51[0] = &v55;
        v51[1] = 1;
        v51[2] = v7;
        v50[0] = &v54;
        v50[1] = (const void *)1;
        v50[2] = v7;
        DspLib::AnalyticSignalTransformAllpass::process(a1 + 408, (uint64_t)v52, (uint64_t)v51, v50);
        uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        if (v32)
        {
          unint64_t v33 = 0;
          do
          {
            MEMORY[0x1F4188790](v32);
            long long v35 = (float *)((char *)v38 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
            uint64_t v36 = v47;
            DspLib::add(*(const float **)(*(void *)a2 + 8 * v33), *(void *)(a2 + 16), *(const float **)(*(void *)v47 + 8 * v33), *(void *)(v47 + 16), v35);
            DspLib::multiply(v35, (vDSP_Length)v7, 0.70711);
            DspLib::multiply(v35, (vDSP_Length)v7, v45, (uint64_t)v7, v41);
            DspLib::vmma(*(const float **)(*(void *)a2 + 8 * v33), *(void *)(a2 + 16), v40, (int)v7, *(const float **)(*(void *)v47 + 8 * v33), *(void *)(v36 + 16), v39, (int)v7, *(float **)(*(void *)a4 + 8 * v33));
            DspLib::multiply(*(float **)(*(void *)a4 + 8 * v33), *((void *)a4 + 2), 0.70711);
            DspLib::add(*(float **)(*(void *)a4 + 8 * v33), *((void *)a4 + 2), v41);
            DspLib::multiply(v35, (vDSP_Length)v7, v46);
            DspLib::vmma(*(const float **)(*(void *)a4 + 8 * v33), *((void *)a4 + 2), v42, (int)v7, v35, (int)v7, v43, (int)v7, *(float **)(*(void *)a4 + 8 * v33));
            uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
            ++v33;
          }
          while (v33 < v32);
        }
      }
      else
      {
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        if (v23)
        {
          unint64_t v24 = 0;
          do
          {
            MEMORY[0x1F4188790](v23);
            uint64_t v26 = (float *)((char *)v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
            DspLib::add(*(const float **)(*(void *)a2 + 8 * v24), *(void *)(a2 + 16), *(const float **)(*(void *)v47 + 8 * v24), *(void *)(v47 + 16), v26);
            DspLib::multiply(v26, (vDSP_Length)v7, 0.70711);
            DspLib::multiply(v26, (vDSP_Length)v7, v45, (uint64_t)v7, *(float **)(*(void *)a4 + 8 * v24));
            DspLib::multiply(v26, (vDSP_Length)v7, v46);
            DspLib::vmma(*(const float **)(*(void *)a4 + 8 * v24), *((void *)a4 + 2), v42, (int)v7, v26, (int)v7, v43, (int)v7, *(float **)(*(void *)a4 + 8 * v24));
            uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
            ++v24;
          }
          while (v24 < v23);
        }
      }
      if (*(unsigned char *)(a1 + 1049))
      {
        long long v48 = *a4;
        uint64_t v49 = *((void *)a4 + 2);
        DspLib::MeisterStueck::Kernel::Algorithm::processSaturation(a1, (uint64_t *)&v48);
      }
    }
  }
  else
  {
    long long v37 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueckKernel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v37, 410);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::processSaturation(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v7 = *a2;
    long long v8 = *(_OWORD *)(a2 + 1);
    float v4 = DspLib::maxMagnitude(&v7);
    if (*(float *)(a1 + 1052) >= v4) {
      float v4 = *(float *)(a1 + 1052);
    }
    *(float *)(a1 + 1052) = v4;
  }
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = a2[2];
  DspLib::Saturation::process(&v5, *(_DWORD *)(a1 + 1056));
}

void DspLib::MeisterStueck::Kernel::Algorithm::processBlock(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    if (**(float **)(a1 + 32) >= 0.5)
    {
      if (*(void *)a2 != *(void *)a3)
      {
        long long v33 = *(_OWORD *)a2;
        uint64_t v34 = *(void *)(a2 + 16);
        long long v31 = *a3;
        uint64_t v32 = *((void *)a3 + 2);
        DspLib::copy(&v33, &v31);
      }
    }
    else
    {
      uint64_t v25 = (uint64_t)&v25;
      vDSP_Length v6 = *(void *)(a2 + 16);
      MEMORY[0x1F4188790](a1);
      long long v8 = (float *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
      MEMORY[0x1F4188790](v9);
      uint64_t v11 = (const float *)((char *)&v25 - v10);
      MEMORY[0x1F4188790](v12);
      uint64_t v14 = (const float *)((char *)&v25 - v13);
      MEMORY[0x1F4188790](v15);
      uint64_t v26 = (float *)((char *)&v25 - v16);
      MEMORY[0x1F4188790](v17);
      uint64_t v19 = (float *)((char *)&v25 - v18);
      long long v29 = *(_OWORD *)a2;
      uint64_t v30 = *(void *)(a2 + 16);
      unint64_t v21 = DspLib::MeisterStueck::Kernel::Algorithm::computeEnvelope(a1, &v29, v8, v6, v20);
      DspLib::MeisterStueck::Kernel::Algorithm::processDetector(a1, v8, v21, (uint64_t)v11, v6);
      DspLib::Biquad::Filter::process((void *)(a1 + 336), (uint64_t)v11, v6, (uint64_t)v14, v6);
      DspLib::MeisterStueck::Kernel::Algorithm::processTransientCrossFader(a1, v11, v6, v14, v6, v26, v6, v22, v19, v6);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
      {
        unint64_t v23 = 0;
        do
        {
          DspLib::copy(*(void **)(*(void *)a2 + 8 * v23), *(void *)(a2 + 16), v8);
          DspLib::multiply(*(const float **)(*(void *)a2 + 8 * v23), *(void *)(a2 + 16), v14, v6, *(float **)(*(void *)a3 + 8 * v23));
          DspLib::multiply(v8, v6, v11);
          DspLib::vmma(*(const float **)(*(void *)a3 + 8 * v23), *((void *)a3 + 2), v19, v6, v8, v6, v26, v6, *(float **)(*(void *)a3 + 8 * v23));
          ++v23;
        }
        while (v23 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1));
      }
    }
    if (*(unsigned char *)(a1 + 1049))
    {
      long long v27 = *a3;
      uint64_t v28 = *((void *)a3 + 2);
      DspLib::MeisterStueck::Kernel::Algorithm::processSaturation(a1, (uint64_t *)&v27);
    }
  }
  else
  {
    unint64_t v24 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/MeisterStueck/dsp/DspLibMeisterStueckKernel.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v24, 497);
    ++DspLibDebug::mAssertCounter;
  }
}

void DspLib::Saturation::process(long long *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 0:
      long long v19 = *a1;
      uint64_t v20 = *((void *)a1 + 2);
      DspLib::clip((uint64_t *)&v19, -1.0, 1.0);
      break;
    case 1:
      long long v17 = *a1;
      uint64_t v18 = *((void *)a1 + 2);
      DspLib::clip((uint64_t *)&v17, -2.965, 2.965);
      long long v15 = *a1;
      uint64_t v16 = *((void *)a1 + 2);
      DspLib::poly(&v15, _ZGRZN6DspLib10Saturation7processENS_9MultiSpanIfEENS0_6FlavorEE27kTubePolynomialCoefficients_, 4);
      break;
    case 2:
      goto LABEL_5;
    case 3:
      long long v13 = *a1;
      uint64_t v14 = *((void *)a1 + 2);
      DspLib::clip((uint64_t *)&v13, -1.5708, 1.5708);
LABEL_5:
      uint64_t v3 = *(void *)a1;
      long long v12 = *(long long *)((char *)a1 + 8);
      long long v9 = *a1;
      uint64_t v10 = *((void *)a1 + 2);
      uint64_t v11 = v3;
      DspLib::vsin(&v11, &v9);
      break;
    case 4:
      MEMORY[0x1F4188790](a1);
      long long v5 = (float *)((char *)&v9 - v4);
      if (*((void *)a1 + 1))
      {
        uint64_t v6 = 0;
        unsigned int v7 = 1;
        do
        {
          DspLib::vsin(*(const float **)(*(void *)a1 + 8 * v6), *((void *)a1 + 2), v5);
          DspLib::add(*(float **)(*(void *)a1 + 8 * v6), *((void *)a1 + 2), v5);
          DspLib::multiply(*(float **)(*(void *)a1 + 8 * v6), *((void *)a1 + 2), 0.5);
          uint64_t v6 = v7;
        }
        while (*((void *)a1 + 1) > (unint64_t)v7++);
      }
      break;
    default:
      return;
  }
}

void DspLib::MeisterStueck::Kernel::Algorithm::status(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(float **)(a1 + 32);
  if (*v3 >= 0.5 || v3[18] >= 0.5)
  {
    *(_OWORD *)a2 = xmmword_1BB873AC0;
    *(_DWORD *)(a2 + 16) = 0;
    long long v12 = (_DWORD *)(a2 + 24);
  }
  else
  {
    *(float *)a2 = DspLib::amp2dBSafe((DspLib *)a1, *(float *)(a1 + 1008), 0.000001);
    long long v5 = (DspLib *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, 1);
    *(float *)(a1 + 1008) = DspLib::dB2Amp(v5, v6);
    *(float *)(a2 + 4) = DspLib::amp2dBSafe(v7, *(float *)(a1 + 1012), 0.000001);
    *(float *)(a2 + 8) = DspLib::amp2dBSafe(v8, *(float *)(a1 + 1016), 0.000001);
    float v11 = DspLib::amp2dBSafe(v9, *(float *)(a1 + 1028), 0.000001);
    if (v11 < -100.0) {
      float v11 = -100.0;
    }
    *(float *)(a2 + 12) = v11;
    *(float *)(a2 + 16) = DspLib::amp2dBSafe(v10, *(float *)(a1 + 1032), 0.000001);
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 1036);
    long long v12 = (_DWORD *)(a1 + 1052);
    *(float *)(a2 + 24) = DspLib::amp2dBSafe(v13, *(float *)(a1 + 1052), 0.000001);
    *(_DWORD *)(a1 + 1036) = 0;
  }
  *long long v12 = 0;
}

void DspLib::MeisterStueck::Kernel::Algorithm::~Algorithm(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  DspLib::MeisterStueck::Kernel::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(void *)this = &unk_1F14A70C8;
  uint64_t v2 = (void *)*((void *)this + 93);
  if (v2)
  {
    *((void *)this + 94) = v2;
    operator delete(v2);
  }
  uint64_t v10 = (void **)((char *)this + 704);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 672));
  uint64_t v3 = (void *)*((void *)this + 81);
  if (v3)
  {
    *((void *)this + 82) = v3;
    operator delete(v3);
  }
  uint64_t v10 = (void **)((char *)this + 600);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 568));
  uint64_t v4 = (void *)*((void *)this + 68);
  if (v4)
  {
    *((void *)this + 69) = v4;
    operator delete(v4);
  }
  *((void *)this + 51) = &unk_1F14A84D8;
  long long v5 = (void *)*((void *)this + 62);
  if (v5)
  {
    *((void *)this + 63) = v5;
    operator delete(v5);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 472));
  float v6 = (void *)*((void *)this + 56);
  if (v6)
  {
    *((void *)this + 57) = v6;
    operator delete(v6);
  }
  DspLib::Biquad::SetupWrapper::destroyvDSPSetup((DspLib::MeisterStueck::Kernel::Algorithm *)((char *)this + 384));
  unsigned int v7 = (void *)*((void *)this + 45);
  if (v7)
  {
    *((void *)this + 46) = v7;
    operator delete(v7);
  }
  long long v8 = (void *)*((void *)this + 39);
  if (v8)
  {
    *((void *)this + 40) = v8;
    operator delete(v8);
  }
  uint64_t v10 = (void **)((char *)this + 280);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)((char *)this + 248);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  *(void *)this = &unk_1F14A87D8;
  long long v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
}

double DspLib::MeisterStueck::Kernel::Algorithm::latencySamples(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  return 0.0;
}

uint64_t DspLib::MeisterStueck::Kernel::Algorithm::numStatus(DspLib::MeisterStueck::Kernel::Algorithm *this)
{
  return 7;
}

double DspLib::XTC::Algorithm::Algorithm(DspLib::XTC::Algorithm *this)
{
  uint64_t v1 = DspLib::AlgorithmBase::AlgorithmBase((uint64_t)this, &DspLib::XTC::Parameters::kDefault, 0x40uLL, (uint64_t)&DspLib::XTC::Parameters::kMinimum, 64, (uint64_t)&DspLib::XTC::Parameters::kMaximum, 64);
  *(void *)uint64_t v1 = &unk_1F14A71E0;
  double result = 0.0;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_DWORD *)(v1 + 248) = 1065353216;
  *(void *)(v1 + 252) = 0;
  *(void *)(v1 + 260) = 0;
  *(void *)(v1 + 268) = 0;
  *(void *)(v1 + 273) = 0;
  *(void *)(v1 + 284) = 2;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(void *)(v1 + 344) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v1 + 352) = _D1;
  *(unsigned char *)(v1 + 392) = 0;
  *(void *)(v1 + 368) = 0;
  *(void *)(v1 + 376) = 0;
  *(void *)(v1 + 360) = 0;
  *(unsigned char *)(v1 + 384) = 0;
  *(unsigned char *)(v1 + 440) = 0;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(unsigned char *)(v1 + 432) = 0;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(void *)(v1 + 480) = 0;
  *(void *)(v1 + 496) = 0;
  *(_DWORD *)(v1 + 504) = 0;
  *(void *)(v1 + 512) = 0;
  *(_DWORD *)(v1 + 520) = 0;
  return result;
}

uint64_t DspLib::XTC::Algorithm::initialize(DspLib::XTC::Algorithm *this, int a2, double a3)
{
  uint64_t v4 = DspLib::AlgorithmBase::initialize(this, a2, a3);
  if ((*(unsigned int (**)(DspLib::XTC::Algorithm *))(*(void *)this + 56))(this) == 2)
  {
    *((unsigned char *)this + 8) = 1;
    operator new();
  }
  float v6 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v6, 22);
  ++DspLibDebug::mAssertCounter;
  return v4;
}

void sub_1BB2BB80C(_Unwind_Exception *a1)
{
  MEMORY[0x1C185D370](v1, 0x10A0C40A4A4A4D4);
  _Unwind_Resume(a1);
}

uint64_t DspLib::XTC::Algorithm::uninitialize(DspLib::XTC::Algorithm *this)
{
  uint64_t v2 = 0;
  *((unsigned char *)this + 8) = 0;
  uint64_t v3 = (char *)this + 256;
  do
  {
    std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100]((uint64_t *)&v3[v2], 0);
    v2 += 8;
  }
  while (v2 != 16);
  uint64_t v4 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v4) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 216, v4);
  }
  uint64_t v5 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v5) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 224, v5);
  }
  *((void *)this + 34) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;

  return DspLib::ToneGenerator::uninitialize((DspLib::XTC::Algorithm *)((char *)this + 280));
}

uint64_t *std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  float *result = a2;
  if (v2)
  {
    for (uint64_t i = 256; i != -64; i -= 80)
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v2 + i));
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void DspLib::XTC::Algorithm::reset(DspLib::XTC::Algorithm *this)
{
  if (*((unsigned char *)this + 8))
  {
    *(int8x16_t *)((char *)this + 232) = vextq_s8(*(int8x16_t *)((char *)this + 216), *(int8x16_t *)((char *)this + 216), 8uLL);
    DspLib::ToneGenerator::reset((DspLib::XTC::Algorithm *)((char *)this + 280));
    uint64_t v2 = (DspLib::XTC::FIRMatrix *)*((void *)this + 30);
    if (v2) {
      DspLib::XTC::FIRMatrix::reset(v2);
    }
    uint64_t v3 = (DspLib::XTC::FIRMatrix *)*((void *)this + 29);
    if (v3) {
      DspLib::XTC::FIRMatrix::reset(v3);
    }
    *((_DWORD *)this + 126) = 0;
    *((void *)this + 62) = 0;
    *((_DWORD *)this + 62) = 1065353216;
  }
  else
  {
    uint64_t v4 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v4, 63);
    ++DspLibDebug::mAssertCounter;
  }
}

double DspLib::XTC::Algorithm::latencySamples(DspLib::XTC::Algorithm *this)
{
  uint64_t v1 = *((void *)this + 30);
  if (v1) {
    float v2 = fabsf(*(float *)(v1 + 616));
  }
  else {
    float v2 = 0.0;
  }
  return round(*((double *)this + 2) * (float)(v2 / 1000.0));
}

float DspLib::XTC::Algorithm::setParameters(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = *(void *)(a1 + 216);
    float v6 = *(DspLib::XTC::FIRMatrix **)(a1 + 224);
    *(void *)(a1 + 216) = v6;
    *(void *)(a1 + 224) = v5;
    DspLib::AlgorithmBase::setParameters((void *)a1, a2, a3, a4);
    DspLib::XTC::Algorithm::designFilters((DspLib::XTC::Algorithm *)a1, v6);
    uint64_t v7 = *(void *)(a1 + 216);
    *(_DWORD *)(a1 + 248) = 0;
    *(void *)(a1 + 232) = *(void *)(a1 + 240);
    *(void *)(a1 + 240) = v7;
  }
  float result = *(float *)(*(void *)(a1 + 32) + 88);
  *(float *)(a1 + 252) = result;
  return result;
}

void DspLib::XTC::Algorithm::setParametersAndDesignFilters(DspLib::XTC::Algorithm *a1, void *a2, uint64_t a3, DspLib::XTC::FIRMatrix *a4, __n128 a5)
{
  DspLib::AlgorithmBase::setParameters(a1, a2, a3, a5);

  DspLib::XTC::Algorithm::designFilters(a1, a4);
}

uint64_t DspLib::XTC::Algorithm::setFIRMatrixAndTriggerCrossFade(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 248) = 0;
  *(void *)(result + 232) = *(void *)(result + 240);
  *(void *)(result + 240) = a2;
  return result;
}

void DspLib::XTC::Algorithm::designFilters(DspLib::XTC::Algorithm *this, DspLib::XTC::FIRMatrix *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  DspLibBuffer::DspLibBuffer((DspLibBuffer *)v15, 1uLL, 4u);
  uint64_t v4 = (float *)*((void *)this + 4);
  if (v4[15] >= 0.5 && vcvtas_u32_f32(*v4) == 2)
  {
    if (!*((unsigned char *)this + 280))
    {
      DspLib::ToneGenerator::configure((uint64_t)this + 280, 6, -20.0);
      DspLib::ToneGenerator::initialize((DspLib::XTC::Algorithm *)((char *)this + 280), *((double *)this + 2));
    }
  }
  else
  {
    DspLib::ToneGenerator::reset((DspLib::XTC::Algorithm *)((char *)this + 280));
  }
  *((float *)a2 + 154) = DspLib::XTC::Algorithm::designXTCfilters(this, (DspLibBuffer *)v15);
  uint64_t v5 = DspLibBuffer::numChannels((DspLibBuffer *)v15);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)&v14[-1] - v7;
  if (v6 >= 0x200) {
    size_t v9 = 512;
  }
  else {
    size_t v9 = v6;
  }
  bzero((char *)&v14[-1] - v7, v9);
  for (unint64_t i = 0; i < DspLibBuffer::numChannels((DspLibBuffer *)v15); ++i)
    *(void *)&v8[8 * i] = DspLibBuffer::channel((DspLibBuffer *)v15, i);
  unsigned int v11 = DspLibBuffer::numChannels((DspLibBuffer *)v15);
  uint64_t cycle_count = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)v15);
  v14[0] = v8;
  v14[1] = v11;
  void v14[2] = cycle_count;
  DspLib::XTC::FIRMatrix::setCoefficients((uint64_t)a2, v14);
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)v15);
}

void sub_1BB2BBC50(_Unwind_Exception *a1)
{
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 - 128));
  _Unwind_Resume(a1);
}

float DspLib::XTC::Algorithm::designXTCfilters(DspLib::XTC::Algorithm *this, DspLibBuffer *a2)
{
  uint64_t v4 = *((void *)this + 4);
  int v5 = llroundf(*(float *)(v4 + 4 * (vcvtas_u32_f32(*(float *)(v4 + 4)) + 23)));
  if (v5 == -2) {
    int v5 = *((_DWORD *)this + 130);
  }
  *((_DWORD *)this + 130) = v5;
  if (v5 == -1) {
    goto LABEL_30;
  }
  uint64_t v6 = *((void *)this + v5 + 32);
  if (v6)
  {
    return DspLib::XTC::Algorithm::runXTCfilterPostProcess((uint64_t)this, v6, a2);
  }
  if (!*((void *)this + 34))
  {
LABEL_30:
    return DspLib::XTC::Algorithm::makeBypassFirCoefficients(this, a2);
  }
  else
  {
    int v8 = 16 * (v5 & ~(v5 >> 31));
    float v9 = *(float *)(v4 + 4 * (v8 + 35));
    float v10 = *(float *)(v4 + 4 * (v8 + 37));
    float v11 = *(float *)(v4 + 4 * (v8 + 38));
    float v12 = 0.0;
    if (v9 > 0.0)
    {
      float v13 = *(float *)(v4 + 4 * (v8 + 36));
      if (v13 > 0.0)
      {
        float v14 = atanf(v9 / (float)(v13 + v13));
        float v12 = (float)(v14 + v14) * 57.2957795;
      }
    }
    uint64_t v15 = 0;
    float v16 = 179.0;
    if (v12 <= 179.0) {
      float v16 = v12;
    }
    if (v12 >= 1.0) {
      float v17 = v16;
    }
    else {
      float v17 = 1.0;
    }
    unint64_t v30 = 0;
    int v31 = 0;
    do
    {
      DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v32[v15], 0, 0);
      v15 += 80;
    }
    while (v15 != 320);
    uint64_t v18 = 0;
    unint64_t v27 = 0;
    int v28 = 0;
    do
    {
      DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v29[v18], 0, 0);
      v18 += 80;
    }
    while (v18 != 320);
    uint64_t v19 = 0;
    uint64_t v24 = 0;
    int v25 = 0;
    do
    {
      DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)&v26[v19], 0, 0);
      v19 += 80;
    }
    while (v19 != 320);
    DspLib::XTC::HRIRDatabase::getHRTFwithAngleAndRotation(*((void *)this + 34), &v30, v17, 0.0);
    DspLib::XTC::HRIRDatabase::getHRTFwithAngleAndRotation(*((void *)this + 34), &v27, v10, v11);
    DspLib::XTC::Algorithm::compute_W_with_H_and_D((uint64_t)this, (uint64_t)&v30, (uint64_t)&v27, (uint64_t)&v24);
    float v20 = DspLib::XTC::Algorithm::runXTCfilterPostProcess((uint64_t)this, (uint64_t)&v24, a2);
    for (uint64_t i = 256; i != -64; i -= 80)
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&v24 + i));
    for (uint64_t j = 256; j != -64; j -= 80)
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&v27 + j));
    for (uint64_t k = 256; k != -64; k -= 80)
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&v30 + k));
    return v20;
  }
}

void sub_1BB2BBF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  for (uint64_t i = 256; i != -64; i -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&a9 + i));
  for (uint64_t j = 256; j != -64; j -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(&a51 + j));
  for (uint64_t k = 256; k != -64; k -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&STACK[0x2A0] + k));
  _Unwind_Resume(a1);
}

void sub_1BB2BBFD8()
{
  for (; v0; v0 -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)((char *)&STACK[0x260] + v0));
  JUMPOUT(0x1BB2BBFD0);
}

void DspLib::XTC::Algorithm::processTestNoiseGenerator(DspLib::XTC::Algorithm *this, DspLibBuffer *a2)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 280))
  {
    uint64_t v4 = (char *)this + 280;
    uint64_t v5 = DspLibBuffer::numChannels(a2);
    MEMORY[0x1F4188790](v5);
    int v8 = (char *)v18 - v7;
    if (v6 >= 0x200) {
      size_t v9 = 512;
    }
    else {
      size_t v9 = v6;
    }
    bzero((char *)v18 - v7, v9);
    if (DspLibBuffer::numChannels(a2))
    {
      unint64_t v10 = 0;
      do
      {
        *(void *)&v8[8 * v10] = DspLibBuffer::channel(a2, v10);
        ++v10;
      }
      while (v10 < DspLibBuffer::numChannels(a2));
    }
    uint64_t v11 = DspLibBuffer::numChannels(a2);
    uint64_t cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
    v18[0] = v8;
    v18[1] = v11;
    CFTypeRef v18[2] = cycle_count;
    DspLib::ToneGenerator::generate((uint64_t)v4, (uint64_t)v18);
    unint64_t v13 = *((void *)this + 62);
    double v14 = *((double *)this + 2);
    if (v14 >= (double)v13)
    {
      unint64_t v15 = vp::utility::CPU_Profiler::get_cycle_count(a2) + v13;
      double v14 = *((double *)this + 2);
    }
    else
    {
      unint64_t v15 = 0;
    }
    *((void *)this + 62) = v15;
    float v16 = (float *)DspLibBuffer::channel(a2, v14 * 0.5 >= (double)v15);
    vDSP_Length v17 = vp::utility::CPU_Profiler::get_cycle_count(a2);
    DspLib::clear(v16, v17);
  }
}

void DspLib::XTC::Algorithm::processBlock(void *a1, long long *a2, long long *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    int v22 = 146;
LABEL_29:
    printf("DSP Sound assertion in %s at line %d\n", v21, v22);
    ++DspLibDebug::mAssertCounter;
    return;
  }
  uint64_t v3 = a1;
  if (!a1[30])
  {
    uint64_t v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    int v22 = 147;
    goto LABEL_29;
  }
  if (!a1[29])
  {
    uint64_t v21 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    int v22 = 148;
    goto LABEL_29;
  }
  if (*((void *)a3 + 2))
  {
    if (*((unsigned char *)a1 + 24)) {
      DspLib::CPUMeasure::start((int8x16_t *)(a1 + 7));
    }
    if (**(void **)a3 != **(void **)a2)
    {
      long long v36 = *a2;
      uint64_t v37 = *((void *)a2 + 2);
      long long v34 = *a3;
      uint64_t v35 = *((void *)a3 + 2);
      a1 = DspLib::copy(&v36, &v34);
    }
    unint64_t v6 = (float *)v3[4];
    if (vcvtas_u32_f32(*v6) == 2)
    {
      unint64_t v7 = *((void *)a3 + 2);
      if (vcvtas_u32_f32(v6[15]) == 1)
      {
        DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v40, *(float *const **)a3, *((void *)a3 + 2), *((_DWORD *)a3 + 2));
        DspLib::XTC::Algorithm::processTestNoiseGenerator((DspLib::XTC::Algorithm *)v3, (DspLibBuffer *)&v40);
        DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v40);
        unint64_t v7 = *((void *)a3 + 2);
      }
      if (v7 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v7;
      }
      unint64_t v9 = ((v8 - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      MEMORY[0x1F4188790](a1);
      uint64_t v38 = (char *)&v23 - 8 * v9;
      long long v39 = &v38[4 * v9];
      uint64_t v10 = v3[30];
      uint64_t v11 = *(float *const **)a3;
      unint64_t v31 = v7;
      uint64_t v32 = v11;
      long long v33 = *(long long *)((char *)a3 + 8);
      *(void *)&long long v30 = &v38;
      *((void *)&v30 + 1) = 2;
      DspLib::XTC::FIRMatrix::process(v10, &v32, &v30);
      float v13 = *((float *)v3 + 62);
      if (v13 >= 1.0)
      {
        DspLib::copy(v38, v7, **(void ***)a3);
        DspLib::copy(v39, v7, *(void **)(*(void *)a3 + 8));
      }
      else
      {
        float v14 = 1.0 / (*((double *)v3 + 2) * (float)(*((float *)v3 + 63) / 1000.0));
        float v28 = -v14;
        float v29 = v14;
        float v27 = 1.0 - v13;
        MEMORY[0x1F4188790](v12);
        unsigned int v17 = vcvtas_u32_f32(v16);
        uint64_t v40 = (const float *)((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
        long long v41 = &v40[v9];
        if (v7 >= v17) {
          vDSP_Length v18 = v17;
        }
        else {
          vDSP_Length v18 = v7;
        }
        uint64_t v19 = v3[29];
        float v20 = *(float *const **)a3;
        unint64_t v24 = v7;
        int v25 = v20;
        long long v26 = *(long long *)((char *)a3 + 8);
        *(void *)&long long v23 = &v40;
        *((void *)&v23 + 1) = 2;
        DspLib::XTC::FIRMatrix::process(v19, &v25, &v23);
        DspLib::copy(v38, v7, **(void ***)a3);
        DspLib::copy(v39, v7, *(void **)(*(void *)a3 + 8));
        vDSP_vrampmul2((const float *)v38, (const float *)v39, 1, (float *)v3 + 62, &v29, **(float ***)a3, *(float **)(*(void *)a3 + 8), 1, v18);
        vDSP_vrampmuladd2(v40, v41, 1, &v27, &v28, **(float ***)a3, *(float **)(*(void *)a3 + 8), 1, v18);
      }
      if (vcvtas_u32_f32(*(float *)(v3[4] + 60)) == 2)
      {
        DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v40, *(float *const **)a3, *((void *)a3 + 2), *((_DWORD *)a3 + 2));
        DspLib::XTC::Algorithm::processTestNoiseGenerator((DspLib::XTC::Algorithm *)v3, (DspLibBuffer *)&v40);
        DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v40);
      }
    }
    if (*((unsigned char *)v3 + 24)) {
      DspLib::CPUMeasure::stop((DspLib::CPUMeasure *)(v3 + 7), *((void *)a3 + 2), *((double *)v3 + 2));
    }
  }
}

void sub_1BB2BC598(_Unwind_Exception *a1)
{
  DspLibBuffer::~DspLibBuffer((DspLibBuffer *)(v1 + 184));
  _Unwind_Resume(a1);
}

void DspLib::XTC::Algorithm::status(uint64_t a1, uint64_t a2, vDSP_Length __N)
{
  DspLib::clear((float *)a2, __N);
  float v6 = DspLib::sum(*(const float **)(a1 + 32), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  uint64_t v7 = *(unsigned int *)(a1 + 504);
  *(float *)a2 = v6;
  *(float *)(a2 + 4) = (float)v7;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v7);
  if ((v7 + 1) <= 0x3F) {
    int v8 = v7 + 1;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)(a1 + 504) = v8;
  char v9 = 1;
  uint64_t v10 = 5;
  do
  {
    char v11 = v9;
    uint64_t v12 = *(void *)(a1 + 256);
    float v13 = 0.0;
    if (v12)
    {
      for (uint64_t i = 16; i != 336; i += 80)
        float v13 = v13 + DspLib::checksum((DspLib *)(v12 + i), v5, 0.0);
    }
    char v9 = 0;
    *(float *)(a2 + 4 * v10) = v13;
    uint64_t v10 = 6;
  }
  while ((v11 & 1) != 0);
}

float DspLib::XTC::Algorithm::makeBypassFirCoefficients(DspLib::XTC::Algorithm *this, DspLibBuffer *a2)
{
  uint64_t v4 = *((void *)this + 30);
  if (v4)
  {
    unint64_t v5 = *(void *)(v4 + 608);
    float v6 = *(float *)(v4 + 616);
    if (v5) {
      goto LABEL_6;
    }
  }
  else
  {
    float v6 = 0.0;
  }
  unint64_t v5 = 1;
LABEL_6:
  DspLibBuffer::resize(a2, v5);
  DspLibBuffer::setNumFrames((unint64_t *)a2, v5);
  double v7 = *((double *)this + 2);
  *((double *)a2 + 2) = v7;
  unsigned int v8 = vcvtad_u64_f64(v7 * (float)(fabsf(v6) / 1000.0));
  if ((int)v5 - 1 >= v8) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v5 - 1;
  }
  uint64_t v10 = (float *)DspLibBuffer::channel(a2, 0);
  vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a2);
  DspLib::clear(v10, cycle_count);
  if (v6 <= 0.0) {
    float v12 = -1.0;
  }
  else {
    float v12 = 1.0;
  }
  *(float *)(DspLibBuffer::channel(a2, 0) + 4 * v9) = v12;
  *(float *)(DspLibBuffer::channel(a2, 3u) + 4 * v9) = v12;
  return v6;
}

float DspLib::XTC::Algorithm::runXTCfilterPostProcess(uint64_t a1, uint64_t a2, DspLibBuffer *a3)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  float v6 = *(float *)(a2 + 8);
  unint64_t v115 = *(void *)a2;
  unint64_t v7 = 2 * v115;
  double v9 = round(log2((double)(2 * v115)));
  float v10 = 0.0;
  for (uint64_t i = 16; i != 336; i += 80)
    float v10 = v10 + DspLib::checksum((DspLib *)(a2 + i), v8, 0.0);
  if (v6 >= 1000.0)
  {
    if (v7 != 1 << v9)
    {
      float v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      int v13 = 412;
      goto LABEL_27;
    }
    float v14 = 0;
    uint64_t v112 = 0;
    float v113 = 0;
    int v15 = 4;
    unint64_t v114 = 0;
    do
    {
      if ((unint64_t)v14 >= v114)
      {
        float v14 = (DspLib::ComplexVector *)std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long &>((uint64_t *)&v112, &v115);
      }
      else
      {
        DspLib::ComplexVector::ComplexVector(v14, v115, 0);
        float v14 = (DspLib::ComplexVector *)((char *)v14 + 80);
      }
      float v113 = v14;
      --v15;
    }
    while (v15);
    float v16 = *(float *)(*(void *)(a1 + 32) + 12);
    DspLib::ComplexVector::operator=(v112, a2 + 16);
    DspLib::ComplexVector::operator=((char *)v112 + 80, a2 + 96);
    DspLib::ComplexVector::operator=((char *)v112 + 160, a2 + 176);
    DspLib::ComplexVector::operator=((char *)v112 + 240, a2 + 256);
    uint64_t v17 = 0;
    vDSP_Length v18 = (_DWORD **)((char *)v112 + 8);
    do
    {
      uint64_t v19 = *v18;
      v18 += 10;
      v116[v17 + 4] = *v19;
      _DWORD *v19 = 0;
      ++v17;
    }
    while (v17 != 4);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v111, v115, 0);
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v110, v115, 0);
    DspLib::XTC::Algorithm::makeCrossover(&v111[0].realp, &v110[0].realp, *(float **)(a1 + 32), v6);
    uint64_t v21 = *(void *)(a1 + 512);
    if (v21)
    {
      DspLib::ComplexVector::operator=(v21 + 1696, v111);
      DspLib::ComplexVector::operator=(*(void *)(a1 + 512) + 1856, v110);
      DspLib::ComplexVector::operator=(*(void *)(a1 + 512) + 1776, v110);
      DspLib::ComplexVector::operator=(*(void *)(a1 + 512) + 1936, v111);
    }
    uint64_t v109 = 0;
    float v22 = DspLib::FFT::impulseResponsePeakInMilliseconds(v112, (const DspLib::ComplexSpan *)((char *)&v109 + 4), v6, v20);
    float v24 = DspLib::FFT::impulseResponsePeakInMilliseconds((DspLib::FFT *)((char *)v112 + 240), (const DspLib::ComplexSpan *)&v109, v6, v23);
    BOOL v25 = *(float *)&v109 < 0.0 && *((float *)&v109 + 1) < 0.0;
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v108, v115, 0);
    float v26 = (float)(v22 + v24) * 0.5;
    DspLib::initializeWithLinearPhase((DspLib *)v108, v27, v26, v6);
    if (v25) {
      DspLib::operator*=(v108, -1.0);
    }
    DspLib::operator*=(v110, v108);
    float v28 = 1.0;
    if (v25) {
      float v28 = -1.0;
    }
    float v29 = v112;
    **(float **)uint64_t v112 = v28;
    **((_DWORD **)v29 + 10) = 0;
    **((_DWORD **)v29 + 20) = 0;
    **((float **)v29 + 30) = v28;
    DspLib::operator*(v29, v111, (DspLib::ComplexVector *)v107);
    DspLib::operator+((DspLib::ComplexSpan *)v107, v110, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=(v112, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v107);
    DspLib::operator*((DspLib::FFT *)((char *)v112 + 80), v111, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=((char *)v112 + 80, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::operator*((DspLib::FFT *)((char *)v112 + 160), v111, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=((char *)v112 + 160, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::operator*((DspLib::FFT *)((char *)v112 + 240), v111, (DspLib::ComplexVector *)v107);
    DspLib::operator+((DspLib::ComplexSpan *)v107, v110, (DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::operator=((char *)v112 + 240, &v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v107);
    uint64_t v30 = 0;
    uint64_t v31 = 8;
    uint64_t v32 = v112;
    do
    {
      **(_DWORD **)((char *)v32 + v31) = v116[v30 + 4];
      float v33 = *(double *)(a1 + 16);
      DspLib::FFT::resample((DSPSplitComplex *)((char *)v32 + v31 - 8), 0, v6, v33);
      uint64_t v32 = v112;
      long long v34 = *(_DWORD **)((char *)v112 + v31);
      v116[v30 + 4] = *v34;
      *long long v34 = 0;
      ++v30;
      v31 += 80;
    }
    while (v30 != 4);
    unint64_t v35 = DspLib::XTC::Algorithm::targetFIRfilterLength((DspLib::XTC::Algorithm *)a1);
    unint64_t v36 = v35;
    float v37 = *(double *)(a1 + 16);
    if (v16 < 0.5) {
      float v38 = (float)(*(float *)(*(void *)(a1 + 32) + 56) * (float)((float)((float)v35 / v37) * 1000.0)) / 100.0;
    }
    else {
      float v38 = 0.0;
    }
    float v40 = (float)((float)(int)roundf((float)((float)(v26 + v38) / 1000.0) * v37) / v37) * 1000.0;
    if (v25) {
      float v39 = -v40;
    }
    else {
      float v39 = v40;
    }
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)v107, v115, 0);
    float v41 = *(double *)(a1 + 16);
    DspLib::initializeWithLinearPhase((DspLib *)v107, v42, v40 - v26, v41);
    for (uint64_t j = 0; j != 320; j += 80)
    {
      DspLib::operator*((DspLib::ComplexSpan *)v107, (DspLib::ComplexVector *)&v101, 2.0);
      DspLib::operator*=((char *)v112 + j, &v101);
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)&v101);
    }
    uint64_t v44 = 0;
    uint64_t v45 = v112;
    do
    {
      char v46 = (void *)((char *)v45 + v44);
      uint64_t v47 = 4 * v46[2] - 4;
      float v48 = *(float *)(*v46 + v47);
      float v49 = *(float *)(v46[1] + v47);
      float v50 = DspLib::sign((DspLib *)1, v49);
      uint64_t v45 = v112;
      **(float **)((char *)v112 + v44 + 8) = v50 * sqrtf((float)(v49 * v49) + (float)(v48 * v48));
      v44 += 80;
    }
    while (v44 != 320);
    DspLibBuffer::resize(a3, v7);
    DspLibBuffer::setNumFrames((unint64_t *)a3, v7);
    uint64_t v51 = DspLibBuffer::numChannels(a3);
    MEMORY[0x1F4188790](v51);
    unint64_t v54 = (const float **)((char *)&v100 - v53);
    if (v52 >= 0x200) {
      size_t v55 = 512;
    }
    else {
      size_t v55 = v52;
    }
    bzero((char *)&v100 - v53, v55);
    for (unint64_t k = 0; k < DspLibBuffer::numChannels(a3); ++k)
      v54[k] = (const float *)DspLibBuffer::channel(a3, k);
    unsigned int v57 = DspLibBuffer::numChannels(a3);
    vDSP_Length cycle_count = vp::utility::CPU_Profiler::get_cycle_count(a3);
    uint64_t v100 = (uint64_t)&v100;
    DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(v106, v7);
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    do
    {
      DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(v106, (DSPSplitComplex *)((char *)v112 + v60), (DSPComplex *)v54[v59]);
      DspLib::multiply((float *)v54[v59], cycle_count, 0.5 / (float)v7);
      v60 += 80;
      ++v59;
    }
    while (v59 != 4);
    if (v16 < 0.5)
    {
      for (uint64_t m = 0; m != 4; ++m)
        *(float *)&v116[m] = DspLib::sum(v54[m], cycle_count);
      std::vector<float>::vector(&v101, v36);
      DspLib::makeTukeyWindow((uint64_t)v101, ((char *)v102 - (char *)v101) >> 2, *(float *)(*(void *)(a1 + 32) + 52));
      DspLibBuffer::setNumFrames((unint64_t *)a3, v36);
      v105[0] = v54;
      v105[1] = v57;
      v105[2] = v36;
      DspLib::multiply(v105, (const float *)v101);
      float v62 = *(float *)v116;
      float v63 = DspLib::sum(*v54, v36) - v62;
      float v64 = -(float)v36;
      DspLib::add((float *)*v54, v36, v63 / v64);
      float v65 = *(float *)&v116[3];
      float v66 = DspLib::sum(v54[3], v36);
      DspLib::add((float *)v54[3], v36, (float)(v66 - v65) / v64);
      float v67 = *(float *)&v116[2];
      float v68 = DspLib::sum(v54[2], v36);
      DspLib::add((float *)v54[2], v36, (float)(v68 - v67) / v64);
      float v69 = *(float *)&v116[1];
      float v70 = DspLib::sum(v54[1], v36);
      DspLib::add((float *)v54[1], v36, (float)(v70 - v69) / v64);
      v104[0] = (uint64_t)v54;
      v104[1] = v57;
      v104[2] = v36;
      float v72 = DspLib::dB2Amp(v71, *(float *)(*(void *)(a1 + 32) + 84));
      DspLib::multiply(v104, v72);
      if (v101)
      {
        uint64_t v102 = v101;
        operator delete(v101);
      }
      vDSP_Length cycle_count = v36;
    }
    v103[0] = v54;
    v103[1] = v57;
    v103[2] = cycle_count;
    if (!DspLib::isFinite(v103))
    {
      uint64_t v99 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v99, 558);
      ++DspLibDebug::mAssertCounter;
      goto LABEL_67;
    }
    if (v16 >= 0.5) {
      goto LABEL_67;
    }
    uint64_t v73 = *(void *)(a1 + 32);
    float v74 = *(float *)(v73 + 40);
    float v75 = *(float *)(v73 + 44);
    if (v74 < 0.5 && v75 < 0.5) {
      goto LABEL_67;
    }
    DspLibBuffer::DspLibBuffer((DspLibBuffer *)&v101, a3);
    if (v74 < 0.5 || v75 < 0.5)
    {
      if (v75 >= 0.5)
      {
        unsigned int v92 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 2u);
        unint64_t v93 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 0, v92, v93, 0);
        uint64_t v94 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 3u);
        unint64_t v95 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 1u, v94, v95, 0);
        float v96 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 0);
        unint64_t v97 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 2u, v96, v97, 0);
        uint64_t v90 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 1u);
        unint64_t v91 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      }
      else
      {
        if (v74 < 0.5)
        {
LABEL_66:
          DspLibBuffer::~DspLibBuffer((DspLibBuffer *)&v101);
LABEL_67:
          *((void *)a3 + 2) = *(void *)(a1 + 16);
          DspLibBuffer::setNumFrames((unint64_t *)a3, v36);
          DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)v106);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v107);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v108);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v110);
          DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)v111);
          uint64_t v101 = (void **)&v112;
          std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](&v101);
          return v39;
        }
        float v78 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 0);
        unint64_t v79 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 0, v78, v79, 0);
        unint64_t v80 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 2u);
        unint64_t v81 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 1u, v80, v81, 0);
        uint64_t v82 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 1u);
        unint64_t v83 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
        DspLibBuffer::copy(a3, 2u, v82, v83, 0);
        uint64_t v90 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 3u);
        unint64_t v91 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      }
    }
    else
    {
      uint64_t v84 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 2u);
      unint64_t v85 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      DspLibBuffer::copy(a3, 0, v84, v85, 0);
      uint64_t v86 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 0);
      unint64_t v87 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      DspLibBuffer::copy(a3, 1u, v86, v87, 0);
      size_t v88 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 3u);
      unint64_t v89 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
      DspLibBuffer::copy(a3, 2u, v88, v89, 0);
      uint64_t v90 = (const float *)DspLibBuffer::channel((DspLibBuffer *)&v101, 1u);
      unint64_t v91 = vp::utility::CPU_Profiler::get_cycle_count((vp::utility::CPU_Profiler *)&v101);
    }
    DspLibBuffer::copy(a3, 3u, v90, v91, 0);
    goto LABEL_66;
  }
  float v12 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
  int v13 = 406;
LABEL_27:
  printf("DSP Sound assertion in %s at line %d\n", v12, v13);
  ++DspLibDebug::mAssertCounter;
  return 0.0;
}

void sub_1BB2BD2C8(_Unwind_Exception *a1)
{
  DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform((uint64_t)(v1 + 21));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 23));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 33));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 44));
  DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 + 54));
  v1[1] = (void **)(v2 - 192);
  std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](v1 + 1);
  _Unwind_Resume(a1);
}

void DspLib::XTC::Algorithm::compute_W_with_H_and_D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void *)a2;
  if (*(void *)a3 == *(void *)a2)
  {
    if (vabds_f32(*(float *)(a3 + 8), *(float *)(a2 + 8)) <= 0.1)
    {
      *(void *)a4 = v5;
      long long v56 = (DspLib::ComplexSpan *)(a4 + 16);
      for (uint64_t i = 16; i != 336; i += 80)
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a4 + i), *(void *)a4);
      *(_DWORD *)(a4 + 8) = *(_DWORD *)(a2 + 8);
      float v14 = *(DspLib::XTC::HRTFSetsForDisplay **)(a1 + 512);
      if (v14)
      {
        DspLib::XTC::HRTFSetsForDisplay::setLength(v14, v5);
        uint64_t v15 = *(void *)(a1 + 512);
        int v16 = *(_DWORD *)(a2 + 8);
        for (uint64_t j = 8; j != 2024; j += 336)
          *(_DWORD *)(v15 + j) = v16;
        DspLib::XTC::HRTFSet::operator=(v15, a2);
        DspLib::XTC::HRTFSet::operator=(*(void *)(a1 + 512) + 336, a3);
      }
      int64x2_t v67 = vdupq_n_s64(0x3F000000uLL);
      uint64_t v68 = 1056964608;
      unint64_t v69 = 0x80000000BF000000;
      DspLib::ComplexMatrix::ComplexMatrix(v60, &v67, 4);
      DspLib::inv((DspLib *)v60, (DspLib::ComplexMatrix *)&v67);
      if (v5 > 1)
      {
        unint64_t v54 = (void *)(a2 + 96);
        size_t v55 = (void *)(a2 + 16);
        unint64_t v52 = (void *)(a2 + 256);
        uint64_t v53 = (void *)(a2 + 176);
        float v50 = (void *)(a3 + 96);
        uint64_t v51 = (void *)(a3 + 16);
        float v49 = (void *)(a3 + 176);
        uint64_t v19 = (void *)(a3 + 256);
        unsigned int v20 = 2;
        unint64_t v21 = 1;
        do
        {
          v66[0] = DspLib::ComplexSpan::operator[](v55, v21);
          v66[1] = v22;
          v66[2] = DspLib::ComplexSpan::operator[](v54, v21);
          v66[3] = v23;
          v66[4] = DspLib::ComplexSpan::operator[](v53, v21);
          v66[5] = v24;
          v66[6] = DspLib::ComplexSpan::operator[](v52, v21);
          v66[7] = v25;
          DspLib::ComplexMatrix::ComplexMatrix(v59, v66, 4);
          v65[0] = DspLib::ComplexSpan::operator[](v51, v21);
          v65[1] = v26;
          v65[2] = DspLib::ComplexSpan::operator[](v50, v21);
          v65[3] = v27;
          v65[4] = DspLib::ComplexSpan::operator[](v49, v21);
          v65[5] = v28;
          v65[6] = DspLib::ComplexSpan::operator[](v19, v21);
          v65[7] = v29;
          DspLib::ComplexMatrix::ComplexMatrix(v66, v65, 4);
          DspLib::inv((DspLib *)v59, (DspLib::ComplexMatrix *)v58);
          DspLib::operator*((uint64_t)v58, (uint64_t)v66, (DspLib::ComplexMatrix *)v65);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v58);
          DspLib::operator*((uint64_t)v60, (uint64_t)v65, (DspLib::ComplexMatrix *)v57);
          DspLib::operator*((uint64_t)v57, (uint64_t)&v67, (DspLib::ComplexMatrix *)v58);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v57);
          v57[0] = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 0);
          v57[1] = v30;
          DspLib::operator/=(v58, v57);
          uint64_t v31 = *(void *)(a1 + 32);
          int v32 = llroundf(*(float *)(v31 + 4 * (vcvtas_u32_f32(*(float *)(v31 + 4)) + 23)));
          if (v32 == -2) {
            int v32 = *(_DWORD *)(a1 + 520);
          }
          *(_DWORD *)(a1 + 520) = v32;
          if (*(float *)(v31 + 4 * (16 * (v32 & ~(v32 >> 31)) + 39)) < 0.5)
          {
            v61[0] = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 0);
            v61[1] = v33;
            v61[2] = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 1uLL);
            v61[3] = v34;
            uint64_t v62 = 0;
            float v63 = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 1uLL, 1uLL);
            int v64 = v35;
            DspLib::ComplexMatrix::ComplexMatrix(v57, v61, 4);
            DspLib::ComplexMatrix::operator=(v58, v57);
            DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v57);
          }
          uint64_t v36 = *(void *)(a1 + 512);
          if (v36)
          {
            v71.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 0);
            DspLib::ComplexSpan::setElement((void *)(v36 + 688), v21, v71);
            uint64_t v37 = *(void *)(a1 + 512);
            v72.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 1uLL);
            DspLib::ComplexSpan::setElement((void *)(v37 + 768), v21, v72);
            uint64_t v38 = *(void *)(a1 + 512);
            v73.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 0);
            DspLib::ComplexSpan::setElement((void *)(v38 + 848), v21, v73);
            uint64_t v39 = *(void *)(a1 + 512);
            v74.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 1uLL);
            DspLib::ComplexSpan::setElement((void *)(v39 + 928), v21, v74);
            uint64_t v40 = *(void *)(a1 + 512);
            v75.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 0);
            DspLib::ComplexSpan::setElement((void *)(v40 + 1024), v21, v75);
            uint64_t v41 = *(void *)(a1 + 512);
            v76.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 0, 1uLL);
            DspLib::ComplexSpan::setElement((void *)(v41 + 1104), v21, v76);
            uint64_t v42 = *(void *)(a1 + 512);
            v77.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 1uLL, 0);
            DspLib::ComplexSpan::setElement((void *)(v42 + 1184), v21, v77);
            uint64_t v43 = *(void *)(a1 + 512);
            v78.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v58, 1uLL, 1uLL);
            DspLib::ComplexSpan::setElement((void *)(v43 + 1264), v21, v78);
          }
          DspLib::operator*((uint64_t)&v67, (uint64_t)v58, (DspLib::ComplexMatrix *)v61);
          DspLib::operator*((uint64_t)v61, (uint64_t)v60, (DspLib::ComplexMatrix *)v57);
          DspLib::ComplexMatrix::operator=(v65, v57);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v57);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v61);
          v79.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 0);
          DspLib::ComplexSpan::setElement(v56, v21, v79);
          v80.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 0, 1uLL);
          DspLib::ComplexSpan::setElement((void *)(a4 + 96), v21, v80);
          v81.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 0);
          DspLib::ComplexSpan::setElement((void *)(a4 + 176), v21, v81);
          v82.real = DspLib::ComplexMatrixSpan::element((DspLib::ComplexMatrixSpan *)v65, 1uLL, 1uLL);
          DspLib::ComplexSpan::setElement((void *)(a4 + 256), v21, v82);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v58);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v65);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v66);
          DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v59);
          unint64_t v21 = v20;
        }
        while (v5 > v20++);
      }
      float v45 = 0.0;
      for (uint64_t k = 16; k != 336; k += 80)
        float v45 = v45 + DspLib::checksum((DspLib *)(a4 + k), v18, 0.0);
      for (uint64_t m = 16; m != 336; m += 80)
      {
        v83.real = 0.0;
        v83.imag = 0.0;
        DspLib::ComplexSpan::setElement((void *)(a4 + m), 0, v83);
      }
      uint64_t v48 = *(void *)(a1 + 512);
      if (v48) {
        DspLib::XTC::HRTFSet::operator=(v48 + 1344, a4);
      }
      DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)&v67);
      DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)v60);
    }
    else
    {
      unsigned int v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v8, 273);
      ++DspLibDebug::mAssertCounter;
      *(void *)a4 = 0;
      for (uint64_t n = 16; n != 336; n += 80)
        DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a4 + n), *(void *)a4);
    }
  }
  else
  {
    float v10 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v10, 266);
    ++DspLibDebug::mAssertCounter;
    *(void *)a4 = 0;
    for (iuint64_t i = 16; ii != 336; ii += 80)
      DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a4 + ii), *(void *)a4);
  }
}

void sub_1BB2BDAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)(v55 - 208));
  DspLib::ComplexMatrix::~ComplexMatrix((DspLib::ComplexMatrix *)&a55);
  _Unwind_Resume(a1);
}

void DspLib::XTC::HRTFSetsForDisplay::setLength(DspLib::XTC::HRTFSetsForDisplay *this, uint64_t a2)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    *(void *)this = a2;
    for (uint64_t j = 16; j != 336; j += 80)
      DspLib::ComplexVector::setLength((DspLib::XTC::HRTFSetsForDisplay *)((char *)this + j), *(void *)this);
    this = (DspLib::XTC::HRTFSetsForDisplay *)((char *)this + 336);
  }
}

uint64_t DspLib::XTC::HRTFSet::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  for (uint64_t i = 16; i != 336; i += 80)
    DspLib::ComplexVector::setLength((DspLib::ComplexVector *)(a1 + i), *(void *)a1);
  for (uint64_t j = 16; j != 336; j += 80)
    uint64_t result = DspLib::ComplexVector::operator=(a1 + j, a2 + j);
  return result;
}

void DspLib::XTC::Algorithm::makeCrossover(float **a1, float **a2, float *a3, float a4)
{
  float v6 = a3[9];
  BOOL v7 = v6 >= 0.5;
  float v8 = a3[16];
  float v9 = a3[17];
  float v10 = a3[18];
  if (v9 < v8)
  {
    float v11 = a3[19];
    if (v11 >= v8) {
      float v10 = (float)(v10 - (float)((float)((float)(a3[20] - v10) / (float)(v11 - v9)) * v9))
    }
          + (float)((float)((float)(a3[20] - v10) / (float)(v11 - v9)) * v8);
    else {
      float v10 = a3[20];
    }
  }
  float v12 = a3[2];
  if (a3[30] >= 0.5)
  {
    if (v12 < 0.5)
    {
      BOOL v7 = 0;
      float v14 = 1.0;
      goto LABEL_11;
    }
    DspLib::ComplexVector::operator=(a1, 1.0);
LABEL_26:
    float v15 = 0.0;
LABEL_27:
    uint64_t v17 = a2;
    float v16 = v15;
    goto LABEL_28;
  }
  float v13 = a3[8];
  float v14 = v10 / 100.0;
  float v15 = 1.0 - (float)(v10 / 100.0);
  if (v12 >= 0.5)
  {
    if (v13 < 0.5) {
      float v40 = v10 / 100.0;
    }
    else {
      float v40 = 0.0;
    }
    DspLib::ComplexVector::operator=(a1, v40);
    if (v6 < 0.5) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v13 >= 0.5)
  {
    DspLib::ComplexVector::operator=(a2, v15);
    float v16 = 0.0;
    uint64_t v17 = a1;
LABEL_28:
    DspLib::ComplexVector::operator=(v17, v16);
    return;
  }
LABEL_11:
  unint64_t v18 = (unint64_t)a1[2];
  float v19 = a3[6];
  float v20 = a3[7];
  float v21 = a3[4];
  float v22 = a3[5];
  float v23 = 1.0;
  if (v7) {
    float v24 = 1.0;
  }
  else {
    float v24 = v14;
  }
  if (v7) {
    float v25 = v14;
  }
  else {
    float v25 = 1.0;
  }
  int v26 = *a1;
  **a1 = 0.0;
  int v27 = *a2;
  **a2 = v25;
  if (v18 >= 2)
  {
    float v41 = a4 / (float)(2 * v18);
    float v42 = v19;
    for (unint64_t i = 1; i < v18; unint64_t i = (i + 1))
    {
      float v29 = v21;
      float v30 = v41 * (float)i;
      float v31 = logf(v19 / v30);
      float v32 = expf(v20 * v31) + v23;
      float v33 = v20;
      float v34 = 1.0 / v32;
      float v35 = v29 / v30;
      float v21 = v29;
      float v36 = logf(v35);
      float v37 = expf(v22 * v36);
      float v19 = v42;
      float v38 = v34 * (float)(1.0 - (float)(1.0 / (float)(v37 + 1.0)));
      float v20 = v33;
      float v23 = 1.0;
      float v39 = v24 * v38;
      v26[i] = v25 * v39;
      v27[i] = v25 * (float)(1.0 - v39);
    }
  }
}

unint64_t DspLib::XTC::Algorithm::targetFIRfilterLength(DspLib::XTC::Algorithm *this)
{
  int v2 = llroundf(*(float *)(*((void *)this + 4) + 4 * (vcvtas_u32_f32(*(float *)(*((void *)this + 4) + 4)) + 23)));
  if (v2 == -2) {
    int v2 = *((_DWORD *)this + 130);
  }
  *((_DWORD *)this + 130) = v2;
  if (v2 == -1)
  {
    uint64_t v3 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
    printf("DSP Sound assertion in %s at line %d\n", v3, 660);
    ++DspLibDebug::mAssertCounter;
  }
  uint64_t v4 = (uint64_t *)*((void *)this + (v2 & ~(v2 >> 31)) + 32);
  if (v4)
  {
    uint64_t v5 = *v4;
    if (v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = *((void *)this + 34);
    if (v6)
    {
      uint64_t v5 = (uint64_t)((1 << *(_DWORD *)(v6 + 4)) + (1 << *(_DWORD *)(v6 + 4) < 0)) >> 1;
      if (v5) {
        goto LABEL_13;
      }
    }
    else
    {
      BOOL v7 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
      printf("DSP Sound assertion in %s at line %d\n", v7, 675);
      ++DspLibDebug::mAssertCounter;
    }
  }
  float v8 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/XTC/dsp/DspLibXTC.cpp");
  printf("DSP Sound assertion in %s at line %d\n", v8, 680);
  ++DspLibDebug::mAssertCounter;
  uint64_t v5 = 1;
LABEL_13:
  uint64_t v9 = *((void *)this + 4);
  if (*(float *)(v9 + 12) >= 0.5)
  {
    unint64_t v12 = 2 * v5;
    float v11 = (void *)v12;
  }
  else
  {
    double v10 = *((double *)this + 2) * *(float *)(v9 + 48);
    float v11 = &unk_1BB873000;
    LODWORD(v11) = vcvtad_u64_f64(v10 * 0.001);
    unint64_t v12 = 2 * v5;
  }
  unint64_t v13 = (unint64_t)v11 + (v11 & 1) - 1;
  if (v12 >= v13) {
    unint64_t v12 = v13;
  }
  if (v13) {
    return v12;
  }
  else {
    return 1;
  }
}

void DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::process<(DspLib::FFT::Direction)-1>(void *a1, DSPSplitComplex *__Z, DSPComplex *__C)
{
  uint64_t v6 = (const vDSP_DFT_SetupStruct *)a1[1];
  if (v6) {
    vDSP_DFT_Execute(v6, __Z->realp, __Z->imagp, __Z->realp, __Z->imagp);
  }
  vDSP_Length v7 = *a1 >> 1;

  vDSP_ztoc(__Z, 1, __C, 2, v7);
}

uint64_t DspLib::XTC::Algorithm::wFilters(DspLib::XTC::Algorithm *this, int a2)
{
  uint64_t result = *((void *)this + (a2 > 0) + 32);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1BB2BE188(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 80)
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v1 - 64 + v2));
  MEMORY[0x1C185D370](v1, 0x1080C400BF4BD80);
  _Unwind_Resume(a1);
}

void DspLib::XTC::Algorithm::~Algorithm(DspLib::XTC::Algorithm *this)
{
  DspLib::XTC::Algorithm::~Algorithm(this);

  JUMPOUT(0x1C185D370);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(void *)this = &unk_1F14A71E0;
  uint64_t v2 = *((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v2) {
    std::default_delete<DspLib::XTC::HRTFSetsForDisplay>::operator()[abi:ne180100]((uint64_t)this + 512, v2);
  }
  uint64_t v3 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v3) {
    MEMORY[0x1C185D370](v3, 0x1000C407BAC9B3ELL);
  }
  uint64_t v4 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v4) {
    MEMORY[0x1C185D370](v4, 0x1000C4000313F17);
  }
  for (unint64_t i = 264; i != 248; i -= 8)
    std::unique_ptr<DspLib::XTC::HRTFSet>::reset[abi:ne180100]((uint64_t *)((char *)this + i), 0);
  uint64_t v6 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v6) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 224, v6);
  }
  vDSP_Length v7 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v7) {
    std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100]((uint64_t)this + 216, v7);
  }
  *(void *)this = &unk_1F14A87D8;
  float v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
}

uint64_t DspLib::XTC::Algorithm::numStatus(DspLib::XTC::Algorithm *this)
{
  return 10;
}

uint64_t std::vector<DspLib::ComplexVector>::__emplace_back_slow_path<unsigned long &>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<vp::vx::database::v1::syntax::Rule>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    double v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(v7, v9);
  }
  else {
    double v10 = 0;
  }
  unint64_t v13 = v10;
  float v14 = (DspLib::ComplexVector *)&v10[80 * v4];
  float v15 = v14;
  float v16 = &v10[80 * v9];
  DspLib::ComplexVector::ComplexVector(v14, *a2, 0);
  float v15 = (DspLib::ComplexVector *)((char *)v14 + 80);
  std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1BB2BE300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DspLib::ComplexVector>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DspLib::ComplexVector>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ComplexVector>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DspLib::ComplexVector>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DspLib::ComplexVector>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>,std::reverse_iterator<DspLib::ComplexVector*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 80;
  while (a3 + v10 != a5)
  {
    unint64_t v12 = (DspLib::ComplexVector *)(v11 + v10);
    v10 -= 80;
    DspLib::ComplexVector::ComplexVector(v12, (const DspLib::ComplexVector *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<DspLib::ComplexVector>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<DspLib::ComplexVector>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v4 - 80));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<DspLib::XTC::HRTFSetsForDisplay>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 + 2016;
    uint64_t v4 = a2 + 1936;
    do
    {
      for (uint64_t i = 0; i != -320; i -= 80)
        DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v4 + i));
      v3 -= 336;
      v4 -= 336;
    }
    while (v3 != a2);
    JUMPOUT(0x1C185D370);
  }
}

uint64_t DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(uint64_t a1)
{
  uint64_t v2 = *(vDSP_DFT_SetupStruct **)(a1 + 8);
  if (v2) {
    vDSP_DFT_DestroySetup(v2);
  }
  return a1;
}

uint64_t std::array<DspLib::FastFIR,4ul>::array(uint64_t a1)
{
  uint64_t v2 = 0;
  long long v3 = 0uLL;
  uint64_t v4 = a1;
  do
  {
    *(_OWORD *)uint64_t v4 = v3;
    *(_OWORD *)(v4 + 16) = v3;
    DspLib::ComplexVector::ComplexVector((DspLib::ComplexVector *)(v4 + 32), 0, 0);
    *(void *)(v4 + 144) = 0;
    long long v3 = 0uLL;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    ++v2;
    v4 += 152;
  }
  while (v2 != 4);
  return a1;
}

void sub_1BB2BE760(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v3 + 8);
  if (v5)
  {
    *(void *)(v3 + 16) = v5;
    operator delete(v5);
  }
  std::array<DspLib::FastFIR,4ul>::array(v2, v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::~Transform(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

uint64_t std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    DspLib::FFT::Transform<(DspLib::FFT::Direction)1>::~Transform(result);
    JUMPOUT(0x1C185D370);
  }
  return result;
}

void std::default_delete<DspLib::XTC::FIRMatrix>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = 608;
    while (1)
    {
      uint64_t v4 = a2 + v3;
      std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100]((uint64_t *)(a2 + v3 - 8), 0);
      std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)(a2 + v3 - 16), 0);
      uint64_t v5 = *(void **)(a2 + v3 - 40);
      if (v5)
      {
        *(void *)(v4 - 32) = v5;
        operator delete(v5);
      }
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(v4 - 120));
      uint64_t v6 = *(void **)(v4 - 144);
      if (v6)
      {
        *(void *)(a2 + v3 - 136) = v6;
        operator delete(v6);
      }
      v3 -= 152;
      if (!v3)
      {
        JUMPOUT(0x1C185D370);
      }
    }
  }
}

vDSP_Length *DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>::Transform(vDSP_Length *a1, vDSP_Length a2)
{
  *a1 = a2;
  vDSP_DFT_Setup Setup = vDSP_DFT_zrop_CreateSetup(0, a2, vDSP_DFT_INVERSE);
  a1[1] = (vDSP_Length)Setup;
  if (!Setup)
  {
    uint64_t v5 = basename("/Library/Caches/com.apple.xbs/Sources/AudioDSP_darwinOS/Source/AudioDSP/InternalAudioUnits/Effects/DspLib/FFT/dsp/DspLibFFT.h");
    printf("DSP Sound assertion in %s at line %d\n", v5, 78);
    ++DspLibDebug::mAssertCounter;
  }
  return a1;
}

void std::array<DspLib::FastFIR,4ul>::array(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    do
    {
      std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)-1>>::reset[abi:ne180100]((uint64_t *)(a2 - 8), 0);
      std::unique_ptr<DspLib::FFT::Transform<(DspLib::FFT::Direction)1>>::reset[abi:ne180100]((uint64_t *)(a2 - 16), 0);
      uint64_t v5 = *(void **)(a2 - 40);
      if (v5)
      {
        *(void *)(a2 - 32) = v5;
        operator delete(v5);
      }
      DspLib::ComplexVector::~ComplexVector((DspLib::ComplexVector *)(a2 - 120));
      uint64_t v6 = *(void **)(a2 - 144);
      if (v6)
      {
        *(void *)(a2 - 136) = v6;
        operator delete(v6);
      }
      a2 -= 152;
    }
    while (a2 != a3);
  }
}

double *DspLib::roots(DspLib *this, const float *a2, __CLPK_doublereal *a3, DSPDoubleSplitComplex a4)
{
  realp = a4.realp;
  v17[1] = *MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t v6 = (double *)((char *)a2 - 1);
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(float *)this == 0.0 && (unint64_t)a2 >= 2)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (char *)v9 + 1;
      BOOL v11 = *((float *)this + (v9 + 1)) != 0.0 || (double *)((char *)v6 - 1) == v9;
      unint64_t v9 = (double *)((char *)v9 + 1);
    }
    while (!v11);
    uint64_t v8 = v10;
    uint64_t v6 = (double *)((char *)v6 - v10);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((double *)((unint64_t)v6 - 1) >= a4.imagp) {
    return 0;
  }
  unint64_t v12 = (DspLib *)MEMORY[0x1F4188790]((char *)this + 4 * v8);
  float v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  DspLib::getCompanionMatrix(v12, (unint64_t)v6, v14, v15);
  v19.realp = realp;
  DspLib::hessenbergEigenvalues((DspLib *)v14, v6, a3, v19);
  v18.realp = realp;
  v18.imagp = v6;
  DspLib::sortRoots(a3, v18);
  return v6;
}

void DspLib::getCompanionMatrix(DspLib *this, unint64_t a2, void *a3, double *a4)
{
  if (a2 * a2) {
    bzero(a3, 8 * a2 * a2);
  }
  if (a2)
  {
    double v7 = *(float *)this;
    unsigned int v8 = 1;
    unint64_t v9 = (double *)a3;
    do
    {
      unint64_t v10 = v8;
      *unint64_t v9 = (float)-*((float *)this + v8) / v7;
      v9 += a2;
      ++v8;
    }
    while (v10 < a2);
    if (a2 >= 2)
    {
      uint64_t v11 = 0;
      unsigned int v12 = 1;
      unsigned int v13 = 2;
      do
      {
        *((void *)a3 + v11 + v12++) = 0x3FF0000000000000;
        unint64_t v14 = v13++;
        v11 += a2;
      }
      while (v14 < a2);
    }
  }
}

uint64_t DspLib::hessenbergEigenvalues(DspLib *this, double *a2, __CLPK_doublereal *a3, DSPDoubleSplitComplex a4)
{
  __wuint64_t i = a4.realp;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  __CLPK_integer __ldh = (int)a2;
  *(void *)__ilo = DspLib::balanceMatrix(this, a2);
  char __job = 69;
  char __compz = 78;
  __CLPK_doublereal v12 = 0.0;
  __CLPK_integer v10 = 0;
  __lworuint64_t k = -1;
  uint64_t v7 = dhseqr_(&__job, &__compz, &__ldh, __ilo, &__ilo[1], (__CLPK_doublereal *)this, &__ldh, a3, __wi, 0, &__ldh, &v12, &__lwork, &v10);
  __lworuint64_t k = (int)v12;
  MEMORY[0x1F4188790](v7);
  return dhseqr_(&__job, &__compz, &__ldh, __ilo, &__ilo[1], (__CLPK_doublereal *)this, &__ldh, a3, __wi, 0, &__ldh, (__CLPK_doublereal *)((char *)&v10 - v8), &__lwork, &v10);
}

void *DspLib::sortRoots(void *this, DSPDoubleSplitComplex a2)
{
  if (a2.imagp)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    uint64_t v4 = (char *)a2.imagp - 1;
    unsigned int v5 = 1;
    while (a2.realp[(void)v2] != 0.0)
    {
LABEL_13:
      ++v2;
      ++v5;
      if (a2.imagp <= (double *)v2) {
        return this;
      }
    }
    if (v3 || v4 != v2)
    {
      if ((((_BYTE)v3 + 1) & 1) == 0)
      {
LABEL_12:
        ++v3;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v6 = this[(void)v4];
      this[(void)v4] = *this;
      *this = v6;
      double v7 = a2.realp[(void)v2];
      a2.realp[(void)v2] = *a2.realp;
      *a2.realp = v7;
    }
    uint64_t v8 = (double *)(v2 + 1);
    if (v8 < a2.imagp)
    {
      int v9 = 0;
      uint64_t v10 = (v2 + 1);
      unsigned int v11 = v2 + 1;
      __CLPK_doublereal v12 = &this[v5];
      unsigned int v13 = &a2.realp[v5];
      while (a2.realp[v10] != 0.0)
      {
        ++v9;
        uint64_t v10 = ++v11;
        if ((double *)v11 >= a2.imagp) {
          goto LABEL_12;
        }
      }
      v3 += 2;
      if (v8 < v11)
      {
        do
        {
          uint64_t v14 = this[v10];
          this[v10] = *v12;
          *v12++ = v14;
          double v15 = a2.realp[v10];
          a2.realp[v10] = *v13;
          *v13++ = v15;
          --v9;
        }
        while (v9);
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  return this;
}

unint64_t DspLib::roots(DspLib *this, const double *a2, __CLPK_doublereal *a3, DSPDoubleSplitComplex a4)
{
  realp = a4.realp;
  v25[1] = *MEMORY[0x1E4F143B8];
  if (a2) {
    unint64_t v6 = (unint64_t)a2 - 1;
  }
  else {
    unint64_t v6 = 0;
  }
  if (*(double *)this == 0.0 && (unint64_t)a2 >= 2)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v9 + 1;
      BOOL v11 = *((double *)this + (v9 + 1)) != 0.0 || v6 - 1 == v9;
      ++v9;
    }
    while (!v11);
    uint64_t v8 = v10;
    v6 -= v10;
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((double *)(v6 - 1) >= a4.imagp) {
    return 0;
  }
  __CLPK_doublereal v12 = (double *)((char *)this + 8 * v8);
  MEMORY[0x1F4188790](this);
  double v15 = (DspLib *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v16) {
    bzero((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  }
  double v17 = *v12;
  unsigned int v18 = 1;
  DSPDoubleSplitComplex v19 = (double *)v15;
  do
  {
    double *v19 = -v12[v18] / v17;
    v19 += v6;
    BOOL v20 = v6 > v18++;
  }
  while (v20);
  if (v6 >= 2)
  {
    uint64_t v21 = 0;
    unsigned int v22 = 1;
    unsigned int v23 = 2;
    do
    {
      *((void *)v15 + v21 + v22++) = 0x3FF0000000000000;
      BOOL v20 = v6 > v23++;
      v21 += v6;
    }
    while (v20);
  }
  v14.realp = realp;
  DspLib::hessenbergEigenvalues(v15, (double *)v6, a3, v14);
  v26.realp = realp;
  v26.imagp = (double *)v6;
  DspLib::sortRoots(a3, v26);
  return v6;
}

void DspLib::sPolynomialToBiquadCoefficients(float *a1, double a2, uint64_t a3, DspLib *a4, const float *a5, uint64_t *a6, int a7)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  size_t v13 = (DspLib *)MEMORY[0x1F4188790](a1);
  double v15 = (__CLPK_doublereal *)&v37 - v14;
  uint64_t v16 = &v15[(uint64_t)v41.imagp];
  v41.realp = v16;
  unint64_t v18 = (unint64_t)DspLib::roots(v13, v17, v15, v41);
  MEMORY[0x1F4188790](v18);
  BOOL v20 = (__CLPK_doublereal *)&v37 - v19;
  uint64_t v21 = &v20[(uint64_t)v42.imagp];
  v42.realp = v21;
  unsigned int v22 = DspLib::roots(a4, a5, v20, v42);
  unint64_t v23 = (unint64_t)v22;
  if (a7)
  {
    unint64_t v24 = ((unint64_t)v22 + 1) >> 1;
    if (v24 <= (v18 + 1) >> 1) {
      unint64_t v24 = (v18 + 1) >> 1;
    }
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = v24;
    }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v25);
    uint64_t v27 = *a6;
    uint64_t v28 = a6[1];
    if (*a6 != v28)
    {
      double v26 = *(double *)&DspLib::Biquad::kBypassSection;
      do
      {
        *(_DWORD *)(v27 + 16) = 0;
        *(_OWORD *)uint64_t v27 = DspLib::Biquad::kBypassSection;
        v27 += 20;
      }
      while (v27 != v28);
    }
    v40.realp = v16;
    v40.imagp = (double *)v18;
    v43.realp = v21;
    v43.imagp = (double *)v23;
    DspLib::groupRoots((DspLib *)v15, v40, (DspLib *)v20, v43, v26);
    if (v23 | v18)
    {
      DspLib::addZerosForward(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
      DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    }
    DspLib::discretizeMZTi((long long *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18, (uint64_t)v20, (uint64_t)v21, v23, a2);
  }
  else
  {
    a6[1] = *a6;
    float v29 = a6 + 1;
    unint64_t v30 = ((unint64_t)v22 + 1) >> 1;
    if (v30 <= (v18 + 1) >> 1) {
      unint64_t v30 = (v18 + 1) >> 1;
    }
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = v30;
    }
    std::vector<DspLib::Biquad::Section>::resize((uint64_t)a6, v31);
    DspLib::addZeros(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v15, (uint64_t)v16, v18);
    DspLib::addPoles(*a6, 0xCCCCCCCCCCCCCCCDLL * ((*v29 - *a6) >> 2), (uint64_t)v20, (uint64_t)v21, v23);
    float v32 = (float *)*a6;
    if (*v29 != *a6)
    {
      uint64_t v33 = 20 * ((*v29 - *a6) / 20);
      do
      {
        DspLib::Biquad::Design::bilinearTransformStoZUnwarped(v32, a2);
        v32 += 5;
        v33 -= 20;
      }
      while (v33);
    }
  }
  DspLib::configureGain((float32x2_t *)*a6, 0xCCCCCCCCCCCCCCCDLL * ((a6[1] - *a6) >> 2), *a1 / *(float *)a4);
  uint64_t v35 = *a6;
  for (uint64_t i = a6[1]; v35 != i; v35 += 20)
  {
    long long v36 = *(_OWORD *)v35;
    int v38 = *(_DWORD *)(v35 + 16);
    long long v37 = v36;
    if ((DspLib::Biquad::validate((uint64_t)&v37) & 1) == 0)
    {
      *(_DWORD *)(v35 + 16) = 0;
      *(_OWORD *)uint64_t v35 = DspLib::Biquad::kBypassSection;
    }
  }
}

uint64_t DspLib::addZeros(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    unsigned int v5 = 0;
    unint64_t v6 = a5 - 1;
    for (uint64_t i = 20 * a2; i; i -= 20)
    {
      if (v5 < a5)
      {
        unint64_t v8 = v6 - v5;
        double v9 = *(double *)(a4 + 8 * v8);
        if (v6 > v5 && v9 != 0.0)
        {
          double v10 = *(double *)(a3 + 8 * v8);
          *(_DWORD *)uint64_t result = 1065353216;
          float v11 = v10 * -2.0;
          *(float *)(result + 4) = v11;
          double v12 = v9 * v9 + v10 * v10;
          goto LABEL_7;
        }
        if (v9 == 0.0)
        {
          if (v6 != v5 && *(double *)(a4 + 8 * (v8 - 1)) == 0.0)
          {
            double v16 = *(double *)(a3 + 8 * v8);
            double v17 = *(double *)(a3 + 8 * (v8 - 1));
            *(_DWORD *)uint64_t result = 1065353216;
            float v18 = v16 + v17;
            *(float *)(result + 4) = -v18;
            double v12 = v16 * v17;
LABEL_7:
            float v13 = v12;
            int v14 = 2;
          }
          else
          {
            double v15 = *(double *)(a3 + 8 * v8);
            *(void *)uint64_t result = 0x3F80000000000000;
            *(float *)&double v15 = v15;
            float v13 = -*(float *)&v15;
            int v14 = 1;
          }
          *(float *)(result + 8) = v13;
          v5 += v14;
        }
      }
      result += 20;
    }
  }
  return result;
}

uint64_t DspLib::addPoles(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = a5 - 1;
    double v7 = (float *)(result + 16);
    for (uint64_t i = 20 * a2; i; i -= 20)
    {
      if (v5 >= a5)
      {
LABEL_12:
        uint64_t v14 = v5;
        goto LABEL_13;
      }
      double v9 = *(double *)(a4 + 8 * v5);
      if (v6 <= v5 || v9 == 0.0)
      {
        if (v9 != 0.0) {
          goto LABEL_12;
        }
        uint64_t v14 = (v5 + 1);
        if (v6 == v5 || *(double *)(a4 + 8 * v14) != 0.0)
        {
          float v15 = *(double *)(a3 + 8 * v5);
          *(v7 - 1) = -v15;
          *double v7 = 0.0;
          goto LABEL_13;
        }
        double v16 = *(double *)(a3 + 8 * v5);
        double v17 = *(double *)(a3 + 8 * v14);
        float v18 = v16 + v17;
        *(v7 - 1) = -v18;
        double v12 = v16 * v17;
      }
      else
      {
        double v10 = *(double *)(a3 + 8 * v5);
        float v11 = v10 * -2.0;
        *(v7 - 1) = v11;
        double v12 = v9 * v9 + v10 * v10;
      }
      float v13 = v12;
      *double v7 = v13;
      uint64_t v14 = (v5 + 2);
LABEL_13:
      v7 += 5;
      uint64_t v5 = v14;
    }
  }
  return result;
}

double DspLib::groupRoots(DspLib *this, DSPDoubleSplitComplex a2, DspLib *a3, DSPDoubleSplitComplex a4, double result)
{
  if ((uint64_t)a4.imagp | (uint64_t)a2.imagp)
  {
    imagp = a4.imagp;
    realp = a4.realp;
    unint64_t v8 = a2.imagp;
    double v9 = a2.realp;
    unint64_t v11 = DspLib::partitionRealRootToEnd(a3, a4);
    unint64_t v12 = v11;
    unint64_t v13 = (unint64_t)imagp - v11;
    if (imagp != (double *)v11)
    {
      unint64_t v14 = 0;
      int v15 = 4;
      do
      {
        unint64_t v16 = (v14 + 2);
        unsigned int v17 = v14;
        unsigned int v18 = v15;
        unint64_t v19 = v16;
        if (v13 > v16)
        {
          do
          {
            if (*((double *)a3 + v19) > *((double *)a3 + v17)) {
              unsigned int v17 = v18 - 2;
            }
            unint64_t v19 = v18;
            BOOL v20 = v13 > v18;
            v18 += 2;
          }
          while (v20);
        }
        uint64_t v21 = *((void *)a3 + v14);
        *((void *)a3 + v14) = *((void *)a3 + v17);
        *((void *)a3 + v17) = v21;
        double v22 = realp[v14];
        realp[v14] = realp[v17];
        realp[v17] = v22;
        unsigned int v23 = v14 | 1;
        unsigned int v24 = v17 + 1;
        uint64_t v25 = *((void *)a3 + v23);
        *((void *)a3 + v23) = *((void *)a3 + v24);
        *((void *)a3 + v24) = v25;
        double v26 = realp[v23];
        realp[v23] = realp[v24];
        realp[v24] = v26;
        v15 += 2;
        unint64_t v14 = v16;
      }
      while (v13 > v16);
    }
    uint64_t v27 = (char *)a3 + 8 * v13;
    if (v11)
    {
      unint64_t v28 = 0;
      do
      {
        unint64_t v29 = v28++;
        if (v28 < v11)
        {
          double v30 = *(double *)&v27[8 * v29];
          unint64_t v31 = v28;
          unint64_t v32 = v29;
          do
          {
            if (*(double *)&v27[8 * v31] > v30) {
              unint64_t v32 = v31;
            }
            double v30 = *(double *)&v27[8 * v29];
            *(void *)&v27[8 * v29] = *(void *)&v27[8 * v32];
            *(double *)&v27[8 * v32] = v30;
            ++v31;
          }
          while (v11 != v31);
        }
      }
      while (v28 != v11);
    }
    v104.realp = v9;
    v104.imagp = v8;
    unint64_t v33 = DspLib::partitionRealRootToEnd(this, v104);
    unint64_t v34 = (unint64_t)v8 - v33;
    if ((unint64_t)v8 - v33 >= v13) {
      uint64_t v35 = (char *)v13;
    }
    else {
      uint64_t v35 = (char *)v8 - v33;
    }
    if (v35)
    {
      unint64_t v36 = 0;
      unint64_t v37 = 0;
      do
      {
        double v38 = *((double *)this + v37);
        unint64_t v39 = v37 + 2;
        if (v37 + 2 >= v34)
        {
          unint64_t v44 = v37;
        }
        else
        {
          double v40 = *((double *)a3 + v36);
          double v41 = realp[v36];
          double v42 = sqrt((v41 - v9[v37]) * (v41 - v9[v37]) + (v40 - v38) * (v40 - v38));
          unint64_t v43 = v37 + 2;
          unint64_t v44 = v37;
          do
          {
            double v45 = sqrt((v41 - v9[v43]) * (v41 - v9[v43])+ (v40 - *((double *)this + v43)) * (v40 - *((double *)this + v43)));
            if (v45 < v42)
            {
              double v42 = v45;
              unint64_t v44 = v43;
            }
            v43 += 2;
          }
          while (v43 < v34);
          double v38 = *((double *)this + v44);
        }
        *((void *)this + v44) = *((void *)this + v36);
        *((double *)this + v36) = v38;
        double v46 = v9[v44];
        v9[v44] = v9[v36];
        v9[v36] = v46;
        uint64_t v47 = 8 * v44 + 8;
        unint64_t v48 = (16 * (((unint64_t)(v37 & 0xFFFFFFFE) >> 1) & 0x7FFFFFFF)) | 8;
        uint64_t v49 = *(void *)((char *)this + v47);
        *(void *)((char *)this + v47) = *(void *)((char *)this + v48);
        *(void *)((char *)this + v48) = v49;
        uint64_t result = *(double *)((char *)v9 + v47);
        *(double *)((char *)v9 + v47) = *(double *)((char *)v9 + v48);
        *(double *)((char *)v9 + v48) = result;
        unint64_t v36 = v39 & 0xFFFFFFFE;
        v37 += 2;
      }
      while ((unint64_t)v35 > v36);
    }
    else
    {
      unint64_t v39 = 0;
    }
    unint64_t v50 = v34 - v39;
    if (v12 >= v34 - v39) {
      unint64_t v51 = v34 - v39;
    }
    else {
      unint64_t v51 = v12;
    }
    if (v51)
    {
      uint64_t v52 = 0;
      uint64_t v53 = (char *)this + 8 * v39;
      unint64_t v54 = &v9[v39];
      do
      {
        unint64_t v55 = v52 + 2;
        if (v52 + 2 < v50)
        {
          double v56 = *(double *)&v27[8 * v52] - *(double *)&v53[8 * v52];
          uint64_t result = sqrt(v54[v52] * v54[v52] + v56 * v56);
          uint64_t v57 = v52 | 1;
          uint64_t v58 = v52 + 2;
          uint64_t v59 = v52;
          do
          {
            double v60 = *(double *)&v27[8 * v52] - *(double *)&v53[8 * v58];
            double v61 = sqrt(v54[v58] * v54[v58] + v60 * v60);
            if (v61 < result)
            {
              uint64_t result = v61;
              uint64_t v59 = v58;
            }
            uint64_t v62 = *(void *)&v53[8 * v59];
            *(void *)&v53[8 * v59] = *(void *)&v53[8 * v52];
            *(void *)&v53[8 * v52] = v62;
            double v63 = v54[v59];
            v54[v59] = v54[v52];
            v54[v52] = v63;
            uint64_t v64 = 8 * v59 + 8;
            uint64_t v65 = *(void *)&v53[v64];
            *(void *)&v53[v64] = *(void *)&v53[8 * v57];
            *(void *)&v53[8 * v57] = v65;
            double v66 = *(double *)((char *)v54 + v64);
            *(double *)((char *)v54 + v64) = v54[v57];
            v54[v57] = v66;
            ++v58;
          }
          while (v50 != v58);
        }
        v52 += 2;
      }
      while (v55 < v51);
    }
    else
    {
      unint64_t v55 = 0;
    }
    unint64_t v67 = v55 + v39;
    BOOL v68 = v13 >= v55 + v39;
    unint64_t v69 = v13 - (v55 + v39);
    if (!v68) {
      unint64_t v69 = 0;
    }
    uint64_t v70 = (char *)this + 8 * v34;
    DSPComplex v71 = &v9[v34];
    if (v33 >= v69) {
      unint64_t v72 = v69;
    }
    else {
      unint64_t v72 = v33;
    }
    if (v72)
    {
      uint64_t v73 = 0;
      DSPComplex v74 = (char *)a3 + 8 * v67;
      DSPComplex v75 = &realp[v67];
      do
      {
        double v76 = *(double *)&v70[8 * v73];
        uint64_t v77 = v73 + 1;
        double v78 = v76;
        uint64_t v79 = v73;
        if (v73 + 1 < v33)
        {
          double v80 = *(double *)&v74[8 * v73];
          double v81 = v75[v73] * v75[v73];
          double v82 = sqrt(v81 + (v80 - v76) * (v80 - v76));
          uint64_t v83 = v73 + 1;
          uint64_t v79 = v73;
          do
          {
            double v84 = sqrt(v81 + (v80 - *(double *)&v70[8 * v83]) * (v80 - *(double *)&v70[8 * v83]));
            if (v84 < v82)
            {
              double v82 = v84;
              uint64_t v79 = v83;
            }
            ++v83;
          }
          while (v33 != v83);
          double v78 = *(double *)&v70[8 * v79];
        }
        *(double *)&v70[8 * v79] = v76;
        *(double *)&v70[8 * v73] = v78;
        uint64_t result = v71[v79];
        v71[v79] = v71[v73];
        v71[v73++] = result;
      }
      while (v77 != v72);
    }
    unint64_t v85 = v12 - v55;
    unint64_t v86 = v33 - v72;
    if (v33 - v72 < v12 - v55) {
      unint64_t v85 = v33 - v72;
    }
    if (v85)
    {
      uint64_t v87 = 0;
      size_t v88 = &v27[8 * v55];
      unint64_t v89 = &v70[8 * v72];
      uint64_t v90 = &v71[v72];
      unint64_t v91 = ~v72 + v33;
      unsigned int v92 = (char *)this + 8 * (void)v8 + 8 * v72 - 8 * v33 + 8;
      do
      {
        double v93 = *(double *)&v89[8 * v87];
        uint64_t v94 = v87 + 1;
        double v95 = v93;
        uint64_t v96 = v87;
        if (v87 + 1 < v86)
        {
          uint64_t v97 = 0;
          double v98 = *(double *)&v88[8 * v87];
          double v99 = vabdd_f64(v98, v93);
          uint64_t v96 = v87;
          do
          {
            double v100 = *(double *)&v92[8 * v97];
            uint64_t v101 = v97 + 1;
            uint64_t v102 = v97 + 1 + v87;
            double v103 = vabdd_f64(v98, v100);
            if (v103 < v99)
            {
              uint64_t v96 = v102;
              double v99 = v103;
            }
            uint64_t v97 = v101;
          }
          while (v91 != v101);
          double v95 = *(double *)&v89[8 * v96];
        }
        *(double *)&v89[8 * v96] = v93;
        *(double *)&v89[8 * v87] = v95;
        uint64_t result = v90[v96];
        v90[v96] = v90[v87];
        v90[v87] = result;
        --v91;
        v92 += 8;
        ++v87;
      }
      while (v94 != v85);
    }
  }
  return result;
}